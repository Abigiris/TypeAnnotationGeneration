{
    "rouver-master/rouver/args.py": {
        "_create_arg_dict": {
            "name": "_create_arg_dict",
            "location": 193,
            "return": [
                "Dict[(str, _Argument)]"
            ],
            "arguments": {
                "args": [],
                "files": []
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 204,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "environ": [
                    "Dict[(str, Any)]"
                ],
                "argument_template": [
                    "typing.Sequence[Tuple[(str, Union[(Callable[([str], Any)], Literal[('file', 'file-or-str')])], Multiplicity)]]"
                ]
            }
        },
        "_create_argument_value_parser": {
            "name": "_create_argument_value_parser",
            "location": 335,
            "return": [
                "_ValueParserWrapper"
            ],
            "arguments": {
                "value_parser": [
                    "Union[(Callable[([str], Any)], Literal[('file', 'file-or-str')])]"
                ]
            }
        },
        "FileArgument.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "IO[bytes]"
                ],
                "filename": [
                    "str"
                ],
                "content_type": [
                    "str"
                ]
            }
        },
        "FileArgument.__getattr__": {
            "name": "__getattr__",
            "location": 61,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "ArgumentParser.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "ArgumentParser.parse_args": {
            "name": "parse_args",
            "location": 89,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "argument_template": [
                    "typing.Sequence[Tuple[(str, Union[(Callable[([str], Any)], Literal[('file', 'file-or-str')])], Multiplicity)]]"
                ]
            }
        },
        "_Argument.__init__": {
            "name": "__init__",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "_Argument.as_string": {
            "name": "as_string",
            "location": 176,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Argument.as_list": {
            "name": "as_list",
            "location": 181,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Argument.as_file": {
            "name": "as_file",
            "location": 186,
            "return": [
                "Tuple[(IO[bytes], str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ValueParserWrapper.parse_from_string": {
            "name": "parse_from_string",
            "location": 288,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        },
        "_ValueParserWrapper.parse_from_file": {
            "name": "parse_from_file",
            "location": 291,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "IO[bytes]"
                ],
                "filename": [
                    "str"
                ],
                "content_type": [
                    "str"
                ]
            }
        },
        "_FunctionValueParser.__init__": {
            "name": "__init__",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value_parser": [
                    "Callable[([str], Any)]"
                ]
            }
        },
        "_FunctionValueParser.parse_from_string": {
            "name": "parse_from_string",
            "location": 302,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "_FunctionValueParser.parse_from_file": {
            "name": "parse_from_file",
            "location": 308,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "IO[bytes]"
                ],
                "filename": [
                    "str"
                ],
                "content_type": [
                    "str"
                ]
            }
        },
        "_FileArgumentValueParser.parse_from_string": {
            "name": "parse_from_string",
            "location": 315,
            "return": [
                "FileArgument"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "_FileArgumentValueParser.parse_from_file": {
            "name": "parse_from_file",
            "location": 319,
            "return": [
                "FileArgument"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "IO[bytes]"
                ],
                "filename": [
                    "str"
                ],
                "content_type": [
                    "str"
                ]
            }
        },
        "_OptionalFileArgumentValueParser.parse_from_string": {
            "name": "parse_from_string",
            "location": 326,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "_OptionalFileArgumentValueParser.parse_from_file": {
            "name": "parse_from_file",
            "location": 329,
            "return": [
                "FileArgument"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "IO[bytes]"
                ],
                "filename": [
                    "str"
                ],
                "content_type": [
                    "str"
                ]
            }
        },
        "_ArgumentParser.__init__": {
            "name": "__init__",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "Dict[(str, _Argument)]"
                ],
                "name": [
                    "str"
                ],
                "value_parser": [
                    "Union[(Callable[([str], Any)], Literal[('file', 'file-or-str')])]"
                ]
            }
        },
        "_ArgumentParser.should_parse": {
            "name": "should_parse",
            "location": 359,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ArgumentParser.parse": {
            "name": "parse",
            "location": 362,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SingleArgumentParser.parse": {
            "name": "parse",
            "location": 367,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SingleArgumentParser.parse_single_arg": {
            "name": "parse_single_arg",
            "location": 370,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "_SingleArgumentParser.arg_supplied": {
            "name": "arg_supplied",
            "location": 382,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_RequiredArgumentParser.parse": {
            "name": "parse",
            "location": 390,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "_OptionalArgumentParser.should_parse": {
            "name": "should_parse",
            "location": 397,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_OptionalArgumentParser.parse": {
            "name": "parse",
            "location": 400,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MultiArgumentParser.parse": {
            "name": "parse",
            "location": 406,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "_AtLeastOneArgumentParser.parse": {
            "name": "parse",
            "location": 416,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ArgumentParser.parse_args.parse_template": {
            "name": "parse_template",
            "location": 143,
            "return": [],
            "arguments": {
                "name": [],
                "value_parser": [],
                "multiplicity": []
            }
        }
    },
    "rouver-master/rouver/exceptions.py": {
        "ArgumentsError.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arguments": [
                    "Mapping[(str, str)]"
                ]
            }
        }
    },
    "rouver-master/rouver/handler.py": {
        "RouteHandlerBase.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "Dict[(str, Any)]"
                ],
                "start_response": [
                    "Callable[(..., Callable[([bytes], object)])]"
                ]
            }
        },
        "RouteHandlerBase.__iter__": {
            "name": "__iter__",
            "location": 56,
            "return": [
                "typing.Iterator[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RouteHandlerBase._charset": {
            "name": "_charset",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouteHandlerBase.path_args": {
            "name": "path_args",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouteHandlerBase.wildcard_path": {
            "name": "wildcard_path",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouteHandlerBase.prepare_response": {
            "name": "prepare_response",
            "location": 77,
            "return": [
                "typing.Iterable[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RouteHandlerBase.parse_args": {
            "name": "parse_args",
            "location": 80,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "argument_template": [
                    "typing.Sequence[Tuple[(str, Union[(Callable[([str], Any)], Literal[('file', 'file-or-str')])], rouver.args.Multiplicity)]]"
                ]
            }
        },
        "RouteHandlerBase.parse_json_request": {
            "name": "parse_json_request",
            "location": 93,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "RouteHandlerBase.respond": {
            "name": "respond",
            "location": 108,
            "return": [
                "typing.Iterable[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RouteHandlerBase.respond_with_content": {
            "name": "respond_with_content",
            "location": 122,
            "return": [
                "typing.Iterable[bytes]"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "bytes"
                ]
            }
        },
        "RouteHandlerBase.respond_with_json": {
            "name": "respond_with_json",
            "location": 145,
            "return": [
                "typing.Iterable[bytes]"
            ],
            "arguments": {
                "self": [],
                "json": []
            }
        },
        "RouteHandlerBase.respond_with_html": {
            "name": "respond_with_html",
            "location": 159,
            "return": [
                "typing.Iterable[bytes]"
            ],
            "arguments": {
                "self": [],
                "html": [
                    "str"
                ]
            }
        },
        "RouteHandlerBase.created_at": {
            "name": "created_at",
            "location": 173,
            "return": [
                "typing.Iterable[bytes]"
            ],
            "arguments": {
                "self": [],
                "url_part": [
                    "str"
                ]
            }
        },
        "RouteHandlerBase.created_as_json": {
            "name": "created_as_json",
            "location": 176,
            "return": [
                "typing.Iterable[bytes]"
            ],
            "arguments": {
                "self": [],
                "url_part": [
                    "str"
                ],
                "json": []
            }
        },
        "RouteHandlerBase.temporary_redirect": {
            "name": "temporary_redirect",
            "location": 183,
            "return": [
                "typing.Iterable[bytes]"
            ],
            "arguments": {
                "self": [],
                "url_part": [
                    "str"
                ]
            }
        },
        "RouteHandlerBase.see_other": {
            "name": "see_other",
            "location": 186,
            "return": [
                "typing.Iterable[bytes]"
            ],
            "arguments": {
                "self": [],
                "url_part": [
                    "str"
                ]
            }
        }
    },
    "rouver-master/rouver/html.py": {
        "http_status_page": {
            "name": "http_status_page",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "status": [
                    "http.HTTPStatus"
                ]
            }
        },
        "created_at_page": {
            "name": "created_at_page",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "temporary_redirect_page": {
            "name": "temporary_redirect_page",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "see_other_page": {
            "name": "see_other_page",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "bad_arguments_page": {
            "name": "bad_arguments_page",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "arguments": [
                    "Mapping[(str, str)]"
                ]
            }
        },
        "bad_arguments_list": {
            "name": "bad_arguments_list",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "arguments": [
                    "Mapping[(str, str)]"
                ]
            }
        },
        "bad_arguments_list.format_item": {
            "name": "format_item",
            "location": 77,
            "return": [],
            "arguments": {
                "name": [],
                "error": []
            }
        }
    },
    "rouver-master/rouver/response.py": {
        "_location_header": {
            "name": "_location_header",
            "location": 20,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "request": [],
                "url": [
                    "str"
                ]
            }
        },
        "respond": {
            "name": "respond",
            "location": 24,
            "return": [
                "typing.Iterable[bytes]"
            ],
            "arguments": {
                "start_response": [
                    "Callable[(..., Callable[([bytes], object)])]"
                ]
            }
        },
        "respond_with_content": {
            "name": "respond_with_content",
            "location": 53,
            "return": [
                "typing.Iterable[bytes]"
            ],
            "arguments": {
                "start_response": [
                    "Callable[(..., Callable[([bytes], object)])]"
                ],
                "content": [
                    "bytes"
                ]
            }
        },
        "respond_with_json": {
            "name": "respond_with_json",
            "location": 79,
            "return": [
                "typing.Iterable[bytes]"
            ],
            "arguments": {
                "start_response": [
                    "Callable[(..., Callable[([bytes], object)])]"
                ],
                "json": []
            }
        },
        "respond_with_html": {
            "name": "respond_with_html",
            "location": 114,
            "return": [
                "typing.Iterable[bytes]"
            ],
            "arguments": {
                "start_response": [
                    "Callable[(..., Callable[([bytes], object)])]"
                ],
                "html": [
                    "str"
                ]
            }
        },
        "created_at": {
            "name": "created_at",
            "location": 140,
            "return": [
                "typing.Iterable[bytes]"
            ],
            "arguments": {
                "request": [],
                "start_response": [
                    "Callable[(..., Callable[([bytes], object)])]"
                ],
                "url_part": [
                    "str"
                ]
            }
        },
        "created_as_json": {
            "name": "created_as_json",
            "location": 164,
            "return": [
                "typing.Iterable[bytes]"
            ],
            "arguments": {
                "request": [],
                "start_response": [
                    "Callable[(..., Callable[([bytes], object)])]"
                ],
                "url_part": [
                    "str"
                ],
                "json": []
            }
        },
        "temporary_redirect": {
            "name": "temporary_redirect",
            "location": 185,
            "return": [
                "typing.Iterable[bytes]"
            ],
            "arguments": {
                "request": [],
                "start_response": [
                    "Callable[(..., Callable[([bytes], object)])]"
                ],
                "url_part": [
                    "str"
                ]
            }
        },
        "see_other": {
            "name": "see_other",
            "location": 203,
            "return": [
                "typing.Iterable[bytes]"
            ],
            "arguments": {
                "request": [],
                "start_response": [
                    "Callable[(..., Callable[([bytes], object)])]"
                ],
                "url_part": [
                    "str"
                ]
            }
        }
    },
    "rouver-master/rouver/router.py": {
        "_split_path": {
            "name": "_split_path",
            "location": 35,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "_parse_route_template_part": {
            "name": "_parse_route_template_part",
            "location": 121,
            "return": [
                "Tuple[(_TemplatePartType, str)]"
            ],
            "arguments": {
                "part": [
                    "str"
                ],
                "template_handlers": [
                    "typing.Mapping[(str, Callable[([Any, tuple, str], Any)])]"
                ]
            }
        },
        "_parse_path": {
            "name": "_parse_path",
            "location": 137,
            "return": [
                "Tuple[(List[Tuple[(_TemplatePartType, str)]], bool)]"
            ],
            "arguments": {
                "path_string": [
                    "str"
                ],
                "template_handlers": [
                    "typing.Mapping[(str, Callable[([Any, tuple, str], Any)])]"
                ]
            }
        },
        "_dispatch": {
            "name": "_dispatch",
            "location": 179,
            "return": [
                "typing.Iterable[bytes]"
            ],
            "arguments": {
                "environment": [
                    "Dict[(str, Any)]"
                ],
                "start_response": [
                    "Callable[(..., Callable[([bytes], object)])]"
                ],
                "handlers": [
                    "typing.Sequence[_RouteHandler]"
                ],
                "sub_routers": [
                    "typing.Sequence[_SubRouterHandler]"
                ],
                "template_handlers": [
                    "typing.Mapping[(str, Callable[([Any, tuple, str], Any)])]"
                ]
            }
        },
        "_respond_not_found": {
            "name": "_respond_not_found",
            "location": 385,
            "return": [
                "typing.Iterable[bytes]"
            ],
            "arguments": {
                "environment": [
                    "Dict[(str, Any)]"
                ],
                "start_response": [
                    "Callable[(..., Callable[([bytes], object)])]"
                ]
            }
        },
        "_respond_method_not_allowed": {
            "name": "_respond_method_not_allowed",
            "location": 394,
            "return": [
                "typing.Iterable[bytes]"
            ],
            "arguments": {
                "start_response": [
                    "Callable[(..., Callable[([bytes], object)])]"
                ],
                "method": [
                    "str"
                ],
                "allowed_methods": []
            }
        },
        "_respond_internal_server_error": {
            "name": "_respond_internal_server_error",
            "location": 412,
            "return": [
                "typing.Iterable[bytes]"
            ],
            "arguments": {
                "start_response": [
                    "Callable[(..., Callable[([bytes], object)])]"
                ]
            }
        },
        "_respond_http_exception": {
            "name": "_respond_http_exception",
            "location": 423,
            "return": [
                "typing.Iterable[bytes]"
            ],
            "arguments": {
                "start_response": [
                    "Callable[(..., Callable[([bytes], object)])]"
                ],
                "exception": []
            }
        },
        "_respond_arguments_error": {
            "name": "_respond_arguments_error",
            "location": 440,
            "return": [
                "typing.Iterable[bytes]"
            ],
            "arguments": {
                "start_response": [
                    "Callable[(..., Callable[([bytes], object)])]"
                ],
                "arguments": [
                    "typing.Mapping[(str, str)]"
                ]
            }
        },
        "Router.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Router.__call__": {
            "name": "__call__",
            "location": 48,
            "return": [
                "typing.Iterable[bytes]"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "Dict[(str, Any)]"
                ],
                "start_response": [
                    "Callable[(..., Callable[([bytes], object)])]"
                ]
            }
        },
        "Router.add_routes": {
            "name": "add_routes",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "routes": [
                    "typing.Sequence[Tuple[(str, str, Callable[([Dict[(str, Any)], Callable[(..., Callable[([bytes], object)])]], typing.Iterable[bytes])])]]"
                ]
            }
        },
        "Router.add_template_handler": {
            "name": "add_template_handler",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "handler": [
                    "Callable[([Any, tuple, str], Any)]"
                ]
            }
        },
        "Router.add_sub_router": {
            "name": "add_sub_router",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "sub_router": [
                    "Callable[([Dict[(str, Any)], Callable[(..., Callable[([bytes], object)])]], typing.Iterable[bytes])]"
                ]
            }
        },
        "_RouteHandler.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "route": [
                    "Tuple[(str, str, Callable[([Dict[(str, Any)], Callable[(..., Callable[([bytes], object)])]], typing.Iterable[bytes])])]"
                ],
                "template_handlers": [
                    "typing.Mapping[(str, Callable[([Any, tuple, str], Any)])]"
                ]
            }
        },
        "_SubRouterHandler.__init__": {
            "name": "__init__",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "router": [
                    "Callable[([Dict[(str, Any)], Callable[(..., Callable[([bytes], object)])]], typing.Iterable[bytes])]"
                ],
                "template_handlers": [
                    "typing.Mapping[(str, Callable[([Any, tuple, str], Any)])]"
                ]
            }
        },
        "_dispatch.find_route_and_call_handler": {
            "name": "find_route_and_call_handler",
            "location": 191,
            "return": [],
            "arguments": {}
        },
        "_dispatch.find_route": {
            "name": "find_route",
            "location": 212,
            "return": [],
            "arguments": {}
        },
        "_dispatch.call_handler": {
            "name": "call_handler",
            "location": 231,
            "return": [],
            "arguments": {
                "matcher": []
            }
        },
        "_dispatch.find_sub_router": {
            "name": "find_sub_router",
            "location": 239,
            "return": [],
            "arguments": {}
        },
        "_dispatch.call_sub_router": {
            "name": "call_sub_router",
            "location": 248,
            "return": [],
            "arguments": {
                "matcher": []
            }
        },
        "_RouteArguments.__init__": {
            "name": "__init__",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "template_handlers": [
                    "typing.Mapping[(str, Callable[([Any, tuple, str], Any)])]"
                ]
            }
        },
        "_RouteArguments.parse_argument": {
            "name": "parse_argument",
            "location": 269,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "paths": [
                    "tuple"
                ],
                "name": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "_MatcherBase.__init__": {
            "name": "__init__",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "match_path": [
                    "typing.Sequence[Tuple[(_TemplatePartType, str)]]"
                ],
                "request_path": [
                    "typing.Sequence[str]"
                ],
                "arguments": [
                    "_RouteArguments"
                ]
            }
        },
        "_MatcherBase._check_and_parse": {
            "name": "_check_and_parse",
            "location": 299,
            "return": [
                "Tuple[(bool, list)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MatcherBase._path_length_matches": {
            "name": "_path_length_matches",
            "location": 305,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MatcherBase._parse": {
            "name": "_parse",
            "location": 311,
            "return": [
                "Tuple[(bool, list)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MatcherBase._path_compare_iter": {
            "name": "_path_compare_iter",
            "location": 334,
            "return": [
                "typing.Iterator[Tuple[(Tuple[(_TemplatePartType, str)], str)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_MatcherBase.remaining_path": {
            "name": "remaining_path",
            "location": 340,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_RouteMatcher.__init__": {
            "name": "__init__",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "_RouteHandler"
                ],
                "path": [
                    "typing.Sequence[str]"
                ],
                "arguments": [
                    "_RouteArguments"
                ]
            }
        },
        "_RouteMatcher.call": {
            "name": "call",
            "location": 361,
            "return": [
                "typing.Iterable[bytes]"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "Dict[(str, Any)]"
                ],
                "start_response": [
                    "Callable[(..., Callable[([bytes], object)])]"
                ]
            }
        },
        "_SubRouterMatcher.__init__": {
            "name": "__init__",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "_SubRouterHandler"
                ],
                "path": [
                    "typing.Sequence[str]"
                ],
                "arguments": [
                    "_RouteArguments"
                ]
            }
        },
        "_SubRouterMatcher.call": {
            "name": "call",
            "location": 379,
            "return": [
                "typing.Iterable[bytes]"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "Dict[(str, Any)]"
                ],
                "start_response": [
                    "Callable[(..., Callable[([bytes], object)])]"
                ]
            }
        }
    },
    "rouver-master/rouver/status.py": {
        "status_line": {
            "name": "status_line",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "status": [
                    "http.HTTPStatus"
                ]
            }
        }
    },
    "rouver-master/rouver/test.py": {
        "create_request": {
            "name": "create_request",
            "location": 220,
            "return": [
                "TestRequest"
            ],
            "arguments": {
                "method": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "test_wsgi_app": {
            "name": "test_wsgi_app",
            "location": 417,
            "return": [
                "TestResponse"
            ],
            "arguments": {
                "app": [
                    "typing.Callable[([Dict[(str, Any)], typing.Callable[(..., typing.Callable[([bytes], object)])]], typing.Iterable[bytes])]"
                ],
                "request": [
                    "TestRequest"
                ]
            }
        },
        "test_wsgi_arguments": {
            "name": "test_wsgi_arguments",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "typing.Callable[([Dict[(str, Any)], typing.Callable[(..., typing.Callable[([bytes], object)])]], typing.Iterable[bytes])]"
                ],
                "request": [
                    "TestRequest"
                ],
                "arguments": [
                    "typing.Iterable[Tuple[(Union[(str, rouver.args.Multiplicity)], ...)]]"
                ]
            }
        },
        "TestRequest.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "TestRequest.body": {
            "name": "body",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "body": []
            }
        },
        "TestRequest.set_json_request": {
            "name": "set_json_request",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "body": []
            }
        },
        "TestRequest.set_env_var": {
            "name": "set_env_var",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": []
            }
        },
        "TestRequest.set_header": {
            "name": "set_header",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "TestRequest.add_argument": {
            "name": "add_argument",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": []
            }
        },
        "TestRequest.add_file_argument": {
            "name": "add_file_argument",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "content": [
                    "bytes"
                ],
                "content_type": [
                    "str"
                ]
            }
        },
        "TestRequest.clear_arguments": {
            "name": "clear_arguments",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequest.to_environment": {
            "name": "to_environment",
            "location": 126,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequest._determine_content_type": {
            "name": "_determine_content_type",
            "location": 162,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequest._build_query_string": {
            "name": "_build_query_string",
            "location": 173,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequest._build_multipart_body": {
            "name": "_build_multipart_body",
            "location": 179,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequest._ensure_boundary": {
            "name": "_ensure_boundary",
            "location": 214,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResponse.__init__": {
            "name": "__init__",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status_line": [
                    "str"
                ],
                "headers": [
                    "List[Tuple[(str, str)]]"
                ]
            }
        },
        "TestResponse.get_header_value": {
            "name": "get_header_value",
            "location": 234,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "TestResponse.parse_json_body": {
            "name": "parse_json_body",
            "location": 240,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResponse.assert_status": {
            "name": "assert_status",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "http.HTTPStatus"
                ]
            }
        },
        "TestResponse.assert_header_not_set": {
            "name": "assert_header_not_set",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "TestResponse.assert_header_equal": {
            "name": "assert_header_equal",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "expected_value": [
                    "str"
                ]
            }
        },
        "TestResponse._assert_location_response": {
            "name": "_assert_location_response",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_status": [
                    "http.HTTPStatus"
                ],
                "expected_location": [
                    "str"
                ]
            }
        },
        "TestResponse.assert_created_at": {
            "name": "assert_created_at",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_location": [
                    "str"
                ]
            }
        },
        "TestResponse.assert_see_other": {
            "name": "assert_see_other",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_location": [
                    "str"
                ]
            }
        },
        "TestResponse.assert_temporary_redirect": {
            "name": "assert_temporary_redirect",
            "location": 309,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_location": [
                    "str"
                ]
            }
        },
        "TestResponse.assert_content_type": {
            "name": "assert_content_type",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content_type": [
                    "str"
                ]
            }
        },
        "TestResponse.assert_set_cookie": {
            "name": "assert_set_cookie",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_name": [
                    "str"
                ],
                "expected_value": [
                    "str"
                ]
            }
        },
        "test_wsgi_app.write": {
            "name": "write",
            "location": 421,
            "return": [],
            "arguments": {
                "b": []
            }
        },
        "test_wsgi_app.start_response": {
            "name": "start_response",
            "location": 428,
            "return": [],
            "arguments": {
                "status": [],
                "response_headers": [],
                "exc_info": []
            }
        },
        "test_wsgi_arguments.is_required": {
            "name": "is_required",
            "location": 462,
            "return": [],
            "arguments": {
                "argument": []
            }
        },
        "test_wsgi_arguments.setup_args": {
            "name": "setup_args",
            "location": 468,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "test_wsgi_arguments.setup_required_args_except": {
            "name": "setup_required_args_except",
            "location": 477,
            "return": [],
            "arguments": {
                "argument_name": []
            }
        },
        "test_wsgi_arguments.call_expect_success": {
            "name": "call_expect_success",
            "location": 482,
            "return": [],
            "arguments": {}
        },
        "test_wsgi_arguments.call_expect_bad_request": {
            "name": "call_expect_bad_request",
            "location": 494,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "test_wsgi_arguments.assert_success_required_arguments": {
            "name": "assert_success_required_arguments",
            "location": 499,
            "return": [],
            "arguments": {}
        },
        "test_wsgi_arguments.assert_success_all_arguments": {
            "name": "assert_success_all_arguments",
            "location": 503,
            "return": [],
            "arguments": {}
        },
        "test_wsgi_arguments.assert_failure_if_argument_required_but_missing": {
            "name": "assert_failure_if_argument_required_but_missing",
            "location": 507,
            "return": [],
            "arguments": {
                "argument": []
            }
        },
        "test_wsgi_arguments.assert_failure_if_argument_invalid": {
            "name": "assert_failure_if_argument_invalid",
            "location": 518,
            "return": [],
            "arguments": {
                "argument": []
            }
        },
        "RouterTestCase.setup_router": {
            "name": "setup_router",
            "location": 539,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTestCase.create_router": {
            "name": "create_router",
            "location": 543,
            "return": [
                "rouver.router.Router"
            ],
            "arguments": {
                "self": []
            }
        },
        "RouterTestCase.send_request": {
            "name": "send_request",
            "location": 546,
            "return": [
                "TestResponse"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "TestRequest"
                ]
            }
        },
        "RouterTestCase.assert_arguments": {
            "name": "assert_arguments",
            "location": 549,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "TestRequest"
                ],
                "arguments": [
                    "typing.Iterable[Tuple[(Union[(str, rouver.args.Multiplicity)], ...)]]"
                ]
            }
        },
        "TestResponse.assert_set_cookie.assert_flag": {
            "name": "assert_flag",
            "location": 362,
            "return": [],
            "arguments": {
                "flag": [],
                "name_": []
            }
        },
        "TestResponse.assert_set_cookie.find_arg": {
            "name": "find_arg",
            "location": 374,
            "return": [],
            "arguments": {
                "arg_name": []
            }
        },
        "TestResponse.assert_set_cookie.expect_arg": {
            "name": "expect_arg",
            "location": 380,
            "return": [],
            "arguments": {
                "arg_name": []
            }
        }
    },
    "rouver-master/rouver/types.py": {},
    "rouver-master/rouver/util.py": {
        "absolute_url": {
            "name": "absolute_url",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [],
                "path": [
                    "str"
                ]
            }
        }
    },
    "rouver-master/rouver/__init__.py": {},
    "rouver-master/rouver_test/args.py": {
        "ParseArgsTest.setup_environment": {
            "name": "setup_environment",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.add_path_argument": {
            "name": "add_path_argument",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "ParseArgsTest.setup_empty_urlencoded_request": {
            "name": "setup_empty_urlencoded_request",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.setup_urlencoded_request": {
            "name": "setup_urlencoded_request",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "ParseArgsTest.setup_multipart_request": {
            "name": "setup_multipart_request",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": []
            }
        },
        "ParseArgsTest.setup_multipart_file_request": {
            "name": "setup_multipart_file_request",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "filename": [
                    "str"
                ],
                "file_content": [
                    "str"
                ],
                "content_type": [
                    "str"
                ]
            }
        },
        "ParseArgsTest.parse_nothing": {
            "name": "parse_nothing",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.invalid_value_parser": {
            "name": "invalid_value_parser",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.parse_str_arg": {
            "name": "parse_str_arg",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.parse_unicode_arg": {
            "name": "parse_unicode_arg",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.parse_int_arg": {
            "name": "parse_int_arg",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.parse_invalid_int_arg": {
            "name": "parse_invalid_int_arg",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.required_argument_missing": {
            "name": "required_argument_missing",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.optional_argument": {
            "name": "optional_argument",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.optional_argument_missing": {
            "name": "optional_argument_missing",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.optional_argument_empty": {
            "name": "optional_argument_empty",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.any_argument_empty": {
            "name": "any_argument_empty",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.any_argument": {
            "name": "any_argument",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.required_any_argument": {
            "name": "required_any_argument",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.required_any_argument_missing": {
            "name": "required_any_argument_missing",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.urlencoded_post_request": {
            "name": "urlencoded_post_request",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.urlencoded_post_request_with_umlauts": {
            "name": "urlencoded_post_request_with_umlauts",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.urlencoded_patch_request": {
            "name": "urlencoded_patch_request",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.urlencoded_delete_request": {
            "name": "urlencoded_delete_request",
            "location": 218,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.empty_delete__optional": {
            "name": "empty_delete__optional",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.empty_delete__required_not_supplied": {
            "name": "empty_delete__required_not_supplied",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.urlencoded_put_request": {
            "name": "urlencoded_put_request",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.urlencoded_put_request_with_umlauts": {
            "name": "urlencoded_put_request_with_umlauts",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.multipart_post_request": {
            "name": "multipart_post_request",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.multipart_post_request_with_umlauts": {
            "name": "multipart_post_request_with_umlauts",
            "location": 273,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.multipart_put_request": {
            "name": "multipart_put_request",
            "location": 280,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.multipart_put_request_with_umlauts": {
            "name": "multipart_put_request_with_umlauts",
            "location": 287,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.multipart_multiple_arguments": {
            "name": "multipart_multiple_arguments",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.multipart__optional_argument_empty": {
            "name": "multipart__optional_argument_empty",
            "location": 301,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.multipart_post_request_with_file": {
            "name": "multipart_post_request_with_file",
            "location": 308,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.multipart_post_request_with_optional_file": {
            "name": "multipart_post_request_with_optional_file",
            "location": 323,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.multipart_post_request_with_empty_file": {
            "name": "multipart_post_request_with_empty_file",
            "location": 338,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.multipart_post_request_with_file_and_umlauts": {
            "name": "multipart_post_request_with_file_and_umlauts",
            "location": 348,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.multipart_put_request_with_file": {
            "name": "multipart_put_request_with_file",
            "location": 361,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.read_file_as_value": {
            "name": "read_file_as_value",
            "location": 376,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.read_value_as_file": {
            "name": "read_value_as_file",
            "location": 385,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.read_value_as_file_with_umlauts": {
            "name": "read_value_as_file_with_umlauts",
            "location": 396,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.post_wrong_content_type__optional_args": {
            "name": "post_wrong_content_type__optional_args",
            "location": 407,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.post_wrong_content_type__required_args": {
            "name": "post_wrong_content_type__required_args",
            "location": 420,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.patch_wrong_content_type__optional_args": {
            "name": "patch_wrong_content_type__optional_args",
            "location": 429,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.patch_wrong_content_type__required_args": {
            "name": "patch_wrong_content_type__required_args",
            "location": 438,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.no_exhaustive_check": {
            "name": "no_exhaustive_check",
            "location": 447,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.exhaustive_check__succeeds": {
            "name": "exhaustive_check__succeeds",
            "location": 454,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.exhaustive_check__fails": {
            "name": "exhaustive_check__fails",
            "location": 464,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParseArgsTest.unsupported_method": {
            "name": "unsupported_method",
            "location": 479,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentParserTest.parse_args__post_twice": {
            "name": "parse_args__post_twice",
            "location": 487,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentParserTest.exhaustive_with_previous_calls": {
            "name": "exhaustive_with_previous_calls",
            "location": 506,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rouver-master/rouver_test/exceptions.py": {
        "ArgumentsErrorTest.message": {
            "name": "message",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ArgumentsErrorTest.arguments": {
            "name": "arguments",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rouver-master/rouver_test/handler.py": {
        "StubHandler.prepare_response": {
            "name": "prepare_response",
            "location": 20,
            "return": [
                "typing.Iterable[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RouteHandlerBaseTest.setup_environment": {
            "name": "setup_environment",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouteHandlerBaseTest.call_handler": {
            "name": "call_handler",
            "location": 31,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "handler_class": [
                    "Type[rouver.handler.RouteHandlerBase]"
                ]
            }
        },
        "RouteHandlerBaseTest.attributes": {
            "name": "attributes",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouteHandlerBaseTest.path_args__from_environment": {
            "name": "path_args__from_environment",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouteHandlerBaseTest.path_args__default": {
            "name": "path_args__default",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouteHandlerBaseTest.path_args__not_a_list": {
            "name": "path_args__not_a_list",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouteHandlerBaseTest.wildcard_path__from_environment": {
            "name": "wildcard_path__from_environment",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouteHandlerBaseTest.wildcard_path__decode": {
            "name": "wildcard_path__decode",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouteHandlerBaseTest.wildcard_path__decode_errors": {
            "name": "wildcard_path__decode_errors",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouteHandlerBaseTest.wildcard_path__default": {
            "name": "wildcard_path__default",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouteHandlerBaseTest.wildcard_path__not_a_string": {
            "name": "wildcard_path__not_a_string",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouteHandlerBaseTest.parse_args__post_twice": {
            "name": "parse_args__post_twice",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouteHandlerBaseTest.parse_args__works_in_response_handler": {
            "name": "parse_args__works_in_response_handler",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouteHandlerBaseTest.parse_json_request__default_encoding": {
            "name": "parse_json_request__default_encoding",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouteHandlerBaseTest.parse_json_request__explicit_encoding": {
            "name": "parse_json_request__explicit_encoding",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouteHandlerBaseTest.parse_json_request__unknown_encoding": {
            "name": "parse_json_request__unknown_encoding",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouteHandlerBaseTest.parse_json_request__no_content_type": {
            "name": "parse_json_request__no_content_type",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouteHandlerBaseTest.parse_json_request__wrong_content_type": {
            "name": "parse_json_request__wrong_content_type",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouteHandlerBaseTest.parse_json_request__invalid_data": {
            "name": "parse_json_request__invalid_data",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouteHandlerBaseTest.respond": {
            "name": "respond",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouteHandlerBaseTest.parse_args__works_in_response_handler.MyHandler.prepare_response": {
            "name": "prepare_response",
            "location": 108,
            "return": [
                "typing.Iterable[bytes]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rouver-master/rouver_test/html.py": {
        "HTTPStatusPageTest.default": {
            "name": "default",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPStatusPageTest.message_and_html_message": {
            "name": "message_and_html_message",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPStatusPageTest.message": {
            "name": "message",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPStatusPageTest.html_message": {
            "name": "html_message",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPStatusPageTest.html_content": {
            "name": "html_content",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPStatusPageTest.html_message_and_html_content": {
            "name": "html_message_and_html_content",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CreatedAtPageTest.encode_url": {
            "name": "encode_url",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporaryRedirectPageTest.encode_url": {
            "name": "encode_url",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeeOtherPageTest.encode_url": {
            "name": "encode_url",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BadArgumentsListTest.empty_dict": {
            "name": "empty_dict",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BadArgumentsListTest.one_item": {
            "name": "one_item",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BadArgumentsListTest.multiple_items_alphabetically": {
            "name": "multiple_items_alphabetically",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BadArgumentsListTest.escape_html": {
            "name": "escape_html",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rouver-master/rouver_test/response.py": {
        "RespondTest.default_status": {
            "name": "default_status",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RespondTest.custom_status": {
            "name": "custom_status",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RespondTest.extra_headers": {
            "name": "extra_headers",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RespondTest.no_content_type": {
            "name": "no_content_type",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RespondTest.content_type": {
            "name": "content_type",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RespondTest.content_type_in_extra_headers": {
            "name": "content_type_in_extra_headers",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RespondTest.error_if_content_type_also_in_extra_headers": {
            "name": "error_if_content_type_also_in_extra_headers",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RespondTest.response": {
            "name": "response",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RespondWithContentTest.default_status": {
            "name": "default_status",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RespondWithContentTest.custom_status": {
            "name": "custom_status",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RespondWithContentTest.default_content_type": {
            "name": "default_content_type",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RespondWithContentTest.custom_content_type": {
            "name": "custom_content_type",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RespondWithContentTest.content_length": {
            "name": "content_length",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RespondWithContentTest.extra_headers": {
            "name": "extra_headers",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RespondWithContentTest.return_value": {
            "name": "return_value",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RespondWithJSONTest.default_status": {
            "name": "default_status",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RespondWithJSONTest.custom_status": {
            "name": "custom_status",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RespondWithJSONTest.content_type": {
            "name": "content_type",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RespondWithJSONTest.content_length": {
            "name": "content_length",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RespondWithJSONTest.extra_headers": {
            "name": "extra_headers",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RespondWithJSONTest.json_as_bytes": {
            "name": "json_as_bytes",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RespondWithJSONTest.json_as_str": {
            "name": "json_as_str",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RespondWithJSONTest.json_as_object": {
            "name": "json_as_object",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RespondWithHTMLTest.default_status": {
            "name": "default_status",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RespondWithHTMLTest.custom_status": {
            "name": "custom_status",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RespondWithHTMLTest.content_type": {
            "name": "content_type",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RespondWithHTMLTest.content_length": {
            "name": "content_length",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RespondWithHTMLTest.extra_headers": {
            "name": "extra_headers",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RespondWithHTMLTest.return_value": {
            "name": "return_value",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RespondWithHTMLTest.return_value_encoding": {
            "name": "return_value_encoding",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CreatedAtTest.setup_environment": {
            "name": "setup_environment",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CreatedAtTest.headers": {
            "name": "headers",
            "location": 232,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CreatedAtTest.absolute_url": {
            "name": "absolute_url",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CreatedAtTest.url_without_leading_slash": {
            "name": "url_without_leading_slash",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CreatedAtTest.umlauts_in_url": {
            "name": "umlauts_in_url",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CreatedAtTest.extra_headers": {
            "name": "extra_headers",
            "location": 271,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CreatedAtTest.html": {
            "name": "html",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CreatedAsJSONTest.setup_environment": {
            "name": "setup_environment",
            "location": 291,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CreatedAsJSONTest.headers": {
            "name": "headers",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CreatedAsJSONTest.absolute_url": {
            "name": "absolute_url",
            "location": 309,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CreatedAsJSONTest.url_without_leading_slash": {
            "name": "url_without_leading_slash",
            "location": 319,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CreatedAsJSONTest.umlauts_in_url": {
            "name": "umlauts_in_url",
            "location": 328,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CreatedAsJSONTest.extra_headers": {
            "name": "extra_headers",
            "location": 337,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CreatedAsJSONTest.json": {
            "name": "json",
            "location": 349,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporaryRedirectTest.setup_environment": {
            "name": "setup_environment",
            "location": 360,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporaryRedirectTest.headers": {
            "name": "headers",
            "location": 365,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporaryRedirectTest.absolute_url": {
            "name": "absolute_url",
            "location": 378,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporaryRedirectTest.url_without_leading_slash": {
            "name": "url_without_leading_slash",
            "location": 388,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporaryRedirectTest.umlauts_in_url": {
            "name": "umlauts_in_url",
            "location": 397,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporaryRedirectTest.do_not_encode_cgi_arguments": {
            "name": "do_not_encode_cgi_arguments",
            "location": 406,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporaryRedirectTest.extra_headers": {
            "name": "extra_headers",
            "location": 417,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemporaryRedirectTest.html": {
            "name": "html",
            "location": 428,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeeOtherTest.setup_environment": {
            "name": "setup_environment",
            "location": 438,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeeOtherTest.headers": {
            "name": "headers",
            "location": 443,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeeOtherTest.absolute_url": {
            "name": "absolute_url",
            "location": 456,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeeOtherTest.url_without_leading_slash": {
            "name": "url_without_leading_slash",
            "location": 464,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeeOtherTest.url_path_without_trailing_slash": {
            "name": "url_path_without_trailing_slash",
            "location": 474,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeeOtherTest.umlauts_in_url": {
            "name": "umlauts_in_url",
            "location": 484,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeeOtherTest.extra_headers": {
            "name": "extra_headers",
            "location": 493,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeeOtherTest.html": {
            "name": "html",
            "location": 504,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rouver-master/rouver_test/router.py": {
        "handle_success": {
            "name": "handle_success",
            "location": 32,
            "return": [
                "typing.Iterable[bytes]"
            ],
            "arguments": {
                "_": [
                    "Dict[(str, Any)]"
                ],
                "start_response": [
                    "Callable[(..., Callable[([bytes], object)])]"
                ]
            }
        },
        "handle_empty_path": {
            "name": "handle_empty_path",
            "location": 39,
            "return": [
                "typing.Iterable[bytes]"
            ],
            "arguments": {
                "environ": [
                    "Dict[(str, Any)]"
                ],
                "start_response": [
                    "Callable[(..., Callable[([bytes], object)])]"
                ]
            }
        },
        "fail_if_called": {
            "name": "fail_if_called",
            "location": 47,
            "return": [
                "typing.Iterable[bytes]"
            ],
            "arguments": {
                "_": [
                    "Dict[(str, Any)]"
                ],
                "__": [
                    "Callable[(..., Callable[([bytes], object)])]"
                ]
            }
        },
        "RouterTest.setup_router": {
            "name": "setup_router",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.disable_logger": {
            "name": "disable_logger",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RouterTest._create_path_checker": {
            "name": "_create_path_checker",
            "location": 63,
            "return": [
                "Callable[([Dict[(str, Any)], Callable[(..., Callable[([bytes], Any)])]], typing.Iterable[bytes])]"
            ],
            "arguments": {
                "self": [],
                "expected_path": [
                    "str"
                ]
            }
        },
        "RouterTest.handle_wsgi": {
            "name": "handle_wsgi",
            "location": 73,
            "return": [
                "typing.Iterable[bytes]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "RouterTest.not_found_response_page": {
            "name": "not_found_response_page",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.not_found_escape_path": {
            "name": "not_found_escape_path",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.no_routes": {
            "name": "no_routes",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.handler_request": {
            "name": "handler_request",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.empty_route": {
            "name": "empty_route",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.root_route": {
            "name": "root_route",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.first_level": {
            "name": "first_level",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.first_level__trailing_slash": {
            "name": "first_level__trailing_slash",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.first_level_wrong_path": {
            "name": "first_level_wrong_path",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.level_mismatch_1": {
            "name": "level_mismatch_1",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.level_mismatch_2": {
            "name": "level_mismatch_2",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.decode_path": {
            "name": "decode_path",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.invalid_path_encoding": {
            "name": "invalid_path_encoding",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.wrong_method_response_page": {
            "name": "wrong_method_response_page",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.wrong_method_escape_method": {
            "name": "wrong_method_escape_method",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.wrong_method": {
            "name": "wrong_method",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.wrong_method__multiple_matches": {
            "name": "wrong_method__multiple_matches",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.call_right_method": {
            "name": "call_right_method",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.unknown_template": {
            "name": "unknown_template",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.no_template": {
            "name": "no_template",
            "location": 269,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.template": {
            "name": "template",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.multiple_templates": {
            "name": "multiple_templates",
            "location": 304,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.template_handler_is_passed_decoded_value": {
            "name": "template_handler_is_passed_decoded_value",
            "location": 326,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.template_handler_is_not_passed_an_invalid_value": {
            "name": "template_handler_is_not_passed_an_invalid_value",
            "location": 337,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.template_value_error": {
            "name": "template_value_error",
            "location": 348,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.template_multiple_matches": {
            "name": "template_multiple_matches",
            "location": 359,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.template_multiple_matches__match_first": {
            "name": "template_multiple_matches__match_first",
            "location": 376,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.template_call_once_per_value": {
            "name": "template_call_once_per_value",
            "location": 390,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.template_call_twice_for_differing_values": {
            "name": "template_call_twice_for_differing_values",
            "location": 409,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.no_wildcard_path": {
            "name": "no_wildcard_path",
            "location": 430,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.wildcard_path__no_trailing_slash": {
            "name": "wildcard_path__no_trailing_slash",
            "location": 443,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.wildcard_path__with_trailing_slash": {
            "name": "wildcard_path__with_trailing_slash",
            "location": 457,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.wildcard_path__additional_path": {
            "name": "wildcard_path__additional_path",
            "location": 471,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.wildcard_path__with_template": {
            "name": "wildcard_path__with_template",
            "location": 485,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.wildcard_path__too_short": {
            "name": "wildcard_path__too_short",
            "location": 500,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.wildcard_path__does_not_match": {
            "name": "wildcard_path__does_not_match",
            "location": 506,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.wildcard_path__not_at_end": {
            "name": "wildcard_path__not_at_end",
            "location": 512,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.wildcard__before_more_specific": {
            "name": "wildcard__before_more_specific",
            "location": 517,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.wildcard__after_more_specific": {
            "name": "wildcard__after_more_specific",
            "location": 528,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.sub_router": {
            "name": "sub_router",
            "location": 541,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.sub_router__no_match": {
            "name": "sub_router__no_match",
            "location": 550,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.sub_router__base_with_slash": {
            "name": "sub_router__base_with_slash",
            "location": 559,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.sub_router__base_without_slash": {
            "name": "sub_router__base_without_slash",
            "location": 568,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.sub_router__path_info": {
            "name": "sub_router__path_info",
            "location": 577,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.sub_router__path_info_encoding": {
            "name": "sub_router__path_info_encoding",
            "location": 590,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.sub_router__template_in_super_router": {
            "name": "sub_router__template_in_super_router",
            "location": 604,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.sub_router__template_in_sub_router": {
            "name": "sub_router__template_in_sub_router",
            "location": 626,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.sub_router__path_component": {
            "name": "sub_router__path_component",
            "location": 647,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.sub_router__match_after_other_routes": {
            "name": "sub_router__match_after_other_routes",
            "location": 656,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.sub_router__accepts_any_wsgi_app": {
            "name": "sub_router__accepts_any_wsgi_app",
            "location": 666,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.sub_router__escaped_path": {
            "name": "sub_router__escaped_path",
            "location": 677,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.internal_error_page": {
            "name": "internal_error_page",
            "location": 688,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.template_key_error_with_error_handling": {
            "name": "template_key_error_with_error_handling",
            "location": 712,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.template_key_error_without_error_handling": {
            "name": "template_key_error_without_error_handling",
            "location": 724,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.handler_key_error_with_error_handling": {
            "name": "handler_key_error_with_error_handling",
            "location": 736,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.handler_key_error_without_error_handling": {
            "name": "handler_key_error_without_error_handling",
            "location": 746,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.http_error": {
            "name": "http_error",
            "location": 756,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest.arguments_error": {
            "name": "arguments_error",
            "location": 787,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RouterTest._create_path_checker.handle": {
            "name": "handle",
            "location": 64,
            "return": [],
            "arguments": {
                "environ": [],
                "sr": []
            }
        },
        "RouterTest.handler_request.handle": {
            "name": "handle",
            "location": 115,
            "return": [],
            "arguments": {
                "environ": [],
                "start_response": []
            }
        },
        "RouterTest.first_level.handle": {
            "name": "handle",
            "location": 141,
            "return": [],
            "arguments": {
                "environ": [],
                "start_response": []
            }
        },
        "RouterTest.first_level__trailing_slash.handle": {
            "name": "handle",
            "location": 154,
            "return": [],
            "arguments": {
                "environ": [],
                "start_response": []
            }
        },
        "RouterTest.no_template.handle": {
            "name": "handle",
            "location": 270,
            "return": [],
            "arguments": {
                "environ": [],
                "start_response": []
            }
        },
        "RouterTest.template.handle": {
            "name": "handle",
            "location": 283,
            "return": [],
            "arguments": {
                "environ": [],
                "start_response": []
            }
        },
        "RouterTest.template.handle_path": {
            "name": "handle_path",
            "location": 290,
            "return": [],
            "arguments": {
                "request": [],
                "paths": [],
                "path": []
            }
        },
        "RouterTest.multiple_templates.handle": {
            "name": "handle",
            "location": 305,
            "return": [],
            "arguments": {
                "environ": [],
                "start_response": []
            }
        },
        "RouterTest.multiple_templates.handle_path": {
            "name": "handle_path",
            "location": 312,
            "return": [],
            "arguments": {
                "_": [],
                "paths": [],
                "__": []
            }
        },
        "RouterTest.template_handler_is_passed_decoded_value.handle_path": {
            "name": "handle_path",
            "location": 327,
            "return": [],
            "arguments": {
                "_": [],
                "__": [],
                "v": []
            }
        },
        "RouterTest.template_handler_is_not_passed_an_invalid_value.handle_path": {
            "name": "handle_path",
            "location": 338,
            "return": [],
            "arguments": {
                "_": [],
                "__": [],
                "v": []
            }
        },
        "RouterTest.template_value_error.raise_value_error": {
            "name": "raise_value_error",
            "location": 349,
            "return": [],
            "arguments": {
                "_": [],
                "__": [],
                "___": []
            }
        },
        "RouterTest.template_multiple_matches.raise_value_error": {
            "name": "raise_value_error",
            "location": 360,
            "return": [],
            "arguments": {
                "_": [],
                "__": [],
                "___": []
            }
        },
        "RouterTest.template_call_once_per_value.increase_count": {
            "name": "increase_count",
            "location": 393,
            "return": [],
            "arguments": {
                "_": [],
                "__": [],
                "___": []
            }
        },
        "RouterTest.template_call_twice_for_differing_values.increase_count": {
            "name": "increase_count",
            "location": 412,
            "return": [],
            "arguments": {
                "_": [],
                "__": [],
                "___": []
            }
        },
        "RouterTest.no_wildcard_path.handle": {
            "name": "handle",
            "location": 431,
            "return": [],
            "arguments": {
                "environ": [],
                "start_response": []
            }
        },
        "RouterTest.wildcard_path__no_trailing_slash.handle": {
            "name": "handle",
            "location": 444,
            "return": [],
            "arguments": {
                "environ": [],
                "start_response": []
            }
        },
        "RouterTest.wildcard_path__with_trailing_slash.handle": {
            "name": "handle",
            "location": 458,
            "return": [],
            "arguments": {
                "environ": [],
                "start_response": []
            }
        },
        "RouterTest.wildcard_path__additional_path.handle": {
            "name": "handle",
            "location": 472,
            "return": [],
            "arguments": {
                "environ": [],
                "start_response": []
            }
        },
        "RouterTest.wildcard_path__with_template.handle": {
            "name": "handle",
            "location": 486,
            "return": [],
            "arguments": {
                "environ": [],
                "start_response": []
            }
        },
        "RouterTest.sub_router__path_info.app": {
            "name": "app",
            "location": 578,
            "return": [],
            "arguments": {
                "env": [],
                "sr": []
            }
        },
        "RouterTest.sub_router__path_info_encoding.app": {
            "name": "app",
            "location": 593,
            "return": [],
            "arguments": {
                "env": [],
                "sr": []
            }
        },
        "RouterTest.sub_router__template_in_super_router.handle": {
            "name": "handle",
            "location": 605,
            "return": [],
            "arguments": {
                "environ": [],
                "start_response": []
            }
        },
        "RouterTest.sub_router__template_in_super_router.tmpl": {
            "name": "tmpl",
            "location": 612,
            "return": [],
            "arguments": {
                "_": [],
                "path": [],
                "v": []
            }
        },
        "RouterTest.sub_router__template_in_sub_router.handle": {
            "name": "handle",
            "location": 627,
            "return": [],
            "arguments": {
                "environ": [],
                "start_response": []
            }
        },
        "RouterTest.sub_router__template_in_sub_router.tmpl": {
            "name": "tmpl",
            "location": 634,
            "return": [],
            "arguments": {
                "_": [],
                "path": [],
                "v": []
            }
        },
        "RouterTest.sub_router__accepts_any_wsgi_app.sub": {
            "name": "sub",
            "location": 667,
            "return": [],
            "arguments": {
                "environ": [],
                "sr": []
            }
        },
        "RouterTest.internal_error_page.handle": {
            "name": "handle",
            "location": 689,
            "return": [],
            "arguments": {
                "_": [],
                "__": []
            }
        },
        "RouterTest.template_key_error_with_error_handling.raise_key_error": {
            "name": "raise_key_error",
            "location": 713,
            "return": [],
            "arguments": {
                "_": [],
                "__": [],
                "___": []
            }
        },
        "RouterTest.template_key_error_without_error_handling.raise_key_error": {
            "name": "raise_key_error",
            "location": 725,
            "return": [],
            "arguments": {
                "_": [],
                "__": [],
                "___": []
            }
        },
        "RouterTest.handler_key_error_with_error_handling.handle": {
            "name": "handle",
            "location": 737,
            "return": [],
            "arguments": {
                "_": [],
                "__": []
            }
        },
        "RouterTest.handler_key_error_without_error_handling.handle": {
            "name": "handle",
            "location": 747,
            "return": [],
            "arguments": {
                "_": [],
                "__": []
            }
        },
        "RouterTest.http_error.handle": {
            "name": "handle",
            "location": 757,
            "return": [],
            "arguments": {
                "_": [],
                "__": []
            }
        },
        "RouterTest.arguments_error.handle": {
            "name": "handle",
            "location": 788,
            "return": [],
            "arguments": {
                "_": [],
                "__": []
            }
        }
    },
    "rouver-master/rouver_test/status.py": {
        "StatusLineTest.status_line": {
            "name": "status_line",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "rouver-master/rouver_test/test.py": {
        "assert_wsgi_input_stream": {
            "name": "assert_wsgi_input_stream",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": [
                    "object"
                ]
            }
        },
        "_get_exc_info": {
            "name": "_get_exc_info",
            "location": 933,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {}
        },
        "TestRequestTest.attributes": {
            "name": "attributes",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequestTest.capitalize_method": {
            "name": "capitalize_method",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequestTest.to_environment__minimal": {
            "name": "to_environment__minimal",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequestTest.to_environment__post": {
            "name": "to_environment__post",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequestTest.to_environment__post_urlencoded": {
            "name": "to_environment__post_urlencoded",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequestTest.set_env_var": {
            "name": "set_env_var",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequestTest.set_env_var__priority": {
            "name": "set_env_var__priority",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequestTest.set_header": {
            "name": "set_header",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequestTest.set_header__content_type": {
            "name": "set_header__content_type",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequestTest.add_argument__content_type": {
            "name": "add_argument__content_type",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequestTest.add_file_argument__content_type": {
            "name": "add_file_argument__content_type",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequestTest.add_argument__body_set": {
            "name": "add_argument__body_set",
            "location": 206,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequestTest.add_file_argument__body_set": {
            "name": "add_file_argument__body_set",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequestTest.add_file_argument__unsupported_method": {
            "name": "add_file_argument__unsupported_method",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequestTest.to_environment__content_type": {
            "name": "to_environment__content_type",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequestTest.arguments__get_request": {
            "name": "arguments__get_request",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequestTest.arguments__put_request": {
            "name": "arguments__put_request",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequestTest.arguments__quote": {
            "name": "arguments__quote",
            "location": 256,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequestTest.file_arguments": {
            "name": "file_arguments",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequestTest.file_arguments__umlauts": {
            "name": "file_arguments__umlauts",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequestTest.clear_arguments": {
            "name": "clear_arguments",
            "location": 308,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequestTest.body": {
            "name": "body",
            "location": 323,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequestTest.set_body_in_get_request": {
            "name": "set_body_in_get_request",
            "location": 333,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequestTest.set_body_when_argument_is_set": {
            "name": "set_body_when_argument_is_set",
            "location": 341,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequestTest._assert_json_request": {
            "name": "_assert_json_request",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rouver.test.TestRequest"
                ],
                "expected_body": [
                    "bytes"
                ]
            }
        },
        "TestRequestTest.set_json_request__get_request": {
            "name": "set_json_request__get_request",
            "location": 359,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequestTest.set_json_request__bytes": {
            "name": "set_json_request__bytes",
            "location": 365,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequestTest.set_json_request__str": {
            "name": "set_json_request__str",
            "location": 371,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequestTest.set_json_request__dict": {
            "name": "set_json_request__dict",
            "location": 377,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRequestTest.set_json_request__list": {
            "name": "set_json_request__list",
            "location": 383,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.attributes": {
            "name": "attributes",
            "location": 391,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.unknown_status": {
            "name": "unknown_status",
            "location": 398,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.invalid_status_line": {
            "name": "invalid_status_line",
            "location": 403,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.get_header_value": {
            "name": "get_header_value",
            "location": 408,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.parse_json_body": {
            "name": "parse_json_body",
            "location": 423,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.parse_json_body__wrong_content_type": {
            "name": "parse_json_body__wrong_content_type",
            "location": 432,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.parse_json_body__wrong_content_encoding": {
            "name": "parse_json_body__wrong_content_encoding",
            "location": 439,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.parse_json_body__invalid_json": {
            "name": "parse_json_body__invalid_json",
            "location": 448,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.parse_json_body__invalid_encoding": {
            "name": "parse_json_body__invalid_encoding",
            "location": 457,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_status__ok": {
            "name": "assert_status__ok",
            "location": 466,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_status__fail": {
            "name": "assert_status__fail",
            "location": 472,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_header_not_set__is_set": {
            "name": "assert_header_not_set__is_set",
            "location": 478,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_header_not_set__not_set": {
            "name": "assert_header_not_set__not_set",
            "location": 484,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_header_equal__no_such_header": {
            "name": "assert_header_equal__no_such_header",
            "location": 490,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_header_equal__ok": {
            "name": "assert_header_equal__ok",
            "location": 496,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_header_equal__differs": {
            "name": "assert_header_equal__differs",
            "location": 502,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_created_at__ok": {
            "name": "assert_created_at__ok",
            "location": 508,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_created_at__wrong_status": {
            "name": "assert_created_at__wrong_status",
            "location": 516,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_created_at__no_location_header": {
            "name": "assert_created_at__no_location_header",
            "location": 524,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_created_at__wrong_location": {
            "name": "assert_created_at__wrong_location",
            "location": 530,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_created_at__relative_location": {
            "name": "assert_created_at__relative_location",
            "location": 538,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_created_at__keep_query_string": {
            "name": "assert_created_at__keep_query_string",
            "location": 546,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_see_other__ok": {
            "name": "assert_see_other__ok",
            "location": 555,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_see_other__wrong_status": {
            "name": "assert_see_other__wrong_status",
            "location": 563,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_see_other__no_location_header": {
            "name": "assert_see_other__no_location_header",
            "location": 571,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_see_other__wrong_location": {
            "name": "assert_see_other__wrong_location",
            "location": 577,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_see_other__relative_location": {
            "name": "assert_see_other__relative_location",
            "location": 585,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_see_other__keep_query_string": {
            "name": "assert_see_other__keep_query_string",
            "location": 593,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_temporary_redirect__ok": {
            "name": "assert_temporary_redirect__ok",
            "location": 602,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_temporary_redirect__wrong_status": {
            "name": "assert_temporary_redirect__wrong_status",
            "location": 610,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_temporary_redirect__no_location_header": {
            "name": "assert_temporary_redirect__no_location_header",
            "location": 618,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_temporary_redirect__wrong_location": {
            "name": "assert_temporary_redirect__wrong_location",
            "location": 624,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_temporary_redirect__relative_location": {
            "name": "assert_temporary_redirect__relative_location",
            "location": 632,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_temporary_redirect__keep_query_string": {
            "name": "assert_temporary_redirect__keep_query_string",
            "location": 641,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_content_type__no_such_header": {
            "name": "assert_content_type__no_such_header",
            "location": 650,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_content_type__equal": {
            "name": "assert_content_type__equal",
            "location": 656,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_content_type__different": {
            "name": "assert_content_type__different",
            "location": 662,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_content_type__charset_matches": {
            "name": "assert_content_type__charset_matches",
            "location": 668,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_content_type__charset_list_matches": {
            "name": "assert_content_type__charset_list_matches",
            "location": 676,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_content_type__charset_list_matches__none": {
            "name": "assert_content_type__charset_list_matches__none",
            "location": 686,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_content_type__charset_not_checked": {
            "name": "assert_content_type__charset_not_checked",
            "location": 694,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_content_type__no_charset_in_response": {
            "name": "assert_content_type__no_charset_in_response",
            "location": 702,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_content_type__wrong_charset": {
            "name": "assert_content_type__wrong_charset",
            "location": 708,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_set_cookie__simple_match": {
            "name": "assert_set_cookie__simple_match",
            "location": 716,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_set_cookie__no_cookie_header": {
            "name": "assert_set_cookie__no_cookie_header",
            "location": 724,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_set_cookie__no_cookie_value": {
            "name": "assert_set_cookie__no_cookie_value",
            "location": 730,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_set_cookie__wrong_name": {
            "name": "assert_set_cookie__wrong_name",
            "location": 736,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_set_cookie__wrong_value": {
            "name": "assert_set_cookie__wrong_value",
            "location": 742,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_set_cookie__has_secure": {
            "name": "assert_set_cookie__has_secure",
            "location": 748,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_set_cookie__no_secure": {
            "name": "assert_set_cookie__no_secure",
            "location": 758,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_set_cookie__has_http_only": {
            "name": "assert_set_cookie__has_http_only",
            "location": 768,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_set_cookie__no_http_only": {
            "name": "assert_set_cookie__no_http_only",
            "location": 780,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_set_cookie__has_max_age": {
            "name": "assert_set_cookie__has_max_age",
            "location": 790,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_set_cookie__invalid_max_age": {
            "name": "assert_set_cookie__invalid_max_age",
            "location": 802,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeResponseTest.assert_set_cookie__no_max_age": {
            "name": "assert_set_cookie__no_max_age",
            "location": 812,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWSGIAppTest.run_app": {
            "name": "run_app",
            "location": 822,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWSGIAppTest.response": {
            "name": "response",
            "location": 843,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWSGIAppTest.response_body": {
            "name": "response_body",
            "location": 854,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWSGIAppTest.start_response_not_called": {
            "name": "start_response_not_called",
            "location": 866,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWSGIAppTest.start_response_called_multiple_times": {
            "name": "start_response_called_multiple_times",
            "location": 875,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWSGIAppTest.start_response_called_multiple_times_with_exc_info": {
            "name": "start_response_called_multiple_times_with_exc_info",
            "location": 892,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWSGIAppTest.start_response_called_after_output_written": {
            "name": "start_response_called_after_output_written",
            "location": 909,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWSGIAppTest.start_response_called_no_output_written": {
            "name": "start_response_called_no_output_written",
            "location": 921,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWSGIArgumentsTest._create_app": {
            "name": "_create_app",
            "location": 941,
            "return": [
                "Callable[([Dict[(str, Any)], Callable[(..., Callable[([bytes], Any)])]], typing.Iterable[bytes])]"
            ],
            "arguments": {
                "self": [],
                "argument_template": [
                    "typing.Sequence[Tuple[(str, Union[(Callable[([str], Any)], Literal[('file', 'file-or-str')])], rouver.args.Multiplicity)]]"
                ]
            }
        },
        "TestWSGIArgumentsTest._successful_arg_test": {
            "name": "_successful_arg_test",
            "location": 955,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_args": [
                    "typing.Sequence[Tuple[(str, Union[(Callable[([str], Any)], Literal[('file', 'file-or-str')])], rouver.args.Multiplicity)]]"
                ],
                "expected_args": [
                    "typing.Iterable[Tuple[(Union[(str, rouver.args.Multiplicity)], ...)]]"
                ]
            }
        },
        "TestWSGIArgumentsTest._failing_arg_test": {
            "name": "_failing_arg_test",
            "location": 965,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_args": [
                    "typing.Sequence[Tuple[(str, Union[(Callable[([str], Any)], Literal[('file', 'file-or-str')])], rouver.args.Multiplicity)]]"
                ],
                "expected_args": [
                    "typing.Iterable[Tuple[(Union[(str, rouver.args.Multiplicity)], ...)]]"
                ]
            }
        },
        "TestWSGIArgumentsTest.no_expected_args": {
            "name": "no_expected_args",
            "location": 976,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWSGIArgumentsTest.required_argument_present": {
            "name": "required_argument_present",
            "location": 980,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWSGIArgumentsTest.required_argument_not_in_app": {
            "name": "required_argument_not_in_app",
            "location": 987,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWSGIArgumentsTest.required_argument_not_in_test": {
            "name": "required_argument_not_in_test",
            "location": 994,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWSGIArgumentsTest.required_argument_optional_in_test": {
            "name": "required_argument_optional_in_test",
            "location": 998,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWSGIArgumentsTest.required_any_argument_present": {
            "name": "required_any_argument_present",
            "location": 1005,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWSGIArgumentsTest.required_any_argument_not_in_app": {
            "name": "required_any_argument_not_in_app",
            "location": 1012,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWSGIArgumentsTest.required_any_argument_not_in_test": {
            "name": "required_any_argument_not_in_test",
            "location": 1019,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWSGIArgumentsTest.required_any_argument_optional_in_test": {
            "name": "required_any_argument_optional_in_test",
            "location": 1023,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWSGIArgumentsTest.optional_argument_not_in_app": {
            "name": "optional_argument_not_in_app",
            "location": 1030,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWSGIArgumentsTest.optional_argument_not_in_test": {
            "name": "optional_argument_not_in_test",
            "location": 1034,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWSGIArgumentsTest.any_argument_not_in_app": {
            "name": "any_argument_not_in_app",
            "location": 1038,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWSGIArgumentsTest.any_argument_not_in_test": {
            "name": "any_argument_not_in_test",
            "location": 1042,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWSGIArgumentsTest.correct_value_not_accepted": {
            "name": "correct_value_not_accepted",
            "location": 1046,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWSGIArgumentsTest.invalid_value_accepted": {
            "name": "invalid_value_accepted",
            "location": 1053,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWSGIArgumentsTest.handle_other_errors": {
            "name": "handle_other_errors",
            "location": 1060,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWSGIArgumentsTest.post_request__no_args": {
            "name": "post_request__no_args",
            "location": 1070,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestWSGIAppTest.run_app.app": {
            "name": "app",
            "location": 826,
            "return": [],
            "arguments": {
                "environ": [],
                "sr": []
            }
        },
        "TestWSGIAppTest.response.app": {
            "name": "app",
            "location": 844,
            "return": [],
            "arguments": {
                "_": [],
                "sr": []
            }
        },
        "TestWSGIAppTest.response_body.app": {
            "name": "app",
            "location": 855,
            "return": [],
            "arguments": {
                "_": [],
                "sr": []
            }
        },
        "TestWSGIAppTest.start_response_not_called.app": {
            "name": "app",
            "location": 867,
            "return": [],
            "arguments": {
                "_": [],
                "__": []
            }
        },
        "TestWSGIAppTest.start_response_called_multiple_times.app": {
            "name": "app",
            "location": 878,
            "return": [],
            "arguments": {
                "_": [],
                "sr": []
            }
        },
        "TestWSGIAppTest.start_response_called_multiple_times_with_exc_info.app": {
            "name": "app",
            "location": 895,
            "return": [],
            "arguments": {
                "_": [],
                "sr": []
            }
        },
        "TestWSGIAppTest.start_response_called_after_output_written.app": {
            "name": "app",
            "location": 910,
            "return": [],
            "arguments": {
                "_": [],
                "sr": []
            }
        },
        "TestWSGIAppTest.start_response_called_no_output_written.app": {
            "name": "app",
            "location": 922,
            "return": [],
            "arguments": {
                "_": [],
                "sr": []
            }
        },
        "TestWSGIArgumentsTest._create_app.app": {
            "name": "app",
            "location": 944,
            "return": [],
            "arguments": {
                "env": [],
                "sr": []
            }
        },
        "TestWSGIArgumentsTest.handle_other_errors.app": {
            "name": "app",
            "location": 1061,
            "return": [],
            "arguments": {
                "_": [],
                "sr": []
            }
        }
    },
    "rouver-master/rouver_test/testutil.py": {
        "default_environment": {
            "name": "default_environment",
            "location": 74,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        },
        "StubStartResponse.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubStartResponse.__call__": {
            "name": "__call__",
            "location": 22,
            "return": [
                "Callable[([bytes], Any)]"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str"
                ],
                "headers": [
                    "typing.Iterable[Tuple[(str, str)]]"
                ],
                "exc_info": []
            }
        },
        "StubStartResponse.status_code": {
            "name": "status_code",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StubStartResponse.assert_was_called": {
            "name": "assert_was_called",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StubStartResponse.assert_status": {
            "name": "assert_status",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "http.HTTPStatus"
                ]
            }
        },
        "StubStartResponse.assert_header_missing": {
            "name": "assert_header_missing",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "StubStartResponse.assert_header_equals": {
            "name": "assert_header_equals",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "StubStartResponse._find_header": {
            "name": "_find_header",
            "location": 59,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        }
    },
    "rouver-master/rouver_test/util.py": {
        "AbsoluteURLTest._create_request": {
            "name": "_create_request",
            "location": 10,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "AbsoluteURLTest.path_is_not_ascii": {
            "name": "path_is_not_ascii",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbsoluteURLTest.path_is_absolute": {
            "name": "path_is_absolute",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbsoluteURLTest.path_is_root_relative": {
            "name": "path_is_root_relative",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbsoluteURLTest.path_is_relative__base_with_slash": {
            "name": "path_is_relative__base_with_slash",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbsoluteURLTest.path_is_relative__base_without_slash": {
            "name": "path_is_relative__base_without_slash",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbsoluteURLTest.do_not_encode_special_characters": {
            "name": "do_not_encode_special_characters",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rouver-master/rouver_test/__init__.py": {}
}
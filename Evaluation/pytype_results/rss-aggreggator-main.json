{
    "rss-aggreggator-main/api/setup.py": {},
    "rss-aggreggator-main/api/api/api.py": {},
    "rss-aggreggator-main/api/api/__init__.py": {},
    "rss-aggreggator-main/api/api/__main__.py": {},
    "rss-aggreggator-main/core_lib/setup.py": {},
    "rss-aggreggator-main/core_lib/core_lib/application_data.py": {
        "repositories": {
            "name": "repositories",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "venue_processors": {
            "name": "venue_processors",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "Repositories.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "mongodb_db": [],
                "client_session": []
            }
        },
        "Processors.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "processors": []
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/app_config.py": {
        "AppConfig._required_env": {
            "name": "_required_env",
            "location": 14,
            "return": [],
            "arguments": {
                "variable_name": []
            }
        },
        "AppConfig.is_production": {
            "name": "is_production",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "AppConfig.is_localhost": {
            "name": "is_localhost",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "AppConfig.sentry_dsn_api": {
            "name": "sentry_dsn_api",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "AppConfig.sentry_dsn_cron": {
            "name": "sentry_dsn_cron",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "AppConfig.token_secret_key": {
            "name": "token_secret_key",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "AppConfig.environment": {
            "name": "environment",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "AppConfig.mongodb_url": {
            "name": "mongodb_url",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "AppConfig.mongo_db": {
            "name": "mongo_db",
            "location": 54,
            "return": [],
            "arguments": {}
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/__init__.py": {},
    "rss-aggreggator-main/core_lib/core_lib/core/exceptions.py": {},
    "rss-aggreggator-main/core_lib/core_lib/core/fetcher_util.py": {
        "setlocale": {
            "name": "setlocale",
            "location": 18,
            "return": [],
            "arguments": {
                "name": []
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/core/fetch_and_parse_details.py": {
        "FetchAndParseDetails.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "client_session": []
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/core/parser.py": {
        "ParsingFailed.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "parsing_context": []
            }
        },
        "Parser.do_parse": {
            "name": "do_parse",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "parsing_context": []
            }
        },
        "Parser.parse": {
            "name": "parse",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "parsing_context": []
            }
        },
        "Parser.update_event_with_details": {
            "name": "update_event_with_details",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "event": [],
                "additional_details": []
            }
        },
        "ParserUtil.not_empty": {
            "name": "not_empty",
            "location": 53,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "ParserUtil.is_empty": {
            "name": "is_empty",
            "location": 57,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "ParserUtil.has_non_empty_text": {
            "name": "has_non_empty_text",
            "location": 61,
            "return": [],
            "arguments": {
                "tag": []
            }
        },
        "ParserUtil.stripped_text_or_default_if_empty": {
            "name": "stripped_text_or_default_if_empty",
            "location": 65,
            "return": [],
            "arguments": {
                "tag": [],
                "default": []
            }
        },
        "ParserUtil.sanitize_text": {
            "name": "sanitize_text",
            "location": 71,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "ParserUtil.remove_children_text_from": {
            "name": "remove_children_text_from",
            "location": 75,
            "return": [],
            "arguments": {
                "parent_tag": [],
                "text": []
            }
        },
        "ParserUtil.parse_date_time_to_datetime": {
            "name": "parse_date_time_to_datetime",
            "location": 83,
            "return": [],
            "arguments": {
                "date": [],
                "time": [],
                "tz_str": []
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/core/processing_chain.py": {
        "Link.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Chain.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "chain": []
            }
        },
        "DatabaseSink.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "event_repository": []
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/core/repositories.py": {
        "uuid4_str": {
            "name": "uuid4_str",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "PyObjectId.__get_validators__": {
            "name": "__get_validators__",
            "location": 22,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "PyObjectId.validate": {
            "name": "validate",
            "location": 26,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        },
        "PyObjectId.__modify_schema__": {
            "name": "__modify_schema__",
            "location": 32,
            "return": [],
            "arguments": {
                "cls": [],
                "field_schema": []
            }
        },
        "Event.convert_utc_to_timezone": {
            "name": "convert_utc_to_timezone",
            "location": 70,
            "return": [],
            "arguments": {
                "when": [],
                "tz_str": []
            }
        },
        "Event.convert_utc_to_venue_timezone": {
            "name": "convert_utc_to_venue_timezone",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "when": []
            }
        },
        "Event.__repr__": {
            "name": "__repr__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Event.is_not_empty": {
            "name": "is_not_empty",
            "location": 81,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "Event.is_valid": {
            "name": "is_valid",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VenueRepository.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "database": []
            }
        },
        "EventRepository.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "database": []
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/core/rss.py": {
        "RSSChannel.generate_pre_amble": {
            "name": "generate_pre_amble",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RSSChannel.generate_post_amble": {
            "name": "generate_post_amble",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "RSSItem.as_node": {
            "name": "as_node",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Transformer.item_to_rss": {
            "name": "item_to_rss",
            "location": 72,
            "return": [],
            "arguments": {
                "item": []
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/core/source.py": {
        "Source.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "venue": [],
                "scrape_url": [],
                "parser": []
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/core/venue_processor.py": {
        "VenueProcessor.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "event_repository": [],
                "venue_repository": [],
                "venue": []
            }
        },
        "VenueProcessor.create_processing_chain": {
            "name": "create_processing_chain",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "client_session": [],
                "database_sink": []
            }
        },
        "VenueProcessor.processing_chain_with_additionals": {
            "name": "processing_chain_with_additionals",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "client_session": [],
                "database_sink": []
            }
        },
        "VenueProcessor.fetch_source": {
            "name": "fetch_source",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/core/__init__.py": {},
    "rss-aggreggator-main/core_lib/core_lib/venues/hedon_zwolle.py": {
        "HedonParser.do_parse": {
            "name": "do_parse",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "parsing_context": []
            }
        },
        "HedonParser._transform": {
            "name": "_transform",
            "location": 57,
            "return": [],
            "arguments": {
                "venue": [],
                "article": [],
                "parsing_context": []
            }
        },
        "HedonProcessor.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "event_repository": [],
                "venue_repository": [],
                "venue": []
            }
        },
        "HedonProcessor.fetch_source": {
            "name": "fetch_source",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HedonSource.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "venue": [],
                "scrape_url": []
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/venues/melkweg_amsterdam.py": {
        "MelkwegParser._make_description": {
            "name": "_make_description",
            "location": 17,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "MelkwegParser.do_parse": {
            "name": "do_parse",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "parsing_context": []
            }
        },
        "MelkwegProcessor.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "event_repository": [],
                "venue_repository": [],
                "venue": []
            }
        },
        "MelkwegProcessor.fetch_source": {
            "name": "fetch_source",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MelkwegSource.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "venue": [],
                "scrape_url": []
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/venues/neushoorn_leeuwarden.py": {
        "NeushoornParser.do_parse": {
            "name": "do_parse",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "parsing_context": []
            }
        },
        "NeushoornParser.update_event_with_details": {
            "name": "update_event_with_details",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "event": [],
                "additional_details": []
            }
        },
        "NeushoornProcessor.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "event_repository": [],
                "venue_repository": [],
                "venue": []
            }
        },
        "NeushoornProcessor.fetch_source": {
            "name": "fetch_source",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NeushoornProcessor.create_processing_chain": {
            "name": "create_processing_chain",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "client_session": [],
                "database_sink": []
            }
        },
        "NeushoornSource.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "venue": [],
                "scrape_url": []
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/venues/oost_groningen.py": {
        "OostGroningenParser.do_parse": {
            "name": "do_parse",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "parsing_context": []
            }
        },
        "OostGroningenParser._transform": {
            "name": "_transform",
            "location": 23,
            "return": [],
            "arguments": {
                "venue": [],
                "tag": [],
                "parsing_context": []
            }
        },
        "OostGroningenProcessor.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "event_repository": [],
                "venue_repository": [],
                "venue": []
            }
        },
        "OostGroningenProcessor.fetch_source": {
            "name": "fetch_source",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OostGroningenSource.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "venue": [],
                "scrape_url": []
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/venues/paradiso_amsterdam.py": {
        "ParadisoParser.do_parse": {
            "name": "do_parse",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "parsing_context": []
            }
        },
        "ParadisoParser._transform": {
            "name": "_transform",
            "location": 22,
            "return": [],
            "arguments": {
                "venue": [],
                "data": [],
                "parsing_context": []
            }
        },
        "ParadisoParser.update_event_with_details": {
            "name": "update_event_with_details",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "event": [],
                "additional_details": []
            }
        },
        "ParadisoProcessor.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "event_repository": [],
                "venue_repository": [],
                "venue": []
            }
        },
        "ParadisoProcessor.fetch_source": {
            "name": "fetch_source",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParadisoProcessor.create_processing_chain": {
            "name": "create_processing_chain",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "client_session": [],
                "database_sink": []
            }
        },
        "ParadisoSource.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "venue": [],
                "scrape_url": []
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/venues/simplon_groningen.py": {
        "SimplonParser.do_parse": {
            "name": "do_parse",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "parsing_context": []
            }
        },
        "SimplonParser._transform": {
            "name": "_transform",
            "location": 23,
            "return": [],
            "arguments": {
                "venue": [],
                "tag": [],
                "parsing_context": []
            }
        },
        "SimplonProcessor.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "event_repository": [],
                "venue_repository": [],
                "venue": []
            }
        },
        "SimplonProcessor.fetch_source": {
            "name": "fetch_source",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimplonSource.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "venue": [],
                "scrape_url": []
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/venues/spot_groningen.py": {
        "SpotParser.do_parse": {
            "name": "do_parse",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "parsing_context": []
            }
        },
        "SpotParser._transform": {
            "name": "_transform",
            "location": 23,
            "return": [],
            "arguments": {
                "venue": [],
                "article": [],
                "parsing_context": []
            }
        },
        "SpotProcessor.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "event_repository": [],
                "venue_repository": [],
                "venue": []
            }
        },
        "SpotProcessor.fetch_source": {
            "name": "fetch_source",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SpotSource.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "venue": [],
                "scrape_url": []
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/venues/t013_tilburg.py": {
        "T013Parser.do_parse": {
            "name": "do_parse",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "parsing_context": []
            }
        },
        "T013Parser._transform": {
            "name": "_transform",
            "location": 34,
            "return": [],
            "arguments": {
                "venue": [],
                "json_event": [],
                "parsing_context": []
            }
        },
        "T013Processor.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "event_repository": [],
                "venue_repository": [],
                "venue": []
            }
        },
        "T013Processor.fetch_source": {
            "name": "fetch_source",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "T013Source.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "venue": [],
                "scrape_url": []
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/venues/tivoli_utrecht.py": {
        "TivoliParser.do_parse": {
            "name": "do_parse",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "parsing_context": []
            }
        },
        "TivoliParser._transform": {
            "name": "_transform",
            "location": 23,
            "return": [],
            "arguments": {
                "venue": [],
                "event": []
            }
        },
        "TivoliParser.update_event_with_details": {
            "name": "update_event_with_details",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "event": [],
                "additional_details": []
            }
        },
        "TivoliProcessor.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "event_repository": [],
                "venue_repository": [],
                "venue": []
            }
        },
        "TivoliProcessor.create_processing_chain": {
            "name": "create_processing_chain",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "client_session": [],
                "database_sink": []
            }
        },
        "TivoliProcessor.fetch_source": {
            "name": "fetch_source",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TivoliSource.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "venue": [],
                "scrape_url": []
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/venues/vera_groningen.py": {
        "VeraParser.do_parse": {
            "name": "do_parse",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "parsing_context": []
            }
        },
        "VeraParser._add_sup_text_from_text": {
            "name": "_add_sup_text_from_text",
            "location": 25,
            "return": [],
            "arguments": {
                "parent_tag": [],
                "text": []
            }
        },
        "VeraParser._find_extra": {
            "name": "_find_extra",
            "location": 30,
            "return": [],
            "arguments": {
                "tag": []
            }
        },
        "VeraParser._transform": {
            "name": "_transform",
            "location": 39,
            "return": [],
            "arguments": {
                "venue": [],
                "tag": [],
                "parsing_context": []
            }
        },
        "VeraProcessor.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "event_repository": [],
                "venue_repository": [],
                "venue": []
            }
        },
        "VeraProcessor.fetch_source": {
            "name": "fetch_source",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VeraSource.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "venue": [],
                "scrape_url": []
            }
        }
    },
    "rss-aggreggator-main/core_lib/core_lib/venues/__init__.py": {},
    "rss-aggreggator-main/cron/setup.py": {},
    "rss-aggreggator-main/cron/cron/cron.py": {},
    "rss-aggreggator-main/cron/cron/__init__.py": {},
    "rss-aggreggator-main/cron/cron/__main__.py": {},
    "rss-aggreggator-main/unittests/tests/conftest.py": {
        "faker": {
            "name": "faker",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "mongo_url": {
            "name": "mongo_url",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "mongo_db": {
            "name": "mongo_db",
            "location": 110,
            "return": [],
            "arguments": {}
        },
        "mongodb_client": {
            "name": "mongodb_client",
            "location": 115,
            "return": [],
            "arguments": {
                "mongo_url": []
            }
        },
        "event_loop": {
            "name": "event_loop",
            "location": 120,
            "return": [],
            "arguments": {}
        },
        "client_session_mocker": {
            "name": "client_session_mocker",
            "location": 221,
            "return": [],
            "arguments": {
                "repositories": []
            }
        },
        "ClientSessionMocker.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "repositories": []
            }
        },
        "ClientSessionMocker._fix": {
            "name": "_fix",
            "location": 42,
            "return": [],
            "arguments": {
                "line": []
            }
        },
        "ClientSessionMocker.setup_client_session_for": {
            "name": "setup_client_session_for",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "base_directory": []
            }
        },
        "ClientSessionMocker.setup_client_session_for._response_for_file": {
            "name": "_response_for_file",
            "location": 75,
            "return": [],
            "arguments": {
                "file_name": []
            }
        },
        "ClientSessionMocker.setup_client_session_for.resolve_file_name": {
            "name": "resolve_file_name",
            "location": 89,
            "return": [],
            "arguments": {
                "url_to_resolve": []
            }
        }
    },
    "rss-aggreggator-main/unittests/tests/__init__.py": {},
    "rss-aggreggator-main/unittests/tests/samples/__init__.py": {},
    "rss-aggreggator-main/unittests/tests/samples/neushoorn-leeuwarden/fetch_neushoorn_test_data.py": {},
    "rss-aggreggator-main/unittests/tests/samples/neushoorn-leeuwarden/__init__.py": {},
    "rss-aggreggator-main/unittests/tests/samples/paradiso-amsterdam/fetch_details_for_test_paradiso.py": {},
    "rss-aggreggator-main/unittests/tests/samples/paradiso-amsterdam/__init__.py": {},
    "rss-aggreggator-main/unittests/tests/samples/tivoli-utrecht/fetch_details_for_test.py": {},
    "rss-aggreggator-main/unittests/tests/samples/vera-groningen/fetch_test_data.py": {},
    "rss-aggreggator-main/unittests/tests/samples/vera-groningen/__init__.py": {},
    "rss-aggreggator-main/unittests/tests/venues/conftest.py": {
        "assert_rss_channel": {
            "name": "assert_rss_channel",
            "location": 14,
            "return": [],
            "arguments": {
                "xml": []
            }
        }
    },
    "rss-aggreggator-main/unittests/tests/venues/test_clean_up.py": {},
    "rss-aggreggator-main/unittests/tests/venues/test_hedon_zwolle.py": {},
    "rss-aggreggator-main/unittests/tests/venues/test_melkweg_amsterdam.py": {},
    "rss-aggreggator-main/unittests/tests/venues/test_neushoorn_leeuwarden.py": {},
    "rss-aggreggator-main/unittests/tests/venues/test_oost_groningen_feed.py": {},
    "rss-aggreggator-main/unittests/tests/venues/test_paradiso_feed.py": {},
    "rss-aggreggator-main/unittests/tests/venues/test_simplon_feed.py": {},
    "rss-aggreggator-main/unittests/tests/venues/test_spot_feed.py": {},
    "rss-aggreggator-main/unittests/tests/venues/test_t013_tilburg_feed.py": {},
    "rss-aggreggator-main/unittests/tests/venues/test_tivoli_feed.py": {},
    "rss-aggreggator-main/unittests/tests/venues/test_vera_feed.py": {},
    "rss-aggreggator-main/unittests/tests/venues/__init__.py": {}
}
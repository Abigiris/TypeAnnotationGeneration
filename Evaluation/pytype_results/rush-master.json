{
    "rush-master/setup.py": {},
    "rush-master/doc/source/conf.py": {},
    "rush-master/examples/flask/setup.py": {},
    "rush-master/examples/flask/src/limiterapp/views.py": {
        "home": {
            "name": "home",
            "location": 15,
            "return": [],
            "arguments": {}
        }
    },
    "rush-master/examples/flask/src/limiterapp/__init__.py": {},
    "rush-master/examples/flask/src/limiterapp/__main__.py": {},
    "rush-master/examples/flask/test/__init__.py": {},
    "rush-master/scripts/cleanup-lint-dist.py": {},
    "rush-master/src/rush/exceptions.py": {
        "MismatchedDataError.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "DataChangedInStoreError.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "InvalidRedisURL.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        }
    },
    "rush-master/src/rush/limit_data.py": {
        "convert_str_to_datetime": {
            "name": "convert_str_to_datetime",
            "location": 10,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "maybe_convert_str_to_datetime": {
            "name": "maybe_convert_str_to_datetime",
            "location": 19,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "LimitData._now": {
            "name": "_now",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LimitData.asdict": {
            "name": "asdict",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LimitData.copy_with": {
            "name": "copy_with",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rush-master/src/rush/quota.py": {
        "Quota._period_is_positive": {
            "name": "_period_is_positive",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "attribute": [],
                "period": []
            }
        },
        "Quota._count_is_positive": {
            "name": "_count_is_positive",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "attribute": [],
                "count": []
            }
        },
        "Quota._burst_is_positive": {
            "name": "_burst_is_positive",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "attribute": [],
                "count": []
            }
        },
        "Quota.per_second": {
            "name": "per_second",
            "location": 61,
            "return": [],
            "arguments": {
                "cls": [],
                "count": []
            }
        },
        "Quota.per_minute": {
            "name": "per_minute",
            "location": 78,
            "return": [],
            "arguments": {
                "cls": [],
                "count": []
            }
        },
        "Quota.per_hour": {
            "name": "per_hour",
            "location": 95,
            "return": [],
            "arguments": {
                "cls": [],
                "count": []
            }
        },
        "Quota.per_day": {
            "name": "per_day",
            "location": 110,
            "return": [],
            "arguments": {
                "cls": [],
                "count": []
            }
        },
        "Quota.limit": {
            "name": "limit",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rush-master/src/rush/result.py": {
        "RateLimitResult._now": {
            "name": "_now",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "RateLimitResult.resets_at": {
            "name": "resets_at",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "from_when": []
            }
        },
        "RateLimitResult.retry_at": {
            "name": "retry_at",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "from_when": []
            }
        }
    },
    "rush-master/src/rush/throttle.py": {
        "Throttle.check": {
            "name": "check",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "quantity": []
            }
        },
        "Throttle.clear": {
            "name": "clear",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Throttle.peek": {
            "name": "peek",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        }
    },
    "rush-master/src/rush/__init__.py": {},
    "rush-master/src/rush/contrib/decorator.py": {
        "ThrottleDecorator._check": {
            "name": "_check",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "ThrottleDecorator.__call__": {
            "name": "__call__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "ThrottleDecorator.sleep_and_retry": {
            "name": "sleep_and_retry",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "ThrottleExceeded.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "ThrottleDecorator.__call__.wrapper": {
            "name": "wrapper",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "ThrottleDecorator.sleep_and_retry.wrapper": {
            "name": "wrapper",
            "location": 128,
            "return": [],
            "arguments": {}
        }
    },
    "rush-master/src/rush/contrib/__init__.py": {},
    "rush-master/src/rush/limiters/base.py": {
        "BaseLimiter.rate_limit": {
            "name": "rate_limit",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "quantity": [],
                "rate": []
            }
        },
        "BaseLimiter.reset": {
            "name": "reset",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "rate": []
            }
        }
    },
    "rush-master/src/rush/limiters/gcra.py": {
        "GenericCellRatelimiter.rate_limit": {
            "name": "rate_limit",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "quantity": [],
                "rate": []
            }
        },
        "GenericCellRatelimiter.reset": {
            "name": "reset",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "rate": []
            }
        }
    },
    "rush-master/src/rush/limiters/periodic.py": {
        "_fresh_limitdata": {
            "name": "_fresh_limitdata",
            "location": 11,
            "return": [],
            "arguments": {
                "rate": [],
                "now": [],
                "used": []
            }
        },
        "PeriodicLimiter.rate_limit": {
            "name": "rate_limit",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "quantity": [],
                "rate": []
            }
        },
        "PeriodicLimiter.reset": {
            "name": "reset",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "rate": []
            }
        },
        "PeriodicLimiter.result_from_quota": {
            "name": "result_from_quota",
            "location": 72,
            "return": [],
            "arguments": {
                "rate": [],
                "limited": [],
                "limitdata": [],
                "elapsed_since_period_start": [],
                "retry_after": []
            }
        }
    },
    "rush-master/src/rush/limiters/redis_gcra.py": {
        "GenericCellRatelimiter.__attrs_post_init__": {
            "name": "__attrs_post_init__",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenericCellRatelimiter._call_lua": {
            "name": "_call_lua",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GenericCellRatelimiter.rate_limit": {
            "name": "rate_limit",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "quantity": [],
                "rate": []
            }
        },
        "GenericCellRatelimiter.reset": {
            "name": "reset",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "rate": []
            }
        }
    },
    "rush-master/src/rush/limiters/__init__.py": {},
    "rush-master/src/rush/stores/base.py": {
        "BaseStore.get": {
            "name": "get",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "BaseStore.set": {
            "name": "set",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseStore.compare_and_swap": {
            "name": "compare_and_swap",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseStore.get_with_time": {
            "name": "get_with_time",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "tzinfo": []
            }
        },
        "BaseStore.set_with_time": {
            "name": "set_with_time",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseStore.current_time": {
            "name": "current_time",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "tzinfo": []
            }
        }
    },
    "rush-master/src/rush/stores/dictionary.py": {
        "DictionaryStore.compare_and_swap": {
            "name": "compare_and_swap",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "old": [],
                "new": []
            }
        },
        "DictionaryStore.get": {
            "name": "get",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "DictionaryStore.set": {
            "name": "set",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rush-master/src/rush/stores/redis.py": {
        "parse": {
            "name": "parse",
            "location": 20,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "RedisStore._validate_url": {
            "name": "_validate_url",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "attribute": [],
                "value": []
            }
        },
        "RedisStore._make_client": {
            "name": "_make_client",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisStore.compare_and_swap": {
            "name": "compare_and_swap",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "old": [],
                "new": []
            }
        },
        "RedisStore.set": {
            "name": "set",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedisStore.get": {
            "name": "get",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "RedisStore.current_time": {
            "name": "current_time",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "tzinfo": []
            }
        }
    },
    "rush-master/src/rush/stores/__init__.py": {},
    "rush-master/test/__init__.py": {},
    "rush-master/test/integration/test_periodic_throttle.py": {
        "test_periodic_end_to_end": {
            "name": "test_periodic_end_to_end",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "rush-master/test/integration/__init__.py": {},
    "rush-master/test/unit/helpers.py": {
        "new_quota": {
            "name": "new_quota",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "MockStore.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "recording_store": []
            }
        },
        "MockStore.get": {
            "name": "get",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "MockStore.get_with_time": {
            "name": "get_with_time",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "tzinfo": []
            }
        },
        "MockStore.set": {
            "name": "set",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockStore.set_with_time": {
            "name": "set_with_time",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MockStore.compare_and_swap": {
            "name": "compare_and_swap",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "old": [],
                "new": []
            }
        }
    },
    "rush-master/test/unit/test_dictionary_store.py": {
        "TestDictionaryStore.test_begins_life_empty": {
            "name": "test_begins_life_empty",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDictionaryStore.test_may_begin_life_with_data": {
            "name": "test_may_begin_life_with_data",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDictionaryStore.test_set": {
            "name": "test_set",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDictionaryStore.test_set_with_time_uses_now": {
            "name": "test_set_with_time_uses_now",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDictionaryStore.test_set_with_time_uses_provided_value": {
            "name": "test_set_with_time_uses_provided_value",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDictionaryStore.test_get": {
            "name": "test_get",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDictionaryStore.test_get_with_time_defaults_to_now": {
            "name": "test_get_with_time_defaults_to_now",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDictionaryStore.test_get_with_time_uses_existing_time": {
            "name": "test_get_with_time_uses_existing_time",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDictionaryStore.test_compare_and_swap_raises_mismatched_data_error": {
            "name": "test_compare_and_swap_raises_mismatched_data_error",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rush-master/test/unit/test_gcra_limiter.py": {
        "limiter": {
            "name": "limiter",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "TestGenericCellRatelimiter.test_reset": {
            "name": "test_reset",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "limiter": []
            }
        },
        "TestGenericCellRatelimiter.test_ratelimit_first_time_seeing_key": {
            "name": "test_ratelimit_first_time_seeing_key",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "limiter": []
            }
        },
        "TestGenericCellRatelimiter.test_ratelimit_existing_key_within_cell": {
            "name": "test_ratelimit_existing_key_within_cell",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "limiter": []
            }
        },
        "TestGenericCellRatelimiter.test_ratelimit_exceeded": {
            "name": "test_ratelimit_exceeded",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "limiter": []
            }
        }
    },
    "rush-master/test/unit/test_limiters_base.py": {
        "_test_must_be_implemented": {
            "name": "_test_must_be_implemented",
            "location": 8,
            "return": [],
            "arguments": {
                "method": [],
                "args": [],
                "kwargs": []
            }
        },
        "base_limiter": {
            "name": "base_limiter",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_rate_limit_must_be_implemented": {
            "name": "test_rate_limit_must_be_implemented",
            "location": 19,
            "return": [],
            "arguments": {
                "base_limiter": []
            }
        },
        "test_get_with_time_must_be_implemented": {
            "name": "test_get_with_time_must_be_implemented",
            "location": 24,
            "return": [],
            "arguments": {
                "base_limiter": []
            }
        }
    },
    "rush-master/test/unit/test_limit_data.py": {
        "test_conversion_helper": {
            "name": "test_conversion_helper",
            "location": 35,
            "return": [],
            "arguments": {
                "value": [],
                "expected_retval": []
            }
        },
        "TestLimitData.test_asdict_without_time": {
            "name": "test_asdict_without_time",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLimitData.test_asdict_with_time": {
            "name": "test_asdict_with_time",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLimitData.test_copy_with_no_arguments": {
            "name": "test_copy_with_no_arguments",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLimitData.test_copy_with_arguments": {
            "name": "test_copy_with_arguments",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLimitData.test_conversion": {
            "name": "test_conversion",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rush-master/test/unit/test_periodic_limiter.py": {
        "limiter": {
            "name": "limiter",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "TestPeriodicLimiter.test_reset": {
            "name": "test_reset",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "limiter": []
            }
        },
        "TestPeriodicLimiter.test_no_preexisting_limitdata": {
            "name": "test_no_preexisting_limitdata",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "limiter": []
            }
        },
        "TestPeriodicLimiter.test_preexisting_limitdata": {
            "name": "test_preexisting_limitdata",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "limiter": []
            }
        },
        "TestPeriodicLimiter.test_last_rate_limit_in_period": {
            "name": "test_last_rate_limit_in_period",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "limiter": []
            }
        },
        "TestPeriodicLimiter.test_rate_limit_exceeded_none_remaining": {
            "name": "test_rate_limit_exceeded_none_remaining",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "limiter": []
            }
        },
        "TestPeriodicLimiter.test_rate_limit_reset_after_period": {
            "name": "test_rate_limit_reset_after_period",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "limiter": []
            }
        },
        "TestPeriodicLimiter.test_result_from_quota": {
            "name": "test_result_from_quota",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "limiter": []
            }
        },
        "TestPeriodicLimiter.test_result_from_quota_when_limited": {
            "name": "test_result_from_quota_when_limited",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "limiter": []
            }
        },
        "TestPeriodicLimiter.test_result_from_quota_explicitly_passed": {
            "name": "test_result_from_quota_explicitly_passed",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "limiter": []
            }
        }
    },
    "rush-master/test/unit/test_quota.py": {
        "TestQuota.test_per_second": {
            "name": "test_per_second",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestQuota.test_per_minute": {
            "name": "test_per_minute",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestQuota.test_per_hour": {
            "name": "test_per_hour",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestQuota.test_per_day": {
            "name": "test_per_day",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestQuota.test_requires_a_positive_period": {
            "name": "test_requires_a_positive_period",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestQuota.test_requires_a_non_negative_count": {
            "name": "test_requires_a_non_negative_count",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestQuota.test_requires_a_non_negative_maximum_burst": {
            "name": "test_requires_a_non_negative_maximum_burst",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestQuota.test_calculates_limit_from_count_and_burst": {
            "name": "test_calculates_limit_from_count_and_burst",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rush-master/test/unit/test_redis_gcra_limiter.py": {
        "limiterf": {
            "name": "limiterf",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "TestGenericCellRatelimiter.test_reset": {
            "name": "test_reset",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "limiterf": []
            }
        },
        "TestGenericCellRatelimiter.test_ratelimit_first_time_seeing_key": {
            "name": "test_ratelimit_first_time_seeing_key",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "limiterf": []
            }
        },
        "TestGenericCellRatelimiter.test_ratelimit_exceeded": {
            "name": "test_ratelimit_exceeded",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "limiterf": []
            }
        }
    },
    "rush-master/test/unit/test_redis_store.py": {
        "test_parse": {
            "name": "test_parse",
            "location": 27,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "TestRedisStore.test_valid_url": {
            "name": "test_valid_url",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "TestRedisStore.test_invalid_url": {
            "name": "test_invalid_url",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRedisStore.test_set": {
            "name": "test_set",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRedisStore.test_get": {
            "name": "test_get",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRedisStore.test_get_returns_none": {
            "name": "test_get_returns_none",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRedisStore.test_current_time_uses_redis_time": {
            "name": "test_current_time_uses_redis_time",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRedisStore.test_compare_and_set": {
            "name": "test_compare_and_set",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRedisStore.test_compare_and_set_raises_mismatched_data_error": {
            "name": "test_compare_and_set_raises_mismatched_data_error",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRedisStore.test_compare_and_set_raises_data_changed_in_store_error": {
            "name": "test_compare_and_set_raises_data_changed_in_store_error",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rush-master/test/unit/test_result.py": {
        "TestRateLimitResult.test_resets_at": {
            "name": "test_resets_at",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRateLimitResult.test_retry_at": {
            "name": "test_retry_at",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRateLimitResult.test_static_now_method": {
            "name": "test_static_now_method",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "dt": []
            }
        },
        "TestRateLimitResult.test_resets_at_uses_now": {
            "name": "test_resets_at_uses_now",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "dt": []
            }
        },
        "TestRateLimitResult.test_retry_at_uses_now": {
            "name": "test_retry_at_uses_now",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "dt": []
            }
        }
    },
    "rush-master/test/unit/test_rush.py": {
        "test_rush_has_a_version": {
            "name": "test_rush_has_a_version",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "rush-master/test/unit/test_stores_base.py": {
        "_test_must_be_implemented": {
            "name": "_test_must_be_implemented",
            "location": 11,
            "return": [],
            "arguments": {
                "method": [],
                "args": [],
                "kwargs": []
            }
        },
        "test_get_must_be_implemented": {
            "name": "test_get_must_be_implemented",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "test_set_must_be_implemented": {
            "name": "test_set_must_be_implemented",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_compare_and_swap": {
            "name": "test_compare_and_swap",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "test_get_with_time": {
            "name": "test_get_with_time",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_current_time": {
            "name": "test_current_time",
            "location": 60,
            "return": [],
            "arguments": {}
        }
    },
    "rush-master/test/unit/test_throttle.py": {
        "TestThrottle.test_check": {
            "name": "test_check",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestThrottle.test_clear": {
            "name": "test_clear",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestThrottle.test_peek": {
            "name": "test_peek",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "rush-master/test/unit/test_throttle_decorator.py": {
        "TestThrottleDecorator.test_call_sync_non_limited": {
            "name": "test_call_sync_non_limited",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestThrottleDecorator.test_call_sync_limited": {
            "name": "test_call_sync_limited",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestThrottleDecorator.test_call_async_non_limited": {
            "name": "test_call_async_non_limited",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestThrottleDecorator.test_call_async_limited": {
            "name": "test_call_async_limited",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestThrottleDecorator.test_sleep_and_retry_sync": {
            "name": "test_sleep_and_retry_sync",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestThrottleDecorator.test_sleep_and_retry_async": {
            "name": "test_sleep_and_retry_async",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestThrottleDecorator.test_call_sync_non_limited.test_func": {
            "name": "test_func",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "TestThrottleDecorator.test_call_sync_limited.test_func": {
            "name": "test_func",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "TestThrottleDecorator.test_sleep_and_retry_sync.test_func": {
            "name": "test_func",
            "location": 85,
            "return": [],
            "arguments": {}
        }
    },
    "rush-master/test/unit/__init__.py": {}
}
{
    "saml-nmt-master/setup.py": {
        "get_long_description": {
            "name": "get_long_description",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "get_version": {
            "name": "get_version",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "get_git_hash": {
            "name": "get_git_hash",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "temporarily_write_git_hash": {
            "name": "temporarily_write_git_hash",
            "location": 35,
            "return": [],
            "arguments": {
                "git_hash": [],
                "filename": []
            }
        },
        "get_requirements": {
            "name": "get_requirements",
            "location": 53,
            "return": [],
            "arguments": {
                "filename": []
            }
        }
    },
    "saml-nmt-master/docs/tutorials/cpu_process_per_core_translation.py": {
        "add_args": {
            "name": "add_args",
            "location": 27,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "task": {
            "name": "task",
            "location": 34,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "benchmark": {
            "name": "benchmark",
            "location": 37,
            "return": [],
            "arguments": {
                "cores": [],
                "args": []
            }
        },
        "split_file": {
            "name": "split_file",
            "location": 60,
            "return": [],
            "arguments": {
                "splitNum": [],
                "fileInput": [],
                "lines": []
            }
        },
        "translate": {
            "name": "translate",
            "location": 85,
            "return": [],
            "arguments": {
                "cores": [],
                "files": [],
                "args": []
            }
        }
    },
    "saml-nmt-master/docs/tutorials/seqcopy/genseqcopy.py": {},
    "saml-nmt-master/sockeye/arguments.py": {
        "save_args": {
            "name": "save_args",
            "location": 83,
            "return": [],
            "arguments": {
                "args": [],
                "fname": []
            }
        },
        "load_args": {
            "name": "load_args",
            "location": 88,
            "return": [],
            "arguments": {
                "fname": []
            }
        },
        "regular_file": {
            "name": "regular_file",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "regular_folder": {
            "name": "regular_folder",
            "location": 110,
            "return": [],
            "arguments": {}
        },
        "int_greater_or_equal": {
            "name": "int_greater_or_equal",
            "location": 126,
            "return": [],
            "arguments": {
                "threshold": []
            }
        },
        "learning_schedule": {
            "name": "learning_schedule",
            "location": 143,
            "return": [],
            "arguments": {}
        },
        "simple_dict": {
            "name": "simple_dict",
            "location": 162,
            "return": [],
            "arguments": {}
        },
        "multiple_values": {
            "name": "multiple_values",
            "location": 195,
            "return": [],
            "arguments": {
                "num_values": [],
                "greater_or_equal": [],
                "data_type": []
            }
        },
        "file_or_stdin": {
            "name": "file_or_stdin",
            "location": 225,
            "return": [],
            "arguments": {}
        },
        "add_average_args": {
            "name": "add_average_args",
            "location": 239,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_extract_args": {
            "name": "add_extract_args",
            "location": 267,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_rerank_args": {
            "name": "add_rerank_args",
            "location": 285,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_lexicon_args": {
            "name": "add_lexicon_args",
            "location": 307,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_lexicon_create_args": {
            "name": "add_lexicon_create_args",
            "location": 315,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_lexicon_inspect_args": {
            "name": "add_lexicon_inspect_args",
            "location": 322,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_logging_args": {
            "name": "add_logging_args",
            "location": 327,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_training_data_args": {
            "name": "add_training_data_args",
            "location": 335,
            "return": [],
            "arguments": {
                "params": [],
                "required": []
            }
        },
        "add_validation_data_params": {
            "name": "add_validation_data_params",
            "location": 352,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_prepared_data_args": {
            "name": "add_prepared_data_args",
            "location": 370,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_monitoring_args": {
            "name": "add_monitoring_args",
            "location": 376,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_training_output_args": {
            "name": "add_training_output_args",
            "location": 390,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_training_io_args": {
            "name": "add_training_io_args",
            "location": 399,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_bucketing_args": {
            "name": "add_bucketing_args",
            "location": 413,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_prepare_data_cli_args": {
            "name": "add_prepare_data_cli_args",
            "location": 430,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_device_args": {
            "name": "add_device_args",
            "location": 457,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_vocab_args": {
            "name": "add_vocab_args",
            "location": 483,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_model_parameters": {
            "name": "add_model_parameters",
            "location": 520,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_batch_args": {
            "name": "add_batch_args",
            "location": 779,
            "return": [],
            "arguments": {
                "params": [],
                "default_batch_size": []
            }
        },
        "add_training_args": {
            "name": "add_training_args",
            "location": 797,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_train_cli_args": {
            "name": "add_train_cli_args",
            "location": 1112,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_translate_cli_args": {
            "name": "add_translate_cli_args",
            "location": 1120,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_score_cli_args": {
            "name": "add_score_cli_args",
            "location": 1126,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_max_output_cli_args": {
            "name": "add_max_output_cli_args",
            "location": 1177,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_inference_args": {
            "name": "add_inference_args",
            "location": 1185,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_evaluate_args": {
            "name": "add_evaluate_args",
            "location": 1331,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_build_vocab_args": {
            "name": "add_build_vocab_args",
            "location": 1360,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_init_embedding_args": {
            "name": "add_init_embedding_args",
            "location": 1366,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "ConfigArgumentParser.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigArgumentParser._register_argument": {
            "name": "_register_argument",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "_action": []
            }
        },
        "ConfigArgumentParser._overwrite_add_argument": {
            "name": "_overwrite_add_argument",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "original_object": []
            }
        },
        "ConfigArgumentParser.add_argument_group": {
            "name": "add_argument_group",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigArgumentParser.parse_args": {
            "name": "parse_args",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "namespace": []
            }
        },
        "regular_file.check_regular_file": {
            "name": "check_regular_file",
            "location": 101,
            "return": [],
            "arguments": {
                "value_to_check": []
            }
        },
        "regular_folder.check_regular_directory": {
            "name": "check_regular_directory",
            "location": 117,
            "return": [],
            "arguments": {
                "value_to_check": []
            }
        },
        "int_greater_or_equal.check_greater_equal": {
            "name": "check_greater_equal",
            "location": 134,
            "return": [],
            "arguments": {
                "value_to_check": []
            }
        },
        "learning_schedule.parse": {
            "name": "parse",
            "location": 151,
            "return": [],
            "arguments": {
                "schedule_str": []
            }
        },
        "simple_dict.parse": {
            "name": "parse",
            "location": 171,
            "return": [],
            "arguments": {
                "dict_str": []
            }
        },
        "multiple_values.parse": {
            "name": "parse",
            "location": 208,
            "return": [],
            "arguments": {
                "value_to_check": []
            }
        },
        "file_or_stdin.parse": {
            "name": "parse",
            "location": 230,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "ConfigArgumentParser._overwrite_add_argument._new_add_argument": {
            "name": "_new_add_argument",
            "location": 54,
            "return": [],
            "arguments": {
                "this_self": []
            }
        },
        "simple_dict.parse._parse": {
            "name": "_parse",
            "location": 173,
            "return": [],
            "arguments": {
                "value": []
            }
        }
    },
    "saml-nmt-master/sockeye/average.py": {
        "average": {
            "name": "average",
            "location": 36,
            "return": [],
            "arguments": {
                "param_paths": []
            }
        },
        "find_checkpoints": {
            "name": "find_checkpoints",
            "location": 70,
            "return": [],
            "arguments": {
                "model_path": [],
                "size": [],
                "strategy": [],
                "metric": []
            }
        },
        "_strategy_best": {
            "name": "_strategy_best",
            "location": 113,
            "return": [],
            "arguments": {
                "points": [],
                "size": [],
                "maximize": []
            }
        },
        "_strategy_last": {
            "name": "_strategy_last",
            "location": 118,
            "return": [],
            "arguments": {
                "points": [],
                "size": [],
                "maximize": []
            }
        },
        "_strategy_lifespan": {
            "name": "_strategy_lifespan",
            "location": 125,
            "return": [],
            "arguments": {
                "points": [],
                "size": [],
                "maximize": []
            }
        },
        "main": {
            "name": "main",
            "location": 147,
            "return": [],
            "arguments": {}
        },
        "average_parameters": {
            "name": "average_parameters",
            "location": 157,
            "return": [],
            "arguments": {
                "args": []
            }
        }
    },
    "saml-nmt-master/sockeye/checkpoint_decoder.py": {
        "parallel_subsample": {
            "name": "parallel_subsample",
            "location": 178,
            "return": [],
            "arguments": {
                "parallel_sequences": [],
                "sample_size": [],
                "seed": []
            }
        },
        "write_to_file": {
            "name": "write_to_file",
            "location": 186,
            "return": [],
            "arguments": {
                "data": [],
                "fname": []
            }
        },
        "CheckpointDecoder.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "inputs": [],
                "references": [],
                "model": [],
                "max_input_len": [],
                "batch_size": [],
                "beam_size": [],
                "bucket_width_source": [],
                "length_penalty_alpha": [],
                "length_penalty_beta": [],
                "softmax_temperature": [],
                "max_output_length_num_stds": [],
                "ensemble_mode": [],
                "sample_size": [],
                "random_seed": []
            }
        },
        "CheckpointDecoder.decode_and_evaluate": {
            "name": "decode_and_evaluate",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "checkpoint": [],
                "output_name": []
            }
        }
    },
    "saml-nmt-master/sockeye/config.py": {
        "TaggedYamlObjectMetaclass.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "cls": [],
                "name": [],
                "bases": [],
                "kwds": []
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.__setattr__": {
            "name": "__setattr__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "Config.__setstate__": {
            "name": "__setstate__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Config.freeze": {
            "name": "freeze",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.__repr__": {
            "name": "__repr__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.__eq__": {
            "name": "__eq__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Config.__del_frozen": {
            "name": "__del_frozen",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.__add_frozen": {
            "name": "__add_frozen",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.save": {
            "name": "save",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "fname": []
            }
        },
        "Config.load": {
            "name": "load",
            "location": 111,
            "return": [],
            "arguments": {
                "fname": []
            }
        },
        "Config.copy": {
            "name": "copy",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "saml-nmt-master/sockeye/constants.py": {},
    "saml-nmt-master/sockeye/convolution.py": {
        "ConvolutionConfig.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "kernel_width": [],
                "num_hidden": [],
                "act_type": [],
                "weight_normalization": []
            }
        },
        "ConvolutionBlock.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "pad_type": [],
                "prefix": []
            }
        },
        "ConvolutionBlock._pre_activation_num_hidden": {
            "name": "_pre_activation_num_hidden",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConvolutionBlock.__call__": {
            "name": "__call__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "data_length": [],
                "seq_len": []
            }
        },
        "ConvolutionBlock.step": {
            "name": "step",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConvolutionBlock._post_convolution": {
            "name": "_post_convolution",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "data_conv": []
            }
        }
    },
    "saml-nmt-master/sockeye/coverage.py": {
        "get_coverage": {
            "name": "get_coverage",
            "location": 49,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "mask_coverage": {
            "name": "mask_coverage",
            "location": 307,
            "return": [],
            "arguments": {
                "coverage": [],
                "source_length": []
            }
        },
        "CoverageConfig.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "num_hidden": [],
                "layer_normalization": []
            }
        },
        "Coverage.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": []
            }
        },
        "Coverage.on": {
            "name": "on",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "source_length": [],
                "source_seq_len": []
            }
        },
        "CountCoverage.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CountCoverage.on": {
            "name": "on",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "source_length": [],
                "source_seq_len": []
            }
        },
        "GRUCoverage.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "coverage_num_hidden": [],
                "layer_normalization": []
            }
        },
        "GRUCoverage.on": {
            "name": "on",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "source_length": [],
                "source_seq_len": []
            }
        },
        "ActivationCoverage.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "coverage_num_hidden": [],
                "activation": [],
                "layer_normalization": []
            }
        },
        "ActivationCoverage.on": {
            "name": "on",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "source_length": [],
                "source_seq_len": []
            }
        },
        "Coverage.on.update_coverage": {
            "name": "update_coverage",
            "location": 86,
            "return": [],
            "arguments": {
                "prev_hidden": [],
                "attention_prob_scores": [],
                "prev_coverage": []
            }
        },
        "CountCoverage.on.update_coverage": {
            "name": "update_coverage",
            "location": 118,
            "return": [],
            "arguments": {
                "prev_hidden": [],
                "attention_prob_scores": [],
                "prev_coverage": []
            }
        },
        "GRUCoverage.on.update_coverage": {
            "name": "update_coverage",
            "location": 162,
            "return": [],
            "arguments": {
                "prev_hidden": [],
                "attention_prob_scores": [],
                "prev_coverage": []
            }
        },
        "ActivationCoverage.on.update_coverage": {
            "name": "update_coverage",
            "location": 250,
            "return": [],
            "arguments": {
                "prev_hidden": [],
                "attention_prob_scores": [],
                "prev_coverage": []
            }
        }
    },
    "saml-nmt-master/sockeye/data_io.py": {
        "define_buckets": {
            "name": "define_buckets",
            "location": 39,
            "return": [],
            "arguments": {
                "max_seq_len": [],
                "step": []
            }
        },
        "define_parallel_buckets": {
            "name": "define_parallel_buckets",
            "location": 55,
            "return": [],
            "arguments": {
                "max_seq_len_source": [],
                "max_seq_len_target": [],
                "bucket_width": [],
                "length_ratio": []
            }
        },
        "define_empty_source_parallel_buckets": {
            "name": "define_empty_source_parallel_buckets",
            "location": 94,
            "return": [],
            "arguments": {
                "max_seq_len_target": [],
                "bucket_width": []
            }
        },
        "get_bucket": {
            "name": "get_bucket",
            "location": 116,
            "return": [],
            "arguments": {
                "seq_len": [],
                "buckets": []
            }
        },
        "define_bucket_batch_sizes": {
            "name": "define_bucket_batch_sizes",
            "location": 143,
            "return": [],
            "arguments": {
                "buckets": [],
                "batch_size": [],
                "batch_by_words": [],
                "batch_num_devices": [],
                "data_target_average_len": []
            }
        },
        "calculate_length_statistics": {
            "name": "calculate_length_statistics",
            "location": 207,
            "return": [],
            "arguments": {
                "source_iterables": [],
                "target_iterable": [],
                "max_seq_len_source": [],
                "max_seq_len_target": []
            }
        },
        "analyze_sequence_lengths": {
            "name": "analyze_sequence_lengths",
            "location": 240,
            "return": [],
            "arguments": {
                "sources": [],
                "target": [],
                "vocab_sources": [],
                "vocab_target": [],
                "max_seq_len_source": [],
                "max_seq_len_target": []
            }
        },
        "are_token_parallel": {
            "name": "are_token_parallel",
            "location": 261,
            "return": [],
            "arguments": {
                "sequences": []
            }
        },
        "shard_data": {
            "name": "shard_data",
            "location": 348,
            "return": [],
            "arguments": {
                "source_fnames": [],
                "target_fname": [],
                "source_vocabs": [],
                "target_vocab": [],
                "num_shards": [],
                "buckets": [],
                "length_ratio_mean": [],
                "length_ratio_std": [],
                "output_prefix": []
            }
        },
        "get_num_shards": {
            "name": "get_num_shards",
            "location": 500,
            "return": [],
            "arguments": {
                "num_samples": [],
                "samples_per_shard": [],
                "min_num_shards": []
            }
        },
        "prepare_data": {
            "name": "prepare_data",
            "location": 512,
            "return": [],
            "arguments": {
                "source_fnames": [],
                "target_fname": [],
                "source_vocabs": [],
                "target_vocab": [],
                "source_vocab_paths": [],
                "target_vocab_path": [],
                "shared_vocab": [],
                "max_seq_len_source": [],
                "max_seq_len_target": [],
                "bucketing": [],
                "bucket_width": [],
                "samples_per_shard": [],
                "min_num_shards": [],
                "output_prefix": [],
                "keep_tmp_shard_files": []
            }
        },
        "get_data_statistics": {
            "name": "get_data_statistics",
            "location": 602,
            "return": [],
            "arguments": {
                "source_readers": [],
                "target_reader": [],
                "buckets": [],
                "length_ratio_mean": [],
                "length_ratio_std": [],
                "source_vocabs": [],
                "target_vocab": []
            }
        },
        "get_validation_data_iter": {
            "name": "get_validation_data_iter",
            "location": 627,
            "return": [],
            "arguments": {
                "data_loader": [],
                "validation_sources": [],
                "validation_target": [],
                "buckets": [],
                "bucket_batch_sizes": [],
                "source_vocabs": [],
                "target_vocab": [],
                "max_seq_len_source": [],
                "max_seq_len_target": [],
                "batch_size": [],
                "fill_up": []
            }
        },
        "get_prepared_data_iters": {
            "name": "get_prepared_data_iters",
            "location": 671,
            "return": [],
            "arguments": {
                "prepared_data_dir": [],
                "validation_sources": [],
                "validation_target": [],
                "shared_vocab": [],
                "batch_size": [],
                "batch_by_words": [],
                "batch_num_devices": [],
                "fill_up": [],
                "permute": []
            }
        },
        "get_training_data_iters": {
            "name": "get_training_data_iters",
            "location": 757,
            "return": [],
            "arguments": {
                "sources": [],
                "target": [],
                "validation_sources": [],
                "validation_target": [],
                "source_vocabs": [],
                "target_vocab": [],
                "source_vocab_paths": [],
                "target_vocab_path": [],
                "shared_vocab": [],
                "batch_size": [],
                "batch_by_words": [],
                "batch_num_devices": [],
                "fill_up": [],
                "max_seq_len_source": [],
                "max_seq_len_target": [],
                "bucketing": [],
                "bucket_width": [],
                "permute": []
            }
        },
        "describe_data_and_buckets": {
            "name": "describe_data_and_buckets",
            "location": 929,
            "return": [],
            "arguments": {
                "data_statistics": [],
                "bucket_batch_sizes": []
            }
        },
        "read_content": {
            "name": "read_content",
            "location": 986,
            "return": [],
            "arguments": {
                "path": [],
                "limit": []
            }
        },
        "tokens2ids": {
            "name": "tokens2ids",
            "location": 1001,
            "return": [],
            "arguments": {
                "tokens": [],
                "vocab": []
            }
        },
        "strids2ids": {
            "name": "strids2ids",
            "location": 1012,
            "return": [],
            "arguments": {
                "tokens": []
            }
        },
        "ids2strids": {
            "name": "ids2strids",
            "location": 1022,
            "return": [],
            "arguments": {
                "ids": []
            }
        },
        "ids2tokens": {
            "name": "ids2tokens",
            "location": 1032,
            "return": [],
            "arguments": {
                "token_ids": [],
                "vocab_inv": [],
                "exclude_set": []
            }
        },
        "create_sequence_readers": {
            "name": "create_sequence_readers",
            "location": 1100,
            "return": [],
            "arguments": {
                "sources": [],
                "target": [],
                "vocab_sources": [],
                "vocab_target": []
            }
        },
        "parallel_iter": {
            "name": "parallel_iter",
            "location": 1118,
            "return": [],
            "arguments": {
                "source_iters": [],
                "target_iterable": []
            }
        },
        "get_default_bucket_key": {
            "name": "get_default_bucket_key",
            "location": 1171,
            "return": [],
            "arguments": {
                "buckets": []
            }
        },
        "get_parallel_bucket": {
            "name": "get_parallel_bucket",
            "location": 1181,
            "return": [],
            "arguments": {
                "buckets": [],
                "length_source": [],
                "length_target": []
            }
        },
        "get_target_bucket": {
            "name": "get_target_bucket",
            "location": 1199,
            "return": [],
            "arguments": {
                "buckets": [],
                "length_target": []
            }
        },
        "get_permutations": {
            "name": "get_permutations",
            "location": 1345,
            "return": [],
            "arguments": {
                "bucket_counts": []
            }
        },
        "get_batch_indices": {
            "name": "get_batch_indices",
            "location": 1370,
            "return": [],
            "arguments": {
                "data": [],
                "bucket_batch_sizes": []
            }
        },
        "BucketBatchSize.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "bucket": [],
                "batch_size": [],
                "average_words_per_batch": []
            }
        },
        "DataStatisticsAccumulator.__init__": {
            "name": "__init__",
            "location": 272,
            "return": [],
            "arguments": {
                "self": [],
                "buckets": [],
                "vocab_source": [],
                "vocab_target": [],
                "length_ratio_mean": [],
                "length_ratio_std": []
            }
        },
        "DataStatisticsAccumulator.sequence_pair": {
            "name": "sequence_pair",
            "location": 300,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "target": [],
                "bucket_idx": []
            }
        },
        "DataStatisticsAccumulator.mean_len_target_per_bucket": {
            "name": "mean_len_target_per_bucket",
            "location": 324,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataStatisticsAccumulator.statistics": {
            "name": "statistics",
            "location": 329,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawParallelDatasetLoader.__init__": {
            "name": "__init__",
            "location": 429,
            "return": [],
            "arguments": {
                "self": [],
                "buckets": [],
                "eos_id": [],
                "pad_id": [],
                "dtype": []
            }
        },
        "RawParallelDatasetLoader.load": {
            "name": "load",
            "location": 439,
            "return": [],
            "arguments": {
                "self": [],
                "source_iterables": [],
                "target_iterable": [],
                "num_samples_per_bucket": []
            }
        },
        "LengthStatistics.__init__": {
            "name": "__init__",
            "location": 872,
            "return": [],
            "arguments": {
                "self": [],
                "num_sents": [],
                "length_ratio_mean": [],
                "length_ratio_std": []
            }
        },
        "DataStatistics.__init__": {
            "name": "__init__",
            "location": 884,
            "return": [],
            "arguments": {
                "self": [],
                "num_sents": [],
                "num_discarded": [],
                "num_tokens_source": [],
                "num_tokens_target": [],
                "num_unks_source": [],
                "num_unks_target": [],
                "max_observed_len_source": [],
                "max_observed_len_target": [],
                "size_vocab_source": [],
                "size_vocab_target": [],
                "length_ratio_mean": [],
                "length_ratio_std": [],
                "buckets": [],
                "num_sents_per_bucket": [],
                "mean_len_target_per_bucket": []
            }
        },
        "DataStatistics.log": {
            "name": "log",
            "location": 917,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_batch_sizes": []
            }
        },
        "DataInfo.__init__": {
            "name": "__init__",
            "location": 951,
            "return": [],
            "arguments": {
                "self": [],
                "sources": [],
                "target": [],
                "source_vocabs": [],
                "target_vocab": [],
                "shared_vocab": [],
                "num_shards": []
            }
        },
        "DataConfig.__init__": {
            "name": "__init__",
            "location": 972,
            "return": [],
            "arguments": {
                "self": [],
                "data_statistics": [],
                "max_seq_len_source": [],
                "max_seq_len_target": [],
                "num_source_factors": [],
                "source_with_eos": []
            }
        },
        "SequenceReader.__init__": {
            "name": "__init__",
            "location": 1061,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "vocabulary": [],
                "add_bos": [],
                "add_eos": [],
                "limit": []
            }
        },
        "SequenceReader.__iter__": {
            "name": "__iter__",
            "location": 1084,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileListReader.__init__": {
            "name": "__init__",
            "location": 1152,
            "return": [],
            "arguments": {
                "self": [],
                "fname": [],
                "path": []
            }
        },
        "FileListReader.__next__": {
            "name": "__next__",
            "location": 1160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParallelDataSet.__init__": {
            "name": "__init__",
            "location": 1222,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "target": [],
                "label": []
            }
        },
        "ParallelDataSet.__len__": {
            "name": "__len__",
            "location": 1234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParallelDataSet.get_bucket_counts": {
            "name": "get_bucket_counts",
            "location": 1237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParallelDataSet.save": {
            "name": "save",
            "location": 1240,
            "return": [],
            "arguments": {
                "self": [],
                "fname": []
            }
        },
        "ParallelDataSet.load": {
            "name": "load",
            "location": 1247,
            "return": [],
            "arguments": {
                "fname": []
            }
        },
        "ParallelDataSet.fill_up": {
            "name": "fill_up",
            "location": 1259,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_batch_sizes": [],
                "policy": [],
                "seed": []
            }
        },
        "ParallelDataSet.permute": {
            "name": "permute",
            "location": 1315,
            "return": [],
            "arguments": {
                "self": [],
                "permutations": []
            }
        },
        "BaseParallelSampleIter.__init__": {
            "name": "__init__",
            "location": 1415,
            "return": [],
            "arguments": {
                "self": [],
                "buckets": [],
                "batch_size": [],
                "bucket_batch_sizes": [],
                "source_data_name": [],
                "target_data_name": [],
                "label_name": [],
                "num_factors": [],
                "permute": [],
                "dtype": []
            }
        },
        "BaseParallelSampleIter.reset": {
            "name": "reset",
            "location": 1461,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseParallelSampleIter.iter_next": {
            "name": "iter_next",
            "location": 1465,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseParallelSampleIter.next": {
            "name": "next",
            "location": 1469,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseParallelSampleIter.save_state": {
            "name": "save_state",
            "location": 1473,
            "return": [],
            "arguments": {
                "self": [],
                "fname": []
            }
        },
        "BaseParallelSampleIter.load_state": {
            "name": "load_state",
            "location": 1477,
            "return": [],
            "arguments": {
                "self": [],
                "fname": []
            }
        },
        "ShardedParallelSampleIter.__init__": {
            "name": "__init__",
            "location": 1487,
            "return": [],
            "arguments": {
                "self": [],
                "shards_fnames": [],
                "buckets": [],
                "batch_size": [],
                "bucket_batch_sizes": [],
                "fill_up": [],
                "source_data_name": [],
                "target_data_name": [],
                "label_name": [],
                "num_factors": [],
                "permute": [],
                "dtype": []
            }
        },
        "ShardedParallelSampleIter._load_shard": {
            "name": "_load_shard",
            "location": 1509,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ShardedParallelSampleIter.reset": {
            "name": "reset",
            "location": 1524,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ShardedParallelSampleIter.iter_next": {
            "name": "iter_next",
            "location": 1548,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ShardedParallelSampleIter.next": {
            "name": "next",
            "location": 1552,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ShardedParallelSampleIter.save_state": {
            "name": "save_state",
            "location": 1561,
            "return": [],
            "arguments": {
                "self": [],
                "fname": []
            }
        },
        "ShardedParallelSampleIter.load_state": {
            "name": "load_state",
            "location": 1567,
            "return": [],
            "arguments": {
                "self": [],
                "fname": []
            }
        },
        "ParallelSampleIter.__init__": {
            "name": "__init__",
            "location": 1581,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "buckets": [],
                "batch_size": [],
                "bucket_batch_sizes": [],
                "source_data_name": [],
                "target_data_name": [],
                "label_name": [],
                "num_factors": [],
                "permute": [],
                "dtype": []
            }
        },
        "ParallelSampleIter.reset": {
            "name": "reset",
            "location": 1612,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParallelSampleIter.iter_next": {
            "name": "iter_next",
            "location": 1628,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParallelSampleIter.next": {
            "name": "next",
            "location": 1634,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParallelSampleIter.save_state": {
            "name": "save_state",
            "location": 1660,
            "return": [],
            "arguments": {
                "self": [],
                "fname": []
            }
        },
        "ParallelSampleIter.load_state": {
            "name": "load_state",
            "location": 1674,
            "return": [],
            "arguments": {
                "self": [],
                "fname": []
            }
        }
    },
    "saml-nmt-master/sockeye/decoder.py": {
        "get_decoder": {
            "name": "get_decoder",
            "location": 37,
            "return": [],
            "arguments": {
                "config": [],
                "prefix": []
            }
        },
        "Decoder.register": {
            "name": "register",
            "location": 56,
            "return": [],
            "arguments": {
                "cls": [],
                "config_type": [],
                "suffix": []
            }
        },
        "Decoder.get_decoder": {
            "name": "get_decoder",
            "location": 72,
            "return": [],
            "arguments": {
                "cls": [],
                "config": [],
                "prefix": []
            }
        },
        "Decoder.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "dtype": []
            }
        },
        "Decoder.decode_sequence": {
            "name": "decode_sequence",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "source_encoded": [],
                "source_encoded_lengths": [],
                "source_encoded_max_length": [],
                "target_embed": [],
                "target_embed_lengths": [],
                "target_embed_max_length": []
            }
        },
        "Decoder.decode_step": {
            "name": "decode_step",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "step": [],
                "target_embed_prev": [],
                "source_encoded_max_length": []
            }
        },
        "Decoder.reset": {
            "name": "reset",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Decoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Decoder.init_states": {
            "name": "init_states",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "source_encoded": [],
                "source_encoded_lengths": [],
                "source_encoded_max_length": []
            }
        },
        "Decoder.state_variables": {
            "name": "state_variables",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "target_max_length": []
            }
        },
        "Decoder.state_shapes": {
            "name": "state_shapes",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "batch_size": [],
                "target_max_length": [],
                "source_encoded_max_length": [],
                "source_encoded_depth": []
            }
        },
        "Decoder.get_max_seq_len": {
            "name": "get_max_seq_len",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Decoder.set_teacher_forcing_probability": {
            "name": "set_teacher_forcing_probability",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "teacher_forcing_probability": [],
                "block_grad_prev_prediction": []
            }
        },
        "Decoder.set_instantiate_hidden": {
            "name": "set_instantiate_hidden",
            "location": 215,
            "return": [],
            "arguments": {
                "self": [],
                "instantiate_hidden": [],
                "output_layer": [],
                "embedding_target": [],
                "softmax_temperature": [],
                "gumbel_noise_scale": []
            }
        },
        "Decoder.get_eos_mask": {
            "name": "get_eos_mask",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransformerDecoder.__init__": {
            "name": "__init__",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "prefix": []
            }
        },
        "TransformerDecoder.decode_sequence": {
            "name": "decode_sequence",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "source_encoded": [],
                "source_encoded_lengths": [],
                "source_encoded_max_length": [],
                "target_embed": [],
                "target_embed_lengths": [],
                "target_embed_max_length": []
            }
        },
        "TransformerDecoder.decode_step": {
            "name": "decode_step",
            "location": 314,
            "return": [],
            "arguments": {
                "self": [],
                "step": [],
                "target_embed_prev": [],
                "source_encoded_max_length": []
            }
        },
        "TransformerDecoder._get_cache_per_layer": {
            "name": "_get_cache_per_layer",
            "location": 377,
            "return": [],
            "arguments": {
                "self": [],
                "cache": []
            }
        },
        "TransformerDecoder.reset": {
            "name": "reset",
            "location": 391,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransformerDecoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 394,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransformerDecoder.init_states": {
            "name": "init_states",
            "location": 400,
            "return": [],
            "arguments": {
                "self": [],
                "source_encoded": [],
                "source_encoded_lengths": [],
                "source_encoded_max_length": []
            }
        },
        "TransformerDecoder.state_variables": {
            "name": "state_variables",
            "location": 415,
            "return": [],
            "arguments": {
                "self": [],
                "target_max_length": []
            }
        },
        "TransformerDecoder.state_shapes": {
            "name": "state_shapes",
            "location": 430,
            "return": [],
            "arguments": {
                "self": [],
                "batch_size": [],
                "target_max_length": [],
                "source_encoded_max_length": [],
                "source_encoded_depth": []
            }
        },
        "TransformerDecoder.get_max_seq_len": {
            "name": "get_max_seq_len",
            "location": 460,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecurrentDecoderConfig.__init__": {
            "name": "__init__",
            "location": 495,
            "return": [],
            "arguments": {
                "self": [],
                "max_seq_len_source": [],
                "rnn_config": [],
                "attention_config": [],
                "hidden_dropout": [],
                "state_init": [],
                "state_init_lhuc": [],
                "context_gating": [],
                "layer_normalization": [],
                "attention_in_upper_layers": [],
                "dtype": [],
                "enc_last_hidden_concat_to_embedding": []
            }
        },
        "RecurrentDecoder.__init__": {
            "name": "__init__",
            "location": 532,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "prefix": []
            }
        },
        "RecurrentDecoder._create_state_init_parameters": {
            "name": "_create_state_init_parameters",
            "location": 581,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecurrentDecoder.decode_sequence": {
            "name": "decode_sequence",
            "location": 597,
            "return": [],
            "arguments": {
                "self": [],
                "source_encoded": [],
                "source_encoded_lengths": [],
                "source_encoded_max_length": [],
                "target_embed": [],
                "target_embed_lengths": [],
                "target_embed_max_length": []
            }
        },
        "RecurrentDecoder.decode_step": {
            "name": "decode_step",
            "location": 705,
            "return": [],
            "arguments": {
                "self": [],
                "step": [],
                "target_embed_prev": [],
                "source_encoded_max_length": []
            }
        },
        "RecurrentDecoder.reset": {
            "name": "reset",
            "location": 754,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecurrentDecoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 770,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecurrentDecoder.init_states": {
            "name": "init_states",
            "location": 776,
            "return": [],
            "arguments": {
                "self": [],
                "source_encoded": [],
                "source_encoded_lengths": [],
                "source_encoded_max_length": []
            }
        },
        "RecurrentDecoder.state_variables": {
            "name": "state_variables",
            "location": 795,
            "return": [],
            "arguments": {
                "self": [],
                "target_max_length": []
            }
        },
        "RecurrentDecoder.state_shapes": {
            "name": "state_shapes",
            "location": 809,
            "return": [],
            "arguments": {
                "self": [],
                "batch_size": [],
                "target_max_length": [],
                "source_encoded_max_length": [],
                "source_encoded_depth": []
            }
        },
        "RecurrentDecoder.get_rnn_cells": {
            "name": "get_rnn_cells",
            "location": 842,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecurrentDecoder.get_initial_state": {
            "name": "get_initial_state",
            "location": 851,
            "return": [],
            "arguments": {
                "self": [],
                "source_encoded": [],
                "source_encoded_length": []
            }
        },
        "RecurrentDecoder._step": {
            "name": "_step",
            "location": 914,
            "return": [],
            "arguments": {
                "self": [],
                "word_vec_prev": [],
                "state": [],
                "attention_func": [],
                "attention_state": [],
                "seq_idx": [],
                "enc_last_hidden": []
            }
        },
        "RecurrentDecoder._hidden_mlp": {
            "name": "_hidden_mlp",
            "location": 975,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_concat": [],
                "seq_idx": []
            }
        },
        "RecurrentDecoder._context_gate": {
            "name": "_context_gate",
            "location": 989,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_concat": [],
                "rnn_output": [],
                "attention_state": [],
                "seq_idx": []
            }
        },
        "ConvolutionalDecoderConfig.__init__": {
            "name": "__init__",
            "location": 1038,
            "return": [],
            "arguments": {
                "self": [],
                "cnn_config": [],
                "max_seq_len_target": [],
                "num_embed": [],
                "encoder_num_hidden": [],
                "num_layers": [],
                "positional_embedding_type": [],
                "project_qkv": [],
                "hidden_dropout": [],
                "dtype": []
            }
        },
        "ConvolutionalDecoder.__init__": {
            "name": "__init__",
            "location": 1080,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "prefix": []
            }
        },
        "ConvolutionalDecoder.decode_sequence": {
            "name": "decode_sequence",
            "location": 1112,
            "return": [],
            "arguments": {
                "self": [],
                "source_encoded": [],
                "source_encoded_lengths": [],
                "source_encoded_max_length": [],
                "target_embed": [],
                "target_embed_lengths": [],
                "target_embed_max_length": []
            }
        },
        "ConvolutionalDecoder._decode": {
            "name": "_decode",
            "location": 1141,
            "return": [],
            "arguments": {
                "self": [],
                "source_encoded": [],
                "source_encoded_lengths": [],
                "target_embed": [],
                "target_embed_lengths": [],
                "target_embed_max_length": []
            }
        },
        "ConvolutionalDecoder.decode_step": {
            "name": "decode_step",
            "location": 1184,
            "return": [],
            "arguments": {
                "self": [],
                "step": [],
                "target_embed_prev": [],
                "source_encoded_max_length": []
            }
        },
        "ConvolutionalDecoder.reset": {
            "name": "reset",
            "location": 1268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConvolutionalDecoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 1271,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConvolutionalDecoder.init_states": {
            "name": "init_states",
            "location": 1277,
            "return": [],
            "arguments": {
                "self": [],
                "source_encoded": [],
                "source_encoded_lengths": [],
                "source_encoded_max_length": []
            }
        },
        "ConvolutionalDecoder.state_variables": {
            "name": "state_variables",
            "location": 1304,
            "return": [],
            "arguments": {
                "self": [],
                "target_max_length": []
            }
        },
        "ConvolutionalDecoder.state_shapes": {
            "name": "state_shapes",
            "location": 1317,
            "return": [],
            "arguments": {
                "self": [],
                "batch_size": [],
                "target_max_length": [],
                "source_encoded_max_length": [],
                "source_encoded_depth": []
            }
        },
        "ConvolutionalDecoder.get_max_seq_len": {
            "name": "get_max_seq_len",
            "location": 1343,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Decoder.register.wrapper": {
            "name": "wrapper",
            "location": 65,
            "return": [],
            "arguments": {
                "target_cls": []
            }
        }
    },
    "saml-nmt-master/sockeye/embeddings.py": {
        "compute_sims": {
            "name": "compute_sims",
            "location": 36,
            "return": [],
            "arguments": {
                "inputs": [],
                "normalize": []
            }
        },
        "nearest_k": {
            "name": "nearest_k",
            "location": 56,
            "return": [],
            "arguments": {
                "similarity_matrix": [],
                "query_word_id": [],
                "k": [],
                "gamma": []
            }
        },
        "get_embedding_parameter_names": {
            "name": "get_embedding_parameter_names",
            "location": 74,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "main": {
            "name": "main",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "embeddings": {
            "name": "embeddings",
            "location": 100,
            "return": [],
            "arguments": {
                "args": []
            }
        }
    },
    "saml-nmt-master/sockeye/encoder.py": {
        "get_encoder": {
            "name": "get_encoder",
            "location": 38,
            "return": [],
            "arguments": {
                "config": [],
                "prefix": []
            }
        },
        "get_recurrent_encoder": {
            "name": "get_recurrent_encoder",
            "location": 124,
            "return": [],
            "arguments": {
                "config": [],
                "prefix": []
            }
        },
        "get_convolutional_encoder": {
            "name": "get_convolutional_encoder",
            "location": 177,
            "return": [],
            "arguments": {
                "config": [],
                "prefix": []
            }
        },
        "get_transformer_encoder": {
            "name": "get_transformer_encoder",
            "location": 197,
            "return": [],
            "arguments": {
                "config": [],
                "prefix": []
            }
        },
        "_get_positional_embedding_params": {
            "name": "_get_positional_embedding_params",
            "location": 673,
            "return": [],
            "arguments": {
                "positional_embedding_type": [],
                "num_embed": [],
                "max_seq_len": [],
                "fixed_pos_embed_scale_up_input": [],
                "fixed_pos_embed_scale_down_positions": [],
                "prefix": []
            }
        },
        "get_positional_embedding": {
            "name": "get_positional_embedding",
            "location": 694,
            "return": [],
            "arguments": {
                "positional_embedding_type": [],
                "num_embed": [],
                "max_seq_len": [],
                "fixed_pos_embed_scale_up_input": [],
                "fixed_pos_embed_scale_down_positions": [],
                "prefix": []
            }
        },
        "RecurrentEncoderConfig.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "rnn_config": [],
                "conv_config": [],
                "reverse_input": [],
                "dtype": []
            }
        },
        "ConvolutionalEncoderConfig.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "num_embed": [],
                "max_seq_len_source": [],
                "cnn_config": [],
                "num_layers": [],
                "positional_embedding_type": [],
                "dtype": []
            }
        },
        "EmptyEncoderConfig.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "num_embed": [],
                "num_hidden": [],
                "dtype": []
            }
        },
        "Encoder.__init__": {
            "name": "__init__",
            "location": 231,
            "return": [],
            "arguments": {
                "self": [],
                "dtype": []
            }
        },
        "Encoder.encode": {
            "name": "encode",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "data_length": [],
                "seq_len": []
            }
        },
        "Encoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Encoder.get_encoded_seq_len": {
            "name": "get_encoded_seq_len",
            "location": 257,
            "return": [],
            "arguments": {
                "self": [],
                "seq_len": []
            }
        },
        "Encoder.get_max_seq_len": {
            "name": "get_max_seq_len",
            "location": 263,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConvertLayout.__init__": {
            "name": "__init__",
            "location": 279,
            "return": [],
            "arguments": {
                "self": [],
                "target_layout": [],
                "num_hidden": [],
                "dtype": []
            }
        },
        "ConvertLayout.encode": {
            "name": "encode",
            "location": 285,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "data_length": [],
                "seq_len": []
            }
        },
        "ConvertLayout.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 300,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReverseSequence.__init__": {
            "name": "__init__",
            "location": 311,
            "return": [],
            "arguments": {
                "self": [],
                "num_hidden": [],
                "dtype": []
            }
        },
        "ReverseSequence.encode": {
            "name": "encode",
            "location": 315,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "data_length": [],
                "seq_len": []
            }
        },
        "ReverseSequence.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 322,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FactorConfig.__init__": {
            "name": "__init__",
            "location": 328,
            "return": [],
            "arguments": {
                "self": [],
                "vocab_size": [],
                "num_embed": []
            }
        },
        "EmbeddingConfig.__init__": {
            "name": "__init__",
            "location": 336,
            "return": [],
            "arguments": {
                "self": [],
                "vocab_size": [],
                "num_embed": [],
                "dropout": [],
                "factor_configs": [],
                "dtype": []
            }
        },
        "Embedding.__init__": {
            "name": "__init__",
            "location": 363,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "prefix": [],
                "embed_weight": [],
                "is_source": []
            }
        },
        "Embedding.encode": {
            "name": "encode",
            "location": 385,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "data_length": [],
                "seq_len": []
            }
        },
        "Embedding.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 428,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PassThroughEmbeddingConfig.__init__": {
            "name": "__init__",
            "location": 437,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PassThroughEmbedding.__init__": {
            "name": "__init__",
            "location": 448,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "PassThroughEmbedding.encode": {
            "name": "encode",
            "location": 453,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "data_length": [],
                "seq_len": []
            }
        },
        "PassThroughEmbedding.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 466,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PositionalEncoder.encode_positions": {
            "name": "encode_positions",
            "location": 475,
            "return": [],
            "arguments": {
                "self": [],
                "positions": [],
                "data": []
            }
        },
        "AddSinCosPositionalEmbeddings.__init__": {
            "name": "__init__",
            "location": 498,
            "return": [],
            "arguments": {
                "self": [],
                "num_embed": [],
                "prefix": [],
                "scale_up_input": [],
                "scale_down_positions": [],
                "dtype": []
            }
        },
        "AddSinCosPositionalEmbeddings.encode": {
            "name": "encode",
            "location": 512,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "data_length": [],
                "seq_len": []
            }
        },
        "AddSinCosPositionalEmbeddings.encode_positions": {
            "name": "encode_positions",
            "location": 537,
            "return": [],
            "arguments": {
                "self": [],
                "positions": [],
                "data": []
            }
        },
        "AddSinCosPositionalEmbeddings.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 569,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AddLearnedPositionalEmbeddings.__init__": {
            "name": "__init__",
            "location": 585,
            "return": [],
            "arguments": {
                "self": [],
                "num_embed": [],
                "max_seq_len": [],
                "prefix": [],
                "embed_weight": [],
                "dtype": []
            }
        },
        "AddLearnedPositionalEmbeddings.encode": {
            "name": "encode",
            "location": 600,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "data_length": [],
                "seq_len": []
            }
        },
        "AddLearnedPositionalEmbeddings.encode_positions": {
            "name": "encode_positions",
            "location": 622,
            "return": [],
            "arguments": {
                "self": [],
                "positions": [],
                "data": []
            }
        },
        "AddLearnedPositionalEmbeddings.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 639,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AddLearnedPositionalEmbeddings.get_max_seq_len": {
            "name": "get_max_seq_len",
            "location": 642,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NoOpPositionalEmbeddings.__init__": {
            "name": "__init__",
            "location": 654,
            "return": [],
            "arguments": {
                "self": [],
                "num_embed": [],
                "dtype": []
            }
        },
        "NoOpPositionalEmbeddings.encode": {
            "name": "encode",
            "location": 658,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "data_length": [],
                "seq_len": []
            }
        },
        "NoOpPositionalEmbeddings.encode_positions": {
            "name": "encode_positions",
            "location": 664,
            "return": [],
            "arguments": {
                "self": [],
                "positions": [],
                "data": []
            }
        },
        "NoOpPositionalEmbeddings.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 669,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EncoderSequence.__init__": {
            "name": "__init__",
            "location": 717,
            "return": [],
            "arguments": {
                "self": [],
                "encoders": [],
                "dtype": []
            }
        },
        "EncoderSequence.encode": {
            "name": "encode",
            "location": 721,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "data_length": [],
                "seq_len": []
            }
        },
        "EncoderSequence.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 737,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EncoderSequence.get_encoded_seq_len": {
            "name": "get_encoded_seq_len",
            "location": 743,
            "return": [],
            "arguments": {
                "self": [],
                "seq_len": []
            }
        },
        "EncoderSequence.get_max_seq_len": {
            "name": "get_max_seq_len",
            "location": 751,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EncoderSequence.append": {
            "name": "append",
            "location": 759,
            "return": [],
            "arguments": {
                "self": [],
                "cls": [],
                "infer_hidden": []
            }
        },
        "EmptyEncoder.__init__": {
            "name": "__init__",
            "location": 788,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "EmptyEncoder.encode": {
            "name": "encode",
            "location": 794,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "data_length": [],
                "seq_len": []
            }
        },
        "EmptyEncoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 809,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecurrentEncoder.__init__": {
            "name": "__init__",
            "location": 825,
            "return": [],
            "arguments": {
                "self": [],
                "rnn_config": [],
                "prefix": [],
                "layout": []
            }
        },
        "RecurrentEncoder.encode": {
            "name": "encode",
            "location": 834,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "data_length": [],
                "seq_len": []
            }
        },
        "RecurrentEncoder.get_rnn_cells": {
            "name": "get_rnn_cells",
            "location": 850,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RecurrentEncoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 856,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BiDirectionalRNNEncoder.__init__": {
            "name": "__init__",
            "location": 874,
            "return": [],
            "arguments": {
                "self": [],
                "rnn_config": [],
                "prefix": [],
                "layout": [],
                "encoder_class": []
            }
        },
        "BiDirectionalRNNEncoder.encode": {
            "name": "encode",
            "location": 897,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "data_length": [],
                "seq_len": []
            }
        },
        "BiDirectionalRNNEncoder._encode": {
            "name": "_encode",
            "location": 916,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "data_length": [],
                "seq_len": []
            }
        },
        "BiDirectionalRNNEncoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 935,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BiDirectionalRNNEncoder.get_rnn_cells": {
            "name": "get_rnn_cells",
            "location": 941,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConvolutionalEncoder.__init__": {
            "name": "__init__",
            "location": 956,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "prefix": []
            }
        },
        "ConvolutionalEncoder.encode": {
            "name": "encode",
            "location": 972,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "data_length": [],
                "seq_len": []
            }
        },
        "ConvolutionalEncoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 997,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransformerEncoder.__init__": {
            "name": "__init__",
            "location": 1012,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "prefix": []
            }
        },
        "TransformerEncoder.encode": {
            "name": "encode",
            "location": 1024,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "data_length": [],
                "seq_len": []
            }
        },
        "TransformerEncoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 1054,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConvolutionalEmbeddingConfig.__init__": {
            "name": "__init__",
            "location": 1076,
            "return": [],
            "arguments": {
                "self": [],
                "num_embed": [],
                "output_dim": [],
                "max_filter_width": [],
                "num_filters": [],
                "pool_stride": [],
                "num_highway_layers": [],
                "dropout": [],
                "add_positional_encoding": [],
                "dtype": []
            }
        },
        "ConvolutionalEmbeddingEncoder.__init__": {
            "name": "__init__",
            "location": 1113,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "prefix": []
            }
        },
        "ConvolutionalEmbeddingEncoder.encode": {
            "name": "encode",
            "location": 1147,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "data_length": [],
                "seq_len": []
            }
        },
        "ConvolutionalEmbeddingEncoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 1262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConvolutionalEmbeddingEncoder.get_encoded_seq_len": {
            "name": "get_encoded_seq_len",
            "location": 1268,
            "return": [],
            "arguments": {
                "self": [],
                "seq_len": []
            }
        }
    },
    "saml-nmt-master/sockeye/evaluate.py": {
        "raw_corpus_bleu": {
            "name": "raw_corpus_bleu",
            "location": 36,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": [],
                "offset": []
            }
        },
        "raw_corpus_chrf": {
            "name": "raw_corpus_chrf",
            "location": 48,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": []
            }
        },
        "raw_corpus_rouge1": {
            "name": "raw_corpus_rouge1",
            "location": 60,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": []
            }
        },
        "raw_corpus_rouge2": {
            "name": "raw_corpus_rouge2",
            "location": 71,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": []
            }
        },
        "raw_corpus_rougel": {
            "name": "raw_corpus_rougel",
            "location": 82,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": []
            }
        },
        "main": {
            "name": "main",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "_print_mean_std_score": {
            "name": "_print_mean_std_score",
            "location": 154,
            "return": [],
            "arguments": {
                "metrics": [],
                "scores": []
            }
        }
    },
    "saml-nmt-master/sockeye/extract_parameters.py": {
        "_extract": {
            "name": "_extract",
            "location": 33,
            "return": [],
            "arguments": {
                "param_names": [],
                "params": [],
                "ext_params": []
            }
        },
        "extract": {
            "name": "extract",
            "location": 53,
            "return": [],
            "arguments": {
                "param_path": [],
                "param_names": [],
                "list_all": []
            }
        },
        "main": {
            "name": "main",
            "location": 91,
            "return": [],
            "arguments": {}
        },
        "extract_parameters": {
            "name": "extract_parameters",
            "location": 101,
            "return": [],
            "arguments": {
                "args": []
            }
        }
    },
    "saml-nmt-master/sockeye/inference.py": {
        "load_models": {
            "name": "load_models",
            "location": 364,
            "return": [],
            "arguments": {
                "context": [],
                "max_input_len": [],
                "beam_size": [],
                "batch_size": [],
                "model_folders": [],
                "checkpoints": [],
                "softmax_temperature": [],
                "max_output_length_num_stds": [],
                "decoder_return_logit_inputs": [],
                "cache_output_layer_w_b": [],
                "forced_max_output_len": [],
                "override_dtype": []
            }
        },
        "models_max_input_output_length": {
            "name": "models_max_input_output_length",
            "location": 474,
            "return": [],
            "arguments": {
                "models": [],
                "num_stds": [],
                "forced_max_input_len": [],
                "forced_max_output_len": []
            }
        },
        "get_max_input_output_length": {
            "name": "get_max_input_output_length",
            "location": 512,
            "return": [],
            "arguments": {
                "supported_max_seq_len_source": [],
                "supported_max_seq_len_target": [],
                "training_max_seq_len_source": [],
                "length_ratio_mean": [],
                "length_ratio_std": [],
                "num_stds": [],
                "forced_max_input_len": [],
                "forced_max_output_len": []
            }
        },
        "_bad_input": {
            "name": "_bad_input",
            "location": 671,
            "return": [],
            "arguments": {
                "sentence_id": [],
                "reason": []
            }
        },
        "make_input_from_plain_string": {
            "name": "make_input_from_plain_string",
            "location": 676,
            "return": [],
            "arguments": {
                "sentence_id": [],
                "string": []
            }
        },
        "make_input_from_json_string": {
            "name": "make_input_from_json_string",
            "location": 687,
            "return": [],
            "arguments": {
                "sentence_id": [],
                "json_string": []
            }
        },
        "make_input_from_factored_string": {
            "name": "make_input_from_factored_string",
            "location": 736,
            "return": [],
            "arguments": {
                "sentence_id": [],
                "factored_string": [],
                "translator": [],
                "delimiter": []
            }
        },
        "make_input_from_multiple_strings": {
            "name": "make_input_from_multiple_strings",
            "location": 776,
            "return": [],
            "arguments": {
                "sentence_id": [],
                "strings": []
            }
        },
        "empty_translation": {
            "name": "empty_translation",
            "location": 842,
            "return": [],
            "arguments": {}
        },
        "_concat_translations": {
            "name": "_concat_translations",
            "location": 928,
            "return": [],
            "arguments": {
                "translations": [],
                "stop_ids": [],
                "length_penalty": []
            }
        },
        "InferenceModel.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "params_fname": [],
                "context": [],
                "beam_size": [],
                "batch_size": [],
                "softmax_temperature": [],
                "max_output_length_num_stds": [],
                "decoder_return_logit_inputs": [],
                "cache_output_layer_w_b": [],
                "forced_max_output_len": [],
                "skip_softmax": []
            }
        },
        "InferenceModel.num_source_factors": {
            "name": "num_source_factors",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InferenceModel.initialize": {
            "name": "initialize",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "max_input_length": [],
                "get_max_output_length_function": []
            }
        },
        "InferenceModel._get_encoder_module": {
            "name": "_get_encoder_module",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InferenceModel._get_decoder_module": {
            "name": "_get_decoder_module",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InferenceModel._get_encoder_data_shapes": {
            "name": "_get_encoder_data_shapes",
            "location": 261,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_key": []
            }
        },
        "InferenceModel._get_decoder_data_shapes": {
            "name": "_get_decoder_data_shapes",
            "location": 273,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_key": []
            }
        },
        "InferenceModel.run_encoder": {
            "name": "run_encoder",
            "location": 288,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "source_max_length": []
            }
        },
        "InferenceModel.run_decoder": {
            "name": "run_decoder",
            "location": 313,
            "return": [],
            "arguments": {
                "self": [],
                "prev_word": [],
                "bucket_key": [],
                "model_state": []
            }
        },
        "InferenceModel.training_max_seq_len_source": {
            "name": "training_max_seq_len_source",
            "location": 332,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InferenceModel.training_max_seq_len_target": {
            "name": "training_max_seq_len_target",
            "location": 337,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InferenceModel.max_supported_seq_len_source": {
            "name": "max_supported_seq_len_source",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InferenceModel.max_supported_seq_len_target": {
            "name": "max_supported_seq_len_target",
            "location": 347,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InferenceModel.length_ratio_mean": {
            "name": "length_ratio_mean",
            "location": 352,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InferenceModel.length_ratio_std": {
            "name": "length_ratio_std",
            "location": 356,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "InferenceModel.source_with_eos": {
            "name": "source_with_eos",
            "location": 360,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_max_input_output_length.get_max_output_length": {
            "name": "get_max_output_length",
            "location": 569,
            "return": [],
            "arguments": {
                "input_length": []
            }
        },
        "TranslatorInput.__init__": {
            "name": "__init__",
            "location": 601,
            "return": [],
            "arguments": {
                "self": [],
                "sentence_id": [],
                "tokens": [],
                "factors": [],
                "constraints": [],
                "avoid_list": []
            }
        },
        "TranslatorInput.__str__": {
            "name": "__str__",
            "location": 613,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorInput.__len__": {
            "name": "__len__",
            "location": 617,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorInput.num_factors": {
            "name": "num_factors",
            "location": 621,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorInput.chunks": {
            "name": "chunks",
            "location": 627,
            "return": [],
            "arguments": {
                "self": [],
                "chunk_size": []
            }
        },
        "TranslatorInput.with_eos": {
            "name": "with_eos",
            "location": 653,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BadTranslatorInput.__init__": {
            "name": "__init__",
            "location": 667,
            "return": [],
            "arguments": {
                "self": [],
                "sentence_id": [],
                "tokens": []
            }
        },
        "TranslatorOutput.__init__": {
            "name": "__init__",
            "location": 810,
            "return": [],
            "arguments": {
                "self": [],
                "sentence_id": [],
                "translation": [],
                "tokens": [],
                "attention_matrix": [],
                "score": [],
                "beam_histories": []
            }
        },
        "Translation.__init__": {
            "name": "__init__",
            "location": 831,
            "return": [],
            "arguments": {
                "self": [],
                "target_ids": [],
                "attention_matrix": [],
                "score": [],
                "beam_history": []
            }
        },
        "ModelState.__init__": {
            "name": "__init__",
            "location": 879,
            "return": [],
            "arguments": {
                "self": [],
                "states": []
            }
        },
        "ModelState.sort_state": {
            "name": "sort_state",
            "location": 882,
            "return": [],
            "arguments": {
                "self": [],
                "best_hyp_indices": []
            }
        },
        "LengthPenalty.__init__": {
            "name": "__init__",
            "location": 901,
            "return": [],
            "arguments": {
                "self": [],
                "alpha": [],
                "beta": []
            }
        },
        "LengthPenalty.hybrid_forward": {
            "name": "hybrid_forward",
            "location": 907,
            "return": [],
            "arguments": {
                "self": [],
                "F": [],
                "lengths": []
            }
        },
        "LengthPenalty.get": {
            "name": "get",
            "location": 918,
            "return": [],
            "arguments": {
                "self": [],
                "lengths": []
            }
        },
        "Translator.__init__": {
            "name": "__init__",
            "location": 991,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "ensemble_mode": [],
                "bucket_source_width": [],
                "length_penalty": [],
                "beam_prune": [],
                "beam_search_stop": [],
                "models": [],
                "source_vocabs": [],
                "target_vocab": [],
                "restrict_lexicon": [],
                "avoid_list": [],
                "store_beam": [],
                "strip_unknown_words": [],
                "skip_topk": []
            }
        },
        "Translator.max_input_length": {
            "name": "max_input_length",
            "location": 1116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Translator.num_source_factors": {
            "name": "num_source_factors",
            "location": 1126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Translator._get_interpolation_func": {
            "name": "_get_interpolation_func",
            "location": 1130,
            "return": [],
            "arguments": {
                "ensemble_mode": []
            }
        },
        "Translator._linear_interpolation": {
            "name": "_linear_interpolation",
            "location": 1139,
            "return": [],
            "arguments": {
                "predictions": []
            }
        },
        "Translator._log_linear_interpolation": {
            "name": "_log_linear_interpolation",
            "location": 1144,
            "return": [],
            "arguments": {
                "predictions": []
            }
        },
        "Translator.translate": {
            "name": "translate",
            "location": 1152,
            "return": [],
            "arguments": {
                "self": [],
                "trans_inputs": []
            }
        },
        "Translator._get_inference_input": {
            "name": "_get_inference_input",
            "location": 1255,
            "return": [],
            "arguments": {
                "self": [],
                "trans_inputs": []
            }
        },
        "Translator._make_result": {
            "name": "_make_result",
            "location": 1307,
            "return": [],
            "arguments": {
                "self": [],
                "trans_input": [],
                "translation": []
            }
        },
        "Translator._concat_translations": {
            "name": "_concat_translations",
            "location": 1333,
            "return": [],
            "arguments": {
                "self": [],
                "translations": []
            }
        },
        "Translator._translate_nd": {
            "name": "_translate_nd",
            "location": 1342,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "source_length": [],
                "raw_constraints": [],
                "raw_avoid_list": [],
                "max_output_lengths": []
            }
        },
        "Translator._encode": {
            "name": "_encode",
            "location": 1360,
            "return": [],
            "arguments": {
                "self": [],
                "sources": [],
                "source_length": []
            }
        },
        "Translator._decode_step": {
            "name": "_decode_step",
            "location": 1370,
            "return": [],
            "arguments": {
                "self": [],
                "prev_word": [],
                "step": [],
                "source_length": [],
                "states": [],
                "models_output_layer_w": [],
                "models_output_layer_b": []
            }
        },
        "Translator._combine_predictions": {
            "name": "_combine_predictions",
            "location": 1414,
            "return": [],
            "arguments": {
                "self": [],
                "probs": [],
                "attention_probs": []
            }
        },
        "Translator._beam_search": {
            "name": "_beam_search",
            "location": 1437,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "source_length": [],
                "raw_constraint_list": [],
                "raw_avoid_list": [],
                "max_output_lengths": []
            }
        },
        "Translator._get_best_from_beam": {
            "name": "_get_best_from_beam",
            "location": 1697,
            "return": [],
            "arguments": {
                "self": [],
                "best_hyp_indices": [],
                "best_word_indices": [],
                "attentions": [],
                "seq_scores": [],
                "lengths": [],
                "constraints": [],
                "beam_histories": []
            }
        },
        "Translator._get_best_word_indeces_for_kth_hypotheses": {
            "name": "_get_best_word_indeces_for_kth_hypotheses",
            "location": 1739,
            "return": [],
            "arguments": {
                "ks": [],
                "all_hyp_indices": []
            }
        },
        "Translator._assemble_translation": {
            "name": "_assemble_translation",
            "location": 1764,
            "return": [],
            "arguments": {
                "sequence": [],
                "length": [],
                "attention_lists": [],
                "seq_score": [],
                "beam_history": []
            }
        },
        "Translator._print_beam": {
            "name": "_print_beam",
            "location": 1788,
            "return": [],
            "arguments": {
                "self": [],
                "sequences": [],
                "accumulated_scores": [],
                "finished": [],
                "inactive": [],
                "constraints": [],
                "timestep": []
            }
        },
        "PruneHypotheses.__init__": {
            "name": "__init__",
            "location": 1825,
            "return": [],
            "arguments": {
                "self": [],
                "threshold": [],
                "beam_size": []
            }
        },
        "PruneHypotheses.hybrid_forward": {
            "name": "hybrid_forward",
            "location": 1830,
            "return": [],
            "arguments": {
                "self": [],
                "F": [],
                "best_word_indices": [],
                "scores": [],
                "finished": [],
                "inf_array": [],
                "zeros_array": []
            }
        },
        "SortByIndex.hybrid_forward": {
            "name": "hybrid_forward",
            "location": 1852,
            "return": [],
            "arguments": {
                "self": [],
                "F": [],
                "indices": []
            }
        },
        "TopK.__init__": {
            "name": "__init__",
            "location": 1861,
            "return": [],
            "arguments": {
                "self": [],
                "k": [],
                "batch_size": [],
                "vocab_size": []
            }
        },
        "TopK.hybrid_forward": {
            "name": "hybrid_forward",
            "location": 1875,
            "return": [],
            "arguments": {
                "self": [],
                "F": [],
                "scores": [],
                "offset": []
            }
        },
        "Top1.__init__": {
            "name": "__init__",
            "location": 1902,
            "return": [],
            "arguments": {
                "self": [],
                "k": [],
                "batch_size": []
            }
        },
        "Top1.hybrid_forward": {
            "name": "hybrid_forward",
            "location": 1913,
            "return": [],
            "arguments": {
                "self": [],
                "F": [],
                "scores": [],
                "offset": []
            }
        },
        "NormalizeAndUpdateFinished.__init__": {
            "name": "__init__",
            "location": 1937,
            "return": [],
            "arguments": {
                "self": [],
                "pad_id": [],
                "eos_id": [],
                "length_penalty_alpha": [],
                "length_penalty_beta": []
            }
        },
        "NormalizeAndUpdateFinished.hybrid_forward": {
            "name": "hybrid_forward",
            "location": 1947,
            "return": [],
            "arguments": {
                "self": [],
                "F": [],
                "best_word_indices": [],
                "max_output_lengths": [],
                "finished": [],
                "scores_accumulated": [],
                "lengths": []
            }
        },
        "UpdateScores.__init__": {
            "name": "__init__",
            "location": 1976,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UpdateScores.hybrid_forward": {
            "name": "hybrid_forward",
            "location": 1980,
            "return": [],
            "arguments": {
                "self": [],
                "F": [],
                "scores": [],
                "finished": [],
                "inactive": [],
                "scores_accumulated": [],
                "inf_array": [],
                "pad_dist": []
            }
        },
        "InferenceModel._get_encoder_module.sym_gen": {
            "name": "sym_gen",
            "location": 164,
            "return": [],
            "arguments": {
                "source_seq_len": []
            }
        },
        "InferenceModel._get_decoder_module.sym_gen": {
            "name": "sym_gen",
            "location": 209,
            "return": [],
            "arguments": {
                "bucket_key": []
            }
        }
    },
    "saml-nmt-master/sockeye/initializer.py": {
        "get_initializer": {
            "name": "get_initializer",
            "location": 25,
            "return": [],
            "arguments": {
                "default_init_type": [],
                "default_init_scale": [],
                "default_init_xavier_rand_type": [],
                "default_init_xavier_factor_type": [],
                "embed_init_type": [],
                "embed_init_sigma": [],
                "rnn_init_type": [],
                "extra_initializers": []
            }
        },
        "StackedOrthogonalInit.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "scale": [],
                "rand_type": []
            }
        },
        "StackedOrthogonalInit._init_weight": {
            "name": "_init_weight",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "sym_name": [],
                "arr": []
            }
        }
    },
    "saml-nmt-master/sockeye/init_embedding.py": {
        "init_weight": {
            "name": "init_weight",
            "location": 74,
            "return": [],
            "arguments": {
                "weight": [],
                "vocab_in": [],
                "vocab_out": [],
                "initializer": []
            }
        },
        "load_weight": {
            "name": "load_weight",
            "location": 98,
            "return": [],
            "arguments": {
                "weight_file": [],
                "weight_name": [],
                "weight_file_cache": []
            }
        },
        "main": {
            "name": "main",
            "location": 122,
            "return": [],
            "arguments": {}
        },
        "init_embeddings": {
            "name": "init_embeddings",
            "location": 137,
            "return": [],
            "arguments": {
                "args": []
            }
        }
    },
    "saml-nmt-master/sockeye/layers.py": {
        "activation": {
            "name": "activation",
            "location": 27,
            "return": [],
            "arguments": {
                "data": [],
                "act_type": []
            }
        },
        "split_heads": {
            "name": "split_heads",
            "location": 229,
            "return": [],
            "arguments": {
                "x": [],
                "depth_per_head": [],
                "heads": []
            }
        },
        "combine_heads": {
            "name": "combine_heads",
            "location": 246,
            "return": [],
            "arguments": {
                "x": [],
                "depth_per_head": [],
                "heads": []
            }
        },
        "broadcast_to_heads": {
            "name": "broadcast_to_heads",
            "location": 263,
            "return": [],
            "arguments": {
                "x": [],
                "num_heads": [],
                "ndim": [],
                "fold_heads": []
            }
        },
        "dot_attention": {
            "name": "dot_attention",
            "location": 287,
            "return": [],
            "arguments": {
                "queries": [],
                "keys": [],
                "values": [],
                "lengths": [],
                "dropout": [],
                "bias": [],
                "prefix": []
            }
        },
        "LayerNormalization.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": [],
                "scale": [],
                "shift": [],
                "scale_init": [],
                "shift_init": []
            }
        },
        "LayerNormalization.__call__": {
            "name": "__call__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "eps": []
            }
        },
        "LHUC.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "num_hidden": [],
                "weight": [],
                "prefix": []
            }
        },
        "LHUC.__call__": {
            "name": "__call__",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "name": []
            }
        },
        "WeightNormalization.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "weight": [],
                "num_hidden": [],
                "ndim": [],
                "prefix": []
            }
        },
        "WeightNormalization.__call__": {
            "name": "__call__",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "weight": [],
                "scale": []
            }
        },
        "OutputLayer.__init__": {
            "name": "__init__",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_size": [],
                "vocab_size": [],
                "weight": [],
                "weight_normalization": [],
                "prefix": []
            }
        },
        "OutputLayer.__call__": {
            "name": "__call__",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "hidden": [],
                "weight": [],
                "bias": []
            }
        },
        "MultiHeadAttentionBase.__init__": {
            "name": "__init__",
            "location": 343,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": [],
                "depth_att": [],
                "heads": [],
                "depth_out": [],
                "dropout": []
            }
        },
        "MultiHeadAttentionBase._attend": {
            "name": "_attend",
            "location": 360,
            "return": [],
            "arguments": {
                "self": [],
                "queries": [],
                "keys": [],
                "values": [],
                "lengths": [],
                "bias": []
            }
        },
        "MultiHeadSelfAttention.__init__": {
            "name": "__init__",
            "location": 413,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": [],
                "depth_att": [],
                "heads": [],
                "depth_out": [],
                "dropout": []
            }
        },
        "MultiHeadSelfAttention.__call__": {
            "name": "__call__",
            "location": 422,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "input_lengths": [],
                "bias": [],
                "cache": []
            }
        },
        "MultiHeadAttention.__init__": {
            "name": "__init__",
            "location": 475,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": [],
                "depth_att": [],
                "heads": [],
                "depth_out": [],
                "dropout": []
            }
        },
        "MultiHeadAttention.__call__": {
            "name": "__call__",
            "location": 486,
            "return": [],
            "arguments": {
                "self": [],
                "queries": [],
                "memory": [],
                "memory_lengths": [],
                "bias": []
            }
        },
        "ProjectedDotAttention.__init__": {
            "name": "__init__",
            "location": 542,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": [],
                "num_hidden": []
            }
        },
        "ProjectedDotAttention.__call__": {
            "name": "__call__",
            "location": 552,
            "return": [],
            "arguments": {
                "self": [],
                "queries": [],
                "memory": [],
                "memory_lengths": []
            }
        },
        "PlainDotAttention.__call__": {
            "name": "__call__",
            "location": 597,
            "return": [],
            "arguments": {
                "self": [],
                "queries": [],
                "memory": [],
                "memory_lengths": []
            }
        },
        "PositionalEncodings.__init__": {
            "name": "__init__",
            "location": 625,
            "return": [],
            "arguments": {
                "self": [],
                "length": [],
                "depth": []
            }
        },
        "PositionalEncodings.get_encodings": {
            "name": "get_encodings",
            "location": 630,
            "return": [],
            "arguments": {
                "length": [],
                "depth": []
            }
        },
        "PositionalEncodings.forward": {
            "name": "forward",
            "location": 647,
            "return": [],
            "arguments": {
                "self": [],
                "is_train": [],
                "req": [],
                "in_data": [],
                "out_data": [],
                "aux": []
            }
        },
        "PositionalEncodings.backward": {
            "name": "backward",
            "location": 650,
            "return": [],
            "arguments": {
                "self": [],
                "req": [],
                "out_grad": [],
                "in_data": [],
                "out_data": [],
                "in_grad": [],
                "aux": []
            }
        },
        "PositionalEncodingsProp.__init__": {
            "name": "__init__",
            "location": 657,
            "return": [],
            "arguments": {
                "self": [],
                "length": [],
                "depth": []
            }
        },
        "PositionalEncodingsProp.list_arguments": {
            "name": "list_arguments",
            "location": 662,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PositionalEncodingsProp.list_outputs": {
            "name": "list_outputs",
            "location": 665,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PositionalEncodingsProp.infer_shape": {
            "name": "infer_shape",
            "location": 668,
            "return": [],
            "arguments": {
                "self": [],
                "in_shape": []
            }
        },
        "PositionalEncodingsProp.infer_type": {
            "name": "infer_type",
            "location": 671,
            "return": [],
            "arguments": {
                "self": [],
                "in_type": []
            }
        },
        "PositionalEncodingsProp.create_operator": {
            "name": "create_operator",
            "location": 674,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "shapes": [],
                "dtypes": []
            }
        }
    },
    "saml-nmt-master/sockeye/lexical_constraints.py": {
        "init_batch": {
            "name": "init_batch",
            "location": 395,
            "return": [],
            "arguments": {
                "raw_constraints": [],
                "beam_size": [],
                "start_id": [],
                "eos_id": []
            }
        },
        "get_bank_sizes": {
            "name": "get_bank_sizes",
            "location": 418,
            "return": [],
            "arguments": {
                "num_constraints": [],
                "beam_size": [],
                "candidate_counts": []
            }
        },
        "topk": {
            "name": "topk",
            "location": 486,
            "return": [],
            "arguments": {
                "batch_size": [],
                "beam_size": [],
                "inactive": [],
                "scores": [],
                "hypotheses": [],
                "best_ids": [],
                "best_word_ids": [],
                "seq_scores": [],
                "context": []
            }
        },
        "_topk": {
            "name": "_topk",
            "location": 536,
            "return": [],
            "arguments": {
                "beam_size": [],
                "inactive": [],
                "scores": [],
                "hypotheses": [],
                "best_ids": [],
                "best_word_ids": [],
                "sequence_scores": [],
                "context": []
            }
        },
        "main": {
            "name": "main",
            "location": 633,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "AvoidTrie.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "raw_phrases": []
            }
        },
        "AvoidTrie.__str__": {
            "name": "__str__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AvoidTrie.__len__": {
            "name": "__len__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AvoidTrie.add_trie": {
            "name": "add_trie",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "trie": [],
                "phrase": []
            }
        },
        "AvoidTrie.add_phrase": {
            "name": "add_phrase",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "phrase": []
            }
        },
        "AvoidTrie.step": {
            "name": "step",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "word_id": []
            }
        },
        "AvoidTrie.final": {
            "name": "final",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AvoidState.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "avoid_trie": [],
                "state": []
            }
        },
        "AvoidState.consume": {
            "name": "consume",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "word_id": []
            }
        },
        "AvoidState.avoid": {
            "name": "avoid",
            "location": 140,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AvoidState.__str__": {
            "name": "__str__",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AvoidBatch.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "batch_size": [],
                "beam_size": [],
                "avoid_list": [],
                "global_avoid_trie": []
            }
        },
        "AvoidBatch.reorder": {
            "name": "reorder",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "indices": []
            }
        },
        "AvoidBatch.consume": {
            "name": "consume",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "word_ids": []
            }
        },
        "AvoidBatch.avoid": {
            "name": "avoid",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConstrainedHypothesis.__init__": {
            "name": "__init__",
            "location": 254,
            "return": [],
            "arguments": {
                "self": [],
                "constraint_list": [],
                "eos_id": []
            }
        },
        "ConstrainedHypothesis.__len__": {
            "name": "__len__",
            "location": 274,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConstrainedHypothesis.__str__": {
            "name": "__str__",
            "location": 280,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConstrainedHypothesis.size": {
            "name": "size",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConstrainedHypothesis.num_met": {
            "name": "num_met",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConstrainedHypothesis.num_needed": {
            "name": "num_needed",
            "location": 300,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConstrainedHypothesis.allowed": {
            "name": "allowed",
            "location": 306,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConstrainedHypothesis.finished": {
            "name": "finished",
            "location": 331,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConstrainedHypothesis.is_valid": {
            "name": "is_valid",
            "location": 339,
            "return": [],
            "arguments": {
                "self": [],
                "wordid": []
            }
        },
        "ConstrainedHypothesis.advance": {
            "name": "advance",
            "location": 348,
            "return": [],
            "arguments": {
                "self": [],
                "word_id": []
            }
        },
        "ConstrainedCandidate.__init__": {
            "name": "__init__",
            "location": 466,
            "return": [],
            "arguments": {
                "self": [],
                "row": [],
                "col": [],
                "score": [],
                "hypothesis": []
            }
        },
        "ConstrainedCandidate.__hash__": {
            "name": "__hash__",
            "location": 476,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConstrainedCandidate.__eq__": {
            "name": "__eq__",
            "location": 479,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ConstrainedCandidate.__str__": {
            "name": "__str__",
            "location": 482,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "saml-nmt-master/sockeye/lexicon.py": {
        "lexicon_iterator": {
            "name": "lexicon_iterator",
            "location": 34,
            "return": [],
            "arguments": {
                "path": [],
                "vocab_source": [],
                "vocab_target": []
            }
        },
        "read_lexicon": {
            "name": "read_lexicon",
            "location": 58,
            "return": [],
            "arguments": {
                "path": [],
                "vocab_source": [],
                "vocab_target": []
            }
        },
        "create": {
            "name": "create",
            "location": 199,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "inspect": {
            "name": "inspect",
            "location": 213,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 236,
            "return": [],
            "arguments": {}
        },
        "LexiconInitializer.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "lexicon": []
            }
        },
        "LexiconInitializer._init_default": {
            "name": "_init_default",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "sym_name": [],
                "arr": []
            }
        },
        "TopKLexicon.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "vocab_source": [],
                "vocab_target": []
            }
        },
        "TopKLexicon.create": {
            "name": "create",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "k": []
            }
        },
        "TopKLexicon.save": {
            "name": "save",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "TopKLexicon.load": {
            "name": "load",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "k": []
            }
        },
        "TopKLexicon.get_trg_ids": {
            "name": "get_trg_ids",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "src_ids": []
            }
        }
    },
    "saml-nmt-master/sockeye/log.py": {
        "is_python34": {
            "name": "is_python34",
            "location": 100,
            "return": [],
            "arguments": {}
        },
        "setup_main_logger": {
            "name": "setup_main_logger",
            "location": 105,
            "return": [],
            "arguments": {
                "name": [],
                "file_logging": [],
                "console": [],
                "path": []
            }
        },
        "log_sockeye_version": {
            "name": "log_sockeye_version",
            "location": 141,
            "return": [],
            "arguments": {
                "logger": []
            }
        },
        "log_mxnet_version": {
            "name": "log_mxnet_version",
            "location": 150,
            "return": [],
            "arguments": {
                "logger": []
            }
        },
        "setup_main_logger.exception_hook": {
            "name": "exception_hook",
            "location": 127,
            "return": [],
            "arguments": {
                "exc_type": [],
                "exc_value": [],
                "exc_traceback": []
            }
        }
    },
    "saml-nmt-master/sockeye/loss.py": {
        "get_loss": {
            "name": "get_loss",
            "location": 52,
            "return": [],
            "arguments": {
                "loss_config": []
            }
        },
        "LossConfig.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "vocab_size": [],
                "normalization_type": [],
                "label_smoothing": []
            }
        },
        "Loss.get_loss": {
            "name": "get_loss",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "logits": [],
                "labels": [],
                "weights": [],
                "ignore_labels": [],
                "grad_scale": [],
                "prefix": []
            }
        },
        "Loss.create_metric": {
            "name": "create_metric",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CrossEntropyLoss.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "loss_config": []
            }
        },
        "CrossEntropyLoss.get_loss": {
            "name": "get_loss",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "logits": [],
                "labels": [],
                "weights": [],
                "ignore_labels": [],
                "grad_scale": [],
                "prefix": []
            }
        },
        "CrossEntropyLoss.create_metric": {
            "name": "create_metric",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CrossEntropyMetric.__init__": {
            "name": "__init__",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "loss_config": [],
                "name": [],
                "output_names": [],
                "label_names": []
            }
        },
        "CrossEntropyMetric.cross_entropy": {
            "name": "cross_entropy",
            "location": 178,
            "return": [],
            "arguments": {
                "logprob": [],
                "label": []
            }
        },
        "CrossEntropyMetric.cross_entropy_smoothed": {
            "name": "cross_entropy_smoothed",
            "location": 183,
            "return": [],
            "arguments": {
                "logprob": [],
                "label": [],
                "alpha": [],
                "num_classes": []
            }
        },
        "CrossEntropyMetric.update": {
            "name": "update",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "labels": [],
                "preds": []
            }
        },
        "CustomCrossEntropyLoss.__init__": {
            "name": "__init__",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "loss_config": []
            }
        },
        "CustomCrossEntropyLoss.cross_entropy": {
            "name": "cross_entropy",
            "location": 240,
            "return": [],
            "arguments": {
                "logprob": [],
                "labels": []
            }
        },
        "CustomCrossEntropyLoss.cross_entropy_smoothed": {
            "name": "cross_entropy_smoothed",
            "location": 245,
            "return": [],
            "arguments": {
                "logprob": [],
                "labels": [],
                "alpha": [],
                "num_classes": []
            }
        },
        "CustomCrossEntropyLoss.get_outputs": {
            "name": "get_outputs",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CustomCrossEntropyLoss.get_loss": {
            "name": "get_loss",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "preds": [],
                "labels": [],
                "weights": [],
                "ignore_labels": [],
                "grad_scale": [],
                "prefix": []
            }
        },
        "CustomCrossEntropyLoss.create_metric": {
            "name": "create_metric",
            "location": 306,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "saml-nmt-master/sockeye/lr_scheduler.py": {
        "get_lr_scheduler": {
            "name": "get_lr_scheduler",
            "location": 253,
            "return": [],
            "arguments": {
                "scheduler_type": [],
                "updates_per_checkpoint": [],
                "learning_rate_half_life": [],
                "learning_rate_reduce_factor": [],
                "learning_rate_reduce_num_not_improved": [],
                "learning_rate_schedule": [],
                "learning_rate_warmup": []
            }
        },
        "LearningRateScheduler.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "warmup": []
            }
        },
        "LearningRateScheduler.__call__": {
            "name": "__call__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "num_updates": []
            }
        },
        "LearningRateScheduler._warmup": {
            "name": "_warmup",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "num_updates": []
            }
        },
        "AdaptiveLearningRateScheduler.new_evaluation_result": {
            "name": "new_evaluation_result",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "has_improved": []
            }
        },
        "LearningRateSchedulerFixedStep.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "schedule": [],
                "updates_per_checkpoint": []
            }
        },
        "LearningRateSchedulerFixedStep.new_evaluation_result": {
            "name": "new_evaluation_result",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "has_improved": []
            }
        },
        "LearningRateSchedulerFixedStep._update_rate": {
            "name": "_update_rate",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "step": []
            }
        },
        "LearningRateSchedulerFixedStep.__call__": {
            "name": "__call__",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "LearningRateSchedulerFixedStep.parse_schedule_str": {
            "name": "parse_schedule_str",
            "location": 118,
            "return": [],
            "arguments": {
                "schedule_str": []
            }
        },
        "LearningRateSchedulerInvSqrtT.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "updates_per_checkpoint": [],
                "half_life": [],
                "warmup": []
            }
        },
        "LearningRateSchedulerInvSqrtT.__call__": {
            "name": "__call__",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "num_updates": []
            }
        },
        "LearningRateSchedulerInvT.__init__": {
            "name": "__init__",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "updates_per_checkpoint": [],
                "half_life": [],
                "warmup": []
            }
        },
        "LearningRateSchedulerInvT.__call__": {
            "name": "__call__",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "num_updates": []
            }
        },
        "LearningRateSchedulerPlateauReduce.__init__": {
            "name": "__init__",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "reduce_factor": [],
                "reduce_num_not_improved": [],
                "warmup": []
            }
        },
        "LearningRateSchedulerPlateauReduce.new_evaluation_result": {
            "name": "new_evaluation_result",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "has_improved": []
            }
        },
        "LearningRateSchedulerPlateauReduce.__call__": {
            "name": "__call__",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "LearningRateSchedulerPlateauReduce.__repr__": {
            "name": "__repr__",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "saml-nmt-master/sockeye/model.py": {
        "ModelConfig.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "config_data": [],
                "vocab_source_size": [],
                "vocab_target_size": [],
                "config_embed_source": [],
                "config_embed_target": [],
                "config_encoder": [],
                "config_decoder": [],
                "config_loss": [],
                "weight_tying": [],
                "weight_tying_type": [],
                "weight_normalization": [],
                "softmax_temperature": [],
                "gumbel_noise_scale": [],
                "lhuc": []
            }
        },
        "SockeyeModel.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "prefix": []
            }
        },
        "SockeyeModel.save_config": {
            "name": "save_config",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "folder": []
            }
        },
        "SockeyeModel.load_config": {
            "name": "load_config",
            "location": 149,
            "return": [],
            "arguments": {
                "fname": []
            }
        },
        "SockeyeModel.save_params_to_file": {
            "name": "save_params_to_file",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "fname": []
            }
        },
        "SockeyeModel.load_params_from_file": {
            "name": "load_params_from_file",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "fname": []
            }
        },
        "SockeyeModel.save_version": {
            "name": "save_version",
            "location": 189,
            "return": [],
            "arguments": {
                "folder": []
            }
        },
        "SockeyeModel._get_embed_weights": {
            "name": "_get_embed_weights",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": []
            }
        },
        "SockeyeModel.get_source_embed_params": {
            "name": "get_source_embed_params",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SockeyeModel.get_target_embed_params": {
            "name": "get_target_embed_params",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SockeyeModel.get_output_embed_params": {
            "name": "get_output_embed_params",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "saml-nmt-master/sockeye/optimizers.py": {
        "OptimizerConfig.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "params": [],
                "kvstore": [],
                "initializer": [],
                "gradient_clipping_type": [],
                "gradient_clipping_threshold": []
            }
        },
        "OptimizerConfig.lr_scheduler": {
            "name": "lr_scheduler",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OptimizerConfig.set_lr_scheduler": {
            "name": "set_lr_scheduler",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "lr_scheduler": []
            }
        },
        "SockeyeOptimizer.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "request_optimized_metric": []
            }
        },
        "SockeyeOptimizer.pre_update_batch": {
            "name": "pre_update_batch",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "batch_state": []
            }
        },
        "SockeyeOptimizer.pre_update_checkpoint": {
            "name": "pre_update_checkpoint",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "checkpoint_state": []
            }
        },
        "SockeyeOptimizer.update": {
            "name": "update",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "weight": [],
                "grad": [],
                "state": []
            }
        },
        "EveState.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "weight": []
            }
        },
        "Eve.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "learning_rate": [],
                "beta1": [],
                "beta2": [],
                "beta3_batch": [],
                "beta3_checkpoint": [],
                "epsilon": [],
                "k_lo": [],
                "k_hi": [],
                "schedule_decay": [],
                "use_batch_objective": [],
                "use_checkpoint_objective": [],
                "use_nesterov_momentum": []
            }
        },
        "Eve.create_state": {
            "name": "create_state",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "weight": []
            }
        },
        "Eve.update": {
            "name": "update",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "weight": [],
                "grad": [],
                "state": []
            }
        },
        "Eve.update.compute_d": {
            "name": "compute_d",
            "location": 190,
            "return": [],
            "arguments": {
                "t": [],
                "f": [],
                "f_hat_prev": [],
                "d_prev": [],
                "beta": []
            }
        }
    },
    "saml-nmt-master/sockeye/output_handler.py": {
        "get_output_handler": {
            "name": "get_output_handler",
            "location": 25,
            "return": [],
            "arguments": {
                "output_type": [],
                "output_fname": [],
                "sure_align_threshold": []
            }
        },
        "OutputHandler.handle": {
            "name": "handle",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "t_input": [],
                "t_output": [],
                "t_walltime": []
            }
        },
        "StringOutputHandler.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "stream": []
            }
        },
        "StringOutputHandler.handle": {
            "name": "handle",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "t_input": [],
                "t_output": [],
                "t_walltime": []
            }
        },
        "StringWithScoreOutputHandler.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "stream": []
            }
        },
        "StringWithScoreOutputHandler.handle": {
            "name": "handle",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "t_input": [],
                "t_output": [],
                "t_walltime": []
            }
        },
        "ScoreOutputHandler.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "stream": []
            }
        },
        "ScoreOutputHandler.handle": {
            "name": "handle",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "t_input": [],
                "t_output": [],
                "t_walltime": []
            }
        },
        "PairWithScoreOutputHandler.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "stream": []
            }
        },
        "PairWithScoreOutputHandler.handle": {
            "name": "handle",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "t_input": [],
                "t_output": [],
                "t_walltime": []
            }
        },
        "StringWithAlignmentsOutputHandler.__init__": {
            "name": "__init__",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "stream": [],
                "threshold": []
            }
        },
        "StringWithAlignmentsOutputHandler.handle": {
            "name": "handle",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "t_input": [],
                "t_output": [],
                "t_walltime": []
            }
        },
        "StringWithAlignmentMatrixOutputHandler.__init__": {
            "name": "__init__",
            "location": 225,
            "return": [],
            "arguments": {
                "self": [],
                "stream": []
            }
        },
        "StringWithAlignmentMatrixOutputHandler.handle": {
            "name": "handle",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "t_input": [],
                "t_output": [],
                "t_walltime": []
            }
        },
        "BenchmarkOutputHandler.handle": {
            "name": "handle",
            "location": 259,
            "return": [],
            "arguments": {
                "self": [],
                "t_input": [],
                "t_output": [],
                "t_walltime": []
            }
        },
        "AlignPlotHandler.__init__": {
            "name": "__init__",
            "location": 284,
            "return": [],
            "arguments": {
                "self": [],
                "plot_prefix": []
            }
        },
        "AlignPlotHandler.handle": {
            "name": "handle",
            "location": 287,
            "return": [],
            "arguments": {
                "self": [],
                "t_input": [],
                "t_output": [],
                "t_walltime": []
            }
        },
        "AlignTextHandler.__init__": {
            "name": "__init__",
            "location": 309,
            "return": [],
            "arguments": {
                "self": [],
                "threshold": []
            }
        },
        "AlignTextHandler.handle": {
            "name": "handle",
            "location": 312,
            "return": [],
            "arguments": {
                "self": [],
                "t_input": [],
                "t_output": [],
                "t_walltime": []
            }
        },
        "BeamStoringHandler.__init__": {
            "name": "__init__",
            "location": 334,
            "return": [],
            "arguments": {
                "self": [],
                "stream": []
            }
        },
        "BeamStoringHandler.handle": {
            "name": "handle",
            "location": 337,
            "return": [],
            "arguments": {
                "self": [],
                "t_input": [],
                "t_output": [],
                "t_walltime": []
            }
        }
    },
    "saml-nmt-master/sockeye/prepare_data.py": {
        "main": {
            "name": "main",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "prepare_data": {
            "name": "prepare_data",
            "location": 34,
            "return": [],
            "arguments": {
                "args": []
            }
        }
    },
    "saml-nmt-master/sockeye/rerank.py": {
        "rerank": {
            "name": "rerank",
            "location": 100,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 124,
            "return": [],
            "arguments": {}
        },
        "Reranker.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "metric": [],
                "return_score": []
            }
        },
        "Reranker.rerank_hypotheses": {
            "name": "rerank_hypotheses",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "hypotheses": [],
                "reference": []
            }
        },
        "Reranker.rerank_top1": {
            "name": "rerank_top1",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "hypotheses": [],
                "reference": []
            }
        }
    },
    "saml-nmt-master/sockeye/rnn.py": {
        "get_stacked_rnn": {
            "name": "get_stacked_rnn",
            "location": 117,
            "return": [],
            "arguments": {
                "config": [],
                "prefix": [],
                "parallel_inputs": [],
                "layers": []
            }
        },
        "RNNConfig.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "cell_type": [],
                "num_hidden": [],
                "num_layers": [],
                "dropout_inputs": [],
                "dropout_states": [],
                "dropout_recurrent": [],
                "residual": [],
                "first_residual_layer": [],
                "forget_bias": [],
                "lhuc": [],
                "dtype": []
            }
        },
        "SequentialRNNCellParallelInput.__call__": {
            "name": "__call__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "parallel_inputs": [],
                "states": []
            }
        },
        "ParallelInputCell.__call__": {
            "name": "__call__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "parallel_inputs": [],
                "states": []
            }
        },
        "ResidualCellParallelInput.__call__": {
            "name": "__call__",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "parallel_inputs": [],
                "states": []
            }
        },
        "LayerNormLSTMCell.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "num_hidden": [],
                "prefix": [],
                "params": [],
                "forget_bias": [],
                "norm_scale": [],
                "norm_shift": []
            }
        },
        "LayerNormLSTMCell.__call__": {
            "name": "__call__",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "states": []
            }
        },
        "LayerNormPerGateLSTMCell.__init__": {
            "name": "__init__",
            "location": 252,
            "return": [],
            "arguments": {
                "self": [],
                "num_hidden": [],
                "prefix": [],
                "params": [],
                "forget_bias": [],
                "norm_scale": [],
                "norm_shift": []
            }
        },
        "LayerNormPerGateLSTMCell.__call__": {
            "name": "__call__",
            "location": 269,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "states": []
            }
        },
        "LHUCCell.__init__": {
            "name": "__init__",
            "location": 308,
            "return": [],
            "arguments": {
                "self": [],
                "base_cell": [],
                "num_hidden": [],
                "dtype": []
            }
        },
        "LHUCCell.__call__": {
            "name": "__call__",
            "location": 314,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "states": []
            }
        },
        "RecurrentDropoutLSTMCell.__init__": {
            "name": "__init__",
            "location": 326,
            "return": [],
            "arguments": {
                "self": [],
                "num_hidden": [],
                "prefix": [],
                "params": [],
                "forget_bias": [],
                "dropout": []
            }
        },
        "RecurrentDropoutLSTMCell.__call__": {
            "name": "__call__",
            "location": 331,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "states": []
            }
        },
        "LayerNormGRUCell.__init__": {
            "name": "__init__",
            "location": 373,
            "return": [],
            "arguments": {
                "self": [],
                "num_hidden": [],
                "prefix": [],
                "params": [],
                "norm_scale": [],
                "norm_shift": []
            }
        },
        "LayerNormGRUCell.__call__": {
            "name": "__call__",
            "location": 387,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "states": []
            }
        },
        "LayerNormPerGateGRUCell.__init__": {
            "name": "__init__",
            "location": 438,
            "return": [],
            "arguments": {
                "self": [],
                "num_hidden": [],
                "prefix": [],
                "params": [],
                "norm_scale": [],
                "norm_shift": []
            }
        },
        "LayerNormPerGateGRUCell.__call__": {
            "name": "__call__",
            "location": 451,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "states": []
            }
        },
        "VariationalDropoutCell.__init__": {
            "name": "__init__",
            "location": 496,
            "return": [],
            "arguments": {
                "self": [],
                "base_cell": [],
                "dropout_inputs": [],
                "dropout_states": []
            }
        },
        "VariationalDropoutCell.__call__": {
            "name": "__call__",
            "location": 506,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "states": []
            }
        },
        "VariationalDropoutCell.reset": {
            "name": "reset",
            "location": 521,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "saml-nmt-master/sockeye/rnn_attention.py": {
        "_instantiate": {
            "name": "_instantiate",
            "location": 72,
            "return": [],
            "arguments": {
                "cls": [],
                "params": []
            }
        },
        "get_attention": {
            "name": "get_attention",
            "location": 91,
            "return": [],
            "arguments": {
                "config": [],
                "max_seq_len": [],
                "prefix": []
            }
        },
        "get_context_and_attention_probs": {
            "name": "get_context_and_attention_probs",
            "location": 775,
            "return": [],
            "arguments": {
                "values": [],
                "length": [],
                "logits": [],
                "dtype": []
            }
        },
        "AttentionConfig.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "num_hidden": [],
                "input_previous_word": [],
                "source_num_hidden": [],
                "query_num_hidden": [],
                "layer_normalization": [],
                "config_coverage": [],
                "num_heads": [],
                "is_scaled": [],
                "dtype": []
            }
        },
        "Attention.register": {
            "name": "register",
            "location": 144,
            "return": [],
            "arguments": {
                "cls": [],
                "att_type": []
            }
        },
        "Attention.get_attention_cls": {
            "name": "get_attention_cls",
            "location": 151,
            "return": [],
            "arguments": {
                "cls": [],
                "att_type": []
            }
        },
        "Attention.__init__": {
            "name": "__init__",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "input_previous_word": [],
                "dynamic_source_num_hidden": [],
                "prefix": [],
                "dtype": []
            }
        },
        "Attention.on": {
            "name": "on",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "source_length": [],
                "source_seq_len": []
            }
        },
        "Attention.get_initial_state": {
            "name": "get_initial_state",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "source_length": [],
                "source_seq_len": []
            }
        },
        "Attention.make_input": {
            "name": "make_input",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "seq_idx": [],
                "word_vec_prev": [],
                "decoder_state": []
            }
        },
        "BilinearAttention.__init__": {
            "name": "__init__",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "query_num_hidden": [],
                "dtype": [],
                "prefix": []
            }
        },
        "BilinearAttention.on": {
            "name": "on",
            "location": 243,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "source_length": [],
                "source_seq_len": []
            }
        },
        "DotAttention.__init__": {
            "name": "__init__",
            "location": 310,
            "return": [],
            "arguments": {
                "self": [],
                "input_previous_word": [],
                "source_num_hidden": [],
                "query_num_hidden": [],
                "num_hidden": [],
                "is_scaled": [],
                "prefix": [],
                "dtype": []
            }
        },
        "DotAttention.on": {
            "name": "on",
            "location": 327,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "source_length": [],
                "source_seq_len": []
            }
        },
        "MultiHeadDotAttention.__init__": {
            "name": "__init__",
            "location": 400,
            "return": [],
            "arguments": {
                "self": [],
                "input_previous_word": [],
                "source_num_hidden": [],
                "num_heads": [],
                "prefix": [],
                "dtype": []
            }
        },
        "MultiHeadDotAttention.on": {
            "name": "on",
            "location": 420,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "source_length": [],
                "source_seq_len": []
            }
        },
        "EncoderLastStateAttention.on": {
            "name": "on",
            "location": 507,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "source_length": [],
                "source_seq_len": []
            }
        },
        "LocationAttention.__init__": {
            "name": "__init__",
            "location": 545,
            "return": [],
            "arguments": {
                "self": [],
                "input_previous_word": [],
                "max_seq_len": [],
                "prefix": [],
                "dtype": []
            }
        },
        "LocationAttention.on": {
            "name": "on",
            "location": 555,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "source_length": [],
                "source_seq_len": []
            }
        },
        "MlpAttention.__init__": {
            "name": "__init__",
            "location": 623,
            "return": [],
            "arguments": {
                "self": [],
                "input_previous_word": [],
                "num_hidden": [],
                "layer_normalization": [],
                "prefix": [],
                "dtype": []
            }
        },
        "MlpAttention.on": {
            "name": "on",
            "location": 650,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "source_length": [],
                "source_seq_len": []
            }
        },
        "MlpCovAttention.__init__": {
            "name": "__init__",
            "location": 758,
            "return": [],
            "arguments": {
                "self": [],
                "input_previous_word": [],
                "num_hidden": [],
                "layer_normalization": [],
                "config_coverage": [],
                "prefix": [],
                "dtype": []
            }
        },
        "Attention.register.wrapper": {
            "name": "wrapper",
            "location": 145,
            "return": [],
            "arguments": {
                "target_cls": []
            }
        },
        "Attention.on.attend": {
            "name": "attend",
            "location": 178,
            "return": [],
            "arguments": {
                "att_input": [],
                "att_state": []
            }
        },
        "BilinearAttention.on.attend": {
            "name": "attend",
            "location": 263,
            "return": [],
            "arguments": {
                "att_input": [],
                "att_state": []
            }
        },
        "DotAttention.on.attend": {
            "name": "attend",
            "location": 350,
            "return": [],
            "arguments": {
                "att_input": [],
                "att_state": []
            }
        },
        "MultiHeadDotAttention.on.attend": {
            "name": "attend",
            "location": 447,
            "return": [],
            "arguments": {
                "att_input": [],
                "att_state": []
            }
        },
        "EncoderLastStateAttention.on.attend": {
            "name": "attend",
            "location": 522,
            "return": [],
            "arguments": {
                "att_input": [],
                "att_state": []
            }
        },
        "LocationAttention.on.attend": {
            "name": "attend",
            "location": 567,
            "return": [],
            "arguments": {
                "att_input": [],
                "att_state": []
            }
        },
        "MlpAttention.on.attend": {
            "name": "attend",
            "location": 673,
            "return": [],
            "arguments": {
                "att_input": [],
                "att_state": []
            }
        }
    },
    "saml-nmt-master/sockeye/score.py": {
        "main": {
            "name": "main",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "get_data_iters_and_vocabs": {
            "name": "get_data_iters_and_vocabs",
            "location": 45,
            "return": [],
            "arguments": {
                "args": [],
                "model_folder": []
            }
        },
        "score": {
            "name": "score",
            "location": 99,
            "return": [],
            "arguments": {
                "args": []
            }
        }
    },
    "saml-nmt-master/sockeye/scoring.py": {
        "ScoringModel.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "model_dir": [],
                "context": [],
                "provide_data": [],
                "provide_label": [],
                "bucketing": [],
                "default_bucket_key": [],
                "score_type": [],
                "length_penalty": [],
                "softmax_temperature": []
            }
        },
        "ScoringModel._initialize": {
            "name": "_initialize",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "provide_data": [],
                "provide_label": [],
                "default_bucket_key": []
            }
        },
        "ScoringModel.run": {
            "name": "run",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "batch": []
            }
        },
        "Scorer.__init__": {
            "name": "__init__",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "source_vocabs": [],
                "target_vocab": []
            }
        },
        "Scorer.score": {
            "name": "score",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "score_iter": [],
                "output_handler": []
            }
        },
        "ScoringModel._initialize.sym_gen": {
            "name": "sym_gen",
            "location": 113,
            "return": [],
            "arguments": {
                "seq_lens": []
            }
        }
    },
    "saml-nmt-master/sockeye/train.py": {
        "none_if_negative": {
            "name": "none_if_negative",
            "location": 55,
            "return": [],
            "arguments": {
                "val": []
            }
        },
        "_list_to_tuple": {
            "name": "_list_to_tuple",
            "location": 59,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "_dict_difference": {
            "name": "_dict_difference",
            "location": 66,
            "return": [],
            "arguments": {
                "dict1": [],
                "dict2": []
            }
        },
        "check_arg_compatibility": {
            "name": "check_arg_compatibility",
            "location": 76,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "check_resume": {
            "name": "check_resume",
            "location": 113,
            "return": [],
            "arguments": {
                "args": [],
                "output_folder": []
            }
        },
        "create_checkpoint_decoder": {
            "name": "create_checkpoint_decoder",
            "location": 156,
            "return": [],
            "arguments": {
                "args": [],
                "exit_stack": [],
                "train_context": []
            }
        },
        "use_shared_vocab": {
            "name": "use_shared_vocab",
            "location": 196,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "create_data_iters_and_vocabs": {
            "name": "create_data_iters_and_vocabs",
            "location": 218,
            "return": [],
            "arguments": {
                "args": [],
                "max_seq_len_source": [],
                "max_seq_len_target": [],
                "shared_vocab": [],
                "resume_training": [],
                "output_folder": []
            }
        },
        "create_encoder_config": {
            "name": "create_encoder_config",
            "location": 359,
            "return": [],
            "arguments": {
                "args": [],
                "max_seq_len_source": [],
                "max_seq_len_target": [],
                "config_conv": []
            }
        },
        "create_decoder_config": {
            "name": "create_decoder_config",
            "location": 449,
            "return": [],
            "arguments": {
                "args": [],
                "encoder_num_hidden": [],
                "max_seq_len_source": [],
                "max_seq_len_target": []
            }
        },
        "check_encoder_decoder_args": {
            "name": "check_encoder_decoder_args",
            "location": 557,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "create_model_config": {
            "name": "create_model_config",
            "location": 578,
            "return": [],
            "arguments": {
                "args": [],
                "source_vocab_sizes": [],
                "target_vocab_size": [],
                "max_seq_len_source": [],
                "max_seq_len_target": [],
                "config_data": []
            }
        },
        "create_training_model": {
            "name": "create_training_model",
            "location": 658,
            "return": [],
            "arguments": {
                "config": [],
                "context": [],
                "output_dir": [],
                "train_iter": [],
                "args": [],
                "vocab_weights": []
            }
        },
        "gradient_compression_params": {
            "name": "gradient_compression_params",
            "location": 694,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "create_optimizer_config": {
            "name": "create_optimizer_config",
            "location": 705,
            "return": [],
            "arguments": {
                "args": [],
                "source_vocab_sizes": [],
                "extra_initializers": []
            }
        },
        "main": {
            "name": "main",
            "location": 770,
            "return": [],
            "arguments": {}
        },
        "train": {
            "name": "train",
            "location": 777,
            "return": [],
            "arguments": {
                "args": []
            }
        }
    },
    "saml-nmt-master/sockeye/training.py": {
        "global_norm": {
            "name": "global_norm",
            "location": 489,
            "return": [],
            "arguments": {
                "ndarrays": []
            }
        },
        "_decode_and_evaluate": {
            "name": "_decode_and_evaluate",
            "location": 1299,
            "return": [],
            "arguments": {
                "decoder": [],
                "checkpoint": [],
                "output_name": [],
                "queue": []
            }
        },
        "TrainingModel.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "context": [],
                "output_dir": [],
                "provide_data": [],
                "provide_label": [],
                "default_bucket_key": [],
                "bucketing": [],
                "vocab_weights": [],
                "gradient_compression_params": [],
                "fixed_param_names": [],
                "instantiate_hidden": [],
                "sampling_loss_weight": [],
                "sampling_alignment_type": [],
                "differentiable_sampling": [],
                "annealing_schedule_type": [],
                "teacher_forcing_probability_reduce_factor": []
            }
        },
        "TrainingModel._initialize": {
            "name": "_initialize",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "provide_data": [],
                "provide_label": [],
                "default_bucket_key": []
            }
        },
        "TrainingModel.run_forward_backward": {
            "name": "run_forward_backward",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "batch": [],
                "metric": []
            }
        },
        "TrainingModel.update": {
            "name": "update",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainingModel.get_gradients": {
            "name": "get_gradients",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainingModel.get_global_gradient_norm": {
            "name": "get_global_gradient_norm",
            "location": 297,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainingModel.rescale_gradients": {
            "name": "rescale_gradients",
            "location": 307,
            "return": [],
            "arguments": {
                "self": [],
                "scale": []
            }
        },
        "TrainingModel.prepare_batch": {
            "name": "prepare_batch",
            "location": 317,
            "return": [],
            "arguments": {
                "self": [],
                "batch": []
            }
        },
        "TrainingModel.evaluate": {
            "name": "evaluate",
            "location": 325,
            "return": [],
            "arguments": {
                "self": [],
                "eval_iter": [],
                "eval_metric": []
            }
        },
        "TrainingModel.current_module": {
            "name": "current_module",
            "location": 334,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainingModel.executor_group": {
            "name": "executor_group",
            "location": 340,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainingModel.executors": {
            "name": "executors",
            "location": 344,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainingModel.loss": {
            "name": "loss",
            "location": 348,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainingModel.optimizer": {
            "name": "optimizer",
            "location": 352,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainingModel.initialize_optimizer": {
            "name": "initialize_optimizer",
            "location": 359,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "TrainingModel.save_optimizer_states": {
            "name": "save_optimizer_states",
            "location": 368,
            "return": [],
            "arguments": {
                "self": [],
                "fname": []
            }
        },
        "TrainingModel.load_optimizer_states": {
            "name": "load_optimizer_states",
            "location": 376,
            "return": [],
            "arguments": {
                "self": [],
                "fname": []
            }
        },
        "TrainingModel.initialize_parameters": {
            "name": "initialize_parameters",
            "location": 384,
            "return": [],
            "arguments": {
                "self": [],
                "initializer": [],
                "allow_missing_params": []
            }
        },
        "TrainingModel.log_parameters": {
            "name": "log_parameters",
            "location": 403,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainingModel.save_params_to_file": {
            "name": "save_params_to_file",
            "location": 418,
            "return": [],
            "arguments": {
                "self": [],
                "fname": []
            }
        },
        "TrainingModel.load_params_from_file": {
            "name": "load_params_from_file",
            "location": 431,
            "return": [],
            "arguments": {
                "self": [],
                "fname": [],
                "allow_missing_params": []
            }
        },
        "TrainingModel.install_monitor": {
            "name": "install_monitor",
            "location": 443,
            "return": [],
            "arguments": {
                "self": [],
                "monitor_pattern": [],
                "monitor_stat_func_name": []
            }
        },
        "TrainingModel.adjust_teacher_forcing_probability": {
            "name": "adjust_teacher_forcing_probability",
            "location": 458,
            "return": [],
            "arguments": {
                "self": [],
                "checkpoint": [],
                "lower_bound": []
            }
        },
        "TrainingModel.monitor": {
            "name": "monitor",
            "location": 485,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainState.__init__": {
            "name": "__init__",
            "location": 504,
            "return": [],
            "arguments": {
                "self": [],
                "early_stopping_metric": []
            }
        },
        "TrainState.save": {
            "name": "save",
            "location": 520,
            "return": [],
            "arguments": {
                "self": [],
                "fname": []
            }
        },
        "TrainState.load": {
            "name": "load",
            "location": 528,
            "return": [],
            "arguments": {
                "fname": []
            }
        },
        "EarlyStoppingTrainer.__init__": {
            "name": "__init__",
            "location": 547,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "optimizer_config": [],
                "max_params_files_to_keep": [],
                "source_vocabs": [],
                "target_vocab": []
            }
        },
        "EarlyStoppingTrainer.fit": {
            "name": "fit",
            "location": 562,
            "return": [],
            "arguments": {
                "self": [],
                "train_iter": [],
                "validation_iter": [],
                "early_stopping_metric": [],
                "metrics": [],
                "checkpoint_frequency": [],
                "max_num_not_improved": [],
                "min_samples": [],
                "max_samples": [],
                "min_updates": [],
                "max_updates": [],
                "min_epochs": [],
                "max_epochs": [],
                "lr_decay_param_reset": [],
                "lr_decay_opt_states_reset": [],
                "decoder": [],
                "mxmonitor_pattern": [],
                "mxmonitor_stat_func": [],
                "allow_missing_parameters": [],
                "existing_parameters": []
            }
        },
        "EarlyStoppingTrainer._step": {
            "name": "_step",
            "location": 778,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "batch": [],
                "checkpoint_frequency": [],
                "metric_train": [],
                "metric_loss": []
            }
        },
        "EarlyStoppingTrainer._evaluate": {
            "name": "_evaluate",
            "location": 835,
            "return": [],
            "arguments": {
                "self": [],
                "val_iter": [],
                "val_metric": []
            }
        },
        "EarlyStoppingTrainer._update_metrics": {
            "name": "_update_metrics",
            "location": 843,
            "return": [],
            "arguments": {
                "self": [],
                "metric_train": [],
                "metric_val": [],
                "process_manager": []
            }
        },
        "EarlyStoppingTrainer._cleanup": {
            "name": "_cleanup",
            "location": 880,
            "return": [],
            "arguments": {
                "self": [],
                "lr_decay_opt_states_reset": [],
                "process_manager": []
            }
        },
        "EarlyStoppingTrainer._initialize_parameters": {
            "name": "_initialize_parameters",
            "location": 902,
            "return": [],
            "arguments": {
                "self": [],
                "params": [],
                "allow_missing_params": []
            }
        },
        "EarlyStoppingTrainer._initialize_optimizer": {
            "name": "_initialize_optimizer",
            "location": 909,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EarlyStoppingTrainer._adjust_learning_rate": {
            "name": "_adjust_learning_rate",
            "location": 912,
            "return": [],
            "arguments": {
                "self": [],
                "has_improved": [],
                "lr_decay_param_reset": [],
                "lr_decay_opt_states_reset": []
            }
        },
        "EarlyStoppingTrainer.best_params_fname": {
            "name": "best_params_fname",
            "location": 935,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EarlyStoppingTrainer.current_params_fname": {
            "name": "current_params_fname",
            "location": 939,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EarlyStoppingTrainer.metrics_fname": {
            "name": "metrics_fname",
            "location": 943,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EarlyStoppingTrainer.training_state_dirname": {
            "name": "training_state_dirname",
            "location": 947,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EarlyStoppingTrainer._create_eval_metric": {
            "name": "_create_eval_metric",
            "location": 951,
            "return": [],
            "arguments": {
                "metric_name": [],
                "output_names": []
            }
        },
        "EarlyStoppingTrainer._create_eval_metric_composite": {
            "name": "_create_eval_metric_composite",
            "location": 964,
            "return": [],
            "arguments": {
                "metric_names": [],
                "output_names": []
            }
        },
        "EarlyStoppingTrainer._create_metrics": {
            "name": "_create_metrics",
            "location": 971,
            "return": [],
            "arguments": {
                "self": [],
                "metrics": [],
                "optimizer": [],
                "loss": []
            }
        },
        "EarlyStoppingTrainer._update_best_params_link": {
            "name": "_update_best_params_link",
            "location": 988,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EarlyStoppingTrainer._update_best_optimizer_states": {
            "name": "_update_best_optimizer_states",
            "location": 998,
            "return": [],
            "arguments": {
                "self": [],
                "lr_decay_opt_states_reset": []
            }
        },
        "EarlyStoppingTrainer._save_initial_optimizer_states": {
            "name": "_save_initial_optimizer_states",
            "location": 1002,
            "return": [],
            "arguments": {
                "self": [],
                "lr_decay_opt_states_reset": []
            }
        },
        "EarlyStoppingTrainer._check_args": {
            "name": "_check_args",
            "location": 1006,
            "return": [],
            "arguments": {
                "self": [],
                "metrics": [],
                "early_stopping_metric": [],
                "lr_decay_opt_states_reset": [],
                "lr_decay_param_reset": [],
                "cp_decoder": []
            }
        },
        "EarlyStoppingTrainer._save_params": {
            "name": "_save_params",
            "location": 1043,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EarlyStoppingTrainer._save_training_state": {
            "name": "_save_training_state",
            "location": 1051,
            "return": [],
            "arguments": {
                "self": [],
                "train_iter": []
            }
        },
        "EarlyStoppingTrainer._load_training_state": {
            "name": "_load_training_state",
            "location": 1099,
            "return": [],
            "arguments": {
                "self": [],
                "train_iter": []
            }
        },
        "TensorboardLogger.__init__": {
            "name": "__init__",
            "location": 1144,
            "return": [],
            "arguments": {
                "self": [],
                "logdir": [],
                "source_vocab": [],
                "target_vocab": []
            }
        },
        "TensorboardLogger.log_metrics": {
            "name": "log_metrics",
            "location": 1159,
            "return": [],
            "arguments": {
                "self": [],
                "metrics": [],
                "checkpoint": []
            }
        },
        "TensorboardLogger.log_graph": {
            "name": "log_graph",
            "location": 1169,
            "return": [],
            "arguments": {
                "self": [],
                "symbol": []
            }
        },
        "TensorboardLogger.log_source_embedding": {
            "name": "log_source_embedding",
            "location": 1174,
            "return": [],
            "arguments": {
                "self": [],
                "embedding": [],
                "checkpoint": []
            }
        },
        "TensorboardLogger.log_target_embedding": {
            "name": "log_target_embedding",
            "location": 1179,
            "return": [],
            "arguments": {
                "self": [],
                "embedding": [],
                "checkpoint": []
            }
        },
        "TensorboardLogger.log_output_embedding": {
            "name": "log_output_embedding",
            "location": 1184,
            "return": [],
            "arguments": {
                "self": [],
                "embedding": [],
                "checkpoint": []
            }
        },
        "Speedometer.__init__": {
            "name": "__init__",
            "location": 1195,
            "return": [],
            "arguments": {
                "self": [],
                "frequency": [],
                "auto_reset": []
            }
        },
        "Speedometer.__call__": {
            "name": "__call__",
            "location": 1205,
            "return": [],
            "arguments": {
                "self": [],
                "epoch": [],
                "updates": [],
                "samples": [],
                "tokens": [],
                "metric": []
            }
        },
        "DecoderProcessManager.__init__": {
            "name": "__init__",
            "location": 1245,
            "return": [],
            "arguments": {
                "self": [],
                "output_folder": [],
                "decoder": []
            }
        },
        "DecoderProcessManager.start_decoder": {
            "name": "start_decoder",
            "location": 1254,
            "return": [],
            "arguments": {
                "self": [],
                "checkpoint": []
            }
        },
        "DecoderProcessManager.collect_results": {
            "name": "collect_results",
            "location": 1268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DecoderProcessManager.wait_to_finish": {
            "name": "wait_to_finish",
            "location": 1280,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainingModel._initialize.sym_gen": {
            "name": "sym_gen",
            "location": 131,
            "return": [],
            "arguments": {
                "seq_lens": []
            }
        }
    },
    "saml-nmt-master/sockeye/transformer.py": {
        "get_variable_length_bias": {
            "name": "get_variable_length_bias",
            "location": 337,
            "return": [],
            "arguments": {
                "lengths": [],
                "max_length": [],
                "num_heads": [],
                "fold_heads": [],
                "name": []
            }
        },
        "get_autoregressive_bias": {
            "name": "get_autoregressive_bias",
            "location": 360,
            "return": [],
            "arguments": {
                "max_length": [],
                "name": []
            }
        },
        "TransformerConfig.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "model_size": [],
                "attention_heads": [],
                "feed_forward_num_hidden": [],
                "act_type": [],
                "num_layers": [],
                "dropout_attention": [],
                "dropout_act": [],
                "dropout_prepost": [],
                "positional_embedding_type": [],
                "preprocess_sequence": [],
                "postprocess_sequence": [],
                "max_seq_len_source": [],
                "max_seq_len_target": [],
                "conv_config": [],
                "lhuc": [],
                "dtype": []
            }
        },
        "TransformerEncoderBlock.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "prefix": []
            }
        },
        "TransformerEncoderBlock.__call__": {
            "name": "__call__",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "bias": []
            }
        },
        "TransformerDecoderBlock.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "prefix": []
            }
        },
        "TransformerDecoderBlock.__call__": {
            "name": "__call__",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "target_bias": [],
                "source": [],
                "source_bias": [],
                "cache": []
            }
        },
        "TransformerProcessBlock.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "sequence": [],
                "dropout": [],
                "prefix": []
            }
        },
        "TransformerProcessBlock.__call__": {
            "name": "__call__",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "prev": []
            }
        },
        "TransformerFeedForward.__init__": {
            "name": "__init__",
            "location": 254,
            "return": [],
            "arguments": {
                "self": [],
                "num_hidden": [],
                "num_model": [],
                "act_type": [],
                "dropout": [],
                "prefix": []
            }
        },
        "TransformerFeedForward.__call__": {
            "name": "__call__",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "VariableLengthBias.__init__": {
            "name": "__init__",
            "location": 290,
            "return": [],
            "arguments": {
                "self": [],
                "max_length": []
            }
        },
        "VariableLengthBias.forward": {
            "name": "forward",
            "location": 294,
            "return": [],
            "arguments": {
                "self": [],
                "is_train": [],
                "req": [],
                "in_data": [],
                "out_data": [],
                "aux": []
            }
        },
        "VariableLengthBias.backward": {
            "name": "backward",
            "location": 309,
            "return": [],
            "arguments": {
                "self": [],
                "req": [],
                "out_grad": [],
                "in_data": [],
                "out_data": [],
                "in_grad": [],
                "aux": []
            }
        },
        "VariableLengthBiasProp.__init__": {
            "name": "__init__",
            "location": 316,
            "return": [],
            "arguments": {
                "self": [],
                "max_length": []
            }
        },
        "VariableLengthBiasProp.list_arguments": {
            "name": "list_arguments",
            "location": 320,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableLengthBiasProp.list_outputs": {
            "name": "list_outputs",
            "location": 323,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VariableLengthBiasProp.infer_shape": {
            "name": "infer_shape",
            "location": 326,
            "return": [],
            "arguments": {
                "self": [],
                "in_shape": []
            }
        },
        "VariableLengthBiasProp.infer_type": {
            "name": "infer_type",
            "location": 330,
            "return": [],
            "arguments": {
                "self": [],
                "in_type": []
            }
        },
        "VariableLengthBiasProp.create_operator": {
            "name": "create_operator",
            "location": 333,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "shapes": [],
                "dtypes": []
            }
        },
        "AutoRegressiveBias.__init__": {
            "name": "__init__",
            "location": 385,
            "return": [],
            "arguments": {
                "self": [],
                "length": [],
                "dtype": [],
                "ctx": []
            }
        },
        "AutoRegressiveBias.get_bias": {
            "name": "get_bias",
            "location": 390,
            "return": [],
            "arguments": {
                "length": [],
                "dtype": [],
                "ctx": []
            }
        },
        "AutoRegressiveBias.forward": {
            "name": "forward",
            "location": 397,
            "return": [],
            "arguments": {
                "self": [],
                "is_train": [],
                "req": [],
                "in_data": [],
                "out_data": [],
                "aux": []
            }
        },
        "AutoRegressiveBias.backward": {
            "name": "backward",
            "location": 400,
            "return": [],
            "arguments": {
                "self": [],
                "req": [],
                "out_grad": [],
                "in_data": [],
                "out_data": [],
                "in_grad": [],
                "aux": []
            }
        },
        "AutoRegressiveBiasProp.__init__": {
            "name": "__init__",
            "location": 407,
            "return": [],
            "arguments": {
                "self": [],
                "length": [],
                "dtype": []
            }
        },
        "AutoRegressiveBiasProp.list_arguments": {
            "name": "list_arguments",
            "location": 412,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoRegressiveBiasProp.list_outputs": {
            "name": "list_outputs",
            "location": 415,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoRegressiveBiasProp.infer_shape": {
            "name": "infer_shape",
            "location": 418,
            "return": [],
            "arguments": {
                "self": [],
                "in_shape": []
            }
        },
        "AutoRegressiveBiasProp.infer_type": {
            "name": "infer_type",
            "location": 421,
            "return": [],
            "arguments": {
                "self": [],
                "in_type": []
            }
        },
        "AutoRegressiveBiasProp.create_operator": {
            "name": "create_operator",
            "location": 424,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "shapes": [],
                "dtypes": []
            }
        }
    },
    "saml-nmt-master/sockeye/translate.py": {
        "main": {
            "name": "main",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "run_translate": {
            "name": "run_translate",
            "location": 43,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "make_inputs": {
            "name": "make_inputs",
            "location": 119,
            "return": [],
            "arguments": {
                "input_file": [],
                "translator": [],
                "input_is_json": [],
                "input_factors": []
            }
        },
        "read_and_translate": {
            "name": "read_and_translate",
            "location": 160,
            "return": [],
            "arguments": {
                "translator": [],
                "output_handler": [],
                "chunk_size": [],
                "input_file": [],
                "input_factors": [],
                "input_is_json": []
            }
        },
        "translate": {
            "name": "translate",
            "location": 206,
            "return": [],
            "arguments": {
                "output_handler": [],
                "trans_inputs": [],
                "translator": []
            }
        }
    },
    "saml-nmt-master/sockeye/utils.py": {
        "check_version": {
            "name": "check_version",
            "location": 46,
            "return": [],
            "arguments": {
                "version": []
            }
        },
        "load_version": {
            "name": "load_version",
            "location": 61,
            "return": [],
            "arguments": {
                "fname": []
            }
        },
        "parse_version": {
            "name": "parse_version",
            "location": 75,
            "return": [],
            "arguments": {
                "version_string": []
            }
        },
        "log_basic_info": {
            "name": "log_basic_info",
            "location": 86,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "seed_rngs": {
            "name": "seed_rngs",
            "location": 98,
            "return": [],
            "arguments": {
                "seed": []
            }
        },
        "check_condition": {
            "name": "check_condition",
            "location": 109,
            "return": [],
            "arguments": {
                "condition": [],
                "error_message": []
            }
        },
        "save_graph": {
            "name": "save_graph",
            "location": 121,
            "return": [],
            "arguments": {
                "symbol": [],
                "filename": [],
                "hide_weights": []
            }
        },
        "compute_lengths": {
            "name": "compute_lengths",
            "location": 133,
            "return": [],
            "arguments": {
                "sequence_data": []
            }
        },
        "save_params": {
            "name": "save_params",
            "location": 143,
            "return": [],
            "arguments": {
                "arg_params": [],
                "fname": [],
                "aux_params": []
            }
        },
        "load_params": {
            "name": "load_params",
            "location": 158,
            "return": [],
            "arguments": {
                "fname": []
            }
        },
        "top1": {
            "name": "top1",
            "location": 255,
            "return": [],
            "arguments": {
                "scores": [],
                "offset": []
            }
        },
        "topk": {
            "name": "topk",
            "location": 277,
            "return": [],
            "arguments": {
                "scores": [],
                "k": [],
                "offset": [],
                "use_mxnet_topk": []
            }
        },
        "chunks": {
            "name": "chunks",
            "location": 318,
            "return": [],
            "arguments": {
                "some_list": [],
                "n": []
            }
        },
        "get_tokens": {
            "name": "get_tokens",
            "location": 324,
            "return": [],
            "arguments": {
                "line": []
            }
        },
        "is_gzip_file": {
            "name": "is_gzip_file",
            "location": 336,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "smart_open": {
            "name": "smart_open",
            "location": 342,
            "return": [],
            "arguments": {
                "filename": [],
                "mode": [],
                "ftype": [],
                "errors": []
            }
        },
        "plot_attention": {
            "name": "plot_attention",
            "location": 366,
            "return": [],
            "arguments": {
                "attention_matrix": [],
                "source_tokens": [],
                "target_tokens": [],
                "filename": []
            }
        },
        "print_attention_text": {
            "name": "print_attention_text",
            "location": 395,
            "return": [],
            "arguments": {
                "attention_matrix": [],
                "source_tokens": [],
                "target_tokens": [],
                "threshold": []
            }
        },
        "get_alignments": {
            "name": "get_alignments",
            "location": 433,
            "return": [],
            "arguments": {
                "attention_matrix": [],
                "threshold": []
            }
        },
        "average_arrays": {
            "name": "average_arrays",
            "location": 448,
            "return": [],
            "arguments": {
                "arrays": []
            }
        },
        "get_num_gpus": {
            "name": "get_num_gpus",
            "location": 463,
            "return": [],
            "arguments": {}
        },
        "get_gpu_memory_usage": {
            "name": "get_gpu_memory_usage",
            "location": 472,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "log_gpu_memory_usage": {
            "name": "log_gpu_memory_usage",
            "location": 505,
            "return": [],
            "arguments": {
                "memory_data": []
            }
        },
        "determine_context": {
            "name": "determine_context",
            "location": 511,
            "return": [],
            "arguments": {
                "device_ids": [],
                "use_cpu": [],
                "disable_device_locking": [],
                "lock_dir": [],
                "exit_stack": []
            }
        },
        "expand_requested_device_ids": {
            "name": "expand_requested_device_ids",
            "location": 540,
            "return": [],
            "arguments": {
                "requested_device_ids": []
            }
        },
        "_expand_requested_device_ids": {
            "name": "_expand_requested_device_ids",
            "location": 556,
            "return": [],
            "arguments": {
                "requested_device_ids": [],
                "num_gpus_available": []
            }
        },
        "acquire_gpus": {
            "name": "acquire_gpus",
            "location": 577,
            "return": [],
            "arguments": {
                "requested_device_ids": [],
                "lock_dir": [],
                "retry_wait_min": [],
                "retry_wait_rand": [],
                "num_gpus_available": []
            }
        },
        "read_metrics_file": {
            "name": "read_metrics_file",
            "location": 737,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "write_metrics_file": {
            "name": "write_metrics_file",
            "location": 759,
            "return": [],
            "arguments": {
                "metrics": [],
                "path": []
            }
        },
        "get_validation_metric_points": {
            "name": "get_validation_metric_points",
            "location": 772,
            "return": [],
            "arguments": {
                "model_path": [],
                "metric": []
            }
        },
        "grouper": {
            "name": "grouper",
            "location": 849,
            "return": [],
            "arguments": {
                "iterable": [],
                "size": []
            }
        },
        "metric_value_is_better": {
            "name": "metric_value_is_better",
            "location": 865,
            "return": [],
            "arguments": {
                "new": [],
                "old": [],
                "metric": []
            }
        },
        "cleanup_params_files": {
            "name": "cleanup_params_files",
            "location": 875,
            "return": [],
            "arguments": {
                "output_folder": [],
                "max_to_keep": [],
                "checkpoint": [],
                "best_checkpoint": []
            }
        },
        "cast_conditionally": {
            "name": "cast_conditionally",
            "location": 895,
            "return": [],
            "arguments": {
                "data": [],
                "dtype": []
            }
        },
        "uncast_conditionally": {
            "name": "uncast_conditionally",
            "location": 909,
            "return": [],
            "arguments": {
                "data": [],
                "dtype": []
            }
        },
        "split": {
            "name": "split",
            "location": 923,
            "return": [],
            "arguments": {
                "data": [],
                "num_outputs": [],
                "axis": [],
                "squeeze_axis": []
            }
        },
        "inflect": {
            "name": "inflect",
            "location": 948,
            "return": [],
            "arguments": {
                "word": [],
                "count": []
            }
        },
        "gumbel_softmax": {
            "name": "gumbel_softmax",
            "location": 965,
            "return": [],
            "arguments": {
                "logits": [],
                "axis": [],
                "temperature": [],
                "noise_scale": [],
                "st": [],
                "eps": []
            }
        },
        "Accuracy.__init__": {
            "name": "__init__",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "output_names": [],
                "label_names": [],
                "ignore_label": []
            }
        },
        "Accuracy.update": {
            "name": "update",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "labels": [],
                "preds": []
            }
        },
        "OnlineMeanAndVariance.__init__": {
            "name": "__init__",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OnlineMeanAndVariance.update": {
            "name": "update",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "OnlineMeanAndVariance.count": {
            "name": "count",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OnlineMeanAndVariance.mean": {
            "name": "mean",
            "location": 244,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OnlineMeanAndVariance.variance": {
            "name": "variance",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GpuFileLock.__init__": {
            "name": "__init__",
            "location": 685,
            "return": [],
            "arguments": {
                "self": [],
                "candidates": [],
                "lock_dir": []
            }
        },
        "GpuFileLock.__enter__": {
            "name": "__enter__",
            "location": 693,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GpuFileLock.__exit__": {
            "name": "__exit__",
            "location": 727,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        },
        "PrintValue.__init__": {
            "name": "__init__",
            "location": 797,
            "return": [],
            "arguments": {
                "self": [],
                "print_name": [],
                "print_grad": [],
                "use_logger": []
            }
        },
        "PrintValue.__print_nd__": {
            "name": "__print_nd__",
            "location": 804,
            "return": [],
            "arguments": {
                "self": [],
                "nd": [],
                "label": []
            }
        },
        "PrintValue.forward": {
            "name": "forward",
            "location": 813,
            "return": [],
            "arguments": {
                "self": [],
                "is_train": [],
                "req": [],
                "in_data": [],
                "out_data": [],
                "aux": []
            }
        },
        "PrintValue.backward": {
            "name": "backward",
            "location": 817,
            "return": [],
            "arguments": {
                "self": [],
                "req": [],
                "out_grad": [],
                "in_data": [],
                "out_data": [],
                "in_grad": [],
                "aux": []
            }
        },
        "PrintValueProp.__init__": {
            "name": "__init__",
            "location": 825,
            "return": [],
            "arguments": {
                "self": [],
                "print_name": [],
                "print_grad": [],
                "use_logger": []
            }
        },
        "PrintValueProp.list_arguments": {
            "name": "list_arguments",
            "location": 831,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PrintValueProp.list_outputs": {
            "name": "list_outputs",
            "location": 834,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PrintValueProp.infer_shape": {
            "name": "infer_shape",
            "location": 837,
            "return": [],
            "arguments": {
                "self": [],
                "in_shape": []
            }
        },
        "PrintValueProp.infer_type": {
            "name": "infer_type",
            "location": 840,
            "return": [],
            "arguments": {
                "self": [],
                "in_type": []
            }
        },
        "PrintValueProp.create_operator": {
            "name": "create_operator",
            "location": 843,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "shapes": [],
                "dtypes": []
            }
        }
    },
    "saml-nmt-master/sockeye/vocab.py": {
        "build_from_paths": {
            "name": "build_from_paths",
            "location": 34,
            "return": [],
            "arguments": {
                "paths": [],
                "num_words": [],
                "min_count": [],
                "pad_to_multiple_of": []
            }
        },
        "build_vocab": {
            "name": "build_vocab",
            "location": 53,
            "return": [],
            "arguments": {
                "data": [],
                "num_words": [],
                "min_count": [],
                "pad_to_multiple_of": []
            }
        },
        "vocab_to_json": {
            "name": "vocab_to_json",
            "location": 103,
            "return": [],
            "arguments": {
                "vocab": [],
                "path": []
            }
        },
        "vocab_from_json": {
            "name": "vocab_from_json",
            "location": 115,
            "return": [],
            "arguments": {
                "path": [],
                "encoding": []
            }
        },
        "save_source_vocabs": {
            "name": "save_source_vocabs",
            "location": 129,
            "return": [],
            "arguments": {
                "source_vocabs": [],
                "folder": []
            }
        },
        "save_target_vocab": {
            "name": "save_target_vocab",
            "location": 140,
            "return": [],
            "arguments": {
                "target_vocab": [],
                "folder": []
            }
        },
        "load_source_vocabs": {
            "name": "load_source_vocabs",
            "location": 150,
            "return": [],
            "arguments": {
                "folder": []
            }
        },
        "load_target_vocab": {
            "name": "load_target_vocab",
            "location": 162,
            "return": [],
            "arguments": {
                "folder": []
            }
        },
        "load_or_create_vocab": {
            "name": "load_or_create_vocab",
            "location": 172,
            "return": [],
            "arguments": {
                "data": [],
                "vocab_path": [],
                "num_words": [],
                "word_min_count": [],
                "pad_to_multiple_of": []
            }
        },
        "load_or_create_vocabs": {
            "name": "load_or_create_vocabs",
            "location": 185,
            "return": [],
            "arguments": {
                "source_paths": [],
                "target_path": [],
                "source_vocab_paths": [],
                "target_vocab_path": [],
                "shared_vocab": [],
                "num_words_source": [],
                "word_min_count_source": [],
                "num_words_target": [],
                "word_min_count_target": [],
                "pad_to_multiple_of": []
            }
        },
        "reverse_vocab": {
            "name": "reverse_vocab",
            "location": 260,
            "return": [],
            "arguments": {
                "vocab": []
            }
        },
        "get_ordered_tokens_from_vocab": {
            "name": "get_ordered_tokens_from_vocab",
            "location": 270,
            "return": [],
            "arguments": {
                "vocab": []
            }
        },
        "are_identical": {
            "name": "are_identical",
            "location": 280,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 285,
            "return": [],
            "arguments": {}
        }
    },
    "saml-nmt-master/sockeye/__init__.py": {},
    "saml-nmt-master/sockeye/image_captioning/arguments.py": {
        "add_image_source_root_args": {
            "name": "add_image_source_root_args",
            "location": 26,
            "return": [],
            "arguments": {
                "params": [],
                "required": []
            }
        },
        "add_image_validation_data_params": {
            "name": "add_image_validation_data_params",
            "location": 33,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_image_training_io_args": {
            "name": "add_image_training_io_args",
            "location": 40,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_image_extract_features_cli_args": {
            "name": "add_image_extract_features_cli_args",
            "location": 52,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_image_size_args": {
            "name": "add_image_size_args",
            "location": 80,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_image_model_parameters": {
            "name": "add_image_model_parameters",
            "location": 87,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_preextracted_features_args": {
            "name": "add_preextracted_features_args",
            "location": 125,
            "return": [],
            "arguments": {
                "model_params": []
            }
        },
        "add_image_train_cli_args": {
            "name": "add_image_train_cli_args",
            "location": 137,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_image_caption_cli_args": {
            "name": "add_image_caption_cli_args",
            "location": 147,
            "return": [],
            "arguments": {
                "params": []
            }
        }
    },
    "saml-nmt-master/sockeye/image_captioning/captioner.py": {
        "get_pretrained_caption_net": {
            "name": "get_pretrained_caption_net",
            "location": 42,
            "return": [],
            "arguments": {
                "args": [],
                "context": [],
                "image_preextracted_features": []
            }
        },
        "_extract_features": {
            "name": "_extract_features",
            "location": 85,
            "return": [],
            "arguments": {
                "args": [],
                "context": []
            }
        },
        "main": {
            "name": "main",
            "location": 107,
            "return": [],
            "arguments": {}
        },
        "caption": {
            "name": "caption",
            "location": 114,
            "return": [],
            "arguments": {
                "args": []
            }
        }
    },
    "saml-nmt-master/sockeye/image_captioning/checkpoint_decoder.py": {
        "CheckpointDecoderImageModel.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "source_image_size": [],
                "image_root": [],
                "max_output_length": [],
                "use_feature_loader": []
            }
        },
        "CheckpointDecoderImageModel.decode_and_evaluate": {
            "name": "decode_and_evaluate",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "checkpoint": [],
                "output_name": []
            }
        }
    },
    "saml-nmt-master/sockeye/image_captioning/data_io.py": {
        "get_validation_image_text_data_iter": {
            "name": "get_validation_image_text_data_iter",
            "location": 125,
            "return": [],
            "arguments": {
                "data_loader": [],
                "validation_source_root": [],
                "validation_source": [],
                "validation_target": [],
                "buckets": [],
                "bucket_batch_sizes": [],
                "source_image_size": [],
                "vocab_target": [],
                "max_seq_len_target": [],
                "batch_size": [],
                "fill_up": [],
                "use_feature_loader": [],
                "preload_features": []
            }
        },
        "get_training_image_text_data_iters": {
            "name": "get_training_image_text_data_iters",
            "location": 170,
            "return": [],
            "arguments": {
                "source_root": [],
                "source": [],
                "target": [],
                "validation_source_root": [],
                "validation_source": [],
                "validation_target": [],
                "vocab_target": [],
                "vocab_target_path": [],
                "batch_size": [],
                "batch_by_words": [],
                "batch_num_devices": [],
                "source_image_size": [],
                "fill_up": [],
                "max_seq_len_target": [],
                "bucketing": [],
                "bucket_width": [],
                "use_feature_loader": [],
                "preload_features": []
            }
        },
        "RawListTextDatasetLoader.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "buckets": [],
                "eos_id": [],
                "pad_id": [],
                "dtype": []
            }
        },
        "RawListTextDatasetLoader.load": {
            "name": "load",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "source_list": [],
                "target_sentences": [],
                "num_samples_per_bucket": []
            }
        },
        "ImageTextSampleIter.__init__": {
            "name": "__init__",
            "location": 295,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "buckets": [],
                "batch_size": [],
                "bucket_batch_sizes": [],
                "image_size": [],
                "source_data_name": [],
                "target_data_name": [],
                "label_name": [],
                "dtype": [],
                "source_only": [],
                "use_feature_loader": [],
                "preload_features": []
            }
        },
        "ImageTextSampleIter.next": {
            "name": "next",
            "location": 344,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImageTextSampleIter.visualize_batch": {
            "name": "visualize_batch",
            "location": 383,
            "return": [],
            "arguments": {
                "batch": [],
                "reverse_vocab": [],
                "source_only": []
            }
        }
    },
    "saml-nmt-master/sockeye/image_captioning/encoder.py": {
        "get_image_cnn_encoder": {
            "name": "get_image_cnn_encoder",
            "location": 71,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "ImageLoadedCnnEncoderConfig.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "model_path": [],
                "epoch": [],
                "layer_name": [],
                "encoded_seq_len": [],
                "num_embed": [],
                "no_global_descriptor": [],
                "number_of_kernels": [],
                "positional_embedding_type": [],
                "preextracted_features": []
            }
        },
        "ImageLoadedCnnEncoder.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "prefix": []
            }
        },
        "ImageLoadedCnnEncoder.encode": {
            "name": "encode",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "data_length": [],
                "seq_len": []
            }
        },
        "ImageLoadedCnnEncoder.get_params": {
            "name": "get_params",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImageLoadedCnnEncoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImageLoadedCnnEncoder.get_encoded_seq_len": {
            "name": "get_encoded_seq_len",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "seq_len": []
            }
        },
        "ImageLoadedCnnEncoder.get_initializers": {
            "name": "get_initializers",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImageLoadedCnnEncoder.get_fixed_param_names": {
            "name": "get_fixed_param_names",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "saml-nmt-master/sockeye/image_captioning/extract_features.py": {
        "batching": {
            "name": "batching",
            "location": 38,
            "return": [],
            "arguments": {
                "iterable": [],
                "n": []
            }
        },
        "get_pretrained_net": {
            "name": "get_pretrained_net",
            "location": 44,
            "return": [],
            "arguments": {
                "args": [],
                "context": []
            }
        },
        "extract_features_forward": {
            "name": "extract_features_forward",
            "location": 74,
            "return": [],
            "arguments": {
                "im": [],
                "module": [],
                "image_root": [],
                "output_root": [],
                "batch_size": [],
                "source_image_size": [],
                "context": []
            }
        },
        "read_list_file": {
            "name": "read_list_file",
            "location": 90,
            "return": [],
            "arguments": {
                "inp": []
            }
        },
        "main": {
            "name": "main",
            "location": 98,
            "return": [],
            "arguments": {}
        }
    },
    "saml-nmt-master/sockeye/image_captioning/inference.py": {
        "load_models": {
            "name": "load_models",
            "location": 172,
            "return": [],
            "arguments": {
                "context": [],
                "max_input_len": [],
                "beam_size": [],
                "batch_size": [],
                "model_folders": [],
                "checkpoints": [],
                "softmax_temperature": [],
                "max_output_length_num_stds": [],
                "decoder_return_logit_inputs": [],
                "cache_output_layer_w_b": [],
                "source_image_size": [],
                "forced_max_output_len": []
            }
        },
        "ImageInferenceModel.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "input_size": []
            }
        },
        "ImageInferenceModel._get_encoder_data_shapes": {
            "name": "_get_encoder_data_shapes",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_key": []
            }
        },
        "ImageInferenceModel.max_supported_seq_len_source": {
            "name": "max_supported_seq_len_source",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImageCaptioner.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "source_image_size": [],
                "source_root": [],
                "use_feature_loader": []
            }
        },
        "ImageCaptioner.translate": {
            "name": "translate",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "trans_inputs": []
            }
        },
        "ImageCaptioner._get_inference_input": {
            "name": "_get_inference_input",
            "location": 129,
            "return": [],
            "arguments": {
                "self": [],
                "trans_inputs": []
            }
        }
    },
    "saml-nmt-master/sockeye/image_captioning/train.py": {
        "read_feature_shape": {
            "name": "read_feature_shape",
            "location": 51,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "create_checkpoint_decoder": {
            "name": "create_checkpoint_decoder",
            "location": 58,
            "return": [],
            "arguments": {
                "args": [],
                "exit_stack": [],
                "train_context": []
            }
        },
        "create_data_iters_and_vocab": {
            "name": "create_data_iters_and_vocab",
            "location": 102,
            "return": [],
            "arguments": {
                "args": [],
                "max_seq_len_source": [],
                "max_seq_len_target": [],
                "resume_training": [],
                "output_folder": []
            }
        },
        "create_encoder_config": {
            "name": "create_encoder_config",
            "location": 179,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "create_model_config": {
            "name": "create_model_config",
            "location": 199,
            "return": [],
            "arguments": {
                "args": [],
                "vocab_target_size": [],
                "max_seq_len_source": [],
                "max_seq_len_target": [],
                "config_data": []
            }
        },
        "get_preinit_encoders": {
            "name": "get_preinit_encoders",
            "location": 245,
            "return": [],
            "arguments": {
                "encoders": []
            }
        },
        "main": {
            "name": "main",
            "location": 260,
            "return": [],
            "arguments": {}
        },
        "train": {
            "name": "train",
            "location": 267,
            "return": [],
            "arguments": {
                "args": []
            }
        }
    },
    "saml-nmt-master/sockeye/image_captioning/utils.py": {
        "copy_mx_model_to": {
            "name": "copy_mx_model_to",
            "location": 35,
            "return": [],
            "arguments": {
                "model_path": [],
                "model_epoch": [],
                "output_folder": []
            }
        },
        "crop_resize_image": {
            "name": "crop_resize_image",
            "location": 53,
            "return": [],
            "arguments": {
                "image": [],
                "size": []
            }
        },
        "load_preprocess_images": {
            "name": "load_preprocess_images",
            "location": 77,
            "return": [],
            "arguments": {
                "image_paths": [],
                "image_size": []
            }
        },
        "load_preprocess_image": {
            "name": "load_preprocess_image",
            "location": 92,
            "return": [],
            "arguments": {
                "image_path": [],
                "image_size": []
            }
        },
        "preprocess_image": {
            "name": "preprocess_image",
            "location": 98,
            "return": [],
            "arguments": {
                "image": [],
                "image_size": []
            }
        },
        "load_features": {
            "name": "load_features",
            "location": 112,
            "return": [],
            "arguments": {
                "paths": [],
                "expected_shape": []
            }
        },
        "load_feature": {
            "name": "load_feature",
            "location": 127,
            "return": [],
            "arguments": {
                "path": [],
                "expected_shape": []
            }
        },
        "save_features": {
            "name": "save_features",
            "location": 141,
            "return": [],
            "arguments": {
                "paths": [],
                "datas": [],
                "compressed": []
            }
        },
        "save_feature": {
            "name": "save_feature",
            "location": 157,
            "return": [],
            "arguments": {
                "path": [],
                "data": [],
                "compressed": []
            }
        },
        "zero_pad_features": {
            "name": "zero_pad_features",
            "location": 169,
            "return": [],
            "arguments": {
                "features": [],
                "target_shape": []
            }
        }
    },
    "saml-nmt-master/sockeye/image_captioning/visualize.py": {
        "format_text_for_visualization": {
            "name": "format_text_for_visualization",
            "location": 35,
            "return": [],
            "arguments": {
                "c": [],
                "n": []
            }
        },
        "main": {
            "name": "main",
            "location": 51,
            "return": [],
            "arguments": {}
        }
    },
    "saml-nmt-master/sockeye/image_captioning/__init__.py": {},
    "saml-nmt-master/sockeye_contrib/rouge.py": {
        "_get_ngrams": {
            "name": "_get_ngrams",
            "location": 32,
            "return": [],
            "arguments": {
                "n": [],
                "text": []
            }
        },
        "_split_into_words": {
            "name": "_split_into_words",
            "location": 50,
            "return": [],
            "arguments": {
                "sentences": []
            }
        },
        "_get_word_ngrams": {
            "name": "_get_word_ngrams",
            "location": 55,
            "return": [],
            "arguments": {
                "n": [],
                "sentences": []
            }
        },
        "_len_lcs": {
            "name": "_len_lcs",
            "location": 65,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "_lcs": {
            "name": "_lcs",
            "location": 83,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "_recon_lcs": {
            "name": "_recon_lcs",
            "location": 110,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "rouge_n": {
            "name": "rouge_n",
            "location": 140,
            "return": [],
            "arguments": {
                "evaluated_sentences": [],
                "reference_sentences": [],
                "n": []
            }
        },
        "_f_p_r_lcs": {
            "name": "_f_p_r_lcs",
            "location": 186,
            "return": [],
            "arguments": {
                "llcs": [],
                "m": [],
                "n": []
            }
        },
        "rouge_l_sentence_level": {
            "name": "rouge_l_sentence_level",
            "location": 209,
            "return": [],
            "arguments": {
                "evaluated_sentences": [],
                "reference_sentences": []
            }
        },
        "_union_lcs": {
            "name": "_union_lcs",
            "location": 246,
            "return": [],
            "arguments": {
                "evaluated_sentences": [],
                "reference_sentence": []
            }
        },
        "rouge_l_summary_level": {
            "name": "rouge_l_summary_level",
            "location": 283,
            "return": [],
            "arguments": {
                "evaluated_sentences": [],
                "reference_sentences": []
            }
        },
        "rouge": {
            "name": "rouge",
            "location": 327,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": []
            }
        },
        "rouge_1": {
            "name": "rouge_1",
            "location": 368,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": []
            }
        },
        "rouge_2": {
            "name": "rouge_2",
            "location": 379,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": []
            }
        },
        "rouge_l": {
            "name": "rouge_l",
            "location": 390,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": []
            }
        },
        "_recon_lcs._recon": {
            "name": "_recon",
            "location": 125,
            "return": [],
            "arguments": {
                "i": [],
                "j": []
            }
        }
    },
    "saml-nmt-master/sockeye_contrib/__init__.py": {},
    "saml-nmt-master/sockeye_contrib/autopilot/autopilot.py": {
        "identify_raw_files": {
            "name": "identify_raw_files",
            "location": 101,
            "return": [],
            "arguments": {
                "task": [],
                "test_mode": []
            }
        },
        "download_extract_raw_files": {
            "name": "download_extract_raw_files",
            "location": 121,
            "return": [],
            "arguments": {
                "names": [],
                "cache_dir": [],
                "dest_dir": []
            }
        },
        "md5sum": {
            "name": "md5sum",
            "location": 174,
            "return": [],
            "arguments": {
                "fname": []
            }
        },
        "populate_parallel_text": {
            "name": "populate_parallel_text",
            "location": 181,
            "return": [],
            "arguments": {
                "extract_dir": [],
                "file_sets": [],
                "dest_prefix": [],
                "keep_separate": [],
                "head_n": []
            }
        },
        "copy_parallel_text": {
            "name": "copy_parallel_text",
            "location": 234,
            "return": [],
            "arguments": {
                "file_list": [],
                "dest_prefix": []
            }
        },
        "plain_text_iter": {
            "name": "plain_text_iter",
            "location": 267,
            "return": [],
            "arguments": {
                "fname": [],
                "text_type": [],
                "data_side": []
            }
        },
        "touch_file": {
            "name": "touch_file",
            "location": 312,
            "return": [],
            "arguments": {
                "fname": []
            }
        },
        "renew_step_dir": {
            "name": "renew_step_dir",
            "location": 319,
            "return": [],
            "arguments": {
                "step_dir": []
            }
        },
        "call_sockeye_train": {
            "name": "call_sockeye_train",
            "location": 328,
            "return": [],
            "arguments": {
                "model": [],
                "bpe_dir": [],
                "model_dir": [],
                "log_fname": [],
                "num_gpus": [],
                "test_mode": []
            }
        },
        "call_sockeye_average": {
            "name": "call_sockeye_average",
            "location": 377,
            "return": [],
            "arguments": {
                "model_dir": [],
                "log_fname": []
            }
        },
        "call_sockeye_translate": {
            "name": "call_sockeye_translate",
            "location": 414,
            "return": [],
            "arguments": {
                "args": [],
                "input_fname": [],
                "output_fname": [],
                "model_dir": [],
                "log_fname": [],
                "use_cpu": []
            }
        },
        "call_sacrebleu": {
            "name": "call_sacrebleu",
            "location": 458,
            "return": [],
            "arguments": {
                "input_fname": [],
                "ref_fname": [],
                "output_fname": [],
                "log_fname": [],
                "tokenized": []
            }
        },
        "print_command": {
            "name": "print_command",
            "location": 488,
            "return": [],
            "arguments": {
                "command": [],
                "fname": []
            }
        },
        "run_steps": {
            "name": "run_steps",
            "location": 499,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 858,
            "return": [],
            "arguments": {}
        },
        "run_steps.report_data": {
            "name": "report_data",
            "location": 513,
            "return": [],
            "arguments": {
                "file_sets": []
            }
        }
    },
    "saml-nmt-master/sockeye_contrib/autopilot/models.py": {},
    "saml-nmt-master/sockeye_contrib/autopilot/tasks.py": {},
    "saml-nmt-master/sockeye_contrib/autopilot/test.py": {
        "run_test": {
            "name": "run_test",
            "location": 48,
            "return": [],
            "arguments": {
                "command": [],
                "workspace": []
            }
        },
        "main": {
            "name": "main",
            "location": 76,
            "return": [],
            "arguments": {}
        }
    },
    "saml-nmt-master/sockeye_contrib/autopilot/third_party.py": {
        "bin_open": {
            "name": "bin_open",
            "location": 51,
            "return": [],
            "arguments": {
                "fname": []
            }
        },
        "check_git": {
            "name": "check_git",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "check_perl": {
            "name": "check_perl",
            "location": 73,
            "return": [],
            "arguments": {}
        },
        "checkout_moses_tokenizer": {
            "name": "checkout_moses_tokenizer",
            "location": 82,
            "return": [],
            "arguments": {
                "workspace_dir": []
            }
        },
        "checkout_subword_nmt": {
            "name": "checkout_subword_nmt",
            "location": 114,
            "return": [],
            "arguments": {
                "workspace_dir": []
            }
        },
        "confirm_checkout": {
            "name": "confirm_checkout",
            "location": 138,
            "return": [],
            "arguments": {
                "dest": [],
                "commit": []
            }
        },
        "call_moses_tokenizer": {
            "name": "call_moses_tokenizer",
            "location": 158,
            "return": [],
            "arguments": {
                "workspace_dir": [],
                "input_fname": [],
                "output_fname": [],
                "lang_code": [],
                "num_threads": []
            }
        },
        "call_moses_detokenizer": {
            "name": "call_moses_detokenizer",
            "location": 193,
            "return": [],
            "arguments": {
                "workspace_dir": [],
                "input_fname": [],
                "output_fname": [],
                "lang_code": []
            }
        },
        "call_learn_bpe": {
            "name": "call_learn_bpe",
            "location": 229,
            "return": [],
            "arguments": {
                "workspace_dir": [],
                "source_fname": [],
                "target_fname": [],
                "model_fname": [],
                "num_ops": []
            }
        },
        "call_apply_bpe": {
            "name": "call_apply_bpe",
            "location": 255,
            "return": [],
            "arguments": {
                "workspace_dir": [],
                "input_fname": [],
                "output_fname": [],
                "model_fname": []
            }
        },
        "merge_bpe": {
            "name": "merge_bpe",
            "location": 282,
            "return": [],
            "arguments": {
                "input_fname": [],
                "output_fname": []
            }
        },
        "copy_out": {
            "name": "copy_out",
            "location": 297,
            "return": [],
            "arguments": {
                "source": [],
                "dest": [],
                "use_placeholders": []
            }
        }
    },
    "saml-nmt-master/sockeye_contrib/autopilot/__init__.py": {},
    "saml-nmt-master/sockeye_contrib/sacrebleu/sacrebleu.py": {
        "tokenize_13a": {
            "name": "tokenize_13a",
            "location": 495,
            "return": [],
            "arguments": {
                "line": []
            }
        },
        "tokenize_v14_international": {
            "name": "tokenize_v14_international",
            "location": 540,
            "return": [],
            "arguments": {
                "string": []
            }
        },
        "tokenize_zh": {
            "name": "tokenize_zh",
            "location": 567,
            "return": [],
            "arguments": {
                "sentence": []
            }
        },
        "smart_open": {
            "name": "smart_open",
            "location": 692,
            "return": [],
            "arguments": {
                "file": [],
                "mode": [],
                "encoding": []
            }
        },
        "my_log": {
            "name": "my_log",
            "location": 702,
            "return": [],
            "arguments": {
                "num": []
            }
        },
        "bleu_signature": {
            "name": "bleu_signature",
            "location": 715,
            "return": [],
            "arguments": {
                "args": [],
                "numrefs": []
            }
        },
        "chrf_signature": {
            "name": "chrf_signature",
            "location": 750,
            "return": [],
            "arguments": {
                "args": [],
                "numrefs": []
            }
        },
        "extract_ngrams": {
            "name": "extract_ngrams",
            "location": 786,
            "return": [],
            "arguments": {
                "line": [],
                "min_order": [],
                "max_order": []
            }
        },
        "extract_char_ngrams": {
            "name": "extract_char_ngrams",
            "location": 804,
            "return": [],
            "arguments": {
                "s": [],
                "n": []
            }
        },
        "ref_stats": {
            "name": "ref_stats",
            "location": 811,
            "return": [],
            "arguments": {
                "output": [],
                "refs": []
            }
        },
        "_clean": {
            "name": "_clean",
            "location": 833,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "process_to_text": {
            "name": "process_to_text",
            "location": 843,
            "return": [],
            "arguments": {
                "rawfile": [],
                "txtfile": []
            }
        },
        "print_test_set": {
            "name": "print_test_set",
            "location": 866,
            "return": [],
            "arguments": {
                "test_set": [],
                "langpair": [],
                "side": []
            }
        },
        "download_test_set": {
            "name": "download_test_set",
            "location": 884,
            "return": [],
            "arguments": {
                "test_set": [],
                "langpair": []
            }
        },
        "compute_bleu": {
            "name": "compute_bleu",
            "location": 951,
            "return": [],
            "arguments": {
                "correct": [],
                "total": [],
                "sys_len": [],
                "ref_len": [],
                "smooth": [],
                "smooth_floor": [],
                "use_effective_order": []
            }
        },
        "sentence_bleu": {
            "name": "sentence_bleu",
            "location": 999,
            "return": [],
            "arguments": {
                "hypothesis": [],
                "reference": [],
                "smooth_floor": [],
                "use_effective_order": []
            }
        },
        "corpus_bleu": {
            "name": "corpus_bleu",
            "location": 1022,
            "return": [],
            "arguments": {
                "sys_stream": [],
                "ref_streams": [],
                "smooth": [],
                "smooth_floor": [],
                "force": [],
                "lowercase": [],
                "tokenize": [],
                "use_effective_order": []
            }
        },
        "raw_corpus_bleu": {
            "name": "raw_corpus_bleu",
            "location": 1083,
            "return": [],
            "arguments": {
                "sys_stream": [],
                "ref_streams": [],
                "smooth_floor": []
            }
        },
        "delete_whitespace": {
            "name": "delete_whitespace",
            "location": 1094,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "get_sentence_statistics": {
            "name": "get_sentence_statistics",
            "location": 1101,
            "return": [],
            "arguments": {
                "hypothesis": [],
                "reference": [],
                "order": [],
                "remove_whitespace": []
            }
        },
        "get_corpus_statistics": {
            "name": "get_corpus_statistics",
            "location": 1119,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": [],
                "order": [],
                "remove_whitespace": []
            }
        },
        "_avg_precision_and_recall": {
            "name": "_avg_precision_and_recall",
            "location": 1131,
            "return": [],
            "arguments": {
                "statistics": [],
                "order": []
            }
        },
        "_chrf": {
            "name": "_chrf",
            "location": 1150,
            "return": [],
            "arguments": {
                "avg_precision": [],
                "avg_recall": [],
                "beta": []
            }
        },
        "corpus_chrf": {
            "name": "corpus_chrf",
            "location": 1158,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": [],
                "order": [],
                "beta": [],
                "remove_whitespace": []
            }
        },
        "sentence_chrf": {
            "name": "sentence_chrf",
            "location": 1178,
            "return": [],
            "arguments": {
                "hypothesis": [],
                "reference": [],
                "order": [],
                "beta": [],
                "remove_whitespace": []
            }
        },
        "main": {
            "name": "main",
            "location": 1198,
            "return": [],
            "arguments": {}
        },
        "UnicodeRegex._property_chars": {
            "name": "_property_chars",
            "location": 531,
            "return": [],
            "arguments": {
                "prefix": []
            }
        },
        "tokenize_zh.is_chinese_char": {
            "name": "is_chinese_char",
            "location": 597,
            "return": [],
            "arguments": {
                "uchar": []
            }
        }
    },
    "saml-nmt-master/sockeye_contrib/sacrebleu/setup.py": {
        "get_version": {
            "name": "get_version",
            "location": 29,
            "return": [],
            "arguments": {}
        }
    },
    "saml-nmt-master/sockeye_contrib/sacrebleu/__init__.py": {},
    "saml-nmt-master/sockeye_contrib/vistools/generate_graphs.py": {
        "_add_graph_level": {
            "name": "_add_graph_level",
            "location": 80,
            "return": [],
            "arguments": {
                "graph": [],
                "level": [],
                "parent_ids": [],
                "names": [],
                "scores": [],
                "normalized_scores": [],
                "include_pad": []
            }
        },
        "create_graph": {
            "name": "create_graph",
            "location": 99,
            "return": [],
            "arguments": {
                "predicted_ids": [],
                "parent_ids": [],
                "scores": [],
                "normalized_scores": [],
                "include_pad": []
            }
        },
        "generate": {
            "name": "generate",
            "location": 110,
            "return": [],
            "arguments": {
                "input_data": [],
                "output_dir": [],
                "include_pad": []
            }
        },
        "main": {
            "name": "main",
            "location": 141,
            "return": [],
            "arguments": {}
        }
    },
    "saml-nmt-master/sockeye_contrib/vistools/test/test_integration.py": {
        "test_beam_generation": {
            "name": "test_beam_generation",
            "location": 25,
            "return": [],
            "arguments": {
                "beams": [],
                "expected_output": [],
                "tmpdir": []
            }
        }
    },
    "saml-nmt-master/sockeye_contrib/vistools/test/__init__.py": {},
    "saml-nmt-master/test/common.py": {
        "gaussian_vector": {
            "name": "gaussian_vector",
            "location": 44,
            "return": [],
            "arguments": {
                "shape": [],
                "return_symbol": []
            }
        },
        "integer_vector": {
            "name": "integer_vector",
            "location": 55,
            "return": [],
            "arguments": {
                "shape": [],
                "max_value": [],
                "min_value": [],
                "return_symbol": []
            }
        },
        "uniform_vector": {
            "name": "uniform_vector",
            "location": 69,
            "return": [],
            "arguments": {
                "shape": [],
                "min_value": [],
                "max_value": [],
                "return_symbol": []
            }
        },
        "generate_random_sentence": {
            "name": "generate_random_sentence",
            "location": 83,
            "return": [],
            "arguments": {
                "vocab_size": [],
                "max_len": []
            }
        },
        "generate_digits_file": {
            "name": "generate_digits_file",
            "location": 101,
            "return": [],
            "arguments": {
                "source_path": [],
                "target_path": [],
                "line_count": [],
                "line_length": [],
                "sort_target": [],
                "line_count_empty": [],
                "seed": []
            }
        },
        "generate_vocab_weight_file": {
            "name": "generate_vocab_weight_file",
            "location": 124,
            "return": [],
            "arguments": {
                "file_path": []
            }
        },
        "generate_low_high_factors": {
            "name": "generate_low_high_factors",
            "location": 129,
            "return": [],
            "arguments": {
                "source_path": [],
                "output_path": []
            }
        },
        "generate_fast_align_lex": {
            "name": "generate_fast_align_lex",
            "location": 141,
            "return": [],
            "arguments": {
                "lex_path": []
            }
        },
        "tmp_digits_dataset": {
            "name": "tmp_digits_dataset",
            "location": 156,
            "return": [],
            "arguments": {
                "prefix": [],
                "train_line_count": [],
                "train_max_length": [],
                "dev_line_count": [],
                "dev_max_length": [],
                "test_line_count": [],
                "test_line_count_empty": [],
                "test_max_length": [],
                "sort_target": [],
                "seed_train": [],
                "seed_dev": [],
                "with_source_factors": []
            }
        },
        "run_train_translate": {
            "name": "run_train_translate",
            "location": 233,
            "return": [],
            "arguments": {
                "train_params": [],
                "translate_params": [],
                "translate_params_equiv": [],
                "train_source_path": [],
                "train_target_path": [],
                "dev_source_path": [],
                "dev_target_path": [],
                "test_source_path": [],
                "test_target_path": [],
                "train_source_factor_paths": [],
                "dev_source_factor_paths": [],
                "test_source_factor_paths": [],
                "use_prepared_data": [],
                "use_target_constraints": [],
                "max_seq_len": [],
                "restrict_lexicon": [],
                "work_dir": [],
                "seed": [],
                "quiet": []
            }
        }
    },
    "saml-nmt-master/test/common_image_captioning.py": {
        "generate_img_or_feat": {
            "name": "generate_img_or_feat",
            "location": 48,
            "return": [],
            "arguments": {
                "filename": [],
                "use_features": []
            }
        },
        "generate_img_text_experiment_files": {
            "name": "generate_img_text_experiment_files",
            "location": 58,
            "return": [],
            "arguments": {
                "source_list": [],
                "work_dir": [],
                "source_path": [],
                "target_path": [],
                "line_length": [],
                "use_features": [],
                "seed": []
            }
        },
        "tmp_img_captioning_dataset": {
            "name": "tmp_img_captioning_dataset",
            "location": 90,
            "return": [],
            "arguments": {
                "source_list": [],
                "prefix": [],
                "train_max_length": [],
                "dev_max_length": [],
                "test_max_length": [],
                "use_features": [],
                "seed_train": [],
                "seed_dev": []
            }
        },
        "run_train_captioning": {
            "name": "run_train_captioning",
            "location": 131,
            "return": [],
            "arguments": {
                "train_params": [],
                "translate_params": [],
                "translate_params_equiv": [],
                "train_source_path": [],
                "train_target_path": [],
                "dev_source_path": [],
                "dev_target_path": [],
                "test_source_path": [],
                "test_target_path": [],
                "max_seq_len": [],
                "work_dir": [],
                "seed": [],
                "quiet": []
            }
        },
        "run_extract_features_captioning": {
            "name": "run_extract_features_captioning",
            "location": 247,
            "return": [],
            "arguments": {
                "source_image_size": [],
                "batch_size": [],
                "extract_params": [],
                "source_files": [],
                "image_root": []
            }
        },
        "create_simple_and_save_to_disk": {
            "name": "create_simple_and_save_to_disk",
            "location": 279,
            "return": [],
            "arguments": {
                "prefix": [],
                "iteration": [],
                "source_image_size": [],
                "batch_size": []
            }
        },
        "get_2convnet_symbol": {
            "name": "get_2convnet_symbol",
            "location": 290,
            "return": [],
            "arguments": {}
        }
    },
    "saml-nmt-master/test/__init__.py": {},
    "saml-nmt-master/test/integration/test_constraints_int.py": {
        "test_constraints": {
            "name": "test_constraints",
            "location": 54,
            "return": [],
            "arguments": {
                "train_params": [],
                "beam_size": [],
                "batch_size": []
            }
        }
    },
    "saml-nmt-master/test/integration/test_seq_copy_int.py": {
        "test_seq_copy": {
            "name": "test_seq_copy",
            "location": 137,
            "return": [],
            "arguments": {
                "train_params": [],
                "translate_params": [],
                "restrict_lexicon": [],
                "use_prepared_data": [],
                "use_source_factors": []
            }
        }
    },
    "saml-nmt-master/test/integration/__init__.py": {},
    "saml-nmt-master/test/integration/image_captioning/test_extract_features.py": {
        "test_caption_random_features": {
            "name": "test_caption_random_features",
            "location": 30,
            "return": [],
            "arguments": {
                "layer": []
            }
        }
    },
    "saml-nmt-master/test/integration/image_captioning/test_image_captioning.py": {
        "test_caption_random_features": {
            "name": "test_caption_random_features",
            "location": 56,
            "return": [],
            "arguments": {
                "train_params": [],
                "translate_params": []
            }
        }
    },
    "saml-nmt-master/test/integration/image_captioning/__init__.py": {},
    "saml-nmt-master/test/system/test_seq_copy_sys.py": {
        "test_seq_copy": {
            "name": "test_seq_copy",
            "location": 120,
            "return": [],
            "arguments": {
                "name": [],
                "train_params": [],
                "translate_params": [],
                "use_prepared_data": [],
                "perplexity_thresh": [],
                "bleu_thresh": []
            }
        },
        "test_seq_sort": {
            "name": "test_seq_sort",
            "location": 227,
            "return": [],
            "arguments": {
                "name": [],
                "train_params": [],
                "translate_params": [],
                "use_prepared_data": [],
                "use_source_factor": [],
                "perplexity_thresh": [],
                "bleu_thresh": []
            }
        }
    },
    "saml-nmt-master/test/system/__init__.py": {},
    "saml-nmt-master/test/unit/test_arguments.py": {
        "test_io_args": {
            "name": "test_io_args",
            "location": 58,
            "return": [],
            "arguments": {
                "test_params": [],
                "expected_params": []
            }
        },
        "test_logging_args": {
            "name": "test_logging_args",
            "location": 65,
            "return": [],
            "arguments": {
                "test_params": [],
                "expected_params": []
            }
        },
        "test_device_args": {
            "name": "test_device_args",
            "location": 74,
            "return": [],
            "arguments": {
                "test_params": [],
                "expected_params": []
            }
        },
        "test_model_parameters": {
            "name": "test_model_parameters",
            "location": 128,
            "return": [],
            "arguments": {
                "test_params": [],
                "expected_params": []
            }
        },
        "test_training_arg": {
            "name": "test_training_arg",
            "location": 200,
            "return": [],
            "arguments": {
                "test_params": [],
                "expected_params": []
            }
        },
        "test_inference_args": {
            "name": "test_inference_args",
            "location": 232,
            "return": [],
            "arguments": {
                "test_params": [],
                "expected_params": []
            }
        },
        "test_tutorial_train_args": {
            "name": "test_tutorial_train_args",
            "location": 304,
            "return": [],
            "arguments": {
                "test_params": [],
                "expected_params": [],
                "expected_params_present": []
            }
        },
        "test_tutorial_translate_args": {
            "name": "test_tutorial_translate_args",
            "location": 327,
            "return": [],
            "arguments": {
                "test_params": [],
                "expected_params": [],
                "expected_params_present": []
            }
        },
        "test_tutorial_averaging_args": {
            "name": "test_tutorial_averaging_args",
            "location": 338,
            "return": [],
            "arguments": {
                "test_params": [],
                "expected_params": [],
                "expected_params_present": []
            }
        },
        "test_tutorial_prepare_data_cli_args": {
            "name": "test_tutorial_prepare_data_cli_args",
            "location": 363,
            "return": [],
            "arguments": {
                "test_params": [],
                "expected_params": []
            }
        },
        "test_prepare_data_cli_args": {
            "name": "test_prepare_data_cli_args",
            "location": 387,
            "return": [],
            "arguments": {
                "test_params": [],
                "expected_params": []
            }
        },
        "_create_argument_values_that_must_be_files_or_dirs": {
            "name": "_create_argument_values_that_must_be_files_or_dirs",
            "location": 391,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "_delete_argument_values_that_must_be_files_or_dirs": {
            "name": "_delete_argument_values_that_must_be_files_or_dirs",
            "location": 418,
            "return": [],
            "arguments": {
                "to_unlink": []
            }
        },
        "_test_args": {
            "name": "_test_args",
            "location": 429,
            "return": [],
            "arguments": {
                "test_params": [],
                "expected_params": [],
                "args_func": []
            }
        },
        "_test_args_subset": {
            "name": "_test_args_subset",
            "location": 440,
            "return": [],
            "arguments": {
                "test_params": [],
                "expected_params": [],
                "expected_params_present": [],
                "args_func": []
            }
        },
        "test_config_file": {
            "name": "test_config_file",
            "location": 469,
            "return": [],
            "arguments": {
                "plain_command_line": [],
                "config_command_line": [],
                "config_contents": []
            }
        },
        "test_config_file_required": {
            "name": "test_config_file_required",
            "location": 500,
            "return": [],
            "arguments": {
                "config_command_line": [],
                "config_contents": []
            }
        },
        "_create_argument_values_that_must_be_files_or_dirs.grouper": {
            "name": "grouper",
            "location": 396,
            "return": [],
            "arguments": {
                "iterable": [],
                "n": [],
                "fillvalue": []
            }
        }
    },
    "saml-nmt-master/test/unit/test_attention.py": {
        "test_att_bilinear": {
            "name": "test_att_bilinear",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_att_dot": {
            "name": "test_att_dot",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_att_dot_scaled": {
            "name": "test_att_dot_scaled",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "test_att_mh_dot": {
            "name": "test_att_mh_dot",
            "location": 84,
            "return": [],
            "arguments": {}
        },
        "test_att_fixed": {
            "name": "test_att_fixed",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "test_att_loc": {
            "name": "test_att_loc",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "test_att_mlp": {
            "name": "test_att_mlp",
            "location": 134,
            "return": [],
            "arguments": {}
        },
        "test_att_cov": {
            "name": "test_att_cov",
            "location": 153,
            "return": [],
            "arguments": {}
        },
        "test_attention": {
            "name": "test_attention",
            "location": 175,
            "return": [],
            "arguments": {
                "attention_type": [],
                "batch_size": [],
                "encoder_num_hidden": [],
                "decoder_num_hidden": []
            }
        },
        "test_coverage_attention": {
            "name": "test_coverage_attention",
            "location": 223,
            "return": [],
            "arguments": {
                "attention_coverage_type": [],
                "attention_coverage_num_hidden": [],
                "batch_size": [],
                "encoder_num_hidden": [],
                "decoder_num_hidden": []
            }
        },
        "test_last_state_attention": {
            "name": "test_last_state_attention",
            "location": 278,
            "return": [],
            "arguments": {
                "batch_size": [],
                "encoder_num_hidden": []
            }
        },
        "test_get_context_and_attention_probs": {
            "name": "test_get_context_and_attention_probs",
            "location": 321,
            "return": [],
            "arguments": {}
        }
    },
    "saml-nmt-master/test/unit/test_average.py": {
        "test_strategy_best": {
            "name": "test_strategy_best",
            "location": 26,
            "return": [],
            "arguments": {
                "test_points": [],
                "expected_top_n": [],
                "size": [],
                "maximize": []
            }
        },
        "test_strategy_last": {
            "name": "test_strategy_last",
            "location": 41,
            "return": [],
            "arguments": {
                "test_points": [],
                "expected_top_n": [],
                "size": [],
                "maximize": []
            }
        },
        "test_strategy_lifespan": {
            "name": "test_strategy_lifespan",
            "location": 57,
            "return": [],
            "arguments": {
                "test_points": [],
                "expected_top_n": [],
                "size": [],
                "maximize": []
            }
        }
    },
    "saml-nmt-master/test/unit/test_bleu.py": {
        "test_bleu": {
            "name": "test_bleu",
            "location": 59,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": [],
                "expected_bleu": []
            }
        },
        "test_effective_order": {
            "name": "test_effective_order",
            "location": 65,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": [],
                "expected_bleu": []
            }
        },
        "test_statistics": {
            "name": "test_statistics",
            "location": 71,
            "return": [],
            "arguments": {
                "hypothesis": [],
                "reference": [],
                "expected_stat": []
            }
        },
        "test_scoring": {
            "name": "test_scoring",
            "location": 78,
            "return": [],
            "arguments": {
                "statistics": [],
                "expected_score": []
            }
        },
        "test_offset": {
            "name": "test_offset",
            "location": 85,
            "return": [],
            "arguments": {
                "hypothesis": [],
                "reference": [],
                "expected_with_offset": [],
                "expected_without_offset": []
            }
        },
        "test_degenerate_statistics": {
            "name": "test_degenerate_statistics",
            "location": 94,
            "return": [],
            "arguments": {
                "statistics": [],
                "offset": [],
                "expected_score": []
            }
        },
        "test_degenerate_uneven": {
            "name": "test_degenerate_uneven",
            "location": 101,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": []
            }
        }
    },
    "saml-nmt-master/test/unit/test_chrf.py": {
        "test_chrf": {
            "name": "test_chrf",
            "location": 42,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": [],
                "expected_score": []
            }
        },
        "test_chrf_keep_whitespace": {
            "name": "test_chrf_keep_whitespace",
            "location": 48,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": [],
                "expected_score": []
            }
        }
    },
    "saml-nmt-master/test/unit/test_config.py": {
        "test_base_freeze": {
            "name": "test_base_freeze",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "test_freeze": {
            "name": "test_freeze",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_config_repr": {
            "name": "test_config_repr",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_eq": {
            "name": "test_eq",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "test_no_self_attribute": {
            "name": "test_no_self_attribute",
            "location": 85,
            "return": [],
            "arguments": {}
        },
        "test_serialization": {
            "name": "test_serialization",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "test_copy": {
            "name": "test_copy",
            "location": 114,
            "return": [],
            "arguments": {}
        },
        "test_missing_attributes_filled_with_default": {
            "name": "test_missing_attributes_filled_with_default",
            "location": 136,
            "return": [],
            "arguments": {}
        },
        "ConfigTest.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "param": [],
                "config": []
            }
        },
        "ConfigWithMissingAttributes.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "existing_attribute": [],
                "new_attribute": []
            }
        }
    },
    "saml-nmt-master/test/unit/test_constraints.py": {
        "mock_translator": {
            "name": "mock_translator",
            "location": 30,
            "return": [],
            "arguments": {
                "num_source_factors": []
            }
        },
        "test_constraints_bank_allocation": {
            "name": "test_constraints_bank_allocation",
            "location": 66,
            "return": [],
            "arguments": {
                "num_constraints": [],
                "beam_size": [],
                "counts": [],
                "expected_allocation": []
            }
        },
        "test_constraints_repr": {
            "name": "test_constraints_repr",
            "location": 88,
            "return": [],
            "arguments": {
                "raw_constraints": [],
                "internal_constraints": [],
                "internal_is_sequence": []
            }
        },
        "test_constraints_logic": {
            "name": "test_constraints_logic",
            "location": 112,
            "return": [],
            "arguments": {
                "raw_constraints": [],
                "met": [],
                "unmet": []
            }
        },
        "test_constraints_allowed": {
            "name": "test_constraints_allowed",
            "location": 150,
            "return": [],
            "arguments": {
                "raw_constraints": [],
                "met": [],
                "allowed": []
            }
        },
        "test_constraints_init_batch": {
            "name": "test_constraints_init_batch",
            "location": 176,
            "return": [],
            "arguments": {
                "raw_constraint_lists": []
            }
        },
        "test_avoid_list_trie": {
            "name": "test_avoid_list_trie",
            "location": 204,
            "return": [],
            "arguments": {
                "raw_phrase_list": []
            }
        },
        "test_avoid_list_state": {
            "name": "test_avoid_list_state",
            "location": 230,
            "return": [],
            "arguments": {
                "raw_phrase_list": []
            }
        },
        "test_avoid_list_batch": {
            "name": "test_avoid_list_batch",
            "location": 274,
            "return": [],
            "arguments": {
                "global_raw_phrase_list": [],
                "raw_phrase_list": [],
                "batch_size": [],
                "beam_size": [],
                "prefix": [],
                "expected_avoid": []
            }
        }
    },
    "saml-nmt-master/test/unit/test_coverage.py": {
        "setup_module": {
            "name": "setup_module",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "test_activation_coverage": {
            "name": "test_activation_coverage",
            "location": 30,
            "return": [],
            "arguments": {
                "act_type": []
            }
        },
        "test_gru_coverage": {
            "name": "test_gru_coverage",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "_test_activation_coverage": {
            "name": "_test_activation_coverage",
            "location": 44,
            "return": [],
            "arguments": {
                "act_type": []
            }
        },
        "_test_gru_coverage": {
            "name": "_test_gru_coverage",
            "location": 91,
            "return": [],
            "arguments": {}
        },
        "_mask_with_one": {
            "name": "_mask_with_one",
            "location": 135,
            "return": [],
            "arguments": {
                "data": [],
                "axis": [],
                "use_sequence_length": [],
                "sequence_length": []
            }
        },
        "_patch_sequence_mask": {
            "name": "_patch_sequence_mask",
            "location": 140,
            "return": [],
            "arguments": {
                "test": []
            }
        }
    },
    "saml-nmt-master/test/unit/test_data_io.py": {
        "test_define_buckets": {
            "name": "test_define_buckets",
            "location": 40,
            "return": [],
            "arguments": {
                "max_seq_len": [],
                "step": [],
                "expected_buckets": []
            }
        },
        "test_define_parallel_buckets": {
            "name": "test_define_parallel_buckets",
            "location": 64,
            "return": [],
            "arguments": {
                "max_seq_len_source": [],
                "max_seq_len_target": [],
                "bucket_width": [],
                "length_ratio": [],
                "expected_buckets": []
            }
        },
        "test_get_bucket": {
            "name": "test_get_bucket",
            "location": 81,
            "return": [],
            "arguments": {
                "buckets": [],
                "length": [],
                "expected_bucket": []
            }
        },
        "test_tokens2ids": {
            "name": "test_tokens2ids",
            "location": 91,
            "return": [],
            "arguments": {
                "tokens": [],
                "vocab": [],
                "expected_ids": []
            }
        },
        "test_strids2ids": {
            "name": "test_strids2ids",
            "location": 97,
            "return": [],
            "arguments": {
                "tokens": [],
                "expected_ids": []
            }
        },
        "test_ids2strids": {
            "name": "test_ids2strids",
            "location": 103,
            "return": [],
            "arguments": {
                "ids": [],
                "expected_string": []
            }
        },
        "test_sequence_reader": {
            "name": "test_sequence_reader",
            "location": 115,
            "return": [],
            "arguments": {
                "sequences": [],
                "use_vocab": [],
                "add_bos": [],
                "add_eos": []
            }
        },
        "test_nonparallel_iter": {
            "name": "test_nonparallel_iter",
            "location": 160,
            "return": [],
            "arguments": {
                "source_iterables": [],
                "target_iterable": []
            }
        },
        "test_nontoken_parallel_iter": {
            "name": "test_nontoken_parallel_iter",
            "location": 173,
            "return": [],
            "arguments": {
                "source_iterables": [],
                "target_iterable": []
            }
        },
        "test_parallel_iter": {
            "name": "test_parallel_iter",
            "location": 207,
            "return": [],
            "arguments": {
                "source_iterables": [],
                "target_iterable": [],
                "expected": []
            }
        },
        "test_sample_based_define_bucket_batch_sizes": {
            "name": "test_sample_based_define_bucket_batch_sizes",
            "location": 211,
            "return": [],
            "arguments": {}
        },
        "test_word_based_define_bucket_batch_sizes": {
            "name": "test_word_based_define_bucket_batch_sizes",
            "location": 227,
            "return": [],
            "arguments": {
                "length_ratio": []
            }
        },
        "_get_random_bucketed_data": {
            "name": "_get_random_bucketed_data",
            "location": 255,
            "return": [],
            "arguments": {
                "buckets": [],
                "min_count": [],
                "max_count": [],
                "bucket_counts": []
            }
        },
        "test_parallel_data_set": {
            "name": "test_parallel_data_set",
            "location": 281,
            "return": [],
            "arguments": {}
        },
        "test_parallel_data_set_fill_up": {
            "name": "test_parallel_data_set_fill_up",
            "location": 300,
            "return": [],
            "arguments": {}
        },
        "test_get_permutations": {
            "name": "test_get_permutations",
            "location": 321,
            "return": [],
            "arguments": {}
        },
        "test_parallel_data_set_permute": {
            "name": "test_parallel_data_set_permute",
            "location": 343,
            "return": [],
            "arguments": {}
        },
        "test_get_batch_indices": {
            "name": "test_get_batch_indices",
            "location": 371,
            "return": [],
            "arguments": {}
        },
        "test_get_default_bucket_key": {
            "name": "test_get_default_bucket_key",
            "location": 403,
            "return": [],
            "arguments": {
                "buckets": [],
                "expected_default_bucket_key": []
            }
        },
        "test_get_parallel_bucket": {
            "name": "test_get_parallel_bucket",
            "location": 419,
            "return": [],
            "arguments": {
                "buckets": [],
                "source_length": [],
                "target_length": [],
                "expected_bucket_index": [],
                "expected_bucket": []
            }
        },
        "test_calculate_length_statistics": {
            "name": "test_calculate_length_statistics",
            "location": 432,
            "return": [],
            "arguments": {
                "sources": [],
                "target": [],
                "expected_num_sents": [],
                "expected_mean": [],
                "expected_std": []
            }
        },
        "test_non_parallel_calculate_length_statistics": {
            "name": "test_non_parallel_calculate_length_statistics",
            "location": 446,
            "return": [],
            "arguments": {
                "sources": [],
                "target": []
            }
        },
        "test_get_training_data_iters": {
            "name": "test_get_training_data_iters",
            "location": 451,
            "return": [],
            "arguments": {}
        },
        "_data_batches_equal": {
            "name": "_data_batches_equal",
            "location": 533,
            "return": [],
            "arguments": {
                "db1": [],
                "db2": []
            }
        },
        "test_parallel_sample_iter": {
            "name": "test_parallel_sample_iter",
            "location": 541,
            "return": [],
            "arguments": {}
        },
        "test_sharded_parallel_sample_iter": {
            "name": "test_sharded_parallel_sample_iter",
            "location": 599,
            "return": [],
            "arguments": {}
        },
        "test_sharded_parallel_sample_iter_num_batches": {
            "name": "test_sharded_parallel_sample_iter_num_batches",
            "location": 669,
            "return": [],
            "arguments": {}
        },
        "test_sharded_and_parallel_iter_same_num_batches": {
            "name": "test_sharded_and_parallel_iter_same_num_batches",
            "location": 704,
            "return": [],
            "arguments": {}
        },
        "test_parallel_data_set.check_equal": {
            "name": "check_equal",
            "location": 285,
            "return": [],
            "arguments": {
                "arrays1": [],
                "arrays2": []
            }
        }
    },
    "saml-nmt-master/test/unit/test_decoder.py": {
        "test_get_decoder": {
            "name": "test_get_decoder",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_step": {
            "name": "test_step",
            "location": 51,
            "return": [],
            "arguments": {
                "cell_type": [],
                "context_gating": [],
                "num_embed": [],
                "encoder_num_hidden": [],
                "decoder_num_hidden": []
            }
        }
    },
    "saml-nmt-master/test/unit/test_encoder.py": {
        "test_get_recurrent_encoder_no_conv_config": {
            "name": "test_get_recurrent_encoder_no_conv_config",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_get_recurrent_encoder": {
            "name": "test_get_recurrent_encoder",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "test_get_transformer_encoder": {
            "name": "test_get_transformer_encoder",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "test_get_convolutional_encoder": {
            "name": "test_get_convolutional_encoder",
            "location": 127,
            "return": [],
            "arguments": {}
        },
        "test_get_empty_encoder": {
            "name": "test_get_empty_encoder",
            "location": 147,
            "return": [],
            "arguments": {}
        },
        "test_convolutional_embedding_encoder": {
            "name": "test_convolutional_embedding_encoder",
            "location": 184,
            "return": [],
            "arguments": {
                "config": [],
                "out_data_shape": [],
                "out_data_length": [],
                "out_seq_len": []
            }
        },
        "test_sincos_positional_embeddings": {
            "name": "test_sincos_positional_embeddings",
            "location": 207,
            "return": [],
            "arguments": {}
        }
    },
    "saml-nmt-master/test/unit/test_inference.py": {
        "mock_translator": {
            "name": "mock_translator",
            "location": 32,
            "return": [],
            "arguments": {
                "batch_size": [],
                "beam_size": [],
                "beam_prune": [],
                "num_source_factors": []
            }
        },
        "test_concat_translations": {
            "name": "test_concat_translations",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "test_length_penalty_default": {
            "name": "test_length_penalty_default",
            "location": 98,
            "return": [],
            "arguments": {}
        },
        "test_length_penalty": {
            "name": "test_length_penalty",
            "location": 109,
            "return": [],
            "arguments": {}
        },
        "test_length_penalty_int_input": {
            "name": "test_length_penalty_int_input",
            "location": 120,
            "return": [],
            "arguments": {}
        },
        "test_translator_input": {
            "name": "test_translator_input",
            "location": 135,
            "return": [],
            "arguments": {
                "sentence_id": [],
                "sentence": [],
                "factors": [],
                "chunk_size": []
            }
        },
        "test_get_max_input_output_length": {
            "name": "test_get_max_input_output_length",
            "location": 175,
            "return": [],
            "arguments": {
                "supported_max_seq_len_source": [],
                "supported_max_seq_len_target": [],
                "training_max_seq_len_source": [],
                "forced_max_input_len": [],
                "length_ratio_mean": [],
                "length_ratio_std": [],
                "expected_max_input_len": [],
                "expected_max_output_len": []
            }
        },
        "test_make_input_from_factored_string": {
            "name": "test_make_input_from_factored_string",
            "location": 220,
            "return": [],
            "arguments": {
                "sentence": [],
                "num_expected_factors": [],
                "delimiter": [],
                "expected_tokens": [],
                "expected_factors": []
            }
        },
        "test_factor_parsing": {
            "name": "test_factor_parsing",
            "location": 252,
            "return": [],
            "arguments": {
                "sentence": [],
                "num_expected_factors": [],
                "delimiter": []
            }
        },
        "test_make_input_whitespace_delimiter": {
            "name": "test_make_input_whitespace_delimiter",
            "location": 267,
            "return": [],
            "arguments": {
                "delimiter": []
            }
        },
        "test_make_input_from_valid_json_string": {
            "name": "test_make_input_from_valid_json_string",
            "location": 287,
            "return": [],
            "arguments": {
                "text": [],
                "factors": []
            }
        },
        "test_failed_make_input_from_valid_json_string": {
            "name": "test_failed_make_input_from_valid_json_string",
            "location": 301,
            "return": [],
            "arguments": {
                "text": [],
                "text_key": [],
                "factors": [],
                "factors_key": []
            }
        },
        "test_make_input_from_multiple_strings": {
            "name": "test_make_input_from_multiple_strings",
            "location": 312,
            "return": [],
            "arguments": {
                "strings": []
            }
        },
        "test_beam_prune": {
            "name": "test_beam_prune",
            "location": 340,
            "return": [],
            "arguments": {
                "batch": [],
                "beam": [],
                "prune": [],
                "scores": [],
                "finished": [],
                "expected_inactive": []
            }
        },
        "test_sort_by_index": {
            "name": "test_sort_by_index",
            "location": 357,
            "return": [],
            "arguments": {}
        },
        "test_topk_func": {
            "name": "test_topk_func",
            "location": 383,
            "return": [],
            "arguments": {
                "batch_size": [],
                "beam_size": [],
                "target_vocab_size": []
            }
        },
        "test_get_best_word_indeces_for_kth_hypotheses": {
            "name": "test_get_best_word_indeces_for_kth_hypotheses",
            "location": 418,
            "return": [],
            "arguments": {}
        },
        "test_get_best_from_beam": {
            "name": "test_get_best_from_beam",
            "location": 450,
            "return": [],
            "arguments": {
                "raw_constraints": [],
                "beam_histories": [],
                "expected_best_ids": [],
                "expected_best_indices": []
            }
        },
        "mock_translator.mock_model": {
            "name": "mock_model",
            "location": 55,
            "return": [],
            "arguments": {}
        }
    },
    "saml-nmt-master/test/unit/test_init_embedding.py": {
        "test_init_weight": {
            "name": "test_init_weight",
            "location": 29,
            "return": [],
            "arguments": {
                "embed": [],
                "vocab_in": [],
                "vocab_out": [],
                "expected_embed_init": []
            }
        }
    },
    "saml-nmt-master/test/unit/test_layers.py": {
        "test_layer_normalization": {
            "name": "test_layer_normalization",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_lhuc": {
            "name": "test_lhuc",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_weight_normalization": {
            "name": "test_weight_normalization",
            "location": 62,
            "return": [],
            "arguments": {}
        }
    },
    "saml-nmt-master/test/unit/test_lexicon.py": {
        "test_topk_lexicon": {
            "name": "test_topk_lexicon",
            "location": 23,
            "return": [],
            "arguments": {}
        }
    },
    "saml-nmt-master/test/unit/test_loss.py": {
        "test_cross_entropy_loss": {
            "name": "test_cross_entropy_loss",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "test_smoothed_cross_entropy_loss": {
            "name": "test_smoothed_cross_entropy_loss",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "test_cross_entropy_metric": {
            "name": "test_cross_entropy_metric",
            "location": 133,
            "return": [],
            "arguments": {
                "preds": [],
                "labels": [],
                "normalization_type": [],
                "label_smoothing": [],
                "expected_value": []
            }
        },
        "test_cross_entropy_internal": {
            "name": "test_cross_entropy_internal",
            "location": 145,
            "return": [],
            "arguments": {}
        }
    },
    "saml-nmt-master/test/unit/test_lr_scheduler.py": {
        "test_lr_scheduler": {
            "name": "test_lr_scheduler",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_fixed_step_lr_scheduler": {
            "name": "test_fixed_step_lr_scheduler",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "test_get_lr_scheduler": {
            "name": "test_get_lr_scheduler",
            "location": 58,
            "return": [],
            "arguments": {
                "scheduler_type": [],
                "reduce_factor": [],
                "expected_instance": []
            }
        },
        "test_get_lr_scheduler_no_reduce": {
            "name": "test_get_lr_scheduler_no_reduce",
            "location": 67,
            "return": [],
            "arguments": {}
        }
    },
    "saml-nmt-master/test/unit/test_operator.py": {
        "test_auto_regressive_bias_op": {
            "name": "test_auto_regressive_bias_op",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_auto_regressive_bias_op_float16": {
            "name": "test_auto_regressive_bias_op_float16",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "test_auto_regressive_bias_sym": {
            "name": "test_auto_regressive_bias_sym",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "test_auto_regressive_bias_sym_float16": {
            "name": "test_auto_regressive_bias_sym_float16",
            "location": 53,
            "return": [],
            "arguments": {}
        }
    },
    "saml-nmt-master/test/unit/test_optimizers.py": {
        "test_optimizer": {
            "name": "test_optimizer",
            "location": 29,
            "return": [],
            "arguments": {
                "optimizer": [],
                "optimizer_params": []
            }
        }
    },
    "saml-nmt-master/test/unit/test_output_handler.py": {
        "test_stream_output_handler": {
            "name": "test_stream_output_handler",
            "location": 82,
            "return": [],
            "arguments": {
                "handler": [],
                "translation_input": [],
                "translation_output": [],
                "translation_walltime": [],
                "expected_string": []
            }
        }
    },
    "saml-nmt-master/test/unit/test_params.py": {
        "test_cleanup_param_files": {
            "name": "test_cleanup_param_files",
            "location": 24,
            "return": [],
            "arguments": {}
        }
    },
    "saml-nmt-master/test/unit/test_reranking.py": {
        "test_rerank_hypotheses": {
            "name": "test_rerank_hypotheses",
            "location": 39,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "reference": [],
                "expected_output": [],
                "metric": []
            }
        },
        "test_rerank_return_score": {
            "name": "test_rerank_return_score",
            "location": 54,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "reference": [],
                "expected_scores": []
            }
        },
        "test_rerank_top1": {
            "name": "test_rerank_top1",
            "location": 70,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "reference": [],
                "expected_best": []
            }
        },
        "test_rerank_top1_score": {
            "name": "test_rerank_top1_score",
            "location": 88,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "reference": [],
                "expected_best": [],
                "expected_score": []
            }
        }
    },
    "saml-nmt-master/test/unit/test_rnn.py": {
        "test_ln_cell": {
            "name": "test_ln_cell",
            "location": 46,
            "return": [],
            "arguments": {
                "cell": [],
                "expected_param_keys": []
            }
        },
        "test_get_stacked_rnn": {
            "name": "test_get_stacked_rnn",
            "location": 77,
            "return": [],
            "arguments": {
                "config": [],
                "expected_cell": []
            }
        },
        "test_cell_parallel_input": {
            "name": "test_cell_parallel_input",
            "location": 91,
            "return": [],
            "arguments": {}
        },
        "test_residual_cell_parallel_input": {
            "name": "test_residual_cell_parallel_input",
            "location": 135,
            "return": [],
            "arguments": {}
        },
        "test_sequential_rnn_cell_parallel_input": {
            "name": "test_sequential_rnn_cell_parallel_input",
            "location": 182,
            "return": [],
            "arguments": {}
        }
    },
    "saml-nmt-master/test/unit/test_rouge.py": {
        "test_rouge_1": {
            "name": "test_rouge_1",
            "location": 25,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": [],
                "rouge1_score": [],
                "rouge2_score": [],
                "rougel_score": []
            }
        },
        "test_rouge_2": {
            "name": "test_rouge_2",
            "location": 30,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": [],
                "rouge1_score": [],
                "rouge2_score": [],
                "rougel_score": []
            }
        },
        "test_rouge_l": {
            "name": "test_rouge_l",
            "location": 35,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": [],
                "rouge1_score": [],
                "rouge2_score": [],
                "rougel_score": []
            }
        }
    },
    "saml-nmt-master/test/unit/test_translate.py": {
        "mock_open": {
            "name": "mock_open",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_translate_by_file": {
            "name": "test_translate_by_file",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "test_translate_by_stdin_chunk2": {
            "name": "test_translate_by_stdin_chunk2",
            "location": 56,
            "return": [],
            "arguments": {}
        }
    },
    "saml-nmt-master/test/unit/test_utils.py": {
        "test_chunks": {
            "name": "test_chunks",
            "location": 36,
            "return": [],
            "arguments": {
                "some_list": [],
                "expected": []
            }
        },
        "test_get_alignments": {
            "name": "test_get_alignments",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_expand_requested_device_ids": {
            "name": "test_expand_requested_device_ids",
            "location": 62,
            "return": [],
            "arguments": {
                "requested_device_ids": [],
                "num_gpus_available": [],
                "expected": []
            }
        },
        "test_aquire_gpus": {
            "name": "test_aquire_gpus",
            "location": 67,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "requested_device_ids": [],
                "num_gpus_available": [],
                "expected": []
            }
        },
        "test_expand_requested_device_ids_exception": {
            "name": "test_expand_requested_device_ids_exception",
            "location": 88,
            "return": [],
            "arguments": {
                "requested_device_ids": [],
                "num_gpus_available": []
            }
        },
        "test_aquire_gpus_exception": {
            "name": "test_aquire_gpus_exception",
            "location": 94,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "requested_device_ids": [],
                "num_gpus_available": []
            }
        },
        "test_aquire_gpus_1_locked": {
            "name": "test_aquire_gpus_1_locked",
            "location": 107,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "requested_device_ids": [],
                "num_gpus_available": [],
                "expected": []
            }
        },
        "test_acquire_gpus_exception_propagation": {
            "name": "test_acquire_gpus_exception_propagation",
            "location": 115,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_gpu_file_lock_cleanup": {
            "name": "test_gpu_file_lock_cleanup",
            "location": 126,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_gpu_file_lock_exception_propagation": {
            "name": "test_gpu_file_lock_exception_propagation",
            "location": 138,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_gpu_file_lock_locking": {
            "name": "test_gpu_file_lock_locking",
            "location": 151,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_gpu_file_lock_permission_exception": {
            "name": "test_gpu_file_lock_permission_exception",
            "location": 162,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_check_condition_true": {
            "name": "test_check_condition_true",
            "location": 174,
            "return": [],
            "arguments": {}
        },
        "test_check_condition_false": {
            "name": "test_check_condition_false",
            "location": 178,
            "return": [],
            "arguments": {}
        },
        "test_parse_version": {
            "name": "test_parse_version",
            "location": 186,
            "return": [],
            "arguments": {
                "version_string": [],
                "expected_version": []
            }
        },
        "test_check_version_disregards_minor": {
            "name": "test_check_version_disregards_minor",
            "location": 190,
            "return": [],
            "arguments": {}
        },
        "_get_later_major_version": {
            "name": "_get_later_major_version",
            "location": 196,
            "return": [],
            "arguments": {}
        },
        "test_check_version_checks_major": {
            "name": "test_check_version_checks_major",
            "location": 201,
            "return": [],
            "arguments": {}
        },
        "test_version_matches_changelog": {
            "name": "test_version_matches_changelog",
            "location": 208,
            "return": [],
            "arguments": {}
        },
        "test_online_mean_and_variance": {
            "name": "test_online_mean_and_variance",
            "location": 223,
            "return": [],
            "arguments": {
                "samples": [],
                "expected_mean": [],
                "expected_variance": []
            }
        },
        "test_online_mean_and_variance_nan": {
            "name": "test_online_mean_and_variance_nan",
            "location": 237,
            "return": [],
            "arguments": {
                "samples": [],
                "expected_mean": []
            }
        },
        "test_get_tokens": {
            "name": "test_get_tokens",
            "location": 251,
            "return": [],
            "arguments": {
                "line": [],
                "expected_tokens": []
            }
        },
        "test_average_arrays": {
            "name": "test_average_arrays",
            "location": 256,
            "return": [],
            "arguments": {}
        },
        "test_save_and_load_params": {
            "name": "test_save_and_load_params",
            "location": 274,
            "return": [],
            "arguments": {}
        },
        "test_print_value": {
            "name": "test_print_value",
            "location": 293,
            "return": [],
            "arguments": {}
        },
        "test_metric_value_is_better": {
            "name": "test_metric_value_is_better",
            "location": 339,
            "return": [],
            "arguments": {
                "new": [],
                "old": [],
                "metric": [],
                "result": []
            }
        },
        "test_split": {
            "name": "test_split",
            "location": 344,
            "return": [],
            "arguments": {
                "num_factors": []
            }
        },
        "test_get_num_gpus": {
            "name": "test_get_num_gpus",
            "location": 354,
            "return": [],
            "arguments": {}
        },
        "_touch_file": {
            "name": "_touch_file",
            "location": 358,
            "return": [],
            "arguments": {
                "fname": [],
                "compressed": [],
                "empty": []
            }
        },
        "test_is_gzip_file": {
            "name": "test_is_gzip_file",
            "location": 370,
            "return": [],
            "arguments": {}
        },
        "test_smart_open_without_suffix": {
            "name": "test_smart_open_without_suffix",
            "location": 379,
            "return": [],
            "arguments": {}
        },
        "test_compute_lengths": {
            "name": "test_compute_lengths",
            "location": 393,
            "return": [],
            "arguments": {
                "data": [],
                "expected_lengths": []
            }
        }
    },
    "saml-nmt-master/test/unit/test_vocab.py": {
        "test_build_vocab": {
            "name": "test_build_vocab",
            "location": 42,
            "return": [],
            "arguments": {
                "data": [],
                "size": [],
                "min_count": [],
                "expected": []
            }
        },
        "test_padded_build_vocab": {
            "name": "test_padded_build_vocab",
            "location": 49,
            "return": [],
            "arguments": {
                "num_types": [],
                "pad_to_multiple_of": [],
                "expected_vocab_size": []
            }
        },
        "test_constants_in_vocab": {
            "name": "test_constants_in_vocab",
            "location": 71,
            "return": [],
            "arguments": {
                "data": [],
                "size": [],
                "min_count": [],
                "constants": []
            }
        },
        "test_get_ordered_tokens_from_vocab": {
            "name": "test_get_ordered_tokens_from_vocab",
            "location": 79,
            "return": [],
            "arguments": {
                "vocab": [],
                "expected_output": []
            }
        }
    },
    "saml-nmt-master/test/unit/__init__.py": {},
    "saml-nmt-master/test/unit/image_captioning/test_arguments.py": {
        "test_image_extract_features_cli_args": {
            "name": "test_image_extract_features_cli_args",
            "location": 46,
            "return": [],
            "arguments": {
                "test_params": [],
                "expected_params": []
            }
        },
        "test_image_source_root_args": {
            "name": "test_image_source_root_args",
            "location": 54,
            "return": [],
            "arguments": {
                "test_params": [],
                "expected_params": []
            }
        },
        "test_image_validation_data_params": {
            "name": "test_image_validation_data_params",
            "location": 66,
            "return": [],
            "arguments": {
                "test_params": [],
                "expected_params": []
            }
        },
        "test_preextracted_features_args": {
            "name": "test_preextracted_features_args",
            "location": 74,
            "return": [],
            "arguments": {
                "test_params": [],
                "expected_params": []
            }
        },
        "test_add_image_train_cli_args": {
            "name": "test_add_image_train_cli_args",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "test_add_image_caption_cli_args": {
            "name": "test_add_image_caption_cli_args",
            "location": 85,
            "return": [],
            "arguments": {}
        }
    },
    "saml-nmt-master/test/unit/image_captioning/test_data_io.py": {
        "test_raw_list_text_dset_loader": {
            "name": "test_raw_list_text_dset_loader",
            "location": 36,
            "return": [],
            "arguments": {
                "source_list": [],
                "target_sentences": [],
                "num_samples_per_bucket": [],
                "expected_source_0": [],
                "expected_target_0": [],
                "expected_label_0": []
            }
        },
        "test_image_text_sample_iter": {
            "name": "test_image_text_sample_iter",
            "location": 62,
            "return": [],
            "arguments": {
                "source_list": [],
                "target_sentences": [],
                "num_samples_per_bucket": []
            }
        },
        "test_get_training_feature_text_data_iters": {
            "name": "test_get_training_feature_text_data_iters",
            "location": 113,
            "return": [],
            "arguments": {}
        },
        "test_get_training_image_text_data_iters": {
            "name": "test_get_training_image_text_data_iters",
            "location": 196,
            "return": [],
            "arguments": {}
        }
    },
    "saml-nmt-master/test/unit/image_captioning/test_encoder.py": {
        "test_image_loaded_cnn_encoder": {
            "name": "test_image_loaded_cnn_encoder",
            "location": 25,
            "return": [],
            "arguments": {}
        }
    },
    "saml-nmt-master/test/unit/image_captioning/test_utils.py": {
        "test_copy_mx_model_to": {
            "name": "test_copy_mx_model_to",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "test_crop_resize_image": {
            "name": "test_crop_resize_image",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_load_preprocess_images": {
            "name": "test_load_preprocess_images",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "test_load_features": {
            "name": "test_load_features",
            "location": 70,
            "return": [],
            "arguments": {}
        },
        "test_save_features": {
            "name": "test_save_features",
            "location": 88,
            "return": [],
            "arguments": {}
        }
    }
}
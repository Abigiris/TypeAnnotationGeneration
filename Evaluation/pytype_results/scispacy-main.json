{
    "scispacy-main/setup.py": {},
    "scispacy-main/evaluation/sentence_splitting_evaluation.py": {
        "evaluate_sentence_splitting": {
            "name": "evaluate_sentence_splitting",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "model_path": [],
                "data_directory": [],
                "rule_segmenter": [],
                "custom_tokenizer": [],
                "citation_data_path": []
            }
        }
    },
    "scispacy-main/scispacy/abbreviation.py": {
        "find_abbreviation": {
            "name": "find_abbreviation",
            "location": 8,
            "return": [
                "Tuple[(_T1, Any)]"
            ],
            "arguments": {
                "long_form_candidate": [],
                "short_form_candidate": [
                    "_T1@@"
                ]
            }
        },
        "filter_matches": {
            "name": "filter_matches",
            "location": 85,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "matcher_output": [],
                "doc": []
            }
        },
        "short_form_filter": {
            "name": "short_form_filter",
            "location": 121,
            "return": [
                "bool"
            ],
            "arguments": {
                "span": []
            }
        },
        "AbbreviationDetector.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "nlp": [],
                "name": [],
                "make_serializable": []
            }
        },
        "AbbreviationDetector.find": {
            "name": "find",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "span": [],
                "doc": []
            }
        },
        "AbbreviationDetector.__call__": {
            "name": "__call__",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "doc": []
            }
        },
        "AbbreviationDetector.find_matches_for": {
            "name": "find_matches_for",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "filtered": [],
                "doc": []
            }
        },
        "AbbreviationDetector.make_short_form_serializable": {
            "name": "make_short_form_serializable",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "abbreviation": []
            }
        }
    },
    "scispacy-main/scispacy/base_project_code.py": {
        "iter_sample": {
            "name": "iter_sample",
            "location": 15,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "iterable": [],
                "sample_percent": []
            }
        },
        "replace_tokenizer_callback": {
            "name": "replace_tokenizer_callback",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "parser_tagger_data": {
            "name": "parser_tagger_data",
            "location": 34,
            "return": [],
            "arguments": {
                "path": [],
                "mixin_data_path": [],
                "mixin_data_percent": [],
                "gold_preproc": [],
                "max_length": [],
                "limit": [],
                "augmenter": [],
                "seed": []
            }
        },
        "med_mentions_reader": {
            "name": "med_mentions_reader",
            "location": 73,
            "return": [],
            "arguments": {
                "directory_path": [],
                "split": []
            }
        },
        "specialized_ner_reader": {
            "name": "specialized_ner_reader",
            "location": 101,
            "return": [],
            "arguments": {
                "file_path": []
            }
        },
        "replace_tokenizer_callback.replace_tokenizer": {
            "name": "replace_tokenizer",
            "location": 26,
            "return": [],
            "arguments": {
                "nlp": []
            }
        },
        "parser_tagger_data.mixed_corpus": {
            "name": "mixed_corpus",
            "location": 61,
            "return": [],
            "arguments": {
                "nlp": []
            }
        },
        "med_mentions_reader.corpus": {
            "name": "corpus",
            "location": 80,
            "return": [],
            "arguments": {
                "nlp": []
            }
        },
        "specialized_ner_reader.corpus": {
            "name": "corpus",
            "location": 104,
            "return": [],
            "arguments": {
                "nlp": []
            }
        }
    },
    "scispacy-main/scispacy/candidate_generation.py": {
        "load_approximate_nearest_neighbours_index": {
            "name": "load_approximate_nearest_neighbours_index",
            "location": 116,
            "return": [
                "Any"
            ],
            "arguments": {
                "linker_paths": [],
                "ef_search": []
            }
        },
        "create_tfidf_ann_index": {
            "name": "create_tfidf_ann_index",
            "location": 361,
            "return": [
                "Tuple[(list, Any, Any)]"
            ],
            "arguments": {
                "out_path": [],
                "kb": []
            }
        },
        "CandidateGenerator.__init__": {
            "name": "__init__",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ann_index": [],
                "tfidf_vectorizer": [],
                "ann_concept_aliases_list": [],
                "kb": [],
                "verbose": [],
                "ef_search": [],
                "name": []
            }
        },
        "CandidateGenerator.nmslib_knn_with_zero_vectors": {
            "name": "nmslib_knn_with_zero_vectors",
            "location": 238,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "vectors": [],
                "k": []
            }
        },
        "CandidateGenerator.__call__": {
            "name": "__call__",
            "location": 289,
            "return": [
                "List[list]"
            ],
            "arguments": {
                "self": [],
                "mention_texts": [],
                "k": []
            }
        }
    },
    "scispacy-main/scispacy/consts.py": {},
    "scispacy-main/scispacy/custom_sentence_segmenter.py": {
        "pysbd_sentencizer": {
            "name": "pysbd_sentencizer",
            "location": 13,
            "return": [],
            "arguments": {
                "doc": []
            }
        }
    },
    "scispacy-main/scispacy/custom_tokenizer.py": {
        "remove_new_lines": {
            "name": "remove_new_lines",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "text": []
            }
        },
        "combined_rule_prefixes": {
            "name": "combined_rule_prefixes",
            "location": 26,
            "return": [
                "list"
            ],
            "arguments": {}
        },
        "combined_rule_tokenizer": {
            "name": "combined_rule_tokenizer",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "nlp": []
            }
        }
    },
    "scispacy-main/scispacy/data_util.py": {
        "process_example": {
            "name": "process_example",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "lines": []
            }
        },
        "med_mentions_example_iterator": {
            "name": "med_mentions_example_iterator",
            "location": 52,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "filename": []
            }
        },
        "select_subset_of_overlapping_chain": {
            "name": "select_subset_of_overlapping_chain",
            "location": 70,
            "return": [
                "list"
            ],
            "arguments": {
                "chain": []
            }
        },
        "remove_overlapping_entities": {
            "name": "remove_overlapping_entities",
            "location": 99,
            "return": [
                "list"
            ],
            "arguments": {
                "sorted_spacy_format_entities": []
            }
        },
        "read_full_med_mentions": {
            "name": "read_full_med_mentions",
            "location": 149,
            "return": [
                "Tuple[(list, list, list)]"
            ],
            "arguments": {
                "directory_path": [],
                "label_mapping": [],
                "span_only": [],
                "spacy_format": []
            }
        },
        "_handle_sentence": {
            "name": "_handle_sentence",
            "location": 233,
            "return": [
                "Tuple[(str, Dict[(str, List[Tuple[(int, int, Any)]])])]"
            ],
            "arguments": {
                "examples": []
            }
        },
        "read_ner_from_tsv": {
            "name": "read_ner_from_tsv",
            "location": 271,
            "return": [
                "List[Tuple[(str, Dict[(str, List[Tuple[(int, int, str)]])])]]"
            ],
            "arguments": {
                "filename": []
            }
        },
        "read_full_med_mentions._cleanup_dir": {
            "name": "_cleanup_dir",
            "location": 155,
            "return": [],
            "arguments": {
                "dir_path": []
            }
        },
        "read_full_med_mentions.label_function": {
            "name": "label_function",
            "location": 202,
            "return": [],
            "arguments": {
                "label": []
            }
        }
    },
    "scispacy-main/scispacy/file_cache.py": {
        "cached_path": {
            "name": "cached_path",
            "location": 20,
            "return": [
                "Any"
            ],
            "arguments": {
                "url_or_filename": [],
                "cache_dir": []
            }
        },
        "url_to_filename": {
            "name": "url_to_filename",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [],
                "etag": []
            }
        },
        "filename_to_url": {
            "name": "filename_to_url",
            "location": 71,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "filename": [],
                "cache_dir": []
            }
        },
        "http_get": {
            "name": "http_get",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [],
                "temp_file": []
            }
        },
        "get_from_cache": {
            "name": "get_from_cache",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [],
                "cache_dir": []
            }
        }
    },
    "scispacy-main/scispacy/hearst_patterns.py": {},
    "scispacy-main/scispacy/hyponym_detector.py": {
        "HyponymDetector.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "nlp": [],
                "name": [],
                "extended": []
            }
        },
        "HyponymDetector.expand_to_noun_compound": {
            "name": "expand_to_noun_compound",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "token": [],
                "doc": []
            }
        },
        "HyponymDetector.find_noun_compound_head": {
            "name": "find_noun_compound_head",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "HyponymDetector.__call__": {
            "name": "__call__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "doc": []
            }
        }
    },
    "scispacy-main/scispacy/linking.py": {
        "EntityLinker.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "nlp": [],
                "name": [],
                "candidate_generator": [],
                "resolve_abbreviations": [],
                "k": [],
                "threshold": [],
                "no_definition_threshold": [],
                "filter_for_definitions": [],
                "max_entities_per_mention": [],
                "linker_name": []
            }
        },
        "EntityLinker.__call__": {
            "name": "__call__",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "doc": []
            }
        }
    },
    "scispacy-main/scispacy/linking_utils.py": {
        "Entity.__repr__": {
            "name": "__repr__",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KnowledgeBase.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "UmlsKnowledgeBase.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [],
                "types_file_path": []
            }
        },
        "Mesh.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "GeneOntology.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "HumanPhenotypeOntology.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "RxNorm.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": []
            }
        }
    },
    "scispacy-main/scispacy/per_class_scorer.py": {
        "PerClassScorer.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PerClassScorer.__call__": {
            "name": "__call__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "predicted_spans": [],
                "gold_spans": []
            }
        },
        "PerClassScorer.get_metric": {
            "name": "get_metric",
            "location": 42,
            "return": [
                "Dict[(str, float)]"
            ],
            "arguments": {
                "self": [],
                "reset": []
            }
        },
        "PerClassScorer._compute_metrics": {
            "name": "_compute_metrics",
            "location": 92,
            "return": [
                "Tuple[(float, float, float)]"
            ],
            "arguments": {
                "true_positives": [],
                "false_positives": [],
                "false_negatives": []
            }
        },
        "PerClassScorer.reset": {
            "name": "reset",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "scispacy-main/scispacy/train_utils.py": {
        "evaluate_ner": {
            "name": "evaluate_ner",
            "location": 9,
            "return": [
                "Dict[(str, float)]"
            ],
            "arguments": {
                "nlp": [],
                "eval_data": [],
                "dump_path": [],
                "verbose": []
            }
        }
    },
    "scispacy-main/scispacy/umls_linking.py": {},
    "scispacy-main/scispacy/umls_semantic_type_tree.py": {
        "construct_umls_tree_from_tsv": {
            "name": "construct_umls_tree_from_tsv",
            "location": 83,
            "return": [
                "UmlsSemanticTypeTree"
            ],
            "arguments": {
                "filepath": []
            }
        },
        "UmlsSemanticTypeTree.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": []
            }
        },
        "UmlsSemanticTypeTree.get_node_from_id": {
            "name": "get_node_from_id",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "type_id": []
            }
        },
        "UmlsSemanticTypeTree.get_canonical_name": {
            "name": "get_canonical_name",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "type_id": []
            }
        },
        "UmlsSemanticTypeTree.get_nodes_at_depth": {
            "name": "get_nodes_at_depth",
            "location": 38,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "level": []
            }
        },
        "UmlsSemanticTypeTree.get_children": {
            "name": "get_children",
            "location": 44,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "UmlsSemanticTypeTree.get_parent": {
            "name": "get_parent",
            "location": 54,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "UmlsSemanticTypeTree.get_collapsed_type_id_map_at_level": {
            "name": "get_collapsed_type_id_map_at_level",
            "location": 69,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "level": []
            }
        },
        "construct_umls_tree_from_tsv.attach_children": {
            "name": "attach_children",
            "location": 108,
            "return": [],
            "arguments": {
                "node": [],
                "stack": []
            }
        }
    },
    "scispacy-main/scispacy/umls_utils.py": {
        "read_umls_file_headers": {
            "name": "read_umls_file_headers",
            "location": 10,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "meta_path": [],
                "filename": []
            }
        },
        "read_umls_concepts": {
            "name": "read_umls_concepts",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "meta_path": [],
                "concept_details": [],
                "source": []
            }
        },
        "read_umls_types": {
            "name": "read_umls_types",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "meta_path": [],
                "concept_details": []
            }
        },
        "read_umls_definitions": {
            "name": "read_umls_definitions",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "meta_path": [],
                "concept_details": []
            }
        }
    },
    "scispacy-main/scispacy/util.py": {
        "save_model": {
            "name": "save_model",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "nlp": [],
                "output_path": []
            }
        },
        "create_combined_rule_model": {
            "name": "create_combined_rule_model",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "WhitespaceTokenizer.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vocab": []
            }
        },
        "WhitespaceTokenizer.__call__": {
            "name": "__call__",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        }
    },
    "scispacy-main/scispacy/version.py": {},
    "scispacy-main/scispacy/__init__.py": {},
    "scispacy-main/scripts/convert_freqs.py": {
        "read_freqs": {
            "name": "read_freqs",
            "location": 11,
            "return": [
                "Tuple[(Dict[(Any, float)], float)]"
            ],
            "arguments": {
                "freqs_loc": [],
                "max_length": [],
                "min_doc_freq": [],
                "min_freq": []
            }
        },
        "main": {
            "name": "main",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "input_path": [],
                "output_path": [],
                "min_word_frequency": []
            }
        }
    },
    "scispacy-main/scripts/count_word_frequencies.py": {
        "count_frequencies": {
            "name": "count_frequencies",
            "location": 22,
            "return": [
                "Tuple[(Counter[nothing], Counter[nothing])]"
            ],
            "arguments": {
                "language_class": [],
                "input_path": []
            }
        },
        "parallelize": {
            "name": "parallelize",
            "location": 40,
            "return": [
                "list"
            ],
            "arguments": {
                "func": [],
                "iterator": [],
                "n_jobs": []
            }
        },
        "merge_counts": {
            "name": "merge_counts",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "frequencies": [],
                "output_path": []
            }
        },
        "main": {
            "name": "main",
            "location": 65,
            "return": [],
            "arguments": {
                "raw_dir": [],
                "output_dir": [],
                "n_jobs": []
            }
        }
    },
    "scispacy-main/scripts/create_linker.py": {
        "main": {
            "name": "main",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "kb_path": [],
                "output_path": []
            }
        }
    },
    "scispacy-main/scripts/evaluate_ner.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "model_path": [],
                "dataset": [],
                "output_path": [],
                "code": [],
                "med_mentions_folder_path": [],
                "gpu_id": []
            }
        }
    },
    "scispacy-main/scripts/export_umls_json.py": {
        "main": {
            "name": "main",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "meta_path": [],
                "output_path": [],
                "source": []
            }
        }
    },
    "scispacy-main/tests/conftest.py": {
        "get_spacy_model": {
            "name": "get_spacy_model",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "spacy_model_name": [],
                "pos_tags": [],
                "parse": [],
                "ner": [],
                "with_custom_tokenizer": [],
                "with_sentence_segmenter": [],
                "with_serializable_abbreviation_detector": []
            }
        },
        "combined_rule_tokenizer_fixture": {
            "name": "combined_rule_tokenizer_fixture",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "en_with_combined_rule_tokenizer_fixture": {
            "name": "en_with_combined_rule_tokenizer_fixture",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "en_with_combined_rule_tokenizer_and_segmenter_fixture": {
            "name": "en_with_combined_rule_tokenizer_and_segmenter_fixture",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "test_data_fixtures_path": {
            "name": "test_data_fixtures_path",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "test_raw_path": {
            "name": "test_raw_path",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "test_pmids_path": {
            "name": "test_pmids_path",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "test_conll_path": {
            "name": "test_conll_path",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "test_model_dir": {
            "name": "test_model_dir",
            "location": 98,
            "return": [],
            "arguments": {}
        },
        "combined_all_model_fixture": {
            "name": "combined_all_model_fixture",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "combined_all_model_fixture_non_serializable_abbrev": {
            "name": "combined_all_model_fixture_non_serializable_abbrev",
            "location": 108,
            "return": [],
            "arguments": {}
        },
        "combined_rule_prefixes_fixture": {
            "name": "combined_rule_prefixes_fixture",
            "location": 113,
            "return": [],
            "arguments": {}
        },
        "remove_new_lines_fixture": {
            "name": "remove_new_lines_fixture",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "default_en_tokenizer_fixture": {
            "name": "default_en_tokenizer_fixture",
            "location": 123,
            "return": [],
            "arguments": {}
        },
        "default_en_model_fixture": {
            "name": "default_en_model_fixture",
            "location": 129,
            "return": [],
            "arguments": {}
        }
    },
    "scispacy-main/tests/test_abbreviation_detection.py": {
        "TestAbbreviationDetector.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbbreviationDetector.test_find_abbreviation": {
            "name": "test_find_abbreviation",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbbreviationDetector.test_filter_matches": {
            "name": "test_filter_matches",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbbreviationDetector.test_abbreviation_detection": {
            "name": "test_abbreviation_detection",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbbreviationDetector.test_find": {
            "name": "test_find",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbbreviationDetector.test_issue_158": {
            "name": "test_issue_158",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbbreviationDetector.test_issue_192": {
            "name": "test_issue_192",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbbreviationDetector.test_issue_161": {
            "name": "test_issue_161",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbbreviationDetector.test_empty_span": {
            "name": "test_empty_span",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbbreviationDetector.test_space_issue": {
            "name": "test_space_issue",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbbreviationDetector.test_multiple_spaces": {
            "name": "test_multiple_spaces",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbbreviationDetector.test_difficult_cases": {
            "name": "test_difficult_cases",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "scispacy-main/tests/test_candidate_generation.py": {
        "TestCandidateGeneration.test_create_index": {
            "name": "test_create_index",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCandidateGeneration.test_candidate_generation": {
            "name": "test_candidate_generation",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCandidateGeneration.test_empty_list": {
            "name": "test_empty_list",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "scispacy-main/tests/test_data_util.py": {
        "TestDataUtil.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataUtil.tearDown": {
            "name": "tearDown",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataUtil.test_example_iterator": {
            "name": "test_example_iterator",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataUtil.test_remove_overlaps": {
            "name": "test_remove_overlaps",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataUtil.test_read_ner_from_tsv": {
            "name": "test_read_ner_from_tsv",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "scispacy-main/tests/test_file_cache.py": {
        "TestFileUtils.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileUtils.tearDown": {
            "name": "tearDown",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileUtils.test_url_to_filename": {
            "name": "test_url_to_filename",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileUtils.test_url_to_filename_with_etags": {
            "name": "test_url_to_filename_with_etags",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFileUtils.test_url_to_filename_with_etags_eliminates_quotes": {
            "name": "test_url_to_filename_with_etags_eliminates_quotes",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "scispacy-main/tests/test_hyponym_detector.py": {
        "TestHyponymDetector.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHyponymDetector.test_sentences": {
            "name": "test_sentences",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHyponymDetector.test_find_noun_compound_head": {
            "name": "test_find_noun_compound_head",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHyponymDetector.test_expand_noun_phrase": {
            "name": "test_expand_noun_phrase",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "scispacy-main/tests/test_linking.py": {
        "TestLinker.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLinker.test_naive_entity_linking": {
            "name": "test_naive_entity_linking",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLinker.test_linker_resolves_abbreviations": {
            "name": "test_linker_resolves_abbreviations",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLinker.test_linker_has_types": {
            "name": "test_linker_has_types",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "scispacy-main/tests/test_per_class_scorer.py": {
        "TestPerClassScorer.test_per_class_scorer_counts_correctly": {
            "name": "test_per_class_scorer_counts_correctly",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "scispacy-main/tests/test_umls_semantic_type_tree.py": {
        "TestUmlsSemanticTypeTree.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUmlsSemanticTypeTree.test_tree_can_be_read_from_file": {
            "name": "test_tree_can_be_read_from_file",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUmlsSemanticTypeTree.test_tree_can_collapse_nodes": {
            "name": "test_tree_can_collapse_nodes",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUmlsSemanticTypeTree.test_get_parent_root": {
            "name": "test_get_parent_root",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUmlsSemanticTypeTree.test_get_parent": {
            "name": "test_get_parent",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "scispacy-main/tests/test_umls_utils.py": {
        "TestUtil.test_read_umls_concepts": {
            "name": "test_read_umls_concepts",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtil.test_read_umls_types": {
            "name": "test_read_umls_types",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtil.test_read_umls_definitions": {
            "name": "test_read_umls_definitions",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "scispacy-main/tests/test_util.py": {
        "TestUtil.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUtil.test_whitespace_tokenizer": {
            "name": "test_whitespace_tokenizer",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "scispacy-main/tests/__init__.py": {},
    "scispacy-main/tests/custom_tests/test_all_model.py": {
        "test_custom_segmentation": {
            "name": "test_custom_segmentation",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "combined_all_model_fixture": []
            }
        },
        "test_full_pipe_serializable": {
            "name": "test_full_pipe_serializable",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "combined_all_model_fixture": []
            }
        },
        "test_full_pipe_not_serializable": {
            "name": "test_full_pipe_not_serializable",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "combined_all_model_fixture_non_serializable_abbrev": []
            }
        }
    },
    "scispacy-main/tests/custom_tests/test_custom_segmentation.py": {
        "test_custom_segmentation": {
            "name": "test_custom_segmentation",
            "location": 247,
            "return": [],
            "arguments": {
                "en_with_combined_rule_tokenizer_and_segmenter_fixture": [],
                "remove_new_lines_fixture": [],
                "text": [],
                "expected_sents": []
            }
        },
        "test_segmenter": {
            "name": "test_segmenter",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "en_with_combined_rule_tokenizer_and_segmenter_fixture": []
            }
        }
    },
    "scispacy-main/tests/custom_tests/test_custom_tokenizer.py": {
        "test_custom_tokenization": {
            "name": "test_custom_tokenization",
            "location": 51,
            "return": [],
            "arguments": {
                "en_with_combined_rule_tokenizer_fixture": [],
                "remove_new_lines_fixture": [],
                "text": [],
                "expected_tokens": []
            }
        }
    },
    "scispacy-main/tests/custom_tests/test_whitespace.py": {
        "TestWhitespace.test_tokenizer_splits_single_space": {
            "name": "test_tokenizer_splits_single_space",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "TestWhitespace.test_tokenizer_splits_double_space": {
            "name": "test_tokenizer_splits_double_space",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "TestWhitespace.test_tokenizer_handles_double_trainling_ws": {
            "name": "test_tokenizer_handles_double_trainling_ws",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "TestWhitespace.test_tokenizer_splits_newline": {
            "name": "test_tokenizer_splits_newline",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "TestWhitespace.test_tokenizer_splits_newline_space": {
            "name": "test_tokenizer_splits_newline_space",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "TestWhitespace.test_tokenizer_splits_newline_double_space": {
            "name": "test_tokenizer_splits_newline_double_space",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "TestWhitespace.test_tokenizer_splits_newline_space_wrap": {
            "name": "test_tokenizer_splits_newline_space_wrap",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        }
    }
}
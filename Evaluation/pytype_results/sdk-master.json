{
    "sdk-master/__init__.py": {},
    "sdk-master/python/addresses.py": {
        "Address.__repr__": {
            "name": "__repr__",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Address.clone": {
            "name": "clone",
            "location": 26,
            "return": [
                "_TAddress@@Address@@"
            ],
            "arguments": {
                "self": [
                    "_TAddress@@Address@@"
                ]
            }
        },
        "Address.country_name": {
            "name": "country_name",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sdk-master/python/all.py": {},
    "sdk-master/python/assignments.py": {},
    "sdk-master/python/automatic_payment_relationships.py": {},
    "sdk-master/python/backups.py": {},
    "sdk-master/python/banks.py": {
        "Bank.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sdk-master/python/carts.py": {},
    "sdk-master/python/cart_items.py": {},
    "sdk-master/python/cart_shipment_groups.py": {},
    "sdk-master/python/cart_shipment_quotes.py": {},
    "sdk-master/python/categories.py": {},
    "sdk-master/python/companies.py": {
        "Company.default_banks": {
            "name": "default_banks",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Company.primary_address": {
            "name": "primary_address",
            "location": 87,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Company.dictionary_of_address_names_and_ids": {
            "name": "dictionary_of_address_names_and_ids",
            "location": 93,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Company.is_payment_phone_numbers_valid": {
            "name": "is_payment_phone_numbers_valid",
            "location": 105,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Company.is_banks_valid": {
            "name": "is_banks_valid",
            "location": 111,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Company.primary_phone_number": {
            "name": "primary_phone_number",
            "location": 117,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Company.primary_email_address": {
            "name": "primary_email_address",
            "location": 127,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sdk-master/python/company_invitations.py": {},
    "sdk-master/python/components.py": {},
    "sdk-master/python/component_tags.py": {},
    "sdk-master/python/country_taxes.py": {
        "CountryTax.country_name": {
            "name": "country_name",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "CountryTax.full_name": {
            "name": "full_name",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sdk-master/python/discount.py": {},
    "sdk-master/python/discount_groups.py": {},
    "sdk-master/python/domains.py": {
        "Domain.public_categories": {
            "name": "public_categories",
            "location": 79,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Domain.email_notifications_enabled": {
            "name": "email_notifications_enabled",
            "location": 84,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Domain.sms_notifications_enabled": {
            "name": "sms_notifications_enabled",
            "location": 89,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Domain.main_menu": {
            "name": "main_menu",
            "location": 94,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Domain.safe_conversion_tracking_code": {
            "name": "safe_conversion_tracking_code",
            "location": 102,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "invoice": []
            }
        },
        "Domain.safe_new_conversion_tracking_code": {
            "name": "safe_new_conversion_tracking_code",
            "location": 120,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "invoice": []
            }
        },
        "Domain.safe_new_global_tracking_code": {
            "name": "safe_new_global_tracking_code",
            "location": 138,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Domain.logo_url": {
            "name": "logo_url",
            "location": 153,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Domains.get_by_name": {
            "name": "get_by_name",
            "location": 177,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "api_secret": []
            }
        }
    },
    "sdk-master/python/domain_invitations.py": {},
    "sdk-master/python/domain_tags.py": {},
    "sdk-master/python/drafts.py": {
        "Draft.changes_have_been_requested": {
            "name": "changes_have_been_requested",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Draft.is_draft_rejected": {
            "name": "is_draft_rejected",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Draft.is_most_recent": {
            "name": "is_most_recent",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sdk-master/python/draft_comments.py": {},
    "sdk-master/python/draft_templates.py": {},
    "sdk-master/python/email_addresses.py": {},
    "sdk-master/python/email_counters.py": {},
    "sdk-master/python/entities.py": {
        "parse_time_hook": {
            "name": "parse_time_hook",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "timestamp": [],
                "as_user": []
            }
        },
        "full_class_path": {
            "name": "full_class_path",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "obj": []
            }
        },
        "enumerate_files": {
            "name": "enumerate_files",
            "location": 132,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "files": []
            }
        },
        "generate_request": {
            "name": "generate_request",
            "location": 145,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "intercept_missing_entities": {
            "name": "intercept_missing_entities",
            "location": 156,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "e": []
            }
        },
        "check_response": {
            "name": "check_response",
            "location": 629,
            "return": [
                "bool"
            ],
            "arguments": {
                "response": [],
                "expected": []
            }
        },
        "Property.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "remote_type": [],
                "backref": []
            }
        },
        "Meta.__new__": {
            "name": "__new__",
            "location": 54,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "name": [],
                "bases": [],
                "attrs": []
            }
        },
        "Entity.__init__": {
            "name": "__init__",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": []
            }
        },
        "Entity._set_hidden": {
            "name": "_set_hidden",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hidden_property": [],
                "value": []
            }
        },
        "Entity.mark_dirty": {
            "name": "mark_dirty",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Entity.send_to_entity": {
            "name": "send_to_entity",
            "location": 222,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "identifier": []
            }
        },
        "Entity.destroy": {
            "name": "destroy",
            "location": 237,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "as_domain": []
            }
        },
        "Entity.post": {
            "name": "post",
            "location": 245,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Entity.create": {
            "name": "create",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Entity.patch": {
            "name": "patch",
            "location": 259,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Entity.update": {
            "name": "update",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "only_updates": [],
                "refresh": []
            }
        },
        "Entity.serialise": {
            "name": "serialise",
            "location": 286,
            "return": [
                "Tuple[(dict, Any)]"
            ],
            "arguments": {
                "self": [],
                "force_primary": [],
                "files": [],
                "time_format": [],
                "consider_rights": [],
                "for_updates": [],
                "html_safe": [],
                "exclude_old": []
            }
        },
        "Entity.to_json": {
            "name": "to_json",
            "location": 377,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "camel_key": [],
                "parse_date_format": [],
                "html_safe": []
            }
        },
        "Entity.dump_to_json_str": {
            "name": "dump_to_json_str",
            "location": 388,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Entity.from_json": {
            "name": "from_json",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json_object": [],
                "makes_dirty": []
            }
        },
        "Entity.process_for_transfer": {
            "name": "process_for_transfer",
            "location": 457,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Entity.process_before_transfer": {
            "name": "process_before_transfer",
            "location": 460,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Entity.primary_value": {
            "name": "primary_value",
            "location": 476,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Entity.has_none_attribute": {
            "name": "has_none_attribute",
            "location": 479,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Entity.entity_process": {
            "name": "entity_process",
            "location": 494,
            "return": [
                "Optional[Entity]"
            ],
            "arguments": {
                "self": [],
                "attribute_group_name": [],
                "process_func": [],
                "except_error_type": []
            }
        },
        "Entity.is_empty": {
            "name": "is_empty",
            "location": 522,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Entity.fetch": {
            "name": "fetch",
            "location": 547,
            "return": [
                "_TEntity@@Entity@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TEntity]"
                ],
                "identifier": []
            }
        },
        "Resource.__init__": {
            "name": "__init__",
            "location": 571,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Resource.get": {
            "name": "get",
            "location": 575,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "forbid_auto_update": []
            }
        },
        "Resource.from_json": {
            "name": "from_json",
            "location": 582,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "json_object": [],
                "makes_dirty": []
            }
        },
        "Resource.fetch": {
            "name": "fetch",
            "location": 591,
            "return": [
                "Tuple[(list, PageSpecification)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageSpecification.__init__": {
            "name": "__init__",
            "location": 606,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "count": [],
                "available": [],
                "offset": [],
                "limit": [],
                "can_create": []
            }
        },
        "PageSpecification.available_pages": {
            "name": "available_pages",
            "location": 613,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageSpecification.current_page": {
            "name": "current_page",
            "location": 616,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageSpecification.page_offset": {
            "name": "page_offset",
            "location": 619,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "page": []
            }
        },
        "PageSpecification.next_offset": {
            "name": "next_offset",
            "location": 622,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageSpecification.last_offset": {
            "name": "last_offset",
            "location": 625,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Meta.__new__.add_property": {
            "name": "add_property",
            "location": 70,
            "return": [],
            "arguments": {
                "prop": [],
                "object": []
            }
        },
        "Meta.__new__.wrap_init": {
            "name": "wrap_init",
            "location": 91,
            "return": [],
            "arguments": {}
        },
        "Entity.serialise.insert_primary_key": {
            "name": "insert_primary_key",
            "location": 291,
            "return": [],
            "arguments": {
                "result_dict": []
            }
        },
        "Entity.from_json.set_attribute": {
            "name": "set_attribute",
            "location": 406,
            "return": [],
            "arguments": {
                "public_property": [],
                "hidden_property": [],
                "value": []
            }
        },
        "Meta.__new__.add_property.get_prop": {
            "name": "get_prop",
            "location": 81,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "Meta.__new__.add_property.set_prop": {
            "name": "set_prop",
            "location": 84,
            "return": [],
            "arguments": {
                "obj": [],
                "value": []
            }
        }
    },
    "sdk-master/python/exchange_rates.py": {},
    "sdk-master/python/files.py": {
        "File.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "File.from_flask_file": {
            "name": "from_flask_file",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flask_file": []
            }
        },
        "File.is_image": {
            "name": "is_image",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "File.is_pdf": {
            "name": "is_pdf",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sdk-master/python/inventories.py": {},
    "sdk-master/python/invoices.py": {
        "Invoice.process_for_transfer": {
            "name": "process_for_transfer",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Invoice.amount_paid": {
            "name": "amount_paid",
            "location": 73,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Invoice.amount_owed": {
            "name": "amount_owed",
            "location": 79,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Invoice.amount_owed_formated_with_currency": {
            "name": "amount_owed_formated_with_currency",
            "location": 86,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Invoice.invoice_payment_status": {
            "name": "invoice_payment_status",
            "location": 92,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Invoice.is_paid_string": {
            "name": "is_paid_string",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sdk-master/python/items.py": {
        "Item.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item.item_total": {
            "name": "item_total",
            "location": 23,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item.item_tax": {
            "name": "item_tax",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sdk-master/python/jobs.py": {
        "Job.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.product_total_cost": {
            "name": "product_total_cost",
            "location": 122,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.process_for_transfer": {
            "name": "process_for_transfer",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.is_draft_accepted": {
            "name": "is_draft_accepted",
            "location": 131,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.priority_name": {
            "name": "priority_name",
            "location": 143,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.current_draft": {
            "name": "current_draft",
            "location": 150,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.most_recent_draft_id": {
            "name": "most_recent_draft_id",
            "location": 156,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.supplier": {
            "name": "supplier",
            "location": 165,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "only_approved": []
            }
        },
        "Job.is_production_in_house": {
            "name": "is_production_in_house",
            "location": 180,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.in_house_assignment": {
            "name": "in_house_assignment",
            "location": 185,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.accepted_assignment": {
            "name": "accepted_assignment",
            "location": 191,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.assignment_deadline": {
            "name": "assignment_deadline",
            "location": 198,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.assignment_by_supplier_id": {
            "name": "assignment_by_supplier_id",
            "location": 204,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "Job.production_shipment": {
            "name": "production_shipment",
            "location": 214,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.production_display_info": {
            "name": "production_display_info",
            "location": 223,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.design_display_info": {
            "name": "design_display_info",
            "location": 231,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.payment_display_info": {
            "name": "payment_display_info",
            "location": 238,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.shipment_display_info": {
            "name": "shipment_display_info",
            "location": 245,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.supplier_shipment_info": {
            "name": "supplier_shipment_info",
            "location": 251,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.suppliers_unarchived_assignment": {
            "name": "suppliers_unarchived_assignment",
            "location": 258,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "Job.product_unit_price": {
            "name": "product_unit_price",
            "location": 267,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.assignment_earliest_production": {
            "name": "assignment_earliest_production",
            "location": 274,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.assignment_lowest_quote": {
            "name": "assignment_lowest_quote",
            "location": 288,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.get_section_name": {
            "name": "get_section_name",
            "location": 300,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "section": []
            }
        },
        "Job.user_job_notifications": {
            "name": "user_job_notifications",
            "location": 309,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Job.user_unseen_job_notifications": {
            "name": "user_unseen_job_notifications",
            "location": 314,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Job.user_unseen_job_notifications_count": {
            "name": "user_unseen_job_notifications_count",
            "location": 320,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Job.unseen_notifications_by_section": {
            "name": "unseen_notifications_by_section",
            "location": 324,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "user": [],
                "section_int": []
            }
        },
        "Job.unseen_notifications_by_section_count": {
            "name": "unseen_notifications_by_section_count",
            "location": 332,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "user": [],
                "section_int": []
            }
        },
        "Job.shipping_finished": {
            "name": "shipping_finished",
            "location": 336,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.drafting_finished": {
            "name": "drafting_finished",
            "location": 342,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.production_finished": {
            "name": "production_finished",
            "location": 348,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.payment_finished": {
            "name": "payment_finished",
            "location": 355,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.is_ready_to_complete": {
            "name": "is_ready_to_complete",
            "location": 361,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.dictionary_of_related_address_names_and_ids": {
            "name": "dictionary_of_related_address_names_and_ids",
            "location": 368,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "job_shipping": [],
                "production_shipping": [],
                "manager_addresses": [],
                "client_addresses": []
            }
        },
        "Job.draft_time_line": {
            "name": "draft_time_line",
            "location": 391,
            "return": [
                "collections.OrderedDict"
            ],
            "arguments": {
                "self": [],
                "reverse": []
            }
        },
        "Job.job_info_time_line": {
            "name": "job_info_time_line",
            "location": 421,
            "return": [
                "collections.OrderedDict"
            ],
            "arguments": {
                "self": [],
                "reverse": []
            }
        },
        "Job.is_complete_string": {
            "name": "is_complete_string",
            "location": 433,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.can_be_archived_by": {
            "name": "can_be_archived_by",
            "location": 441,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Job.total_inc_tax": {
            "name": "total_inc_tax",
            "location": 445,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sdk-master/python/job_comments.py": {},
    "sdk-master/python/menus.py": {
        "MenuItem.url": {
            "name": "url",
            "location": 18,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "host": [],
                "domain": []
            }
        },
        "Menu.menu_items_in_order": {
            "name": "menu_items_in_order",
            "location": 41,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sdk-master/python/notifications.py": {
        "Notification.have_link": {
            "name": "have_link",
            "location": 44,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notification.can_reply": {
            "name": "can_reply",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "role": []
            }
        },
        "Notification.notification_title": {
            "name": "notification_title",
            "location": 57,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notification.job_notification_title": {
            "name": "job_notification_title",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Notification.avatar_url": {
            "name": "avatar_url",
            "location": 76,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sdk-master/python/pages.py": {},
    "sdk-master/python/payments.py": {
        "Payment.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Payment.payment_type_string": {
            "name": "payment_type_string",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sdk-master/python/phone_numbers.py": {
        "PhoneNumber.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sdk-master/python/production_comments.py": {},
    "sdk-master/python/products.py": {
        "Product.create": {
            "name": "create",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "embed": [],
                "email": [],
                "password": [],
                "query": [],
                "api_secret": [],
                "as_domain": []
            }
        },
        "Product.primary_image": {
            "name": "primary_image",
            "location": 98,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Product.preview_images": {
            "name": "preview_images",
            "location": 105,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "max_images": []
            }
        },
        "Product.default_currency": {
            "name": "default_currency",
            "location": 109,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Product.primary_product_image": {
            "name": "primary_product_image",
            "location": 112,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Product.build_empty_variations_group": {
            "name": "build_empty_variations_group",
            "location": 117,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Product.build_empty_independent_variations": {
            "name": "build_empty_independent_variations",
            "location": 131,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sdk-master/python/quotes.py": {
        "addup_subtotal": {
            "name": "addup_subtotal",
            "location": 11,
            "return": [
                "Any"
            ],
            "arguments": {
                "prev_total": [],
                "b": []
            }
        },
        "Quote.quote_total": {
            "name": "quote_total",
            "location": 28,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sdk-master/python/quote_items.py": {
        "QuoteItem.item_total": {
            "name": "item_total",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "QuoteItem.item_type_name": {
            "name": "item_type_name",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sdk-master/python/request.py": {
        "process_dict_param": {
            "name": "process_dict_param",
            "location": 10,
            "return": [
                "Union[(str, _T0)]"
            ],
            "arguments": {
                "embed": [
                    "_T0@@"
                ]
            }
        },
        "Request.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.path": {
            "name": "path",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.url": {
            "name": "url",
            "location": 45,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.auth": {
            "name": "auth",
            "location": 48,
            "return": [
                "Optional[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.version_number": {
            "name": "version_number",
            "location": 53,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.wraps_request": {
            "name": "wraps_request",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "files": [],
                "email": [],
                "password": [],
                "api_secret": [],
                "query": [],
                "embed": [],
                "as_domain": [],
                "include_archived": [],
                "skip_rights": []
            }
        },
        "Request.get_data_post": {
            "name": "get_data_post",
            "location": 77,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.send": {
            "name": "send",
            "location": 83,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {
                "self": []
            }
        },
        "Request.get_sender_func": {
            "name": "get_sender_func",
            "location": 118,
            "return": [
                "Callable[(..., requests.models.Response)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sdk-master/python/sessions.py": {
        "years_to_seconds": {
            "name": "years_to_seconds",
            "location": 7,
            "return": [
                "Any"
            ],
            "arguments": {
                "years": []
            }
        },
        "Session.cookie_ttl": {
            "name": "cookie_ttl",
            "location": 23,
            "return": [
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sdk-master/python/shipments.py": {
        "Shipment.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sdk-master/python/shipment_methods.py": {},
    "sdk-master/python/shipment_method_variations.py": {},
    "sdk-master/python/subscription_plans.py": {},
    "sdk-master/python/supply_domains.py": {},
    "sdk-master/python/themes.py": {
        "Theme.is_valid_and_updated": {
            "name": "is_valid_and_updated",
            "location": 118,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Theme.can_be_activated": {
            "name": "can_be_activated",
            "location": 140,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sdk-master/python/theme_css_settings.py": {},
    "sdk-master/python/users.py": {
        "SystemRole.__repr__": {
            "name": "__repr__",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.role_in_domain": {
            "name": "role_in_domain",
            "location": 97,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "domain_id": []
            }
        },
        "User.all_roles": {
            "name": "all_roles",
            "location": 105,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.has_roles": {
            "name": "has_roles",
            "location": 115,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "roles": [],
                "combination_method": []
            }
        },
        "User.has_authority": {
            "name": "has_authority",
            "location": 120,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "domain_id": [],
                "roles": []
            }
        },
        "User.is_not_client": {
            "name": "is_not_client",
            "location": 124,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "domain_id": []
            }
        },
        "User.can_view_info_section": {
            "name": "can_view_info_section",
            "location": 129,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "User.can_view_payment_section": {
            "name": "can_view_payment_section",
            "location": 136,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "User.can_view_production_section": {
            "name": "can_view_production_section",
            "location": 143,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "User.can_view_drafting_section": {
            "name": "can_view_drafting_section",
            "location": 150,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "User.can_view_shipping_section": {
            "name": "can_view_shipping_section",
            "location": 157,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "User.has_system_role": {
            "name": "has_system_role",
            "location": 164,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "role": []
            }
        },
        "User.primary_company_name": {
            "name": "primary_company_name",
            "location": 169,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.company_country": {
            "name": "company_country",
            "location": 175,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.primary_phone_number": {
            "name": "primary_phone_number",
            "location": 184,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.primary_email_address": {
            "name": "primary_email_address",
            "location": 194,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_tzinfo": {
            "name": "get_tzinfo",
            "location": 203,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.empty_user": {
            "name": "empty_user",
            "location": 212,
            "return": [
                "_TUser@@User@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TUser]"
                ]
            }
        },
        "User.profile_picture_url": {
            "name": "profile_picture_url",
            "location": 218,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "User.dictionary_of_addresses_and_ids": {
            "name": "dictionary_of_addresses_and_ids",
            "location": 230,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "address_name": [],
                "company_addresses": []
            }
        },
        "User.public_nav_extension": {
            "name": "public_nav_extension",
            "location": 253,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "url": []
            }
        }
    },
    "sdk-master/python/user_companies.py": {
        "UserCompany.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sdk-master/python/variations.py": {
        "VariationFieldOption.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariationFieldOption.apply_cost_per_unit": {
            "name": "apply_cost_per_unit",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariationFieldOption.build_variation_option": {
            "name": "build_variation_option",
            "location": 38,
            "return": [
                "VariationOption"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariationField.is_empty": {
            "name": "is_empty",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariationField.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariationField.is_select": {
            "name": "is_select",
            "location": 102,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariationField.is_select_type": {
            "name": "is_select_type",
            "location": 105,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariationField.is_file_upload": {
            "name": "is_file_upload",
            "location": 108,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariationField.is_default_multi_select": {
            "name": "is_default_multi_select",
            "location": 111,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariationField.is_radio_or_checkbox": {
            "name": "is_radio_or_checkbox",
            "location": 114,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariationField.has_options": {
            "name": "has_options",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariationField.is_colour_select": {
            "name": "is_colour_select",
            "location": 120,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "VariationField.build_empty_variation": {
            "name": "build_empty_variation",
            "location": 123,
            "return": [
                "Variation"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variation.is_selectable": {
            "name": "is_selectable",
            "location": 195,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variation.is_file_upload": {
            "name": "is_file_upload",
            "location": 199,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variation.has_multiple_files": {
            "name": "has_multiple_files",
            "location": 203,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variation.is_colour_select": {
            "name": "is_colour_select",
            "location": 209,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variation.selected_colour_option": {
            "name": "selected_colour_option",
            "location": 212,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variation.has_options": {
            "name": "has_options",
            "location": 216,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variation.value_array": {
            "name": "value_array",
            "location": 219,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "new_values_array": []
            }
        },
        "Variation.get_selected_option": {
            "name": "get_selected_option",
            "location": 230,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "option_id": []
            }
        },
        "Variation.selected_options_array": {
            "name": "selected_options_array",
            "location": 239,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variation.first_selected_option": {
            "name": "first_selected_option",
            "location": 246,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Variation.value_string": {
            "name": "value_string",
            "location": 254,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "option_id": []
            }
        },
        "Variation.link_to_field": {
            "name": "link_to_field",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": []
            }
        },
        "VariationsGroup.link_to_fields": {
            "name": "link_to_fields",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fields": []
            }
        }
    },
    "sdk-master/python/__init__.py": {},
    "sdk-master/python/tests/test_cart.py": {
        "test_cart_shipment_quote_has_shipment_method": {
            "name": "test_cart_shipment_quote_has_shipment_method",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cart_shipment_group_has_items": {
            "name": "test_cart_shipment_group_has_items",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sdk-master/python/tests/test_entity.py": {
        "test_withhold_scalar_non_edits": {
            "name": "test_withhold_scalar_non_edits",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_force_dirty_scalar_edits": {
            "name": "test_force_dirty_scalar_edits",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_withhold_object_non_edits": {
            "name": "test_withhold_object_non_edits",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_withhold_array_non_edits": {
            "name": "test_withhold_array_non_edits",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_include_doubly_indirect_dirty": {
            "name": "test_include_doubly_indirect_dirty",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sdk-master/python/tests/test_google.py": {
        "test_can_extract_google_conversion_parameters": {
            "name": "test_can_extract_google_conversion_parameters",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_reconstitute_new_conversion_script": {
            "name": "test_reconstitute_new_conversion_script",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sdk-master/python/tests/test_invoice.py": {
        "test_invoice_has_shipments_attribute": {
            "name": "test_invoice_has_shipments_attribute",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sdk-master/python/tests/test_number.py": {
        "test_can_construct_number_from_none": {
            "name": "test_can_construct_number_from_none",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_construct_number_from_int": {
            "name": "test_can_construct_number_from_int",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_construct_number_from_str": {
            "name": "test_can_construct_number_from_str",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_construct_number_from_number": {
            "name": "test_can_construct_number_from_number",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_construct_number_from_float": {
            "name": "test_can_construct_number_from_float",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_construct_number_from_decimal": {
            "name": "test_can_construct_number_from_decimal",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cant_construct_number_from_object": {
            "name": "test_cant_construct_number_from_object",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_too_many_places_throws": {
            "name": "test_too_many_places_throws",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_construct_with_scale": {
            "name": "test_can_construct_with_scale",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cant_construct_with_negative_scale": {
            "name": "test_cant_construct_with_negative_scale",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_number_str_int": {
            "name": "test_number_str_int",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_number_str_str": {
            "name": "test_number_str_str",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_internal_digit_representation": {
            "name": "test_internal_digit_representation",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_internal_scale": {
            "name": "test_internal_scale",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_scale_shown_in_str": {
            "name": "test_scale_shown_in_str",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_rescale_up": {
            "name": "test_can_rescale_up",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_floating_point_construction_keeps_scale": {
            "name": "test_floating_point_construction_keeps_scale",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_floating_point_number_round_trips": {
            "name": "test_floating_point_number_round_trips",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_equality": {
            "name": "test_equality",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_inequality": {
            "name": "test_inequality",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_null_number_is_zero": {
            "name": "test_null_number_is_zero",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_no_negative_zero_str": {
            "name": "test_no_negative_zero_str",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_addition": {
            "name": "test_addition",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multiplication": {
            "name": "test_multiplication",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_whole_part": {
            "name": "test_whole_part",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decimal_part": {
            "name": "test_decimal_part",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_negation": {
            "name": "test_negation",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_positive": {
            "name": "test_positive",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_double_negation": {
            "name": "test_double_negation",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_subtraction": {
            "name": "test_subtraction",
            "location": 287,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_abs": {
            "name": "test_abs",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_mod": {
            "name": "test_mod",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_floordiv": {
            "name": "test_floordiv",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_truediv": {
            "name": "test_truediv",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_divmod": {
            "name": "test_divmod",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ceil": {
            "name": "test_ceil",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_floor": {
            "name": "test_floor",
            "location": 385,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_round": {
            "name": "test_round",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_exactly_equal": {
            "name": "test_exactly_equal",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_signum": {
            "name": "test_signum",
            "location": 421,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_int_roundtrips": {
            "name": "test_int_roundtrips",
            "location": 428,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_le": {
            "name": "test_le",
            "location": 435,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_lt": {
            "name": "test_lt",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gt": {
            "name": "test_gt",
            "location": 459,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ge": {
            "name": "test_ge",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bool": {
            "name": "test_bool",
            "location": 485,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_fuzzy_number_str_int": {
            "name": "test_fuzzy_number_str_int",
            "location": 495,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "test_can_construct_from_decimal": {
            "name": "test_can_construct_from_decimal",
            "location": 500,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "test_fuzzy_floating_point_number_round_trips": {
            "name": "test_fuzzy_floating_point_number_round_trips",
            "location": 505,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "test_floating_point_equality": {
            "name": "test_floating_point_equality",
            "location": 510,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "test_int_round_trips": {
            "name": "test_int_round_trips",
            "location": 515,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "test_int_equality": {
            "name": "test_int_equality",
            "location": 520,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "test_int_inequality": {
            "name": "test_int_inequality",
            "location": 525,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "test_integer_addition": {
            "name": "test_integer_addition",
            "location": 530,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        }
    },
    "sdk-master/python/tests/test_product.py": {
        "test_product_not_has_origin_address_attribute": {
            "name": "test_product_not_has_origin_address_attribute",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sdk-master/python/tests/test_session.py": {
        "test_empty_session_will_not_generate_post_data": {
            "name": "test_empty_session_will_not_generate_post_data",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sdk-master/python/tests/test_supply_domain.py": {
        "test_supply_domain_from_json_works": {
            "name": "test_supply_domain_from_json_works",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_supply_domain_backref_valid": {
            "name": "test_supply_domain_backref_valid",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sdk-master/python/tests/test_user.py": {
        "test_can_construct_user": {
            "name": "test_can_construct_user",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sdk-master/python/tests/__init__.py": {},
    "sdk-master/python/util/address_util.py": {
        "address_country": {
            "name": "address_country",
            "location": 4,
            "return": [
                "Any"
            ],
            "arguments": {
                "code": []
            }
        },
        "name_primary": {
            "name": "name_primary",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "counter": [],
                "name": []
            }
        }
    },
    "sdk-master/python/util/api_error.py": {
        "ApiError.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "status_code": [],
                "error_code": [],
                "debug_message": []
            }
        },
        "ApiError.to_dict": {
            "name": "to_dict",
            "location": 10,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sdk-master/python/util/auto_assign_production_on_actions.py": {},
    "sdk-master/python/util/brand_util.py": {},
    "sdk-master/python/util/business_default.py": {},
    "sdk-master/python/util/call_to_actions.py": {},
    "sdk-master/python/util/config.py": {
        "load_configuration": {
            "name": "load_configuration",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "config_keys": []
            }
        }
    },
    "sdk-master/python/util/crypto.py": {
        "random_token": {
            "name": "random_token",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "length": []
            }
        },
        "base64encode": {
            "name": "base64encode",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "code": []
            }
        },
        "token_to_str": {
            "name": "token_to_str",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "token_bytes": []
            }
        },
        "str_to_token": {
            "name": "str_to_token",
            "location": 78,
            "return": [
                "bytes"
            ],
            "arguments": {
                "encoded_token": []
            }
        },
        "hash_password": {
            "name": "hash_password",
            "location": 91,
            "return": [
                "Any"
            ],
            "arguments": {
                "password": [],
                "salt": []
            }
        },
        "get_https_expiry": {
            "name": "get_https_expiry",
            "location": 96,
            "return": [
                "datetime.datetime"
            ],
            "arguments": {
                "host": []
            }
        },
        "random_token.random_char": {
            "name": "random_char",
            "location": 53,
            "return": [],
            "arguments": {}
        }
    },
    "sdk-master/python/util/discount_types.py": {},
    "sdk-master/python/util/domain_types.py": {},
    "sdk-master/python/util/errors.py": {},
    "sdk-master/python/util/events.py": {
        "Event.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_type": [],
                "event_object": []
            }
        }
    },
    "sdk-master/python/util/event_types.py": {},
    "sdk-master/python/util/flask_common.py": {
        "get_file_content": {
            "name": "get_file_content",
            "location": 4,
            "return": [
                "Any"
            ],
            "arguments": {
                "request_file_stream": []
            }
        },
        "generate_file_storage": {
            "name": "generate_file_storage",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {
                "io_stream": [],
                "name": [],
                "type": []
            }
        }
    },
    "sdk-master/python/util/google.py": {
        "r_or": {
            "name": "r_or",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "r_val": {
            "name": "r_val",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "content": []
            }
        },
        "r_dec": {
            "name": "r_dec",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "variable_name": [],
                "rvalue_format": []
            }
        },
        "r_str": {
            "name": "r_str",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "content": []
            }
        },
        "r_pixel_element": {
            "name": "r_pixel_element",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "content": []
            }
        },
        "r_optional": {
            "name": "r_optional",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "content": []
            }
        },
        "r_gtag_call": {
            "name": "r_gtag_call",
            "location": 142,
            "return": [
                "str"
            ],
            "arguments": {
                "contents": []
            }
        },
        "r_config_call": {
            "name": "r_config_call",
            "location": 146,
            "return": [
                "str"
            ],
            "arguments": {
                "param": []
            }
        },
        "r_conversion_call": {
            "name": "r_conversion_call",
            "location": 155,
            "return": [
                "str"
            ],
            "arguments": {
                "param": []
            }
        },
        "r_send_to_call": {
            "name": "r_send_to_call",
            "location": 166,
            "return": [
                "str"
            ],
            "arguments": {
                "param": []
            }
        },
        "get_group": {
            "name": "get_group",
            "location": 198,
            "return": [
                "Any"
            ],
            "arguments": {
                "regex": [],
                "string": []
            }
        },
        "extract_script_parameters": {
            "name": "extract_script_parameters",
            "location": 208,
            "return": [
                "ScriptParameters"
            ],
            "arguments": {
                "text": []
            }
        },
        "extract_new_global_script_parameters": {
            "name": "extract_new_global_script_parameters",
            "location": 260,
            "return": [
                "str"
            ],
            "arguments": {
                "text": []
            }
        },
        "extract_new_conversion_script_parameters": {
            "name": "extract_new_conversion_script_parameters",
            "location": 283,
            "return": [
                "str"
            ],
            "arguments": {
                "text": []
            }
        },
        "reconstitute_conversion_script": {
            "name": "reconstitute_conversion_script",
            "location": 309,
            "return": [
                "str"
            ],
            "arguments": {
                "parameters": [],
                "invoice": []
            }
        },
        "reconstitute_global_script": {
            "name": "reconstitute_global_script",
            "location": 331,
            "return": [
                "str"
            ],
            "arguments": {
                "gtag_id": []
            }
        },
        "reconstitute_new_conversion_script": {
            "name": "reconstitute_new_conversion_script",
            "location": 340,
            "return": [
                "str"
            ],
            "arguments": {
                "extra_args": [],
                "invoice": []
            }
        },
        "ScriptParameters.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conversion_id": [],
                "conversion_language": [],
                "conversion_format": [],
                "conversion_colour": [],
                "conversion_label": [],
                "conversion_value": [],
                "conversion_currency": [],
                "remarketing_only": [],
                "pixel_url": []
            }
        }
    },
    "sdk-master/python/util/gravatar.py": {
        "gravatar_url": {
            "name": "gravatar_url",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "email": [],
                "size": []
            }
        }
    },
    "sdk-master/python/util/inventory_status.py": {},
    "sdk-master/python/util/invoice_status.py": {},
    "sdk-master/python/util/invoice_types.py": {},
    "sdk-master/python/util/item_types.py": {},
    "sdk-master/python/util/javascript.py": {
        "is_valid_first_char": {
            "name": "is_valid_first_char",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "char": []
            }
        },
        "is_valid_char": {
            "name": "is_valid_char",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "char": []
            }
        },
        "is_valid_variable_name": {
            "name": "is_valid_variable_name",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": []
            }
        }
    },
    "sdk-master/python/util/languages.py": {},
    "sdk-master/python/util/legal.py": {
        "is_legal_suffix": {
            "name": "is_legal_suffix",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "filename": []
            }
        },
        "is_pic_suffix": {
            "name": "is_pic_suffix",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "filename": []
            }
        },
        "is_true_string": {
            "name": "is_true_string",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "string": []
            }
        },
        "is_legal_theme_file_mimetype": {
            "name": "is_legal_theme_file_mimetype",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "mimetype": []
            }
        }
    },
    "sdk-master/python/util/letsencrypt.py": {
        "fetch_cert": {
            "name": "fetch_cert",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "email": [],
                "cert_name": [],
                "domain_names": [],
                "log": [],
                "config": []
            }
        },
        "load_cert": {
            "name": "load_cert",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "log": []
            }
        },
        "renew_certs": {
            "name": "renew_certs",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "email": [],
                "cert_name": [],
                "domain_names": [],
                "log": [],
                "config": []
            }
        },
        "load_cert.restart_container": {
            "name": "restart_container",
            "location": 39,
            "return": [],
            "arguments": {
                "name": []
            }
        }
    },
    "sdk-master/python/util/menu_util.py": {},
    "sdk-master/python/util/messaging_standards.py": {
        "is_msg_too_long_for_sms": {
            "name": "is_msg_too_long_for_sms",
            "location": 4,
            "return": [
                "bool"
            ],
            "arguments": {
                "msg": [],
                "limit": []
            }
        }
    },
    "sdk-master/python/util/money_protocol.py": {
        "format_currency": {
            "name": "format_currency",
            "location": 129,
            "return": [
                "Any"
            ],
            "arguments": {
                "amount": [],
                "decimal_places": [],
                "currency": []
            }
        },
        "display_price": {
            "name": "display_price",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {
                "money": []
            }
        },
        "invoice_format_currency": {
            "name": "invoice_format_currency",
            "location": 144,
            "return": [
                "str"
            ],
            "arguments": {
                "amount": [],
                "currency": []
            }
        },
        "currency_converter_factory": {
            "name": "currency_converter_factory",
            "location": 153,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "convert_rule": []
            }
        },
        "quantize": {
            "name": "quantize",
            "location": 165,
            "return": [
                "Any"
            ],
            "arguments": {
                "amount": []
            }
        },
        "total_tax": {
            "name": "total_tax",
            "location": 170,
            "return": [
                "Any"
            ],
            "arguments": {
                "jobs": []
            }
        },
        "tax": {
            "name": "tax",
            "location": 175,
            "return": [
                "Any"
            ],
            "arguments": {
                "amount": [],
                "tax_type": []
            }
        },
        "subtotal": {
            "name": "subtotal",
            "location": 184,
            "return": [
                "Any"
            ],
            "arguments": {
                "jobs": []
            }
        },
        "currency_converter_factory.converter": {
            "name": "converter",
            "location": 158,
            "return": [],
            "arguments": {
                "money_input": []
            }
        }
    },
    "sdk-master/python/util/name_protocol.py": {
        "camelize": {
            "name": "camelize",
            "location": 9,
            "return": [
                "Any"
            ],
            "arguments": {
                "word": []
            }
        },
        "plural_to_singular": {
            "name": "plural_to_singular",
            "location": 17,
            "return": [
                "Any"
            ],
            "arguments": {
                "word": []
            }
        },
        "singular_to_plural": {
            "name": "singular_to_plural",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "word": []
            }
        },
        "parse_json_key_names": {
            "name": "parse_json_key_names",
            "location": 25,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "json_object": [
                    "_T0@@"
                ],
                "standard": []
            }
        },
        "parse_json_key_underscore": {
            "name": "parse_json_key_underscore",
            "location": 49,
            "return": [
                "Any"
            ],
            "arguments": {
                "json_object": []
            }
        },
        "parse_json_key_camel": {
            "name": "parse_json_key_camel",
            "location": 53,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "json_object": [
                    "_T0@@"
                ]
            }
        },
        "is_empty_json": {
            "name": "is_empty_json",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "json_object": []
            }
        },
        "clean_empty_json": {
            "name": "clean_empty_json",
            "location": 75,
            "return": [
                "dict"
            ],
            "arguments": {
                "json_object": []
            }
        },
        "unpack_recursive_json_iter": {
            "name": "unpack_recursive_json_iter",
            "location": 86,
            "return": [
                "dict"
            ],
            "arguments": {
                "json_object": [],
                "version": []
            }
        },
        "is_json_flat": {
            "name": "is_json_flat",
            "location": 135,
            "return": [
                "bool"
            ],
            "arguments": {
                "json_object": []
            }
        },
        "multidict_to_json": {
            "name": "multidict_to_json",
            "location": 142,
            "return": [
                "dict"
            ],
            "arguments": {
                "multidict": []
            }
        },
        "unpack_recursive_json": {
            "name": "unpack_recursive_json",
            "location": 149,
            "return": [
                "Union[(dict, _T0)]"
            ],
            "arguments": {
                "json_object": [
                    "_T0@@"
                ],
                "version_number": []
            }
        },
        "empty_content": {
            "name": "empty_content",
            "location": 155,
            "return": [
                "bool"
            ],
            "arguments": {
                "content": []
            }
        },
        "encode_backend_data": {
            "name": "encode_backend_data",
            "location": 159,
            "return": [
                "Any"
            ],
            "arguments": {
                "data_dict": []
            }
        },
        "unpack_recursive_json_iter.key_process": {
            "name": "key_process",
            "location": 99,
            "return": [],
            "arguments": {
                "key": []
            }
        }
    },
    "sdk-master/python/util/notification_constants.py": {},
    "sdk-master/python/util/notification_sources.py": {
        "section_string": {
            "name": "section_string",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "section_code": []
            }
        }
    },
    "sdk-master/python/util/notification_type.py": {},
    "sdk-master/python/util/notification_urgency.py": {
        "urgent_string": {
            "name": "urgent_string",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "urgent_code": []
            }
        }
    },
    "sdk-master/python/util/number.py": {
        "Number.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "scale": []
            }
        },
        "Number.whole_part": {
            "name": "whole_part",
            "location": 202,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Number.decimal_part": {
            "name": "decimal_part",
            "location": 208,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Number.__str__": {
            "name": "__str__",
            "location": 214,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Number.__repr__": {
            "name": "__repr__",
            "location": 244,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Number.__add__": {
            "name": "__add__",
            "location": 259,
            "return": [
                "_TNumber@@Number@@"
            ],
            "arguments": {
                "self": [
                    "_TNumber@@Number@@"
                ],
                "other": []
            }
        },
        "Number.__neg__": {
            "name": "__neg__",
            "location": 291,
            "return": [
                "_TNumber@@Number@@"
            ],
            "arguments": {
                "self": [
                    "_TNumber@@Number@@"
                ]
            }
        },
        "Number.__pos__": {
            "name": "__pos__",
            "location": 303,
            "return": [
                "_TNumber@@Number@@"
            ],
            "arguments": {
                "self": [
                    "_TNumber@@Number@@"
                ]
            }
        },
        "Number.__sub__": {
            "name": "__sub__",
            "location": 312,
            "return": [
                "_TNumber@@Number@@"
            ],
            "arguments": {
                "self": [
                    "_TNumber@@Number@@"
                ],
                "other": []
            }
        },
        "Number.__rsub__": {
            "name": "__rsub__",
            "location": 322,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Number.__abs__": {
            "name": "__abs__",
            "location": 332,
            "return": [
                "_TNumber@@Number@@"
            ],
            "arguments": {
                "self": [
                    "_TNumber@@Number@@"
                ]
            }
        },
        "Number.__mod__": {
            "name": "__mod__",
            "location": 344,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Number.__floordiv__": {
            "name": "__floordiv__",
            "location": 354,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Number.__truediv__": {
            "name": "__truediv__",
            "location": 364,
            "return": [
                "_TNumber@@Number@@"
            ],
            "arguments": {
                "self": [
                    "_TNumber@@Number@@"
                ],
                "other": []
            }
        },
        "Number.__rmul__": {
            "name": "__rmul__",
            "location": 385,
            "return": [
                "_TNumber@@Number@@"
            ],
            "arguments": {
                "self": [
                    "_TNumber@@Number@@"
                ],
                "other": []
            }
        },
        "Number.__divmod__": {
            "name": "__divmod__",
            "location": 395,
            "return": [
                "Tuple[(Number, Number)]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Number.__ceil__": {
            "name": "__ceil__",
            "location": 419,
            "return": [
                "_TNumber@@Number@@"
            ],
            "arguments": {
                "self": [
                    "_TNumber@@Number@@"
                ]
            }
        },
        "Number.__floor__": {
            "name": "__floor__",
            "location": 431,
            "return": [
                "_TNumber@@Number@@"
            ],
            "arguments": {
                "self": [
                    "_TNumber@@Number@@"
                ]
            }
        },
        "Number.sign": {
            "name": "sign",
            "location": 443,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Number.__round__": {
            "name": "__round__",
            "location": 450,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Number.exactly_equal": {
            "name": "exactly_equal",
            "location": 475,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Number.__mul__": {
            "name": "__mul__",
            "location": 488,
            "return": [
                "_TNumber@@Number@@"
            ],
            "arguments": {
                "self": [
                    "_TNumber@@Number@@"
                ],
                "other": []
            }
        },
        "Number.__float__": {
            "name": "__float__",
            "location": 520,
            "return": [
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Number.__int__": {
            "name": "__int__",
            "location": 527,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Number.__trunc__": {
            "name": "__trunc__",
            "location": 535,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Number.__delattr__": {
            "name": "__delattr__",
            "location": 543,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "attr": []
            }
        },
        "Number._cmp": {
            "name": "_cmp",
            "location": 547,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Number.__eq__": {
            "name": "__eq__",
            "location": 566,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Number.__le__": {
            "name": "__le__",
            "location": 574,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Number.__lt__": {
            "name": "__lt__",
            "location": 582,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Number.__ne__": {
            "name": "__ne__",
            "location": 590,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Number.__gt__": {
            "name": "__gt__",
            "location": 598,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Number.__ge__": {
            "name": "__ge__",
            "location": 606,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Number.__bool__": {
            "name": "__bool__",
            "location": 614,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Number.__round__.round_one": {
            "name": "round_one",
            "location": 461,
            "return": [],
            "arguments": {
                "yy": []
            }
        }
    },
    "sdk-master/python/util/ordinal_english.py": {
        "date_ordinal_english": {
            "name": "date_ordinal_english",
            "location": 1,
            "return": [
                "str"
            ],
            "arguments": {
                "date": []
            }
        },
        "rank_ordinal_english": {
            "name": "rank_ordinal_english",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "number": []
            }
        }
    },
    "sdk-master/python/util/passwords.py": {
        "get_password_dumps": {
            "name": "get_password_dumps",
            "location": 53,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {}
        },
        "get_passwords_from_dump": {
            "name": "get_passwords_from_dump",
            "location": 63,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {
                "filepath": []
            }
        },
        "get_passwords_from_dumps": {
            "name": "get_passwords_from_dumps",
            "location": 70,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {}
        },
        "normalise_for_db": {
            "name": "normalise_for_db",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "password": []
            }
        },
        "get_valid_passwords_from_dumps": {
            "name": "get_valid_passwords_from_dumps",
            "location": 86,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {}
        },
        "build_dawg_from_dumps": {
            "name": "build_dawg_from_dumps",
            "location": 100,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "compile_password_list": {
            "name": "compile_password_list",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "load_password_database": {
            "name": "load_password_database",
            "location": 118,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "get_password_database": {
            "name": "get_password_database",
            "location": 127,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "is_password_known_bad": {
            "name": "is_password_known_bad",
            "location": 137,
            "return": [
                "bool"
            ],
            "arguments": {
                "password": []
            }
        }
    },
    "sdk-master/python/util/paypal.py": {
        "parse_nvp_response": {
            "name": "parse_nvp_response",
            "location": 5,
            "return": [
                "Dict[(Any, list)]"
            ],
            "arguments": {
                "response": []
            }
        },
        "approve_url": {
            "name": "approve_url",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "token": []
            }
        },
        "make_nvp_request": {
            "name": "make_nvp_request",
            "location": 22,
            "return": [
                "Dict[(str, List[str])]"
            ],
            "arguments": {
                "data": []
            }
        },
        "create_payment_request": {
            "name": "create_payment_request",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {
                "paypal_account": [],
                "paypal_password": [],
                "paypal_signature": [],
                "success": [],
                "error": [],
                "amount": [],
                "currency": []
            }
        },
        "is_valid_credentials": {
            "name": "is_valid_credentials",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "paypal_account": [],
                "paypal_password": [],
                "paypal_signature": []
            }
        },
        "get_payment_details": {
            "name": "get_payment_details",
            "location": 71,
            "return": [
                "Any"
            ],
            "arguments": {
                "paypal_account": [],
                "paypal_password": [],
                "paypal_signature": [],
                "payment_token": []
            }
        },
        "complete_payment": {
            "name": "complete_payment",
            "location": 86,
            "return": [
                "Any"
            ],
            "arguments": {
                "paypal_account": [],
                "paypal_password": [],
                "paypal_signature": [],
                "payment_token": [],
                "payer_id": [],
                "amount": [],
                "currency": []
            }
        }
    },
    "sdk-master/python/util/product_types.py": {},
    "sdk-master/python/util/redirect.py": {
        "check_target_is_safe": {
            "name": "check_target_is_safe",
            "location": 4,
            "return": [
                "Any"
            ],
            "arguments": {
                "target": []
            }
        }
    },
    "sdk-master/python/util/rights.py": {
        "Rights.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "right_codes": []
            }
        },
        "Rights.to_dict": {
            "name": "to_dict",
            "location": 21,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rights.from_json": {
            "name": "from_json",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "right_codes": [],
                "makes_dirty": []
            }
        },
        "Rights.mask": {
            "name": "mask",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rights": []
            }
        }
    },
    "sdk-master/python/util/roles.py": {
        "role_string": {
            "name": "role_string",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "role_code": []
            }
        }
    },
    "sdk-master/python/util/s3.py": {
        "S3Bucket.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "access_key": [],
                "secret_key": [],
                "bucket_name": []
            }
        },
        "S3Bucket.upload_file": {
            "name": "upload_file",
            "location": 29,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "data": [],
                "mimetype": [],
                "filename": [],
                "with_retries": []
            }
        },
        "S3Bucket._upload_file": {
            "name": "_upload_file",
            "location": 49,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "data": [],
                "mimetype": [],
                "filename": []
            }
        },
        "S3Bucket.upload_stream": {
            "name": "upload_stream",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "file_row": []
            }
        },
        "S3Bucket.fetch_file": {
            "name": "fetch_file",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "S3Bucket.fetch_file_by_url": {
            "name": "fetch_file_by_url",
            "location": 84,
            "return": [
                "io.BytesIO"
            ],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "S3Bucket.fetch_view_url": {
            "name": "fetch_view_url",
            "location": 94,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "S3Bucket.fetch_download_url": {
            "name": "fetch_download_url",
            "location": 112,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "file_name": []
            }
        },
        "S3Bucket.delete_file": {
            "name": "delete_file",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "S3Bucket.all_keys": {
            "name": "all_keys",
            "location": 144,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sdk-master/python/util/serialise_methods.py": {},
    "sdk-master/python/util/shipping_companies.py": {},
    "sdk-master/python/util/status.py": {
        "status_info": {
            "name": "status_info",
            "location": 102,
            "return": [
                "Any"
            ],
            "arguments": {
                "status": [],
                "status_dict": [],
                "status_string": []
            }
        }
    },
    "sdk-master/python/util/stripe_util.py": {
        "is_valid_key": {
            "name": "is_valid_key",
            "location": 4,
            "return": [
                "bool"
            ],
            "arguments": {
                "x": []
            }
        }
    },
    "sdk-master/python/util/system_email_senders.py": {
        "make_email_address": {
            "name": "make_email_address",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "sender": [],
                "email_domain": []
            }
        },
        "from_invoices": {
            "name": "from_invoices",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "email_domain": []
            }
        }
    },
    "sdk-master/python/util/theme_status.py": {},
    "sdk-master/python/util/theme_util.py": {},
    "sdk-master/python/util/timezones.py": {},
    "sdk-master/python/util/time_util.py": {
        "get_tzinfo_from_timezone_name": {
            "name": "get_tzinfo_from_timezone_name",
            "location": 11,
            "return": [
                "Optional[datetime.tzinfo]"
            ],
            "arguments": {
                "timezone": []
            }
        },
        "parse_time": {
            "name": "parse_time",
            "location": 15,
            "return": [
                "Any"
            ],
            "arguments": {
                "time": [],
                "tzinfo": []
            }
        },
        "convert": {
            "name": "convert",
            "location": 28,
            "return": [
                "Any"
            ],
            "arguments": {
                "time": [],
                "from_tzinfo": [],
                "to_tzinfo": []
            }
        },
        "to_unix_timestamp": {
            "name": "to_unix_timestamp",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "time": []
            }
        },
        "from_unix_timestamp": {
            "name": "from_unix_timestamp",
            "location": 44,
            "return": [
                "datetime.datetime"
            ],
            "arguments": {
                "timestamp": []
            }
        },
        "hours_to_seconds": {
            "name": "hours_to_seconds",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "n": []
            }
        },
        "minutes_to_seconds": {
            "name": "minutes_to_seconds",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "n": []
            }
        },
        "has_date_past": {
            "name": "has_date_past",
            "location": 56,
            "return": [
                "Any"
            ],
            "arguments": {
                "date_attribute": []
            }
        },
        "is_date_near": {
            "name": "is_date_near",
            "location": 61,
            "return": [
                "Any"
            ],
            "arguments": {
                "date_attribute": [],
                "hours_until": []
            }
        }
    },
    "sdk-master/python/util/url.py": {
        "data_url_from_bytes": {
            "name": "data_url_from_bytes",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "byte_string": [],
                "mimetype": []
            }
        }
    },
    "sdk-master/python/util/user_types.py": {},
    "sdk-master/python/util/util.py": {
        "powerset": {
            "name": "powerset",
            "location": 4,
            "return": [
                "itertools.chain[tuple]"
            ],
            "arguments": {
                "iterable": []
            }
        },
        "merge": {
            "name": "merge",
            "location": 11,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "a": [
                    "_T0@@"
                ],
                "b": [],
                "path": []
            }
        },
        "is_empty_dict": {
            "name": "is_empty_dict",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "dictionary": []
            }
        }
    },
    "sdk-master/python/util/variation_field_type.py": {},
    "sdk-master/python/util/view_access_level.py": {},
    "sdk-master/python/util/weight_volume_utility.py": {
        "metric_weight": {
            "name": "metric_weight",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "weight": []
            }
        },
        "metric_volume": {
            "name": "metric_volume",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "volume": []
            }
        }
    },
    "sdk-master/python/util/__init__.py": {}
}
{
    "securedrop-sdk-main/setup.py": {},
    "securedrop-sdk-main/sdclientapi/sdlocalobjects.py": {
        "BaseError.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "BaseError.__str__": {
            "name": "__str__",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReplyError.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "ReplyError.__str__": {
            "name": "__str__",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WrongUUIDError.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "WrongUUIDError.__str__": {
            "name": "__str__",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthError.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "AuthError.__str__": {
            "name": "__str__",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttributeError.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "AttributeError.__str__": {
            "name": "__str__",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Reply.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Submission.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Submission.is_file": {
            "name": "is_file",
            "location": 146,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Source.__init__": {
            "name": "__init__",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.__init__": {
            "name": "__init__",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "securedrop-sdk-main/sdclientapi/timestamps.py": {
        "parse": {
            "name": "parse",
            "location": 5,
            "return": [
                "Optional[_datetime.datetime]"
            ],
            "arguments": {
                "date_string": []
            }
        }
    },
    "securedrop-sdk-main/sdclientapi/__init__.py": {
        "json_query": {
            "name": "json_query",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "proxy_vm_name": [],
                "data": [],
                "timeout": []
            }
        },
        "RequestTimeoutError.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerConnectionError.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "API.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [],
                "username": [],
                "passphrase": [],
                "totp": [],
                "proxy": [],
                "default_request_timeout": [],
                "default_download_timeout": []
            }
        },
        "API._send_json_request": {
            "name": "_send_json_request",
            "location": 125,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "method": [],
                "path_query": [],
                "body": [],
                "headers": [],
                "timeout": []
            }
        },
        "API._send_http_json_request": {
            "name": "_send_http_json_request",
            "location": 140,
            "return": [
                "Tuple[(Any, int, Dict[(str, str)])]"
            ],
            "arguments": {
                "self": [],
                "method": [],
                "path_query": [],
                "body": [],
                "headers": [],
                "timeout": []
            }
        },
        "API._send_rpc_json_request": {
            "name": "_send_rpc_json_request",
            "location": 173,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "method": [],
                "path_query": [],
                "body": [],
                "headers": [],
                "timeout": []
            }
        },
        "API.authenticate": {
            "name": "authenticate",
            "location": 222,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "totp": []
            }
        },
        "API.update_auth_header": {
            "name": "update_auth_header",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "API.get_sources": {
            "name": "get_sources",
            "location": 273,
            "return": [
                "List[sdclientapi.sdlocalobjects.Source]"
            ],
            "arguments": {
                "self": []
            }
        },
        "API.get_source": {
            "name": "get_source",
            "location": 298,
            "return": [
                "sdclientapi.sdlocalobjects.Source"
            ],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "API.get_source_from_string": {
            "name": "get_source_from_string",
            "location": 320,
            "return": [
                "sdclientapi.sdlocalobjects.Source"
            ],
            "arguments": {
                "self": [],
                "uuid": []
            }
        },
        "API.delete_source": {
            "name": "delete_source",
            "location": 331,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "API.delete_conversation": {
            "name": "delete_conversation",
            "location": 358,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "uuid": []
            }
        },
        "API.delete_source_from_string": {
            "name": "delete_source_from_string",
            "location": 386,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "uuid": []
            }
        },
        "API.add_star": {
            "name": "add_star",
            "location": 398,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "API.remove_star": {
            "name": "remove_star",
            "location": 422,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "API.get_submissions": {
            "name": "get_submissions",
            "location": 445,
            "return": [
                "List[sdclientapi.sdlocalobjects.Submission]"
            ],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "API.get_submission": {
            "name": "get_submission",
            "location": 474,
            "return": [
                "sdclientapi.sdlocalobjects.Submission"
            ],
            "arguments": {
                "self": [],
                "submission": []
            }
        },
        "API.get_submission_from_string": {
            "name": "get_submission_from_string",
            "location": 500,
            "return": [
                "sdclientapi.sdlocalobjects.Submission"
            ],
            "arguments": {
                "self": [],
                "uuid": [],
                "source_uuid": []
            }
        },
        "API.get_all_submissions": {
            "name": "get_all_submissions",
            "location": 512,
            "return": [
                "List[sdclientapi.sdlocalobjects.Submission]"
            ],
            "arguments": {
                "self": []
            }
        },
        "API.delete_submission": {
            "name": "delete_submission",
            "location": 537,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "submission": []
            }
        },
        "API.delete_submission_from_string": {
            "name": "delete_submission_from_string",
            "location": 567,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "uuid": [],
                "source_uuid": []
            }
        },
        "API.download_submission": {
            "name": "download_submission",
            "location": 579,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "submission": [],
                "path": [],
                "timeout": []
            }
        },
        "API.flag_source": {
            "name": "flag_source",
            "location": 629,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "API.get_current_user": {
            "name": "get_current_user",
            "location": 651,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "API.get_users": {
            "name": "get_users",
            "location": 675,
            "return": [
                "List[sdclientapi.sdlocalobjects.User]"
            ],
            "arguments": {
                "self": []
            }
        },
        "API.reply_source": {
            "name": "reply_source",
            "location": 701,
            "return": [
                "sdclientapi.sdlocalobjects.Reply"
            ],
            "arguments": {
                "self": [],
                "source": [],
                "msg": [],
                "reply_uuid": []
            }
        },
        "API.get_replies_from_source": {
            "name": "get_replies_from_source",
            "location": 730,
            "return": [
                "List[sdclientapi.sdlocalobjects.Reply]"
            ],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "API.get_reply_from_source": {
            "name": "get_reply_from_source",
            "location": 757,
            "return": [
                "sdclientapi.sdlocalobjects.Reply"
            ],
            "arguments": {
                "self": [],
                "source": [],
                "reply_uuid": []
            }
        },
        "API.get_all_replies": {
            "name": "get_all_replies",
            "location": 784,
            "return": [
                "List[sdclientapi.sdlocalobjects.Reply]"
            ],
            "arguments": {
                "self": []
            }
        },
        "API.download_reply": {
            "name": "download_reply",
            "location": 807,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "reply": [],
                "path": []
            }
        },
        "API.delete_reply": {
            "name": "delete_reply",
            "location": 856,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "reply": []
            }
        },
        "API.logout": {
            "name": "logout",
            "location": 885,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "API.seen": {
            "name": "seen",
            "location": 904,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "files": [],
                "messages": [],
                "replies": []
            }
        }
    },
    "securedrop-sdk-main/tests/conftest.py": {
        "pytest_unconfigure": {
            "name": "pytest_unconfigure",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "config": []
            }
        }
    },
    "securedrop-sdk-main/tests/test_api.py": {
        "test_request_connect_timeout": {
            "name": "test_request_connect_timeout",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_request_read_timeout": {
            "name": "test_request_read_timeout",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_download_reply_timeout": {
            "name": "test_download_reply_timeout",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_download_submission_timeout": {
            "name": "test_download_submission_timeout",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "TestAPI.setup_method": {
            "name": "setup_method",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_auth_baduser": {
            "name": "test_auth_baduser",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_auth_badpassword": {
            "name": "test_auth_badpassword",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_auth_badotp": {
            "name": "test_auth_badotp",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_api_auth": {
            "name": "test_api_auth",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_download_submission": {
            "name": "test_download_submission",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_seen": {
            "name": "test_seen",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_get_sources": {
            "name": "test_get_sources",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_star_add_remove": {
            "name": "test_star_add_remove",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_get_single_source": {
            "name": "test_get_single_source",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_get_single_source_from_string": {
            "name": "test_get_single_source_from_string",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_failed_single_source": {
            "name": "test_failed_single_source",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_get_submissions": {
            "name": "test_get_submissions",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_get_submission": {
            "name": "test_get_submission",
            "location": 141,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_get_submission_from_string": {
            "name": "test_get_submission_from_string",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_get_wrong_submissions": {
            "name": "test_get_wrong_submissions",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_get_all_submissions": {
            "name": "test_get_all_submissions",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_flag_source": {
            "name": "test_flag_source",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_get_current_user": {
            "name": "test_get_current_user",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_get_users": {
            "name": "test_get_users",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_error_unencrypted_reply": {
            "name": "test_error_unencrypted_reply",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_get_replies_from_source": {
            "name": "test_get_replies_from_source",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_get_reply_from_source": {
            "name": "test_get_reply_from_source",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_get_all_replies": {
            "name": "test_get_all_replies",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_download_reply": {
            "name": "test_download_reply",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_reply_source": {
            "name": "test_reply_source",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_reply_source_with_uuid": {
            "name": "test_reply_source_with_uuid",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_delete_conversation": {
            "name": "test_delete_conversation",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_delete_source": {
            "name": "test_delete_source",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_delete_source_from_string": {
            "name": "test_delete_source_from_string",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_delete_submission": {
            "name": "test_delete_submission",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_delete_submission_from_string": {
            "name": "test_delete_submission_from_string",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_delete_reply": {
            "name": "test_delete_reply",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPI.test_zlogout": {
            "name": "test_zlogout",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "securedrop-sdk-main/tests/test_apiproxy.py": {
        "test_request_timeout": {
            "name": "test_request_timeout",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_download_reply_timeout": {
            "name": "test_download_reply_timeout",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_download_submission_timeout": {
            "name": "test_download_submission_timeout",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_download_get_sources_error_request_timeout": {
            "name": "test_download_get_sources_error_request_timeout",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_filename_key_not_in_download_response": {
            "name": "test_filename_key_not_in_download_response",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "TestAPIProxy.setup_method": {
            "name": "setup_method",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPIProxy.test_api_auth": {
            "name": "test_api_auth",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPIProxy.test_download_submission": {
            "name": "test_download_submission",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPIProxy.test_seen": {
            "name": "test_seen",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPIProxy.test_get_sources": {
            "name": "test_get_sources",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPIProxy.test_star_add_remove": {
            "name": "test_star_add_remove",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPIProxy.test_get_single_source": {
            "name": "test_get_single_source",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPIProxy.test_get_single_source_from_string": {
            "name": "test_get_single_source_from_string",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPIProxy.test_failed_single_source": {
            "name": "test_failed_single_source",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPIProxy.test_get_submissions": {
            "name": "test_get_submissions",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPIProxy.test_get_submission": {
            "name": "test_get_submission",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPIProxy.test_get_submission_from_string": {
            "name": "test_get_submission_from_string",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPIProxy.test_get_wrong_submissions": {
            "name": "test_get_wrong_submissions",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPIProxy.test_get_all_submissions": {
            "name": "test_get_all_submissions",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPIProxy.test_flag_source": {
            "name": "test_flag_source",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPIProxy.test_get_current_user": {
            "name": "test_get_current_user",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPIProxy.test_get_users": {
            "name": "test_get_users",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPIProxy.test_error_unencrypted_reply": {
            "name": "test_error_unencrypted_reply",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPIProxy.test_get_replies_from_source": {
            "name": "test_get_replies_from_source",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPIProxy.test_get_reply_from_source": {
            "name": "test_get_reply_from_source",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPIProxy.test_get_all_replies": {
            "name": "test_get_all_replies",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPIProxy.test_download_reply": {
            "name": "test_download_reply",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPIProxy.test_reply_source": {
            "name": "test_reply_source",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPIProxy.test_reply_source_with_uuid": {
            "name": "test_reply_source_with_uuid",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPIProxy.test_delete_conversation": {
            "name": "test_delete_conversation",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPIProxy.test_delete_source": {
            "name": "test_delete_source",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPIProxy.test_delete_source_from_string": {
            "name": "test_delete_source_from_string",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPIProxy.test_delete_submission": {
            "name": "test_delete_submission",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPIProxy.test_delete_submission_from_string": {
            "name": "test_delete_submission_from_string",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPIProxy.test_delete_reply": {
            "name": "test_delete_reply",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAPIProxy.test_logout": {
            "name": "test_logout",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_request_timeout.MockedPopen.__init__": {
            "name": "__init__",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_request_timeout.MockedPopen.communicate": {
            "name": "communicate",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_download_reply_timeout.MockedPopen.__init__": {
            "name": "__init__",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_download_reply_timeout.MockedPopen.communicate": {
            "name": "communicate",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_download_submission_timeout.MockedPopen.__init__": {
            "name": "__init__",
            "location": 232,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_download_submission_timeout.MockedPopen.communicate": {
            "name": "communicate",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "securedrop-sdk-main/tests/test_shared.py": {
        "TestShared.api_auth": {
            "name": "api_auth",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShared.delete_conversation": {
            "name": "delete_conversation",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShared.delete_source": {
            "name": "delete_source",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "from_string": []
            }
        },
        "TestShared.failed_single_source": {
            "name": "failed_single_source",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShared.flag_source": {
            "name": "flag_source",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShared.get_single_source": {
            "name": "get_single_source",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "from_string": []
            }
        },
        "TestShared.get_sources": {
            "name": "get_sources",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShared.delete_submission": {
            "name": "delete_submission",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "from_string": []
            }
        },
        "TestShared.get_submission": {
            "name": "get_submission",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "from_string": []
            }
        },
        "TestShared.get_all_submissions": {
            "name": "get_all_submissions",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShared.get_submissions": {
            "name": "get_submissions",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShared.get_wrong_submissions": {
            "name": "get_wrong_submissions",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShared.error_unencrypted_reply": {
            "name": "error_unencrypted_reply",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShared.delete_reply": {
            "name": "delete_reply",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShared.get_replies_from_source": {
            "name": "get_replies_from_source",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShared.get_reply_from_source": {
            "name": "get_reply_from_source",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShared.get_all_replies": {
            "name": "get_all_replies",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShared.reply_source": {
            "name": "reply_source",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShared.reply_source_with_uuid": {
            "name": "reply_source_with_uuid",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShared.get_current_user": {
            "name": "get_current_user",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShared.get_users": {
            "name": "get_users",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShared.seen": {
            "name": "seen",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShared.star_add_remove": {
            "name": "star_add_remove",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "securedrop-sdk-main/tests/test_timestamps.py": {
        "TestTimestamps.test_parse_invalid_date_string_returns_none": {
            "name": "test_parse_invalid_date_string_returns_none",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimestamps.test_parse_iso8061_returns_appropriate_time_zone_info": {
            "name": "test_parse_iso8061_returns_appropriate_time_zone_info",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimestamps.test_parse_iso8061_Z_returns_appropriate_time_zone_info": {
            "name": "test_parse_iso8061_Z_returns_appropriate_time_zone_info",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimestamps.test_parse_known_invalid_format_suceeds": {
            "name": "test_parse_known_invalid_format_suceeds",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "securedrop-sdk-main/tests/utils.py": {
        "mocked_json_query": {
            "name": "mocked_json_query",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "qrexec_datasaver": {
            "name": "qrexec_datasaver",
            "location": 86,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": []
            }
        },
        "qrexec_datasaver.wrapper": {
            "name": "wrapper",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    }
}
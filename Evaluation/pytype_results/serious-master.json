{
    "serious-master/setup.py": {
        "readme": {
            "name": "readme",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "serious-master/serious/checks.py": {
        "check_is_instance": {
            "name": "check_is_instance",
            "location": 7,
            "return": [
                "T"
            ],
            "arguments": {
                "value": [
                    "T"
                ],
                "type_": [
                    "Type[T]"
                ],
                "message": [
                    "str"
                ]
            }
        }
    },
    "serious-master/serious/descriptors.py": {
        "describe": {
            "name": "describe",
            "location": 59,
            "return": [
                "TypeDescriptor"
            ],
            "arguments": {
                "type_": [
                    "type"
                ],
                "generic_params": [
                    "Mapping[(Any, TypeDescriptor)]"
                ]
            }
        },
        "_get_default_generic_params": {
            "name": "_get_default_generic_params",
            "location": 81,
            "return": [
                "Mapping[(Any, TypeDescriptor)]"
            ],
            "arguments": {
                "cls": [
                    "type"
                ],
                "params": [
                    "Mapping[(Any, TypeDescriptor)]"
                ]
            }
        },
        "_describe_generic": {
            "name": "_describe_generic",
            "location": 95,
            "return": [
                "TypeDescriptor"
            ],
            "arguments": {
                "cls": [
                    "type"
                ],
                "generic_params": [
                    "Mapping[(Any, TypeDescriptor)]"
                ]
            }
        },
        "_collect_type_vars": {
            "name": "_collect_type_vars",
            "location": 137,
            "return": [
                "Mapping[(Any, TypeDescriptor)]"
            ],
            "arguments": {
                "alias": [],
                "generic_params": [
                    "Mapping[(Any, TypeDescriptor)]"
                ]
            }
        },
        "scan_types": {
            "name": "scan_types",
            "location": 172,
            "return": [
                "DescTypes"
            ],
            "arguments": {
                "desc": [
                    "TypeDescriptor"
                ]
            }
        },
        "_is_optional": {
            "name": "_is_optional",
            "location": 179,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "type"
                ]
            }
        },
        "TypeDescriptor.cls": {
            "name": "cls",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeDescriptor.fields": {
            "name": "fields",
            "location": 45,
            "return": [
                "Tuple[(dataclasses.Field, ...)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TypeDescriptor.describe": {
            "name": "describe",
            "location": 55,
            "return": [
                "_TTypeDescriptor"
            ],
            "arguments": {
                "self": [
                    "_TTypeDescriptor"
                ],
                "type_": [
                    "type"
                ]
            }
        },
        "DescTypes.__init__": {
            "name": "__init__",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "types": [
                    "Iterable[type]"
                ]
            }
        },
        "DescTypes.scan": {
            "name": "scan",
            "location": 149,
            "return": [
                "_TDescTypes"
            ],
            "arguments": {
                "cls": [
                    "Type[_TDescTypes]"
                ],
                "desc": [
                    "TypeDescriptor"
                ]
            }
        },
        "DescTypes.__setattr__": {
            "name": "__setattr__",
            "location": 162,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "DescTypes.__contains__": {
            "name": "__contains__",
            "location": 165,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        }
    },
    "serious-master/serious/errors.py": {
        "SerializationError.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "type"
                ],
                "serializer_stack": [
                    "Collection[serious.serialization.context.SerializationStep]"
                ]
            }
        },
        "SerializationError.__parse_stack": {
            "name": "__parse_stack",
            "location": 47,
            "return": [],
            "arguments": {
                "serializer_stack": []
            }
        },
        "SerializationError.message": {
            "name": "message",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SerializationError.__str__": {
            "name": "__str__",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoadError.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "type"
                ],
                "serializer_stack": [
                    "Collection[serious.serialization.context.SerializationStep]"
                ],
                "data": [
                    "Mapping"
                ]
            }
        },
        "LoadError.message": {
            "name": "message",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DumpError.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": [],
                "serializer_stack": [
                    "Collection[serious.serialization.context.SerializationStep]"
                ]
            }
        },
        "DumpError.message": {
            "name": "message",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UnexpectedItem.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "type"
                ],
                "data": [],
                "fields": [
                    "Collection[str]"
                ]
            }
        },
        "UnexpectedItem.message": {
            "name": "message",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MissingField.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "type"
                ],
                "data": [],
                "fields": [
                    "Collection[str]"
                ]
            }
        },
        "MissingField.message": {
            "name": "message",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelError.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "type"
                ]
            }
        },
        "ModelError.message": {
            "name": "message",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FieldMissingSerializer.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "type"
                ],
                "desc": [
                    "serious.descriptors.TypeDescriptor"
                ]
            }
        },
        "FieldMissingSerializer.message": {
            "name": "message",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelContainsAny.message": {
            "name": "message",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelContainsUnion.message": {
            "name": "message",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MutableTypesInModel.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "type"
                ],
                "mutable_types": [
                    "Iterable[type]"
                ]
            }
        },
        "MutableTypesInModel.message": {
            "name": "message",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ValidationError.__init__": {
            "name": "__init__",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        }
    },
    "serious-master/serious/test_utils.py": {
        "assert_symmetric": {
            "name": "assert_symmetric",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "serializer": [
                    "Union[(serious.dict.model.DictModel, serious.json.model.JsonModel)]"
                ],
                "value": []
            }
        }
    },
    "serious-master/serious/types.py": {
        "FrozenDict.__hash__": {
            "name": "__hash__",
            "location": 30,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrozenDict._immutable": {
            "name": "_immutable",
            "location": 36,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timestamp.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Timestamp._datetime_value": {
            "name": "_datetime_value",
            "location": 108,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        },
        "Timestamp.as_datetime": {
            "name": "as_datetime",
            "location": 114,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timestamp.as_iso": {
            "name": "as_iso",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timestamp.__setattr__": {
            "name": "__setattr__",
            "location": 122,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "Timestamp.__eq__": {
            "name": "__eq__",
            "location": 126,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "object"
                ]
            }
        },
        "Timestamp.__lt__": {
            "name": "__lt__",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Timestamp"
                ]
            }
        },
        "Timestamp.__le__": {
            "name": "__le__",
            "location": 137,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Timestamp"
                ]
            }
        },
        "Timestamp.__ge__": {
            "name": "__ge__",
            "location": 142,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Timestamp"
                ]
            }
        },
        "Timestamp.__gt__": {
            "name": "__gt__",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Timestamp"
                ]
            }
        },
        "Timestamp.__str__": {
            "name": "__str__",
            "location": 152,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timestamp.__repr__": {
            "name": "__repr__",
            "location": 156,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Email.__new__": {
            "name": "__new__",
            "location": 169,
            "return": [
                "_TEmail"
            ],
            "arguments": {
                "cls": [
                    "Type[_TEmail]"
                ],
                "content": [
                    "str"
                ]
            }
        },
        "Email.username": {
            "name": "username",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Email.label": {
            "name": "label",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Email.domain": {
            "name": "domain",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Email.__validate__": {
            "name": "__validate__",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Email.__repr__": {
            "name": "__repr__",
            "location": 191,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "serious-master/serious/utils.py": {
        "class_path": {
            "name": "class_path",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "type"
                ]
            }
        }
    },
    "serious-master/serious/validation.py": {
        "validate": {
            "name": "validate",
            "location": 22,
            "return": [
                "T"
            ],
            "arguments": {
                "obj": [
                    "T"
                ]
            }
        }
    },
    "serious-master/serious/__init__.py": {},
    "serious-master/serious/dict/model.py": {
        "DictModel.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type[T]"
                ],
                "serializers": [
                    "Iterable[Type[serious.serialization.serializer.FieldSerializer]]"
                ]
            }
        },
        "DictModel.load": {
            "name": "load",
            "location": 81,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "DictModel.load_many": {
            "name": "load_many",
            "location": 85,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "Iterable[Dict[(str, Any)]]"
                ]
            }
        },
        "DictModel.dump": {
            "name": "dump",
            "location": 89,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "T"
                ]
            }
        },
        "DictModel.dump_many": {
            "name": "dump_many",
            "location": 93,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "Collection[T]"
                ]
            }
        },
        "DictModel.__repr__": {
            "name": "__repr__",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "serious-master/serious/dict/__init__.py": {},
    "serious-master/serious/json/checks.py": {
        "check_that_loading_an_object": {
            "name": "check_that_loading_an_object",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [],
                "cls": [
                    "type"
                ]
            }
        },
        "check_that_loading_a_list": {
            "name": "check_that_loading_a_list",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [],
                "cls": [
                    "type"
                ]
            }
        }
    },
    "serious-master/serious/json/errors.py": {
        "UnexpectedJson.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extra_message": []
            }
        }
    },
    "serious-master/serious/json/model.py": {
        "JsonModel.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "Type[T]"
                ],
                "serializers": [
                    "Iterable[Type[serious.serialization.serializer.FieldSerializer]]"
                ]
            }
        },
        "JsonModel.load": {
            "name": "load",
            "location": 88,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "json_": [
                    "str"
                ]
            }
        },
        "JsonModel.load_many": {
            "name": "load_many",
            "location": 94,
            "return": [
                "List[T]"
            ],
            "arguments": {
                "self": [],
                "json_": [
                    "str"
                ]
            }
        },
        "JsonModel.dump": {
            "name": "dump",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "T"
                ]
            }
        },
        "JsonModel.dump_many": {
            "name": "dump_many",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "Collection[T]"
                ]
            }
        },
        "JsonModel._load_from_str": {
            "name": "_load_from_str",
            "location": 110,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "json_": [
                    "str"
                ]
            }
        },
        "JsonModel._dump_to_str": {
            "name": "_dump_to_str",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "dict_items": []
            }
        },
        "JsonModel.__repr__": {
            "name": "__repr__",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonKeyMapper.to_model": {
            "name": "to_model",
            "location": 135,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "JsonKeyMapper.to_serialized": {
            "name": "to_serialized",
            "location": 138,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ]
            }
        }
    },
    "serious-master/serious/json/utils.py": {
        "camel_to_snake": {
            "name": "camel_to_snake",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "camel": [
                    "str"
                ]
            }
        },
        "snake_to_camel": {
            "name": "snake_to_camel",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "snake": [
                    "str"
                ]
            }
        }
    },
    "serious-master/serious/json/__init__.py": {},
    "serious-master/serious/serialization/check_immutable.py": {
        "check_immutable": {
            "name": "check_immutable",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "desc": [
                    "serious.descriptors.TypeDescriptor"
                ],
                "all_types": [
                    "serious.descriptors.DescTypes"
                ],
                "ensure_frozen": [
                    "Union[(bool, Iterable[type])]"
                ]
            }
        },
        "extract_mutable": {
            "name": "extract_mutable",
            "location": 30,
            "return": [
                "List[type]"
            ],
            "arguments": {
                "desc": [
                    "serious.descriptors.DescTypes"
                ],
                "also_immutable": [
                    "Iterable[type]"
                ]
            }
        },
        "is_frozen_dc": {
            "name": "is_frozen_dc",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "type_": []
            }
        }
    },
    "serious-master/serious/serialization/context.py": {
        "Context.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context._entering": {
            "name": "_entering",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "step": [],
                "serializer": []
            }
        },
        "Context.stack": {
            "name": "stack",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.run": {
            "name": "run",
            "location": 43,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "step": [
                    "str"
                ],
                "serializer": [
                    "serious.serialization.serializer.Serializer"
                ],
                "value": []
            }
        },
        "Loading.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Loading.run": {
            "name": "run",
            "location": 65,
            "return": [
                "M"
            ],
            "arguments": {
                "self": [],
                "step": [
                    "str"
                ],
                "serializer": [
                    "serious.serialization.serializer.Serializer[(M, S)]"
                ],
                "value": [
                    "S"
                ]
            }
        },
        "Dumping.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dumping.run": {
            "name": "run",
            "location": 79,
            "return": [
                "S"
            ],
            "arguments": {
                "self": [],
                "step": [
                    "str"
                ],
                "serializer": [
                    "serious.serialization.serializer.Serializer[(M, S)]"
                ],
                "o": [
                    "M"
                ]
            }
        }
    },
    "serious-master/serious/serialization/field_serializers.py": {
        "field_serializers": {
            "name": "field_serializers",
            "location": 26,
            "return": [
                "Tuple[(Type[serious.serialization.serializer.FieldSerializer], ...)]"
            ],
            "arguments": {
                "custom": [
                    "Iterable[Type[serious.serialization.serializer.FieldSerializer]]"
                ]
            }
        },
        "_matches": {
            "name": "_matches",
            "location": 567,
            "return": [
                "bool"
            ],
            "arguments": {
                "regex": [
                    "Pattern"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "OptionalSerializer.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OptionalSerializer.load": {
            "name": "load",
            "location": 75,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "ctx": [
                    "serious.serialization.context.Loading"
                ]
            }
        },
        "OptionalSerializer.dump": {
            "name": "dump",
            "location": 78,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "ctx": [
                    "serious.serialization.context.Dumping"
                ]
            }
        },
        "OptionalSerializer.fits": {
            "name": "fits",
            "location": 82,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "desc": [
                    "serious.descriptors.TypeDescriptor"
                ]
            }
        },
        "EnumSerializer.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumSerializer._value_serializer": {
            "name": "_value_serializer",
            "location": 115,
            "return": [
                "Optional[serious.serialization.serializer.FieldSerializer]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EnumSerializer.load": {
            "name": "load",
            "location": 126,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "ctx": [
                    "serious.serialization.context.Loading"
                ]
            }
        },
        "EnumSerializer.dump": {
            "name": "dump",
            "location": 138,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "ctx": [
                    "serious.serialization.context.Dumping"
                ]
            }
        },
        "EnumSerializer.fits": {
            "name": "fits",
            "location": 144,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "desc": [
                    "serious.descriptors.TypeDescriptor"
                ]
            }
        },
        "AnySerializer.load": {
            "name": "load",
            "location": 151,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "ctx": [
                    "serious.serialization.context.Loading"
                ]
            }
        },
        "AnySerializer.dump": {
            "name": "dump",
            "location": 154,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "ctx": [
                    "serious.serialization.context.Dumping"
                ]
            }
        },
        "AnySerializer.fits": {
            "name": "fits",
            "location": 158,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "desc": [
                    "serious.descriptors.TypeDescriptor"
                ]
            }
        },
        "DictSerializer.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictSerializer.fits": {
            "name": "fits",
            "location": 172,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "desc": [
                    "serious.descriptors.TypeDescriptor"
                ]
            }
        },
        "DictSerializer.load": {
            "name": "load",
            "location": 175,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[(str, Any)]"
                ],
                "ctx": [
                    "serious.serialization.context.Loading"
                ]
            }
        },
        "DictSerializer.dump": {
            "name": "dump",
            "location": 181,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[(str, Any)]"
                ],
                "ctx": [
                    "serious.serialization.context.Dumping"
                ]
            }
        },
        "DictSerializer._serialize_dict": {
            "name": "_serialize_dict",
            "location": 184,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[(str, Any)]"
                ],
                "ctx": [
                    "serious.serialization.context.Context"
                ]
            }
        },
        "CollectionSerializer.__init__": {
            "name": "__init__",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CollectionSerializer.fits": {
            "name": "fits",
            "location": 201,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "desc": [
                    "serious.descriptors.TypeDescriptor"
                ]
            }
        },
        "CollectionSerializer.load": {
            "name": "load",
            "location": 207,
            "return": [
                "Union[(frozenset, list, set)]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "list"
                ],
                "ctx": [
                    "serious.serialization.context.Loading"
                ]
            }
        },
        "CollectionSerializer.dump": {
            "name": "dump",
            "location": 213,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Union[(frozenset, list, set)]"
                ],
                "ctx": [
                    "serious.serialization.context.Dumping"
                ]
            }
        },
        "CollectionSerializer._serialize_collection": {
            "name": "_serialize_collection",
            "location": 216,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "ctx": [
                    "serious.serialization.context.Context"
                ]
            }
        },
        "TupleSerializer.__init__": {
            "name": "__init__",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TupleSerializer.fits": {
            "name": "fits",
            "location": 230,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "desc": [
                    "serious.descriptors.TypeDescriptor"
                ]
            }
        },
        "TupleSerializer.load": {
            "name": "load",
            "location": 233,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "list"
                ],
                "ctx": [
                    "serious.serialization.context.Loading"
                ]
            }
        },
        "TupleSerializer.dump": {
            "name": "dump",
            "location": 241,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "tuple"
                ],
                "ctx": [
                    "serious.serialization.context.Dumping"
                ]
            }
        },
        "TupleSerializer._serialize_tuple": {
            "name": "_serialize_tuple",
            "location": 244,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "ctx": [
                    "serious.serialization.context.Context"
                ]
            }
        },
        "Alias.__init__": {
            "name": "__init__",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serializer": []
            }
        },
        "Alias.__call__": {
            "name": "__call__",
            "location": 255,
            "return": [
                "_TAlias"
            ],
            "arguments": {
                "self": [
                    "_TAlias"
                ],
                "key": [
                    "Union[(int, str)]"
                ]
            }
        },
        "Alias.step_name": {
            "name": "step_name",
            "location": 259,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alias.load": {
            "name": "load",
            "location": 262,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "ctx": [
                    "serious.serialization.context.Loading"
                ]
            }
        },
        "Alias.dump": {
            "name": "dump",
            "location": 265,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "ctx": [
                    "serious.serialization.context.Dumping"
                ]
            }
        },
        "OrdinalAlias.__init__": {
            "name": "__init__",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "serializers": [
                    "List[serious.serialization.serializer.Serializer]"
                ]
            }
        },
        "OrdinalAlias.__call__": {
            "name": "__call__",
            "location": 278,
            "return": [
                "_TOrdinalAlias"
            ],
            "arguments": {
                "self": [
                    "_TOrdinalAlias"
                ],
                "index": [
                    "int"
                ]
            }
        },
        "OrdinalAlias.step_name": {
            "name": "step_name",
            "location": 282,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrdinalAlias.load": {
            "name": "load",
            "location": 285,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "ctx": [
                    "serious.serialization.context.Loading"
                ]
            }
        },
        "OrdinalAlias.dump": {
            "name": "dump",
            "location": 288,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "ctx": [
                    "serious.serialization.context.Dumping"
                ]
            }
        },
        "BooleanSerializer.fits": {
            "name": "fits",
            "location": 296,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "desc": [
                    "serious.descriptors.TypeDescriptor"
                ]
            }
        },
        "BooleanSerializer.load": {
            "name": "load",
            "location": 299,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ],
                "ctx": [
                    "serious.serialization.context.Loading"
                ]
            }
        },
        "BooleanSerializer.dump": {
            "name": "dump",
            "location": 304,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool"
                ],
                "ctx": [
                    "serious.serialization.context.Dumping"
                ]
            }
        },
        "StringSerializer.fits": {
            "name": "fits",
            "location": 312,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "desc": [
                    "serious.descriptors.TypeDescriptor"
                ]
            }
        },
        "StringSerializer.load": {
            "name": "load",
            "location": 315,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "ctx": [
                    "serious.serialization.context.Loading"
                ]
            }
        },
        "StringSerializer.dump": {
            "name": "dump",
            "location": 320,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "ctx": [
                    "serious.serialization.context.Dumping"
                ]
            }
        },
        "IntegerSerializer.fits": {
            "name": "fits",
            "location": 332,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "desc": [
                    "serious.descriptors.TypeDescriptor"
                ]
            }
        },
        "IntegerSerializer.load": {
            "name": "load",
            "location": 335,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ],
                "ctx": [
                    "serious.serialization.context.Loading"
                ]
            }
        },
        "IntegerSerializer.dump": {
            "name": "dump",
            "location": 340,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ],
                "ctx": [
                    "serious.serialization.context.Dumping"
                ]
            }
        },
        "FloatSerializer.fits": {
            "name": "fits",
            "location": 350,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "desc": [
                    "serious.descriptors.TypeDescriptor"
                ]
            }
        },
        "FloatSerializer.load": {
            "name": "load",
            "location": 353,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ],
                "ctx": [
                    "serious.serialization.context.Loading"
                ]
            }
        },
        "FloatSerializer.dump": {
            "name": "dump",
            "location": 359,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ],
                "ctx": [
                    "serious.serialization.context.Dumping"
                ]
            }
        },
        "DataclassSerializer.__init__": {
            "name": "__init__",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataclassSerializer.fits": {
            "name": "fits",
            "location": 372,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "desc": [
                    "serious.descriptors.TypeDescriptor"
                ]
            }
        },
        "DataclassSerializer.load": {
            "name": "load",
            "location": 375,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Dict[(str, Any)]"
                ],
                "ctx": [
                    "serious.serialization.context.Loading"
                ]
            }
        },
        "DataclassSerializer.dump": {
            "name": "dump",
            "location": 380,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "ctx": [
                    "serious.serialization.context.Dumping"
                ]
            }
        },
        "UtcTimestampSerializer.fits": {
            "name": "fits",
            "location": 401,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "desc": [
                    "serious.descriptors.TypeDescriptor"
                ]
            }
        },
        "UtcTimestampSerializer.load": {
            "name": "load",
            "location": 404,
            "return": [
                "serious.types.Timestamp"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float"
                ],
                "ctx": [
                    "serious.serialization.context.Loading"
                ]
            }
        },
        "UtcTimestampSerializer.dump": {
            "name": "dump",
            "location": 409,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "serious.types.Timestamp"
                ],
                "ctx": [
                    "serious.serialization.context.Dumping"
                ]
            }
        },
        "DateTimeIsoSerializer.load": {
            "name": "load",
            "location": 446,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "ctx": [
                    "serious.serialization.context.Loading"
                ]
            }
        },
        "DateTimeIsoSerializer.dump": {
            "name": "dump",
            "location": 453,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "_datetime.datetime"
                ],
                "ctx": [
                    "serious.serialization.context.Dumping"
                ]
            }
        },
        "DateTimeIsoSerializer.fits": {
            "name": "fits",
            "location": 457,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "desc": [
                    "serious.descriptors.TypeDescriptor"
                ]
            }
        },
        "DateIsoSerializer.load": {
            "name": "load",
            "location": 478,
            "return": [
                "_datetime.date"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "ctx": [
                    "serious.serialization.context.Loading"
                ]
            }
        },
        "DateIsoSerializer.dump": {
            "name": "dump",
            "location": 485,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "_datetime.date"
                ],
                "ctx": [
                    "serious.serialization.context.Dumping"
                ]
            }
        },
        "DateIsoSerializer.fits": {
            "name": "fits",
            "location": 489,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "desc": [
                    "serious.descriptors.TypeDescriptor"
                ]
            }
        },
        "TimeIsoSerializer.load": {
            "name": "load",
            "location": 510,
            "return": [
                "_datetime.time"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "ctx": [
                    "serious.serialization.context.Loading"
                ]
            }
        },
        "TimeIsoSerializer.dump": {
            "name": "dump",
            "location": 517,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "_datetime.time"
                ],
                "ctx": [
                    "serious.serialization.context.Dumping"
                ]
            }
        },
        "TimeIsoSerializer.fits": {
            "name": "fits",
            "location": 521,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "desc": [
                    "serious.descriptors.TypeDescriptor"
                ]
            }
        },
        "UuidSerializer.load": {
            "name": "load",
            "location": 531,
            "return": [
                "uuid.UUID"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "ctx": [
                    "serious.serialization.context.Loading"
                ]
            }
        },
        "UuidSerializer.dump": {
            "name": "dump",
            "location": 538,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "uuid.UUID"
                ],
                "ctx": [
                    "serious.serialization.context.Dumping"
                ]
            }
        },
        "UuidSerializer.fits": {
            "name": "fits",
            "location": 542,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "desc": [
                    "serious.descriptors.TypeDescriptor"
                ]
            }
        },
        "DecimalSerializer.load": {
            "name": "load",
            "location": 552,
            "return": [
                "decimal.Decimal"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ],
                "ctx": [
                    "serious.serialization.context.Loading"
                ]
            }
        },
        "DecimalSerializer.dump": {
            "name": "dump",
            "location": 559,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "decimal.Decimal"
                ],
                "ctx": [
                    "serious.serialization.context.Dumping"
                ]
            }
        },
        "DecimalSerializer.fits": {
            "name": "fits",
            "location": 563,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "desc": [
                    "serious.descriptors.TypeDescriptor"
                ]
            }
        }
    },
    "serious-master/serious/serialization/key_mapper.py": {
        "KeyMapper.to_model": {
            "name": "to_model",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "KeyMapper.to_serialized": {
            "name": "to_serialized",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ]
            }
        },
        "NoopKeyMapper.to_model": {
            "name": "to_model",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "NoopKeyMapper.to_serialized": {
            "name": "to_serialized",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str"
                ]
            }
        }
    },
    "serious-master/serious/serialization/model.py": {
        "check_for_missing": {
            "name": "check_for_missing",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "type"
                ],
                "data": [
                    "Mapping"
                ]
            }
        },
        "check_for_unexpected": {
            "name": "check_for_unexpected",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "type"
                ],
                "data": [
                    "Mapping"
                ]
            }
        },
        "fields_missing_from": {
            "name": "fields_missing_from",
            "location": 209,
            "return": [
                "Iterator[dataclasses.Field]"
            ],
            "arguments": {
                "data": [
                    "Mapping"
                ],
                "cls": [
                    "type"
                ]
            }
        },
        "SeriousModel.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "descriptor": [
                    "serious.descriptors.TypeDescriptor"
                ],
                "serializers": [
                    "Iterable[Type[serious.serialization.serializer.FieldSerializer]]"
                ]
            }
        },
        "SeriousModel.cls": {
            "name": "cls",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeriousModel.load": {
            "name": "load",
            "location": 93,
            "return": [
                "T"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Mapping"
                ],
                "_ctx": [
                    "Optional[serious.serialization.context.Loading]"
                ]
            }
        },
        "SeriousModel.dump": {
            "name": "dump",
            "location": 125,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "T"
                ],
                "_ctx": [
                    "Optional[serious.serialization.context.Dumping]"
                ]
            }
        },
        "SeriousModel.child_model": {
            "name": "child_model",
            "location": 146,
            "return": [
                "SeriousModel"
            ],
            "arguments": {
                "self": [],
                "descriptor": [
                    "serious.descriptors.TypeDescriptor"
                ]
            }
        },
        "SeriousModel.find_serializer": {
            "name": "find_serializer",
            "location": 170,
            "return": [
                "serious.serialization.serializer.FieldSerializer"
            ],
            "arguments": {
                "self": [],
                "descriptor": [
                    "serious.descriptors.TypeDescriptor"
                ]
            }
        },
        "SeriousModel._find_serializer": {
            "name": "_find_serializer",
            "location": 181,
            "return": [
                "Optional[serious.serialization.serializer.FieldSerializer]"
            ],
            "arguments": {
                "self": [],
                "desc": [
                    "serious.descriptors.TypeDescriptor"
                ]
            }
        },
        "fields_missing_from._is_missing": {
            "name": "_is_missing",
            "location": 212,
            "return": [],
            "arguments": {
                "field": []
            }
        }
    },
    "serious-master/serious/serialization/serializer.py": {
        "Serializer.load": {
            "name": "load",
            "location": 19,
            "return": [
                "M"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "S"
                ],
                "ctx": [
                    "serious.serialization.context.Loading"
                ]
            }
        },
        "Serializer.dump": {
            "name": "dump",
            "location": 23,
            "return": [
                "S"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "M"
                ],
                "ctx": [
                    "serious.serialization.context.Dumping"
                ]
            }
        },
        "FieldSerializer.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "descriptor": [
                    "serious.descriptors.TypeDescriptor"
                ],
                "root_model": [
                    "serious.serialization.model.SeriousModel"
                ]
            }
        },
        "FieldSerializer.fits": {
            "name": "fits",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[FieldSerializer]"
                ],
                "desc": [
                    "serious.descriptors.TypeDescriptor"
                ]
            }
        }
    },
    "serious-master/serious/serialization/__init__.py": {},
    "serious-master/tests/entities.py": {},
    "serious-master/tests/test_any.py": {
        "TestAny.setup_class": {
            "name": "setup_class",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAny.test_load": {
            "name": "test_load",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAny.test_dump": {
            "name": "test_dump",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAny.test_nested_implicit_any_load": {
            "name": "test_nested_implicit_any_load",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAny.test_nested_implicit_any_dump": {
            "name": "test_nested_implicit_any_dump",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAllowAnyInJson.test_default": {
            "name": "test_default",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAllowAnyInJson.test_explicit_with_any": {
            "name": "test_explicit_with_any",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAllowAnyInJson.test_explicit_without_any": {
            "name": "test_explicit_without_any",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAllowAnyInJson.test_explicit_with_collection_of_any": {
            "name": "test_explicit_with_collection_of_any",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAllowAnyInDict.test_default": {
            "name": "test_default",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAllowAnyInDict.test_explicit_with_any": {
            "name": "test_explicit_with_any",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAllowAnyInDict.test_explicit_without_any": {
            "name": "test_explicit_without_any",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "serious-master/tests/test_case.py": {
        "test_json_transforms_case_by_default": {
            "name": "test_json_transforms_case_by_default",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_json_transforms_case": {
            "name": "test_json_transforms_case",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_json_skips_transformation": {
            "name": "test_json_skips_transformation",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "serious-master/tests/test_collections.py": {
        "TestEncoder.test_list": {
            "name": "test_list",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_list_str": {
            "name": "test_list_str",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_dict": {
            "name": "test_dict",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_set": {
            "name": "test_set",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_tuple": {
            "name": "test_tuple",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_tuple_collection": {
            "name": "test_tuple_collection",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_frozenlist": {
            "name": "test_frozenlist",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_frozenset": {
            "name": "test_frozenset",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_optional": {
            "name": "test_optional",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_optional_str": {
            "name": "test_optional_str",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_union_int_none": {
            "name": "test_union_int_none",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_immutable_default": {
            "name": "test_immutable_default",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_mutable_default_list": {
            "name": "test_mutable_default_list",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_mutable_default_dict": {
            "name": "test_mutable_default_dict",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_list": {
            "name": "test_list",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_list_str": {
            "name": "test_list_str",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_dict": {
            "name": "test_dict",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_set": {
            "name": "test_set",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_tuple": {
            "name": "test_tuple",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_tuple_collection": {
            "name": "test_tuple_collection",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_frozenlist": {
            "name": "test_frozenlist",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_frozenset": {
            "name": "test_frozenset",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_optional": {
            "name": "test_optional",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_optional_str": {
            "name": "test_optional_str",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_immutable_default": {
            "name": "test_immutable_default",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_mutable_default_list": {
            "name": "test_mutable_default_list",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_mutable_default_dict": {
            "name": "test_mutable_default_dict",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "serious-master/tests/test_decimal.py": {
        "TestDecimal.setup_class": {
            "name": "setup_class",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecimal.test_load": {
            "name": "test_load",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecimal.test_dump": {
            "name": "test_dump",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "serious-master/tests/test_dict_api.py": {
        "test_missing_serializer": {
            "name": "test_missing_serializer",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "UserIdSerializer.load": {
            "name": "load",
            "location": 29,
            "return": [
                "UserId"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ],
                "ctx": [
                    "serious.serialization.context.Loading"
                ]
            }
        },
        "UserIdSerializer.dump": {
            "name": "dump",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "UserId"
                ],
                "ctx": [
                    "serious.serialization.context.Dumping"
                ]
            }
        },
        "UserIdSerializer.fits": {
            "name": "fits",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "desc": [
                    "serious.descriptors.TypeDescriptor"
                ]
            }
        },
        "TestDefaults.setup_class": {
            "name": "setup_class",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaults.test_invalid_class": {
            "name": "test_invalid_class",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaults.test_load": {
            "name": "test_load",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaults.test_load_many": {
            "name": "test_load_many",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaults.test_dump": {
            "name": "test_dump",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaults.test_dump_many": {
            "name": "test_dump_many",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerializer.setup_class": {
            "name": "setup_class",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerializer.test_load": {
            "name": "test_load",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerializer.test_dump": {
            "name": "test_dump",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypes.setup_class": {
            "name": "setup_class",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypes.test_uuid_encode": {
            "name": "test_uuid_encode",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypes.test_uuid_decode": {
            "name": "test_uuid_decode",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAllowMissing.test_allow_missing": {
            "name": "test_allow_missing",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAllowMissing.test_allow_missing_is_recursive": {
            "name": "test_allow_missing_is_recursive",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAllowMissing.test_allow_missing_terminates_at_first_missing": {
            "name": "test_allow_missing_terminates_at_first_missing",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAllowMissing.test_error_when_missing_required": {
            "name": "test_error_when_missing_required",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAllowUnexpected.test_allow_unexpected": {
            "name": "test_allow_unexpected",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAllowUnexpected.test_allow_unexpected_is_recursive": {
            "name": "test_allow_unexpected_is_recursive",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAllowUnexpected.test_error_when_unexpected": {
            "name": "test_error_when_unexpected",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAllowUnexpected.test_error_when_unexpected_by_default": {
            "name": "test_error_when_unexpected_by_default",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "serious-master/tests/test_ensure_frozen.py": {
        "test_ensure_default_non_frozen": {
            "name": "test_ensure_default_non_frozen",
            "location": 87,
            "return": [],
            "arguments": {
                "new_model": []
            }
        },
        "test_ensure_frozen_false": {
            "name": "test_ensure_frozen_false",
            "location": 93,
            "return": [],
            "arguments": {
                "new_model": []
            }
        },
        "MutNode.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "List[MutNode]"
                ]
            }
        },
        "FrozenNode.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "List[FrozenNode]"
                ]
            }
        },
        "FrozenNode.__setattr__": {
            "name": "__setattr__",
            "location": 61,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "TestEnsureFrozenTrue.test_raises_model_error_on_field": {
            "name": "test_raises_model_error_on_field",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "new_model": []
            }
        },
        "TestEnsureFrozenTrue.test_raises_model_error_on_dataclass": {
            "name": "test_raises_model_error_on_dataclass",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "new_model": []
            }
        },
        "TestEnsureFrozenTrue.test_raises_model_error_on_generic_parameter": {
            "name": "test_raises_model_error_on_generic_parameter",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "new_model": []
            }
        },
        "TestEnsureFrozenTrue.test_passes_valid_model": {
            "name": "test_passes_valid_model",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "new_model": []
            }
        },
        "TestEnsureFrozenTrue.test_immutable_types": {
            "name": "test_immutable_types",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "new_model": [],
                "cls": []
            }
        },
        "TestEnsureFrozenTrue.test_mutable_types": {
            "name": "test_mutable_types",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "new_model": [],
                "cls": []
            }
        },
        "TestEnsureFrozenTrue.test_fails_any": {
            "name": "test_fails_any",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "new_model": [],
                "cls": []
            }
        },
        "TestEnsureFrozenTrue.test_custom_immutable_object": {
            "name": "test_custom_immutable_object",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "new_model": [],
                "cls": []
            }
        },
        "FrozenNodeSerializer.fits": {
            "name": "fits",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "desc": [
                    "serious.descriptors.TypeDescriptor"
                ]
            }
        },
        "FrozenNodeSerializer.load": {
            "name": "load",
            "location": 150,
            "return": [
                "FrozenNode"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "ctx": []
            }
        },
        "FrozenNodeSerializer.dump": {
            "name": "dump",
            "location": 153,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "ctx": []
            }
        }
    },
    "serious-master/tests/test_enum.py": {
        "TestEnum.setup": {
            "name": "setup",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnum.test_load": {
            "name": "test_load",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnum.test_dump": {
            "name": "test_dump",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnum.test_default": {
            "name": "test_default",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStrEnum.setup": {
            "name": "setup",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStrEnum.test_load": {
            "name": "test_load",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStrEnum.test_dump": {
            "name": "test_dump",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStrEnum.test_load_with_invalid_enum_value": {
            "name": "test_load_with_invalid_enum_value",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnumCollection.setup": {
            "name": "setup",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnumCollection.test_load": {
            "name": "test_load",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnumCollection.test_dump": {
            "name": "test_dump",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntFlag.setup": {
            "name": "setup",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntFlag.test_load": {
            "name": "test_load",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntFlag.test_dump": {
            "name": "test_dump",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDateEnum.setup": {
            "name": "setup",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDateEnum.test_load": {
            "name": "test_load",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDateEnum.test_dump": {
            "name": "test_dump",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Planet.__init__": {
            "name": "__init__",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mean_radius": [],
                "mass": []
            }
        },
        "TestRichEnum.setup": {
            "name": "setup",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRichEnum.test_load": {
            "name": "test_load",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRichEnum.test_dump": {
            "name": "test_dump",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "serious-master/tests/test_examples.py": {
        "TestEncoder.setup_class": {
            "name": "setup_class",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_student": {
            "name": "test_student",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_professor": {
            "name": "test_professor",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_course": {
            "name": "test_course",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_students_missing": {
            "name": "test_students_missing",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "serious-master/tests/test_field_serializers.py": {
        "test_str_load_validation": {
            "name": "test_str_load_validation",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_bool_load_validation": {
            "name": "test_bool_load_validation",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_int_load_validation": {
            "name": "test_int_load_validation",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_float_load_validation": {
            "name": "test_float_load_validation",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dict_load_validation": {
            "name": "test_dict_load_validation",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_list_load_validation": {
            "name": "test_list_load_validation",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_frozen_list_load_validation": {
            "name": "test_frozen_list_load_validation",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tuple_load_validation": {
            "name": "test_tuple_load_validation",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dataclass_load_validation": {
            "name": "test_dataclass_load_validation",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_timestamp_load_validation": {
            "name": "test_timestamp_load_validation",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_date_time_load_validation": {
            "name": "test_date_time_load_validation",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_date_load_validation": {
            "name": "test_date_load_validation",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_time_load_validation": {
            "name": "test_time_load_validation",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_uuid_load_validation": {
            "name": "test_uuid_load_validation",
            "location": 256,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decimal_load_validation": {
            "name": "test_decimal_load_validation",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "AbstractSerializer.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFieldSerializer.test_not_implemented": {
            "name": "test_not_implemented",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnumLoadValidation.test_simple_enum": {
            "name": "test_simple_enum",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnumLoadValidation.test_str": {
            "name": "test_str",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnumLoadValidation.test_number": {
            "name": "test_number",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEnumLoadValidation.test_non_primitive": {
            "name": "test_non_primitive",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockModel.find_serializer": {
            "name": "find_serializer",
            "location": 145,
            "return": [
                "serious.serialization.serializer.FieldSerializer"
            ],
            "arguments": {
                "self": [],
                "desc": [
                    "serious.descriptors.TypeDescriptor"
                ]
            }
        }
    },
    "serious-master/tests/test_generics.py": {
        "TestSimpleGeneric.setup_class": {
            "name": "setup_class",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSimpleGeneric.test_load": {
            "name": "test_load",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSimpleGeneric.test_dump": {
            "name": "test_dump",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNestedGeneric.setup_class": {
            "name": "setup_class",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNestedGeneric.test_load": {
            "name": "test_load",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNestedGeneric.test_dump": {
            "name": "test_dump",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComplexGeneric.setup_class": {
            "name": "setup_class",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComplexGeneric.test_load": {
            "name": "test_load",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComplexGeneric.test_dump": {
            "name": "test_dump",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionGeneric.setup_class": {
            "name": "setup_class",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionGeneric.test_load": {
            "name": "test_load",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectionGeneric.test_dump": {
            "name": "test_dump",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "serious-master/tests/test_json_api.py": {
        "TestDefaults.setup_class": {
            "name": "setup_class",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaults.test_invalid_class": {
            "name": "test_invalid_class",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaults.test_load": {
            "name": "test_load",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaults.test_load_many": {
            "name": "test_load_many",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaults.test_dump": {
            "name": "test_dump",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaults.test_dump_many": {
            "name": "test_dump_many",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserIdSerializer.load": {
            "name": "load",
            "location": 63,
            "return": [
                "UserId"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int"
                ],
                "ctx": [
                    "serious.serialization.context.Loading"
                ]
            }
        },
        "UserIdSerializer.dump": {
            "name": "dump",
            "location": 66,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "UserId"
                ],
                "ctx": [
                    "serious.serialization.context.Dumping"
                ]
            }
        },
        "UserIdSerializer.fits": {
            "name": "fits",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "desc": [
                    "serious.descriptors.TypeDescriptor"
                ]
            }
        },
        "TestSerializer.setup_class": {
            "name": "setup_class",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerializer.test_dump": {
            "name": "test_dump",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSerializer.test_load": {
            "name": "test_load",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypes.setup_class": {
            "name": "setup_class",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypes.test_uuid_decode": {
            "name": "test_uuid_decode",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTypes.test_uuid_encode": {
            "name": "test_uuid_encode",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAllowMissing.test_allow_missing": {
            "name": "test_allow_missing",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAllowMissing.test_allow_unexpected_is_recursive": {
            "name": "test_allow_unexpected_is_recursive",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAllowMissing.test_allow_missing_terminates_at_first_missing": {
            "name": "test_allow_missing_terminates_at_first_missing",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAllowMissing.test_error_when_missing_required": {
            "name": "test_error_when_missing_required",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAllowMissing.test_error_when_missing_required_by_default": {
            "name": "test_error_when_missing_required_by_default",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAllowUnexpected.test_allow_unexpected": {
            "name": "test_allow_unexpected",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAllowUnexpected.test_allow_unexpected_is_recursive": {
            "name": "test_allow_unexpected_is_recursive",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAllowUnexpected.test_error_when_unexpected": {
            "name": "test_error_when_unexpected",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAllowUnexpected.test_error_when_unexpected_by_default": {
            "name": "test_error_when_unexpected_by_default",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "serious-master/tests/test_nested.py": {
        "TestDecoder.setup_class": {
            "name": "setup_class",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_nested_dataclass": {
            "name": "test_nested_dataclass",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDecoder.test_nested_list_of_dataclasses": {
            "name": "test_nested_list_of_dataclasses",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.setup_class": {
            "name": "setup_class",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_nested_dataclass": {
            "name": "test_nested_dataclass",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEncoder.test_nested_list_of_dataclasses": {
            "name": "test_nested_list_of_dataclasses",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "serious-master/tests/test_recursive.py": {
        "family_tree_json": {
            "name": "family_tree_json",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "family_tree": {
            "name": "family_tree",
            "location": 50,
            "return": [
                "Tree"
            ],
            "arguments": {}
        },
        "TestRecursive.setup_class": {
            "name": "setup_class",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRecursive.test_tree_decode": {
            "name": "test_tree_decode",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRecursive.test_tree_encode": {
            "name": "test_tree_encode",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "serious-master/tests/test_symmetry.py": {
        "test_generic_encode_and_decode_are_inverses": {
            "name": "test_generic_encode_and_decode_are_inverses",
            "location": 29,
            "return": [],
            "arguments": {
                "new_model": [],
                "example": []
            }
        },
        "generic_dataclass": {
            "name": "generic_dataclass",
            "location": 36,
            "return": [
                "type"
            ],
            "arguments": {
                "type_": [
                    "type"
                ]
            }
        }
    },
    "serious-master/tests/test_time.py": {
        "TestDefaultDatetime.setup_class": {
            "name": "setup_class",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaultDatetime.test_load": {
            "name": "test_load",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefaultDatetime.test_dump": {
            "name": "test_dump",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimestamp.setup_class": {
            "name": "setup_class",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimestamp.test_load": {
            "name": "test_load",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimestamp.test_dump": {
            "name": "test_dump",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDate.setup_class": {
            "name": "setup_class",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDate.test_load": {
            "name": "test_load",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDate.test_dump": {
            "name": "test_dump",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTime.setup_class": {
            "name": "setup_class",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTime.test_load": {
            "name": "test_load",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTime.test_dump": {
            "name": "test_dump",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "serious-master/tests/test_types.py": {
        "TestTimestamp.test_int_init": {
            "name": "test_int_init",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimestamp.test_float_init": {
            "name": "test_float_init",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimestamp.test_iso_init": {
            "name": "test_iso_init",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimestamp.test_datetime_init": {
            "name": "test_datetime_init",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimestamp.test_as_datetime": {
            "name": "test_as_datetime",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimestamp.test_repr": {
            "name": "test_repr",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimestamp.test_str": {
            "name": "test_str",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimestamp.test_comparison": {
            "name": "test_comparison",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimestamp.test_fail_comparison": {
            "name": "test_fail_comparison",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimestamp.test_immutability": {
            "name": "test_immutability",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmail.test_init": {
            "name": "test_init",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmail.test_case_insensitive": {
            "name": "test_case_insensitive",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmail.test_properties": {
            "name": "test_properties",
            "location": 91,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmail.test_repr": {
            "name": "test_repr",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmail.test_str": {
            "name": "test_str",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmail.test_immutability": {
            "name": "test_immutability",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmail.test_validation": {
            "name": "test_validation",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "serious-master/tests/test_union.py": {
        "test_union": {
            "name": "test_union",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_contains_union_hierarchy": {
            "name": "test_model_contains_union_hierarchy",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "serious-master/tests/test_utils.py": {
        "TestCases.setup_class": {
            "name": "setup_class",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.each_example": {
            "name": "each_example",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test": [
                    "Callable[([Ex], None)]"
                ]
            }
        },
        "TestCases.test_snake_to_camel": {
            "name": "test_snake_to_camel",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.test_camel_to_snake": {
            "name": "test_camel_to_snake",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCases.check_symmetry": {
            "name": "check_symmetry",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "serious-master/tests/test_validators.py": {
        "OrderLine.__validate__": {
            "name": "__validate__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractValidation.test_valid": {
            "name": "test_valid",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractValidation.test_invalid": {
            "name": "test_invalid",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSimpleValidation.setup_class": {
            "name": "setup_class",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNestedValidation.setup_class": {
            "name": "setup_class",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Treasure.__validate__": {
            "name": "__validate__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractValidationOptions.test_on_default_is_on_load_only": {
            "name": "test_on_default_is_on_load_only",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractValidationOptions.test_on_load_only": {
            "name": "test_on_load_only",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractValidationOptions.test_on_dump_only": {
            "name": "test_on_dump_only",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "serious-master/tests/utils.py": {
        "with_": {
            "name": "with_",
            "location": 8,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {}
        },
        "with_._wrapped": {
            "name": "_wrapped",
            "location": 9,
            "return": [],
            "arguments": {
                "f": []
            }
        }
    },
    "serious-master/tests/__init__.py": {}
}
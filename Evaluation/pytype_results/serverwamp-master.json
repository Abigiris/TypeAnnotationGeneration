{
    "serverwamp-master/setup.py": {},
    "serverwamp-master/docs/conf.py": {},
    "serverwamp-master/examples/aiohttp_pubsub_app.py": {},
    "serverwamp-master/examples/aiohttp_rpc_app.py": {},
    "serverwamp-master/examples/aiohttp_rpc_app_multi_realm.py": {},
    "serverwamp-master/examples/trio_asgi_rpc_and_pubsub.py": {},
    "serverwamp-master/serverwamp/application.py": {
        "verify_cra_response": {
            "name": "verify_cra_response",
            "location": 541,
            "return": [
                "Any"
            ],
            "arguments": {
                "response": [],
                "secret": []
            }
        },
        "Realm.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": []
            }
        },
        "Realm.set_authentication_handler": {
            "name": "set_authentication_handler",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "Realm.set_rpc_handler": {
            "name": "set_rpc_handler",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "Realm.set_subscription_handler": {
            "name": "set_subscription_handler",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "Realm.add_transport_authenticator": {
            "name": "add_transport_authenticator",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport_authenticator": []
            }
        },
        "Realm.set_cra_handlers": {
            "name": "set_cra_handlers",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requirement_provider": [],
                "identity_provider": []
            }
        },
        "Realm.set_ticket_authenticator": {
            "name": "set_ticket_authenticator",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticator": []
            }
        },
        "Realm.add_session_state_handler": {
            "name": "add_session_state_handler",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [],
                "authenticated_only": []
            }
        },
        "Realm.set_default_arg": {
            "name": "set_default_arg",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg_name": [],
                "value": [],
                "factory": []
            }
        },
        "Realm.add_rpc_routes": {
            "name": "add_rpc_routes",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "routes": []
            }
        },
        "Realm.add_topic_routes": {
            "name": "add_topic_routes",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "routes": []
            }
        },
        "Realm.args_for_realm_level_handler": {
            "name": "args_for_realm_level_handler",
            "location": 138,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "Application.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "allow_default_realm": [],
                "async_support": [],
                "synchronize_requests": [],
                "protocol_request_handlers": []
            }
        },
        "Application.add_realm": {
            "name": "add_realm",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "realm": []
            }
        },
        "Application.set_authentication_handler": {
            "name": "set_authentication_handler",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "Application.set_rpc_handler": {
            "name": "set_rpc_handler",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "Application.set_subscription_handler": {
            "name": "set_subscription_handler",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "Application.add_transport_authenticator": {
            "name": "add_transport_authenticator",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticator": []
            }
        },
        "Application.set_cra_handlers": {
            "name": "set_cra_handlers",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "requirement_provider": [],
                "identity_provider": []
            }
        },
        "Application.set_ticket_authenticator": {
            "name": "set_ticket_authenticator",
            "location": 403,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authenticator": []
            }
        },
        "Application.add_session_state_handler": {
            "name": "add_session_state_handler",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [],
                "authenticated_only": []
            }
        },
        "Application.set_default_arg": {
            "name": "set_default_arg",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg_name": [],
                "value": [],
                "factory": []
            }
        },
        "Application.add_rpc_routes": {
            "name": "add_rpc_routes",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "routes": []
            }
        },
        "Application.add_topic_routes": {
            "name": "add_topic_routes",
            "location": 423,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "routes": []
            }
        },
        "Application.aiohttp_websocket_handler": {
            "name": "aiohttp_websocket_handler",
            "location": 481,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Application.asgi_application": {
            "name": "asgi_application",
            "location": 490,
            "return": [
                "Callable[([Any, Any, Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "paths": []
            }
        },
        "Application.legacy_asgi_application": {
            "name": "legacy_asgi_application",
            "location": 512,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "paths": []
            }
        },
        "Application.legacy_asgi_application.application_callable": {
            "name": "application_callable",
            "location": 519,
            "return": [],
            "arguments": {
                "scope": []
            }
        }
    },
    "serverwamp-master/serverwamp/connection.py": {
        "Connection.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "serverwamp-master/serverwamp/context.py": {
        "asynccontextmanager": {
            "name": "asynccontextmanager",
            "location": 61,
            "return": [
                "Callable[(..., contextlib._AsyncGeneratorContextManager[_T_co])]"
            ],
            "arguments": {
                "func": [
                    "Callable[(..., AsyncIterator[_T_co])]"
                ]
            }
        },
        "asynccontextmanager.helper": {
            "name": "helper",
            "location": 65,
            "return": [],
            "arguments": {}
        },
        "_GeneratorContextManagerBase.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "func": [],
                "args": [],
                "kwds": []
            }
        },
        "AbstractAsyncContextManager.__subclasshook__": {
            "name": "__subclasshook__",
            "location": 97,
            "return": [],
            "arguments": {
                "cls": [],
                "C": []
            }
        }
    },
    "serverwamp-master/serverwamp/events.py": {
        "TopicRouteSet.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TopicRouteSet.__repr__": {
            "name": "__repr__",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TopicRouteSet.__getitem__": {
            "name": "__getitem__",
            "location": 20,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "TopicRouteSet.__iter__": {
            "name": "__iter__",
            "location": 23,
            "return": [
                "listiterator[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TopicRouteSet.__len__": {
            "name": "__len__",
            "location": 26,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TopicRouteSet.__contains__": {
            "name": "__contains__",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "TopicRouteSet.route": {
            "name": "route",
            "location": 32,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "uri": []
            }
        },
        "TopicRouteSet.prefix_route": {
            "name": "prefix_route",
            "location": 39,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "uri_prefix": []
            }
        },
        "TopicRouteSet.regex_route": {
            "name": "regex_route",
            "location": 46,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "uri_pattern": []
            }
        },
        "TopicRouteDef.register": {
            "name": "register",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "router": []
            }
        },
        "TopicPrefixRouteDef.register": {
            "name": "register",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "router": []
            }
        },
        "TopicRegexRouteDef.register": {
            "name": "register",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "router": []
            }
        },
        "TopicRouteSet.route.inner": {
            "name": "inner",
            "location": 33,
            "return": [],
            "arguments": {
                "handler": []
            }
        },
        "TopicRouteSet.prefix_route.inner": {
            "name": "inner",
            "location": 40,
            "return": [],
            "arguments": {
                "handler": []
            }
        },
        "TopicRouteSet.regex_route.inner": {
            "name": "inner",
            "location": 47,
            "return": [],
            "arguments": {
                "handler": []
            }
        }
    },
    "serverwamp-master/serverwamp/helpers.py": {
        "camel_to_snake": {
            "name": "camel_to_snake",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "name": []
            }
        },
        "format_sockaddr": {
            "name": "format_sockaddr",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "net_family": [],
                "sockaddr": []
            }
        },
        "objects_from_msgpack_batch": {
            "name": "objects_from_msgpack_batch",
            "location": 27,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "batch": []
            }
        }
    },
    "serverwamp-master/serverwamp/json.py": {
        "jsons_from_batch": {
            "name": "jsons_from_batch",
            "location": 87,
            "return": [
                "Generator[(str, Any, None)]"
            ],
            "arguments": {
                "batch": []
            }
        },
        "_WAMPJSONEncoder.default": {
            "name": "default",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "_WAMPJSONDecoder.string": {
            "name": "string",
            "location": 49,
            "return": [
                "Union[(bytes, _T0)]"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "_T0@@"
                ]
            }
        },
        "_obj_fallback": {
            "name": "_obj_fallback",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "obj": []
            }
        },
        "serialize": {
            "name": "serialize",
            "location": 78,
            "return": [],
            "arguments": {
                "obj": []
            }
        }
    },
    "serverwamp-master/serverwamp/protocol.py": {
        "generate_global_id": {
            "name": "generate_global_id",
            "location": 40,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "call_result_response_msg": {
            "name": "call_result_response_msg",
            "location": 203,
            "return": [
                "tuple"
            ],
            "arguments": {
                "request": [],
                "args": [
                    "_T1@@"
                ],
                "kwargs": [
                    "_T2@@"
                ],
                "progress": []
            }
        },
        "call_error_response_msg": {
            "name": "call_error_response_msg",
            "location": 220,
            "return": [
                "tuple"
            ],
            "arguments": {
                "request": [],
                "error_uri": [
                    "_T1@@"
                ],
                "args": [
                    "_T2@@"
                ],
                "kwargs": [
                    "_T3@@"
                ]
            }
        },
        "subscribed_response_msg": {
            "name": "subscribed_response_msg",
            "location": 236,
            "return": [
                "Tuple[(Any, Any, _T1)]"
            ],
            "arguments": {
                "request": [],
                "subscription_id": [
                    "_T1@@"
                ]
            }
        },
        "unsubscribe_error_response_msg": {
            "name": "unsubscribe_error_response_msg",
            "location": 243,
            "return": [
                "Tuple[(Any, Any, Any, Dict[(nothing, nothing)], _T1)]"
            ],
            "arguments": {
                "request": [],
                "error_uri": [
                    "_T1@@"
                ]
            }
        },
        "unsubscribed_response_msg": {
            "name": "unsubscribed_response_msg",
            "location": 251,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "request": []
            }
        },
        "unimplemented_response_msg": {
            "name": "unimplemented_response_msg",
            "location": 255,
            "return": [
                "Tuple[(Any, Any, Dict[(nothing, nothing)], str)]"
            ],
            "arguments": {
                "request": []
            }
        },
        "cra_challenge_msg": {
            "name": "cra_challenge_msg",
            "location": 264,
            "return": [
                "Tuple[(Any, str, Dict[(str, _T0)])]"
            ],
            "arguments": {
                "challenge_string": [
                    "_T0@@"
                ]
            }
        },
        "ticket_challenge_msg": {
            "name": "ticket_challenge_msg",
            "location": 268,
            "return": [
                "Tuple[(Any, str, Dict[(nothing, nothing)])]"
            ],
            "arguments": {}
        },
        "scram_nonce": {
            "name": "scram_nonce",
            "location": 272,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "welcome_msg": {
            "name": "welcome_msg",
            "location": 285,
            "return": [
                "Tuple[(Any, _T0, Dict[(str, Union[(Dict[(str, Dict[(nothing, nothing)])], _T1)])])]"
            ],
            "arguments": {
                "session_id": [
                    "_T0@@"
                ],
                "agent_name": [
                    "_T1@@"
                ]
            }
        },
        "goodbye_msg": {
            "name": "goodbye_msg",
            "location": 301,
            "return": [
                "Tuple[(Any, Dict[(str, _T1)], _T0)]"
            ],
            "arguments": {
                "reason_uri": [
                    "_T0@@"
                ],
                "message": [
                    "_T1@@"
                ]
            }
        },
        "abort_msg": {
            "name": "abort_msg",
            "location": 308,
            "return": [
                "Tuple[(Any, Dict[(str, _T1)], _T0)]"
            ],
            "arguments": {
                "reason_uri": [
                    "_T0@@"
                ],
                "message": [
                    "_T1@@"
                ]
            }
        },
        "event_msg": {
            "name": "event_msg",
            "location": 315,
            "return": [
                "tuple"
            ],
            "arguments": {
                "subscription_id": [
                    "_T0@@"
                ],
                "publication_id": [
                    "_T1@@"
                ],
                "args": [
                    "_T2@@"
                ],
                "kwargs": [
                    "_T3@@"
                ],
                "trust_level": [
                    "_T4@@"
                ],
                "specific_topic": [
                    "_T5@@"
                ]
            }
        },
        "cra_challenge_string": {
            "name": "cra_challenge_string",
            "location": 339,
            "return": [
                "str"
            ],
            "arguments": {
                "session_id": [],
                "auth_id": [],
                "auth_role": [],
                "auth_provider": [],
                "nonce": [],
                "auth_time": []
            }
        },
        "wamp_request_from_msg": {
            "name": "wamp_request_from_msg",
            "location": 374,
            "return": [
                "Union[(WAMPGoodbyeRequest, WAMPHelloRequest, WAMPRPCRequest, WAMPSubscribeRequest, WAMPUnsubscribeRequest)]"
            ],
            "arguments": {
                "msg": []
            }
        },
        "AuthenticationFailure.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": []
            }
        },
        "WAMPHelloRequest.from_msg_data": {
            "name": "from_msg_data",
            "location": 57,
            "return": [
                "_TWAMPHelloRequest@@WAMPHelloRequest@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TWAMPHelloRequest]"
                ],
                "msg_data": []
            }
        },
        "WAMPSubscribeRequest.from_msg_data": {
            "name": "from_msg_data",
            "location": 76,
            "return": [
                "_TWAMPSubscribeRequest@@WAMPSubscribeRequest@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TWAMPSubscribeRequest]"
                ],
                "msg_data": []
            }
        },
        "WAMPUnsubscribeRequest.from_msg_data": {
            "name": "from_msg_data",
            "location": 106,
            "return": [
                "_TWAMPUnsubscribeRequest@@WAMPUnsubscribeRequest@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TWAMPUnsubscribeRequest]"
                ],
                "msg_data": []
            }
        },
        "WAMPRPCRequest.from_msg_data": {
            "name": "from_msg_data",
            "location": 140,
            "return": [
                "_TWAMPRPCRequest@@WAMPRPCRequest@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TWAMPRPCRequest]"
                ],
                "msg_data": []
            }
        },
        "WAMPGoodbyeRequest.from_msg_data": {
            "name": "from_msg_data",
            "location": 191,
            "return": [
                "_TWAMPGoodbyeRequest@@WAMPGoodbyeRequest@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TWAMPGoodbyeRequest]"
                ],
                "msg_data": []
            }
        }
    },
    "serverwamp-master/serverwamp/routing.py": {
        "URIsRouter.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "camel_snake_conversion": []
            }
        },
        "URIsRouter.set_default_arg": {
            "name": "set_default_arg",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "arg_name": [],
                "value": [],
                "factory": []
            }
        },
        "URIsRouter.add_route": {
            "name": "add_route",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri": [],
                "handler": []
            }
        },
        "URIsRouter.add_prefix_route": {
            "name": "add_prefix_route",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri_prefix": [],
                "handler": []
            }
        },
        "URIsRouter.add_regex_route": {
            "name": "add_regex_route",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "uri_pattern": [],
                "handler": []
            }
        },
        "URIsRouter.resolve": {
            "name": "resolve",
            "location": 58,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "uri": []
            }
        },
        "URIsRouter.add_routes": {
            "name": "add_routes",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "routes": []
            }
        }
    },
    "serverwamp-master/serverwamp/rpc.py": {
        "route": {
            "name": "route",
            "location": 163,
            "return": [
                "RPCRouteDef"
            ],
            "arguments": {
                "uri": [],
                "handler": []
            }
        },
        "_yielded_value_to_result": {
            "name": "_yielded_value_to_result",
            "location": 217,
            "return": [
                "Union[(RPCResult, _T0)]"
            ],
            "arguments": {
                "yielded_value": [
                    "_T0@@"
                ]
            }
        },
        "RPCRouteDef.register": {
            "name": "register",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "router": []
            }
        },
        "RPCPrefixRouteDef.register": {
            "name": "register",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "router": []
            }
        },
        "RPCRegexRouteDef.register": {
            "name": "register",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "router": []
            }
        },
        "RPCRouteSet.__init__": {
            "name": "__init__",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPCRouteSet.__repr__": {
            "name": "__repr__",
            "location": 172,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPCRouteSet.__getitem__": {
            "name": "__getitem__",
            "location": 175,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "RPCRouteSet.__iter__": {
            "name": "__iter__",
            "location": 178,
            "return": [
                "listiterator[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPCRouteSet.__len__": {
            "name": "__len__",
            "location": 181,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RPCRouteSet.__contains__": {
            "name": "__contains__",
            "location": 184,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "RPCRouteSet.route": {
            "name": "route",
            "location": 187,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "uri": []
            }
        },
        "RPCRouteSet.prefix_route": {
            "name": "prefix_route",
            "location": 193,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "uri_prefix": []
            }
        },
        "RPCRouteSet.regex_route": {
            "name": "regex_route",
            "location": 200,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "self": [],
                "uri_pattern": []
            }
        },
        "RPCRouteSet.route.inner": {
            "name": "inner",
            "location": 188,
            "return": [],
            "arguments": {
                "handler": []
            }
        },
        "RPCRouteSet.prefix_route.inner": {
            "name": "inner",
            "location": 194,
            "return": [],
            "arguments": {
                "handler": []
            }
        },
        "RPCRouteSet.regex_route.inner": {
            "name": "inner",
            "location": 201,
            "return": [],
            "arguments": {
                "handler": []
            }
        }
    },
    "serverwamp-master/serverwamp/session.py": {
        "AbstractAsyncQueue.task_done": {
            "name": "task_done",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractAsyncQueue.put_nowait": {
            "name": "put_nowait",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": []
            }
        },
        "WAMPSession.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [],
                "realm": [],
                "tasks": [],
                "auth_id": [],
                "auth_methods": []
            }
        },
        "WAMPSession.__getitem__": {
            "name": "__getitem__",
            "location": 65,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "WAMPSession.__setitem__": {
            "name": "__setitem__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "WAMPSession.__delitem__": {
            "name": "__delitem__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "WAMPSession.__len__": {
            "name": "__len__",
            "location": 74,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "WAMPSession.__iter__": {
            "name": "__iter__",
            "location": 77,
            "return": [
                "Iterator[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WAMPSession.subscription_id_for_topic": {
            "name": "subscription_id_for_topic",
            "location": 138,
            "return": [
                "int"
            ],
            "arguments": {
                "topic": []
            }
        }
    },
    "serverwamp-master/serverwamp/__init__.py": {},
    "serverwamp-master/serverwamp/adapters/aiohttp.py": {
        "AiohttpWebSocketConnection.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ws": [],
                "request": [],
                "compress_outbound": []
            }
        }
    },
    "serverwamp-master/serverwamp/adapters/anyio.py": {
        "AnyioTaskGroup.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "anyio_task_group": []
            }
        }
    },
    "serverwamp-master/serverwamp/adapters/asgi.py": {
        "scope_cookies": {
            "name": "scope_cookies",
            "location": 26,
            "return": [
                "Optional[Dict[(str, str)]]"
            ],
            "arguments": {
                "scope": []
            }
        },
        "ASGIWebSocketConection.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "asgi_scope": [],
                "asgi_receiver": [],
                "asgi_sender": [],
                "cookies": []
            }
        }
    },
    "serverwamp-master/serverwamp/adapters/asyncio.py": {
        "AsyncioTaskGroup.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "serverwamp-master/serverwamp/adapters/async_base.py": {
        "AsyncSupport.launch_task_group": {
            "name": "launch_task_group",
            "location": 36,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "serverwamp-master/serverwamp/adapters/trio.py": {
        "TrioTaskGroup.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nursery": []
            }
        }
    },
    "serverwamp-master/serverwamp/adapters/__init__.py": {},
    "serverwamp-master/tests/old_test_rpc.py": {
        "test_route_table": {
            "name": "test_route_table",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_router_rpc_handling": {
            "name": "test_router_rpc_handling",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_type_marshaling": {
            "name": "test_type_marshaling",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_default_args": {
            "name": "test_default_args",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_realms": {
            "name": "test_realms",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
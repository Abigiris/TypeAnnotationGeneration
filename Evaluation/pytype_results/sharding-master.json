{
    "sharding-master/setup.py": {},
    "sharding-master/sharding/__init__.py": {},
    "sharding-master/sharding/contracts/sharding_manager.v.py": {
        "__init__": {
            "name": "__init__",
            "location": 112,
            "return": [],
            "arguments": {
                "_SHARD_COUNT": [],
                "_PERIOD_LENGTH": [],
                "_LOOKAHEAD_LENGTH": [],
                "_COMMITTEE_SIZE": [],
                "_QUORUM_SIZE": [],
                "_NOTARY_DEPOSIT": [],
                "_NOTARY_LOCKUP_LENGTH": []
            }
        },
        "is_empty_slots_stack_empty": {
            "name": "is_empty_slots_stack_empty",
            "location": 132,
            "return": [],
            "arguments": {}
        },
        "empty_slots_stack_push": {
            "name": "empty_slots_stack_push",
            "location": 138,
            "return": [],
            "arguments": {
                "index": []
            }
        },
        "empty_slots_stack_pop": {
            "name": "empty_slots_stack_pop",
            "location": 145,
            "return": [],
            "arguments": {}
        },
        "get_notary_info": {
            "name": "get_notary_info",
            "location": 155,
            "return": [],
            "arguments": {
                "notary_address": []
            }
        },
        "update_notary_sample_size": {
            "name": "update_notary_sample_size",
            "location": 161,
            "return": [],
            "arguments": {}
        },
        "register_notary": {
            "name": "register_notary",
            "location": 176,
            "return": [],
            "arguments": {}
        },
        "deregister_notary": {
            "name": "deregister_notary",
            "location": 210,
            "return": [],
            "arguments": {}
        },
        "release_notary": {
            "name": "release_notary",
            "location": 232,
            "return": [],
            "arguments": {}
        },
        "get_member_of_committee": {
            "name": "get_member_of_committee",
            "location": 257,
            "return": [],
            "arguments": {
                "shard_id": [],
                "index": []
            }
        },
        "add_header": {
            "name": "add_header",
            "location": 293,
            "return": [],
            "arguments": {
                "shard_id": [],
                "period": [],
                "chunk_root": []
            }
        },
        "get_vote_count": {
            "name": "get_vote_count",
            "location": 336,
            "return": [],
            "arguments": {
                "shard_id": []
            }
        },
        "has_notary_voted": {
            "name": "has_notary_voted",
            "location": 352,
            "return": [],
            "arguments": {
                "shard_id": [],
                "index": []
            }
        },
        "update_vote": {
            "name": "update_vote",
            "location": 364,
            "return": [],
            "arguments": {
                "shard_id": [],
                "index": []
            }
        },
        "submit_vote": {
            "name": "submit_vote",
            "location": 382,
            "return": [],
            "arguments": {
                "shard_id": [],
                "period": [],
                "chunk_root": [],
                "index": []
            }
        }
    },
    "sharding-master/sharding/contracts/__init__.py": {},
    "sharding-master/sharding/contracts/utils/config.py": {
        "get_sharding_config": {
            "name": "get_sharding_config",
            "location": 14,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        }
    },
    "sharding-master/sharding/contracts/utils/smc_utils.py": {
        "get_smc_source_code": {
            "name": "get_smc_source_code",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_smc_json": {
            "name": "get_smc_json",
            "location": 19,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {}
        }
    },
    "sharding-master/sharding/contracts/utils/__init__.py": {},
    "sharding-master/sharding/handler/exceptions.py": {},
    "sharding-master/sharding/handler/log_handler.py": {
        "LogHandler.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "w3": [],
                "period_length": [
                    "int"
                ]
            }
        },
        "LogHandler.get_logs": {
            "name": "get_logs",
            "location": 26,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "address": [],
                "topics": [
                    "List[Optional[str]]"
                ],
                "from_block": [
                    "Union[(int, str)]"
                ],
                "to_block": [
                    "Union[(int, str)]"
                ]
            }
        }
    },
    "sharding-master/sharding/handler/shard_tracker.py": {
        "ShardTracker.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "w3": [],
                "config": [
                    "Optional[Dict[(str, Any)]]"
                ],
                "shard_id": [
                    "int"
                ],
                "smc_handler_address": []
            }
        },
        "ShardTracker._get_logs_by_shard_id": {
            "name": "_get_logs_by_shard_id",
            "location": 52,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "event_name": [
                    "str"
                ],
                "from_block": [
                    "Union[(int, str)]"
                ],
                "to_block": [
                    "Union[(int, str)]"
                ]
            }
        },
        "ShardTracker._get_logs_by_notary": {
            "name": "_get_logs_by_notary",
            "location": 68,
            "return": [
                "List[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "event_name": [
                    "str"
                ],
                "notary": [
                    "Optional[str]"
                ],
                "from_block": [
                    "Union[(int, str)]"
                ],
                "to_block": [
                    "Union[(int, str)]"
                ]
            }
        },
        "ShardTracker._decide_period_block_number": {
            "name": "_decide_period_block_number",
            "location": 89,
            "return": [
                "Tuple[(Optional[int], Optional[int])]"
            ],
            "arguments": {
                "self": [],
                "from_period": [
                    "Optional[int]"
                ],
                "to_period": [
                    "Optional[int]"
                ]
            }
        },
        "ShardTracker.get_register_notary_logs": {
            "name": "get_register_notary_logs",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "from_period": [],
                "to_period": []
            }
        },
        "ShardTracker.get_deregister_notary_logs": {
            "name": "get_deregister_notary_logs",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "from_period": [],
                "to_period": []
            }
        },
        "ShardTracker.get_release_notary_logs": {
            "name": "get_release_notary_logs",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "from_period": [],
                "to_period": []
            }
        },
        "ShardTracker.get_add_header_logs": {
            "name": "get_add_header_logs",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "from_period": [],
                "to_period": []
            }
        },
        "ShardTracker.get_submit_vote_logs": {
            "name": "get_submit_vote_logs",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "from_period": [],
                "to_period": []
            }
        },
        "ShardTracker.is_notary_registered": {
            "name": "is_notary_registered",
            "location": 183,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "notary": [
                    "str"
                ],
                "from_period": [
                    "int"
                ]
            }
        },
        "ShardTracker.is_notary_deregistered": {
            "name": "is_notary_deregistered",
            "location": 193,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "notary": [
                    "str"
                ],
                "from_period": [
                    "int"
                ]
            }
        },
        "ShardTracker.is_notary_released": {
            "name": "is_notary_released",
            "location": 203,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "notary": [
                    "str"
                ],
                "from_period": [
                    "int"
                ]
            }
        },
        "ShardTracker.is_new_header_added": {
            "name": "is_new_header_added",
            "location": 213,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "period": [
                    "int"
                ]
            }
        },
        "ShardTracker.has_enough_vote": {
            "name": "has_enough_vote",
            "location": 222,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "period": [
                    "int"
                ]
            }
        }
    },
    "sharding-master/sharding/handler/smc_handler.py": {
        "SMC.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SMC.basic_call_context": {
            "name": "basic_call_context",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SMC.does_notary_exist": {
            "name": "does_notary_exist",
            "location": 77,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "notary_address": []
            }
        },
        "SMC.get_notary_info": {
            "name": "get_notary_info",
            "location": 80,
            "return": [
                "Tuple[(int, int)]"
            ],
            "arguments": {
                "self": [],
                "notary_address": []
            }
        },
        "SMC.notary_pool_len": {
            "name": "notary_pool_len",
            "location": 83,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SMC.notary_pool": {
            "name": "notary_pool",
            "location": 86,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "pool_index": [
                    "int"
                ]
            }
        },
        "SMC.empty_slots_stack_top": {
            "name": "empty_slots_stack_top",
            "location": 90,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SMC.empty_slots_stack": {
            "name": "empty_slots_stack",
            "location": 93,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "stack_index": [
                    "int"
                ]
            }
        },
        "SMC.current_period_notary_sample_size": {
            "name": "current_period_notary_sample_size",
            "location": 96,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SMC.next_period_notary_sample_size": {
            "name": "next_period_notary_sample_size",
            "location": 99,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SMC.notary_sample_size_updated_period": {
            "name": "notary_sample_size_updated_period",
            "location": 102,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SMC.records_updated_period": {
            "name": "records_updated_period",
            "location": 105,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "shard_id": [
                    "int"
                ]
            }
        },
        "SMC.head_collation_period": {
            "name": "head_collation_period",
            "location": 108,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "shard_id": [
                    "int"
                ]
            }
        },
        "SMC.get_member_of_committee": {
            "name": "get_member_of_committee",
            "location": 111,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "shard_id": [
                    "int"
                ],
                "index": [
                    "int"
                ]
            }
        },
        "SMC.get_collation_chunk_root": {
            "name": "get_collation_chunk_root",
            "location": 118,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "shard_id": [
                    "int"
                ],
                "period": [
                    "int"
                ]
            }
        },
        "SMC.get_collation_proposer": {
            "name": "get_collation_proposer",
            "location": 124,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "shard_id": [
                    "int"
                ],
                "period": [
                    "int"
                ]
            }
        },
        "SMC.get_collation_is_elected": {
            "name": "get_collation_is_elected",
            "location": 131,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "shard_id": [
                    "int"
                ],
                "period": [
                    "int"
                ]
            }
        },
        "SMC.current_vote": {
            "name": "current_vote",
            "location": 137,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "shard_id": [
                    "int"
                ]
            }
        },
        "SMC.get_vote_count": {
            "name": "get_vote_count",
            "location": 142,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "shard_id": [
                    "int"
                ]
            }
        },
        "SMC.has_notary_voted": {
            "name": "has_notary_voted",
            "location": 147,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "shard_id": [
                    "int"
                ],
                "index": [
                    "int"
                ]
            }
        },
        "SMC._send_transaction": {
            "name": "_send_transaction",
            "location": 153,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SMC.register_notary": {
            "name": "register_notary",
            "location": 192,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "private_key": [],
                "gas_price": [
                    "int"
                ]
            }
        },
        "SMC.deregister_notary": {
            "name": "deregister_notary",
            "location": 206,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "private_key": [],
                "gas_price": [
                    "int"
                ]
            }
        },
        "SMC.release_notary": {
            "name": "release_notary",
            "location": 219,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "private_key": [],
                "gas_price": [
                    "int"
                ]
            }
        },
        "SMC.add_header": {
            "name": "add_header",
            "location": 232,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SMC.submit_vote": {
            "name": "submit_vote",
            "location": 253,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sharding-master/sharding/handler/__init__.py": {},
    "sharding-master/sharding/handler/utils/log_parser.py": {
        "LogParser.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogParser._extract_event_abi": {
            "name": "_extract_event_abi",
            "location": 41,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogParser._set_topic_value": {
            "name": "_set_topic_value",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogParser._set_data_value": {
            "name": "_set_data_value",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogParser._parse_value": {
            "name": "_parse_value",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sharding-master/sharding/handler/utils/shard_tracker_utils.py": {
        "to_log_topic_address": {
            "name": "to_log_topic_address",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "address": []
            }
        },
        "get_event_signature_from_abi": {
            "name": "get_event_signature_from_abi",
            "location": 22,
            "return": [
                "bytes"
            ],
            "arguments": {
                "event_name": [
                    "str"
                ]
            }
        }
    },
    "sharding-master/sharding/handler/utils/smc_handler_utils.py": {
        "make_call_context": {
            "name": "make_call_context",
            "location": 18,
            "return": [],
            "arguments": {
                "sender_address": [],
                "gas": [],
                "value": [],
                "gas_price": [],
                "data": []
            }
        },
        "make_transaction_context": {
            "name": "make_transaction_context",
            "location": 41,
            "return": [],
            "arguments": {
                "nonce": [],
                "gas": [],
                "chain_id": [],
                "value": [],
                "gas_price": [],
                "data": []
            }
        }
    },
    "sharding-master/sharding/handler/utils/web3_utils.py": {
        "get_code": {
            "name": "get_code",
            "location": 24,
            "return": [
                "bytes"
            ],
            "arguments": {
                "w3": [],
                "address": []
            }
        },
        "get_nonce": {
            "name": "get_nonce",
            "location": 28,
            "return": [
                "int"
            ],
            "arguments": {
                "w3": [],
                "address": []
            }
        },
        "take_snapshot": {
            "name": "take_snapshot",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {
                "w3": []
            }
        },
        "revert_to_snapshot": {
            "name": "revert_to_snapshot",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "w3": [],
                "snapshot_id": [
                    "int"
                ]
            }
        },
        "mine": {
            "name": "mine",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "w3": [],
                "num_blocks": [
                    "int"
                ]
            }
        },
        "send_raw_transaction": {
            "name": "send_raw_transaction",
            "location": 44,
            "return": [
                "Any"
            ],
            "arguments": {
                "w3": [],
                "raw_transaction": []
            }
        },
        "get_recent_block_hashes": {
            "name": "get_recent_block_hashes",
            "location": 51,
            "return": [
                "tuple"
            ],
            "arguments": {
                "w3": [],
                "history_size": [
                    "int"
                ]
            }
        },
        "get_canonical_chain": {
            "name": "get_canonical_chain",
            "location": 65,
            "return": [
                "Tuple[(list, tuple)]"
            ],
            "arguments": {
                "w3": [],
                "recent_block_hashes": [
                    "list"
                ],
                "history_size": [
                    "int"
                ]
            }
        }
    },
    "sharding-master/sharding/handler/utils/__init__.py": {},
    "sharding-master/tests/conftest.py": {
        "smc_testing_config": {
            "name": "smc_testing_config",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "smc_handler": {
            "name": "smc_handler",
            "location": 36,
            "return": [],
            "arguments": {
                "smc_testing_config": []
            }
        }
    },
    "sharding-master/tests/__init__.py": {},
    "sharding-master/tests/contract/test_add_header.py": {
        "test_normal_add_header": {
            "name": "test_normal_add_header",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "smc_handler": []
            }
        },
        "test_add_header_wrong_period": {
            "name": "test_add_header_wrong_period",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "smc_handler": []
            }
        },
        "test_add_header_wrong_shard": {
            "name": "test_add_header_wrong_shard",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "smc_handler": []
            }
        },
        "test_double_add_header": {
            "name": "test_double_add_header",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "smc_handler": []
            }
        }
    },
    "sharding-master/tests/contract/test_compile.py": {
        "test_compile_smc": {
            "name": "test_compile_smc",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sharding-master/tests/contract/test_log_emission.py": {
        "test_log_emission": {
            "name": "test_log_emission",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "smc_handler": []
            }
        }
    },
    "sharding-master/tests/contract/test_notary_sample.py": {
        "test_normal_update_notary_sample_size": {
            "name": "test_normal_update_notary_sample_size",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "smc_handler": []
            }
        },
        "test_register_then_deregister": {
            "name": "test_register_then_deregister",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "smc_handler": []
            }
        },
        "test_deregister_then_register": {
            "name": "test_deregister_then_register",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "smc_handler": []
            }
        },
        "test_series_of_deregister_starting_from_top_of_the_stack": {
            "name": "test_series_of_deregister_starting_from_top_of_the_stack",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "smc_handler": []
            }
        },
        "test_series_of_deregister_starting_from_bottom_of_the_stack": {
            "name": "test_series_of_deregister_starting_from_bottom_of_the_stack",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "smc_handler": []
            }
        },
        "test_get_member_of_committee_without_updating_sample_size": {
            "name": "test_get_member_of_committee_without_updating_sample_size",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "smc_handler": []
            }
        },
        "test_get_member_of_committee_with_updated_sample_size": {
            "name": "test_get_member_of_committee_with_updated_sample_size",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "smc_handler": []
            }
        },
        "test_committee_lists_generated_are_different": {
            "name": "test_committee_lists_generated_are_different",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {
                "smc_handler": []
            }
        },
        "test_get_member_of_committee_with_non_member": {
            "name": "test_get_member_of_committee_with_non_member",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "smc_handler": []
            }
        },
        "test_committee_change_with_deregister_then_register": {
            "name": "test_committee_change_with_deregister_then_register",
            "location": 334,
            "return": [
                "None"
            ],
            "arguments": {
                "smc_handler": []
            }
        },
        "test_get_sample_result": {
            "name": "test_get_sample_result",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "smc_handler": []
            }
        }
    },
    "sharding-master/tests/contract/test_registry_management.py": {
        "test_normal_register": {
            "name": "test_normal_register",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "smc_handler": []
            }
        },
        "test_register_without_enough_ether": {
            "name": "test_register_without_enough_ether",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "smc_handler": []
            }
        },
        "test_double_register": {
            "name": "test_double_register",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "smc_handler": []
            }
        },
        "test_normal_deregister": {
            "name": "test_normal_deregister",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "smc_handler": []
            }
        },
        "test_deregister_then_register": {
            "name": "test_deregister_then_register",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "smc_handler": []
            }
        },
        "test_normal_release_notary": {
            "name": "test_normal_release_notary",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "smc_handler": []
            }
        },
        "test_instant_release_notary": {
            "name": "test_instant_release_notary",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "smc_handler": []
            }
        },
        "test_deregister_and_new_notary_register": {
            "name": "test_deregister_and_new_notary_register",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "smc_handler": []
            }
        }
    },
    "sharding-master/tests/contract/test_submit_vote.py": {
        "test_normal_submit_vote": {
            "name": "test_normal_submit_vote",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "smc_handler": []
            }
        },
        "test_double_submit_vote": {
            "name": "test_double_submit_vote",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "smc_handler": []
            }
        },
        "test_submit_vote_by_notary_sampled_multiple_times": {
            "name": "test_submit_vote_by_notary_sampled_multiple_times",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "smc_handler": []
            }
        },
        "test_submit_vote_by_non_eligible_notary": {
            "name": "test_submit_vote_by_non_eligible_notary",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "smc_handler": []
            }
        },
        "test_submit_vote_without_add_header_first": {
            "name": "test_submit_vote_without_add_header_first",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "smc_handler": []
            }
        },
        "test_submit_vote_with_invalid_args": {
            "name": "test_submit_vote_with_invalid_args",
            "location": 279,
            "return": [],
            "arguments": {
                "smc_handler": [],
                "period": [],
                "shard_id": [],
                "chunk_root": [],
                "sample_index": []
            }
        },
        "test_submit_vote_then_deregister": {
            "name": "test_submit_vote_then_deregister",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "smc_handler": []
            }
        }
    },
    "sharding-master/tests/contract/__init__.py": {},
    "sharding-master/tests/contract/utils/common_utils.py": {
        "update_notary_sample_size": {
            "name": "update_notary_sample_size",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "smc_handler": []
            }
        },
        "batch_register": {
            "name": "batch_register",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "smc_handler": [],
                "start": [],
                "end": []
            }
        },
        "fast_forward": {
            "name": "fast_forward",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "smc_handler": [],
                "num_of_periods": []
            }
        }
    },
    "sharding-master/tests/contract/utils/notary_account.py": {
        "NotaryAccount.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "NotaryAccount.private_key": {
            "name": "private_key",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NotaryAccount.checksum_address": {
            "name": "checksum_address",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NotaryAccount.canonical_address": {
            "name": "canonical_address",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sharding-master/tests/contract/utils/sample_helper.py": {
        "get_notary_pool_list": {
            "name": "get_notary_pool_list",
            "location": 13,
            "return": [],
            "arguments": {
                "smc_handler": []
            }
        },
        "sampling": {
            "name": "sampling",
            "location": 22,
            "return": [],
            "arguments": {
                "smc_handler": [],
                "shard_id": []
            }
        },
        "get_committee_list": {
            "name": "get_committee_list",
            "location": 54,
            "return": [],
            "arguments": {
                "smc_handler": [],
                "shard_id": []
            }
        },
        "get_sample_result": {
            "name": "get_sample_result",
            "location": 63,
            "return": [],
            "arguments": {
                "smc_handler": [],
                "notary_index": []
            }
        }
    },
    "sharding-master/tests/handler/test_log_handler.py": {
        "contract": {
            "name": "contract",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "test_get_logs_without_forks": {
            "name": "test_get_logs_without_forks",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "contract": [],
                "smc_testing_config": []
            }
        },
        "test_get_logs_with_forks": {
            "name": "test_get_logs_with_forks",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "contract": [],
                "smc_testing_config": []
            }
        }
    },
    "sharding-master/tests/handler/test_shard_tracker.py": {
        "test_normal_log_parser": {
            "name": "test_normal_log_parser",
            "location": 110,
            "return": [],
            "arguments": {
                "raw_log": [],
                "event_name": [],
                "attr_tuples": []
            }
        },
        "test_log_parser_with_wrong_log_content": {
            "name": "test_log_parser_with_wrong_log_content",
            "location": 146,
            "return": [],
            "arguments": {
                "raw_log": [],
                "event_name": []
            }
        },
        "test_status_checking_functions": {
            "name": "test_status_checking_functions",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "smc_handler": [],
                "smc_testing_config": []
            }
        }
    },
    "sharding-master/tests/handler/test_smc_handler.py": {
        "test_make_transaction_context": {
            "name": "test_make_transaction_context",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_make_call_context": {
            "name": "test_make_call_context",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sharding-master/tests/handler/__init__.py": {},
    "sharding-master/tests/handler/utils/config.py": {
        "get_sharding_testing_config": {
            "name": "get_sharding_testing_config",
            "location": 10,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "sharding-master/tests/handler/utils/__init__.py": {},
    "sharding-master/tools/vyper_compile_script.py": {
        "generate_compiled_json": {
            "name": "generate_compiled_json",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
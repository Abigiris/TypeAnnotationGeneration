{
    "slender-master/setup.py": {},
    "slender-master/slender/command_line.py": {
        "main": {
            "name": "main",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "slender-master/slender/dictionary.py": {
        "Dictionary.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "d": []
            }
        },
        "Dictionary.__lt__": {
            "name": "__lt__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Dictionary.__le__": {
            "name": "__le__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Dictionary.__len__": {
            "name": "__len__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dictionary.__eq__": {
            "name": "__eq__",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Dictionary.__gt__": {
            "name": "__gt__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Dictionary.__ge__": {
            "name": "__ge__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Dictionary.__getitem__": {
            "name": "__getitem__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Dictionary.__setitem__": {
            "name": "__setitem__",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "Dictionary.__contains__": {
            "name": "__contains__",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Dictionary.any": {
            "name": "any",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "Dictionary.assoc": {
            "name": "assoc",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Dictionary.compact": {
            "name": "compact",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dictionary.default": {
            "name": "default",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Dictionary.delete": {
            "name": "delete",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "callback": []
            }
        },
        "Dictionary.delete_if": {
            "name": "delete_if",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "Dictionary.dig": {
            "name": "dig",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dictionary.each": {
            "name": "each",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "Dictionary.each_key": {
            "name": "each_key",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "Dictionary.each_value": {
            "name": "each_value",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "Dictionary.empty": {
            "name": "empty",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dictionary.get": {
            "name": "get",
            "location": 201,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "callback": []
            }
        },
        "Dictionary.get_values": {
            "name": "get_values",
            "location": 210,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dictionary.flatten": {
            "name": "flatten",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "level": []
            }
        },
        "Dictionary.__flatten": {
            "name": "__flatten",
            "location": 231,
            "return": [],
            "arguments": {
                "self": [],
                "l": [],
                "level": []
            }
        },
        "Dictionary.has_key": {
            "name": "has_key",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Dictionary.has_value": {
            "name": "has_value",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Dictionary.invert": {
            "name": "invert",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dictionary.keep_if": {
            "name": "keep_if",
            "location": 261,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "Dictionary.merge": {
            "name": "merge",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "callback": []
            }
        },
        "Dictionary.select": {
            "name": "select",
            "location": 280,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "Dictionary.__select": {
            "name": "__select",
            "location": 284,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "Dictionary.size": {
            "name": "size",
            "location": 292,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dictionary.slice": {
            "name": "slice",
            "location": 295,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dictionary.to_list": {
            "name": "to_list",
            "location": 304,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dictionary.to_dict": {
            "name": "to_dict",
            "location": 310,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/list.py": {
        "List.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "a": []
            }
        },
        "List.__getitem__": {
            "name": "__getitem__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "List.__setitem__": {
            "name": "__setitem__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "List.__and__": {
            "name": "__and__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "List.__add__": {
            "name": "__add__",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "List.__mul__": {
            "name": "__mul__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "scalar": []
            }
        },
        "List.__sub__": {
            "name": "__sub__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "List.__lshift__": {
            "name": "__lshift__",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "List.__eq__": {
            "name": "__eq__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "List.__iter__": {
            "name": "__iter__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "List.__len__": {
            "name": "__len__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "List.all": {
            "name": "all",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "List.any": {
            "name": "any",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "List.append": {
            "name": "append",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "List.chain": {
            "name": "chain",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "List.chunk": {
            "name": "chunk",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "List.chunk_while": {
            "name": "chunk_while",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "List.compact": {
            "name": "compact",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "List.concat": {
            "name": "concat",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "List.count": {
            "name": "count",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "List.cycle": {
            "name": "cycle",
            "location": 247,
            "return": [],
            "arguments": {
                "self": [],
                "num": [],
                "callback": []
            }
        },
        "List.delete": {
            "name": "delete",
            "location": 274,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "List.delete_at": {
            "name": "delete_at",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "List.delete_if": {
            "name": "delete_if",
            "location": 295,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "List.difference": {
            "name": "difference",
            "location": 310,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "List.drop": {
            "name": "drop",
            "location": 327,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "List.drop_while": {
            "name": "drop_while",
            "location": 343,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "List.each_cons": {
            "name": "each_cons",
            "location": 364,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "List.each_slice": {
            "name": "each_slice",
            "location": 380,
            "return": [],
            "arguments": {
                "self": [],
                "n": [],
                "callback": []
            }
        },
        "List.each_with_index": {
            "name": "each_with_index",
            "location": 410,
            "return": [],
            "arguments": {
                "self": [],
                "callback": [],
                "start": []
            }
        },
        "List.each_with_object": {
            "name": "each_with_object",
            "location": 432,
            "return": [],
            "arguments": {
                "self": [],
                "callback": [],
                "object": []
            }
        },
        "List.empty": {
            "name": "empty",
            "location": 456,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "List.find": {
            "name": "find",
            "location": 463,
            "return": [],
            "arguments": {
                "self": [],
                "callback": [],
                "default": []
            }
        },
        "List.find_all": {
            "name": "find_all",
            "location": 483,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "List.find_index": {
            "name": "find_index",
            "location": 501,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "List.find_rindex": {
            "name": "find_rindex",
            "location": 511,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "List.first": {
            "name": "first",
            "location": 521,
            "return": [],
            "arguments": {
                "self": [],
                "num": []
            }
        },
        "List.first_while": {
            "name": "first_while",
            "location": 534,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "List.flat_map": {
            "name": "flat_map",
            "location": 556,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "List.grep": {
            "name": "grep",
            "location": 580,
            "return": [],
            "arguments": {
                "self": [],
                "pattern": [],
                "callback": []
            }
        },
        "List.grep_v": {
            "name": "grep_v",
            "location": 602,
            "return": [],
            "arguments": {
                "self": [],
                "pattern": [],
                "callback": []
            }
        },
        "List.group_by": {
            "name": "group_by",
            "location": 617,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "List.include": {
            "name": "include",
            "location": 641,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "List.join": {
            "name": "join",
            "location": 648,
            "return": [],
            "arguments": {
                "self": [],
                "separator": []
            }
        },
        "List.keep_if": {
            "name": "keep_if",
            "location": 660,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "List.map": {
            "name": "map",
            "location": 669,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "List.max": {
            "name": "max",
            "location": 679,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "List.max_n": {
            "name": "max_n",
            "location": 699,
            "return": [],
            "arguments": {
                "self": [],
                "num": [],
                "callback": []
            }
        },
        "List.min": {
            "name": "min",
            "location": 717,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "List.min_n": {
            "name": "min_n",
            "location": 731,
            "return": [],
            "arguments": {
                "self": [],
                "num": [],
                "callback": []
            }
        },
        "List.none": {
            "name": "none",
            "location": 748,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "List.one": {
            "name": "one",
            "location": 775,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "List.partition": {
            "name": "partition",
            "location": 799,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "List.reduce": {
            "name": "reduce",
            "location": 827,
            "return": [],
            "arguments": {
                "self": [],
                "callback": [],
                "init": []
            }
        },
        "List.reject": {
            "name": "reject",
            "location": 859,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "List.reverse": {
            "name": "reverse",
            "location": 881,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "List.rotate": {
            "name": "rotate",
            "location": 890,
            "return": [],
            "arguments": {
                "self": [],
                "num": []
            }
        },
        "List.select": {
            "name": "select",
            "location": 907,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "List.shuffle": {
            "name": "shuffle",
            "location": 916,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "List.sort": {
            "name": "sort",
            "location": 925,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "List.to_list": {
            "name": "to_list",
            "location": 935,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "List.unique": {
            "name": "unique",
            "location": 942,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "List.zip": {
            "name": "zip",
            "location": 957,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "slender-master/slender/set.py": {
        "Set.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "Set.__and__": {
            "name": "__and__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Set.__eq__": {
            "name": "__eq__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Set.__ge__": {
            "name": "__ge__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Set.__gt__": {
            "name": "__gt__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Set.__hash__": {
            "name": "__hash__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Set.__iter__": {
            "name": "__iter__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Set.__lshift__": {
            "name": "__lshift__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Set.__le__": {
            "name": "__le__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Set.__len__": {
            "name": "__len__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Set.__lt__": {
            "name": "__lt__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Set.__or__": {
            "name": "__or__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Set.__str__": {
            "name": "__str__",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Set.__sub__": {
            "name": "__sub__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Set.add": {
            "name": "add",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Set.delete": {
            "name": "delete",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Set.delete_if": {
            "name": "delete_if",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "Set.difference": {
            "name": "difference",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Set.isdisjoint": {
            "name": "isdisjoint",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Set.divide": {
            "name": "divide",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "Set.empty": {
            "name": "empty",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Set.flatten": {
            "name": "flatten",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Set.include": {
            "name": "include",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Set.intersect": {
            "name": "intersect",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Set.intersection": {
            "name": "intersection",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Set.keep_if": {
            "name": "keep_if",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "Set.map": {
            "name": "map",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "Set.ispropersubset": {
            "name": "ispropersubset",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Set.ispropersuperset": {
            "name": "ispropersuperset",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Set.issubset": {
            "name": "issubset",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Set.issuperset": {
            "name": "issuperset",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Set.reject": {
            "name": "reject",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "Set.select": {
            "name": "select",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "Set.subtract": {
            "name": "subtract",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Set.to_set": {
            "name": "to_set",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Set.union": {
            "name": "union",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "slender-master/slender/__init__.py": {},
    "slender-master/slender/tests/__init__.py": {},
    "slender-master/slender/tests/dictionary/test_any.py": {
        "TestAny.test_any_if_dictionary_is_empty_and_callback_given": {
            "name": "test_any_if_dictionary_is_empty_and_callback_given",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAny.test_any_if_dictionary_contains_element_and_callback_given_find_match": {
            "name": "test_any_if_dictionary_contains_element_and_callback_given_find_match",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAny.test_any_if_dictionary_contains_element_and_callback_given_not_find_match": {
            "name": "test_any_if_dictionary_contains_element_and_callback_given_not_find_match",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAny.test_any_if_callback_is_none": {
            "name": "test_any_if_callback_is_none",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/dictionary/test_assoc.py": {
        "TestAssoc.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAssoc.test_assoc_if_dictionary_is_empty": {
            "name": "test_assoc_if_dictionary_is_empty",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAssoc.test_assoc_if_dictionary_contains_element_and_finds_match": {
            "name": "test_assoc_if_dictionary_contains_element_and_finds_match",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAssoc.test_assoc_if_dictionary_contains_element_and_not_find_match": {
            "name": "test_assoc_if_dictionary_contains_element_and_not_find_match",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/dictionary/test_compact.py": {
        "TestCompact.test_compact_if_dictionary_is_empty": {
            "name": "test_compact_if_dictionary_is_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompact.test_compact_if_dictionary_not_contains_none_elements": {
            "name": "test_compact_if_dictionary_not_contains_none_elements",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompact.test_compact_if_dictionary_contains_none_elements": {
            "name": "test_compact_if_dictionary_contains_none_elements",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/dictionary/test_contain.py": {
        "TestContain.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContain.test_contain_if_dictionary_is_empty": {
            "name": "test_contain_if_dictionary_is_empty",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContain.test_contain_if_dictionary_not_contains_key": {
            "name": "test_contain_if_dictionary_not_contains_key",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContain.test_contain_if_dictionary_contains_key": {
            "name": "test_contain_if_dictionary_contains_key",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContain.test_contain_if_negate": {
            "name": "test_contain_if_negate",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/dictionary/test_default.py": {
        "TestDefault.test_default_if_dictionary_is_empty": {
            "name": "test_default_if_dictionary_is_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefault.test_default_if_dictionary_not_contains_none_element": {
            "name": "test_default_if_dictionary_not_contains_none_element",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDefault.test_default_if_dictionary_contains_none_element": {
            "name": "test_default_if_dictionary_contains_none_element",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/dictionary/test_delete.py": {
        "TestDelete.test_delete_if_dictionary_is_empty": {
            "name": "test_delete_if_dictionary_is_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelete.test_delete_if_dictionary_contains_element_and_finds_match": {
            "name": "test_delete_if_dictionary_contains_element_and_finds_match",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelete.test_delete_if_dictionary_contains_element_and_not_find_match": {
            "name": "test_delete_if_dictionary_contains_element_and_not_find_match",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelete.test_delete_if_dictionary_contains_element_and_callback_is_given_and_not_find_match": {
            "name": "test_delete_if_dictionary_contains_element_and_callback_is_given_and_not_find_match",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/dictionary/test_delete_if.py": {
        "TestDeleteIf.test_delete_if_if_dictionary_is_empty": {
            "name": "test_delete_if_if_dictionary_is_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeleteIf.test_delete_if_if_finds_match": {
            "name": "test_delete_if_if_finds_match",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeleteIf.test_delete_if_if_not_finds_match": {
            "name": "test_delete_if_if_not_finds_match",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/dictionary/test_dig.py": {
        "TestDig.test_dig_if_dictionary_is_empty": {
            "name": "test_dig_if_dictionary_is_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDig.test_dig_if_keys_is_empty": {
            "name": "test_dig_if_keys_is_empty",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDig.test_dig_if_dictionary_contains_element": {
            "name": "test_dig_if_dictionary_contains_element",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDig.test_dig_if_dictionary_contains_embedded_dictionary_with_keys_path": {
            "name": "test_dig_if_dictionary_contains_embedded_dictionary_with_keys_path",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDig.test_dig_if_dictionary_not_contains_key": {
            "name": "test_dig_if_dictionary_not_contains_key",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDig.test_dig_if_dictionary_contains_embedded_dictionary_intermediate_key_is_none": {
            "name": "test_dig_if_dictionary_contains_embedded_dictionary_intermediate_key_is_none",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDig.test_dig_if_dictionary_embedded_key_is_not_dictionary": {
            "name": "test_dig_if_dictionary_embedded_key_is_not_dictionary",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/dictionary/test_each.py": {
        "TestEach.test_each_if_dictionary_is_empty": {
            "name": "test_each_if_dictionary_is_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEach.test_each_if_dictionary_contains_elements": {
            "name": "test_each_if_dictionary_contains_elements",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/dictionary/test_each_key.py": {
        "TestEachKey.test_each_key_if_dictionary_is_empty": {
            "name": "test_each_key_if_dictionary_is_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEachKey.test_each_key_if_dictionary_contains_elements": {
            "name": "test_each_key_if_dictionary_contains_elements",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEachKey.test_each_key_if_dictionary_contains_elements_and_key_will_be_the_same": {
            "name": "test_each_key_if_dictionary_contains_elements_and_key_will_be_the_same",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/dictionary/test_each_value.py": {
        "TestEachValue.test_each_value_if_dictionary_is_empty": {
            "name": "test_each_value_if_dictionary_is_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEachValue.test_each_value_if_dictionary_contains_elements": {
            "name": "test_each_value_if_dictionary_contains_elements",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEachValue.test_each_value_if_dictionary_contains_elements_and_value_will_be_the_same": {
            "name": "test_each_value_if_dictionary_contains_elements_and_value_will_be_the_same",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/dictionary/test_empty.py": {
        "TestEmpty.test_empty_if_dictionary_is_empty": {
            "name": "test_empty_if_dictionary_is_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmpty.test_empty_if_dictionary_contains_elements": {
            "name": "test_empty_if_dictionary_contains_elements",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/dictionary/test_eq.py": {
        "TestEq.test_eq_if_dictionary_is_empty": {
            "name": "test_eq_if_dictionary_is_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEq.test_eq_if_dictionary_has_different_length": {
            "name": "test_eq_if_dictionary_has_different_length",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEq.test_eq_if_dictionary_contains_different_elements": {
            "name": "test_eq_if_dictionary_contains_different_elements",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEq.test_eq_if_dictionary_contains_same_elements": {
            "name": "test_eq_if_dictionary_contains_same_elements",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEq.test_eq_if_param_is_different": {
            "name": "test_eq_if_param_is_different",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/dictionary/test_flatten.py": {
        "TestFlatten.test_flatten_if_dictionary_is_empty": {
            "name": "test_flatten_if_dictionary_is_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlatten.test_flatten_if_dictionary_not_contains_embedded_lists": {
            "name": "test_flatten_if_dictionary_not_contains_embedded_lists",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlatten.test_flatten_if_dictionary_contains_one_level_embedded_lists": {
            "name": "test_flatten_if_dictionary_contains_one_level_embedded_lists",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlatten.test_flatten_if_dictionary_contains_two_levels_embedded_lists": {
            "name": "test_flatten_if_dictionary_contains_two_levels_embedded_lists",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/dictionary/test_ge.py": {
        "TestGe.test_ge_if_dictionary_is_empty": {
            "name": "test_ge_if_dictionary_is_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGe.test_ge_if_dictionary_is_greater": {
            "name": "test_ge_if_dictionary_is_greater",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGe.test_ge_if_dictionary_values_differ": {
            "name": "test_ge_if_dictionary_values_differ",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGe.test_ge_if_both_are_equal": {
            "name": "test_ge_if_both_are_equal",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGe.test_ge_if_they_overlap": {
            "name": "test_ge_if_they_overlap",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGe.test_ge_is_less_or_equal": {
            "name": "test_ge_is_less_or_equal",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/dictionary/test_get.py": {
        "TestGet.test_get_if_dictionary_is_empty": {
            "name": "test_get_if_dictionary_is_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGet.test_get_if_dictionary_is_empty_and_callback_is_given": {
            "name": "test_get_if_dictionary_is_empty_and_callback_is_given",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGet.test_get_if_dictionary_contains_elements_and_finds_match": {
            "name": "test_get_if_dictionary_contains_elements_and_finds_match",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGet.test_get_if_dictionary_contains_elements_and_not_finds_match": {
            "name": "test_get_if_dictionary_contains_elements_and_not_finds_match",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGet.test_get_if_dictionary_contains_elements_and_not_finds_match_and_callback_is_given": {
            "name": "test_get_if_dictionary_contains_elements_and_not_finds_match_and_callback_is_given",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/dictionary/test_getitem.py": {
        "TestGetitem.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetitem.test_getitem_if_dictionary_is_empty": {
            "name": "test_getitem_if_dictionary_is_empty",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetitem.test_getitem_if_dictionary_not_contains_key": {
            "name": "test_getitem_if_dictionary_not_contains_key",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetitem.test_getitem_if_dictionary_contains_element": {
            "name": "test_getitem_if_dictionary_contains_element",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/dictionary/test_get_values.py": {
        "TestGetValues.test_get_values_if_dictionary_is_empty": {
            "name": "test_get_values_if_dictionary_is_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetValues.test_get_values_if_dictionary_is_empty_and_callback_is_given": {
            "name": "test_get_values_if_dictionary_is_empty_and_callback_is_given",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetValues.test_get_values_if_dictionary_contains_elements_and_finds_match": {
            "name": "test_get_values_if_dictionary_contains_elements_and_finds_match",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetValues.test_get_values_if_dictionary_contains_elements_and_not_finds_match": {
            "name": "test_get_values_if_dictionary_contains_elements_and_not_finds_match",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetValues.test_get_values_if_dictionary_contains_elements_and_not_finds_match_and_callback_is_given": {
            "name": "test_get_values_if_dictionary_contains_elements_and_not_finds_match_and_callback_is_given",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/dictionary/test_gt.py": {
        "TestGt.test_gt_if_dictionary_is_empty": {
            "name": "test_gt_if_dictionary_is_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGt.test_gt_if_dictionary_is_greater": {
            "name": "test_gt_if_dictionary_is_greater",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGt.test_gt_if_dictionary_values_differ": {
            "name": "test_gt_if_dictionary_values_differ",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGt.test_gt_if_both_are_equal": {
            "name": "test_gt_if_both_are_equal",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGt.test_gt_if_they_overlap": {
            "name": "test_gt_if_they_overlap",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGt.test_gt_is_less_or_equal": {
            "name": "test_gt_is_less_or_equal",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/dictionary/test_has_key.py": {
        "TestHasKey.test_has_key_if_dictionary_is_empty": {
            "name": "test_has_key_if_dictionary_is_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHasKey.test_has_key_if_dictionary_contains_elements_and_finds_match": {
            "name": "test_has_key_if_dictionary_contains_elements_and_finds_match",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHasKey.test_has_key_if_dictionary_contains_elements_and_not_finds_match": {
            "name": "test_has_key_if_dictionary_contains_elements_and_not_finds_match",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/dictionary/test_has_value.py": {
        "TestHasValue.test_has_value_if_dictionary_is_empty": {
            "name": "test_has_value_if_dictionary_is_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHasValue.test_has_value_if_dictionary_contains_elements_and_finds_match": {
            "name": "test_has_value_if_dictionary_contains_elements_and_finds_match",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHasValue.test_has_value_if_dictionary_contains_elements_and_not_finds_match": {
            "name": "test_has_value_if_dictionary_contains_elements_and_not_finds_match",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/dictionary/test_init.py": {
        "TestInit.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInit.test_dictionary_is_not_none": {
            "name": "test_dictionary_is_not_none",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInit.test_dictionary_init_accepts_builtin_dict": {
            "name": "test_dictionary_init_accepts_builtin_dict",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInit.test_dictionary_init_accepts_dictionary": {
            "name": "test_dictionary_init_accepts_dictionary",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/dictionary/test_invert.py": {
        "TestInvert.test_invert_if_dictionary_is_empty": {
            "name": "test_invert_if_dictionary_is_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInvert.test_invert_if_dictionary_contains_different_values": {
            "name": "test_invert_if_dictionary_contains_different_values",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInvert.test_invert_if_dictionary_contains_same_values": {
            "name": "test_invert_if_dictionary_contains_same_values",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/dictionary/test_keep_if.py": {
        "TestKeepIf.test_keep_if_if_dictionary_is_empty": {
            "name": "test_keep_if_if_dictionary_is_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeepIf.test_keep_if_if_dictionary_contains_elements_and_finds_match": {
            "name": "test_keep_if_if_dictionary_contains_elements_and_finds_match",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeepIf.test_keep_if_if_dictionary_contains_elements_and_not_finds_match": {
            "name": "test_keep_if_if_dictionary_contains_elements_and_not_finds_match",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/dictionary/test_le.py": {
        "TestLe.test_le_if_dictionary_is_empty": {
            "name": "test_le_if_dictionary_is_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLe.test_le_if_dictionary_is_less": {
            "name": "test_le_if_dictionary_is_less",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLe.test_lt_if_dictionary_values_differ": {
            "name": "test_lt_if_dictionary_values_differ",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLe.test_le_if_both_are_equal": {
            "name": "test_le_if_both_are_equal",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLe.test_le_if_they_overlap": {
            "name": "test_le_if_they_overlap",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLe.test_le_is_greater_or_equal": {
            "name": "test_le_is_greater_or_equal",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/dictionary/test_len.py": {
        "TestLen.test_len_if_dictionary_is_empty": {
            "name": "test_len_if_dictionary_is_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLen.test_len_if_dictionary_contains_elements": {
            "name": "test_len_if_dictionary_contains_elements",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/dictionary/test_lt.py": {
        "TestLt.test_lt_if_dictionary_is_empty": {
            "name": "test_lt_if_dictionary_is_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLt.test_lt_if_dictionary_is_less": {
            "name": "test_lt_if_dictionary_is_less",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLt.test_lt_if_dictionary_values_differ": {
            "name": "test_lt_if_dictionary_values_differ",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLt.test_lt_if_both_are_equal": {
            "name": "test_lt_if_both_are_equal",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLt.test_lt_if_they_overlap": {
            "name": "test_lt_if_they_overlap",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLt.test_lt_is_greater_or_equal": {
            "name": "test_lt_is_greater_or_equal",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/dictionary/test_merge.py": {
        "TestMerge.test_merge_if_both_dictionaries_are_empty": {
            "name": "test_merge_if_both_dictionaries_are_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMerge.test_merge_if_dictionary_is_empty_and_param_contains_elements": {
            "name": "test_merge_if_dictionary_is_empty_and_param_contains_elements",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMerge.test_merge_if_dictionary_is_not_emtpy_and_param_is_empty": {
            "name": "test_merge_if_dictionary_is_not_emtpy_and_param_is_empty",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMerge.test_merge_if_both_dictionaries_contain_different_elements": {
            "name": "test_merge_if_both_dictionaries_contain_different_elements",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMerge.test_merge_if_both_dictionaries_contain_same_elements": {
            "name": "test_merge_if_both_dictionaries_contain_same_elements",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMerge.test_merge_if_both_dictionaries_contain_same_elements_and_callback_is_given": {
            "name": "test_merge_if_both_dictionaries_contain_same_elements_and_callback_is_given",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMerge.test_merge_if_param_is_dict_and_both_contain_same_elements_and_callback_is_given": {
            "name": "test_merge_if_param_is_dict_and_both_contain_same_elements_and_callback_is_given",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMerge.test_merge_if_parameter_type_is_different": {
            "name": "test_merge_if_parameter_type_is_different",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/dictionary/test_select.py": {
        "TestSelect.test_select_if_dictionary_is_empty": {
            "name": "test_select_if_dictionary_is_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelect.test_select_if_dictionary_contains_elements_and_finds_match": {
            "name": "test_select_if_dictionary_contains_elements_and_finds_match",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelect.test_select_if_dictionary_contains_elements_and_not_finds_match": {
            "name": "test_select_if_dictionary_contains_elements_and_not_finds_match",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/dictionary/test_setitem.py": {
        "TestSetitem.test_setitem_if_dictionary_not_contains_key": {
            "name": "test_setitem_if_dictionary_not_contains_key",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetitem.test_setitem_if_dictionary_contains_key": {
            "name": "test_setitem_if_dictionary_contains_key",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/dictionary/test_size.py": {
        "TestSize.test_size_if_dictionary_is_empty": {
            "name": "test_size_if_dictionary_is_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSize.test_size_if_dictionary_contains_elements": {
            "name": "test_size_if_dictionary_contains_elements",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/dictionary/test_slice.py": {
        "TestSlice.test_slice_if_dictionary_is_empty": {
            "name": "test_slice_if_dictionary_is_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSlice.test_slice_if_dictionary_contains_elements_and_not_finds_match": {
            "name": "test_slice_if_dictionary_contains_elements_and_not_finds_match",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSlice.test_slice_if_dictionary_contains_elements_and_all_keys_match": {
            "name": "test_slice_if_dictionary_contains_elements_and_all_keys_match",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSlice.test_slice_if_dictionary_contains_elements_and_some_key_match": {
            "name": "test_slice_if_dictionary_contains_elements_and_some_key_match",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/dictionary/test_to_dict.py": {
        "TestToDict.test_to_dict_if_dictionary_is_empty": {
            "name": "test_to_dict_if_dictionary_is_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToDict.test_to_dict_if_dictionary_contains_elements": {
            "name": "test_to_dict_if_dictionary_contains_elements",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/dictionary/test_to_list.py": {
        "TestToList.test_to_list_if_dictionary_is_empty": {
            "name": "test_to_list_if_dictionary_is_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToList.test_to_list_if_dictionary_contains_elements": {
            "name": "test_to_list_if_dictionary_contains_elements",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/dictionary/__init__.py": {},
    "slender-master/slender/tests/list/test_add.py": {
        "TestAdd.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAdd.test_add_if_other_is_none": {
            "name": "test_add_if_other_is_none",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAdd.test_add_if_other_is_empty": {
            "name": "test_add_if_other_is_empty",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAdd.test_add_if_other_is_non_empty": {
            "name": "test_add_if_other_is_non_empty",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAdd.test_add_if_self_is_empty": {
            "name": "test_add_if_self_is_empty",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAdd.test_add_if_other_is_different": {
            "name": "test_add_if_other_is_different",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_all.py": {
        "TestAll.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAll.test_all_if_regex_with_no_matching": {
            "name": "test_all_if_regex_with_no_matching",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAll.test_all_if_regex_with_all_matching": {
            "name": "test_all_if_regex_with_all_matching",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAll.test_all_if_lambda_with_no_matching": {
            "name": "test_all_if_lambda_with_no_matching",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAll.test_all_if_lambda_with_all_matching": {
            "name": "test_all_if_lambda_with_all_matching",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAll.test_all_if_param_type_is_different": {
            "name": "test_all_if_param_type_is_different",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_and.py": {
        "TestAnd.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnd.test_and_if_other_is_none": {
            "name": "test_and_if_other_is_none",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnd.test_and_if_other_is_empty": {
            "name": "test_and_if_other_is_empty",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnd.test_and_if_other_is_non_empty": {
            "name": "test_and_if_other_is_non_empty",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnd.test_and_if_self_is_empty": {
            "name": "test_and_if_self_is_empty",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnd.test_and_if_self_and_other_are_disjoint": {
            "name": "test_and_if_self_and_other_are_disjoint",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnd.test_and_if_other_is_different": {
            "name": "test_and_if_other_is_different",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_any.py": {
        "TestAny.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAny.test_any_if_regex_with_no_matching": {
            "name": "test_any_if_regex_with_no_matching",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAny.test_any_if_regex_with_any_matching": {
            "name": "test_any_if_regex_with_any_matching",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAny.test_any_if_lambda_with_no_matching": {
            "name": "test_any_if_lambda_with_no_matching",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAny.test_any_if_lambda_with_any_matching": {
            "name": "test_any_if_lambda_with_any_matching",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAny.test_any_if_param_is_different": {
            "name": "test_any_if_param_is_different",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_append.py": {
        "TestAppend.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAppend.test_append_if_other_is_none": {
            "name": "test_append_if_other_is_none",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAppend.test_append_if_other_is_not_none": {
            "name": "test_append_if_other_is_not_none",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_chain.py": {
        "TestChain.test_chain_if_other_empty": {
            "name": "test_chain_if_other_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChain.test_chain_if_other_non_empty": {
            "name": "test_chain_if_other_non_empty",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChain.test_chain_if_other_is_none": {
            "name": "test_chain_if_other_is_none",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChain.test_chain_if_other_is_not_iterable": {
            "name": "test_chain_if_other_is_not_iterable",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_chunk.py": {
        "TestChunk.test_chunk": {
            "name": "test_chunk",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChunk.test_chunk_if_param_is_not_lambda": {
            "name": "test_chunk_if_param_is_not_lambda",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_chunk_while.py": {
        "TestChunkWhile.test_chunk_while_one_by_one": {
            "name": "test_chunk_while_one_by_one",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChunkWhile.test_chunk_while_non_decreasing": {
            "name": "test_chunk_while_non_decreasing",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChunkWhile.test_chunk_while_adjacent_evens_odds": {
            "name": "test_chunk_while_adjacent_evens_odds",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChunkWhile.test_chunk_while_if_param_is_not_lambda": {
            "name": "test_chunk_while_if_param_is_not_lambda",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_compact.py": {
        "TestCompact.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompact.test_compact_if_self_contains_none": {
            "name": "test_compact_if_self_contains_none",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompact.test_compact_if_self_does_not_contain_none": {
            "name": "test_compact_if_self_does_not_contain_none",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_concat.py": {
        "TestConcat.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConcat.test_concat_if_other_is_empty": {
            "name": "test_concat_if_other_is_empty",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConcat.test_concat_if_other_is_non_empty": {
            "name": "test_concat_if_other_is_non_empty",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConcat.test_concat_if_self_is_empty": {
            "name": "test_concat_if_self_is_empty",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConcat.test_concat_if_other_is_different": {
            "name": "test_concat_if_other_is_different",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_count.py": {
        "TestCount.test_count_if_none": {
            "name": "test_count_if_none",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCount.test_count_if_item": {
            "name": "test_count_if_item",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCount.test_count_if_lambda": {
            "name": "test_count_if_lambda",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCount.test_count_if_param_is_string": {
            "name": "test_count_if_param_is_string",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_cycle.py": {
        "TestCycle.test_cycle_if_param_and_func_not_none": {
            "name": "test_cycle_if_param_and_func_not_none",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCycle.test_cycle_if_func_is_none": {
            "name": "test_cycle_if_func_is_none",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCycle.test_cycle_if_lambda": {
            "name": "test_cycle_if_lambda",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCycle.test_cycle_if_no_params": {
            "name": "test_cycle_if_no_params",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_delete.py": {
        "TestDelete.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelete.test_delete_if_obj_is_found_multiple_times": {
            "name": "test_delete_if_obj_is_found_multiple_times",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelete.test_delete_if_obj_is_not_found": {
            "name": "test_delete_if_obj_is_not_found",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelete.test_delete_if_self_is_empty": {
            "name": "test_delete_if_self_is_empty",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_delete_at.py": {
        "TestDeleteAt.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeleteAt.test_delete_at_if_index_in_range": {
            "name": "test_delete_at_if_index_in_range",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeleteAt.test_delete_at_if_index_out_of_range": {
            "name": "test_delete_at_if_index_out_of_range",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeleteAt.test_delete_at_if_self_is_empty": {
            "name": "test_delete_at_if_self_is_empty",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_delete_if.py": {
        "TestDeleteIf.test_delete_if_if_list_is_empty": {
            "name": "test_delete_if_if_list_is_empty",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeleteIf.test_delete_if_if_lambda_is_valid_greater_than": {
            "name": "test_delete_if_if_lambda_is_valid_greater_than",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeleteIf.test_delete_if_if_lambda_is_valid_len": {
            "name": "test_delete_if_if_lambda_is_valid_len",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeleteIf.test_delete_if_if_lambda_is_different": {
            "name": "test_delete_if_if_lambda_is_different",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_difference.py": {
        "TestDifference.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDifference.test_difference_if_other_is_none": {
            "name": "test_difference_if_other_is_none",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDifference.test_difference_if_other_has_intersection": {
            "name": "test_difference_if_other_has_intersection",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDifference.test_difference_if_other_is_disjoint": {
            "name": "test_difference_if_other_is_disjoint",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDifference.test_difference_if_other_is_different": {
            "name": "test_difference_if_other_is_different",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_drop.py": {
        "TestDrop.test_drop_if_param_greater_than_length_returns_empty": {
            "name": "test_drop_if_param_greater_than_length_returns_empty",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDrop.test_drop_if_param_is_between_zero_and_length_returns_part": {
            "name": "test_drop_if_param_is_between_zero_and_length_returns_part",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDrop.test_drop_if_param_is_less_than_zero_raises_error": {
            "name": "test_drop_if_param_is_less_than_zero_raises_error",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDrop.test_drop_if_param_is_different_raises_error": {
            "name": "test_drop_if_param_is_different_raises_error",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_drop_while.py": {
        "TestDropWhile.test_drop_while_if_param_is_lambda_and_finds_match": {
            "name": "test_drop_while_if_param_is_lambda_and_finds_match",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDropWhile.test_drop_while_if_param_is_lambda_and_no_match": {
            "name": "test_drop_while_if_param_is_lambda_and_no_match",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDropWhile.test_drop_while_if_param_is_different_raises_error": {
            "name": "test_drop_while_if_param_is_different_raises_error",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_each_cons.py": {
        "TestEachCons.test_each_cons_if_param_is_equal_to_length": {
            "name": "test_each_cons_if_param_is_equal_to_length",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEachCons.test_each_cons_if_param_is_less_length": {
            "name": "test_each_cons_if_param_is_less_length",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEachCons.test_each_cons_if_param_is_less_than_zero_raises_error": {
            "name": "test_each_cons_if_param_is_less_than_zero_raises_error",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEachCons.test_each_cons_if_param_is_different_raises_error": {
            "name": "test_each_cons_if_param_is_different_raises_error",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_each_slice.py": {
        "TestEachSlice.test_each_slice_if_param_greater_than_length": {
            "name": "test_each_slice_if_param_greater_than_length",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEachSlice.test_each_slice_if_param_is_equal_to_length": {
            "name": "test_each_slice_if_param_is_equal_to_length",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEachSlice.test_each_slice_if_param_is_less_length": {
            "name": "test_each_slice_if_param_is_less_length",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEachSlice.test_each_slice_if_param_is_less_than_zero_raises_error": {
            "name": "test_each_slice_if_param_is_less_than_zero_raises_error",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEachSlice.test_each_slice_if_func_is_valid": {
            "name": "test_each_slice_if_func_is_valid",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEachSlice.test_each_slice_if_param_is_different_raises_error": {
            "name": "test_each_slice_if_param_is_different_raises_error",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEachSlice.test_each_slice_if_param_is_int_and_func_is_different_raises_error": {
            "name": "test_each_slice_if_param_is_int_and_func_is_different_raises_error",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_each_with_index.py": {
        "TestEachWithIndex.test_each_with_index_if_param_is_none": {
            "name": "test_each_with_index_if_param_is_none",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEachWithIndex.test_each_with_index_if_param_is_const": {
            "name": "test_each_with_index_if_param_is_const",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEachWithIndex.test_each_with_index_if_param_is_none_and_func_is_not_none": {
            "name": "test_each_with_index_if_param_is_none_and_func_is_not_none",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEachWithIndex.test_each_with_index_if_param_is_const_and_func_is_not_none": {
            "name": "test_each_with_index_if_param_is_const_and_func_is_not_none",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEachWithIndex.test_each_with_index_if_param_is_const_func_is_different": {
            "name": "test_each_with_index_if_param_is_const_func_is_different",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_each_with_object.py": {
        "TestEachWithObject.test_each_with_object_if_param_is_array": {
            "name": "test_each_with_object_if_param_is_array",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEachWithObject.test_each_with_object_if_param_is_string": {
            "name": "test_each_with_object_if_param_is_string",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEachWithObject.test_each_with_object_if_param_is_array_and_func_is_not_none": {
            "name": "test_each_with_object_if_param_is_array_and_func_is_not_none",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEachWithObject.test_each_with_object_if_func_is_different": {
            "name": "test_each_with_object_if_func_is_different",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_empty.py": {
        "TestEmpty.test_empty_if_list_is_empty": {
            "name": "test_empty_if_list_is_empty",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmpty.test_empty_if_list_is_not_empty": {
            "name": "test_empty_if_list_is_not_empty",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_find.py": {
        "TestFind.test_find_if_default_none_and_func_not_none": {
            "name": "test_find_if_default_none_and_func_not_none",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFind.test_find_if_default_and_func_not_none": {
            "name": "test_find_if_default_and_func_not_none",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFind.test_find_if_default_applied_func_results_no_match": {
            "name": "test_find_if_default_applied_func_results_no_match",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFind.test_find_if_func_is_different_raises_error": {
            "name": "test_find_if_func_is_different_raises_error",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_find_all.py": {
        "TestFindAll.test_find_all_if_func_is_none": {
            "name": "test_find_all_if_func_is_none",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFindAll.test_find_all_if_func_is_valid": {
            "name": "test_find_all_if_func_is_valid",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFindAll.test_find_all_if_func_is_invalid_for_all_items": {
            "name": "test_find_all_if_func_is_invalid_for_all_items",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFindAll.test_find_all_if_func_is_different": {
            "name": "test_find_all_if_func_is_different",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_find_index.py": {
        "TestFindIndex.test_find_index_if_param_is_in_range": {
            "name": "test_find_index_if_param_is_in_range",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFindIndex.test_find_index_if_param_is_out_of_range": {
            "name": "test_find_index_if_param_is_out_of_range",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFindIndex.test_find_index_if_param_is_lambda_with_match": {
            "name": "test_find_index_if_param_is_lambda_with_match",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_find_rindex.py": {
        "TestFindRindex.test_find_rindex_if_param_is_in_range": {
            "name": "test_find_rindex_if_param_is_in_range",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFindRindex.test_find_rindex_if_param_is_the_first_item_in_the_list": {
            "name": "test_find_rindex_if_param_is_the_first_item_in_the_list",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFindRindex.test_find_rindex_if_param_is_out_of_range": {
            "name": "test_find_rindex_if_param_is_out_of_range",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFindRindex.test_find_rindex_if_param_is_lambda_with_match": {
            "name": "test_find_rindex_if_param_is_lambda_with_match",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_first.py": {
        "TestFirst.test_first_if_param_is_none": {
            "name": "test_first_if_param_is_none",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFirst.test_first_if_param_is_in_range": {
            "name": "test_first_if_param_is_in_range",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFirst.test_first_if_param_is_out_of_range": {
            "name": "test_first_if_param_is_out_of_range",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFirst.test_first_if_array_is_empty_and_param_is_none": {
            "name": "test_first_if_array_is_empty_and_param_is_none",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFirst.test_first_if_array_is_empty_and_param_is_greater_than_zero": {
            "name": "test_first_if_array_is_empty_and_param_is_greater_than_zero",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFirst.test_first_if_param_is_non_int": {
            "name": "test_first_if_param_is_non_int",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_first_while.py": {
        "TestFirstWhile.test_first_while_if_lambda_finds_matching": {
            "name": "test_first_while_if_lambda_finds_matching",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFirstWhile.test_first_while_if_lambda_is_not_matching": {
            "name": "test_first_while_if_lambda_is_not_matching",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFirstWhile.test_first_while_if_lambda_finds_all_matching": {
            "name": "test_first_while_if_lambda_finds_all_matching",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFirstWhile.test_first_while_if_lambda_is_different": {
            "name": "test_first_while_if_lambda_is_different",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_flat_map.py": {
        "TestFlatMap.test_flat_map_if_none": {
            "name": "test_flat_map_if_none",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlatMap.test_flat_map_if_none_with_sublists": {
            "name": "test_flat_map_if_none_with_sublists",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlatMap.test_flat_map_if_lambda": {
            "name": "test_flat_map_if_lambda",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlatMap.test_flat_map_if_lambda_is_given_mixed_list": {
            "name": "test_flat_map_if_lambda_is_given_mixed_list",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_getitem.py": {
        "TestGetitem.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetitem.test_support_indexing_get": {
            "name": "test_support_indexing_get",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_grep.py": {
        "TestGrep.test_grep_if_param_regex_string_and_func_is_none": {
            "name": "test_grep_if_param_regex_string_and_func_is_none",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGrep.test_grep_if_param_regex_object_and_func_is_none": {
            "name": "test_grep_if_param_regex_object_and_func_is_none",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGrep.test_grep_if_param_regex_object_and_func_is_lambda": {
            "name": "test_grep_if_param_regex_object_and_func_is_lambda",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGrep.test_grep_if_param_not_matching": {
            "name": "test_grep_if_param_not_matching",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGrep.test_grep_if_param_is_non_regex_object_nor_string": {
            "name": "test_grep_if_param_is_non_regex_object_nor_string",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_grep_v.py": {
        "TestGrepV.test_grep_v_if_param_regex_string_and_func_is_none": {
            "name": "test_grep_v_if_param_regex_string_and_func_is_none",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGrepV.test_grep_v_if_param_regex_object_and_func_is_none": {
            "name": "test_grep_v_if_param_regex_object_and_func_is_none",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGrepV.test_grep_v_if_param_regex_object_and_func_is_lambda": {
            "name": "test_grep_v_if_param_regex_object_and_func_is_lambda",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGrepV.test_grep_v_if_param_not_matching": {
            "name": "test_grep_v_if_param_not_matching",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGrepV.test_grep_v_if_param_is_non_regex_object_nor_string": {
            "name": "test_grep_v_if_param_is_non_regex_object_nor_string",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_group_by.py": {
        "TestGroupBy.test_group_by_if_param_is_lambda": {
            "name": "test_group_by_if_param_is_lambda",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupBy.test_group_by_if_param_is_lambda_create_one_key": {
            "name": "test_group_by_if_param_is_lambda_create_one_key",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGroupBy.test_group_by_if_param_is_non_regex_object_nor_string": {
            "name": "test_group_by_if_param_is_non_regex_object_nor_string",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_include.py": {
        "TestInclude.test_include_if_value_in_array": {
            "name": "test_include_if_value_in_array",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInclude.test_include_if_value_not_in_array": {
            "name": "test_include_if_value_not_in_array",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_init.py": {
        "TestInit.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInit.test_list_is_not_none": {
            "name": "test_list_is_not_none",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInit.test_basic": {
            "name": "test_basic",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_iter.py": {
        "TestIter.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIter.test_iter_if_empty": {
            "name": "test_iter_if_empty",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIter.test_iter_if_non_empty": {
            "name": "test_iter_if_non_empty",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_join.py": {
        "TestJoin.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJoin.test_join_if_separator_is_none": {
            "name": "test_join_if_separator_is_none",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJoin.test_join_if_separator_is_emtpy_str": {
            "name": "test_join_if_separator_is_emtpy_str",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJoin.test_join_if_separator_is_str": {
            "name": "test_join_if_separator_is_str",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJoin.test_join_if_separator_is_different": {
            "name": "test_join_if_separator_is_different",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_keep_if.py": {
        "TestKeepIf.test_keep_if_if_func_is_none": {
            "name": "test_keep_if_if_func_is_none",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeepIf.test_keep_if_if_func_is_valid": {
            "name": "test_keep_if_if_func_is_valid",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeepIf.test_keep_if_if_func_is_invalid_for_all_items": {
            "name": "test_keep_if_if_func_is_invalid_for_all_items",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeepIf.test_keep_if_if_func_is_different": {
            "name": "test_keep_if_if_func_is_different",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_len.py": {
        "TestLen.test_len_if_list_is_not_empty": {
            "name": "test_len_if_list_is_not_empty",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLen.test_len_if_list_is_empty": {
            "name": "test_len_if_list_is_empty",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_lshift.py": {
        "TestLShift.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLShift.test_lshift_if_other_is_none": {
            "name": "test_lshift_if_other_is_none",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLShift.test_lshift_if_other_is_not_none": {
            "name": "test_lshift_if_other_is_not_none",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_map.py": {
        "TestMap.test_map_if_none": {
            "name": "test_map_if_none",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMap.test_map_if_lambda": {
            "name": "test_map_if_lambda",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_max.py": {
        "TestMax.test_max_if_list_of_numbers": {
            "name": "test_max_if_list_of_numbers",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMax.test_max_if_list_of_string": {
            "name": "test_max_if_list_of_string",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMax.test_max_if_list_is_empty": {
            "name": "test_max_if_list_is_empty",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMax.test_max_if_list_is_empty_with_lambda": {
            "name": "test_max_if_list_is_empty_with_lambda",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMax.test_max_if_compare_with_lambda_len": {
            "name": "test_max_if_compare_with_lambda_len",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMax.test_max_if_compare_with_lambda_div": {
            "name": "test_max_if_compare_with_lambda_div",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMax.test_max_if_lambda_is_different": {
            "name": "test_max_if_lambda_is_different",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_max_n.py": {
        "TestMaxN.test_max_n_if_list_of_numbers": {
            "name": "test_max_n_if_list_of_numbers",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMaxN.test_max_n_if_list_of_string": {
            "name": "test_max_n_if_list_of_string",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMaxN.test_max_n_if_list_is_empty": {
            "name": "test_max_n_if_list_is_empty",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMaxN.test_max_n_if_list_is_empty_with_lambda": {
            "name": "test_max_n_if_list_is_empty_with_lambda",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMaxN.test_max_n_if_compare_with_lambda_len": {
            "name": "test_max_n_if_compare_with_lambda_len",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMaxN.test_max_n_if_compare_with_lambda_div": {
            "name": "test_max_n_if_compare_with_lambda_div",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMaxN.test_max_n_if_num_is_different": {
            "name": "test_max_n_if_num_is_different",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMaxN.test_max_n_if_lambda_is_different": {
            "name": "test_max_n_if_lambda_is_different",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_min.py": {
        "TestMin.test_min_if_list_of_numbers": {
            "name": "test_min_if_list_of_numbers",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMin.test_min_if_list_of_string": {
            "name": "test_min_if_list_of_string",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMin.test_min_if_list_is_empty": {
            "name": "test_min_if_list_is_empty",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMin.test_min_if_list_is_empty_with_lambda": {
            "name": "test_min_if_list_is_empty_with_lambda",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMin.test_min_if_compare_with_lambda_len": {
            "name": "test_min_if_compare_with_lambda_len",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMin.test_min_if_compare_with_lambda_div": {
            "name": "test_min_if_compare_with_lambda_div",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMin.test_min_if_lambda_is_different": {
            "name": "test_min_if_lambda_is_different",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_min_n.py": {
        "TestMinN.test_min_n_if_list_of_numbers": {
            "name": "test_min_n_if_list_of_numbers",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMinN.test_min_n_if_list_of_string": {
            "name": "test_min_n_if_list_of_string",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMinN.test_min_n_if_list_is_empty": {
            "name": "test_min_n_if_list_is_empty",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMinN.test_min_n_if_list_is_empty_with_lambda": {
            "name": "test_min_n_if_list_is_empty_with_lambda",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMinN.test_min_n_if_compare_with_lambda_len": {
            "name": "test_min_n_if_compare_with_lambda_len",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMinN.test_min_n_if_compare_with_lambda_div": {
            "name": "test_min_n_if_compare_with_lambda_div",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMinN.test_min_n_if_num_is_different": {
            "name": "test_min_n_if_num_is_different",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMinN.test_min_n_if_lambda_is_different": {
            "name": "test_min_n_if_lambda_is_different",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_mul.py": {
        "TestMul.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMul.test_mul_if_other_is_none": {
            "name": "test_mul_if_other_is_none",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMul.test_mul_if_scalar_is_positive": {
            "name": "test_mul_if_scalar_is_positive",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMul.test_mul_if_scalar_is_negative": {
            "name": "test_mul_if_scalar_is_negative",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMul.test_mul_if_scalar_is_zero": {
            "name": "test_mul_if_scalar_is_zero",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMul.test_mul_if_other_is_different": {
            "name": "test_mul_if_other_is_different",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_none.py": {
        "TestNone.test_none_if_none_of_them_are_falsy": {
            "name": "test_none_if_none_of_them_are_falsy",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNone.test_none_if_not_all_of_them_are_falsy": {
            "name": "test_none_if_not_all_of_them_are_falsy",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNone.test_none_if_all_of_them_are_falsy": {
            "name": "test_none_if_all_of_them_are_falsy",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNone.test_none_if_list_is_empty": {
            "name": "test_none_if_list_is_empty",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNone.test_none_if_lambda_is_true_on_all": {
            "name": "test_none_if_lambda_is_true_on_all",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNone.test_none_if_lambda_is_true_on_some": {
            "name": "test_none_if_lambda_is_true_on_some",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNone.test_none_if_lambda_is_false_on_all": {
            "name": "test_none_if_lambda_is_false_on_all",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNone.test_none_if_lambda_is_different": {
            "name": "test_none_if_lambda_is_different",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_one.py": {
        "TestOne.test_one_if_all_of_them_are_truthy": {
            "name": "test_one_if_all_of_them_are_truthy",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOne.test_one_if_more_than_one_is_truthy": {
            "name": "test_one_if_more_than_one_is_truthy",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOne.test_one_if_only_one_is_truthy": {
            "name": "test_one_if_only_one_is_truthy",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOne.test_one_if_list_is_empty": {
            "name": "test_one_if_list_is_empty",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOne.test_one_if_lambda_is_true_on_all": {
            "name": "test_one_if_lambda_is_true_on_all",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOne.test_one_if_lambda_is_true_only_one": {
            "name": "test_one_if_lambda_is_true_only_one",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOne.test_one_if_lambda_is_different": {
            "name": "test_one_if_lambda_is_different",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_partition.py": {
        "TestPartition.test_partition_if_lambda_is_none": {
            "name": "test_partition_if_lambda_is_none",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPartition.test_partition_if_list_is_empty": {
            "name": "test_partition_if_list_is_empty",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPartition.test_partition_if_lambda_is_valid_greater_than": {
            "name": "test_partition_if_lambda_is_valid_greater_than",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPartition.test_partition_if_lambda_is_valid_len": {
            "name": "test_partition_if_lambda_is_valid_len",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPartition.test_partition_if_lambda_is_different": {
            "name": "test_partition_if_lambda_is_different",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_reduce.py": {
        "TestReduce.test_reduce_if_init_is_not_given_and_concat": {
            "name": "test_reduce_if_init_is_not_given_and_concat",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReduce.test_reduce_if_init_is_not_given_and_add_up": {
            "name": "test_reduce_if_init_is_not_given_and_add_up",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReduce.test_reduce_if_init_is_given_and_concat": {
            "name": "test_reduce_if_init_is_given_and_concat",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReduce.test_reduce_if_init_is_given_and_add_up": {
            "name": "test_reduce_if_init_is_given_and_add_up",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReduce.test_reduce_if_array_is_empty": {
            "name": "test_reduce_if_array_is_empty",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReduce.test_reduce_if_callback_is_different": {
            "name": "test_reduce_if_callback_is_different",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_reject.py": {
        "TestReject.test_reject_if_lambda_is_none": {
            "name": "test_reject_if_lambda_is_none",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReject.test_reject_if_list_is_empty": {
            "name": "test_reject_if_list_is_empty",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReject.test_reject_if_lambda_is_valid_greater_than": {
            "name": "test_reject_if_lambda_is_valid_greater_than",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReject.test_reject_if_lambda_is_valid_len": {
            "name": "test_reject_if_lambda_is_valid_len",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReject.test_reject_if_lambda_is_different": {
            "name": "test_reject_if_lambda_is_different",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_reverse.py": {
        "TestReverse.test_reverse_if_list_is_not_empty": {
            "name": "test_reverse_if_list_is_not_empty",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReverse.test_reverse_if_list_is_empty": {
            "name": "test_reverse_if_list_is_empty",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReverse.test_reverse_if_list_contains_lists": {
            "name": "test_reverse_if_list_contains_lists",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_rotate.py": {
        "TestRotate.test_rotate_if_param_is_in_range": {
            "name": "test_rotate_if_param_is_in_range",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRotate.test_rotate_if_param_is_equal_to_len": {
            "name": "test_rotate_if_param_is_equal_to_len",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRotate.test_rotate_if_param_is_out_of_range": {
            "name": "test_rotate_if_param_is_out_of_range",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRotate.test_rotate_if_param_is_different": {
            "name": "test_rotate_if_param_is_different",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_select.py": {
        "TestSelect.test_select_if_func_is_valid": {
            "name": "test_select_if_func_is_valid",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelect.test_select_if_func_is_invalid_for_all_items": {
            "name": "test_select_if_func_is_invalid_for_all_items",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelect.test_select_if_func_is_different": {
            "name": "test_select_if_func_is_different",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_setitem.py": {
        "TestSetitem.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetitem.test_support_indexing_set_raise_error_if_index_out_of_array": {
            "name": "test_support_indexing_set_raise_error_if_index_out_of_array",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSetitem.test_support_indexing_set": {
            "name": "test_support_indexing_set",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_shuffle.py": {
        "TestShuffle.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShuffle.test_shuffle_if_self_empty": {
            "name": "test_shuffle_if_self_empty",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShuffle.test_append_if_self_not_empty": {
            "name": "test_append_if_self_not_empty",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_sort.py": {
        "TestSort.test_sort_if_lambda_is_none": {
            "name": "test_sort_if_lambda_is_none",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSort.test_sort_if_list_is_empty": {
            "name": "test_sort_if_list_is_empty",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSort.test_sort_if_lambda_is_valid_len": {
            "name": "test_sort_if_lambda_is_valid_len",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSort.test_sort_if_lambda_is_different": {
            "name": "test_sort_if_lambda_is_different",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_sub.py": {
        "TestSub.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSub.test_sub_if_other_is_none": {
            "name": "test_sub_if_other_is_none",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSub.test_sub_if_other_has_intersection": {
            "name": "test_sub_if_other_has_intersection",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSub.test_sub_if_other_is_disjoint": {
            "name": "test_sub_if_other_is_disjoint",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSub.test_sub_if_other_is_different": {
            "name": "test_sub_if_other_is_different",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_unique.py": {
        "TestUnique.test_unique_if_lambda_is_none": {
            "name": "test_unique_if_lambda_is_none",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnique.test_unique_if_lambda_is_not_none": {
            "name": "test_unique_if_lambda_is_not_none",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnique.test_unique_if_lambda_is_different": {
            "name": "test_unique_if_lambda_is_different",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/test_zip.py": {
        "TestZip.test_zip_if_other_is_empty": {
            "name": "test_zip_if_other_is_empty",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestZip.test_zip_if_other_len_is_equal": {
            "name": "test_zip_if_other_len_is_equal",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestZip.test_zip_if_other_is_longer": {
            "name": "test_zip_if_other_is_longer",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestZip.test_zip_if_other_is_different": {
            "name": "test_zip_if_other_is_different",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/list/__init__.py": {},
    "slender-master/slender/tests/set/test_add.py": {
        "TestAdd.test_add_if_set_already_contains_element": {
            "name": "test_add_if_set_already_contains_element",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAdd.test_add_if_set_not_contains_element": {
            "name": "test_add_if_set_not_contains_element",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAdd.test_add_if_set_is_empty": {
            "name": "test_add_if_set_is_empty",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/set/test_and.py": {
        "TestAnd.test_and_other_with_inersection": {
            "name": "test_and_other_with_inersection",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnd.test_and_other_without_intersection": {
            "name": "test_and_other_without_intersection",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAnd.test_and_other_is_different": {
            "name": "test_and_other_is_different",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/set/test_delete.py": {
        "TestDelete.test_delete_if_set_contains_element": {
            "name": "test_delete_if_set_contains_element",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDelete.test_delete_if_set_not_contains_element": {
            "name": "test_delete_if_set_not_contains_element",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/set/test_delete_if.py": {
        "TestDeleteIf.test_delete_if_if_lambda_find_match": {
            "name": "test_delete_if_if_lambda_find_match",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeleteIf.test_delete_if_if_lambda_finds_no_match": {
            "name": "test_delete_if_if_lambda_finds_no_match",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDeleteIf.test_delete_if_if_set_is_empty": {
            "name": "test_delete_if_if_set_is_empty",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/set/test_difference.py": {
        "TestDifference.test_difference_if_other_subset_of_self_enhanced_set": {
            "name": "test_difference_if_other_subset_of_self_enhanced_set",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDifference.test_difference_if_other_equivalent_to_self": {
            "name": "test_difference_if_other_equivalent_to_self",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDifference.test_difference_if_set_is_empty": {
            "name": "test_difference_if_set_is_empty",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/set/test_divide.py": {
        "TestDivide.test_divide_lambda_creates_subsets": {
            "name": "test_divide_lambda_creates_subsets",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDivide.test_divide_lambda_creates_single_element_subsets": {
            "name": "test_divide_lambda_creates_single_element_subsets",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDivide.test_divide_if_set_is_empty": {
            "name": "test_divide_if_set_is_empty",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/set/test_empty.py": {
        "TestEmpty.test_empty_if_self_is_empty": {
            "name": "test_empty_if_self_is_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEmpty.test_empty_if_self_is_not_empty": {
            "name": "test_empty_if_self_is_not_empty",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/set/test_eq.py": {
        "TestEq.test_eq_other_not_equal": {
            "name": "test_eq_other_not_equal",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEq.test_eq_other_not_equal_both_enhanced_set": {
            "name": "test_eq_other_not_equal_both_enhanced_set",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEq.test_eq_other_greater_len": {
            "name": "test_eq_other_greater_len",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEq.test_eq_other_is_equal": {
            "name": "test_eq_other_is_equal",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEq.test_eq_other_is_equal_with_enhanced_set": {
            "name": "test_eq_other_is_equal_with_enhanced_set",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestEq.test_eq_other_is_different": {
            "name": "test_eq_other_is_different",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/set/test_flatten.py": {
        "TestFlatten.test_flatten_if_unflatten_set": {
            "name": "test_flatten_if_unflatten_set",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlatten.test_flatten_flat_set": {
            "name": "test_flatten_flat_set",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlatten.test_flatten_if_subset_is_enhanced_set": {
            "name": "test_flatten_if_subset_is_enhanced_set",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFlatten.test_flatten_empty_set": {
            "name": "test_flatten_empty_set",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/set/test_ge.py": {
        "TestGe.test_ge_other_is_set_and_subset_of_self": {
            "name": "test_ge_other_is_set_and_subset_of_self",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGe.test_ge_other_is_set_and_not_subset_of_self": {
            "name": "test_ge_other_is_set_and_not_subset_of_self",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGe.test_ge_other_is_enhanced_set_and_subset_of_self": {
            "name": "test_ge_other_is_enhanced_set_and_subset_of_self",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGe.test_ge_other_is_enhanced_set_and_not_subset_of_self": {
            "name": "test_ge_other_is_enhanced_set_and_not_subset_of_self",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGe.test_ge_other_is_different": {
            "name": "test_ge_other_is_different",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/set/test_gt.py": {
        "TestGt.test_gt_other_is_set_and_subset_of_self": {
            "name": "test_gt_other_is_set_and_subset_of_self",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGt.test_gt_other_is_set_and_not_subset_of_self": {
            "name": "test_gt_other_is_set_and_not_subset_of_self",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGt.test_gt_other_is_enhanced_set_and_subset_of_self": {
            "name": "test_gt_other_is_enhanced_set_and_subset_of_self",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGt.test_gt_other_is_enhanced_set_and_not_subset_of_self": {
            "name": "test_gt_other_is_enhanced_set_and_not_subset_of_self",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGt.test_gt_other_is_different": {
            "name": "test_gt_other_is_different",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/set/test_include.py": {
        "TestInclude.test_include_if_self_contains_element": {
            "name": "test_include_if_self_contains_element",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInclude.test_include_if_self_not_contains_elements": {
            "name": "test_include_if_self_not_contains_elements",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/set/test_intersection.py": {
        "TestIntersection.test_intersection_other_with_inersection": {
            "name": "test_intersection_other_with_inersection",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntersection.test_intersection_other_without_intersection": {
            "name": "test_intersection_other_without_intersection",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIntersection.test_intersection_other_is_different": {
            "name": "test_intersection_other_is_different",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/set/test_isdisjoint.py": {
        "TestIsdisjoint.test_isdisjoint_if_have_intersection": {
            "name": "test_isdisjoint_if_have_intersection",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsdisjoint.test_isdisjoint_if_disjoint": {
            "name": "test_isdisjoint_if_disjoint",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIsdisjoint.test_isdisjoint_if_param_is_different": {
            "name": "test_isdisjoint_if_param_is_different",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/set/test_ispropersubset.py": {
        "TestIspropersubset.test_ispropersubset_self_is_not_proper_subset_of_other_enhanced_set": {
            "name": "test_ispropersubset_self_is_not_proper_subset_of_other_enhanced_set",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIspropersubset.test_ispropersubset_self_is_not_subset_of_other_enhanced_set": {
            "name": "test_ispropersubset_self_is_not_subset_of_other_enhanced_set",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/set/test_ispropersuperset.py": {
        "TestIspropersuperset.test_ispropersuperset_other_is_set_and_subset_of_self": {
            "name": "test_ispropersuperset_other_is_set_and_subset_of_self",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIspropersuperset.test_ispropersuperset_other_is_set_and_not_subset_of_self": {
            "name": "test_ispropersuperset_other_is_set_and_not_subset_of_self",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIspropersuperset.test_ispropersuperset_other_is_enhanced_set_and_subset_of_self": {
            "name": "test_ispropersuperset_other_is_enhanced_set_and_subset_of_self",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIspropersuperset.test_ispropersuperset_other_is_enhanced_set_and_not_subset_of_self": {
            "name": "test_ispropersuperset_other_is_enhanced_set_and_not_subset_of_self",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIspropersuperset.test_ispropersuperset_other_is_different": {
            "name": "test_ispropersuperset_other_is_different",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/set/test_issubset.py": {
        "TestIssubset.test_issubset_self_is_subset_of_other_set": {
            "name": "test_issubset_self_is_subset_of_other_set",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIssubset.test_issubset_self_is_not_subset_of_other_set": {
            "name": "test_issubset_self_is_not_subset_of_other_set",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIssubset.test_issubset_self_is_subset_of_other_enhanced_set": {
            "name": "test_issubset_self_is_subset_of_other_enhanced_set",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIssubset.test_issubset_self_is_not_subset_of_other_enhanced_set": {
            "name": "test_issubset_self_is_not_subset_of_other_enhanced_set",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIssubset.test_issubset_other_is_different": {
            "name": "test_issubset_other_is_different",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/set/test_issuperset.py": {
        "TestIssuperset.test_issuperset_other_is_set_and_subset_of_self": {
            "name": "test_issuperset_other_is_set_and_subset_of_self",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIssuperset.test_issuperset_other_is_set_and_not_subset_of_self": {
            "name": "test_issuperset_other_is_set_and_not_subset_of_self",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIssuperset.test_issuperset_other_is_enhanced_set_and_subset_of_self": {
            "name": "test_issuperset_other_is_enhanced_set_and_subset_of_self",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIssuperset.test_issuperset_other_is_enhanced_set_and_not_subset_of_self": {
            "name": "test_issuperset_other_is_enhanced_set_and_not_subset_of_self",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIssuperset.test_issuperset_other_is_different": {
            "name": "test_issuperset_other_is_different",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/set/test_iter.py": {
        "TestIter.test_iter": {
            "name": "test_iter",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/set/test_keep_if.py": {
        "TestKeepIf.test_keep_if_if_self_is_empty": {
            "name": "test_keep_if_if_self_is_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeepIf.test_keep_if_if_no_match": {
            "name": "test_keep_if_if_no_match",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeepIf.test_keep_if_if_all_match": {
            "name": "test_keep_if_if_all_match",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeepIf.test_keep_if_if_partial_match": {
            "name": "test_keep_if_if_partial_match",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestKeepIf.test_keep_if_lambda_is_different": {
            "name": "test_keep_if_lambda_is_different",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/set/test_le.py": {
        "TestLe.test_le_self_is_not_proper_subset_of_other_enhanced_set": {
            "name": "test_le_self_is_not_proper_subset_of_other_enhanced_set",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLe.test_le_self_is_not_subset_of_other_enhanced_set": {
            "name": "test_le_self_is_not_subset_of_other_enhanced_set",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/set/test_len.py": {
        "TestLen.test_len_if_not_empty": {
            "name": "test_len_if_not_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLen.test_len_if_empty": {
            "name": "test_len_if_empty",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/set/test_lshift.py": {
        "TestLshift.test_lshift_if_set_already_contains_element": {
            "name": "test_lshift_if_set_already_contains_element",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLshift.test_lshift_if_set_not_contains_element": {
            "name": "test_lshift_if_set_not_contains_element",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLshift.test_lshift_if_set_is_empty": {
            "name": "test_lshift_if_set_is_empty",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/set/test_lt.py": {
        "TestLt.test_lt_self_is_not_proper_subset_of_other_enhanced_set": {
            "name": "test_lt_self_is_not_proper_subset_of_other_enhanced_set",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLt.test_lt_self_is_not_subset_of_other_enhanced_set": {
            "name": "test_lt_self_is_not_subset_of_other_enhanced_set",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/set/test_map.py": {
        "TestMap.test_map_if_self_is_empty": {
            "name": "test_map_if_self_is_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMap.test_map_with_aritmethic": {
            "name": "test_map_with_aritmethic",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMap.test_map_with_bool": {
            "name": "test_map_with_bool",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMap.test_map_lambda_is_different": {
            "name": "test_map_lambda_is_different",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/set/test_or.py": {
        "TestOr.test_or_other_with_common_values": {
            "name": "test_or_other_with_common_values",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOr.test_or_other_without_common_values": {
            "name": "test_or_other_without_common_values",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOr.test_or_other_is_different": {
            "name": "test_or_other_is_different",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/set/test_reject.py": {
        "TestReject.test_reject_if_lambda_find_match": {
            "name": "test_reject_if_lambda_find_match",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReject.test_reject_if_lambda_finds_no_match": {
            "name": "test_reject_if_lambda_finds_no_match",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReject.test_reject_if_set_is_empty": {
            "name": "test_reject_if_set_is_empty",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/set/test_select.py": {
        "TestSelect.test_select_if_self_is_empty": {
            "name": "test_select_if_self_is_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelect.test_select_if_no_match": {
            "name": "test_select_if_no_match",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelect.test_select_if_all_match": {
            "name": "test_select_if_all_match",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelect.test_select_if_partial_match": {
            "name": "test_select_if_partial_match",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSelect.test_select_lambda_is_different": {
            "name": "test_select_lambda_is_different",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/set/test_str.py": {
        "TestStr.test_str_if_self_is_empty": {
            "name": "test_str_if_self_is_empty",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStr.test_str_if_self_contains_elements": {
            "name": "test_str_if_self_contains_elements",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/set/test_sub.py": {
        "TestSub.test_sub_if_other_subset_of_self_enhanced_set": {
            "name": "test_sub_if_other_subset_of_self_enhanced_set",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSub.test_sub_if_other_equivalent_to_self": {
            "name": "test_sub_if_other_equivalent_to_self",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSub.test_sub_if_set_is_empty": {
            "name": "test_sub_if_set_is_empty",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/set/test_subtract.py": {
        "TestSubtract.test_subtract_if_other_subset_of_self_enhanced_set": {
            "name": "test_subtract_if_other_subset_of_self_enhanced_set",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubtract.test_subtract_if_other_equivalent_to_self": {
            "name": "test_subtract_if_other_equivalent_to_self",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubtract.test_subtract_if_set_is_empty": {
            "name": "test_subtract_if_set_is_empty",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/set/test_union.py": {
        "TestUnion.test_union_other_with_common_values": {
            "name": "test_union_other_with_common_values",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnion.test_union_other_without_common_values": {
            "name": "test_union_other_without_common_values",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnion.test_union_other_is_different": {
            "name": "test_union_other_is_different",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slender-master/slender/tests/set/__init__.py": {}
}
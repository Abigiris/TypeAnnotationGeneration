{
    "slicedimage-master/setup.py": {},
    "slicedimage-master/slicedimage/urlpath.py": {},
    "slicedimage-master/slicedimage/_augmentedenum.py": {
        "AugmentedEnum.__hash__": {
            "name": "__hash__",
            "location": 5,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "AugmentedEnum.__eq__": {
            "name": "__eq__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AugmentedEnum.__str__": {
            "name": "__str__",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slicedimage-master/slicedimage/_collection.py": {
        "Collection.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "extras": []
            }
        },
        "Collection.validate": {
            "name": "validate",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.add_partition": {
            "name": "add_partition",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "partition": []
            }
        },
        "Collection.all_tilesets": {
            "name": "all_tilesets",
            "location": 15,
            "return": [
                "Generator[(Tuple[(Any, Any)], Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Collection.find_tileset": {
            "name": "find_tileset",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Collection.tiles": {
            "name": "tiles",
            "location": 32,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "filter_fn": []
            }
        }
    },
    "slicedimage-master/slicedimage/_compat.py": {
        "fspath": {
            "name": "fspath",
            "location": 5,
            "return": [
                "Any"
            ],
            "arguments": {
                "pathlib_path": []
            }
        }
    },
    "slicedimage-master/slicedimage/_dimensions.py": {},
    "slicedimage-master/slicedimage/_formats.py": {
        "tiff_reader": {
            "name": "tiff_reader",
            "location": 4,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {}
        },
        "png_reader": {
            "name": "png_reader",
            "location": 13,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {}
        },
        "numpy_reader": {
            "name": "numpy_reader",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "tiff_writer": {
            "name": "tiff_writer",
            "location": 29,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {}
        },
        "png_writer": {
            "name": "png_writer",
            "location": 47,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {}
        },
        "numpy_writer": {
            "name": "numpy_writer",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "tiff_reader.reader": {
            "name": "reader",
            "location": 7,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "png_reader.reader": {
            "name": "reader",
            "location": 16,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "tiff_writer.writer": {
            "name": "writer",
            "location": 36,
            "return": [],
            "arguments": {
                "f": [],
                "arr": []
            }
        },
        "png_writer.writer": {
            "name": "writer",
            "location": 54,
            "return": [],
            "arguments": {
                "f": [],
                "arr": []
            }
        },
        "ImageFormat.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reader_func": [],
                "writer_func": [],
                "file_ext": [],
                "alternate_extensions": []
            }
        },
        "ImageFormat.find_by_extension": {
            "name": "find_by_extension",
            "location": 98,
            "return": [
                "enum.Enum"
            ],
            "arguments": {
                "extension": []
            }
        },
        "ImageFormat.reader_func": {
            "name": "reader_func",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImageFormat.writer_func": {
            "name": "writer_func",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImageFormat.file_ext": {
            "name": "file_ext",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "slicedimage-master/slicedimage/_tile.py": {
        "Tile.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coordinates": [],
                "indices": [],
                "tile_shape": [],
                "sha256": [],
                "extras": []
            }
        },
        "Tile.format_tuple_shape_to_dict_shape": {
            "name": "format_tuple_shape_to_dict_shape",
            "location": 19,
            "return": [
                "Optional[dict]"
            ],
            "arguments": {
                "tuple_shape": []
            }
        },
        "Tile.format_dict_shape_to_tuple_shape": {
            "name": "format_dict_shape_to_tuple_shape",
            "location": 25,
            "return": [
                "Optional[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "dict_shape": []
            }
        },
        "Tile.tile_shape": {
            "name": "tile_shape",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tile.numpy_array": {
            "name": "numpy_array",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "numpy_array": []
            }
        },
        "Tile.set_numpy_array_future": {
            "name": "set_numpy_array_future",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "future": []
            }
        },
        "Tile.write": {
            "name": "write",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dst_fh": [],
                "tile_format": []
            }
        }
    },
    "slicedimage-master/slicedimage/_tileset.py": {
        "TileSet.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dimensions": [],
                "shape": [],
                "default_tile_shape": [],
                "default_tile_format": [],
                "extras": []
            }
        },
        "TileSet.__repr__": {
            "name": "__repr__",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TileSet.validate": {
            "name": "validate",
            "location": 66,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TileSet.add_tile": {
            "name": "add_tile",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tile": []
            }
        },
        "TileSet.tiles": {
            "name": "tiles",
            "location": 72,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "filter_fn": []
            }
        },
        "TileSet.get_dimension_shape": {
            "name": "get_dimension_shape",
            "location": 79,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "dimension_name": []
            }
        }
    },
    "slicedimage-master/slicedimage/_typeformatting.py": {
        "format_tile_coordinates": {
            "name": "format_tile_coordinates",
            "location": 4,
            "return": [
                "Dict[(Any, tuple)]"
            ],
            "arguments": {
                "tile_dimensions": []
            }
        },
        "format_enum_keyed_dicts": {
            "name": "format_enum_keyed_dicts",
            "location": 29,
            "return": [
                "dict"
            ],
            "arguments": {
                "enum_keyed_dict": []
            }
        },
        "format_tileset_dimensions": {
            "name": "format_tileset_dimensions",
            "location": 40,
            "return": [
                "frozenset"
            ],
            "arguments": {
                "tileset_dimensions": []
            }
        },
        "format_tileset_shape": {
            "name": "format_tileset_shape",
            "location": 50,
            "return": [
                "dict"
            ],
            "arguments": {
                "d": []
            }
        },
        "_str_or_enum_to_str": {
            "name": "_str_or_enum_to_str",
            "location": 61,
            "return": [
                "Any"
            ],
            "arguments": {
                "value": []
            }
        }
    },
    "slicedimage-master/slicedimage/__init__.py": {},
    "slicedimage-master/slicedimage/backends/_base.py": {
        "verify_checksum": {
            "name": "verify_checksum",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "fh": [],
                "expected_sha256_checksum": [],
                "block_size": []
            }
        },
        "Backend.read_contextmanager": {
            "name": "read_contextmanager",
            "location": 7,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "checksum_sha256": []
            }
        },
        "Backend.write_file_handle": {
            "name": "write_file_handle",
            "location": 27,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Backend.write_file_from_handle": {
            "name": "write_file_from_handle",
            "location": 30,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "source_handle": [],
                "block_size": []
            }
        }
    },
    "slicedimage-master/slicedimage/backends/_caching.py": {
        "CachingBackend.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cacheroot": [],
                "authoritative_backend": [],
                "size_limit": []
            }
        },
        "CachingBackend.read_contextmanager": {
            "name": "read_contextmanager",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "checksum_sha256": []
            }
        },
        "CachingBackend.write_file_handle": {
            "name": "write_file_handle",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "_CachingBackendContextManager.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authoritative_backend": [],
                "cache": [],
                "name": [],
                "checksum_sha256": []
            }
        },
        "_CachingBackendContextManager.__enter__": {
            "name": "__enter__",
            "location": 44,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "_CachingBackendContextManager.__exit__": {
            "name": "__exit__",
            "location": 70,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": []
            }
        }
    },
    "slicedimage-master/slicedimage/backends/_disk.py": {
        "DiskBackend.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "basedir": []
            }
        },
        "DiskBackend.read_contextmanager": {
            "name": "read_contextmanager",
            "location": 10,
            "return": [
                "_FileLikeContextManager"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "checksum_sha256": []
            }
        },
        "DiskBackend.write_file_handle": {
            "name": "write_file_handle",
            "location": 13,
            "return": [
                "BinaryIO"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "_FileLikeContextManager.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "checksum_sha256": []
            }
        },
        "_FileLikeContextManager.__enter__": {
            "name": "__enter__",
            "location": 23,
            "return": [
                "BinaryIO"
            ],
            "arguments": {
                "self": []
            }
        },
        "_FileLikeContextManager.__exit__": {
            "name": "__exit__",
            "location": 28,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": []
            }
        }
    },
    "slicedimage-master/slicedimage/backends/_http.py": {
        "HttpBackend.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "baseurl": []
            }
        },
        "HttpBackend.read_contextmanager": {
            "name": "read_contextmanager",
            "location": 18,
            "return": [
                "_UrlContextManager"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "checksum_sha256": []
            }
        },
        "_UrlContextManager.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "checksum_sha256": []
            }
        },
        "_UrlContextManager.__enter__": {
            "name": "__enter__",
            "location": 29,
            "return": [
                "io.BytesIO"
            ],
            "arguments": {
                "self": []
            }
        },
        "_UrlContextManager.__exit__": {
            "name": "__exit__",
            "location": 43,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": []
            }
        }
    },
    "slicedimage-master/slicedimage/backends/_s3.py": {
        "S3Backend.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "baseurl": [],
                "s3_config": []
            }
        },
        "S3Backend.read_contextmanager": {
            "name": "read_contextmanager",
            "location": 28,
            "return": [
                "_S3ContextManager"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "checksum_sha256": []
            }
        },
        "_S3ContextManager.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s3_bucket": [],
                "s3_key": [],
                "checksum_sha256": [],
                "s3_config": []
            }
        },
        "_S3ContextManager.__enter__": {
            "name": "__enter__",
            "location": 40,
            "return": [
                "io.BytesIO"
            ],
            "arguments": {
                "self": []
            }
        },
        "_S3ContextManager.__exit__": {
            "name": "__exit__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": []
            }
        }
    },
    "slicedimage-master/slicedimage/backends/__init__.py": {},
    "slicedimage-master/slicedimage/cli/checksum.py": {
        "fake_file_opener": {
            "name": "fake_file_opener",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "partition_path": [],
                "tile": [],
                "ext": []
            }
        },
        "identity_writer": {
            "name": "identity_writer",
            "location": 55,
            "return": [
                "Any"
            ],
            "arguments": {
                "tile": [],
                "fh": []
            }
        },
        "ChecksumCommand.register_parser": {
            "name": "register_parser",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "subparser_root": []
            }
        },
        "ChecksumCommand.run_command": {
            "name": "run_command",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "args": []
            }
        },
        "fake_file_opener.null_file_handle.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "fake_file_opener.null_file_handle.write": {
            "name": "write",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "fake_file_opener.null_file_handle.__enter__": {
            "name": "__enter__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "fake_file_opener.null_file_handle.__exit__": {
            "name": "__exit__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        }
    },
    "slicedimage-master/slicedimage/cli/main.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "slicedimage-master/slicedimage/cli/_base.py": {
        "CliCommand.register_parser": {
            "name": "register_parser",
            "location": 6,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "subparser_root": []
            }
        },
        "CliCommand.run_command": {
            "name": "run_command",
            "location": 16,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "args": []
            }
        }
    },
    "slicedimage-master/slicedimage/cli/__init__.py": {},
    "slicedimage-master/slicedimage/cli/__main__.py": {},
    "slicedimage-master/slicedimage/io/_base.py": {
        "_parse_collection": {
            "name": "_parse_collection",
            "location": 321,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "parse_method": [],
                "baseurl": [],
                "backend_config": []
            }
        },
        "Reader.parse_doc": {
            "name": "parse_doc",
            "location": 37,
            "return": [
                "Union[(slicedimage._collection.Collection, slicedimage._tileset.TileSet)]"
            ],
            "arguments": {
                "name_or_url": [],
                "baseurl": [],
                "backend_config": []
            }
        },
        "Reader.can_parse": {
            "name": "can_parse",
            "location": 65,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "cls": [],
                "doc_version": []
            }
        },
        "Reader.parse": {
            "name": "parse",
            "location": 69,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "json_doc": [],
                "baseurl": [],
                "backend_config": []
            }
        },
        "Writer.write_to_path": {
            "name": "write_to_path",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "partition": [],
                "path": [],
                "pretty": [],
                "version_class": []
            }
        },
        "Writer.write_to_url": {
            "name": "write_to_url",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "partition": [],
                "url": [],
                "pretty": [],
                "version_class": []
            }
        },
        "Writer.generate_partition_document": {
            "name": "generate_partition_document",
            "location": 156,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "partition": [],
                "url": [],
                "pretty": []
            }
        },
        "WriterContract.partition_url_generator": {
            "name": "partition_url_generator",
            "location": 166,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "parent_partition_url": [],
                "partition_name": []
            }
        },
        "WriterContract.tile_url_generator": {
            "name": "tile_url_generator",
            "location": 189,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "tileset_url": [],
                "tile": [],
                "ext": []
            }
        },
        "WriterContract.write_tile": {
            "name": "write_tile",
            "location": 218,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "tile_url": [],
                "tile": [],
                "tile_format": [],
                "backend_config": []
            }
        },
        "CompatibilityWriterContract.__init__": {
            "name": "__init__",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "partition_path_generator": [],
                "tile_opener": []
            }
        },
        "CompatibilityWriterContract.partition_url_generator": {
            "name": "partition_url_generator",
            "location": 268,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "parent_partition_url": [],
                "partition_name": []
            }
        },
        "CompatibilityWriterContract.tile_url_generator": {
            "name": "tile_url_generator",
            "location": 292,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "tileset_url": [],
                "tile": [],
                "ext": []
            }
        },
        "_parse_collection.parse": {
            "name": "parse",
            "location": 326,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "name_relative_path_or_url_tuple": []
            }
        }
    },
    "slicedimage-master/slicedimage/io/_keys.py": {},
    "slicedimage-master/slicedimage/io/_v0_0_0.py": {
        "SourceFileFuture.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_fh_contextmanager": [],
                "tile_format": []
            }
        },
        "SourceFileFuture.__call__": {
            "name": "__call__",
            "location": 171,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "v0_0_0.Reader.can_parse": {
            "name": "can_parse",
            "location": 28,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [
                    "Type[v0_0_0.Reader]"
                ],
                "doc_version": []
            }
        },
        "v0_0_0.Reader.parse": {
            "name": "parse",
            "location": 35,
            "return": [
                "Union[(slicedimage._collection.Collection, slicedimage._tileset.TileSet)]"
            ],
            "arguments": {
                "self": [],
                "json_doc": [],
                "baseurl": [],
                "backend_config": []
            }
        },
        "v0_0_0.Writer.generate_partition_document": {
            "name": "generate_partition_document",
            "location": 100,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "partition": [],
                "url": [],
                "pretty": [],
                "writer_contract": [],
                "tile_format": []
            }
        }
    },
    "slicedimage-master/slicedimage/io/_v0_1_0.py": {
        "SourceFileFuture.__init__": {
            "name": "__init__",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source_fh_contextmanager": [],
                "tile_format": []
            }
        },
        "SourceFileFuture.__call__": {
            "name": "__call__",
            "location": 167,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "v0_1_0.Reader.can_parse": {
            "name": "can_parse",
            "location": 29,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [
                    "Type[v0_1_0.Reader]"
                ],
                "doc_version": []
            }
        },
        "v0_1_0.Reader.parse": {
            "name": "parse",
            "location": 36,
            "return": [
                "Union[(slicedimage._collection.Collection, slicedimage._tileset.TileSet)]"
            ],
            "arguments": {
                "self": [],
                "json_doc": [],
                "baseurl": [],
                "backend_config": []
            }
        },
        "v0_1_0.Writer.generate_partition_document": {
            "name": "generate_partition_document",
            "location": 99,
            "return": [
                "Optional[Dict[(str, Any)]]"
            ],
            "arguments": {
                "self": [],
                "partition": [],
                "url": [],
                "pretty": [],
                "writer_contract": [],
                "tile_format": []
            }
        }
    },
    "slicedimage-master/slicedimage/io/__init__.py": {},
    "slicedimage-master/slicedimage/url/path.py": {
        "join": {
            "name": "join",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {
                "url": []
            }
        },
        "_parse_absolute_url": {
            "name": "_parse_absolute_url",
            "location": 19,
            "return": [
                "Tuple[(str, Any)]"
            ],
            "arguments": {
                "absolute_url": []
            }
        },
        "get_absolute_url": {
            "name": "get_absolute_url",
            "location": 42,
            "return": [
                "Tuple[(str, Any)]"
            ],
            "arguments": {
                "name_or_url": [],
                "baseurl": []
            }
        },
        "calculate_relative_url": {
            "name": "calculate_relative_url",
            "location": 61,
            "return": [
                "Any"
            ],
            "arguments": {
                "baseurl": [],
                "name_or_url": []
            }
        },
        "get_path_from_parsed_file_url": {
            "name": "get_path_from_parsed_file_url",
            "location": 110,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {
                "parsed_file_url": []
            }
        }
    },
    "slicedimage-master/slicedimage/url/resolve.py": {
        "infer_backend": {
            "name": "infer_backend",
            "location": 11,
            "return": [
                "Union[(slicedimage.backends._caching.CachingBackend, slicedimage.backends._disk.DiskBackend, slicedimage.backends._http.HttpBackend, slicedimage.backends._s3.S3Backend)]"
            ],
            "arguments": {
                "baseurl": [],
                "backend_config": []
            }
        },
        "resolve_path_or_url": {
            "name": "resolve_path_or_url",
            "location": 59,
            "return": [
                "Tuple[(Any, str, Any)]"
            ],
            "arguments": {
                "path_or_url": [],
                "backend_config": []
            }
        },
        "resolve_url": {
            "name": "resolve_url",
            "location": 79,
            "return": [
                "Tuple[(Union[(slicedimage.backends._caching.CachingBackend, slicedimage.backends._disk.DiskBackend, slicedimage.backends._http.HttpBackend, slicedimage.backends._s3.S3Backend)], str, Any)]"
            ],
            "arguments": {
                "name_or_url": [],
                "baseurl": [],
                "backend_config": []
            }
        }
    },
    "slicedimage-master/slicedimage/url/__init__.py": {},
    "slicedimage-master/slicedimage/url/test/test_calculate_relative_url.py": {
        "_test": {
            "name": "_test",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "baseurl": [],
                "name_or_url": [],
                "expected_output": []
            }
        },
        "test_samelevel": {
            "name": "test_samelevel",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_nested": {
            "name": "test_nested",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_different_scheme": {
            "name": "test_different_scheme",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "slicedimage-master/slicedimage/url/test/__init__.py": {},
    "slicedimage-master/tests/test_nd_tiff.py": {
        "test_2d_tiff": {
            "name": "test_2d_tiff",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_3d_tiff": {
            "name": "test_3d_tiff",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "test_4d_tiff": {
            "name": "test_4d_tiff",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        }
    },
    "slicedimage-master/tests/test_tile_coordinates.py": {
        "TestTileCoordinates.test_tuple_to_tuple": {
            "name": "test_tuple_to_tuple",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTileCoordinates.test_list_to_tuple": {
            "name": "test_list_to_tuple",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTileCoordinates.test_scalar_to_tuple": {
            "name": "test_scalar_to_tuple",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTileCoordinates.test_single_scalar_in_tuple": {
            "name": "test_single_scalar_in_tuple",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTileCoordinates.test_long_tuple": {
            "name": "test_long_tuple",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slicedimage-master/tests/__init__.py": {},
    "slicedimage-master/tests/io_/test_resolve_url.py": {
        "TestResolvePathOrUrl.test_valid_local_path": {
            "name": "test_valid_local_path",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolvePathOrUrl.test_local_path_with_spaces": {
            "name": "test_local_path_with_spaces",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolvePathOrUrl.test_invalid_local_path": {
            "name": "test_invalid_local_path",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolvePathOrUrl.test_url": {
            "name": "test_url",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolveUrl.test_fully_qualified_url": {
            "name": "test_fully_qualified_url",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestResolveUrl.test_relative_url": {
            "name": "test_relative_url",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slicedimage-master/tests/io_/test_versions.py": {
        "test_version_increasing_order": {
            "name": "test_version_increasing_order",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "slicedimage-master/tests/io_/__init__.py": {},
    "slicedimage-master/tests/io_/v0_0_0/test_caching_backend.py": {
        "TestCachingBackend.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout_seconds": []
            }
        },
        "TestCachingBackend.tearDown": {
            "name": "tearDown",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCachingBackend.test_checksum_good": {
            "name": "test_checksum_good",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCachingBackend.test_checksum_bad": {
            "name": "test_checksum_bad",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCachingBackend.test_cache_pollution": {
            "name": "test_cache_pollution",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCachingBackend.test_reentrant": {
            "name": "test_reentrant",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCachingBackend._test_checksum_setup": {
            "name": "_test_checksum_setup",
            "location": 126,
            "return": [],
            "arguments": {
                "tempdir": []
            }
        }
    },
    "slicedimage-master/tests/io_/v0_0_0/test_disk_backend.py": {
        "test_checksum_good": {
            "name": "test_checksum_good",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_checksum_bad": {
            "name": "test_checksum_bad",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_reentrant": {
            "name": "test_reentrant",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "_test_checksum_setup": {
            "name": "_test_checksum_setup",
            "location": 56,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "slicedimage-master/tests/io_/v0_0_0/test_http_backend.py": {
        "TestHttpBackend.setUp": {
            "name": "setUp",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout_seconds": []
            }
        },
        "TestHttpBackend.tearDown": {
            "name": "tearDown",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHttpBackend.test_checksum_good": {
            "name": "test_checksum_good",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHttpBackend.test_checksum_bad": {
            "name": "test_checksum_bad",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHttpBackend.test_reentrant": {
            "name": "test_reentrant",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHttpBackend._test_checksum_setup": {
            "name": "_test_checksum_setup",
            "location": 87,
            "return": [],
            "arguments": {
                "tempdir": []
            }
        },
        "TestHttpBackend.test_error": {
            "name": "test_error",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slicedimage-master/tests/io_/v0_0_0/test_missing_shape.py": {
        "TestMissingShape.test_tileset_without_shapes": {
            "name": "test_tileset_without_shapes",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slicedimage-master/tests/io_/v0_0_0/test_reader.py": {
        "TestReader.test_read_tileset": {
            "name": "test_read_tileset",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReader.test_read_collection": {
            "name": "test_read_collection",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReader.test_read_multilevel_collection": {
            "name": "test_read_multilevel_collection",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReader._verify_tiles": {
            "name": "_verify_tiles",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tile_generator": []
            }
        }
    },
    "slicedimage-master/tests/io_/v0_0_0/test_write.py": {
        "TestWrite.test_write_tileset": {
            "name": "test_write_tileset",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWrite.test_write_collection": {
            "name": "test_write_collection",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWrite.test_checksum_on_write": {
            "name": "test_checksum_on_write",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWrite.test_write_tiff": {
            "name": "test_write_tiff",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWrite.test_write_png": {
            "name": "test_write_png",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slicedimage-master/tests/io_/v0_0_0/__init__.py": {},
    "slicedimage-master/tests/io_/v0_1_0/test_caching_backend.py": {
        "TestCachingBackend.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout_seconds": []
            }
        },
        "TestCachingBackend.tearDown": {
            "name": "tearDown",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCachingBackend.test_checksum_good": {
            "name": "test_checksum_good",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCachingBackend.test_checksum_bad": {
            "name": "test_checksum_bad",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCachingBackend.test_cache_pollution": {
            "name": "test_cache_pollution",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCachingBackend.test_reentrant": {
            "name": "test_reentrant",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCachingBackend._test_checksum_setup": {
            "name": "_test_checksum_setup",
            "location": 127,
            "return": [],
            "arguments": {
                "tempdir": []
            }
        }
    },
    "slicedimage-master/tests/io_/v0_1_0/test_disk_backend.py": {
        "test_checksum_good": {
            "name": "test_checksum_good",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_checksum_bad": {
            "name": "test_checksum_bad",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "test_reentrant": {
            "name": "test_reentrant",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "tmpdir": []
            }
        },
        "_test_checksum_setup": {
            "name": "_test_checksum_setup",
            "location": 56,
            "return": [],
            "arguments": {
                "tmpdir": []
            }
        }
    },
    "slicedimage-master/tests/io_/v0_1_0/test_http_backend.py": {
        "http_server": {
            "name": "http_server",
            "location": 21,
            "return": [],
            "arguments": {
                "timeout_seconds": []
            }
        },
        "test_checksum_good": {
            "name": "test_checksum_good",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "http_server": []
            }
        },
        "test_checksum_bad": {
            "name": "test_checksum_bad",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "http_server": []
            }
        },
        "test_reentrant": {
            "name": "test_reentrant",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "http_server": []
            }
        },
        "_test_checksum_setup": {
            "name": "_test_checksum_setup",
            "location": 92,
            "return": [],
            "arguments": {
                "tempdir": []
            }
        },
        "test_error": {
            "name": "test_error",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "http_server": []
            }
        },
        "test_retry": {
            "name": "test_retry",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "monkeypatch": [],
                "http_server": []
            }
        },
        "test_retry.sleep_and_make_file": {
            "name": "sleep_and_make_file",
            "location": 132,
            "return": [],
            "arguments": {}
        }
    },
    "slicedimage-master/tests/io_/v0_1_0/test_missing_shape.py": {
        "TestMissingShape.test_tileset_without_shapes": {
            "name": "test_tileset_without_shapes",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "slicedimage-master/tests/io_/v0_1_0/test_reader.py": {
        "TestReader.test_read_tileset": {
            "name": "test_read_tileset",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReader.test_read_collection": {
            "name": "test_read_collection",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReader.test_read_multilevel_collection": {
            "name": "test_read_multilevel_collection",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestReader._verify_tiles": {
            "name": "_verify_tiles",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tile_generator": []
            }
        }
    },
    "slicedimage-master/tests/io_/v0_1_0/test_s3_backend.py": {
        "test_checksum_good_or_not_present": {
            "name": "test_checksum_good_or_not_present",
            "location": 11,
            "return": [],
            "arguments": {
                "expected_checksum": []
            }
        },
        "test_checksum_bad": {
            "name": "test_checksum_bad",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "slicedimage-master/tests/io_/v0_1_0/test_write.py": {
        "TestWrite.test_write_tileset": {
            "name": "test_write_tileset",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWrite.test_write_collection": {
            "name": "test_write_collection",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWrite.test_checksum_on_write": {
            "name": "test_checksum_on_write",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWrite.test_write_tiff": {
            "name": "test_write_tiff",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWrite.test_write_png": {
            "name": "test_write_png",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWrite.test_multi_directory_write_collection": {
            "name": "test_multi_directory_write_collection",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWrite.test_multi_directory_write_collection.partition_path_generator": {
            "name": "partition_path_generator",
            "location": 345,
            "return": [],
            "arguments": {
                "parent_toc_path": [],
                "toc_name": []
            }
        },
        "TestWrite.test_multi_directory_write_collection.tile_opener": {
            "name": "tile_opener",
            "location": 350,
            "return": [],
            "arguments": {
                "tileset_path": [],
                "tile": [],
                "ext": []
            }
        }
    },
    "slicedimage-master/tests/io_/v0_1_0/__init__.py": {},
    "slicedimage-master/tests/utils/contextchild.py": {
        "ContextualChildProcess.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextualChildProcess.__enter__": {
            "name": "__enter__",
            "location": 11,
            "return": [
                "_TContextualChildProcess@@ContextualChildProcess@@"
            ],
            "arguments": {
                "self": [
                    "_TContextualChildProcess@@ContextualChildProcess@@"
                ]
            }
        },
        "ContextualChildProcess.__exit__": {
            "name": "__exit__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": []
            }
        }
    },
    "slicedimage-master/tests/utils/contextualcachingbackend.py": {
        "ContextualCachingBackend.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cachedir": [],
                "authoritative_backend": []
            }
        },
        "ContextualCachingBackend.__enter__": {
            "name": "__enter__",
            "location": 19,
            "return": [
                "slicedimage.backends._caching.CachingBackend"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextualCachingBackend.__exit__": {
            "name": "__exit__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]"
                ],
                "exc_val": [
                    "Optional[BaseException]"
                ],
                "exc_tb": []
            }
        }
    },
    "slicedimage-master/tests/utils/__init__.py": {
        "unused_tcp_port": {
            "name": "unused_tcp_port",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "build_skeleton_manifest": {
            "name": "build_skeleton_manifest",
            "location": 17,
            "return": [
                "Dict[(str, Union[(str, Dict[(str, int)], List[str])])]"
            ],
            "arguments": {}
        }
    }
}
{
    "sockeye-main/setup.py": {
        "get_long_description": {
            "name": "get_long_description",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "get_version": {
            "name": "get_version",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "get_git_hash": {
            "name": "get_git_hash",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "temporarily_write_git_hash": {
            "name": "temporarily_write_git_hash",
            "location": 35,
            "return": [],
            "arguments": {
                "git_hash": [],
                "filename": []
            }
        },
        "get_requirements": {
            "name": "get_requirements",
            "location": 53,
            "return": [],
            "arguments": {
                "filename": []
            }
        }
    },
    "sockeye-main/docs/tutorials/multilingual/add_tag_to_lines.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 18,
            "return": [],
            "arguments": {}
        }
    },
    "sockeye-main/docs/tutorials/multilingual/remove_tag_from_translations.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "is_tag": {
            "name": "is_tag",
            "location": 20,
            "return": [],
            "arguments": {
                "token": []
            }
        },
        "main": {
            "name": "main",
            "location": 26,
            "return": [],
            "arguments": {}
        }
    },
    "sockeye-main/docs/tutorials/seqcopy/genseqcopy.py": {
        "to_str": {
            "name": "to_str",
            "location": 15,
            "return": [],
            "arguments": {
                "l": []
            }
        },
        "write_data": {
            "name": "write_data",
            "location": 33,
            "return": [],
            "arguments": {
                "samples": [],
                "prefix": []
            }
        }
    },
    "sockeye-main/sockeye/arguments.py": {
        "save_args": {
            "name": "save_args",
            "location": 96,
            "return": [],
            "arguments": {
                "args": [],
                "fname": []
            }
        },
        "load_args": {
            "name": "load_args",
            "location": 101,
            "return": [],
            "arguments": {
                "fname": []
            }
        },
        "regular_file": {
            "name": "regular_file",
            "location": 106,
            "return": [],
            "arguments": {}
        },
        "regular_folder": {
            "name": "regular_folder",
            "location": 123,
            "return": [],
            "arguments": {}
        },
        "int_greater_or_equal": {
            "name": "int_greater_or_equal",
            "location": 139,
            "return": [],
            "arguments": {
                "threshold": []
            }
        },
        "float_greater_or_equal": {
            "name": "float_greater_or_equal",
            "location": 156,
            "return": [],
            "arguments": {
                "threshold": []
            }
        },
        "bool_str": {
            "name": "bool_str",
            "location": 173,
            "return": [],
            "arguments": {}
        },
        "simple_dict": {
            "name": "simple_dict",
            "location": 193,
            "return": [],
            "arguments": {}
        },
        "multiple_values": {
            "name": "multiple_values",
            "location": 226,
            "return": [],
            "arguments": {
                "num_values": [],
                "greater_or_equal": [],
                "data_type": []
            }
        },
        "file_or_stdin": {
            "name": "file_or_stdin",
            "location": 256,
            "return": [],
            "arguments": {}
        },
        "add_average_args": {
            "name": "add_average_args",
            "location": 270,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_rerank_args": {
            "name": "add_rerank_args",
            "location": 298,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_lexicon_args": {
            "name": "add_lexicon_args",
            "location": 341,
            "return": [],
            "arguments": {
                "params": [],
                "is_for_block_lexicon": []
            }
        },
        "add_lexicon_create_args": {
            "name": "add_lexicon_create_args",
            "location": 350,
            "return": [],
            "arguments": {
                "params": [],
                "is_for_block_lexicon": []
            }
        },
        "add_lexicon_inspect_args": {
            "name": "add_lexicon_inspect_args",
            "location": 361,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_logging_args": {
            "name": "add_logging_args",
            "location": 366,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_training_data_args": {
            "name": "add_training_data_args",
            "location": 391,
            "return": [],
            "arguments": {
                "params": [],
                "required": []
            }
        },
        "add_validation_data_params": {
            "name": "add_validation_data_params",
            "location": 428,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_prepared_data_args": {
            "name": "add_prepared_data_args",
            "location": 453,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_training_output_args": {
            "name": "add_training_output_args",
            "location": 459,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_training_io_args": {
            "name": "add_training_io_args",
            "location": 468,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_bucketing_args": {
            "name": "add_bucketing_args",
            "location": 481,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_process_pool_args": {
            "name": "add_process_pool_args",
            "location": 503,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_prepare_data_cli_args": {
            "name": "add_prepare_data_cli_args",
            "location": 510,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_device_args": {
            "name": "add_device_args",
            "location": 539,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_vocab_args": {
            "name": "add_vocab_args",
            "location": 555,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_model_parameters": {
            "name": "add_model_parameters",
            "location": 598,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_batch_args": {
            "name": "add_batch_args",
            "location": 779,
            "return": [],
            "arguments": {
                "params": [],
                "default_batch_size": [],
                "default_batch_type": []
            }
        },
        "add_nvs_train_parameters": {
            "name": "add_nvs_train_parameters",
            "location": 808,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_training_args": {
            "name": "add_training_args",
            "location": 827,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_train_cli_args": {
            "name": "add_train_cli_args",
            "location": 1086,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_translate_cli_args": {
            "name": "add_translate_cli_args",
            "location": 1094,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_score_cli_args": {
            "name": "add_score_cli_args",
            "location": 1100,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_inference_args": {
            "name": "add_inference_args",
            "location": 1145,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_length_penalty_args": {
            "name": "add_length_penalty_args",
            "location": 1313,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_brevity_penalty_args": {
            "name": "add_brevity_penalty_args",
            "location": 1327,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_evaluate_args": {
            "name": "add_evaluate_args",
            "location": 1347,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "add_build_vocab_args": {
            "name": "add_build_vocab_args",
            "location": 1376,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "ConfigArgumentParser.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigArgumentParser._register_argument": {
            "name": "_register_argument",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "_action": []
            }
        },
        "ConfigArgumentParser._overwrite_add_argument": {
            "name": "_overwrite_add_argument",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "original_object": []
            }
        },
        "ConfigArgumentParser.add_argument_group": {
            "name": "add_argument_group",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConfigArgumentParser.parse_args": {
            "name": "parse_args",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "namespace": []
            }
        },
        "StoreDeprecatedAction.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "option_strings": [],
                "dest": [],
                "deprecated_dest": [],
                "nargs": []
            }
        },
        "StoreDeprecatedAction.__call__": {
            "name": "__call__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "parser": [],
                "namespace": [],
                "value": [],
                "option_string": []
            }
        },
        "regular_file.check_regular_file": {
            "name": "check_regular_file",
            "location": 114,
            "return": [],
            "arguments": {
                "value_to_check": []
            }
        },
        "regular_folder.check_regular_directory": {
            "name": "check_regular_directory",
            "location": 130,
            "return": [],
            "arguments": {
                "value_to_check": []
            }
        },
        "int_greater_or_equal.check_greater_equal": {
            "name": "check_greater_equal",
            "location": 147,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "float_greater_or_equal.check_greater_equal": {
            "name": "check_greater_equal",
            "location": 164,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "bool_str.parse": {
            "name": "parse",
            "location": 180,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "simple_dict.parse": {
            "name": "parse",
            "location": 202,
            "return": [],
            "arguments": {
                "dict_str": []
            }
        },
        "multiple_values.parse": {
            "name": "parse",
            "location": 239,
            "return": [],
            "arguments": {
                "value_to_check": []
            }
        },
        "file_or_stdin.parse": {
            "name": "parse",
            "location": 261,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "ConfigArgumentParser._overwrite_add_argument._new_add_argument": {
            "name": "_new_add_argument",
            "location": 56,
            "return": [],
            "arguments": {
                "this_self": []
            }
        },
        "simple_dict.parse._parse": {
            "name": "_parse",
            "location": 204,
            "return": [],
            "arguments": {
                "value": []
            }
        }
    },
    "sockeye-main/sockeye/average.py": {
        "average": {
            "name": "average",
            "location": 37,
            "return": [],
            "arguments": {
                "param_paths": []
            }
        },
        "find_checkpoints": {
            "name": "find_checkpoints",
            "location": 62,
            "return": [],
            "arguments": {
                "model_path": [],
                "size": [],
                "strategy": [],
                "metric": []
            }
        },
        "strategy_best": {
            "name": "strategy_best",
            "location": 105,
            "return": [],
            "arguments": {
                "points": [],
                "size": [],
                "maximize": []
            }
        },
        "strategy_last": {
            "name": "strategy_last",
            "location": 110,
            "return": [],
            "arguments": {
                "points": [],
                "size": [],
                "maximize": []
            }
        },
        "strategy_lifespan": {
            "name": "strategy_lifespan",
            "location": 117,
            "return": [],
            "arguments": {
                "points": [],
                "size": [],
                "maximize": []
            }
        },
        "main": {
            "name": "main",
            "location": 139,
            "return": [],
            "arguments": {}
        },
        "average_parameters": {
            "name": "average_parameters",
            "location": 150,
            "return": [],
            "arguments": {
                "args": []
            }
        }
    },
    "sockeye-main/sockeye/beam_search.py": {
        "_get_vocab_slice_ids": {
            "name": "_get_vocab_slice_ids",
            "location": 532,
            "return": [],
            "arguments": {
                "restrict_lexicon": [],
                "source_words": [],
                "eos_id": [],
                "beam_size": [],
                "target_prefix": [],
                "output_vocab_size": []
            }
        },
        "_get_nvs_vocab_slice_ids": {
            "name": "_get_nvs_vocab_slice_ids",
            "location": 572,
            "return": [],
            "arguments": {
                "nvs_thresh": [],
                "nvs_prediction": [],
                "restrict_lexicon": [],
                "target_prefix": []
            }
        },
        "get_search_algorithm": {
            "name": "get_search_algorithm",
            "location": 1062,
            "return": [],
            "arguments": {
                "models": [],
                "beam_size": [],
                "device": [],
                "output_scores": [],
                "scorer": [],
                "ensemble_mode": [],
                "beam_search_stop": [],
                "constant_length_ratio": [],
                "sample": [],
                "prevent_unk": [],
                "greedy": [],
                "skip_nvs": [],
                "nvs_thresh": []
            }
        },
        "_Inference.state_structure": {
            "name": "state_structure",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Inference.encode_and_initialize": {
            "name": "encode_and_initialize",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "valid_length": []
            }
        },
        "_Inference.decode_step": {
            "name": "decode_step",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "step_input": [],
                "states": [],
                "vocab_slice_ids": [],
                "target_prefix_factor_mask": [],
                "factor_vocab_size": []
            }
        },
        "_Inference.model_output_vocab_size": {
            "name": "model_output_vocab_size",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_Inference.model_output_factor_vocab_size": {
            "name": "model_output_factor_vocab_size",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_SingleModelInference.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "skip_softmax": [],
                "constant_length_ratio": []
            }
        },
        "_SingleModelInference.state_structure": {
            "name": "state_structure",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_SingleModelInference.encode_and_initialize": {
            "name": "encode_and_initialize",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "valid_length": []
            }
        },
        "_SingleModelInference.decode_step": {
            "name": "decode_step",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "step_input": [],
                "states": [],
                "vocab_slice_ids": [],
                "target_prefix_factor_mask": [],
                "factor_vocab_size": []
            }
        },
        "_SingleModelInference.model_output_vocab_size": {
            "name": "model_output_vocab_size",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_SingleModelInference.model_output_factor_vocab_size": {
            "name": "model_output_factor_vocab_size",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_EnsembleInference.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "models": [],
                "ensemble_mode": [],
                "constant_length_ratio": []
            }
        },
        "_EnsembleInference.state_structure": {
            "name": "state_structure",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_EnsembleInference.encode_and_initialize": {
            "name": "encode_and_initialize",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "valid_length": []
            }
        },
        "_EnsembleInference.decode_step": {
            "name": "decode_step",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "step_input": [],
                "states": [],
                "vocab_slice_ids": [],
                "target_prefix_factor_mask": [],
                "factor_vocab_size": []
            }
        },
        "_EnsembleInference.linear_interpolation": {
            "name": "linear_interpolation",
            "location": 188,
            "return": [],
            "arguments": {
                "predictions": []
            }
        },
        "_EnsembleInference.log_linear_interpolation": {
            "name": "log_linear_interpolation",
            "location": 192,
            "return": [],
            "arguments": {
                "predictions": []
            }
        },
        "_EnsembleInference.model_output_vocab_size": {
            "name": "model_output_vocab_size",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_EnsembleInference.model_output_factor_vocab_size": {
            "name": "model_output_factor_vocab_size",
            "location": 201,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UpdateScores.__init__": {
            "name": "__init__",
            "location": 225,
            "return": [],
            "arguments": {
                "self": [],
                "prevent_unk": []
            }
        },
        "UpdateScores.forward": {
            "name": "forward",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "target_dists": [],
                "finished": [],
                "scores_accumulated": [],
                "lengths": [],
                "max_lengths": [],
                "pad_dist": [],
                "eos_dist": []
            }
        },
        "LengthPenalty.__init__": {
            "name": "__init__",
            "location": 268,
            "return": [],
            "arguments": {
                "self": [],
                "alpha": [],
                "beta": []
            }
        },
        "LengthPenalty.forward": {
            "name": "forward",
            "location": 274,
            "return": [],
            "arguments": {
                "self": [],
                "lengths": []
            }
        },
        "BrevityPenalty.__init__": {
            "name": "__init__",
            "location": 294,
            "return": [],
            "arguments": {
                "self": [],
                "weight": []
            }
        },
        "BrevityPenalty.forward": {
            "name": "forward",
            "location": 298,
            "return": [],
            "arguments": {
                "self": [],
                "hyp_lengths": [],
                "reference_lengths": []
            }
        },
        "CandidateScorer.__init__": {
            "name": "__init__",
            "location": 316,
            "return": [],
            "arguments": {
                "self": [],
                "length_penalty_alpha": [],
                "length_penalty_beta": [],
                "brevity_penalty_weight": []
            }
        },
        "CandidateScorer.forward": {
            "name": "forward",
            "location": 326,
            "return": [],
            "arguments": {
                "self": [],
                "scores": [],
                "lengths": [],
                "reference_lengths": []
            }
        },
        "CandidateScorer.unnormalize": {
            "name": "unnormalize",
            "location": 341,
            "return": [],
            "arguments": {
                "self": [],
                "scores": [],
                "lengths": [],
                "reference_lengths": []
            }
        },
        "SortNormalizeAndUpdateFinished.__init__": {
            "name": "__init__",
            "location": 354,
            "return": [],
            "arguments": {
                "self": [],
                "pad_id": [],
                "eos_id": [],
                "scorer": [],
                "expect_factors": []
            }
        },
        "SortNormalizeAndUpdateFinished.forward": {
            "name": "forward",
            "location": 365,
            "return": [],
            "arguments": {
                "self": [],
                "best_hyp_indices": [],
                "best_word_indices": [],
                "finished": [],
                "scores_accumulated": [],
                "lengths": [],
                "reference_lengths": []
            }
        },
        "TopK.__init__": {
            "name": "__init__",
            "location": 412,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "TopK.forward": {
            "name": "forward",
            "location": 419,
            "return": [],
            "arguments": {
                "self": [],
                "scores": []
            }
        },
        "SampleK.__init__": {
            "name": "__init__",
            "location": 445,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "SampleK.forward": {
            "name": "forward",
            "location": 449,
            "return": [],
            "arguments": {
                "self": [],
                "scores": [],
                "target_dists": [],
                "finished": []
            }
        },
        "RepeatStates.__init__": {
            "name": "__init__",
            "location": 485,
            "return": [],
            "arguments": {
                "self": [],
                "beam_size": [],
                "state_structure": []
            }
        },
        "RepeatStates.forward": {
            "name": "forward",
            "location": 490,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SortStates.__init__": {
            "name": "__init__",
            "location": 509,
            "return": [],
            "arguments": {
                "self": [],
                "state_structure": []
            }
        },
        "SortStates.forward": {
            "name": "forward",
            "location": 513,
            "return": [],
            "arguments": {
                "self": [],
                "best_hyp_indices": []
            }
        },
        "GreedySearch.__init__": {
            "name": "__init__",
            "location": 623,
            "return": [],
            "arguments": {
                "self": [],
                "dtype": [],
                "bos_id": [],
                "eos_id": [],
                "device": [],
                "num_source_factors": [],
                "num_target_factors": [],
                "inference": [],
                "skip_nvs": [],
                "nvs_thresh": []
            }
        },
        "GreedySearch.forward": {
            "name": "forward",
            "location": 650,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "source_length": [],
                "restrict_lexicon": [],
                "max_output_lengths": [],
                "target_prefix": [],
                "target_prefix_factors": []
            }
        },
        "GreedyTop1.forward": {
            "name": "forward",
            "location": 755,
            "return": [],
            "arguments": {
                "self": [],
                "scores": [],
                "vocab_slice_ids": [],
                "target_factors": []
            }
        },
        "BeamSearch.__init__": {
            "name": "__init__",
            "location": 784,
            "return": [],
            "arguments": {
                "self": [],
                "beam_size": [],
                "dtype": [],
                "bos_id": [],
                "eos_id": [],
                "device": [],
                "output_vocab_size": [],
                "scorer": [],
                "num_source_factors": [],
                "num_target_factors": [],
                "inference": [],
                "beam_search_stop": [],
                "sample": [],
                "prevent_unk": [],
                "skip_nvs": [],
                "nvs_thresh": []
            }
        },
        "BeamSearch.forward": {
            "name": "forward",
            "location": 836,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "source_length": [],
                "restrict_lexicon": [],
                "max_output_lengths": [],
                "target_prefix": [],
                "target_prefix_factors": []
            }
        },
        "BeamSearch._should_stop": {
            "name": "_should_stop",
            "location": 1054,
            "return": [],
            "arguments": {
                "self": [],
                "finished": [],
                "batch_size": []
            }
        }
    },
    "sockeye-main/sockeye/checkpoint_decoder.py": {
        "parallel_subsample": {
            "name": "parallel_subsample",
            "location": 226,
            "return": [],
            "arguments": {
                "parallel_sequences": [],
                "sample_size": [],
                "seed": []
            }
        },
        "write_to_file": {
            "name": "write_to_file",
            "location": 234,
            "return": [],
            "arguments": {
                "data": [],
                "fname": []
            }
        },
        "CheckpointDecoder.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "model_folder": [],
                "inputs": [],
                "references": [],
                "source_vocabs": [],
                "target_vocabs": [],
                "model": [],
                "device": [],
                "max_input_len": [],
                "batch_size": [],
                "beam_size": [],
                "nbest_size": [],
                "bucket_width_source": [],
                "length_penalty_alpha": [],
                "length_penalty_beta": [],
                "max_output_length_num_stds": [],
                "ensemble_mode": [],
                "sample_size": [],
                "random_seed": []
            }
        },
        "CheckpointDecoder.decode_and_evaluate": {
            "name": "decode_and_evaluate",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "output_name": []
            }
        },
        "CheckpointDecoder.warmup": {
            "name": "warmup",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sockeye-main/sockeye/config.py": {
        "TaggedYamlObjectMetaclass.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "cls": [],
                "name": [],
                "bases": [],
                "kwds": []
            }
        },
        "SafeLoaderWithTuple.construct_python_tuple": {
            "name": "construct_python_tuple",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Config.save": {
            "name": "save",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "fname": []
            }
        },
        "Config.load": {
            "name": "load",
            "location": 62,
            "return": [],
            "arguments": {
                "fname": []
            }
        },
        "Config.copy": {
            "name": "copy",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.disable_dropout": {
            "name": "disable_dropout",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sockeye-main/sockeye/constants.py": {},
    "sockeye-main/sockeye/data_io.py": {
        "define_buckets": {
            "name": "define_buckets",
            "location": 44,
            "return": [],
            "arguments": {
                "max_seq_len": [],
                "step": []
            }
        },
        "define_parallel_buckets": {
            "name": "define_parallel_buckets",
            "location": 61,
            "return": [],
            "arguments": {
                "max_seq_len_source": [],
                "max_seq_len_target": [],
                "bucket_width": [],
                "bucket_scaling": [],
                "length_ratio": []
            }
        },
        "get_bucket": {
            "name": "get_bucket",
            "location": 103,
            "return": [],
            "arguments": {
                "seq_len": [],
                "buckets": []
            }
        },
        "define_bucket_batch_sizes": {
            "name": "define_bucket_batch_sizes",
            "location": 124,
            "return": [],
            "arguments": {
                "buckets": [],
                "batch_size": [],
                "batch_type": [],
                "data_target_average_len": [],
                "batch_sentences_multiple_of": []
            }
        },
        "calculate_length_statistics": {
            "name": "calculate_length_statistics",
            "location": 202,
            "return": [],
            "arguments": {
                "source_iterables": [],
                "target_iterables": [],
                "max_seq_len_source": [],
                "max_seq_len_target": []
            }
        },
        "analyze_sequence_lengths": {
            "name": "analyze_sequence_lengths",
            "location": 229,
            "return": [],
            "arguments": {
                "sources": [],
                "targets": [],
                "vocab_sources": [],
                "vocab_targets": [],
                "max_seq_len_source": [],
                "max_seq_len_target": []
            }
        },
        "are_none": {
            "name": "are_none",
            "location": 249,
            "return": [],
            "arguments": {
                "sequences": []
            }
        },
        "are_token_parallel": {
            "name": "are_token_parallel",
            "location": 258,
            "return": [],
            "arguments": {
                "sequences": []
            }
        },
        "create_shards": {
            "name": "create_shards",
            "location": 355,
            "return": [],
            "arguments": {
                "source_fnames": [],
                "target_fnames": [],
                "num_shards": [],
                "output_prefix": []
            }
        },
        "get_num_shards": {
            "name": "get_num_shards",
            "location": 508,
            "return": [],
            "arguments": {
                "num_samples": [],
                "samples_per_shard": [],
                "min_num_shards": []
            }
        },
        "save_shard": {
            "name": "save_shard",
            "location": 520,
            "return": [],
            "arguments": {
                "shard_idx": [],
                "data_loader": [],
                "shard_sources": [],
                "shard_targets": [],
                "source_vocabs": [],
                "target_vocabs": [],
                "length_ratio_mean": [],
                "length_ratio_std": [],
                "buckets": [],
                "output_prefix": [],
                "keep_tmp_shard_files": []
            }
        },
        "prepare_data": {
            "name": "prepare_data",
            "location": 580,
            "return": [],
            "arguments": {
                "source_fnames": [],
                "target_fnames": [],
                "source_vocabs": [],
                "target_vocabs": [],
                "source_vocab_paths": [],
                "target_vocab_paths": [],
                "shared_vocab": [],
                "max_seq_len_source": [],
                "max_seq_len_target": [],
                "bucketing": [],
                "bucket_width": [],
                "num_shards": [],
                "output_prefix": [],
                "bucket_scaling": [],
                "keep_tmp_shard_files": [],
                "pool": [],
                "shards": []
            }
        },
        "get_data_statistics": {
            "name": "get_data_statistics",
            "location": 703,
            "return": [],
            "arguments": {
                "source_readers": [],
                "target_readers": [],
                "buckets": [],
                "length_ratio_mean": [],
                "length_ratio_std": [],
                "source_vocabs": [],
                "target_vocabs": []
            }
        },
        "get_validation_data_iter": {
            "name": "get_validation_data_iter",
            "location": 728,
            "return": [],
            "arguments": {
                "data_loader": [],
                "validation_sources": [],
                "validation_targets": [],
                "buckets": [],
                "bucket_batch_sizes": [],
                "source_vocabs": [],
                "target_vocabs": [],
                "max_seq_len_source": [],
                "max_seq_len_target": [],
                "batch_size": [],
                "permute": []
            }
        },
        "get_prepared_data_iters": {
            "name": "get_prepared_data_iters",
            "location": 778,
            "return": [],
            "arguments": {
                "prepared_data_dir": [],
                "validation_sources": [],
                "validation_targets": [],
                "shared_vocab": [],
                "batch_size": [],
                "batch_type": [],
                "batch_sentences_multiple_of": [],
                "permute": []
            }
        },
        "get_training_data_iters": {
            "name": "get_training_data_iters",
            "location": 869,
            "return": [],
            "arguments": {
                "sources": [],
                "targets": [],
                "validation_sources": [],
                "validation_targets": [],
                "source_vocabs": [],
                "target_vocabs": [],
                "source_vocab_paths": [],
                "target_vocab_paths": [],
                "shared_vocab": [],
                "batch_size": [],
                "batch_type": [],
                "max_seq_len_source": [],
                "max_seq_len_target": [],
                "bucketing": [],
                "bucket_width": [],
                "bucket_scaling": [],
                "allow_empty": [],
                "batch_sentences_multiple_of": [],
                "permute": []
            }
        },
        "get_scoring_data_iters": {
            "name": "get_scoring_data_iters",
            "location": 993,
            "return": [],
            "arguments": {
                "sources": [],
                "targets": [],
                "source_vocabs": [],
                "target_vocabs": [],
                "batch_size": [],
                "max_seq_len_source": [],
                "max_seq_len_target": []
            }
        },
        "describe_data_and_buckets": {
            "name": "describe_data_and_buckets",
            "location": 1082,
            "return": [],
            "arguments": {
                "data_statistics": [],
                "bucket_batch_sizes": []
            }
        },
        "read_content": {
            "name": "read_content",
            "location": 1128,
            "return": [],
            "arguments": {
                "path": [],
                "limit": []
            }
        },
        "tokens2ids": {
            "name": "tokens2ids",
            "location": 1143,
            "return": [],
            "arguments": {
                "tokens": [],
                "vocab": []
            }
        },
        "strids2ids": {
            "name": "strids2ids",
            "location": 1154,
            "return": [],
            "arguments": {
                "tokens": []
            }
        },
        "ids2tokens": {
            "name": "ids2tokens",
            "location": 1164,
            "return": [],
            "arguments": {
                "token_ids": [],
                "vocab_inv": [],
                "exclude_set": []
            }
        },
        "create_sequence_readers": {
            "name": "create_sequence_readers",
            "location": 1228,
            "return": [],
            "arguments": {
                "sources": [],
                "targets": [],
                "vocab_sources": [],
                "vocab_targets": []
            }
        },
        "parallel_iter": {
            "name": "parallel_iter",
            "location": 1247,
            "return": [],
            "arguments": {
                "source_iterables": [],
                "target_iterables": [],
                "skip_blanks": [],
                "check_token_parallel": []
            }
        },
        "parallel_iterate": {
            "name": "parallel_iterate",
            "location": 1267,
            "return": [],
            "arguments": {
                "source_iterators": [],
                "target_iterators": [],
                "skip_blanks": [],
                "check_token_parallel": []
            }
        },
        "get_parallel_bucket": {
            "name": "get_parallel_bucket",
            "location": 1310,
            "return": [],
            "arguments": {
                "buckets": [],
                "length_source": [],
                "length_target": []
            }
        },
        "get_target_bucket": {
            "name": "get_target_bucket",
            "location": 1329,
            "return": [],
            "arguments": {
                "buckets": [],
                "length_target": []
            }
        },
        "get_permutations": {
            "name": "get_permutations",
            "location": 1485,
            "return": [],
            "arguments": {
                "bucket_counts": []
            }
        },
        "get_batch_indices": {
            "name": "get_batch_indices",
            "location": 1507,
            "return": [],
            "arguments": {
                "data": [],
                "bucket_batch_sizes": []
            }
        },
        "create_target_and_shifted_label_sequences": {
            "name": "create_target_and_shifted_label_sequences",
            "location": 1921,
            "return": [],
            "arguments": {
                "target_and_label": []
            }
        },
        "create_batch_from_parallel_sample": {
            "name": "create_batch_from_parallel_sample",
            "location": 1933,
            "return": [],
            "arguments": {
                "source": [],
                "target": [],
                "label": []
            }
        },
        "DataStatisticsAccumulator.__init__": {
            "name": "__init__",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "buckets": [],
                "vocab_source": [],
                "vocab_target": [],
                "length_ratio_mean": [],
                "length_ratio_std": []
            }
        },
        "DataStatisticsAccumulator.sequence_pair": {
            "name": "sequence_pair",
            "location": 299,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "target": [],
                "bucket_idx": []
            }
        },
        "DataStatisticsAccumulator.mean_len_target_per_bucket": {
            "name": "mean_len_target_per_bucket",
            "location": 325,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataStatisticsAccumulator.length_ratio_stats_per_bucket": {
            "name": "length_ratio_stats_per_bucket",
            "location": 330,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataStatisticsAccumulator.statistics": {
            "name": "statistics",
            "location": 335,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RawParallelDatasetLoader.__init__": {
            "name": "__init__",
            "location": 427,
            "return": [],
            "arguments": {
                "self": [],
                "buckets": [],
                "eos_id": [],
                "pad_id": [],
                "skip_blanks": [],
                "dtype": [],
                "shift_target_factors": []
            }
        },
        "RawParallelDatasetLoader.load": {
            "name": "load",
            "location": 441,
            "return": [],
            "arguments": {
                "self": [],
                "source_iterables": [],
                "target_iterables": [],
                "num_samples_per_bucket": []
            }
        },
        "DataStatistics.log": {
            "name": "log",
            "location": 1069,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_batch_sizes": []
            }
        },
        "SequenceReader.__init__": {
            "name": "__init__",
            "location": 1192,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "vocabulary": [],
                "add_bos": [],
                "add_eos": [],
                "limit": []
            }
        },
        "SequenceReader.__iter__": {
            "name": "__iter__",
            "location": 1212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParallelDataSet.__init__": {
            "name": "__init__",
            "location": 1353,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "target": []
            }
        },
        "ParallelDataSet.__len__": {
            "name": "__len__",
            "location": 1361,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParallelDataSet.get_bucket_counts": {
            "name": "get_bucket_counts",
            "location": 1364,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParallelDataSet.save": {
            "name": "save",
            "location": 1367,
            "return": [],
            "arguments": {
                "self": [],
                "fname": []
            }
        },
        "ParallelDataSet.load": {
            "name": "load",
            "location": 1374,
            "return": [],
            "arguments": {
                "fname": []
            }
        },
        "ParallelDataSet.fill_up": {
            "name": "fill_up",
            "location": 1415,
            "return": [],
            "arguments": {
                "self": [],
                "bucket_batch_sizes": [],
                "seed": []
            }
        },
        "ParallelDataSet.permute": {
            "name": "permute",
            "location": 1461,
            "return": [],
            "arguments": {
                "self": [],
                "permutations": []
            }
        },
        "BaseParallelSampleIter.__init__": {
            "name": "__init__",
            "location": 1545,
            "return": [],
            "arguments": {
                "self": [],
                "buckets": [],
                "batch_size": [],
                "bucket_batch_sizes": [],
                "num_source_factors": [],
                "num_target_factors": [],
                "permute": [],
                "dtype": []
            }
        },
        "BaseParallelSampleIter.__iter__": {
            "name": "__iter__",
            "location": 1561,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseParallelSampleIter.reset": {
            "name": "reset",
            "location": 1565,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseParallelSampleIter.iter_next": {
            "name": "iter_next",
            "location": 1569,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseParallelSampleIter.next": {
            "name": "next",
            "location": 1573,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseParallelSampleIter.__next__": {
            "name": "__next__",
            "location": 1576,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseParallelSampleIter.save_state": {
            "name": "save_state",
            "location": 1580,
            "return": [],
            "arguments": {
                "self": [],
                "fname": []
            }
        },
        "BaseParallelSampleIter.load_state": {
            "name": "load_state",
            "location": 1584,
            "return": [],
            "arguments": {
                "self": [],
                "fname": []
            }
        },
        "BatchedRawParallelSampleIter.__init__": {
            "name": "__init__",
            "location": 1595,
            "return": [],
            "arguments": {
                "self": [],
                "data_loader": [],
                "sources": [],
                "targets": [],
                "source_vocabs": [],
                "target_vocabs": [],
                "bucket": [],
                "batch_size": [],
                "max_lens": [],
                "num_source_factors": [],
                "num_target_factors": [],
                "dtype": []
            }
        },
        "BatchedRawParallelSampleIter.reset": {
            "name": "reset",
            "location": 1623,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BatchedRawParallelSampleIter.iter_next": {
            "name": "iter_next",
            "location": 1626,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BatchedRawParallelSampleIter.next": {
            "name": "next",
            "location": 1673,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BatchedRawParallelSampleIter.save_state": {
            "name": "save_state",
            "location": 1681,
            "return": [],
            "arguments": {
                "self": [],
                "fname": []
            }
        },
        "BatchedRawParallelSampleIter.load_state": {
            "name": "load_state",
            "location": 1684,
            "return": [],
            "arguments": {
                "self": [],
                "fname": []
            }
        },
        "ShardedParallelSampleIter.__init__": {
            "name": "__init__",
            "location": 1694,
            "return": [],
            "arguments": {
                "self": [],
                "shards_fnames": [],
                "buckets": [],
                "batch_size": [],
                "bucket_batch_sizes": [],
                "num_source_factors": [],
                "num_target_factors": [],
                "permute": [],
                "dtype": []
            }
        },
        "ShardedParallelSampleIter._load_shard": {
            "name": "_load_shard",
            "location": 1712,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ShardedParallelSampleIter.reset": {
            "name": "reset",
            "location": 1725,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ShardedParallelSampleIter.iter_next": {
            "name": "iter_next",
            "location": 1753,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ShardedParallelSampleIter.next": {
            "name": "next",
            "location": 1757,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ShardedParallelSampleIter.save_state": {
            "name": "save_state",
            "location": 1766,
            "return": [],
            "arguments": {
                "self": [],
                "fname": []
            }
        },
        "ShardedParallelSampleIter.load_state": {
            "name": "load_state",
            "location": 1772,
            "return": [],
            "arguments": {
                "self": [],
                "fname": []
            }
        },
        "ParallelSampleIter.__init__": {
            "name": "__init__",
            "location": 1786,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "buckets": [],
                "batch_size": [],
                "bucket_batch_sizes": [],
                "num_source_factors": [],
                "num_target_factors": [],
                "permute": [],
                "dtype": []
            }
        },
        "ParallelSampleIter.reset": {
            "name": "reset",
            "location": 1814,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParallelSampleIter.iter_next": {
            "name": "iter_next",
            "location": 1835,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParallelSampleIter.next": {
            "name": "next",
            "location": 1841,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ParallelSampleIter.save_state": {
            "name": "save_state",
            "location": 1856,
            "return": [],
            "arguments": {
                "self": [],
                "fname": []
            }
        },
        "ParallelSampleIter.load_state": {
            "name": "load_state",
            "location": 1870,
            "return": [],
            "arguments": {
                "self": [],
                "fname": []
            }
        },
        "Batch.load": {
            "name": "load",
            "location": 1912,
            "return": [],
            "arguments": {
                "self": [],
                "device": []
            }
        }
    },
    "sockeye-main/sockeye/decoder.py": {
        "get_decoder": {
            "name": "get_decoder",
            "location": 33,
            "return": [],
            "arguments": {
                "config": [],
                "inference_only": []
            }
        },
        "Decoder.register": {
            "name": "register",
            "location": 50,
            "return": [],
            "arguments": {
                "cls": [],
                "config_type": []
            }
        },
        "Decoder.get_decoder": {
            "name": "get_decoder",
            "location": 66,
            "return": [],
            "arguments": {
                "cls": [],
                "config": [],
                "inference_only": []
            }
        },
        "Decoder.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Decoder.state_structure": {
            "name": "state_structure",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Decoder.init_state_from_encoder": {
            "name": "init_state_from_encoder",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "encoder_outputs": [],
                "encoder_valid_length": [],
                "target_embed": []
            }
        },
        "Decoder.decode_seq": {
            "name": "decode_seq",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "states": []
            }
        },
        "Decoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransformerDecoder.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "inference_only": []
            }
        },
        "TransformerDecoder.state_structure": {
            "name": "state_structure",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransformerDecoder.init_state_from_encoder": {
            "name": "init_state_from_encoder",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "encoder_outputs": [],
                "encoder_valid_length": [],
                "target_embed": []
            }
        },
        "TransformerDecoder.decode_seq": {
            "name": "decode_seq",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "states": []
            }
        },
        "TransformerDecoder.forward": {
            "name": "forward",
            "location": 235,
            "return": [],
            "arguments": {
                "self": [],
                "step_input": [],
                "states": []
            }
        },
        "TransformerDecoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 290,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Decoder.register.wrapper": {
            "name": "wrapper",
            "location": 59,
            "return": [],
            "arguments": {
                "target_cls": []
            }
        }
    },
    "sockeye-main/sockeye/embeddings.py": {
        "compute_sims": {
            "name": "compute_sims",
            "location": 35,
            "return": [],
            "arguments": {
                "inputs": [],
                "normalize": []
            }
        },
        "nearest_k": {
            "name": "nearest_k",
            "location": 53,
            "return": [],
            "arguments": {
                "similarity_matrix": [],
                "query_word_id": [],
                "k": [],
                "gamma": []
            }
        },
        "main": {
            "name": "main",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "embeddings": {
            "name": "embeddings",
            "location": 89,
            "return": [],
            "arguments": {
                "args": []
            }
        }
    },
    "sockeye-main/sockeye/encoder.py": {
        "get_transformer_encoder": {
            "name": "get_transformer_encoder",
            "location": 26,
            "return": [],
            "arguments": {
                "config": [],
                "inference_only": []
            }
        },
        "Encoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Encoder.get_encoded_seq_len": {
            "name": "get_encoded_seq_len",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "seq_len": []
            }
        },
        "Encoder.get_max_seq_len": {
            "name": "get_max_seq_len",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmbeddingConfig.__post_init__": {
            "name": "__post_init__",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Embedding.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "embedding": []
            }
        },
        "Embedding.forward": {
            "name": "forward",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Embedding.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransformerEncoder.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "inference_only": []
            }
        },
        "TransformerEncoder.forward": {
            "name": "forward",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "valid_length": []
            }
        },
        "TransformerEncoder.get_num_hidden": {
            "name": "get_num_hidden",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sockeye-main/sockeye/evaluate.py": {
        "raw_corpus_bleu": {
            "name": "raw_corpus_bleu",
            "location": 37,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": [],
                "offset": []
            }
        },
        "raw_corpus_chrf": {
            "name": "raw_corpus_chrf",
            "location": 49,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": []
            }
        },
        "raw_corpus_ter": {
            "name": "raw_corpus_ter",
            "location": 60,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": []
            }
        },
        "raw_corpus_rouge1": {
            "name": "raw_corpus_rouge1",
            "location": 72,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": []
            }
        },
        "raw_corpus_rouge2": {
            "name": "raw_corpus_rouge2",
            "location": 83,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": []
            }
        },
        "raw_corpus_rougel": {
            "name": "raw_corpus_rougel",
            "location": 94,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": []
            }
        },
        "raw_corpus_length_ratio": {
            "name": "raw_corpus_length_ratio",
            "location": 105,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": []
            }
        },
        "main": {
            "name": "main",
            "location": 117,
            "return": [],
            "arguments": {}
        },
        "_print_mean_std_score": {
            "name": "_print_mean_std_score",
            "location": 181,
            "return": [],
            "arguments": {
                "metrics": [],
                "scores": []
            }
        }
    },
    "sockeye-main/sockeye/inference.py": {
        "models_max_input_output_length": {
            "name": "models_max_input_output_length",
            "location": 40,
            "return": [],
            "arguments": {
                "models": [],
                "num_stds": [],
                "forced_max_input_length": [],
                "forced_max_output_length": []
            }
        },
        "get_max_input_output_length": {
            "name": "get_max_input_output_length",
            "location": 70,
            "return": [],
            "arguments": {
                "supported_max_seq_len_source": [],
                "supported_max_seq_len_target": [],
                "length_ratio_mean": [],
                "length_ratio_std": [],
                "num_stds": [],
                "forced_max_input_len": [],
                "forced_max_output_len": []
            }
        },
        "_bad_input": {
            "name": "_bad_input",
            "location": 262,
            "return": [],
            "arguments": {
                "sentence_id": [],
                "reason": []
            }
        },
        "make_input_from_plain_string": {
            "name": "make_input_from_plain_string",
            "location": 267,
            "return": [],
            "arguments": {
                "sentence_id": [],
                "string": []
            }
        },
        "make_input_from_json_string": {
            "name": "make_input_from_json_string",
            "location": 278,
            "return": [],
            "arguments": {
                "sentence_id": [],
                "json_string": [],
                "translator": []
            }
        },
        "make_input_from_dict": {
            "name": "make_input_from_dict",
            "location": 301,
            "return": [],
            "arguments": {
                "sentence_id": [],
                "input_dict": [],
                "translator": []
            }
        },
        "make_input_from_factored_string": {
            "name": "make_input_from_factored_string",
            "location": 419,
            "return": [],
            "arguments": {
                "sentence_id": [],
                "factored_string": [],
                "translator": [],
                "delimiter": []
            }
        },
        "make_input_from_multiple_strings": {
            "name": "make_input_from_multiple_strings",
            "location": 459,
            "return": [],
            "arguments": {
                "sentence_id": [],
                "strings": []
            }
        },
        "empty_translation": {
            "name": "empty_translation",
            "location": 560,
            "return": [],
            "arguments": {
                "add_nbest": []
            }
        },
        "_concat_nbest_translations": {
            "name": "_concat_nbest_translations",
            "location": 599,
            "return": [],
            "arguments": {
                "translations": [],
                "stop_ids": [],
                "scorer": []
            }
        },
        "_reduce_nbest_translations": {
            "name": "_reduce_nbest_translations",
            "location": 622,
            "return": [],
            "arguments": {
                "nbest_translations_list": []
            }
        },
        "_expand_nbest_translation": {
            "name": "_expand_nbest_translation",
            "location": 643,
            "return": [],
            "arguments": {
                "translation": []
            }
        },
        "_remove_target_prefix_tokens": {
            "name": "_remove_target_prefix_tokens",
            "location": 658,
            "return": [],
            "arguments": {
                "target_ids": [],
                "num_target_prefix_tokens": []
            }
        },
        "_concat_translations": {
            "name": "_concat_translations",
            "location": 670,
            "return": [],
            "arguments": {
                "translations": [],
                "stop_ids": [],
                "scorer": []
            }
        },
        "_unshift_target_factors": {
            "name": "_unshift_target_factors",
            "location": 1279,
            "return": [],
            "arguments": {
                "sequence": [],
                "fill_last_with": []
            }
        },
        "get_max_input_output_length.get_max_output_length": {
            "name": "get_max_output_length",
            "location": 102,
            "return": [],
            "arguments": {
                "input_length": []
            }
        },
        "TranslatorInput.__str__": {
            "name": "__str__",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorInput.__len__": {
            "name": "__len__",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorInput.num_factors": {
            "name": "num_factors",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorInput.get_source_prefix_tokens": {
            "name": "get_source_prefix_tokens",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorInput.num_source_prefix_tokens": {
            "name": "num_source_prefix_tokens",
            "location": 164,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorInput.get_target_prefix_tokens": {
            "name": "get_target_prefix_tokens",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorInput.num_target_prefix_tokens": {
            "name": "num_target_prefix_tokens",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorInput.get_target_prefix_factors": {
            "name": "get_target_prefix_factors",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorInput.num_target_prefix_factors": {
            "name": "num_target_prefix_factors",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TranslatorInput.chunks": {
            "name": "chunks",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "chunk_size": []
            }
        },
        "TranslatorInput.with_eos": {
            "name": "with_eos",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BadTranslatorInput.__init__": {
            "name": "__init__",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "sentence_id": [],
                "tokens": []
            }
        },
        "TranslatorOutput.json": {
            "name": "json",
            "location": 510,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Translator.__init__": {
            "name": "__init__",
            "location": 750,
            "return": [],
            "arguments": {
                "self": [],
                "device": [],
                "ensemble_mode": [],
                "scorer": [],
                "batch_size": [],
                "beam_search_stop": [],
                "models": [],
                "source_vocabs": [],
                "target_vocabs": [],
                "beam_size": [],
                "nbest_size": [],
                "restrict_lexicon": [],
                "strip_unknown_words": [],
                "sample": [],
                "output_scores": [],
                "constant_length_ratio": [],
                "max_output_length_num_stds": [],
                "max_input_length": [],
                "max_output_length": [],
                "prevent_unk": [],
                "greedy": [],
                "skip_nvs": [],
                "nvs_thresh": []
            }
        },
        "Translator.max_input_length": {
            "name": "max_input_length",
            "location": 839,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Translator.max_batch_size": {
            "name": "max_batch_size",
            "location": 846,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Translator.num_source_factors": {
            "name": "num_source_factors",
            "location": 853,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Translator.num_target_factors": {
            "name": "num_target_factors",
            "location": 857,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Translator.translate": {
            "name": "translate",
            "location": 860,
            "return": [],
            "arguments": {
                "self": [],
                "trans_inputs": [],
                "fill_up_batches": []
            }
        },
        "Translator._get_inference_input": {
            "name": "_get_inference_input",
            "location": 985,
            "return": [],
            "arguments": {
                "self": [],
                "trans_inputs": []
            }
        },
        "Translator._get_translation_tokens_and_factors": {
            "name": "_get_translation_tokens_and_factors",
            "location": 1086,
            "return": [],
            "arguments": {
                "self": [],
                "target_ids": []
            }
        },
        "Translator._make_result": {
            "name": "_make_result",
            "location": 1117,
            "return": [],
            "arguments": {
                "self": [],
                "trans_input": [],
                "translation": []
            }
        },
        "Translator._translate_np": {
            "name": "_translate_np",
            "location": 1162,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "source_length": [],
                "restrict_lexicon": [],
                "max_output_lengths": [],
                "target_prefix": [],
                "target_prefix_factors": []
            }
        },
        "Translator._get_best_translations": {
            "name": "_get_best_translations",
            "location": 1189,
            "return": [],
            "arguments": {
                "self": [],
                "result": []
            }
        },
        "Translator._get_best_word_indices_for_kth_hypotheses": {
            "name": "_get_best_word_indices_for_kth_hypotheses",
            "location": 1228,
            "return": [],
            "arguments": {
                "ks": [],
                "all_hyp_indices": []
            }
        },
        "Translator._assemble_translation": {
            "name": "_assemble_translation",
            "location": 1252,
            "return": [],
            "arguments": {
                "sequence": [],
                "length": [],
                "seq_scores": [],
                "estimated_reference_length": [],
                "unshift_target_factors": []
            }
        }
    },
    "sockeye-main/sockeye/initial_setup.py": {
        "handle_env_cli_arg": {
            "name": "handle_env_cli_arg",
            "location": 28,
            "return": [],
            "arguments": {}
        }
    },
    "sockeye-main/sockeye/layers.py": {
        "get_activation": {
            "name": "get_activation",
            "location": 28,
            "return": [],
            "arguments": {
                "act_type": [],
                "inplace": []
            }
        },
        "interleaved_matmul_encdec_qk": {
            "name": "interleaved_matmul_encdec_qk",
            "location": 168,
            "return": [],
            "arguments": {
                "q": [],
                "kv": [],
                "heads": []
            }
        },
        "interleaved_matmul_encdec_valatt": {
            "name": "interleaved_matmul_encdec_valatt",
            "location": 196,
            "return": [],
            "arguments": {
                "kv": [],
                "att": [],
                "heads": []
            }
        },
        "prepare_source_length_mask": {
            "name": "prepare_source_length_mask",
            "location": 260,
            "return": [],
            "arguments": {
                "lengths": [],
                "heads": [],
                "max_length": [],
                "expand": []
            }
        },
        "interleave_kv": {
            "name": "interleave_kv",
            "location": 584,
            "return": [],
            "arguments": {
                "module": []
            }
        },
        "separate_kv": {
            "name": "separate_kv",
            "location": 591,
            "return": [],
            "arguments": {
                "module": []
            }
        },
        "get_positional_embeddings": {
            "name": "get_positional_embeddings",
            "location": 599,
            "return": [],
            "arguments": {
                "length": [],
                "depth": []
            }
        },
        "LHUC.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "num_hidden": []
            }
        },
        "LHUC.forward": {
            "name": "forward",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "OutputLayer.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_size": [],
                "vocab_size": [],
                "weight": []
            }
        },
        "OutputLayer.extra_repr": {
            "name": "extra_repr",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OutputLayer._is_new_slice": {
            "name": "_is_new_slice",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "OutputLayer._take_slice": {
            "name": "_take_slice",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "vocab_slice_ids": []
            }
        },
        "OutputLayer.forward": {
            "name": "forward",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "vocab_slice_ids": []
            }
        },
        "LengthRatio.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "hidden_size": [],
                "num_layers": []
            }
        },
        "LengthRatio.forward": {
            "name": "forward",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "source_encoded": [],
                "source_encoded_length": []
            }
        },
        "DotAttentionCell.__init__": {
            "name": "__init__",
            "location": 225,
            "return": [],
            "arguments": {
                "self": [],
                "dropout": [],
                "heads": []
            }
        },
        "DotAttentionCell.forward": {
            "name": "forward",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "queries": [],
                "key_values": [],
                "mask": []
            }
        },
        "MultiHeadAttentionBase.__init__": {
            "name": "__init__",
            "location": 282,
            "return": [],
            "arguments": {
                "self": [],
                "depth_att": [],
                "heads": [],
                "depth_out": [],
                "dropout": []
            }
        },
        "MultiHeadAttentionBase._attend": {
            "name": "_attend",
            "location": 298,
            "return": [],
            "arguments": {
                "self": [],
                "queries": [],
                "key_values": [],
                "mask": []
            }
        },
        "AutoregressiveLayer.num_state_tensors": {
            "name": "num_state_tensors",
            "location": 323,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoregressiveLayer.needs_mask": {
            "name": "needs_mask",
            "location": 329,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoregressiveLayer.get_state_shape": {
            "name": "get_state_shape",
            "location": 334,
            "return": [],
            "arguments": {
                "self": [],
                "batch_size": []
            }
        },
        "AutoregressiveLayer.forward": {
            "name": "forward",
            "location": 342,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "previous_states": []
            }
        },
        "MultiHeadSelfAttention.__init__": {
            "name": "__init__",
            "location": 363,
            "return": [],
            "arguments": {
                "self": [],
                "depth_att": [],
                "heads": [],
                "depth_out": [],
                "dropout": []
            }
        },
        "MultiHeadSelfAttention.separate_kv": {
            "name": "separate_kv",
            "location": 377,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiHeadSelfAttention.interleave_kv": {
            "name": "interleave_kv",
            "location": 389,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiHeadSelfAttention.train": {
            "name": "train",
            "location": 399,
            "return": [],
            "arguments": {
                "self": [],
                "mode": []
            }
        },
        "MultiHeadSelfAttention._load_from_state_dict": {
            "name": "_load_from_state_dict",
            "location": 412,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiHeadSelfAttention.num_state_tensors": {
            "name": "num_state_tensors",
            "location": 417,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiHeadSelfAttention.needs_mask": {
            "name": "needs_mask",
            "location": 422,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiHeadSelfAttention.get_state_shape": {
            "name": "get_state_shape",
            "location": 426,
            "return": [],
            "arguments": {
                "self": [],
                "batch_size": []
            }
        },
        "MultiHeadSelfAttention.forward": {
            "name": "forward",
            "location": 434,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "previous_states": [],
                "mask": []
            }
        },
        "MultiHeadAttention.__init__": {
            "name": "__init__",
            "location": 488,
            "return": [],
            "arguments": {
                "self": [],
                "depth_att": [],
                "heads": [],
                "depth_out": [],
                "dropout": [],
                "depth_key_value": []
            }
        },
        "MultiHeadAttention.separate_kv": {
            "name": "separate_kv",
            "location": 503,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiHeadAttention.interleave_kv": {
            "name": "interleave_kv",
            "location": 514,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiHeadAttention.train": {
            "name": "train",
            "location": 524,
            "return": [],
            "arguments": {
                "self": [],
                "mode": []
            }
        },
        "MultiHeadAttention._load_from_state_dict": {
            "name": "_load_from_state_dict",
            "location": 537,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiHeadAttention.forward": {
            "name": "forward",
            "location": 541,
            "return": [],
            "arguments": {
                "self": [],
                "queries": [],
                "key_values": [],
                "mask": [],
                "projected_memory_kv": []
            }
        },
        "PositionalEmbeddings.__init__": {
            "name": "__init__",
            "location": 628,
            "return": [],
            "arguments": {
                "self": [],
                "weight_type": [],
                "num_embed": [],
                "max_seq_len": [],
                "scale_up_input": [],
                "scale_down_positions": []
            }
        },
        "PositionalEmbeddings.forward": {
            "name": "forward",
            "location": 653,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "steps": []
            }
        },
        "SSRU.__init__": {
            "name": "__init__",
            "location": 704,
            "return": [],
            "arguments": {
                "self": [],
                "model_size": [],
                "inference_only": []
            }
        },
        "SSRU.num_state_tensors": {
            "name": "num_state_tensors",
            "location": 720,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SSRU.needs_mask": {
            "name": "needs_mask",
            "location": 725,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SSRU.get_state_shape": {
            "name": "get_state_shape",
            "location": 729,
            "return": [],
            "arguments": {
                "self": [],
                "batch_size": []
            }
        },
        "SSRU._training_cell_state_transform": {
            "name": "_training_cell_state_transform",
            "location": 738,
            "return": [],
            "arguments": {
                "previous_cell_state": [],
                "weighted_inputs": [],
                "forget_rates": []
            }
        },
        "SSRU._inference_cell_state_transform": {
            "name": "_inference_cell_state_transform",
            "location": 752,
            "return": [],
            "arguments": {
                "previous_cell_state": [],
                "weighted_inputs": [],
                "forget_rates": []
            }
        },
        "SSRU.forward": {
            "name": "forward",
            "location": 758,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "previous_states": []
            }
        }
    },
    "sockeye-main/sockeye/lexicon.py": {
        "lexicon_iterator": {
            "name": "lexicon_iterator",
            "location": 38,
            "return": [],
            "arguments": {
                "path": [],
                "vocab_source": [],
                "vocab_target": []
            }
        },
        "read_lexicon": {
            "name": "read_lexicon",
            "location": 62,
            "return": [],
            "arguments": {
                "path": [],
                "vocab_source": [],
                "vocab_target": []
            }
        },
        "load_restrict_lexicon": {
            "name": "load_restrict_lexicon",
            "location": 138,
            "return": [],
            "arguments": {
                "path": [],
                "vocab_source": [],
                "vocab_target": [],
                "k": []
            }
        },
        "create": {
            "name": "create",
            "location": 311,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "create_block_lexicon_from_file": {
            "name": "create_block_lexicon_from_file",
            "location": 327,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "create_block_lexicon_for_model": {
            "name": "create_block_lexicon_for_model",
            "location": 341,
            "return": [],
            "arguments": {
                "block_tokens": [],
                "model_path": [],
                "output_path": [],
                "lowercase": []
            }
        },
        "create_block_lexicon": {
            "name": "create_block_lexicon",
            "location": 346,
            "return": [],
            "arguments": {
                "block_tokens": [],
                "vocab_target": [],
                "output_path": [],
                "lowercase": []
            }
        },
        "inspect": {
            "name": "inspect",
            "location": 363,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 388,
            "return": [],
            "arguments": {}
        },
        "RestrictLexicon.save": {
            "name": "save",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "RestrictLexicon.load_np": {
            "name": "load_np",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "lex": [],
                "k": []
            }
        },
        "RestrictLexicon.requires_src_ids": {
            "name": "requires_src_ids",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RestrictLexicon.is_blocking": {
            "name": "is_blocking",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RestrictLexicon.get_allowed_trg_ids": {
            "name": "get_allowed_trg_ids",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "src_ids": []
            }
        },
        "RestrictLexicon.get_blocked_trg_ids": {
            "name": "get_blocked_trg_ids",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "src_ids": []
            }
        },
        "TopKLexicon.__init__": {
            "name": "__init__",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "vocab_source": [],
                "vocab_target": []
            }
        },
        "TopKLexicon.create": {
            "name": "create",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "k": []
            }
        },
        "TopKLexicon.load_np": {
            "name": "load_np",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "lex": [],
                "k": []
            }
        },
        "TopKLexicon.load": {
            "name": "load",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "k": []
            }
        },
        "TopKLexicon.requires_src_ids": {
            "name": "requires_src_ids",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TopKLexicon.is_blocking": {
            "name": "is_blocking",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TopKLexicon.get_trg_ids": {
            "name": "get_trg_ids",
            "location": 243,
            "return": [],
            "arguments": {
                "self": [],
                "src_ids": []
            }
        },
        "TopKLexicon.get_allowed_trg_ids": {
            "name": "get_allowed_trg_ids",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "src_ids": []
            }
        },
        "TopKLexicon.get_blocked_trg_ids": {
            "name": "get_blocked_trg_ids",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "src_ids": []
            }
        },
        "StaticBlockLexicon.__init__": {
            "name": "__init__",
            "location": 269,
            "return": [],
            "arguments": {
                "self": [],
                "lex": []
            }
        },
        "StaticBlockLexicon.create": {
            "name": "create",
            "location": 273,
            "return": [],
            "arguments": {
                "self": [],
                "block_tokens": [],
                "vocab_target": []
            }
        },
        "StaticBlockLexicon.load_np": {
            "name": "load_np",
            "location": 294,
            "return": [],
            "arguments": {
                "self": [],
                "lex": [],
                "k": []
            }
        },
        "StaticBlockLexicon.requires_src_ids": {
            "name": "requires_src_ids",
            "location": 297,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StaticBlockLexicon.is_blocking": {
            "name": "is_blocking",
            "location": 300,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StaticBlockLexicon.get_blocked_trg_ids": {
            "name": "get_blocked_trg_ids",
            "location": 303,
            "return": [],
            "arguments": {
                "self": [],
                "src_ids": []
            }
        },
        "StaticBlockLexicon.get_allowed_trg_ids": {
            "name": "get_allowed_trg_ids",
            "location": 307,
            "return": [],
            "arguments": {
                "self": [],
                "src_ids": []
            }
        }
    },
    "sockeye-main/sockeye/log.py": {
        "setup_main_logger": {
            "name": "setup_main_logger",
            "location": 106,
            "return": [],
            "arguments": {
                "file_logging": [],
                "console": [],
                "path": [],
                "level": [],
                "console_level": []
            }
        },
        "log_sockeye_version": {
            "name": "log_sockeye_version",
            "location": 144,
            "return": [],
            "arguments": {
                "logger": []
            }
        },
        "log_torch_version": {
            "name": "log_torch_version",
            "location": 153,
            "return": [],
            "arguments": {
                "logger": []
            }
        },
        "setup_main_logger.exception_hook": {
            "name": "exception_hook",
            "location": 138,
            "return": [],
            "arguments": {
                "exc_type": [],
                "exc_value": [],
                "exc_traceback": []
            }
        }
    },
    "sockeye-main/sockeye/loss.py": {
        "_label_to_bow": {
            "name": "_label_to_bow",
            "location": 253,
            "return": [],
            "arguments": {
                "label": [],
                "num_labels": []
            }
        },
        "Loss.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "output_name": [],
                "label_name": [],
                "weight": [],
                "metric_prefix": []
            }
        },
        "Loss.__call__": {
            "name": "__call__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "outputs": [],
                "labels": []
            }
        },
        "Loss.create_metric": {
            "name": "create_metric",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Loss.metric": {
            "name": "metric",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Loss.weight": {
            "name": "weight",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Loss.name": {
            "name": "name",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Loss.output_name": {
            "name": "output_name",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Loss.label_name": {
            "name": "label_name",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LossMetric.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "short_name": [],
                "prefix": []
            }
        },
        "LossMetric.__repr__": {
            "name": "__repr__",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LossMetric.__str__": {
            "name": "__str__",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LossMetric.name": {
            "name": "name",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LossMetric.short_name": {
            "name": "short_name",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LossMetric.update": {
            "name": "update",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "loss": [],
                "num_samples": []
            }
        },
        "LossMetric.get": {
            "name": "get",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LossMetric.reset": {
            "name": "reset",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CrossEntropyLoss.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "weight": [],
                "label_smoothing": [],
                "dtype": [],
                "output_name": [],
                "label_name": [],
                "ignore_label": [],
                "metric_prefix": [],
                "label_smoothing_impl": []
            }
        },
        "CrossEntropyLoss._smoothed_loss_as_in_mxnet": {
            "name": "_smoothed_loss_as_in_mxnet",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "logits": [],
                "labels": []
            }
        },
        "CrossEntropyLoss._smoothed_loss_as_in_fairseq": {
            "name": "_smoothed_loss_as_in_fairseq",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "logits": [],
                "labels": []
            }
        },
        "CrossEntropyLoss._torch_cross_entropy_loss": {
            "name": "_torch_cross_entropy_loss",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "logits": [],
                "labels": []
            }
        },
        "CrossEntropyLoss.forward": {
            "name": "forward",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "logits": [],
                "labels": []
            }
        },
        "CrossEntropyLoss.create_metric": {
            "name": "create_metric",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DynamicBCEWithLogitsLoss.__init__": {
            "name": "__init__",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "weight": [],
                "size_average": [],
                "reduce": [],
                "reduction": [],
                "pos_weight": []
            }
        },
        "DynamicBCEWithLogitsLoss.forward": {
            "name": "forward",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "input": [],
                "target": [],
                "pos_weight": []
            }
        },
        "BinaryCrossEntropyBowLoss.__init__": {
            "name": "__init__",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "pos_weight": [],
                "weight": [],
                "dtype": [],
                "output_name": [],
                "label_name": [],
                "num_labels": [],
                "metric_prefix": []
            }
        },
        "BinaryCrossEntropyBowLoss.forward": {
            "name": "forward",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "output": [],
                "label": []
            }
        },
        "BinaryCrossEntropyBowLoss.create_metric": {
            "name": "create_metric",
            "location": 317,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PerplexityMetric.__init__": {
            "name": "__init__",
            "location": 323,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": [],
                "name": [],
                "short_name": []
            }
        },
        "PerplexityMetric.update": {
            "name": "update",
            "location": 326,
            "return": [],
            "arguments": {
                "self": [],
                "batch_cross_entropy": [],
                "batch_num_valid": []
            }
        },
        "PerplexityMetric.get": {
            "name": "get",
            "location": 330,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PoissonLoss.__init__": {
            "name": "__init__",
            "location": 341,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "weight": [],
                "output_name": [],
                "label_name": []
            }
        },
        "PoissonLoss.forward": {
            "name": "forward",
            "location": 348,
            "return": [],
            "arguments": {
                "self": [],
                "length_predictions": [],
                "labels": []
            }
        },
        "PoissonLoss.create_metric": {
            "name": "create_metric",
            "location": 363,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MSELoss.__init__": {
            "name": "__init__",
            "location": 373,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "weight": [],
                "output_name": [],
                "label_name": []
            }
        },
        "MSELoss.forward": {
            "name": "forward",
            "location": 380,
            "return": [],
            "arguments": {
                "self": [],
                "length_predictions": [],
                "labels": []
            }
        },
        "MSELoss.create_metric": {
            "name": "create_metric",
            "location": 395,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sockeye-main/sockeye/lr_scheduler.py": {
        "get_lr_scheduler": {
            "name": "get_lr_scheduler",
            "location": 193,
            "return": [],
            "arguments": {
                "scheduler_type": [],
                "base_learning_rate": [],
                "learning_rate_t_scale": [],
                "learning_rate_reduce_factor": [],
                "learning_rate_reduce_num_not_improved": [],
                "learning_rate_warmup": [],
                "max_updates": []
            }
        },
        "LearningRateScheduler.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "base_lr": [],
                "warmup": [],
                "t_scale": []
            }
        },
        "LearningRateScheduler.__call__": {
            "name": "__call__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "LearningRateScheduler._warmup": {
            "name": "_warmup",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "scaled_t": []
            }
        },
        "AdaptiveLearningRateScheduler.new_evaluation_result": {
            "name": "new_evaluation_result",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "has_improved": []
            }
        },
        "LearningRateSchedulerInvSqrtDecay.__call__": {
            "name": "__call__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "LearningRateSchedulerLinearDecay.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "base_lr": [],
                "total_steps": [],
                "warmup": [],
                "t_scale": []
            }
        },
        "LearningRateSchedulerLinearDecay.__call__": {
            "name": "__call__",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "LearningRateSchedulerPlateauReduce.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "base_lr": [],
                "reduce_factor": [],
                "reduce_num_not_improved": [],
                "warmup": []
            }
        },
        "LearningRateSchedulerPlateauReduce.new_evaluation_result": {
            "name": "new_evaluation_result",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "has_improved": []
            }
        },
        "LearningRateSchedulerPlateauReduce.__call__": {
            "name": "__call__",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "t": []
            }
        },
        "LearningRateSchedulerPlateauReduce.__repr__": {
            "name": "__repr__",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sockeye-main/sockeye/model.py": {
        "initialize_parameters": {
            "name": "initialize_parameters",
            "location": 574,
            "return": [],
            "arguments": {
                "module": []
            }
        },
        "load_model": {
            "name": "load_model",
            "location": 613,
            "return": [],
            "arguments": {
                "model_folder": [],
                "device": [],
                "dtype": [],
                "checkpoint": [],
                "inference_only": [],
                "train_decoder_only": [],
                "allow_missing": [],
                "set_grad_req_null": [],
                "forward_pass_cache_size": []
            }
        },
        "load_models": {
            "name": "load_models",
            "location": 686,
            "return": [],
            "arguments": {
                "device": [],
                "model_folders": [],
                "checkpoints": [],
                "dtype": [],
                "inference_only": [],
                "train_decoder_only": [],
                "allow_missing": [],
                "set_grad_req_null": [],
                "forward_pass_cache_size": []
            }
        },
        "SockeyeModel.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "inference_only": [],
                "train_decoder_only": [],
                "forward_pass_cache_size": []
            }
        },
        "SockeyeModel.cast": {
            "name": "cast",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "dtype": []
            }
        },
        "SockeyeModel.state_structure": {
            "name": "state_structure",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SockeyeModel.encode": {
            "name": "encode",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "valid_length": []
            }
        },
        "SockeyeModel.encode_and_initialize": {
            "name": "encode_and_initialize",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "valid_length": [],
                "constant_length_ratio": []
            }
        },
        "SockeyeModel._embed_and_encode": {
            "name": "_embed_and_encode",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "source_length": [],
                "target": []
            }
        },
        "SockeyeModel.decode_step": {
            "name": "decode_step",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "step_input": [],
                "states": [],
                "vocab_slice_ids": []
            }
        },
        "SockeyeModel.forward": {
            "name": "forward",
            "location": 280,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "source_length": [],
                "target": [],
                "target_length": []
            }
        },
        "SockeyeModel.predict_output_length": {
            "name": "predict_output_length",
            "location": 308,
            "return": [],
            "arguments": {
                "self": [],
                "source_encoded": [],
                "source_encoded_length": [],
                "constant_length_ratio": []
            }
        },
        "SockeyeModel.save_config": {
            "name": "save_config",
            "location": 325,
            "return": [],
            "arguments": {
                "self": [],
                "folder": []
            }
        },
        "SockeyeModel.load_config": {
            "name": "load_config",
            "location": 336,
            "return": [],
            "arguments": {
                "fname": []
            }
        },
        "SockeyeModel.save_parameters": {
            "name": "save_parameters",
            "location": 347,
            "return": [],
            "arguments": {
                "self": [],
                "fname": []
            }
        },
        "SockeyeModel.load_parameters": {
            "name": "load_parameters",
            "location": 367,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "device": [],
                "allow_missing": [],
                "ignore_extra": []
            }
        },
        "SockeyeModel.set_parameters": {
            "name": "set_parameters",
            "location": 411,
            "return": [],
            "arguments": {
                "self": [],
                "new_params": [],
                "allow_missing": [],
                "ignore_extra": []
            }
        },
        "SockeyeModel.save_version": {
            "name": "save_version",
            "location": 438,
            "return": [],
            "arguments": {
                "folder": []
            }
        },
        "SockeyeModel._get_embeddings": {
            "name": "_get_embeddings",
            "location": 448,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SockeyeModel.num_source_factors": {
            "name": "num_source_factors",
            "location": 478,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SockeyeModel.num_target_factors": {
            "name": "num_target_factors",
            "location": 483,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SockeyeModel.target_factor_configs": {
            "name": "target_factor_configs",
            "location": 488,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SockeyeModel.training_max_observed_len_source": {
            "name": "training_max_observed_len_source",
            "location": 496,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SockeyeModel.training_max_observed_len_target": {
            "name": "training_max_observed_len_target",
            "location": 501,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SockeyeModel.max_supported_len_source": {
            "name": "max_supported_len_source",
            "location": 506,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SockeyeModel.max_supported_len_target": {
            "name": "max_supported_len_target",
            "location": 511,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SockeyeModel.length_ratio_mean": {
            "name": "length_ratio_mean",
            "location": 516,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SockeyeModel.length_ratio_std": {
            "name": "length_ratio_std",
            "location": 520,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SockeyeModel.output_layer_vocab_size": {
            "name": "output_layer_vocab_size",
            "location": 524,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SockeyeModel._cache_wrapper": {
            "name": "_cache_wrapper",
            "location": 527,
            "return": [],
            "arguments": {
                "self": [],
                "class_func": []
            }
        },
        "_DecodeStep.__init__": {
            "name": "__init__",
            "location": 542,
            "return": [],
            "arguments": {
                "self": [],
                "embedding_target": [],
                "decoder": [],
                "output_layer": [],
                "factor_output_layers": []
            }
        },
        "_DecodeStep.forward": {
            "name": "forward",
            "location": 554,
            "return": [],
            "arguments": {
                "self": [],
                "step_input": [],
                "states": [],
                "vocab_slice_ids": []
            }
        },
        "SockeyeModel._cache_wrapper.cache_func": {
            "name": "cache_func",
            "location": 529,
            "return": [],
            "arguments": {}
        }
    },
    "sockeye-main/sockeye/nvs.py": {
        "NeuralVocabSelection.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "model_size": [],
                "vocab_target_size": [],
                "model_type": []
            }
        },
        "NeuralVocabSelection.forward": {
            "name": "forward",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "source_encoded": [],
                "source_length": [],
                "att_mask": []
            }
        }
    },
    "sockeye-main/sockeye/optimizers.py": {
        "get_optimizer": {
            "name": "get_optimizer",
            "location": 50,
            "return": [],
            "arguments": {
                "model": [],
                "config": []
            }
        }
    },
    "sockeye-main/sockeye/output_handler.py": {
        "get_output_handler": {
            "name": "get_output_handler",
            "location": 25,
            "return": [],
            "arguments": {
                "output_type": [],
                "output_fname": []
            }
        },
        "OutputHandler.handle": {
            "name": "handle",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "t_input": [],
                "t_output": [],
                "t_walltime": []
            }
        },
        "OutputHandler.reports_score": {
            "name": "reports_score",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringOutputHandler.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "stream": []
            }
        },
        "StringOutputHandler.handle": {
            "name": "handle",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "t_input": [],
                "t_output": [],
                "t_walltime": []
            }
        },
        "StringOutputHandler.reports_score": {
            "name": "reports_score",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringWithScoreOutputHandler.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "stream": []
            }
        },
        "StringWithScoreOutputHandler.handle": {
            "name": "handle",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "t_input": [],
                "t_output": [],
                "t_walltime": []
            }
        },
        "StringWithScoreOutputHandler.reports_score": {
            "name": "reports_score",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ScoreOutputHandler.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "stream": []
            }
        },
        "ScoreOutputHandler.handle": {
            "name": "handle",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "t_input": [],
                "t_output": [],
                "t_walltime": []
            }
        },
        "ScoreOutputHandler.reports_score": {
            "name": "reports_score",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PairWithScoreOutputHandler.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "stream": []
            }
        },
        "PairWithScoreOutputHandler.handle": {
            "name": "handle",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "t_input": [],
                "t_output": [],
                "t_walltime": []
            }
        },
        "PairWithScoreOutputHandler.reports_score": {
            "name": "reports_score",
            "location": 182,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BenchmarkOutputHandler.handle": {
            "name": "handle",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "t_input": [],
                "t_output": [],
                "t_walltime": []
            }
        },
        "BenchmarkOutputHandler.reports_score": {
            "name": "reports_score",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JSONOutputHandler.__init__": {
            "name": "__init__",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "stream": []
            }
        },
        "JSONOutputHandler.handle": {
            "name": "handle",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "t_input": [],
                "t_output": [],
                "t_walltime": []
            }
        },
        "JSONOutputHandler.reports_score": {
            "name": "reports_score",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FactoredStringOutputHandler.__init__": {
            "name": "__init__",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "stream": []
            }
        },
        "FactoredStringOutputHandler.handle": {
            "name": "handle",
            "location": 244,
            "return": [],
            "arguments": {
                "self": [],
                "t_input": [],
                "t_output": [],
                "t_walltime": []
            }
        },
        "FactoredStringOutputHandler.reports_score": {
            "name": "reports_score",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sockeye-main/sockeye/prepare_data.py": {
        "main": {
            "name": "main",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "prepare_data": {
            "name": "prepare_data",
            "location": 35,
            "return": [],
            "arguments": {
                "args": []
            }
        }
    },
    "sockeye-main/sockeye/rerank.py": {
        "rerank": {
            "name": "rerank",
            "location": 118,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 172,
            "return": [],
            "arguments": {}
        },
        "Reranker.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "metric": [],
                "isometric_alpha": [],
                "return_score": []
            }
        },
        "Reranker.rerank": {
            "name": "rerank",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "hypotheses": [],
                "reference": []
            }
        },
        "Reranker._get_ranking_indices": {
            "name": "_get_ranking_indices",
            "location": 100,
            "return": [],
            "arguments": {
                "scores": [],
                "kind": [],
                "order": []
            }
        },
        "Reranker._sort_by_ranking": {
            "name": "_sort_by_ranking",
            "location": 107,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "ranking": []
            }
        },
        "Reranker._sort_by_ranking.ranksort": {
            "name": "ranksort",
            "location": 108,
            "return": [],
            "arguments": {
                "l": []
            }
        }
    },
    "sockeye-main/sockeye/score.py": {
        "main": {
            "name": "main",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "score": {
            "name": "score",
            "location": 46,
            "return": [],
            "arguments": {
                "args": []
            }
        }
    },
    "sockeye-main/sockeye/scoring.py": {
        "BatchScorer.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "scorer": [],
                "score_type": [],
                "constant_length_ratio": [],
                "softmax_temperature": []
            }
        },
        "BatchScorer.forward": {
            "name": "forward",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "logits": [],
                "labels": [],
                "length_ratio": [],
                "source_length": [],
                "target_length": [],
                "factor_logits_and_labels": []
            }
        },
        "Scorer.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "batch_scorer": [],
                "source_vocabs": [],
                "target_vocabs": [],
                "device": []
            }
        },
        "Scorer.score_batch": {
            "name": "score_batch",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "batch": []
            }
        },
        "Scorer.score": {
            "name": "score",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "score_iter": [],
                "output_handler": []
            }
        }
    },
    "sockeye-main/sockeye/test_utils.py": {
        "generate_digits_file": {
            "name": "generate_digits_file",
            "location": 37,
            "return": [],
            "arguments": {
                "source_path": [],
                "target_path": [],
                "line_count": [],
                "line_length": [],
                "sort_target": [],
                "line_count_empty": [],
                "seed": []
            }
        },
        "generate_json_input_file_with_tgt_prefix": {
            "name": "generate_json_input_file_with_tgt_prefix",
            "location": 61,
            "return": [],
            "arguments": {
                "src_path": [],
                "tgt_path": [],
                "json_file_with_tgt_prefix_path": [],
                "src_factors_path": [],
                "tgt_factors_path": [],
                "seed": []
            }
        },
        "generate_low_high_factors": {
            "name": "generate_low_high_factors",
            "location": 105,
            "return": [],
            "arguments": {
                "input_path": [],
                "output_path": []
            }
        },
        "generate_odd_even_factors": {
            "name": "generate_odd_even_factors",
            "location": 116,
            "return": [],
            "arguments": {
                "input_path": [],
                "output_path": []
            }
        },
        "generate_fast_align_lex": {
            "name": "generate_fast_align_lex",
            "location": 127,
            "return": [],
            "arguments": {
                "lex_path": []
            }
        },
        "tmp_digits_dataset": {
            "name": "tmp_digits_dataset",
            "location": 142,
            "return": [],
            "arguments": {
                "prefix": [],
                "train_line_count": [],
                "train_line_count_empty": [],
                "train_max_length": [],
                "dev_line_count": [],
                "dev_max_length": [],
                "test_line_count": [],
                "test_line_count_empty": [],
                "test_max_length": [],
                "sort_target": [],
                "seed_train": [],
                "seed_dev": [],
                "with_n_source_factors": [],
                "with_n_target_factors": []
            }
        },
        "run_train_translate": {
            "name": "run_train_translate",
            "location": 246,
            "return": [],
            "arguments": {
                "train_params": [],
                "translate_params": [],
                "data": [],
                "use_prepared_data": [],
                "max_seq_len": [],
                "seed": []
            }
        },
        "run_translate_restrict": {
            "name": "run_translate_restrict",
            "location": 389,
            "return": [],
            "arguments": {
                "data": [],
                "translate_params": []
            }
        },
        "collect_translate_output_and_scores": {
            "name": "collect_translate_output_and_scores",
            "location": 431,
            "return": [],
            "arguments": {
                "out_path": []
            }
        }
    },
    "sockeye-main/sockeye/train.py": {
        "none_if_negative": {
            "name": "none_if_negative",
            "location": 56,
            "return": [],
            "arguments": {
                "val": []
            }
        },
        "_list_to_tuple": {
            "name": "_list_to_tuple",
            "location": 60,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "_dict_difference": {
            "name": "_dict_difference",
            "location": 67,
            "return": [],
            "arguments": {
                "dict1": [],
                "dict2": []
            }
        },
        "check_arg_compatibility": {
            "name": "check_arg_compatibility",
            "location": 77,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "check_resume": {
            "name": "check_resume",
            "location": 135,
            "return": [],
            "arguments": {
                "args": [],
                "output_folder": []
            }
        },
        "create_checkpoint_decoder": {
            "name": "create_checkpoint_decoder",
            "location": 183,
            "return": [],
            "arguments": {
                "args": [],
                "device": [],
                "sockeye_model": [],
                "source_vocabs": [],
                "target_vocabs": []
            }
        },
        "use_shared_vocab": {
            "name": "use_shared_vocab",
            "location": 222,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "create_data_iters_and_vocabs": {
            "name": "create_data_iters_and_vocabs",
            "location": 238,
            "return": [],
            "arguments": {
                "args": [],
                "max_seq_len_source": [],
                "max_seq_len_target": [],
                "shared_vocab": [],
                "resume_training": [],
                "output_folder": []
            }
        },
        "create_encoder_config": {
            "name": "create_encoder_config",
            "location": 410,
            "return": [],
            "arguments": {
                "args": [],
                "max_seq_len_source": [],
                "max_seq_len_target": [],
                "num_embed_source": []
            }
        },
        "create_decoder_config": {
            "name": "create_decoder_config",
            "location": 461,
            "return": [],
            "arguments": {
                "args": [],
                "encoder_num_hidden": [],
                "max_seq_len_source": [],
                "max_seq_len_target": [],
                "num_embed_target": []
            }
        },
        "get_num_embed": {
            "name": "get_num_embed",
            "location": 513,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "create_model_config": {
            "name": "create_model_config",
            "location": 579,
            "return": [],
            "arguments": {
                "args": [],
                "source_vocab_sizes": [],
                "target_vocab_sizes": [],
                "max_seq_len_source": [],
                "max_seq_len_target": [],
                "config_data": []
            }
        },
        "create_losses": {
            "name": "create_losses",
            "location": 688,
            "return": [],
            "arguments": {
                "args": [],
                "all_num_classes": []
            }
        },
        "create_optimizer_config": {
            "name": "create_optimizer_config",
            "location": 743,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "unset_requires_grad_for_fixed_params": {
            "name": "unset_requires_grad_for_fixed_params",
            "location": 786,
            "return": [],
            "arguments": {
                "config": [],
                "params": [],
                "fixed_param_names": [],
                "fixed_param_strategy": []
            }
        },
        "fixed_param_names_from_strategy": {
            "name": "fixed_param_names_from_strategy",
            "location": 807,
            "return": [],
            "arguments": {
                "config": [],
                "params": [],
                "strategy": []
            }
        },
        "main": {
            "name": "main",
            "location": 854,
            "return": [],
            "arguments": {}
        },
        "train": {
            "name": "train",
            "location": 862,
            "return": [],
            "arguments": {
                "args": [],
                "custom_metrics_logger": [],
                "checkpoint_callback": []
            }
        },
        "fixed_param_names_from_strategy.is_fixed": {
            "name": "is_fixed",
            "location": 818,
            "return": [],
            "arguments": {
                "name": []
            }
        }
    },
    "sockeye-main/sockeye/training.py": {
        "safe_custom_metrics_logger": {
            "name": "safe_custom_metrics_logger",
            "location": 869,
            "return": [],
            "arguments": {
                "logging_function": [],
                "metrics": [],
                "global_step": []
            }
        },
        "cleanup_params_files": {
            "name": "cleanup_params_files",
            "location": 887,
            "return": [],
            "arguments": {
                "output_folder": [],
                "max_to_keep": [],
                "checkpoint": [],
                "best_checkpoint": [],
                "keep_first": [],
                "max_params_files_to_cache": [],
                "cache_metric": [],
                "cache_strategy": []
            }
        },
        "TrainState.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "early_stopping_metric": []
            }
        },
        "TrainState.save": {
            "name": "save",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "fname": []
            }
        },
        "TrainState.load": {
            "name": "load",
            "location": 119,
            "return": [],
            "arguments": {
                "fname": []
            }
        },
        "TrainState.update_time_elapsed": {
            "name": "update_time_elapsed",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainState.time_elapsed": {
            "name": "time_elapsed",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainState.__getstate__": {
            "name": "__getstate__",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TrainState.__setstate__": {
            "name": "__setstate__",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "EarlyStoppingTrainer.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "optimizer_config": [],
                "sockeye_model": [],
                "training_model": [],
                "optimizer": [],
                "zero_grad_kwargs": [],
                "loss_functions": [],
                "device": [],
                "using_amp": [],
                "using_apex_amp": [],
                "custom_metrics_logger": [],
                "checkpoint_callback": []
            }
        },
        "EarlyStoppingTrainer.fit": {
            "name": "fit",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "train_iter": [],
                "validation_iter": [],
                "checkpoint_decoder": []
            }
        },
        "EarlyStoppingTrainer._create_checkpoint": {
            "name": "_create_checkpoint",
            "location": 272,
            "return": [],
            "arguments": {
                "self": [],
                "checkpoint_decoder": [],
                "time_cost": [],
                "train_iter": [],
                "validation_iter": []
            }
        },
        "EarlyStoppingTrainer._forward_backward": {
            "name": "_forward_backward",
            "location": 308,
            "return": [],
            "arguments": {
                "self": [],
                "batch": [],
                "is_update_batch": []
            }
        },
        "EarlyStoppingTrainer._step": {
            "name": "_step",
            "location": 340,
            "return": [],
            "arguments": {
                "self": [],
                "batch": []
            }
        },
        "EarlyStoppingTrainer._evaluate": {
            "name": "_evaluate",
            "location": 388,
            "return": [],
            "arguments": {
                "self": [],
                "checkpoint": [],
                "data_iter": [],
                "checkpoint_decoder": []
            }
        },
        "EarlyStoppingTrainer._determine_improvement": {
            "name": "_determine_improvement",
            "location": 436,
            "return": [],
            "arguments": {
                "self": [],
                "val_metrics": []
            }
        },
        "EarlyStoppingTrainer._determine_convergence": {
            "name": "_determine_convergence",
            "location": 482,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EarlyStoppingTrainer._determine_divergence": {
            "name": "_determine_divergence",
            "location": 526,
            "return": [],
            "arguments": {
                "self": [],
                "val_metrics": []
            }
        },
        "EarlyStoppingTrainer._adjust_learning_rate": {
            "name": "_adjust_learning_rate",
            "location": 542,
            "return": [],
            "arguments": {
                "self": [],
                "has_improved": []
            }
        },
        "EarlyStoppingTrainer._write_and_log_metrics": {
            "name": "_write_and_log_metrics",
            "location": 563,
            "return": [],
            "arguments": {
                "self": [],
                "train_metrics": [],
                "val_metrics": []
            }
        },
        "EarlyStoppingTrainer._update_best_params": {
            "name": "_update_best_params",
            "location": 591,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EarlyStoppingTrainer._save_params": {
            "name": "_save_params",
            "location": 601,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EarlyStoppingTrainer._save_optimizer_state": {
            "name": "_save_optimizer_state",
            "location": 611,
            "return": [],
            "arguments": {
                "self": [],
                "fname": []
            }
        },
        "EarlyStoppingTrainer._load_optimizer_state": {
            "name": "_load_optimizer_state",
            "location": 615,
            "return": [],
            "arguments": {
                "self": [],
                "fname": []
            }
        },
        "EarlyStoppingTrainer._save_lr_scheduler": {
            "name": "_save_lr_scheduler",
            "location": 619,
            "return": [],
            "arguments": {
                "self": [],
                "fname": []
            }
        },
        "EarlyStoppingTrainer._load_lr_scheduler": {
            "name": "_load_lr_scheduler",
            "location": 625,
            "return": [],
            "arguments": {
                "self": [],
                "fname": []
            }
        },
        "EarlyStoppingTrainer._save_training_state": {
            "name": "_save_training_state",
            "location": 631,
            "return": [],
            "arguments": {
                "self": [],
                "train_iter": []
            }
        },
        "EarlyStoppingTrainer._load_training_state": {
            "name": "_load_training_state",
            "location": 691,
            "return": [],
            "arguments": {
                "self": [],
                "train_iter": []
            }
        },
        "EarlyStoppingTrainer._cleanup": {
            "name": "_cleanup",
            "location": 733,
            "return": [],
            "arguments": {
                "self": [],
                "keep_training_state": []
            }
        },
        "EarlyStoppingTrainer.metrics_fname": {
            "name": "metrics_fname",
            "location": 751,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EarlyStoppingTrainer.current_params_fname": {
            "name": "current_params_fname",
            "location": 755,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EarlyStoppingTrainer.best_params_fname": {
            "name": "best_params_fname",
            "location": 759,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EarlyStoppingTrainer.training_state_dirname": {
            "name": "training_state_dirname",
            "location": 763,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EarlyStoppingTrainer.best_optimizer_state_fname": {
            "name": "best_optimizer_state_fname",
            "location": 767,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EarlyStoppingTrainer.best_lr_scheduler_fname": {
            "name": "best_lr_scheduler_fname",
            "location": 771,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TensorboardLogger.__init__": {
            "name": "__init__",
            "location": 785,
            "return": [],
            "arguments": {
                "self": [],
                "logdir": [],
                "source_vocab": [],
                "target_vocab": []
            }
        },
        "TensorboardLogger.log_metrics": {
            "name": "log_metrics",
            "location": 800,
            "return": [],
            "arguments": {
                "self": [],
                "metrics": [],
                "checkpoint": []
            }
        },
        "Speedometer.__init__": {
            "name": "__init__",
            "location": 822,
            "return": [],
            "arguments": {
                "self": [],
                "frequency": [],
                "auto_reset": []
            }
        },
        "Speedometer.__call__": {
            "name": "__call__",
            "location": 832,
            "return": [],
            "arguments": {
                "self": [],
                "epoch": [],
                "batches": [],
                "updates": [],
                "samples": [],
                "tokens": [],
                "metrics": []
            }
        }
    },
    "sockeye-main/sockeye/transformer.py": {
        "TransformerEncoderBlock.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "inference_only": []
            }
        },
        "TransformerEncoderBlock.forward": {
            "name": "forward",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "att_mask": []
            }
        },
        "TransformerDecoderBlock.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "inference_only": []
            }
        },
        "TransformerDecoderBlock.num_state_tensors": {
            "name": "num_state_tensors",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransformerDecoderBlock.needs_mask": {
            "name": "needs_mask",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TransformerDecoderBlock.get_states_shape": {
            "name": "get_states_shape",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "batch_size": []
            }
        },
        "TransformerDecoderBlock.forward": {
            "name": "forward",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "target": [],
                "target_mask": [],
                "source": [],
                "source_mask": [],
                "autoregr_states": [],
                "enc_att_kv": []
            }
        },
        "TransformerProcessBlock.__init__": {
            "name": "__init__",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "sequence": [],
                "dropout": [],
                "num_hidden": []
            }
        },
        "TransformerProcessBlock.forward": {
            "name": "forward",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "prev": []
            }
        },
        "TransformerFeedForward.__init__": {
            "name": "__init__",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "num_hidden": [],
                "num_model": [],
                "act_type": [],
                "dropout": [],
                "use_glu": [],
                "inference_only": []
            }
        },
        "TransformerFeedForward.forward": {
            "name": "forward",
            "location": 288,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "AutoRegressiveMask.forward": {
            "name": "forward",
            "location": 301,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        }
    },
    "sockeye-main/sockeye/translate.py": {
        "main": {
            "name": "main",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "run_translate": {
            "name": "run_translate",
            "location": 46,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "make_inputs": {
            "name": "make_inputs",
            "location": 153,
            "return": [],
            "arguments": {
                "input_file": [],
                "translator": [],
                "input_is_json": [],
                "input_factors": []
            }
        },
        "read_and_translate": {
            "name": "read_and_translate",
            "location": 198,
            "return": [],
            "arguments": {
                "translator": [],
                "output_handler": [],
                "chunk_size": [],
                "input_file": [],
                "input_factors": [],
                "input_is_json": []
            }
        },
        "translate": {
            "name": "translate",
            "location": 242,
            "return": [],
            "arguments": {
                "output_handler": [],
                "trans_inputs": [],
                "translator": []
            }
        }
    },
    "sockeye-main/sockeye/utils.py": {
        "check_version": {
            "name": "check_version",
            "location": 46,
            "return": [],
            "arguments": {
                "version": []
            }
        },
        "load_version": {
            "name": "load_version",
            "location": 66,
            "return": [],
            "arguments": {
                "fname": []
            }
        },
        "parse_version": {
            "name": "parse_version",
            "location": 80,
            "return": [],
            "arguments": {
                "version_string": []
            }
        },
        "log_basic_info": {
            "name": "log_basic_info",
            "location": 91,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "seed_rngs": {
            "name": "seed_rngs",
            "location": 103,
            "return": [],
            "arguments": {
                "seed": []
            }
        },
        "check_condition": {
            "name": "check_condition",
            "location": 120,
            "return": [],
            "arguments": {
                "condition": [],
                "error_message": []
            }
        },
        "chunks": {
            "name": "chunks",
            "location": 166,
            "return": [],
            "arguments": {
                "some_list": [],
                "n": []
            }
        },
        "get_tokens": {
            "name": "get_tokens",
            "location": 172,
            "return": [],
            "arguments": {
                "line": []
            }
        },
        "is_gzip_file": {
            "name": "is_gzip_file",
            "location": 184,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "smart_open": {
            "name": "smart_open",
            "location": 190,
            "return": [],
            "arguments": {
                "filename": [],
                "mode": [],
                "ftype": [],
                "errors": []
            }
        },
        "combine_means": {
            "name": "combine_means",
            "location": 220,
            "return": [],
            "arguments": {
                "means": [],
                "num_sents": []
            }
        },
        "combine_stds": {
            "name": "combine_stds",
            "location": 234,
            "return": [],
            "arguments": {
                "stds": [],
                "means": [],
                "num_sents": []
            }
        },
        "average_tensors": {
            "name": "average_tensors",
            "location": 252,
            "return": [],
            "arguments": {
                "tensors": []
            }
        },
        "gen_prefix_masking": {
            "name": "gen_prefix_masking",
            "location": 267,
            "return": [],
            "arguments": {
                "prefix": [],
                "vocab_size": [],
                "dtype": []
            }
        },
        "shift_prefix_factors": {
            "name": "shift_prefix_factors",
            "location": 311,
            "return": [],
            "arguments": {
                "prefix_factors": []
            }
        },
        "adjust_first_step_masking": {
            "name": "adjust_first_step_masking",
            "location": 324,
            "return": [],
            "arguments": {
                "target_prefix": [],
                "first_step_mask": []
            }
        },
        "parse_metrics_line": {
            "name": "parse_metrics_line",
            "location": 414,
            "return": [],
            "arguments": {
                "line_number": [],
                "line": []
            }
        },
        "read_metrics_file": {
            "name": "read_metrics_file",
            "location": 438,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "write_metrics_file": {
            "name": "write_metrics_file",
            "location": 450,
            "return": [],
            "arguments": {
                "metrics": [],
                "path": []
            }
        },
        "get_validation_metric_points": {
            "name": "get_validation_metric_points",
            "location": 463,
            "return": [],
            "arguments": {
                "model_path": [],
                "metric": []
            }
        },
        "grouper": {
            "name": "grouper",
            "location": 475,
            "return": [],
            "arguments": {
                "iterable": [],
                "size": []
            }
        },
        "metric_value_is_better": {
            "name": "metric_value_is_better",
            "location": 491,
            "return": [],
            "arguments": {
                "new": [],
                "old": [],
                "metric": []
            }
        },
        "_print_dtype": {
            "name": "_print_dtype",
            "location": 513,
            "return": [],
            "arguments": {
                "dtype": []
            }
        },
        "log_parameters": {
            "name": "log_parameters",
            "location": 517,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "no_context": {
            "name": "no_context",
            "location": 555,
            "return": [],
            "arguments": {}
        },
        "create_pool": {
            "name": "create_pool",
            "location": 577,
            "return": [],
            "arguments": {
                "max_processes": []
            }
        },
        "is_distributed": {
            "name": "is_distributed",
            "location": 584,
            "return": [],
            "arguments": {}
        },
        "is_primary_worker": {
            "name": "is_primary_worker",
            "location": 588,
            "return": [],
            "arguments": {}
        },
        "get_local_rank": {
            "name": "get_local_rank",
            "location": 596,
            "return": [],
            "arguments": {}
        },
        "broadcast_object": {
            "name": "broadcast_object",
            "location": 603,
            "return": [],
            "arguments": {
                "obj": [],
                "src": []
            }
        },
        "all_gather_object": {
            "name": "all_gather_object",
            "location": 613,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "count_seq_len": {
            "name": "count_seq_len",
            "location": 620,
            "return": [],
            "arguments": {
                "sample": [],
                "count_type": [],
                "replace_tokens": []
            }
        },
        "compute_isometric_score": {
            "name": "compute_isometric_score",
            "location": 636,
            "return": [],
            "arguments": {
                "hypothesis": [],
                "hypothesis_score": [],
                "source": [],
                "isometric_metric": [],
                "isometric_alpha": []
            }
        },
        "OnlineMeanAndVariance.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OnlineMeanAndVariance.update": {
            "name": "update",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "OnlineMeanAndVariance.count": {
            "name": "count",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OnlineMeanAndVariance.mean": {
            "name": "mean",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OnlineMeanAndVariance.variance": {
            "name": "variance",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OnlineMeanAndVariance.std": {
            "name": "std",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SingleProcessPool.map": {
            "name": "map",
            "location": 564,
            "return": [],
            "arguments": {
                "self": [],
                "func": [],
                "iterable": []
            }
        },
        "SingleProcessPool.starmap": {
            "name": "starmap",
            "location": 567,
            "return": [],
            "arguments": {
                "self": [],
                "func": [],
                "iterable": []
            }
        },
        "SingleProcessPool.__enter__": {
            "name": "__enter__",
            "location": 570,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SingleProcessPool.__exit__": {
            "name": "__exit__",
            "location": 573,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_val": [],
                "exc_tb": []
            }
        }
    },
    "sockeye-main/sockeye/vocab.py": {
        "count_tokens_for_path": {
            "name": "count_tokens_for_path",
            "location": 33,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "build_from_paths": {
            "name": "build_from_paths",
            "location": 42,
            "return": [],
            "arguments": {
                "paths": [],
                "num_words": [],
                "min_count": [],
                "pad_to_multiple_of": [],
                "mapper": []
            }
        },
        "build_vocab": {
            "name": "build_vocab",
            "location": 66,
            "return": [],
            "arguments": {
                "data": [],
                "num_words": [],
                "min_count": [],
                "pad_to_multiple_of": []
            }
        },
        "build_pruned_vocab": {
            "name": "build_pruned_vocab",
            "location": 86,
            "return": [],
            "arguments": {
                "raw_vocab": [],
                "num_words": [],
                "min_count": [],
                "pad_to_multiple_of": []
            }
        },
        "count_tokens": {
            "name": "count_tokens",
            "location": 134,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "vocab_to_json": {
            "name": "vocab_to_json",
            "location": 144,
            "return": [],
            "arguments": {
                "vocab": [],
                "path": []
            }
        },
        "is_valid_vocab": {
            "name": "is_valid_vocab",
            "location": 156,
            "return": [],
            "arguments": {
                "vocab": []
            }
        },
        "vocab_from_json": {
            "name": "vocab_from_json",
            "location": 190,
            "return": [],
            "arguments": {
                "path": [],
                "encoding": []
            }
        },
        "save_source_vocabs": {
            "name": "save_source_vocabs",
            "location": 205,
            "return": [],
            "arguments": {
                "source_vocabs": [],
                "folder": []
            }
        },
        "save_target_vocabs": {
            "name": "save_target_vocabs",
            "location": 216,
            "return": [],
            "arguments": {
                "target_vocabs": [],
                "folder": []
            }
        },
        "_get_sorted_source_vocab_fnames": {
            "name": "_get_sorted_source_vocab_fnames",
            "location": 227,
            "return": [],
            "arguments": {
                "folder": []
            }
        },
        "_get_sorted_target_vocab_fnames": {
            "name": "_get_sorted_target_vocab_fnames",
            "location": 232,
            "return": [],
            "arguments": {
                "folder": []
            }
        },
        "load_source_vocabs": {
            "name": "load_source_vocabs",
            "location": 237,
            "return": [],
            "arguments": {
                "folder": []
            }
        },
        "load_target_vocabs": {
            "name": "load_target_vocabs",
            "location": 248,
            "return": [],
            "arguments": {
                "folder": []
            }
        },
        "load_or_create_vocab": {
            "name": "load_or_create_vocab",
            "location": 259,
            "return": [],
            "arguments": {
                "data": [],
                "vocab_path": [],
                "num_words": [],
                "word_min_count": [],
                "pad_to_multiple_of": [],
                "mapper": []
            }
        },
        "load_or_create_vocabs": {
            "name": "load_or_create_vocabs",
            "location": 273,
            "return": [],
            "arguments": {
                "shard_source_paths": [],
                "shard_target_paths": [],
                "source_vocab_paths": [],
                "source_factor_vocab_same_as_source": [],
                "target_vocab_paths": [],
                "target_factor_vocab_same_as_target": [],
                "shared_vocab": [],
                "num_words_source": [],
                "word_min_count_source": [],
                "num_words_target": [],
                "word_min_count_target": [],
                "pad_to_multiple_of": [],
                "mapper": []
            }
        },
        "reverse_vocab": {
            "name": "reverse_vocab",
            "location": 401,
            "return": [],
            "arguments": {
                "vocab": []
            }
        },
        "get_ordered_tokens_from_vocab": {
            "name": "get_ordered_tokens_from_vocab",
            "location": 411,
            "return": [],
            "arguments": {
                "vocab": []
            }
        },
        "are_identical": {
            "name": "are_identical",
            "location": 421,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 426,
            "return": [],
            "arguments": {}
        },
        "prepare_vocab": {
            "name": "prepare_vocab",
            "location": 435,
            "return": [],
            "arguments": {
                "args": []
            }
        }
    },
    "sockeye-main/sockeye/__init__.py": {},
    "sockeye-main/sockeye_contrib/plot_metrics.py": {
        "ax_label": {
            "name": "ax_label",
            "location": 58,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "read_metrics_file": {
            "name": "read_metrics_file",
            "location": 64,
            "return": [],
            "arguments": {
                "fname": []
            }
        },
        "average_points": {
            "name": "average_points",
            "location": 76,
            "return": [],
            "arguments": {
                "points": [],
                "num_points": [],
                "cmp": []
            }
        },
        "points_since_improvement": {
            "name": "points_since_improvement",
            "location": 86,
            "return": [],
            "arguments": {
                "points": [],
                "cmp": []
            }
        },
        "window_improvement": {
            "name": "window_improvement",
            "location": 99,
            "return": [],
            "arguments": {
                "points": [],
                "num_points": [],
                "cmp": []
            }
        },
        "slope": {
            "name": "slope",
            "location": 115,
            "return": [],
            "arguments": {
                "points": [],
                "num_points": []
            }
        },
        "plot_metrics": {
            "name": "plot_metrics",
            "location": 125,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 231,
            "return": [],
            "arguments": {}
        }
    },
    "sockeye-main/sockeye_contrib/rouge.py": {
        "_get_ngrams": {
            "name": "_get_ngrams",
            "location": 32,
            "return": [],
            "arguments": {
                "n": [],
                "text": []
            }
        },
        "_split_into_words": {
            "name": "_split_into_words",
            "location": 50,
            "return": [],
            "arguments": {
                "sentences": []
            }
        },
        "_get_word_ngrams": {
            "name": "_get_word_ngrams",
            "location": 55,
            "return": [],
            "arguments": {
                "n": [],
                "sentences": []
            }
        },
        "_len_lcs": {
            "name": "_len_lcs",
            "location": 65,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "_lcs": {
            "name": "_lcs",
            "location": 83,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "_recon_lcs": {
            "name": "_recon_lcs",
            "location": 110,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "rouge_n": {
            "name": "rouge_n",
            "location": 140,
            "return": [],
            "arguments": {
                "evaluated_sentences": [],
                "reference_sentences": [],
                "n": []
            }
        },
        "_f_p_r_lcs": {
            "name": "_f_p_r_lcs",
            "location": 186,
            "return": [],
            "arguments": {
                "llcs": [],
                "m": [],
                "n": []
            }
        },
        "rouge_l_sentence_level": {
            "name": "rouge_l_sentence_level",
            "location": 209,
            "return": [],
            "arguments": {
                "evaluated_sentences": [],
                "reference_sentences": []
            }
        },
        "_union_lcs": {
            "name": "_union_lcs",
            "location": 246,
            "return": [],
            "arguments": {
                "evaluated_sentences": [],
                "reference_sentence": []
            }
        },
        "rouge_l_summary_level": {
            "name": "rouge_l_summary_level",
            "location": 283,
            "return": [],
            "arguments": {
                "evaluated_sentences": [],
                "reference_sentences": []
            }
        },
        "rouge": {
            "name": "rouge",
            "location": 327,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": []
            }
        },
        "rouge_1": {
            "name": "rouge_1",
            "location": 368,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": []
            }
        },
        "rouge_2": {
            "name": "rouge_2",
            "location": 379,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": []
            }
        },
        "rouge_l": {
            "name": "rouge_l",
            "location": 390,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": []
            }
        },
        "_recon_lcs._recon": {
            "name": "_recon",
            "location": 125,
            "return": [],
            "arguments": {
                "i": [],
                "j": []
            }
        }
    },
    "sockeye-main/sockeye_contrib/__init__.py": {},
    "sockeye-main/sockeye_contrib/benchmark/benchmark_to_output.py": {
        "read_benchmark_handler_output": {
            "name": "read_benchmark_handler_output",
            "location": 20,
            "return": [],
            "arguments": {
                "stream": []
            }
        },
        "get_output_from_benchmark_output": {
            "name": "get_output_from_benchmark_output",
            "location": 27,
            "return": [],
            "arguments": {
                "input_stream": []
            }
        },
        "main": {
            "name": "main",
            "location": 32,
            "return": [],
            "arguments": {}
        }
    },
    "sockeye-main/sockeye_contrib/benchmark/benchmark_to_percentiles.py": {
        "read_benchmark_handler_output": {
            "name": "read_benchmark_handler_output",
            "location": 20,
            "return": [],
            "arguments": {
                "stream": []
            }
        },
        "compute_percentiles": {
            "name": "compute_percentiles",
            "location": 27,
            "return": [],
            "arguments": {
                "lengths": [],
                "length_percentile": [],
                "times": [],
                "time_percentile": []
            }
        },
        "percentiles_from_benchmark_output": {
            "name": "percentiles_from_benchmark_output",
            "location": 41,
            "return": [],
            "arguments": {
                "input_stream": [],
                "length_percentile": [],
                "time_percentile": []
            }
        },
        "main": {
            "name": "main",
            "location": 50,
            "return": [],
            "arguments": {}
        }
    },
    "sockeye-main/sockeye_contrib/vistools/generate_graphs.py": {
        "_add_graph_level": {
            "name": "_add_graph_level",
            "location": 80,
            "return": [],
            "arguments": {
                "graph": [],
                "level": [],
                "parent_ids": [],
                "names": [],
                "scores": [],
                "normalized_scores": [],
                "include_pad": []
            }
        },
        "create_graph": {
            "name": "create_graph",
            "location": 99,
            "return": [],
            "arguments": {
                "predicted_ids": [],
                "parent_ids": [],
                "scores": [],
                "normalized_scores": [],
                "include_pad": []
            }
        },
        "generate": {
            "name": "generate",
            "location": 110,
            "return": [],
            "arguments": {
                "input_data": [],
                "output_dir": [],
                "include_pad": []
            }
        },
        "main": {
            "name": "main",
            "location": 141,
            "return": [],
            "arguments": {}
        }
    },
    "sockeye-main/sockeye_contrib/vistools/test/test_integration.py": {
        "test_beam_generation": {
            "name": "test_beam_generation",
            "location": 25,
            "return": [],
            "arguments": {
                "beams": [],
                "expected_output": [],
                "tmpdir": []
            }
        }
    },
    "sockeye-main/sockeye_contrib/vistools/test/__init__.py": {},
    "sockeye-main/test/common.py": {
        "check_train_translate": {
            "name": "check_train_translate",
            "location": 33,
            "return": [],
            "arguments": {
                "train_params": [],
                "translate_params": [],
                "data": [],
                "use_prepared_data": [],
                "max_seq_len": [],
                "compare_output": [],
                "seed": []
            }
        },
        "test_translate_equivalence": {
            "name": "test_translate_equivalence",
            "location": 83,
            "return": [],
            "arguments": {
                "data": [],
                "translate_params_equiv": [],
                "compare_output": []
            }
        },
        "test_scoring": {
            "name": "test_scoring",
            "location": 151,
            "return": [],
            "arguments": {
                "data": [],
                "translate_params": [],
                "test_similar_scores": []
            }
        },
        "_translate_output_is_valid": {
            "name": "_translate_output_is_valid",
            "location": 261,
            "return": [],
            "arguments": {
                "translate_outputs": []
            }
        },
        "test_odd_even_target_factors": {
            "name": "test_odd_even_target_factors",
            "location": 277,
            "return": [],
            "arguments": {
                "data": []
            }
        }
    },
    "sockeye-main/test/__init__.py": {},
    "sockeye-main/test/integration/test_backwards_compatibility.py": {
        "test_backwards_compatibility": {
            "name": "test_backwards_compatibility",
            "location": 38,
            "return": [],
            "arguments": {}
        }
    },
    "sockeye-main/test/integration/test_seq_copy_int.py": {
        "test_seq_copy": {
            "name": "test_seq_copy",
            "location": 146,
            "return": [],
            "arguments": {
                "train_params": [],
                "translate_params": [],
                "use_prepared_data": [],
                "n_source_factors": [],
                "n_target_factors": []
            }
        },
        "test_other_clis": {
            "name": "test_other_clis",
            "location": 185,
            "return": [],
            "arguments": {
                "train_params": [],
                "translate_params": []
            }
        },
        "_test_evaluate_cli": {
            "name": "_test_evaluate_cli",
            "location": 209,
            "return": [],
            "arguments": {
                "test_outputs": [],
                "test_target_path": []
            }
        },
        "_test_parameter_averaging": {
            "name": "_test_parameter_averaging",
            "location": 229,
            "return": [],
            "arguments": {
                "model_path": []
            }
        },
        "_test_checkpoint_decoder": {
            "name": "_test_checkpoint_decoder",
            "location": 243,
            "return": [],
            "arguments": {
                "dev_source_path": [],
                "dev_target_path": [],
                "model_path": []
            }
        }
    },
    "sockeye-main/test/integration/__init__.py": {},
    "sockeye-main/test/system/test_seq_copy_sys.py": {
        "test_seq_copy": {
            "name": "test_seq_copy",
            "location": 111,
            "return": [],
            "arguments": {
                "name": [],
                "train_params": [],
                "translate_params": [],
                "use_prepared_data": [],
                "perplexity_thresh": [],
                "bleu_thresh": []
            }
        },
        "test_seq_sort": {
            "name": "test_seq_sort",
            "location": 199,
            "return": [],
            "arguments": {
                "name": [],
                "train_params": [],
                "translate_params": [],
                "use_prepared_data": [],
                "n_source_factors": [],
                "n_target_factors": [],
                "perplexity_thresh": [],
                "bleu_thresh": []
            }
        }
    },
    "sockeye-main/test/system/__init__.py": {},
    "sockeye-main/test/unit/test_arguments.py": {
        "test_simple_dict": {
            "name": "test_simple_dict",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_io_args": {
            "name": "test_io_args",
            "location": 73,
            "return": [],
            "arguments": {
                "test_params": [],
                "expected_params": []
            }
        },
        "test_logging_args": {
            "name": "test_logging_args",
            "location": 84,
            "return": [],
            "arguments": {
                "test_params": [],
                "expected_params": []
            }
        },
        "test_device_args": {
            "name": "test_device_args",
            "location": 97,
            "return": [],
            "arguments": {
                "test_params": [],
                "expected_params": []
            }
        },
        "test_model_parameters": {
            "name": "test_model_parameters",
            "location": 131,
            "return": [],
            "arguments": {
                "test_params": [],
                "expected_params": []
            }
        },
        "test_inference_args": {
            "name": "test_inference_args",
            "location": 169,
            "return": [],
            "arguments": {
                "test_params": [],
                "expected_params": []
            }
        },
        "test_training_arg": {
            "name": "test_training_arg",
            "location": 229,
            "return": [],
            "arguments": {
                "test_params": [],
                "expected_params": []
            }
        },
        "test_tutorial_translate_args": {
            "name": "test_tutorial_translate_args",
            "location": 249,
            "return": [],
            "arguments": {
                "test_params": [],
                "expected_params": [],
                "expected_params_present": []
            }
        },
        "test_tutorial_averaging_args": {
            "name": "test_tutorial_averaging_args",
            "location": 260,
            "return": [],
            "arguments": {
                "test_params": [],
                "expected_params": [],
                "expected_params_present": []
            }
        },
        "test_tutorial_prepare_data_cli_args": {
            "name": "test_tutorial_prepare_data_cli_args",
            "location": 295,
            "return": [],
            "arguments": {
                "test_params": [],
                "expected_params": []
            }
        },
        "test_prepare_data_cli_args": {
            "name": "test_prepare_data_cli_args",
            "location": 329,
            "return": [],
            "arguments": {
                "test_params": [],
                "expected_params": []
            }
        },
        "_create_argument_values_that_must_be_files_or_dirs": {
            "name": "_create_argument_values_that_must_be_files_or_dirs",
            "location": 333,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "_delete_argument_values_that_must_be_files_or_dirs": {
            "name": "_delete_argument_values_that_must_be_files_or_dirs",
            "location": 360,
            "return": [],
            "arguments": {
                "to_unlink": []
            }
        },
        "_test_args": {
            "name": "_test_args",
            "location": 371,
            "return": [],
            "arguments": {
                "test_params": [],
                "expected_params": [],
                "args_func": []
            }
        },
        "_test_args_subset": {
            "name": "_test_args_subset",
            "location": 382,
            "return": [],
            "arguments": {
                "test_params": [],
                "expected_params": [],
                "expected_params_present": [],
                "args_func": []
            }
        },
        "test_config_file": {
            "name": "test_config_file",
            "location": 411,
            "return": [],
            "arguments": {
                "plain_command_line": [],
                "config_command_line": [],
                "config_contents": []
            }
        },
        "test_config_file_required": {
            "name": "test_config_file_required",
            "location": 442,
            "return": [],
            "arguments": {
                "config_command_line": [],
                "config_contents": []
            }
        },
        "test_arguments_allowed_to_differ": {
            "name": "test_arguments_allowed_to_differ",
            "location": 461,
            "return": [],
            "arguments": {}
        },
        "_create_argument_values_that_must_be_files_or_dirs.grouper": {
            "name": "grouper",
            "location": 338,
            "return": [],
            "arguments": {
                "iterable": [],
                "n": [],
                "fillvalue": []
            }
        }
    },
    "sockeye-main/test/unit/test_average.py": {
        "test_strategy_best": {
            "name": "test_strategy_best",
            "location": 31,
            "return": [],
            "arguments": {
                "test_points": [],
                "expected_top_n": [],
                "size": [],
                "maximize": []
            }
        },
        "test_strategy_last": {
            "name": "test_strategy_last",
            "location": 45,
            "return": [],
            "arguments": {
                "test_points": [],
                "expected_top_n": [],
                "size": [],
                "maximize": []
            }
        },
        "test_strategy_lifespan": {
            "name": "test_strategy_lifespan",
            "location": 60,
            "return": [],
            "arguments": {
                "test_points": [],
                "expected_top_n": [],
                "size": [],
                "maximize": []
            }
        },
        "test_average": {
            "name": "test_average",
            "location": 65,
            "return": [],
            "arguments": {}
        }
    },
    "sockeye-main/test/unit/test_beam_search.py": {
        "test_length_penalty_default": {
            "name": "test_length_penalty_default",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_length_penalty": {
            "name": "test_length_penalty",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "test_length_penalty_int_input": {
            "name": "test_length_penalty_int_input",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_brevity_penalty_default": {
            "name": "test_brevity_penalty_default",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "test_brevity_penalty": {
            "name": "test_brevity_penalty",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "test_brevity_penalty_int_input": {
            "name": "test_brevity_penalty_int_input",
            "location": 65,
            "return": [],
            "arguments": {}
        },
        "test_candidate_scorer": {
            "name": "test_candidate_scorer",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "numpy_topk": {
            "name": "numpy_topk",
            "location": 97,
            "return": [],
            "arguments": {
                "scores": [],
                "k": [],
                "offset": []
            }
        },
        "test_topk_func": {
            "name": "test_topk_func",
            "location": 135,
            "return": [],
            "arguments": {
                "batch_size": [],
                "beam_size": [],
                "target_vocab_size": []
            }
        },
        "test_greedytop1": {
            "name": "test_greedytop1",
            "location": 154,
            "return": [],
            "arguments": {
                "target_vocab_size": []
            }
        },
        "test_samplek_func": {
            "name": "test_samplek_func",
            "location": 182,
            "return": [],
            "arguments": {
                "batch_size": [],
                "beam_size": [],
                "target_vocab_size": [],
                "top_n": []
            }
        },
        "test_update_scores": {
            "name": "test_update_scores",
            "location": 208,
            "return": [],
            "arguments": {
                "use_unk_dist": []
            }
        },
        "test_beam_search": {
            "name": "test_beam_search",
            "location": 305,
            "return": [],
            "arguments": {}
        },
        "test_get_nvs_vocab_slice_ids": {
            "name": "test_get_nvs_vocab_slice_ids",
            "location": 348,
            "return": [],
            "arguments": {}
        },
        "test_get_vocab_slice_ids_blocking": {
            "name": "test_get_vocab_slice_ids_blocking",
            "location": 407,
            "return": [],
            "arguments": {}
        },
        "_TestInference.__init__": {
            "name": "__init__",
            "location": 244,
            "return": [],
            "arguments": {
                "self": [],
                "output_vocab_size": []
            }
        },
        "_TestInference.state_structure": {
            "name": "state_structure",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_TestInference.encode_and_initialize": {
            "name": "encode_and_initialize",
            "location": 251,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "valid_length": []
            }
        },
        "_TestInference.decode_step": {
            "name": "decode_step",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "step_input": [],
                "states": [],
                "vocab_slice_ids": []
            }
        },
        "_TestInference.model_output_vocab_size": {
            "name": "model_output_vocab_size",
            "location": 295,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_TestInference.model_output_factor_vocab_size": {
            "name": "model_output_factor_vocab_size",
            "location": 299,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sockeye-main/test/unit/test_bleu.py": {
        "test_bleu": {
            "name": "test_bleu",
            "location": 58,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": [],
                "expected_bleu": []
            }
        },
        "test_effective_order": {
            "name": "test_effective_order",
            "location": 64,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": [],
                "expected_bleu": []
            }
        },
        "test_statistics": {
            "name": "test_statistics",
            "location": 70,
            "return": [],
            "arguments": {
                "hypothesis": [],
                "reference": [],
                "expected_stat": []
            }
        },
        "test_scoring": {
            "name": "test_scoring",
            "location": 77,
            "return": [],
            "arguments": {
                "statistics": [],
                "expected_score": []
            }
        },
        "test_offset": {
            "name": "test_offset",
            "location": 84,
            "return": [],
            "arguments": {
                "hypothesis": [],
                "reference": [],
                "expected_with_offset": [],
                "expected_without_offset": []
            }
        },
        "test_degenerate_statistics": {
            "name": "test_degenerate_statistics",
            "location": 93,
            "return": [],
            "arguments": {
                "statistics": [],
                "offset": [],
                "expected_score": []
            }
        },
        "test_degenerate_uneven": {
            "name": "test_degenerate_uneven",
            "location": 100,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": []
            }
        }
    },
    "sockeye-main/test/unit/test_chrf.py": {
        "test_chrf": {
            "name": "test_chrf",
            "location": 42,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": [],
                "expected_score": []
            }
        },
        "test_chrf_keep_whitespace": {
            "name": "test_chrf_keep_whitespace",
            "location": 48,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": [],
                "expected_score": []
            }
        }
    },
    "sockeye-main/test/unit/test_config.py": {
        "test_config_repr": {
            "name": "test_config_repr",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "test_config_eq": {
            "name": "test_config_eq",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "test_config_serialization": {
            "name": "test_config_serialization",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "test_config_copy": {
            "name": "test_config_copy",
            "location": 70,
            "return": [],
            "arguments": {}
        },
        "test_config_missing_attributes_filled_with_default": {
            "name": "test_config_missing_attributes_filled_with_default",
            "location": 91,
            "return": [],
            "arguments": {}
        }
    },
    "sockeye-main/test/unit/test_data_io.py": {
        "test_define_buckets": {
            "name": "test_define_buckets",
            "location": 41,
            "return": [],
            "arguments": {
                "max_seq_len": [],
                "step": [],
                "expected_buckets": []
            }
        },
        "test_define_parallel_buckets": {
            "name": "test_define_parallel_buckets",
            "location": 69,
            "return": [],
            "arguments": {
                "max_seq_len_source": [],
                "max_seq_len_target": [],
                "bucket_width": [],
                "bucket_scaling": [],
                "length_ratio": [],
                "expected_buckets": []
            }
        },
        "test_get_bucket": {
            "name": "test_get_bucket",
            "location": 87,
            "return": [],
            "arguments": {
                "buckets": [],
                "length": [],
                "expected_bucket": []
            }
        },
        "test_tokens2ids": {
            "name": "test_tokens2ids",
            "location": 97,
            "return": [],
            "arguments": {
                "tokens": [],
                "vocab": [],
                "expected_ids": []
            }
        },
        "test_strids2ids": {
            "name": "test_strids2ids",
            "location": 103,
            "return": [],
            "arguments": {
                "tokens": [],
                "expected_ids": []
            }
        },
        "test_sequence_reader": {
            "name": "test_sequence_reader",
            "location": 115,
            "return": [],
            "arguments": {
                "sequences": [],
                "use_vocab": [],
                "add_bos": [],
                "add_eos": []
            }
        },
        "test_nonparallel_iter": {
            "name": "test_nonparallel_iter",
            "location": 160,
            "return": [],
            "arguments": {
                "source_iterables": [],
                "target_iterables": []
            }
        },
        "test_not_source_token_parallel_iter": {
            "name": "test_not_source_token_parallel_iter",
            "location": 173,
            "return": [],
            "arguments": {
                "source_iterables": [],
                "target_iterables": []
            }
        },
        "test_not_target_token_parallel_iter": {
            "name": "test_not_target_token_parallel_iter",
            "location": 186,
            "return": [],
            "arguments": {
                "source_iterables": [],
                "target_iterables": []
            }
        },
        "test_parallel_iter": {
            "name": "test_parallel_iter",
            "location": 225,
            "return": [],
            "arguments": {
                "source_iterables": [],
                "target_iterables": [],
                "expected": []
            }
        },
        "test_sample_based_define_bucket_batch_sizes": {
            "name": "test_sample_based_define_bucket_batch_sizes",
            "location": 229,
            "return": [],
            "arguments": {}
        },
        "test_word_based_define_bucket_batch_sizes": {
            "name": "test_word_based_define_bucket_batch_sizes",
            "location": 248,
            "return": [],
            "arguments": {
                "length_ratio": [],
                "batch_sentences_multiple_of": [],
                "expected_batch_sizes": []
            }
        },
        "test_max_word_based_define_bucket_batch_sizes": {
            "name": "test_max_word_based_define_bucket_batch_sizes",
            "location": 269,
            "return": [],
            "arguments": {
                "length_ratio": [],
                "batch_sentences_multiple_of": [],
                "expected_batch_sizes": []
            }
        },
        "_get_random_bucketed_data": {
            "name": "_get_random_bucketed_data",
            "location": 285,
            "return": [],
            "arguments": {
                "buckets": [],
                "min_count": [],
                "max_count": [],
                "bucket_counts": []
            }
        },
        "test_parallel_data_set": {
            "name": "test_parallel_data_set",
            "location": 311,
            "return": [],
            "arguments": {}
        },
        "test_parallel_data_set_fill_up": {
            "name": "test_parallel_data_set_fill_up",
            "location": 329,
            "return": [],
            "arguments": {}
        },
        "test_get_permutations": {
            "name": "test_get_permutations",
            "location": 347,
            "return": [],
            "arguments": {}
        },
        "test_parallel_data_set_permute": {
            "name": "test_parallel_data_set_permute",
            "location": 367,
            "return": [],
            "arguments": {}
        },
        "test_get_batch_indices": {
            "name": "test_get_batch_indices",
            "location": 392,
            "return": [],
            "arguments": {}
        },
        "test_get_parallel_bucket": {
            "name": "test_get_parallel_bucket",
            "location": 431,
            "return": [],
            "arguments": {
                "buckets": [],
                "source_length": [],
                "target_length": [],
                "expected_bucket_index": [],
                "expected_bucket": []
            }
        },
        "test_calculate_length_statistics": {
            "name": "test_calculate_length_statistics",
            "location": 444,
            "return": [],
            "arguments": {
                "sources": [],
                "targets": [],
                "expected_num_sents": [],
                "expected_mean": [],
                "expected_std": []
            }
        },
        "test_non_parallel_calculate_length_statistics": {
            "name": "test_non_parallel_calculate_length_statistics",
            "location": 458,
            "return": [],
            "arguments": {
                "sources": [],
                "targets": []
            }
        },
        "test_get_training_data_iters": {
            "name": "test_get_training_data_iters",
            "location": 463,
            "return": [],
            "arguments": {}
        },
        "_data_batches_equal": {
            "name": "_data_batches_equal",
            "location": 542,
            "return": [],
            "arguments": {
                "db1": [],
                "db2": []
            }
        },
        "test_parallel_sample_iter": {
            "name": "test_parallel_sample_iter",
            "location": 554,
            "return": [],
            "arguments": {}
        },
        "test_sharded_parallel_sample_iter": {
            "name": "test_sharded_parallel_sample_iter",
            "location": 611,
            "return": [],
            "arguments": {}
        },
        "test_sharded_parallel_sample_iter_num_batches": {
            "name": "test_sharded_parallel_sample_iter_num_batches",
            "location": 677,
            "return": [],
            "arguments": {}
        },
        "test_sharded_and_parallel_iter_same_num_batches": {
            "name": "test_sharded_and_parallel_iter_same_num_batches",
            "location": 710,
            "return": [],
            "arguments": {}
        },
        "test_create_target_and_shifted_label_sequences": {
            "name": "test_create_target_and_shifted_label_sequences",
            "location": 758,
            "return": [],
            "arguments": {}
        },
        "test_parallel_data_set.check_equal": {
            "name": "check_equal",
            "location": 315,
            "return": [],
            "arguments": {
                "tensors1": [],
                "tensors2": []
            }
        }
    },
    "sockeye-main/test/unit/test_decoder.py": {
        "test_get_decoder": {
            "name": "test_get_decoder",
            "location": 25,
            "return": [],
            "arguments": {
                "lhuc": []
            }
        }
    },
    "sockeye-main/test/unit/test_encoder.py": {
        "test_embedding_encoder": {
            "name": "test_embedding_encoder",
            "location": 28,
            "return": [],
            "arguments": {
                "dropout": [],
                "factor_configs": []
            }
        },
        "test_get_transformer_encoder": {
            "name": "test_get_transformer_encoder",
            "location": 39,
            "return": [],
            "arguments": {
                "lhuc": []
            }
        }
    },
    "sockeye-main/test/unit/test_fixed_param_strategy.py": {
        "test_fixed_param_strategy": {
            "name": "test_fixed_param_strategy",
            "location": 377,
            "return": [],
            "arguments": {
                "param_names": [],
                "strategy": [],
                "expected_fixed_param_names": []
            }
        }
    },
    "sockeye-main/test/unit/test_inference.py": {
        "mock_translator": {
            "name": "mock_translator",
            "location": 35,
            "return": [],
            "arguments": {
                "batch_size": [],
                "beam_size": [],
                "nbest_size": [],
                "num_source_factors": []
            }
        },
        "test_concat_translations": {
            "name": "test_concat_translations",
            "location": 79,
            "return": [],
            "arguments": {
                "lp_alpha": [],
                "lp_beta": [],
                "bp_weight": []
            }
        },
        "test_translator_input": {
            "name": "test_translator_input",
            "location": 116,
            "return": [],
            "arguments": {
                "sentence_id": [],
                "sentence": [],
                "factors": [],
                "chunk_size": []
            }
        },
        "test_translator_input_with_source_prefix": {
            "name": "test_translator_input_with_source_prefix",
            "location": 147,
            "return": [],
            "arguments": {
                "sentence_id": [],
                "sentence": [],
                "factors": [],
                "chunk_size": [],
                "source_prefix": [],
                "source_prefix_factors": []
            }
        },
        "test_get_max_input_output_length": {
            "name": "test_get_max_input_output_length",
            "location": 189,
            "return": [],
            "arguments": {
                "supported_max_seq_len_source": [],
                "supported_max_seq_len_target": [],
                "forced_max_input_len": [],
                "forced_max_output_len": [],
                "length_ratio_mean": [],
                "length_ratio_std": [],
                "expected_max_input_len": [],
                "expected_max_output_len": []
            }
        },
        "test_make_input_from_factored_string": {
            "name": "test_make_input_from_factored_string",
            "location": 229,
            "return": [],
            "arguments": {
                "sentence": [],
                "num_expected_factors": [],
                "delimiter": [],
                "expected_tokens": [],
                "expected_factors": []
            }
        },
        "test_factor_parsing": {
            "name": "test_factor_parsing",
            "location": 261,
            "return": [],
            "arguments": {
                "sentence": [],
                "num_expected_factors": [],
                "delimiter": []
            }
        },
        "test_make_input_whitespace_delimiter": {
            "name": "test_make_input_whitespace_delimiter",
            "location": 276,
            "return": [],
            "arguments": {
                "delimiter": []
            }
        },
        "test_make_input_from_valid_json_string": {
            "name": "test_make_input_from_valid_json_string",
            "location": 296,
            "return": [],
            "arguments": {
                "text": [],
                "factors": []
            }
        },
        "test_make_input_from_valid_json_string_restrict_lexicon": {
            "name": "test_make_input_from_valid_json_string_restrict_lexicon",
            "location": 312,
            "return": [],
            "arguments": {}
        },
        "test_failed_make_input_from_valid_json_string": {
            "name": "test_failed_make_input_from_valid_json_string",
            "location": 340,
            "return": [],
            "arguments": {
                "text": [],
                "text_key": [],
                "factors": [],
                "factors_key": []
            }
        },
        "test_make_input_from_valid_dict": {
            "name": "test_make_input_from_valid_dict",
            "location": 355,
            "return": [],
            "arguments": {
                "text": [],
                "factors": []
            }
        },
        "test_failed_make_input_from_valid_dict": {
            "name": "test_failed_make_input_from_valid_dict",
            "location": 370,
            "return": [],
            "arguments": {
                "text": [],
                "text_key": [],
                "factors": [],
                "factors_key": []
            }
        },
        "test_make_input_from_multiple_strings": {
            "name": "test_make_input_from_multiple_strings",
            "location": 382,
            "return": [],
            "arguments": {
                "strings": []
            }
        },
        "test_get_best_word_indices_for_kth_hypotheses": {
            "name": "test_get_best_word_indices_for_kth_hypotheses",
            "location": 392,
            "return": [],
            "arguments": {}
        },
        "test_get_best_translations": {
            "name": "test_get_best_translations",
            "location": 424,
            "return": [],
            "arguments": {
                "expected_best_ids": [],
                "expected_best_indices": []
            }
        },
        "test_unshift_target_factors": {
            "name": "test_unshift_target_factors",
            "location": 469,
            "return": [],
            "arguments": {
                "sequence": [],
                "fill_with": [],
                "expected_sequence": []
            }
        },
        "mock_translator.mock_model": {
            "name": "mock_model",
            "location": 58,
            "return": [],
            "arguments": {}
        }
    },
    "sockeye-main/test/unit/test_layers.py": {
        "test_lhuc": {
            "name": "test_lhuc",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_positional_embeddings": {
            "name": "test_positional_embeddings",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "test_output_layer": {
            "name": "test_output_layer",
            "location": 79,
            "return": [],
            "arguments": {}
        },
        "test_interleaved_multihead_attention": {
            "name": "test_interleaved_multihead_attention",
            "location": 101,
            "return": [],
            "arguments": {
                "qlen": [],
                "kvlen": [],
                "batch_size": [],
                "hidden": [],
                "heads": []
            }
        },
        "test_interleaved_multihead_self_attention": {
            "name": "test_interleaved_multihead_self_attention",
            "location": 132,
            "return": [],
            "arguments": {
                "seq_len": [],
                "batch_size": [],
                "hidden": [],
                "heads": [],
                "side": []
            }
        }
    },
    "sockeye-main/test/unit/test_lexicon.py": {
        "test_topk_lexicon": {
            "name": "test_topk_lexicon",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "test_create_block_lexicon": {
            "name": "test_create_block_lexicon",
            "location": 88,
            "return": [],
            "arguments": {}
        }
    },
    "sockeye-main/test/unit/test_loss.py": {
        "test_loss_block": {
            "name": "test_loss_block",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "test_loss_metric": {
            "name": "test_loss_metric",
            "location": 56,
            "return": [],
            "arguments": {}
        },
        "test_cross_entropy_loss": {
            "name": "test_cross_entropy_loss",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "test_label_to_bow": {
            "name": "test_label_to_bow",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "test_binary_cross_entropy_loss": {
            "name": "test_binary_cross_entropy_loss",
            "location": 116,
            "return": [],
            "arguments": {}
        },
        "test_perplexity_metric": {
            "name": "test_perplexity_metric",
            "location": 159,
            "return": [],
            "arguments": {}
        },
        "DummyLoss.forward": {
            "name": "forward",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "outputs": [],
                "labels": []
            }
        },
        "DummyLoss.create_metric": {
            "name": "create_metric",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sockeye-main/test/unit/test_lr_scheduler.py": {
        "test_inv_sqrt_decay_scheduler": {
            "name": "test_inv_sqrt_decay_scheduler",
            "location": 23,
            "return": [],
            "arguments": {
                "learning_rate_warmup": [],
                "learning_rate_t_scale": []
            }
        },
        "test_linear_decay_scheduler": {
            "name": "test_linear_decay_scheduler",
            "location": 43,
            "return": [],
            "arguments": {}
        },
        "test_get_lr_scheduler": {
            "name": "test_get_lr_scheduler",
            "location": 74,
            "return": [],
            "arguments": {
                "scheduler_type": [],
                "expected_instance": []
            }
        },
        "test_get_lr_scheduler_no_reduce": {
            "name": "test_get_lr_scheduler_no_reduce",
            "location": 88,
            "return": [],
            "arguments": {}
        }
    },
    "sockeye-main/test/unit/test_output_handler.py": {
        "test_stream_output_handler": {
            "name": "test_stream_output_handler",
            "location": 56,
            "return": [],
            "arguments": {
                "handler": [],
                "translation_input": [],
                "translation_output": [],
                "translation_walltime": [],
                "expected_string": []
            }
        }
    },
    "sockeye-main/test/unit/test_params.py": {
        "test_cleanup_param_files": {
            "name": "test_cleanup_param_files",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_cleanup_param_files_keep_first": {
            "name": "test_cleanup_param_files_keep_first",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "mock_model": {
            "name": "mock_model",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "test_set_parameters": {
            "name": "test_set_parameters",
            "location": 71,
            "return": [],
            "arguments": {}
        },
        "test_set_parameters_allow_missing": {
            "name": "test_set_parameters_allow_missing",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "test_set_parameters_ignore_extra": {
            "name": "test_set_parameters_ignore_extra",
            "location": 95,
            "return": [],
            "arguments": {}
        }
    },
    "sockeye-main/test/unit/test_reranking.py": {
        "test_rerank_hypotheses": {
            "name": "test_rerank_hypotheses",
            "location": 43,
            "return": [],
            "arguments": {
                "source": [],
                "hypotheses": [],
                "reference": [],
                "expected_output": [],
                "metric": []
            }
        },
        "test_rerank_hypotheses_isometric": {
            "name": "test_rerank_hypotheses_isometric",
            "location": 73,
            "return": [],
            "arguments": {
                "source": [],
                "hypotheses": [],
                "scores": [],
                "reference": [],
                "expected_output": [],
                "metric": []
            }
        },
        "test_rerank_return_score": {
            "name": "test_rerank_return_score",
            "location": 91,
            "return": [],
            "arguments": {
                "source": [],
                "hypotheses": [],
                "reference": [],
                "expected_scores": []
            }
        }
    },
    "sockeye-main/test/unit/test_rouge.py": {
        "test_rouge_1": {
            "name": "test_rouge_1",
            "location": 31,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": [],
                "rouge1_score": [],
                "rouge2_score": [],
                "rougel_score": []
            }
        },
        "test_rouge_2": {
            "name": "test_rouge_2",
            "location": 37,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": [],
                "rouge1_score": [],
                "rouge2_score": [],
                "rougel_score": []
            }
        },
        "test_rouge_l": {
            "name": "test_rouge_l",
            "location": 43,
            "return": [],
            "arguments": {
                "hypotheses": [],
                "references": [],
                "rouge1_score": [],
                "rouge2_score": [],
                "rougel_score": []
            }
        }
    },
    "sockeye-main/test/unit/test_scoring.py": {
        "test_batch_scorer": {
            "name": "test_batch_scorer",
            "location": 20,
            "return": [],
            "arguments": {}
        }
    },
    "sockeye-main/test/unit/test_transformer.py": {
        "test_transformer_feed_forward": {
            "name": "test_transformer_feed_forward",
            "location": 22,
            "return": [],
            "arguments": {
                "use_glu": []
            }
        },
        "test_pt_autoregressive_mask": {
            "name": "test_pt_autoregressive_mask",
            "location": 34,
            "return": [],
            "arguments": {
                "length": []
            }
        }
    },
    "sockeye-main/test/unit/test_translate.py": {
        "mock_open": {
            "name": "mock_open",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_translate_by_file": {
            "name": "test_translate_by_file",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "test_translate_by_stdin_chunk2": {
            "name": "test_translate_by_stdin_chunk2",
            "location": 60,
            "return": [],
            "arguments": {}
        }
    },
    "sockeye-main/test/unit/test_utils.py": {
        "test_chunks": {
            "name": "test_chunks",
            "location": 35,
            "return": [],
            "arguments": {
                "some_list": [],
                "expected": []
            }
        },
        "test_check_condition_true": {
            "name": "test_check_condition_true",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "test_check_condition_false": {
            "name": "test_check_condition_false",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "test_parse_version": {
            "name": "test_parse_version",
            "location": 53,
            "return": [],
            "arguments": {
                "version_string": [],
                "expected_version": []
            }
        },
        "test_check_version_disregards_minor": {
            "name": "test_check_version_disregards_minor",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "_get_later_major_version": {
            "name": "_get_later_major_version",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "test_check_version_checks_major": {
            "name": "test_check_version_checks_major",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "test_version_matches_changelog": {
            "name": "test_version_matches_changelog",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "test_online_mean_and_variance": {
            "name": "test_online_mean_and_variance",
            "location": 90,
            "return": [],
            "arguments": {
                "samples": [],
                "expected_mean": [],
                "expected_variance": []
            }
        },
        "test_online_mean_and_variance_nan": {
            "name": "test_online_mean_and_variance_nan",
            "location": 104,
            "return": [],
            "arguments": {
                "samples": [],
                "expected_mean": []
            }
        },
        "test_get_tokens": {
            "name": "test_get_tokens",
            "location": 118,
            "return": [],
            "arguments": {
                "line": [],
                "expected_tokens": []
            }
        },
        "test_combine_means": {
            "name": "test_combine_means",
            "location": 131,
            "return": [],
            "arguments": {
                "samples": [],
                "sample_means": [],
                "expected_mean": []
            }
        },
        "test_combine_stds": {
            "name": "test_combine_stds",
            "location": 154,
            "return": [],
            "arguments": {
                "samples": [],
                "sample_means": [],
                "sample_stds": [],
                "expected_std": []
            }
        },
        "test_average_tensors": {
            "name": "test_average_tensors",
            "location": 160,
            "return": [],
            "arguments": {}
        },
        "test_metric_value_is_better": {
            "name": "test_metric_value_is_better",
            "location": 189,
            "return": [],
            "arguments": {
                "new": [],
                "old": [],
                "metric": [],
                "result": []
            }
        },
        "_touch_file": {
            "name": "_touch_file",
            "location": 193,
            "return": [],
            "arguments": {
                "fname": [],
                "compressed": [],
                "empty": []
            }
        },
        "test_is_gzip_file": {
            "name": "test_is_gzip_file",
            "location": 205,
            "return": [],
            "arguments": {}
        },
        "test_smart_open_without_suffix": {
            "name": "test_smart_open_without_suffix",
            "location": 214,
            "return": [],
            "arguments": {}
        },
        "test_parse_metrics_line": {
            "name": "test_parse_metrics_line",
            "location": 232,
            "return": [],
            "arguments": {
                "line_num": [],
                "line": [],
                "expected_metrics": []
            }
        },
        "test_write_read_metric_file": {
            "name": "test_write_read_metric_file",
            "location": 243,
            "return": [],
            "arguments": {}
        },
        "test_adjust_first_step_masking": {
            "name": "test_adjust_first_step_masking",
            "location": 255,
            "return": [],
            "arguments": {}
        },
        "test_count_seq_len": {
            "name": "test_count_seq_len",
            "location": 394,
            "return": [],
            "arguments": {
                "sample": [],
                "count_type": [],
                "replace_tokens": [],
                "expected_seq_len": []
            }
        },
        "test_rerank_hypotheses_isometric": {
            "name": "test_rerank_hypotheses_isometric",
            "location": 418,
            "return": [],
            "arguments": {
                "hypothesis": [],
                "hypothesis_score": [],
                "source": [],
                "metric": [],
                "alpha": [],
                "expected_score": []
            }
        }
    },
    "sockeye-main/test/unit/test_vocab.py": {
        "test_count_tokens": {
            "name": "test_count_tokens",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "test_build_vocab": {
            "name": "test_build_vocab",
            "location": 55,
            "return": [],
            "arguments": {
                "data": [],
                "size": [],
                "min_count": [],
                "expected": []
            }
        },
        "test_padded_build_vocab": {
            "name": "test_padded_build_vocab",
            "location": 62,
            "return": [],
            "arguments": {
                "num_types": [],
                "pad_to_multiple_of": [],
                "expected_vocab_size": []
            }
        },
        "test_constants_in_vocab": {
            "name": "test_constants_in_vocab",
            "location": 84,
            "return": [],
            "arguments": {
                "data": [],
                "size": [],
                "min_count": [],
                "constants": []
            }
        },
        "test_get_ordered_tokens_from_vocab": {
            "name": "test_get_ordered_tokens_from_vocab",
            "location": 92,
            "return": [],
            "arguments": {
                "vocab": [],
                "expected_output": []
            }
        },
        "test_verify_valid_vocab": {
            "name": "test_verify_valid_vocab",
            "location": 114,
            "return": [],
            "arguments": {
                "vocab": [],
                "expected_result": []
            }
        },
        "test_get_sorted_source_vocab_fnames": {
            "name": "test_get_sorted_source_vocab_fnames",
            "location": 118,
            "return": [],
            "arguments": {}
        }
    },
    "sockeye-main/test/unit/__init__.py": {}
}
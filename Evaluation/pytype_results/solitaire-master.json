{
    "solitaire-master/auto_play.py": {
        "play_move": {
            "name": "play_move",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "game": [
                    "solitaire_core.game.Game"
                ]
            }
        },
        "StatTracker.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatTracker.mark_won": {
            "name": "mark_won",
            "location": 48,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatTracker.mark_lost": {
            "name": "mark_lost",
            "location": 55,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatTracker.mark_move": {
            "name": "mark_move",
            "location": 62,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatTracker._try_print_stats": {
            "name": "_try_print_stats",
            "location": 70,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatTracker.print_stats": {
            "name": "print_stats",
            "location": 76,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingleGamePlayLoop.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingleGamePlayLoop.play_one_game": {
            "name": "play_one_game",
            "location": 104,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingleGamePlayLoop.get_best_win_record": {
            "name": "get_best_win_record",
            "location": 131,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "solitaire-master/cli_game.py": {},
    "solitaire-master/solitaire_ai/vectorization.py": {
        "_stack_to_array": {
            "name": "_stack_to_array",
            "location": 8,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "stack": [
                    "int"
                ]
            }
        },
        "game_state_to_array": {
            "name": "game_state_to_array",
            "location": 20,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "gs": []
            }
        },
        "action_to_onehot": {
            "name": "action_to_onehot",
            "location": 35,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "action": []
            }
        },
        "onehot_to_action": {
            "name": "onehot_to_action",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "one_hot": [
                    "List[float]"
                ],
                "acceptable_actions": [
                    "Optional[list]"
                ]
            }
        }
    },
    "solitaire-master/solitaire_ai/__init__.py": {},
    "solitaire-master/solitaire_core/game.py": {
        "bit_count": {
            "name": "bit_count",
            "location": 18,
            "return": [
                "int"
            ],
            "arguments": {
                "int_type": [
                    "int"
                ]
            }
        },
        "get_card_idx": {
            "name": "get_card_idx",
            "location": 29,
            "return": [
                "int"
            ],
            "arguments": {
                "suit": [],
                "rank": []
            }
        },
        "get_bitmask": {
            "name": "get_bitmask",
            "location": 35,
            "return": [
                "int"
            ],
            "arguments": {
                "suit": [],
                "rank": []
            }
        },
        "card_to_bitmask": {
            "name": "card_to_bitmask",
            "location": 39,
            "return": [
                "int"
            ],
            "arguments": {
                "card": []
            }
        },
        "card_idx_to_bitmask": {
            "name": "card_idx_to_bitmask",
            "location": 94,
            "return": [
                "int"
            ],
            "arguments": {
                "card_idx": [
                    "int"
                ]
            }
        },
        "card_idx_to_suit": {
            "name": "card_idx_to_suit",
            "location": 99,
            "return": [
                "Any"
            ],
            "arguments": {
                "card_idx": [
                    "int"
                ]
            }
        },
        "card_idx_to_rank": {
            "name": "card_idx_to_rank",
            "location": 104,
            "return": [
                "Any"
            ],
            "arguments": {
                "card_idx": [
                    "int"
                ]
            }
        },
        "card_idx_to_card": {
            "name": "card_idx_to_card",
            "location": 113,
            "return": [
                "Any"
            ],
            "arguments": {
                "card_idx": [
                    "int"
                ]
            }
        },
        "bitmask_to_card_idx": {
            "name": "bitmask_to_card_idx",
            "location": 122,
            "return": [
                "int"
            ],
            "arguments": {
                "bitmask": [
                    "int"
                ]
            }
        },
        "bitmask_to_suit": {
            "name": "bitmask_to_suit",
            "location": 130,
            "return": [
                "Any"
            ],
            "arguments": {
                "bitmask": [
                    "int"
                ]
            }
        },
        "lowest_bitmask": {
            "name": "lowest_bitmask",
            "location": 134,
            "return": [
                "int"
            ],
            "arguments": {
                "bitmask": [
                    "int"
                ]
            }
        },
        "lowest_card_idx": {
            "name": "lowest_card_idx",
            "location": 139,
            "return": [
                "int"
            ],
            "arguments": {
                "bitmask": [
                    "int"
                ]
            }
        },
        "highest_card_idx": {
            "name": "highest_card_idx",
            "location": 144,
            "return": [
                "int"
            ],
            "arguments": {
                "bitmask": [
                    "int"
                ]
            }
        },
        "highest_bitmask": {
            "name": "highest_bitmask",
            "location": 149,
            "return": [
                "int"
            ],
            "arguments": {
                "bitmask": [
                    "int"
                ]
            }
        },
        "bitmask_to_card_idxs": {
            "name": "bitmask_to_card_idxs",
            "location": 156,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "bitmask": [
                    "int"
                ]
            }
        },
        "bitmask_to_cards": {
            "name": "bitmask_to_cards",
            "location": 174,
            "return": [
                "list"
            ],
            "arguments": {
                "bitmask": [
                    "int"
                ]
            }
        },
        "game_state_id": {
            "name": "game_state_id",
            "location": 178,
            "return": [
                "str"
            ],
            "arguments": {
                "gs": []
            }
        },
        "is_valid_game_state": {
            "name": "is_valid_game_state",
            "location": 183,
            "return": [
                "bool"
            ],
            "arguments": {
                "gs": []
            }
        },
        "_try_apply_action": {
            "name": "_try_apply_action",
            "location": 272,
            "return": [
                "bool"
            ],
            "arguments": {
                "gs": [],
                "hgs": [],
                "action": []
            }
        },
        "_get_TO_SS_S_actions": {
            "name": "_get_TO_SS_S_actions",
            "location": 428,
            "return": [
                "Generator[(Any, None, None)]"
            ],
            "arguments": {
                "gs": []
            }
        },
        "_get_TALON_S_TO_BS_N_actions": {
            "name": "_get_TALON_S_TO_BS_N_actions",
            "location": 456,
            "return": [
                "Generator[(Any, None, None)]"
            ],
            "arguments": {
                "gs": []
            }
        },
        "_get_SS_S_TO_BS_N_actions": {
            "name": "_get_SS_S_TO_BS_N_actions",
            "location": 474,
            "return": [
                "Generator[(Any, None, None)]"
            ],
            "arguments": {
                "gs": []
            }
        },
        "_get_BS_N_TO_BS_N_actions": {
            "name": "_get_BS_N_TO_BS_N_actions",
            "location": 496,
            "return": [
                "Generator[(Any, None, None)]"
            ],
            "arguments": {
                "gs": []
            }
        },
        "deal_game": {
            "name": "deal_game",
            "location": 653,
            "return": [
                "Game"
            ],
            "arguments": {
                "seed": [
                    "int"
                ],
                "is_random": [
                    "bool"
                ]
            }
        },
        "Game.__init__": {
            "name": "__init__",
            "location": 543,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_state": [],
                "current_hidden_state": []
            }
        },
        "Game.apply_action": {
            "name": "apply_action",
            "location": 553,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "Game.try_apply_action": {
            "name": "try_apply_action",
            "location": 560,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "action": [],
                "check_only": [
                    "bool"
                ],
                "exclude_actions_to_previous_states": [
                    "bool"
                ]
            }
        },
        "Game.get_valid_actions": {
            "name": "get_valid_actions",
            "location": 596,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "exclude_actions_to_previous_states": [
                    "bool"
                ]
            }
        },
        "Game.won": {
            "name": "won",
            "location": 615,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.won_effectively": {
            "name": "won_effectively",
            "location": 628,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.get_game_state_id": {
            "name": "get_game_state_id",
            "location": 649,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "solitaire-master/solitaire_core/game_state_pb2.py": {},
    "solitaire-master/solitaire_core/text_renderer.py": {
        "_suit_symb": {
            "name": "_suit_symb",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "suit": []
            }
        },
        "_rank_symb": {
            "name": "_rank_symb",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "rank": []
            }
        },
        "_add_color": {
            "name": "_add_color",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "txt": [
                    "str"
                ],
                "suit": []
            }
        },
        "_draw": {
            "name": "_draw",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "screen": [],
                "string": [],
                "x": [],
                "y": []
            }
        },
        "_draw_card": {
            "name": "_draw_card",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "screen": [],
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ],
                "suit": [],
                "rank": []
            }
        },
        "render": {
            "name": "render",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "gs": [],
                "actions": [
                    "list"
                ]
            }
        }
    },
    "solitaire-master/solitaire_core/__init__.py": {},
    "solitaire-master/tests/__init__.py": {},
    "solitaire-master/tests/solitaire_ai/test_vectorization.py": {
        "VectorizationTest.test_stack_to_array": {
            "name": "test_stack_to_array",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectorizationTest.test_game_state_to_array": {
            "name": "test_game_state_to_array",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectorizationTest.test_action_to_onehot": {
            "name": "test_action_to_onehot",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VectorizationTest.test_action_to_onehot_chooses_greatest": {
            "name": "test_action_to_onehot_chooses_greatest",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "solitaire-master/tests/solitaire_ai/__init__.py": {},
    "solitaire-master/tests/solitare_core/test_game.py": {
        "_new_gs": {
            "name": "_new_gs",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "GameTest.test_bit_operators": {
            "name": "test_bit_operators",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameTest.test_lowest_higest": {
            "name": "test_lowest_higest",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameTest.test_mask_maps": {
            "name": "test_mask_maps",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameTest.test_bitmask_to_card_idxs": {
            "name": "test_bitmask_to_card_idxs",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameTest.test_is_valid_game_state": {
            "name": "test_is_valid_game_state",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameTest.test_try_apply_action_TO_SS_S": {
            "name": "test_try_apply_action_TO_SS_S",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameTest.test_try_apply_action_TO_SS_S_all_cards": {
            "name": "test_try_apply_action_TO_SS_S_all_cards",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameTest.test_try_apply_action_TALON_S_TO_BS_N": {
            "name": "test_try_apply_action_TALON_S_TO_BS_N",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameTest.test_try_apply_action_SS_S_TO_BS_N": {
            "name": "test_try_apply_action_SS_S_TO_BS_N",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameTest.test_try_apply_action_SS_S_TO_BS_N_all_cards": {
            "name": "test_try_apply_action_SS_S_TO_BS_N_all_cards",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameTest.test_try_apply_action_BS_N_TO_BS_N": {
            "name": "test_try_apply_action_BS_N_TO_BS_N",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameTest.test_actions__kings_and_queens": {
            "name": "test_actions__kings_and_queens",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameTest.test_get_valid_actions__simple_state": {
            "name": "test_get_valid_actions__simple_state",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameTest.test_is_won": {
            "name": "test_is_won",
            "location": 495,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameTest.test_cant_repeate_state": {
            "name": "test_cant_repeate_state",
            "location": 520,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "solitaire-master/tests/solitare_core/__init__.py": {}
}
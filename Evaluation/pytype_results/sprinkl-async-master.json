{
    "sprinkl-async-master/setup.py": {
        "UploadCommand.status": {
            "name": "status",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "string": []
            }
        },
        "UploadCommand.initialize_options": {
            "name": "initialize_options",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UploadCommand.finalize_options": {
            "name": "finalize_options",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UploadCommand.run": {
            "name": "run",
            "location": 83,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sprinkl-async-master/sprinkl_async/authtoken.py": {
        "AuthToken.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "refresh_token": [
                    "Optional[str]"
                ],
                "refresh_ts": [
                    "Optional[_datetime.datetime]"
                ],
                "token": [
                    "Optional[str]"
                ],
                "user_id": [
                    "Optional[str]"
                ]
            }
        },
        "AuthToken.token": {
            "name": "token",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthToken.refresh_token": {
            "name": "refresh_token",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthToken.refresh_timestamp": {
            "name": "refresh_timestamp",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthToken.user_id": {
            "name": "user_id",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthToken.is_valid": {
            "name": "is_valid",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuthToken.__repr__": {
            "name": "__repr__",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "sprinkl-async-master/sprinkl_async/client.py": {
        "_create_auth_info": {
            "name": "_create_auth_info",
            "location": 212,
            "return": [
                "sprinkl_async.authtoken.AuthToken"
            ],
            "arguments": {
                "auth": [
                    "dict"
                ]
            }
        },
        "Client.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "websession": [],
                "timeout": [
                    "Optional[int]"
                ],
                "ssl": [
                    "bool"
                ],
                "proxy": [
                    "Optional[str]"
                ]
            }
        },
        "Client._parse_controllers": {
            "name": "_parse_controllers",
            "location": 152,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "controllers": [
                    "list"
                ]
            }
        },
        "Client.auth_info": {
            "name": "auth_info",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sprinkl-async-master/sprinkl_async/const.py": {},
    "sprinkl-async-master/sprinkl_async/controller.py": {
        "Controller.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Callable[(..., Awaitable[dict])]"
                ],
                "controller_data": [
                    "dict"
                ]
            }
        },
        "Controller.__getattr__": {
            "name": "__getattr__",
            "location": 56,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Controller.enabled": {
            "name": "enabled",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Controller.connected": {
            "name": "connected",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Controller.webhooks": {
            "name": "webhooks",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sprinkl-async-master/sprinkl_async/dataobject.py": {
        "set_default": {
            "name": "set_default",
            "location": 23,
            "return": [
                "Any"
            ],
            "arguments": {
                "obj": []
            }
        },
        "ListObject.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "list"
                ]
            }
        },
        "ListObject.__iter__": {
            "name": "__iter__",
            "location": 49,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListObject.__getitem__": {
            "name": "__getitem__",
            "location": 54,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "ListObject.__len__": {
            "name": "__len__",
            "location": 61,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListObject.get": {
            "name": "get",
            "location": 65,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "idx": []
            }
        },
        "ListObject.__str__": {
            "name": "__str__",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListObject.data": {
            "name": "data",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ListObject.json": {
            "name": "json",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DictObject.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ]
            }
        },
        "DictObject.__getattr__": {
            "name": "__getattr__",
            "location": 98,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "DictObject.__iter__": {
            "name": "__iter__",
            "location": 105,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictObject.__getitem__": {
            "name": "__getitem__",
            "location": 110,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "DictObject.__len__": {
            "name": "__len__",
            "location": 116,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictObject.get": {
            "name": "get",
            "location": 120,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "DictObject.__str__": {
            "name": "__str__",
            "location": 124,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DictObject.data": {
            "name": "data",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DictObject.json": {
            "name": "json",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sprinkl-async-master/sprinkl_async/errors.py": {},
    "sprinkl-async-master/sprinkl_async/moisturesensor.py": {
        "MoistureSensor.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Callable[(..., Awaitable[dict])]"
                ],
                "sensor": [
                    "dict"
                ]
            }
        },
        "MoistureSensor.__getattr__": {
            "name": "__getattr__",
            "location": 44,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "sprinkl-async-master/sprinkl_async/moisturesensors.py": {
        "MoistureSensors.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Callable[(..., Awaitable[dict])]"
                ],
                "sensors": [
                    "list"
                ]
            }
        },
        "MoistureSensors.__iter__": {
            "name": "__iter__",
            "location": 33,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoistureSensors.__getitem__": {
            "name": "__getitem__",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "MoistureSensors.__len__": {
            "name": "__len__",
            "location": 44,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MoistureSensors.get": {
            "name": "get",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "MoistureSensors.all": {
            "name": "all",
            "location": 52,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "include_disabled": [
                    "bool"
                ]
            }
        }
    },
    "sprinkl-async-master/sprinkl_async/pageobject.py": {
        "PageObject.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "paged_data": [
                    "dict"
                ],
                "request": [
                    "Callable[(..., Awaitable[dict])]"
                ],
                "method": [
                    "str"
                ],
                "uri": [
                    "str"
                ],
                "page": [
                    "int"
                ]
            }
        },
        "PageObject.has_more": {
            "name": "has_more",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageObject.meta": {
            "name": "meta",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageObject.data": {
            "name": "data",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PageObject.json": {
            "name": "json",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sprinkl-async-master/sprinkl_async/schedule.py": {
        "Schedule.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Callable[(..., Awaitable[dict])]"
                ],
                "adjustments": [
                    "dict"
                ],
                "schedule": [
                    "dict"
                ]
            }
        },
        "Schedule.enabled": {
            "name": "enabled",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sprinkl-async-master/sprinkl_async/schedules.py": {
        "Schedules.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Callable[(..., Awaitable[dict])]"
                ],
                "schedules": [
                    "dict"
                ],
                "adjustments": [
                    "dict"
                ]
            }
        },
        "Schedules.__iter__": {
            "name": "__iter__",
            "location": 37,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schedules.__getitem__": {
            "name": "__getitem__",
            "location": 42,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Schedules.__len__": {
            "name": "__len__",
            "location": 48,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schedules.get": {
            "name": "get",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        }
    },
    "sprinkl-async-master/sprinkl_async/webhook.py": {
        "Webhook.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "webhook": [],
                "request": [
                    "Callable[(..., Awaitable[dict])]"
                ]
            }
        }
    },
    "sprinkl-async-master/sprinkl_async/webhooks.py": {
        "Webhooks.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Callable[(..., Awaitable[dict])]"
                ]
            }
        }
    },
    "sprinkl-async-master/sprinkl_async/webhook_objects.py": {
        "WebhookBaseObject.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "WebhookBaseObject.device_id": {
            "name": "device_id",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebhookBaseObject.webhook_id": {
            "name": "webhook_id",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebhookBaseObject.external_id": {
            "name": "external_id",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebhookBaseObject.event": {
            "name": "event",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebhookBaseObject.data": {
            "name": "data",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sprinkl-async-master/sprinkl_async/zone.py": {
        "Zone.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict"
                ],
                "request": [
                    "Callable[(..., Awaitable[dict])]"
                ]
            }
        },
        "Zone.id": {
            "name": "id",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Zone.number": {
            "name": "number",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Zone.enabled": {
            "name": "enabled",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "sprinkl-async-master/sprinkl_async/zones.py": {
        "Zones.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Callable[(..., Awaitable[dict])]"
                ],
                "zones": [
                    "list"
                ]
            }
        },
        "Zones.__iter__": {
            "name": "__iter__",
            "location": 33,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Zones.__getitem__": {
            "name": "__getitem__",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Zones.__len__": {
            "name": "__len__",
            "location": 44,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Zones.get": {
            "name": "get",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str"
                ]
            }
        },
        "Zones.get_by_number": {
            "name": "get_by_number",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "number": [
                    "int"
                ]
            }
        }
    },
    "sprinkl-async-master/sprinkl_async/__init__.py": {},
    "sprinkl-async-master/sprinkl_async/__version__.py": {},
    "sprinkl-async-master/tests/const.py": {},
    "sprinkl-async-master/tests/test_authtoken.py": {
        "test_token": {
            "name": "test_token",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_no_refresh": {
            "name": "test_no_refresh",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_only_refresh": {
            "name": "test_only_refresh",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sprinkl-async-master/tests/test_client.py": {},
    "sprinkl-async-master/tests/test_controller.py": {
        "test_controller_reauth.login_handler": {
            "name": "login_handler",
            "location": 158,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_controller_failed_reauth.login_handler": {
            "name": "login_handler",
            "location": 216,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "sprinkl-async-master/tests/test_dataobject.py": {
        "test_create_lists": {
            "name": "test_create_lists",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_create_dict": {
            "name": "test_create_dict",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sprinkl-async-master/tests/test_moistersensor.py": {},
    "sprinkl-async-master/tests/test_moistersensors.py": {},
    "sprinkl-async-master/tests/test_pageobject.py": {
        "test_page_properties": {
            "name": "test_page_properties",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_page_properties.request": {
            "name": "request",
            "location": 28,
            "return": [],
            "arguments": {
                "method": [],
                "uri": [],
                "params": []
            }
        }
    },
    "sprinkl-async-master/tests/test_schedule.py": {},
    "sprinkl-async-master/tests/test_schedules.py": {},
    "sprinkl-async-master/tests/test_webhooks.py": {},
    "sprinkl-async-master/tests/test_webhook_objects.py": {
        "test_wh_obj_creation": {
            "name": "test_wh_obj_creation",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "sprinkl-async-master/tests/test_zone.py": {},
    "sprinkl-async-master/tests/test_zones.py": {},
    "sprinkl-async-master/tests/__init__.py": {},
    "sprinkl-async-master/tests/fixtures/__init__.py": {
        "fail_to_authenticate_refresh_token": {
            "name": "fail_to_authenticate_refresh_token",
            "location": 27,
            "return": [],
            "arguments": {
                "event_loop": [],
                "auth_token": [],
                "controller_json": []
            }
        },
        "login_fixture": {
            "name": "login_fixture",
            "location": 47,
            "return": [],
            "arguments": {
                "event_loop": [],
                "auth_token": [],
                "controller_json": []
            }
        },
        "controller_login_fixture": {
            "name": "controller_login_fixture",
            "location": 82,
            "return": [],
            "arguments": {
                "event_loop": [],
                "auth_token": [],
                "controller_json": []
            }
        },
        "authenticated_refresh_token": {
            "name": "authenticated_refresh_token",
            "location": 129,
            "return": [],
            "arguments": {
                "event_loop": [],
                "auth_token": [],
                "controller_json": [],
                "authenticate_token_expired_json": []
            }
        },
        "controller_auth_failure_fixture": {
            "name": "controller_auth_failure_fixture",
            "location": 189,
            "return": [],
            "arguments": {
                "event_loop": [],
                "auth_token": [],
                "controller_json": [],
                "authenticate_token_expired_json": []
            }
        },
        "login_fail_refresh_token": {
            "name": "login_fail_refresh_token",
            "location": 231,
            "return": [],
            "arguments": {
                "event_loop": [],
                "auth_token": [],
                "controller_json": []
            }
        },
        "moister_sensor_get_day_average": {
            "name": "moister_sensor_get_day_average",
            "location": 265,
            "return": [],
            "arguments": {
                "event_loop": [],
                "auth_token": [],
                "controller_json": [],
                "controller_sensor_json": []
            }
        },
        "authenticate_token_expired_json": {
            "name": "authenticate_token_expired_json",
            "location": 346,
            "return": [],
            "arguments": {}
        },
        "auth_token": {
            "name": "auth_token",
            "location": 351,
            "return": [],
            "arguments": {}
        },
        "controller_sensor_json": {
            "name": "controller_sensor_json",
            "location": 362,
            "return": [],
            "arguments": {}
        },
        "webhooks_events_json": {
            "name": "webhooks_events_json",
            "location": 581,
            "return": [],
            "arguments": {}
        },
        "webhook_get_id1_json": {
            "name": "webhook_get_id1_json",
            "location": 600,
            "return": [],
            "arguments": {}
        },
        "webhook_list_json": {
            "name": "webhook_list_json",
            "location": 615,
            "return": [],
            "arguments": {}
        },
        "controller_json": {
            "name": "controller_json",
            "location": 674,
            "return": [],
            "arguments": {}
        },
        "authenticated_refresh_token.handler": {
            "name": "handler",
            "location": 132,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "authenticated_refresh_token.login_handler": {
            "name": "login_handler",
            "location": 143,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    }
}
{
    "stream-listener-master/main.py": {
        "start_heartbeat_thread": {
            "name": "start_heartbeat_thread",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 24,
            "return": [],
            "arguments": {}
        }
    },
    "stream-listener-master/app/app.py": {
        "App.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mq_connector": []
            }
        },
        "App.start": {
            "name": "start",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "App._setup_auth": {
            "name": "_setup_auth",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "App._get_tracked_stocks": {
            "name": "_get_tracked_stocks",
            "location": 46,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "App._setup_tweet_service": {
            "name": "_setup_tweet_service",
            "location": 55,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "mq_connector": []
            }
        }
    },
    "stream-listener-master/app/database.py": {
        "Database.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        }
    },
    "stream-listener-master/app/__init__.py": {},
    "stream-listener-master/app/config/logging.py": {},
    "stream-listener-master/app/config/util.py": {
        "getenv": {
            "name": "getenv",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "key": []
            }
        },
        "get_database_uri": {
            "name": "get_database_uri",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_mq_uri": {
            "name": "get_mq_uri",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "stream-listener-master/app/config/values.py": {},
    "stream-listener-master/app/config/__init__.py": {},
    "stream-listener-master/app/mocks/filter_service.py": {
        "MockFilter.is_spam": {
            "name": "is_spam",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "tweet": []
            }
        }
    },
    "stream-listener-master/app/mocks/ranking_service.py": {
        "MockRanker.rank": {
            "name": "rank",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "tweet": [],
                "links": [],
                "symbols": []
            }
        }
    },
    "stream-listener-master/app/mocks/stream.py": {
        "MockStream.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_dir": [],
                "listener": []
            }
        },
        "MockStream.filter": {
            "name": "filter",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "track": []
            }
        },
        "MockStream.__get_tweets": {
            "name": "__get_tweets",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "stream-listener-master/app/mocks/__init__.py": {},
    "stream-listener-master/app/models/stock.py": {
        "TrackedStock.asdict": {
            "name": "asdict",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Stock.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "symbol": [],
                "name": [],
                "is_active": [],
                "total_count": [],
                "updated_at": []
            }
        },
        "Stock.__repr__": {
            "name": "__repr__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "stream-listener-master/app/models/tweet.py": {
        "Tweet.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "text": [],
                "language": [],
                "author_id": [],
                "author_followers": [],
                "id": []
            }
        },
        "Tweet.__repr__": {
            "name": "__repr__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TweetLink.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "tweet_id": []
            }
        },
        "TweetLink.__repr__": {
            "name": "__repr__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TweetSymbol.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "symbol": [],
                "tweet_id": []
            }
        },
        "TweetSymbol.__repr__": {
            "name": "__repr__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "stream-listener-master/app/models/__init__.py": {},
    "stream-listener-master/app/repository/stock_repo.py": {
        "StockRepo.get_all": {
            "name": "get_all",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "include_inactive": []
            }
        },
        "StockRepo.save": {
            "name": "save",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "stock": []
            }
        },
        "SQLStockRepo.get_all": {
            "name": "get_all",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "include_inactive": []
            }
        },
        "SQLStockRepo.save": {
            "name": "save",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "stock": []
            }
        }
    },
    "stream-listener-master/app/repository/tweet_repo.py": {
        "TweetRepo.save_tweet_content": {
            "name": "save_tweet_content",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "SQLTweetRepo.save_tweet_content": {
            "name": "save_tweet_content",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "SQLTweetRepo._save_tweet": {
            "name": "_save_tweet",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "tweet": []
            }
        },
        "SQLTweetRepo._save_links": {
            "name": "_save_links",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "links": []
            }
        },
        "SQLTweetRepo._save_symbols": {
            "name": "_save_symbols",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "symbols": []
            }
        }
    },
    "stream-listener-master/app/repository/__init__.py": {},
    "stream-listener-master/app/service/filter_service.py": {
        "FilterService.is_spam": {
            "name": "is_spam",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "tweet": []
            }
        },
        "SpamFilterService.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "SpamFilterService.is_spam": {
            "name": "is_spam",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "tweet": []
            }
        },
        "SpamFilterService._create_spam_body": {
            "name": "_create_spam_body",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "tweet": []
            }
        },
        "SpamFilterService._headers": {
            "name": "_headers",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "request_id": []
            }
        },
        "SpamFilterService._tweet_was_spam": {
            "name": "_tweet_was_spam",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "tweet": [],
                "resp": []
            }
        }
    },
    "stream-listener-master/app/service/listener_service.py": {
        "StreamListenerImpl.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tweet_svc": [],
                "twitter_config": []
            }
        },
        "StreamListenerImpl.on_data": {
            "name": "on_data",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "StreamListenerImpl.on_error": {
            "name": "on_error",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status_code": []
            }
        },
        "StreamLogger.on_data": {
            "name": "on_data",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "StreamLogger.on_error": {
            "name": "on_error",
            "location": 53,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "status_code": []
            }
        },
        "StreamLogger.__format_data": {
            "name": "__format_data",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "FileStreamer.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_dir": []
            }
        },
        "FileStreamer.on_data": {
            "name": "on_data",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "FileStreamer.on_error": {
            "name": "on_error",
            "location": 75,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "status_code": []
            }
        },
        "FileStreamer._format_data": {
            "name": "_format_data",
            "location": 79,
            "return": [
                "Tuple[(Any, str)]"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "FileStreamer._save_tweet": {
            "name": "_save_tweet",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "tweet": []
            }
        },
        "FileStreamer._create_dir_if_missing": {
            "name": "_create_dir_if_missing",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "output_dir": []
            }
        }
    },
    "stream-listener-master/app/service/mq.py": {
        "MQConnectionChecker.is_connected": {
            "name": "is_connected",
            "location": 14,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "health_target": []
            }
        },
        "MQConnectionFactory.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "MQConnectionFactory.close": {
            "name": "close",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MQConnectionFactory.get_channel": {
            "name": "get_channel",
            "location": 42,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "MQConnectionFactory.is_connected": {
            "name": "is_connected",
            "location": 45,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "health_target": []
            }
        }
    },
    "stream-listener-master/app/service/ranking_service.py": {
        "create_rank_object": {
            "name": "create_rank_object",
            "location": 108,
            "return": [],
            "arguments": {
                "content": [],
                "subjects": []
            }
        },
        "allowed_link": {
            "name": "allowed_link",
            "location": 127,
            "return": [],
            "arguments": {
                "link": []
            }
        },
        "should_rank": {
            "name": "should_rank",
            "location": 136,
            "return": [],
            "arguments": {
                "rank_object": []
            }
        },
        "RankingService.rank": {
            "name": "rank",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "tweet_content": []
            }
        },
        "MQRankingService.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "tracked": [],
                "config": [],
                "factory": []
            }
        },
        "MQRankingService.__del__": {
            "name": "__del__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MQRankingService.rank": {
            "name": "rank",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "tweet_content": []
            }
        },
        "MQRankingService._send_to_ranker": {
            "name": "_send_to_ranker",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "rank_object": []
            }
        },
        "MQRankingService._create_rank_object": {
            "name": "_create_rank_object",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "RestRankingService.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "tracked": [],
                "config": []
            }
        },
        "RestRankingService.rank": {
            "name": "rank",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "tweet_content": []
            }
        },
        "RestRankingService._send_to_ranker": {
            "name": "_send_to_ranker",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "rank_object": []
            }
        },
        "RestRankingService._create_rank_object": {
            "name": "_create_rank_object",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        }
    },
    "stream-listener-master/app/service/tweet_service.py": {
        "TweetService.handle": {
            "name": "handle",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "raw_tweet": []
            }
        },
        "TweetServiceImpl.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "tracked_symbols": [],
                "filter_svc": [],
                "ranking_svc": [],
                "tweet_repo": []
            }
        },
        "TweetServiceImpl.handle": {
            "name": "handle",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "raw_tweet": []
            }
        },
        "TweetServiceImpl._parse_tweet_contents": {
            "name": "_parse_tweet_contents",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "raw_tweet": []
            }
        },
        "TweetServiceImpl._parse_tweet": {
            "name": "_parse_tweet",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "tweet_dict": []
            }
        },
        "TweetServiceImpl._parse_links": {
            "name": "_parse_links",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "tweet_id": [],
                "tweet_dict": []
            }
        },
        "TweetServiceImpl._parse_url": {
            "name": "_parse_url",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "TweetServiceImpl._parse_symbols": {
            "name": "_parse_symbols",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "tweet_id": [],
                "tweet": []
            }
        },
        "TweetServiceImpl._parse_symbol_text": {
            "name": "_parse_symbol_text",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "tweet": []
            }
        },
        "TweetServiceImpl._parse_symbols_from_entities": {
            "name": "_parse_symbols_from_entities",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "component": []
            }
        },
        "TweetServiceImpl._log_tweet_handling": {
            "name": "_log_tweet_handling",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "content": [],
                "action": []
            }
        }
    },
    "stream-listener-master/app/service/__init__.py": {
        "emit_heartbeats": {
            "name": "emit_heartbeats",
            "location": 20,
            "return": [],
            "arguments": {
                "config": [],
                "checker": []
            }
        }
    },
    "stream-listener-master/migrations/env.py": {
        "get_database_uri": {
            "name": "get_database_uri",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "stream-listener-master/migrations/util.py": {
        "getenv": {
            "name": "getenv",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "key": []
            }
        },
        "get_database_uri": {
            "name": "get_database_uri",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "stream-listener-master/migrations/versions/42f3c49b3461_inital_stock_data.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "stream-listener-master/migrations/versions/8fa168decf74_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "stream-listener-master/migrations/versions/abf6ca815a01_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
{
    "stubs-master/discord/abc.py": {
        "Snowflake.created_at": {
            "name": "created_at",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Snowflake.__subclasshook__": {
            "name": "__subclasshook__",
            "location": 33,
            "return": [],
            "arguments": {
                "cls": [],
                "C": []
            }
        },
        "User.display_name": {
            "name": "display_name",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.mention": {
            "name": "mention",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.__subclasshook__": {
            "name": "__subclasshook__",
            "location": 41,
            "return": [],
            "arguments": {
                "cls": [],
                "C": []
            }
        },
        "PrivateChannel.__subclasshook__": {
            "name": "__subclasshook__",
            "location": 45,
            "return": [],
            "arguments": {
                "cls": [],
                "C": []
            }
        },
        "GuildChannel.changed_roles": {
            "name": "changed_roles",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GuildChannel.mention": {
            "name": "mention",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GuildChannel.created_at": {
            "name": "created_at",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GuildChannel.overwrites_for": {
            "name": "overwrites_for",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "GuildChannel.overwrites": {
            "name": "overwrites",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GuildChannel.category": {
            "name": "category",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GuildChannel.permissions_for": {
            "name": "permissions_for",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "member": []
            }
        },
        "GuildChannel.delete": {
            "name": "delete",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GuildChannel.set_permissions": {
            "name": "set_permissions",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "target": []
            }
        },
        "GuildChannel.create_invite": {
            "name": "create_invite",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GuildChannel.invites": {
            "name": "invites",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Messageable.send": {
            "name": "send",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "Messageable.trigger_typing": {
            "name": "trigger_typing",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Messageable.typing": {
            "name": "typing",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Messageable.get_message": {
            "name": "get_message",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Messageable.pins": {
            "name": "pins",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Messageable.history": {
            "name": "history",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connectable.connect": {
            "name": "connect",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "stubs-master/discord/activity.py": {
        "Activity.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Activity.to_dict": {
            "name": "to_dict",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Activity.start": {
            "name": "start",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Activity.end": {
            "name": "end",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Activity.large_image_url": {
            "name": "large_image_url",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Activity.small_image_url": {
            "name": "small_image_url",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Activity.large_image_text": {
            "name": "large_image_text",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Activity.small_image_text": {
            "name": "small_image_text",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Game.type": {
            "name": "type",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.start": {
            "name": "start",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.end": {
            "name": "end",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.to_dict": {
            "name": "to_dict",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.__eq__": {
            "name": "__eq__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Game.__ne__": {
            "name": "__ne__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Game.__hash__": {
            "name": "__hash__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Streaming.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "url": []
            }
        },
        "Streaming.type": {
            "name": "type",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Streaming.twitch_name": {
            "name": "twitch_name",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Streaming.to_dict": {
            "name": "to_dict",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Streaming.__eq__": {
            "name": "__eq__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Streaming.__ne__": {
            "name": "__ne__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Streaming.__hash__": {
            "name": "__hash__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Spotify.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Spotify.type": {
            "name": "type",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Spotify.colour": {
            "name": "colour",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Spotify.color": {
            "name": "color",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Spotify.to_dict": {
            "name": "to_dict",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Spotify.name": {
            "name": "name",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Spotify.__eq__": {
            "name": "__eq__",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Spotify.__ne__": {
            "name": "__ne__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Spotify.__hash__": {
            "name": "__hash__",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Spotify.title": {
            "name": "title",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Spotify.artists": {
            "name": "artists",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Spotify.artist": {
            "name": "artist",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Spotify.album": {
            "name": "album",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Spotify.album_cover_url": {
            "name": "album_cover_url",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Spotify.track_id": {
            "name": "track_id",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Spotify.start": {
            "name": "start",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Spotify.end": {
            "name": "end",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Spotify.duration": {
            "name": "duration",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Spotify.party_id": {
            "name": "party_id",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "stubs-master/discord/audit_logs.py": {
        "AuditLogDiff.__len__": {
            "name": "__len__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuditLogDiff.__iter__": {
            "name": "__iter__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuditLogChanges.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "entry": [],
                "data": []
            }
        },
        "AuditLogEntry.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "users": [],
                "data": [],
                "guild": []
            }
        },
        "AuditLogEntry.created_at": {
            "name": "created_at",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuditLogEntry.target": {
            "name": "target",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuditLogEntry.category": {
            "name": "category",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuditLogEntry.changes": {
            "name": "changes",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuditLogEntry.before": {
            "name": "before",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuditLogEntry.after": {
            "name": "after",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "stubs-master/discord/backoff.py": {
        "ExponentialBackoff.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "base": []
            }
        },
        "ExponentialBackoff.delay": {
            "name": "delay",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "stubs-master/discord/bin.py": {},
    "stubs-master/discord/calls.py": {
        "CallMessage.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "CallMessage.call_ended": {
            "name": "call_ended",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CallMessage.channel": {
            "name": "channel",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CallMessage.duration": {
            "name": "duration",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupCall.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupCall.connected": {
            "name": "connected",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupCall.channel": {
            "name": "channel",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupCall.voice_state_for": {
            "name": "voice_state_for",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        }
    },
    "stubs-master/discord/channel.py": {
        "TextChannel.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "guild": [],
                "data": []
            }
        },
        "TextChannel.permissions_for": {
            "name": "permissions_for",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "member": []
            }
        },
        "TextChannel.members": {
            "name": "members",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextChannel.is_nsfw": {
            "name": "is_nsfw",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextChannel.edit": {
            "name": "edit",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextChannel.delete_messages": {
            "name": "delete_messages",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "messages": []
            }
        },
        "TextChannel.purge": {
            "name": "purge",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextChannel.webhooks": {
            "name": "webhooks",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextChannel.create_webhook": {
            "name": "create_webhook",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VoiceChannel.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "guild": [],
                "data": []
            }
        },
        "VoiceChannel.members": {
            "name": "members",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VoiceChannel.edit": {
            "name": "edit",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CategoryChannel.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "guild": [],
                "data": []
            }
        },
        "CategoryChannel.is_nsfw": {
            "name": "is_nsfw",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CategoryChannel.edit": {
            "name": "edit",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CategoryChannel.channels": {
            "name": "channels",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DMChannel.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "me": [],
                "state": [],
                "data": []
            }
        },
        "DMChannel.created_at": {
            "name": "created_at",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DMChannel.permissions_for": {
            "name": "permissions_for",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "GroupChannel.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "me": [],
                "state": [],
                "data": []
            }
        },
        "GroupChannel.icon_url": {
            "name": "icon_url",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupChannel.created_at": {
            "name": "created_at",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupChannel.permissions_for": {
            "name": "permissions_for",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "GroupChannel.add_recipients": {
            "name": "add_recipients",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupChannel.remove_recipients": {
            "name": "remove_recipients",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupChannel.edit": {
            "name": "edit",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupChannel.leave": {
            "name": "leave",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "stubs-master/discord/client.py": {
        "app_info_icon_url": {
            "name": "app_info_icon_url",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.handle_ready": {
            "name": "handle_ready",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.latency": {
            "name": "latency",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.user": {
            "name": "user",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.guilds": {
            "name": "guilds",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.emojis": {
            "name": "emojis",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.private_channels": {
            "name": "private_channels",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.voice_clients": {
            "name": "voice_clients",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.is_ready": {
            "name": "is_ready",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.dispatch": {
            "name": "dispatch",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "Client.on_error": {
            "name": "on_error",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "event_method": []
            }
        },
        "Client.request_offline_members": {
            "name": "request_offline_members",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.login": {
            "name": "login",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "Client.logout": {
            "name": "logout",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.connect": {
            "name": "connect",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.close": {
            "name": "close",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.clear": {
            "name": "clear",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.start": {
            "name": "start",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.run": {
            "name": "run",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.is_closed": {
            "name": "is_closed",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.activity": {
            "name": "activity",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Client.users": {
            "name": "users",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.get_channel": {
            "name": "get_channel",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Client.get_guild": {
            "name": "get_guild",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Client.get_user": {
            "name": "get_user",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Client.get_emoji": {
            "name": "get_emoji",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Client.get_all_channels": {
            "name": "get_all_channels",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.get_all_members": {
            "name": "get_all_members",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.wait_until_ready": {
            "name": "wait_until_ready",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.wait_for": {
            "name": "wait_for",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "Client.event": {
            "name": "event",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "coro": []
            }
        },
        "Client.async_event": {
            "name": "async_event",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "coro": []
            }
        },
        "Client.change_presence": {
            "name": "change_presence",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.create_guild": {
            "name": "create_guild",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "region": [],
                "icon": []
            }
        },
        "Client.get_invite": {
            "name": "get_invite",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "Client.delete_invite": {
            "name": "delete_invite",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "invite": []
            }
        },
        "Client.application_info": {
            "name": "application_info",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Client.get_user_info": {
            "name": "get_user_info",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "Client.get_user_profile": {
            "name": "get_user_profile",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "Client.get_webhook_info": {
            "name": "get_webhook_info",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "webhook_id": []
            }
        }
    },
    "stubs-master/discord/colour.py": {
        "Colour.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Colour.__eq__": {
            "name": "__eq__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Colour.__ne__": {
            "name": "__ne__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Colour.__hash__": {
            "name": "__hash__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Colour.r": {
            "name": "r",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Colour.g": {
            "name": "g",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Colour.b": {
            "name": "b",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Colour.to_rgb": {
            "name": "to_rgb",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Colour.from_rgb": {
            "name": "from_rgb",
            "location": 21,
            "return": [],
            "arguments": {
                "cls": [],
                "r": [],
                "g": [],
                "b": []
            }
        },
        "Colour.default": {
            "name": "default",
            "location": 23,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Colour.teal": {
            "name": "teal",
            "location": 25,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Colour.dark_teal": {
            "name": "dark_teal",
            "location": 27,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Colour.green": {
            "name": "green",
            "location": 29,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Colour.dark_green": {
            "name": "dark_green",
            "location": 31,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Colour.blue": {
            "name": "blue",
            "location": 33,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Colour.dark_blue": {
            "name": "dark_blue",
            "location": 35,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Colour.purple": {
            "name": "purple",
            "location": 37,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Colour.dark_purple": {
            "name": "dark_purple",
            "location": 39,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Colour.magenta": {
            "name": "magenta",
            "location": 41,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Colour.dark_magenta": {
            "name": "dark_magenta",
            "location": 43,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Colour.gold": {
            "name": "gold",
            "location": 45,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Colour.dark_gold": {
            "name": "dark_gold",
            "location": 47,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Colour.orange": {
            "name": "orange",
            "location": 49,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Colour.dark_orange": {
            "name": "dark_orange",
            "location": 51,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Colour.red": {
            "name": "red",
            "location": 53,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Colour.dark_red": {
            "name": "dark_red",
            "location": 55,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Colour.lighter_grey": {
            "name": "lighter_grey",
            "location": 57,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Colour.dark_grey": {
            "name": "dark_grey",
            "location": 59,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Colour.light_grey": {
            "name": "light_grey",
            "location": 61,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Colour.darker_grey": {
            "name": "darker_grey",
            "location": 63,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Colour.blurple": {
            "name": "blurple",
            "location": 65,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Colour.greyple": {
            "name": "greyple",
            "location": 67,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "stubs-master/discord/compat.py": {
        "create_future": {
            "name": "create_future",
            "location": 8,
            "return": [],
            "arguments": {
                "loop": []
            }
        }
    },
    "stubs-master/discord/context_managers.py": {
        "Typing.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "messageable": []
            }
        },
        "Typing.do_typing": {
            "name": "do_typing",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Typing.__enter__": {
            "name": "__enter__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Typing.__exit__": {
            "name": "__exit__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc": [],
                "tb": []
            }
        },
        "Typing.__aenter__": {
            "name": "__aenter__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Typing.__aexit__": {
            "name": "__aexit__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc": [],
                "tb": []
            }
        }
    },
    "stubs-master/discord/embeds.py": {
        "_EmptyEmbed.__bool__": {
            "name": "__bool__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmbedProxy.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "layer": []
            }
        },
        "EmbedProxy.__len__": {
            "name": "__len__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EmbedProxy.__getattr__": {
            "name": "__getattr__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "attr": []
            }
        },
        "Embed.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Embed.from_data": {
            "name": "from_data",
            "location": 28,
            "return": [],
            "arguments": {
                "cls": [],
                "data": []
            }
        },
        "Embed.colour": {
            "name": "colour",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Embed.timestamp": {
            "name": "timestamp",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Embed.footer": {
            "name": "footer",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Embed.set_footer": {
            "name": "set_footer",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Embed.image": {
            "name": "image",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Embed.set_image": {
            "name": "set_image",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "Embed.thumbnail": {
            "name": "thumbnail",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Embed.set_thumbnail": {
            "name": "set_thumbnail",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "Embed.video": {
            "name": "video",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Embed.provider": {
            "name": "provider",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Embed.author": {
            "name": "author",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Embed.set_author": {
            "name": "set_author",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Embed.fields": {
            "name": "fields",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Embed.add_field": {
            "name": "add_field",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "value": []
            }
        },
        "Embed.clear_fields": {
            "name": "clear_fields",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Embed.remove_field": {
            "name": "remove_field",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "Embed.set_field_at": {
            "name": "set_field_at",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "index": [],
                "name": [],
                "value": []
            }
        },
        "Embed.to_dict": {
            "name": "to_dict",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "stubs-master/discord/emoji.py": {
        "PartialEmoji.is_custom_emoji": {
            "name": "is_custom_emoji",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PartialEmoji.is_unicode_emoji": {
            "name": "is_unicode_emoji",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PartialEmoji.url": {
            "name": "url",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Emoji.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "guild": [],
                "state": [],
                "data": []
            }
        },
        "Emoji.__iter__": {
            "name": "__iter__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Emoji.created_at": {
            "name": "created_at",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Emoji.url": {
            "name": "url",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Emoji.roles": {
            "name": "roles",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Emoji.guild": {
            "name": "guild",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Emoji.delete": {
            "name": "delete",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Emoji.edit": {
            "name": "edit",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "stubs-master/discord/enums.py": {
        "AuditLogAction.category": {
            "name": "category",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuditLogAction.target_type": {
            "name": "target_type",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "stubs-master/discord/errors.py": {
        "flatten_error_dict": {
            "name": "flatten_error_dict",
            "location": 14,
            "return": [],
            "arguments": {
                "d": [],
                "key": []
            }
        },
        "GatewayNotFound.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPException.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "response": [],
                "message": []
            }
        },
        "ConnectionClosed.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "original": [],
                "shard_id": []
            }
        }
    },
    "stubs-master/discord/file.py": {
        "File.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "fp": [],
                "filename": []
            }
        },
        "File.open_file": {
            "name": "open_file",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "File.close": {
            "name": "close",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "stubs-master/discord/gateway.py": {
        "ResumeWebSocket.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "shard_id": []
            }
        },
        "KeepAliveHandler.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeepAliveHandler.run": {
            "name": "run",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeepAliveHandler.get_payload": {
            "name": "get_payload",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeepAliveHandler.stop": {
            "name": "stop",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KeepAliveHandler.ack": {
            "name": "ack",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VoiceKeepAliveHandler.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VoiceKeepAliveHandler.get_payload": {
            "name": "get_payload",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscordWebSocket.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscordWebSocket.from_client": {
            "name": "from_client",
            "location": 53,
            "return": [],
            "arguments": {
                "cls": [],
                "client": []
            }
        },
        "DiscordWebSocket.wait_for": {
            "name": "wait_for",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "event": [],
                "predicate": [],
                "result": []
            }
        },
        "DiscordWebSocket.identify": {
            "name": "identify",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscordWebSocket.resume": {
            "name": "resume",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscordWebSocket.received_message": {
            "name": "received_message",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "DiscordWebSocket.latency": {
            "name": "latency",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscordWebSocket.poll_event": {
            "name": "poll_event",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscordWebSocket.send": {
            "name": "send",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "DiscordWebSocket.send_as_json": {
            "name": "send_as_json",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "DiscordWebSocket.change_presence": {
            "name": "change_presence",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscordWebSocket.request_sync": {
            "name": "request_sync",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "guild_ids": []
            }
        },
        "DiscordWebSocket.voice_state": {
            "name": "voice_state",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "guild_id": [],
                "channel_id": [],
                "self_mute": [],
                "self_deaf": []
            }
        },
        "DiscordWebSocket.close_connection": {
            "name": "close_connection",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscordVoiceWebSocket.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscordVoiceWebSocket.send_as_json": {
            "name": "send_as_json",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "DiscordVoiceWebSocket.resume": {
            "name": "resume",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscordVoiceWebSocket.identify": {
            "name": "identify",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscordVoiceWebSocket.from_client": {
            "name": "from_client",
            "location": 106,
            "return": [],
            "arguments": {
                "cls": [],
                "client": []
            }
        },
        "DiscordVoiceWebSocket.select_protocol": {
            "name": "select_protocol",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "ip": [],
                "port": []
            }
        },
        "DiscordVoiceWebSocket.speak": {
            "name": "speak",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "is_speaking": []
            }
        },
        "DiscordVoiceWebSocket.received_message": {
            "name": "received_message",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "DiscordVoiceWebSocket.initial_connection": {
            "name": "initial_connection",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "DiscordVoiceWebSocket.load_secret_key": {
            "name": "load_secret_key",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "DiscordVoiceWebSocket.poll_event": {
            "name": "poll_event",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DiscordVoiceWebSocket.close_connection": {
            "name": "close_connection",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "stubs-master/discord/guild.py": {
        "Guild.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "state": []
            }
        },
        "Guild.channels": {
            "name": "channels",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Guild.large": {
            "name": "large",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Guild.voice_channels": {
            "name": "voice_channels",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Guild.me": {
            "name": "me",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Guild.voice_client": {
            "name": "voice_client",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Guild.text_channels": {
            "name": "text_channels",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Guild.categories": {
            "name": "categories",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Guild.by_category": {
            "name": "by_category",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Guild.get_channel": {
            "name": "get_channel",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "channel_id": []
            }
        },
        "Guild.system_channel": {
            "name": "system_channel",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Guild.members": {
            "name": "members",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Guild.get_member": {
            "name": "get_member",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "Guild.default_role": {
            "name": "default_role",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Guild.owner": {
            "name": "owner",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Guild.icon_url": {
            "name": "icon_url",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Guild.icon_url_as": {
            "name": "icon_url_as",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Guild.splash_url": {
            "name": "splash_url",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Guild.member_count": {
            "name": "member_count",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Guild.chunked": {
            "name": "chunked",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Guild.shard_id": {
            "name": "shard_id",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Guild.created_at": {
            "name": "created_at",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Guild.role_hierarchy": {
            "name": "role_hierarchy",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Guild.get_member_named": {
            "name": "get_member_named",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Guild.create_text_channel": {
            "name": "create_text_channel",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Guild.create_voice_channel": {
            "name": "create_voice_channel",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Guild.create_category": {
            "name": "create_category",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Guild.leave": {
            "name": "leave",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Guild.delete": {
            "name": "delete",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Guild.edit": {
            "name": "edit",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Guild.get_ban": {
            "name": "get_ban",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Guild.bans": {
            "name": "bans",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Guild.prune_members": {
            "name": "prune_members",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "days": []
            }
        },
        "Guild.webhooks": {
            "name": "webhooks",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Guild.estimate_pruned_members": {
            "name": "estimate_pruned_members",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "days": []
            }
        },
        "Guild.invites": {
            "name": "invites",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Guild.create_custom_emoji": {
            "name": "create_custom_emoji",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "image": []
            }
        },
        "Guild.create_role": {
            "name": "create_role",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Guild.kick": {
            "name": "kick",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Guild.ban": {
            "name": "ban",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Guild.unban": {
            "name": "unban",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "Guild.vanity_invite": {
            "name": "vanity_invite",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Guild.ack": {
            "name": "ack",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Guild.audit_logs": {
            "name": "audit_logs",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "stubs-master/discord/http.py": {
        "json_or_text": {
            "name": "json_or_text",
            "location": 9,
            "return": [],
            "arguments": {
                "response": []
            }
        },
        "Route.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "method": [],
                "path": []
            }
        },
        "Route.bucket": {
            "name": "bucket",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MaybeUnlock.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "lock": []
            }
        },
        "MaybeUnlock.__enter__": {
            "name": "__enter__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MaybeUnlock.defer": {
            "name": "defer",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MaybeUnlock.__exit__": {
            "name": "__exit__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "type": [],
                "value": [],
                "traceback": []
            }
        },
        "HTTPClient.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "connector": []
            }
        },
        "HTTPClient.recreate": {
            "name": "recreate",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPClient.request": {
            "name": "request",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "route": []
            }
        },
        "HTTPClient.get_attachment": {
            "name": "get_attachment",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "HTTPClient.close": {
            "name": "close",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPClient.static_login": {
            "name": "static_login",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "token": [],
                "bot": []
            }
        },
        "HTTPClient.logout": {
            "name": "logout",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPClient.start_group": {
            "name": "start_group",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": [],
                "recipients": []
            }
        },
        "HTTPClient.leave_group": {
            "name": "leave_group",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "channel_id": []
            }
        },
        "HTTPClient.add_group_recipient": {
            "name": "add_group_recipient",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "channel_id": [],
                "user_id": []
            }
        },
        "HTTPClient.remove_group_recipient": {
            "name": "remove_group_recipient",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "channel_id": [],
                "user_id": []
            }
        },
        "HTTPClient.edit_group": {
            "name": "edit_group",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "channel_id": []
            }
        },
        "HTTPClient.convert_group": {
            "name": "convert_group",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "channel_id": []
            }
        },
        "HTTPClient.start_private_message": {
            "name": "start_private_message",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "HTTPClient.send_message": {
            "name": "send_message",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "channel_id": [],
                "content": []
            }
        },
        "HTTPClient.send_typing": {
            "name": "send_typing",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "channel_id": []
            }
        },
        "HTTPClient.send_files": {
            "name": "send_files",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "channel_id": [],
                "files": []
            }
        },
        "HTTPClient.ack_message": {
            "name": "ack_message",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "channel_id": [],
                "message_id": []
            }
        },
        "HTTPClient.ack_guild": {
            "name": "ack_guild",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "guild_id": []
            }
        },
        "HTTPClient.delete_message": {
            "name": "delete_message",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "channel_id": [],
                "message_id": []
            }
        },
        "HTTPClient.delete_messages": {
            "name": "delete_messages",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "channel_id": [],
                "message_ids": []
            }
        },
        "HTTPClient.edit_message": {
            "name": "edit_message",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "message_id": [],
                "channel_id": []
            }
        },
        "HTTPClient.add_reaction": {
            "name": "add_reaction",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "message_id": [],
                "channel_id": [],
                "emoji": []
            }
        },
        "HTTPClient.remove_reaction": {
            "name": "remove_reaction",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "message_id": [],
                "channel_id": [],
                "emoji": [],
                "member_id": []
            }
        },
        "HTTPClient.remove_own_reaction": {
            "name": "remove_own_reaction",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "message_id": [],
                "channel_id": [],
                "emoji": []
            }
        },
        "HTTPClient.get_reaction_users": {
            "name": "get_reaction_users",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "message_id": [],
                "channel_id": [],
                "emoji": [],
                "limit": [],
                "after": []
            }
        },
        "HTTPClient.clear_reactions": {
            "name": "clear_reactions",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "message_id": [],
                "channel_id": []
            }
        },
        "HTTPClient.get_message": {
            "name": "get_message",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "channel_id": [],
                "message_id": []
            }
        },
        "HTTPClient.logs_from": {
            "name": "logs_from",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "channel_id": [],
                "limit": [],
                "before": [],
                "after": [],
                "around": []
            }
        },
        "HTTPClient.pin_message": {
            "name": "pin_message",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "channel_id": [],
                "message_id": []
            }
        },
        "HTTPClient.unpin_message": {
            "name": "unpin_message",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "channel_id": [],
                "message_id": []
            }
        },
        "HTTPClient.pins_from": {
            "name": "pins_from",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "channel_id": []
            }
        },
        "HTTPClient.kick": {
            "name": "kick",
            "location": 117,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": [],
                "guild_id": [],
                "reason": []
            }
        },
        "HTTPClient.ban": {
            "name": "ban",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": [],
                "guild_id": [],
                "delete_message_days": [],
                "reason": []
            }
        },
        "HTTPClient.unban": {
            "name": "unban",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": [],
                "guild_id": []
            }
        },
        "HTTPClient.guild_voice_state": {
            "name": "guild_voice_state",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": [],
                "guild_id": []
            }
        },
        "HTTPClient.edit_profile": {
            "name": "edit_profile",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "password": [],
                "username": [],
                "avatar": []
            }
        },
        "HTTPClient.change_my_nickname": {
            "name": "change_my_nickname",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "guild_id": [],
                "nickname": []
            }
        },
        "HTTPClient.change_nickname": {
            "name": "change_nickname",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "guild_id": [],
                "user_id": [],
                "nickname": []
            }
        },
        "HTTPClient.edit_member": {
            "name": "edit_member",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "guild_id": [],
                "user_id": []
            }
        },
        "HTTPClient.edit_channel": {
            "name": "edit_channel",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "channel_id": []
            }
        },
        "HTTPClient.bulk_channel_update": {
            "name": "bulk_channel_update",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "guild_id": [],
                "data": []
            }
        },
        "HTTPClient.create_channel": {
            "name": "create_channel",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "guild_id": [],
                "name": [],
                "channel_type": [],
                "parent_id": [],
                "permission_overwrites": []
            }
        },
        "HTTPClient.delete_channel": {
            "name": "delete_channel",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "channel_id": []
            }
        },
        "HTTPClient.create_webhook": {
            "name": "create_webhook",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "channel_id": []
            }
        },
        "HTTPClient.channel_webhooks": {
            "name": "channel_webhooks",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "channel_id": []
            }
        },
        "HTTPClient.guild_webhooks": {
            "name": "guild_webhooks",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "guild_id": []
            }
        },
        "HTTPClient.get_webhook": {
            "name": "get_webhook",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "webhook_id": []
            }
        },
        "HTTPClient.leave_guild": {
            "name": "leave_guild",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "guild_id": []
            }
        },
        "HTTPClient.delete_guild": {
            "name": "delete_guild",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "guild_id": []
            }
        },
        "HTTPClient.create_guild": {
            "name": "create_guild",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "region": [],
                "icon": []
            }
        },
        "HTTPClient.edit_guild": {
            "name": "edit_guild",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "guild_id": []
            }
        },
        "HTTPClient.get_bans": {
            "name": "get_bans",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "guild_id": []
            }
        },
        "HTTPClient.get_ban": {
            "name": "get_ban",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": [],
                "guild_id": []
            }
        },
        "HTTPClient.get_vanity_code": {
            "name": "get_vanity_code",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "guild_id": []
            }
        },
        "HTTPClient.change_vanity_code": {
            "name": "change_vanity_code",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "guild_id": [],
                "code": []
            }
        },
        "HTTPClient.prune_members": {
            "name": "prune_members",
            "location": 182,
            "return": [],
            "arguments": {
                "self": [],
                "guild_id": [],
                "days": []
            }
        },
        "HTTPClient.estimate_pruned_members": {
            "name": "estimate_pruned_members",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "guild_id": [],
                "days": []
            }
        },
        "HTTPClient.create_custom_emoji": {
            "name": "create_custom_emoji",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "guild_id": [],
                "name": [],
                "image": []
            }
        },
        "HTTPClient.delete_custom_emoji": {
            "name": "delete_custom_emoji",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "guild_id": [],
                "emoji_id": []
            }
        },
        "HTTPClient.edit_custom_emoji": {
            "name": "edit_custom_emoji",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "guild_id": [],
                "emoji_id": [],
                "name": []
            }
        },
        "HTTPClient.get_audit_logs": {
            "name": "get_audit_logs",
            "location": 195,
            "return": [],
            "arguments": {
                "self": [],
                "guild_id": [],
                "limit": [],
                "before": [],
                "after": [],
                "user_id": [],
                "action_type": []
            }
        },
        "HTTPClient.create_invite": {
            "name": "create_invite",
            "location": 204,
            "return": [],
            "arguments": {
                "self": [],
                "channel_id": []
            }
        },
        "HTTPClient.get_invite": {
            "name": "get_invite",
            "location": 207,
            "return": [],
            "arguments": {
                "self": [],
                "invite_id": []
            }
        },
        "HTTPClient.invites_from": {
            "name": "invites_from",
            "location": 208,
            "return": [],
            "arguments": {
                "self": [],
                "guild_id": []
            }
        },
        "HTTPClient.invites_from_channel": {
            "name": "invites_from_channel",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "channel_id": []
            }
        },
        "HTTPClient.delete_invite": {
            "name": "delete_invite",
            "location": 210,
            "return": [],
            "arguments": {
                "self": [],
                "invite_id": []
            }
        },
        "HTTPClient.edit_role": {
            "name": "edit_role",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "guild_id": [],
                "role_id": []
            }
        },
        "HTTPClient.delete_role": {
            "name": "delete_role",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "guild_id": [],
                "role_id": []
            }
        },
        "HTTPClient.replace_roles": {
            "name": "replace_roles",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": [],
                "guild_id": [],
                "role_ids": []
            }
        },
        "HTTPClient.create_role": {
            "name": "create_role",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "guild_id": []
            }
        },
        "HTTPClient.move_role_position": {
            "name": "move_role_position",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "guild_id": [],
                "positions": []
            }
        },
        "HTTPClient.add_role": {
            "name": "add_role",
            "location": 226,
            "return": [],
            "arguments": {
                "self": [],
                "guild_id": [],
                "user_id": [],
                "role_id": []
            }
        },
        "HTTPClient.remove_role": {
            "name": "remove_role",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "guild_id": [],
                "user_id": [],
                "role_id": []
            }
        },
        "HTTPClient.edit_channel_permissions": {
            "name": "edit_channel_permissions",
            "location": 232,
            "return": [],
            "arguments": {
                "self": [],
                "channel_id": [],
                "target": [],
                "allow": [],
                "deny": [],
                "type": []
            }
        },
        "HTTPClient.delete_channel_permissions": {
            "name": "delete_channel_permissions",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "channel_id": [],
                "target": []
            }
        },
        "HTTPClient.move_member": {
            "name": "move_member",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": [],
                "guild_id": [],
                "channel_id": []
            }
        },
        "HTTPClient.remove_relationship": {
            "name": "remove_relationship",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "HTTPClient.add_relationship": {
            "name": "add_relationship",
            "location": 254,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": [],
                "type": []
            }
        },
        "HTTPClient.send_friend_request": {
            "name": "send_friend_request",
            "location": 255,
            "return": [],
            "arguments": {
                "self": [],
                "username": [],
                "discriminator": []
            }
        },
        "HTTPClient.application_info": {
            "name": "application_info",
            "location": 256,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPClient.get_gateway": {
            "name": "get_gateway",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPClient.get_bot_gateway": {
            "name": "get_bot_gateway",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HTTPClient.get_user_info": {
            "name": "get_user_info",
            "location": 261,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "HTTPClient.get_user_profile": {
            "name": "get_user_profile",
            "location": 262,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": []
            }
        }
    },
    "stubs-master/discord/invite.py": {
        "Invite.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "data": []
            }
        },
        "Invite.from_incomplete": {
            "name": "from_incomplete",
            "location": 22,
            "return": [],
            "arguments": {
                "cls": [],
                "state": [],
                "data": []
            }
        },
        "Invite.__hash__": {
            "name": "__hash__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Invite.id": {
            "name": "id",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Invite.url": {
            "name": "url",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Invite.delete": {
            "name": "delete",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "stubs-master/discord/iterators.py": {
        "_AsyncIterator.get": {
            "name": "get",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AsyncIterator.find": {
            "name": "find",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "predicate": []
            }
        },
        "_AsyncIterator.map": {
            "name": "map",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "_AsyncIterator.filter": {
            "name": "filter",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "predicate": []
            }
        },
        "_AsyncIterator.flatten": {
            "name": "flatten",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AsyncIterator.__aiter__": {
            "name": "__aiter__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_AsyncIterator.__anext__": {
            "name": "__anext__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_MappedAsyncIterator.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "iterator": [],
                "func": []
            }
        },
        "_MappedAsyncIterator.next": {
            "name": "next",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_FilteredAsyncIterator.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "iterator": [],
                "predicate": []
            }
        },
        "_FilteredAsyncIterator.next": {
            "name": "next",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReactionIterator.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "emoji": [],
                "limit": [],
                "after": []
            }
        },
        "ReactionIterator.next": {
            "name": "next",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReactionIterator.fill_users": {
            "name": "fill_users",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HistoryIterator.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "messageable": [],
                "limit": [],
                "before": [],
                "after": [],
                "around": [],
                "reverse": []
            }
        },
        "HistoryIterator.next": {
            "name": "next",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HistoryIterator.flatten": {
            "name": "flatten",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HistoryIterator.fill_messages": {
            "name": "fill_messages",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AuditLogIterator.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "guild": [],
                "limit": [],
                "before": [],
                "after": [],
                "reverse": [],
                "user_id": [],
                "action_type": []
            }
        },
        "AuditLogIterator.next": {
            "name": "next",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "stubs-master/discord/member.py": {
        "flatten_user": {
            "name": "flatten_user",
            "location": 17,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "VoiceState.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Member.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "guild": [],
                "state": []
            }
        },
        "Member.__eq__": {
            "name": "__eq__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Member.__ne__": {
            "name": "__ne__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Member.__hash__": {
            "name": "__hash__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Member.colour": {
            "name": "colour",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Member.mention": {
            "name": "mention",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Member.display_name": {
            "name": "display_name",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Member.mentioned_in": {
            "name": "mentioned_in",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Member.permissions_in": {
            "name": "permissions_in",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "Member.top_role": {
            "name": "top_role",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Member.guild_permissions": {
            "name": "guild_permissions",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Member.voice": {
            "name": "voice",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Member.ban": {
            "name": "ban",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Member.unban": {
            "name": "unban",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Member.kick": {
            "name": "kick",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Member.edit": {
            "name": "edit",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Member.move_to": {
            "name": "move_to",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "Member.add_roles": {
            "name": "add_roles",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Member.remove_roles": {
            "name": "remove_roles",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "stubs-master/discord/message.py": {
        "Attachment.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "state": []
            }
        },
        "Attachment.save": {
            "name": "save",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "fp": []
            }
        },
        "Message.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "channel": [],
                "data": []
            }
        },
        "Message.guild": {
            "name": "guild",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.raw_mentions": {
            "name": "raw_mentions",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.raw_channel_mentions": {
            "name": "raw_channel_mentions",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.raw_role_mentions": {
            "name": "raw_role_mentions",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.channel_mentions": {
            "name": "channel_mentions",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.clean_content": {
            "name": "clean_content",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.created_at": {
            "name": "created_at",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.edited_at": {
            "name": "edited_at",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.system_content": {
            "name": "system_content",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.delete": {
            "name": "delete",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.edit": {
            "name": "edit",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.pin": {
            "name": "pin",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.unpin": {
            "name": "unpin",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.add_reaction": {
            "name": "add_reaction",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "emoji": []
            }
        },
        "Message.remove_reaction": {
            "name": "remove_reaction",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "emoji": [],
                "member": []
            }
        },
        "Message.clear_reactions": {
            "name": "clear_reactions",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Message.ack": {
            "name": "ack",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "stubs-master/discord/mixins.py": {
        "EqualityComparable.__eq__": {
            "name": "__eq__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "EqualityComparable.__ne__": {
            "name": "__ne__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Hashable.__hash__": {
            "name": "__hash__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "stubs-master/discord/object.py": {
        "Object.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Object.created_at": {
            "name": "created_at",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "stubs-master/discord/opus.py": {
        "libopus_loader": {
            "name": "libopus_loader",
            "location": 18,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "load_opus": {
            "name": "load_opus",
            "location": 19,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "is_loaded": {
            "name": "is_loaded",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "OpusError.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "code": []
            }
        },
        "Encoder.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "application": []
            }
        },
        "Encoder.__del__": {
            "name": "__del__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Encoder.set_bitrate": {
            "name": "set_bitrate",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "kbps": []
            }
        },
        "Encoder.set_bandwidth": {
            "name": "set_bandwidth",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "req": []
            }
        },
        "Encoder.set_signal_type": {
            "name": "set_signal_type",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "req": []
            }
        },
        "Encoder.set_fec": {
            "name": "set_fec",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "enabled": []
            }
        },
        "Encoder.set_expected_packet_loss_percent": {
            "name": "set_expected_packet_loss_percent",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "percentage": []
            }
        },
        "Encoder.encode": {
            "name": "encode",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "pcm": [],
                "frame_size": []
            }
        }
    },
    "stubs-master/discord/permissions.py": {
        "augment_from_permissions": {
            "name": "augment_from_permissions",
            "location": 149,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Permissions.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "permissions": []
            }
        },
        "Permissions.__eq__": {
            "name": "__eq__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Permissions.__ne__": {
            "name": "__ne__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Permissions.__hash__": {
            "name": "__hash__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Permissions.__iter__": {
            "name": "__iter__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Permissions.is_subset": {
            "name": "is_subset",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Permissions.is_superset": {
            "name": "is_superset",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Permissions.is_strict_subset": {
            "name": "is_strict_subset",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Permissions.is_strict_superset": {
            "name": "is_strict_superset",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Permissions.none": {
            "name": "none",
            "location": 23,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Permissions.all": {
            "name": "all",
            "location": 25,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Permissions.all_channel": {
            "name": "all_channel",
            "location": 27,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Permissions.general": {
            "name": "general",
            "location": 29,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Permissions.text": {
            "name": "text",
            "location": 31,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Permissions.voice": {
            "name": "voice",
            "location": 33,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Permissions.update": {
            "name": "update",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Permissions.handle_overwrite": {
            "name": "handle_overwrite",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "allow": [],
                "deny": []
            }
        },
        "Permissions.create_instant_invite": {
            "name": "create_instant_invite",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Permissions.kick_members": {
            "name": "kick_members",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Permissions.ban_members": {
            "name": "ban_members",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Permissions.administrator": {
            "name": "administrator",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Permissions.manage_channels": {
            "name": "manage_channels",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Permissions.manage_guild": {
            "name": "manage_guild",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Permissions.add_reactions": {
            "name": "add_reactions",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Permissions.view_audit_log": {
            "name": "view_audit_log",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Permissions.read_messages": {
            "name": "read_messages",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Permissions.send_messages": {
            "name": "send_messages",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Permissions.send_tts_messages": {
            "name": "send_tts_messages",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Permissions.manage_messages": {
            "name": "manage_messages",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Permissions.embed_links": {
            "name": "embed_links",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Permissions.attach_files": {
            "name": "attach_files",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Permissions.read_message_history": {
            "name": "read_message_history",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Permissions.mention_everyone": {
            "name": "mention_everyone",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Permissions.external_emojis": {
            "name": "external_emojis",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Permissions.connect": {
            "name": "connect",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Permissions.speak": {
            "name": "speak",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Permissions.mute_members": {
            "name": "mute_members",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Permissions.deafen_members": {
            "name": "deafen_members",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Permissions.move_members": {
            "name": "move_members",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Permissions.use_voice_activation": {
            "name": "use_voice_activation",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Permissions.change_nickname": {
            "name": "change_nickname",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Permissions.manage_nicknames": {
            "name": "manage_nicknames",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Permissions.manage_roles": {
            "name": "manage_roles",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Permissions.manage_webhooks": {
            "name": "manage_webhooks",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Permissions.manage_emojis": {
            "name": "manage_emojis",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "PermissionOverwrite.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionOverwrite.pair": {
            "name": "pair",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionOverwrite.from_pair": {
            "name": "from_pair",
            "location": 155,
            "return": [],
            "arguments": {
                "cls": [],
                "allow": [],
                "deny": []
            }
        },
        "PermissionOverwrite.is_empty": {
            "name": "is_empty",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionOverwrite.update": {
            "name": "update",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PermissionOverwrite.__iter__": {
            "name": "__iter__",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "stubs-master/discord/player.py": {
        "AudioSource.read": {
            "name": "read",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AudioSource.is_opus": {
            "name": "is_opus",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AudioSource.cleanup": {
            "name": "cleanup",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AudioSource.__del__": {
            "name": "__del__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PCMAudio.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "stream": []
            }
        },
        "PCMAudio.read": {
            "name": "read",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FFmpegPCMAudio.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "FFmpegPCMAudio.read": {
            "name": "read",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FFmpegPCMAudio.cleanup": {
            "name": "cleanup",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PCMVolumeTransformer.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "original": [],
                "volume": []
            }
        },
        "PCMVolumeTransformer.volume": {
            "name": "volume",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "PCMVolumeTransformer.cleanup": {
            "name": "cleanup",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PCMVolumeTransformer.read": {
            "name": "read",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AudioPlayer.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "source": [],
                "client": []
            }
        },
        "AudioPlayer.run": {
            "name": "run",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AudioPlayer.stop": {
            "name": "stop",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AudioPlayer.pause": {
            "name": "pause",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AudioPlayer.resume": {
            "name": "resume",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AudioPlayer.is_playing": {
            "name": "is_playing",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AudioPlayer.is_paused": {
            "name": "is_paused",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "stubs-master/discord/raw_models.py": {
        "RawMessageDeleteEvent.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "RawBulkMessageDeleteEvent.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "RawMessageUpdateEvent.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "RawReactionActionEvent.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "emoji": []
            }
        },
        "RawReactionClearEvent.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "stubs-master/discord/reaction.py": {
        "Reaction.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "data": []
            }
        },
        "Reaction.custom_emoji": {
            "name": "custom_emoji",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Reaction.__eq__": {
            "name": "__eq__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Reaction.__ne__": {
            "name": "__ne__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Reaction.__hash__": {
            "name": "__hash__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Reaction.users": {
            "name": "users",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "limit": [],
                "after": []
            }
        }
    },
    "stubs-master/discord/relationship.py": {
        "Relationship.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "data": []
            }
        },
        "Relationship.delete": {
            "name": "delete",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Relationship.accept": {
            "name": "accept",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "stubs-master/discord/role.py": {
        "Role.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "guild": [],
                "state": [],
                "data": []
            }
        },
        "Role.__lt__": {
            "name": "__lt__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Role.__le__": {
            "name": "__le__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Role.__gt__": {
            "name": "__gt__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Role.__ge__": {
            "name": "__ge__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Role.is_default": {
            "name": "is_default",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Role.created_at": {
            "name": "created_at",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Role.mention": {
            "name": "mention",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Role.members": {
            "name": "members",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Role.edit": {
            "name": "edit",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Role.delete": {
            "name": "delete",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "stubs-master/discord/shard.py": {
        "Shard.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "ws": [],
                "client": []
            }
        },
        "Shard.id": {
            "name": "id",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Shard.is_pending": {
            "name": "is_pending",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Shard.complete_pending_reads": {
            "name": "complete_pending_reads",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Shard.launch_pending_reads": {
            "name": "launch_pending_reads",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Shard.wait": {
            "name": "wait",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Shard.poll": {
            "name": "poll",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Shard.get_future": {
            "name": "get_future",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoShardedClient.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoShardedClient.latency": {
            "name": "latency",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoShardedClient.latencies": {
            "name": "latencies",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoShardedClient.request_offline_members": {
            "name": "request_offline_members",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoShardedClient.launch_shard": {
            "name": "launch_shard",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "gateway": [],
                "shard_id": []
            }
        },
        "AutoShardedClient.launch_shards": {
            "name": "launch_shards",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoShardedClient.close": {
            "name": "close",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoShardedClient.change_presence": {
            "name": "change_presence",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "stubs-master/discord/state.py": {
        "ConnectionState.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "dispatch": [],
                "chunker": [],
                "syncer": [],
                "http": [],
                "loop": []
            }
        },
        "ConnectionState.clear": {
            "name": "clear",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConnectionState.process_listeners": {
            "name": "process_listeners",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "listener_type": [],
                "argument": [],
                "result": []
            }
        },
        "ConnectionState.self_id": {
            "name": "self_id",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConnectionState.voice_clients": {
            "name": "voice_clients",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConnectionState.store_user": {
            "name": "store_user",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.get_user": {
            "name": "get_user",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "ConnectionState.store_emoji": {
            "name": "store_emoji",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "guild": [],
                "data": []
            }
        },
        "ConnectionState.guilds": {
            "name": "guilds",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConnectionState.emojis": {
            "name": "emojis",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConnectionState.get_emoji": {
            "name": "get_emoji",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "emoji_id": []
            }
        },
        "ConnectionState.private_channels": {
            "name": "private_channels",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ConnectionState.add_dm_channel": {
            "name": "add_dm_channel",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.chunks_needed": {
            "name": "chunks_needed",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "guild": []
            }
        },
        "ConnectionState.request_offline_members": {
            "name": "request_offline_members",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "guilds": []
            }
        },
        "ConnectionState.parse_ready": {
            "name": "parse_ready",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.parse_resumed": {
            "name": "parse_resumed",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.parse_message_create": {
            "name": "parse_message_create",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.parse_message_delete": {
            "name": "parse_message_delete",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.parse_message_delete_bulk": {
            "name": "parse_message_delete_bulk",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.parse_message_update": {
            "name": "parse_message_update",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.parse_message_reaction_add": {
            "name": "parse_message_reaction_add",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.parse_message_reaction_remove_all": {
            "name": "parse_message_reaction_remove_all",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.parse_message_reaction_remove": {
            "name": "parse_message_reaction_remove",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.parse_presence_update": {
            "name": "parse_presence_update",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.parse_user_update": {
            "name": "parse_user_update",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.parse_channel_delete": {
            "name": "parse_channel_delete",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.parse_channel_update": {
            "name": "parse_channel_update",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.parse_channel_create": {
            "name": "parse_channel_create",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.parse_channel_pins_update": {
            "name": "parse_channel_pins_update",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.parse_channel_recipient_add": {
            "name": "parse_channel_recipient_add",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.parse_channel_recipient_remove": {
            "name": "parse_channel_recipient_remove",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.parse_guild_member_add": {
            "name": "parse_guild_member_add",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.parse_guild_member_remove": {
            "name": "parse_guild_member_remove",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.parse_guild_member_update": {
            "name": "parse_guild_member_update",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.parse_guild_emojis_update": {
            "name": "parse_guild_emojis_update",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.parse_guild_create": {
            "name": "parse_guild_create",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.parse_guild_sync": {
            "name": "parse_guild_sync",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.parse_guild_update": {
            "name": "parse_guild_update",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.parse_guild_delete": {
            "name": "parse_guild_delete",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.parse_guild_ban_add": {
            "name": "parse_guild_ban_add",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.parse_guild_ban_remove": {
            "name": "parse_guild_ban_remove",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.parse_guild_role_create": {
            "name": "parse_guild_role_create",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.parse_guild_role_delete": {
            "name": "parse_guild_role_delete",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.parse_guild_role_update": {
            "name": "parse_guild_role_update",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.parse_guild_members_chunk": {
            "name": "parse_guild_members_chunk",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.parse_voice_state_update": {
            "name": "parse_voice_state_update",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.parse_voice_server_update": {
            "name": "parse_voice_server_update",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.parse_typing_start": {
            "name": "parse_typing_start",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.parse_relationship_add": {
            "name": "parse_relationship_add",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.parse_relationship_remove": {
            "name": "parse_relationship_remove",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.get_reaction_emoji": {
            "name": "get_reaction_emoji",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ConnectionState.get_channel": {
            "name": "get_channel",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "ConnectionState.create_message": {
            "name": "create_message",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "channel": [],
                "data": []
            }
        },
        "ConnectionState.receive_chunk": {
            "name": "receive_chunk",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "guild_id": []
            }
        },
        "AutoShardedConnectionState.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoShardedConnectionState.request_offline_members": {
            "name": "request_offline_members",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "guilds": [],
                "shard_id": []
            }
        },
        "AutoShardedConnectionState.parse_ready": {
            "name": "parse_ready",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "stubs-master/discord/user.py": {
        "Profile.nitro": {
            "name": "nitro",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Profile.staff": {
            "name": "staff",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Profile.hypesquad": {
            "name": "hypesquad",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Profile.partner": {
            "name": "partner",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "data": []
            }
        },
        "BaseUser.__eq__": {
            "name": "__eq__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BaseUser.__ne__": {
            "name": "__ne__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BaseUser.__hash__": {
            "name": "__hash__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.avatar_url": {
            "name": "avatar_url",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.is_avatar_animated": {
            "name": "is_avatar_animated",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.avatar_url_as": {
            "name": "avatar_url_as",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.default_avatar": {
            "name": "default_avatar",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.default_avatar_url": {
            "name": "default_avatar_url",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.mention": {
            "name": "mention",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.permissions_in": {
            "name": "permissions_in",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "BaseUser.created_at": {
            "name": "created_at",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.display_name": {
            "name": "display_name",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BaseUser.mentioned_in": {
            "name": "mentioned_in",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "ClientUser.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "data": []
            }
        },
        "ClientUser.get_relationship": {
            "name": "get_relationship",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "user_id": []
            }
        },
        "ClientUser.relationships": {
            "name": "relationships",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClientUser.friends": {
            "name": "friends",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClientUser.blocked": {
            "name": "blocked",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClientUser.edit": {
            "name": "edit",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ClientUser.create_group": {
            "name": "create_group",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.dm_channel": {
            "name": "dm_channel",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.create_dm": {
            "name": "create_dm",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.relationship": {
            "name": "relationship",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.is_friend": {
            "name": "is_friend",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.is_blocked": {
            "name": "is_blocked",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.block": {
            "name": "block",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.unblock": {
            "name": "unblock",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.remove_friend": {
            "name": "remove_friend",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.send_friend_request": {
            "name": "send_friend_request",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "User.profile": {
            "name": "profile",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "stubs-master/discord/utils.py": {
        "cached_slot_property": {
            "name": "cached_slot_property",
            "location": 23,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "parse_time": {
            "name": "parse_time",
            "location": 24,
            "return": [],
            "arguments": {
                "timestamp": []
            }
        },
        "deprecated": {
            "name": "deprecated",
            "location": 25,
            "return": [],
            "arguments": {
                "instead": []
            }
        },
        "oauth_url": {
            "name": "oauth_url",
            "location": 26,
            "return": [],
            "arguments": {
                "client_id": [],
                "permissions": [],
                "guild": [],
                "redirect_uri": []
            }
        },
        "snowflake_time": {
            "name": "snowflake_time",
            "location": 32,
            "return": [],
            "arguments": {
                "id": []
            }
        },
        "time_snowflake": {
            "name": "time_snowflake",
            "location": 33,
            "return": [],
            "arguments": {
                "datetime_obj": [],
                "high": []
            }
        },
        "find": {
            "name": "find",
            "location": 34,
            "return": [],
            "arguments": {
                "predicate": [],
                "seq": []
            }
        },
        "get": {
            "name": "get",
            "location": 35,
            "return": [],
            "arguments": {
                "iterable": []
            }
        },
        "to_json": {
            "name": "to_json",
            "location": 36,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "maybe_coroutine": {
            "name": "maybe_coroutine",
            "location": 37,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "async_all": {
            "name": "async_all",
            "location": 38,
            "return": [],
            "arguments": {
                "gen": []
            }
        },
        "sane_wait_for": {
            "name": "sane_wait_for",
            "location": 39,
            "return": [],
            "arguments": {
                "futures": [],
                "timeout": [],
                "loop": []
            }
        },
        "valid_icon_size": {
            "name": "valid_icon_size",
            "location": 40,
            "return": [],
            "arguments": {
                "size": []
            }
        },
        "cached_property.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "function": []
            }
        },
        "cached_property.__get__": {
            "name": "__get__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        },
        "CachedSlotProperty.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "function": []
            }
        },
        "CachedSlotProperty.__get__": {
            "name": "__get__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        }
    },
    "stubs-master/discord/voice_client.py": {
        "VoiceClient.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "state": [],
                "timeout": [],
                "channel": []
            }
        },
        "VoiceClient.guild": {
            "name": "guild",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VoiceClient.user": {
            "name": "user",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VoiceClient.checked_add": {
            "name": "checked_add",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "attr": [],
                "value": [],
                "limit": []
            }
        },
        "VoiceClient.start_handshake": {
            "name": "start_handshake",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VoiceClient.terminate_handshake": {
            "name": "terminate_handshake",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VoiceClient.connect": {
            "name": "connect",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VoiceClient.poll_voice_ws": {
            "name": "poll_voice_ws",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "reconnect": []
            }
        },
        "VoiceClient.disconnect": {
            "name": "disconnect",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VoiceClient.move_to": {
            "name": "move_to",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "channel": []
            }
        },
        "VoiceClient.is_connected": {
            "name": "is_connected",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VoiceClient.play": {
            "name": "play",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "VoiceClient.is_playing": {
            "name": "is_playing",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VoiceClient.is_paused": {
            "name": "is_paused",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VoiceClient.stop": {
            "name": "stop",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VoiceClient.pause": {
            "name": "pause",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VoiceClient.resume": {
            "name": "resume",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VoiceClient.source": {
            "name": "source",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "VoiceClient.send_audio_packet": {
            "name": "send_audio_packet",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        }
    },
    "stubs-master/discord/webhook.py": {
        "WebhookAdapter.request": {
            "name": "request",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "verb": [],
                "url": [],
                "payload": [],
                "multipart": []
            }
        },
        "WebhookAdapter.delete_webhook": {
            "name": "delete_webhook",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebhookAdapter.edit_webhook": {
            "name": "edit_webhook",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WebhookAdapter.handle_execution_response": {
            "name": "handle_execution_response",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "wait": []
            }
        },
        "WebhookAdapter.execute_webhook": {
            "name": "execute_webhook",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "AsyncWebhookAdapter.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "AsyncWebhookAdapter.request": {
            "name": "request",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "verb": [],
                "url": [],
                "payload": [],
                "multipart": []
            }
        },
        "AsyncWebhookAdapter.handle_execution_response": {
            "name": "handle_execution_response",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "response": [],
                "wait": []
            }
        },
        "RequestsWebhookAdapter.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "session": []
            }
        },
        "RequestsWebhookAdapter.request": {
            "name": "request",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "verb": [],
                "url": [],
                "payload": [],
                "multipart": []
            }
        },
        "RequestsWebhookAdapter.handle_execution_response": {
            "name": "handle_execution_response",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "response": [],
                "wait": []
            }
        },
        "Webhook.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "adapter": []
            }
        },
        "Webhook.url": {
            "name": "url",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Webhook.partial": {
            "name": "partial",
            "location": 63,
            "return": [],
            "arguments": {
                "cls": [],
                "id": [],
                "token": [],
                "adapter": []
            }
        },
        "Webhook.from_url": {
            "name": "from_url",
            "location": 65,
            "return": [],
            "arguments": {
                "cls": [],
                "url": [],
                "adapter": []
            }
        },
        "Webhook.from_state": {
            "name": "from_state",
            "location": 67,
            "return": [],
            "arguments": {
                "cls": [],
                "data": [],
                "state": []
            }
        },
        "Webhook.guild": {
            "name": "guild",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Webhook.channel": {
            "name": "channel",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Webhook.created_at": {
            "name": "created_at",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Webhook.avatar_url": {
            "name": "avatar_url",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Webhook.avatar_url_as": {
            "name": "avatar_url_as",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Webhook.delete": {
            "name": "delete",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Webhook.edit": {
            "name": "edit",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Webhook.send": {
            "name": "send",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "content": []
            }
        },
        "Webhook.execute": {
            "name": "execute",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "stubs-master/discord/__init__.py": {
        "NullHandler.emit": {
            "name": "emit",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "record": []
            }
        }
    },
    "stubs-master/discord/ext/commands/bot.py": {
        "when_mentioned": {
            "name": "when_mentioned",
            "location": 12,
            "return": [],
            "arguments": {
                "bot": [],
                "msg": []
            }
        },
        "when_mentioned_or": {
            "name": "when_mentioned_or",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "BotBase.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "command_prefix": [],
                "formatter": [],
                "description": [],
                "pm_help": []
            }
        },
        "BotBase.dispatch": {
            "name": "dispatch",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "event_name": []
            }
        },
        "BotBase.close": {
            "name": "close",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BotBase.on_command_error": {
            "name": "on_command_error",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "exception": []
            }
        },
        "BotBase.check": {
            "name": "check",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "BotBase.add_check": {
            "name": "add_check",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "BotBase.remove_check": {
            "name": "remove_check",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "BotBase.check_once": {
            "name": "check_once",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "BotBase.can_run": {
            "name": "can_run",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "BotBase.is_owner": {
            "name": "is_owner",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "user": []
            }
        },
        "BotBase.before_invoke": {
            "name": "before_invoke",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "coro": []
            }
        },
        "BotBase.after_invoke": {
            "name": "after_invoke",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "coro": []
            }
        },
        "BotBase.add_listener": {
            "name": "add_listener",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "func": [],
                "name": []
            }
        },
        "BotBase.remove_listener": {
            "name": "remove_listener",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "func": [],
                "name": []
            }
        },
        "BotBase.listen": {
            "name": "listen",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "BotBase.add_cog": {
            "name": "add_cog",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "cog": []
            }
        },
        "BotBase.get_cog": {
            "name": "get_cog",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "BotBase.get_cog_commands": {
            "name": "get_cog_commands",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "BotBase.remove_cog": {
            "name": "remove_cog",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "BotBase.load_extension": {
            "name": "load_extension",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "BotBase.unload_extension": {
            "name": "unload_extension",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "BotBase.get_prefix": {
            "name": "get_prefix",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "BotBase.get_context": {
            "name": "get_context",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "BotBase.invoke": {
            "name": "invoke",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "BotBase.process_commands": {
            "name": "process_commands",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "BotBase.on_message": {
            "name": "on_message",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        }
    },
    "stubs-master/discord/ext/commands/context.py": {
        "Context.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.invoke": {
            "name": "invoke",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.reinvoke": {
            "name": "reinvoke",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.valid": {
            "name": "valid",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.cog": {
            "name": "cog",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.guild": {
            "name": "guild",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.channel": {
            "name": "channel",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.author": {
            "name": "author",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.me": {
            "name": "me",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Context.voice_client": {
            "name": "voice_client",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "stubs-master/discord/ext/commands/converter.py": {
        "Converter.convert": {
            "name": "convert",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "argument": []
            }
        },
        "IDConverter.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MemberConverter.convert": {
            "name": "convert",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "argument": []
            }
        },
        "UserConverter.convert": {
            "name": "convert",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "argument": []
            }
        },
        "TextChannelConverter.convert": {
            "name": "convert",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "argument": []
            }
        },
        "VoiceChannelConverter.convert": {
            "name": "convert",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "argument": []
            }
        },
        "CategoryChannelConverter.convert": {
            "name": "convert",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "argument": []
            }
        },
        "ColourConverter.convert": {
            "name": "convert",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "argument": []
            }
        },
        "RoleConverter.convert": {
            "name": "convert",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "argument": []
            }
        },
        "GameConverter.convert": {
            "name": "convert",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "argument": []
            }
        },
        "InviteConverter.convert": {
            "name": "convert",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "argument": []
            }
        },
        "EmojiConverter.convert": {
            "name": "convert",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "argument": []
            }
        },
        "PartialEmojiConverter.convert": {
            "name": "convert",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "argument": []
            }
        },
        "clean_content.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "clean_content.convert": {
            "name": "convert",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "argument": []
            }
        }
    },
    "stubs-master/discord/ext/commands/cooldowns.py": {
        "Cooldown.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "rate": [],
                "per": [],
                "type": []
            }
        },
        "Cooldown.get_tokens": {
            "name": "get_tokens",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "current": []
            }
        },
        "Cooldown.update_rate_limit": {
            "name": "update_rate_limit",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cooldown.reset": {
            "name": "reset",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Cooldown.copy": {
            "name": "copy",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CooldownMapping.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "original": []
            }
        },
        "CooldownMapping.valid": {
            "name": "valid",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CooldownMapping.from_cooldown": {
            "name": "from_cooldown",
            "location": 29,
            "return": [],
            "arguments": {
                "cls": [],
                "rate": [],
                "per": [],
                "type": []
            }
        },
        "CooldownMapping.get_bucket": {
            "name": "get_bucket",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        }
    },
    "stubs-master/discord/ext/commands/core.py": {
        "command": {
            "name": "command",
            "location": 83,
            "return": [],
            "arguments": {
                "name": [],
                "cls": []
            }
        },
        "group": {
            "name": "group",
            "location": 84,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "check": {
            "name": "check",
            "location": 85,
            "return": [],
            "arguments": {
                "predicate": []
            }
        },
        "has_role": {
            "name": "has_role",
            "location": 86,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "has_any_role": {
            "name": "has_any_role",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "has_permissions": {
            "name": "has_permissions",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "bot_has_role": {
            "name": "bot_has_role",
            "location": 89,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "bot_has_any_role": {
            "name": "bot_has_any_role",
            "location": 90,
            "return": [],
            "arguments": {}
        },
        "bot_has_permissions": {
            "name": "bot_has_permissions",
            "location": 91,
            "return": [],
            "arguments": {}
        },
        "guild_only": {
            "name": "guild_only",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "is_owner": {
            "name": "is_owner",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "is_nsfw": {
            "name": "is_nsfw",
            "location": 94,
            "return": [],
            "arguments": {}
        },
        "cooldown": {
            "name": "cooldown",
            "location": 95,
            "return": [],
            "arguments": {
                "rate": [],
                "per": [],
                "type": []
            }
        },
        "_CaseInsensitiveDict.__contains__": {
            "name": "__contains__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "_CaseInsensitiveDict.__delitem__": {
            "name": "__delitem__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "_CaseInsensitiveDict.__getitem__": {
            "name": "__getitem__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "_CaseInsensitiveDict.get": {
            "name": "get",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "k": [],
                "default": []
            }
        },
        "_CaseInsensitiveDict.__setitem__": {
            "name": "__setitem__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "k": [],
                "v": []
            }
        },
        "Command.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "callback": []
            }
        },
        "Command.dispatch_error": {
            "name": "dispatch_error",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "error": []
            }
        },
        "Command.__get__": {
            "name": "__get__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "owner": []
            }
        },
        "Command.do_conversion": {
            "name": "do_conversion",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "converter": [],
                "argument": []
            }
        },
        "Command.transform": {
            "name": "transform",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": [],
                "param": []
            }
        },
        "Command.clean_params": {
            "name": "clean_params",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Command.full_parent_name": {
            "name": "full_parent_name",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Command.root_parent": {
            "name": "root_parent",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Command.qualified_name": {
            "name": "qualified_name",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Command.call_before_hooks": {
            "name": "call_before_hooks",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "Command.call_after_hooks": {
            "name": "call_after_hooks",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "Command.prepare": {
            "name": "prepare",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "Command.is_on_cooldown": {
            "name": "is_on_cooldown",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "Command.reset_cooldown": {
            "name": "reset_cooldown",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "Command.invoke": {
            "name": "invoke",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "Command.reinvoke": {
            "name": "reinvoke",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "Command.error": {
            "name": "error",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "coro": []
            }
        },
        "Command.before_invoke": {
            "name": "before_invoke",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "coro": []
            }
        },
        "Command.after_invoke": {
            "name": "after_invoke",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "coro": []
            }
        },
        "Command.cog_name": {
            "name": "cog_name",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Command.short_doc": {
            "name": "short_doc",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Command.signature": {
            "name": "signature",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Command.can_run": {
            "name": "can_run",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "GroupMixin.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupMixin.commands": {
            "name": "commands",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupMixin.recursively_remove_all_commands": {
            "name": "recursively_remove_all_commands",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupMixin.add_command": {
            "name": "add_command",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "command": []
            }
        },
        "GroupMixin.remove_command": {
            "name": "remove_command",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "GroupMixin.walk_commands": {
            "name": "walk_commands",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupMixin.get_command": {
            "name": "get_command",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "GroupMixin.command": {
            "name": "command",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GroupMixin.group": {
            "name": "group",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Group.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Group.invoke": {
            "name": "invoke",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        },
        "Group.reinvoke": {
            "name": "reinvoke",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "ctx": []
            }
        }
    },
    "stubs-master/discord/ext/commands/errors.py": {
        "CommandError.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "MissingRequiredArgument.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "param": []
            }
        },
        "CommandInvokeError.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "CommandOnCooldown.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "cooldown": [],
                "retry_after": []
            }
        },
        "MissingPermissions.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "missing_perms": []
            }
        },
        "BotMissingPermissions.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "missing_perms": []
            }
        }
    },
    "stubs-master/discord/ext/commands/formatter.py": {
        "Paginator.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "prefix": [],
                "suffix": [],
                "max_size": []
            }
        },
        "Paginator.add_line": {
            "name": "add_line",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "line": []
            }
        },
        "Paginator.close_page": {
            "name": "close_page",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Paginator.pages": {
            "name": "pages",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HelpFormatter.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "show_hidden": [],
                "show_check_failure": [],
                "width": []
            }
        },
        "HelpFormatter.has_subcommands": {
            "name": "has_subcommands",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HelpFormatter.is_bot": {
            "name": "is_bot",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HelpFormatter.is_cog": {
            "name": "is_cog",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HelpFormatter.shorten": {
            "name": "shorten",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "HelpFormatter.max_name_size": {
            "name": "max_name_size",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HelpFormatter.clean_prefix": {
            "name": "clean_prefix",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HelpFormatter.get_command_signature": {
            "name": "get_command_signature",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HelpFormatter.get_ending_note": {
            "name": "get_ending_note",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HelpFormatter.filter_command_list": {
            "name": "filter_command_list",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HelpFormatter.format_help_for": {
            "name": "format_help_for",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "command_or_bot": []
            }
        },
        "HelpFormatter.format": {
            "name": "format",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "stubs-master/discord/ext/commands/view.py": {
        "quoted_word": {
            "name": "quoted_word",
            "location": 25,
            "return": [],
            "arguments": {
                "view": []
            }
        },
        "StringView.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "buffer": []
            }
        },
        "StringView.current": {
            "name": "current",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringView.eof": {
            "name": "eof",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringView.undo": {
            "name": "undo",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringView.skip_ws": {
            "name": "skip_ws",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringView.skip_string": {
            "name": "skip_string",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "string": []
            }
        },
        "StringView.read_rest": {
            "name": "read_rest",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringView.read": {
            "name": "read",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "StringView.get": {
            "name": "get",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StringView.get_word": {
            "name": "get_word",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "stubs-master/discord/ext/commands/__init__.py": {}
}
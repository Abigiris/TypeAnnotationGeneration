{
    "subhub-master/dodo.py": {
        "envs": {
            "name": "envs",
            "location": 56,
            "return": [],
            "arguments": {
                "sep": []
            }
        },
        "globs": {
            "name": "globs",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "docstr_format": {
            "name": "docstr_format",
            "location": 99,
            "return": [],
            "arguments": {}
        },
        "check_hash": {
            "name": "check_hash",
            "location": 112,
            "return": [],
            "arguments": {
                "program": []
            }
        },
        "get_pkgmgr": {
            "name": "get_pkgmgr",
            "location": 120,
            "return": [],
            "arguments": {}
        },
        "has_header": {
            "name": "has_header",
            "location": 130,
            "return": [],
            "arguments": {
                "content": []
            }
        },
        "pyfiles": {
            "name": "pyfiles",
            "location": 134,
            "return": [],
            "arguments": {
                "path": [],
                "exclude": []
            }
        },
        "load_serverless": {
            "name": "load_serverless",
            "location": 141,
            "return": [],
            "arguments": {
                "svc": []
            }
        },
        "get_svcs_to_funcs": {
            "name": "get_svcs_to_funcs",
            "location": 145,
            "return": [],
            "arguments": {}
        },
        "defaults": {
            "name": "defaults",
            "location": 149,
            "return": [],
            "arguments": {}
        },
        "get_svc_func": {
            "name": "get_svc_func",
            "location": 162,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "parameterized": {
            "name": "parameterized",
            "location": 171,
            "return": [],
            "arguments": {
                "dec": []
            }
        },
        "guard": {
            "name": "guard",
            "location": 184,
            "return": [],
            "arguments": {
                "func": [],
                "env": []
            }
        },
        "skip": {
            "name": "skip",
            "location": 200,
            "return": [],
            "arguments": {
                "func": [],
                "taskname": []
            }
        },
        "task_envs": {
            "name": "task_envs",
            "location": 213,
            "return": [],
            "arguments": {}
        },
        "check_noroot": {
            "name": "check_noroot",
            "location": 220,
            "return": [],
            "arguments": {}
        },
        "gen_prog_check": {
            "name": "gen_prog_check",
            "location": 231,
            "return": [],
            "arguments": {
                "name": [],
                "program": []
            }
        },
        "gen_file_check": {
            "name": "gen_file_check",
            "location": 243,
            "return": [],
            "arguments": {
                "name": [],
                "func": []
            }
        },
        "check_black": {
            "name": "check_black",
            "location": 271,
            "return": [],
            "arguments": {}
        },
        "check_precommit": {
            "name": "check_precommit",
            "location": 287,
            "return": [],
            "arguments": {}
        },
        "check_reqs": {
            "name": "check_reqs",
            "location": 295,
            "return": [],
            "arguments": {}
        },
        "check_header": {
            "name": "check_header",
            "location": 344,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "task_check": {
            "name": "task_check",
            "location": 354,
            "return": [],
            "arguments": {}
        },
        "task_creds": {
            "name": "task_creds",
            "location": 375,
            "return": [],
            "arguments": {}
        },
        "task_black": {
            "name": "task_black",
            "location": 394,
            "return": [],
            "arguments": {}
        },
        "task_header": {
            "name": "task_header",
            "location": 401,
            "return": [],
            "arguments": {}
        },
        "task_venv": {
            "name": "task_venv",
            "location": 422,
            "return": [],
            "arguments": {}
        },
        "task_docker_compose": {
            "name": "task_docker_compose",
            "location": 439,
            "return": [],
            "arguments": {}
        },
        "task_yarn": {
            "name": "task_yarn",
            "location": 457,
            "return": [],
            "arguments": {}
        },
        "task_test": {
            "name": "task_test",
            "location": 478,
            "return": [],
            "arguments": {}
        },
        "task_pytest": {
            "name": "task_pytest",
            "location": 488,
            "return": [],
            "arguments": {}
        },
        "task_package": {
            "name": "task_package",
            "location": 502,
            "return": [],
            "arguments": {}
        },
        "task_print": {
            "name": "task_print",
            "location": 516,
            "return": [],
            "arguments": {}
        },
        "task_tar": {
            "name": "task_tar",
            "location": 528,
            "return": [],
            "arguments": {}
        },
        "task_local": {
            "name": "task_local",
            "location": 554,
            "return": [],
            "arguments": {}
        },
        "task_local_stop": {
            "name": "task_local_stop",
            "location": 569,
            "return": [],
            "arguments": {}
        },
        "task_deploy": {
            "name": "task_deploy",
            "location": 577,
            "return": [],
            "arguments": {}
        },
        "task_domain": {
            "name": "task_domain",
            "location": 598,
            "return": [],
            "arguments": {}
        },
        "task_remove": {
            "name": "task_remove",
            "location": 616,
            "return": [],
            "arguments": {}
        },
        "task_pip3list": {
            "name": "task_pip3list",
            "location": 629,
            "return": [],
            "arguments": {}
        },
        "task_curl": {
            "name": "task_curl",
            "location": 636,
            "return": [],
            "arguments": {}
        },
        "task_rmrf": {
            "name": "task_rmrf",
            "location": 657,
            "return": [],
            "arguments": {}
        },
        "task_tidy": {
            "name": "task_tidy",
            "location": 687,
            "return": [],
            "arguments": {}
        },
        "docstr_format.wrapper": {
            "name": "wrapper",
            "location": 100,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "UnknownPkgmgrError.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "parameterized.layer": {
            "name": "layer",
            "location": 172,
            "return": [],
            "arguments": {}
        },
        "guard.wrapper": {
            "name": "wrapper",
            "location": 185,
            "return": [],
            "arguments": {}
        },
        "skip.wrapper": {
            "name": "wrapper",
            "location": 201,
            "return": [],
            "arguments": {}
        },
        "gen_file_check.load_test": {
            "name": "load_test",
            "location": 246,
            "return": [],
            "arguments": {
                "func": [],
                "filename": []
            }
        },
        "gen_file_check.failed_loads": {
            "name": "failed_loads",
            "location": 254,
            "return": [],
            "arguments": {}
        },
        "check_reqs.check": {
            "name": "check",
            "location": 311,
            "return": [],
            "arguments": {}
        },
        "check_reqs.report": {
            "name": "report",
            "location": 326,
            "return": [],
            "arguments": {
                "rname": [],
                "rver": []
            }
        },
        "task_creds.creds_check": {
            "name": "creds_check",
            "location": 380,
            "return": [],
            "arguments": {}
        },
        "task_header.ensure_headers": {
            "name": "ensure_headers",
            "location": 406,
            "return": [],
            "arguments": {}
        },
        "task_docker_compose.docker_compose": {
            "name": "docker_compose",
            "location": 444,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "task_local.local": {
            "name": "local",
            "location": 559,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "task_deploy.deploy": {
            "name": "deploy",
            "location": 582,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "task_domain.domain": {
            "name": "domain",
            "location": 603,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "task_curl.curl": {
            "name": "curl",
            "location": 641,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "parameterized.layer.repl": {
            "name": "repl",
            "location": 173,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "check_reqs.check.match_one": {
            "name": "match_one",
            "location": 312,
            "return": [],
            "arguments": {
                "iname": [],
                "iver": [],
                "rname": [],
                "rver": []
            }
        },
        "check_reqs.check.match_any": {
            "name": "match_any",
            "location": 315,
            "return": [],
            "arguments": {
                "installed": [],
                "rname": [],
                "rver": []
            }
        }
    },
    "subhub-master/setup.py": {},
    "subhub-master/services/fxa/hubhandler.py": {
        "handle": {
            "name": "handle",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "event": [],
                "context": []
            }
        }
    },
    "subhub-master/services/fxa/miahandler.py": {
        "handle": {
            "name": "handle",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "event": [],
                "context": []
            }
        }
    },
    "subhub-master/src/hub/app.py": {
        "intermittent_stripe_error": {
            "name": "intermittent_stripe_error",
            "location": 28,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "e": []
            }
        },
        "server_stripe_error": {
            "name": "server_stripe_error",
            "location": 34,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "e": []
            }
        },
        "server_stripe_error_with_params": {
            "name": "server_stripe_error_with_params",
            "location": 45,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "e": []
            }
        },
        "server_stripe_card_error": {
            "name": "server_stripe_card_error",
            "location": 60,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "e": []
            }
        },
        "database_connection_error": {
            "name": "database_connection_error",
            "location": 66,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "e": []
            }
        },
        "is_docker": {
            "name": "is_docker",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "create_app": {
            "name": "create_app",
            "location": 95,
            "return": [
                "Any"
            ],
            "arguments": {
                "config": []
            }
        },
        "create_app.display_subhub_errors": {
            "name": "display_subhub_errors",
            "location": 117,
            "return": [],
            "arguments": {
                "e": []
            }
        },
        "create_app.before_request": {
            "name": "before_request",
            "location": 159,
            "return": [],
            "arguments": {}
        },
        "create_app.after_request": {
            "name": "after_request",
            "location": 174,
            "return": [],
            "arguments": {
                "response": []
            }
        }
    },
    "subhub-master/src/hub/__init__.py": {},
    "subhub-master/src/hub/routes/abstract.py": {
        "AbstractRoute.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "AbstractRoute.report_route": {
            "name": "report_route",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "payload": [],
                "sent_system": []
            }
        },
        "AbstractRoute.report_route_error": {
            "name": "report_route_error",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "payload": []
            }
        }
    },
    "subhub-master/src/hub/routes/firefox.py": {
        "FirefoxRoute.route": {
            "name": "route",
            "location": 20,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "subhub-master/src/hub/routes/pipeline.py": {
        "RoutesPipeline.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "report_routes": [],
                "data": []
            }
        },
        "RoutesPipeline.run": {
            "name": "run",
            "location": 17,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoutesPipeline.send_to_salesforce": {
            "name": "send_to_salesforce",
            "location": 24,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "AllRoutes.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "messages_to_routes": []
            }
        },
        "AllRoutes.run": {
            "name": "run",
            "location": 33,
            "return": [
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllRoutes.send_to_salesforce": {
            "name": "send_to_salesforce",
            "location": 43,
            "return": [
                "int"
            ],
            "arguments": {
                "data": []
            }
        }
    },
    "subhub-master/src/hub/routes/salesforce.py": {
        "SalesforceRoute.route": {
            "name": "route",
            "location": 19,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "subhub-master/src/hub/routes/static.py": {},
    "subhub-master/src/hub/routes/__init__.py": {},
    "subhub-master/src/hub/tests/conftest.py": {
        "pytest_configure": {
            "name": "pytest_configure",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "app": {
            "name": "app",
            "location": 34,
            "return": [],
            "arguments": {
                "dynamodb": []
            }
        }
    },
    "subhub-master/src/hub/tests/__init__.py": {},
    "subhub-master/src/hub/tests/unit/test_app.py": {
        "test_create_app": {
            "name": "test_create_app",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_intermittent_stripe_error": {
            "name": "test_intermittent_stripe_error",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_server_stripe_error": {
            "name": "test_server_stripe_error",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_server_stripe_error_with_params": {
            "name": "test_server_stripe_error_with_params",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_server_stripe_card_error": {
            "name": "test_server_stripe_card_error",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TestApp.setUp": {
            "name": "setUp",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestApp.test_custom_404": {
            "name": "test_custom_404",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "subhub-master/src/hub/tests/unit/test_stripe_controller.py": {
        "run_webhook": {
            "name": "run_webhook",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "mocker": [],
                "data": []
            }
        },
        "test_controller_view": {
            "name": "test_controller_view",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_controller_view_bad_data": {
            "name": "test_controller_view_bad_data",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "subhub-master/src/hub/tests/unit/__init__.py": {},
    "subhub-master/src/hub/tests/unit/routes/test_pipeline.py": {
        "MockClient.publish": {
            "name": "publish",
            "location": 25,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "TopicArn": [],
                "Message": [],
                "MessageStructure": []
            }
        },
        "AllRoutesTest.setUp": {
            "name": "setUp",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllRoutesTest.test_salesforce_route": {
            "name": "test_salesforce_route",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllRoutesTest.test_invalid_route": {
            "name": "test_invalid_route",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RouteTest.setUp": {
            "name": "setUp",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RouteTest.test_salesforce_route": {
            "name": "test_salesforce_route",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RouteTest.test_invalid_route": {
            "name": "test_invalid_route",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "subhub-master/src/hub/tests/unit/routes/__init__.py": {},
    "subhub-master/src/hub/tests/unit/stripe/test_app.py": {
        "test_create_app": {
            "name": "test_create_app",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_intermittent_stripe_error": {
            "name": "test_intermittent_stripe_error",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_server_stripe_error": {
            "name": "test_server_stripe_error",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_server_stripe_error_with_params": {
            "name": "test_server_stripe_error_with_params",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_server_stripe_card_error": {
            "name": "test_server_stripe_card_error",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "subhub-master/src/hub/tests/unit/stripe/__init__.py": {},
    "subhub-master/src/hub/tests/unit/stripe/charge/test_stripe_charge.py": {
        "test_stripe_hub_succeeded": {
            "name": "test_stripe_hub_succeeded",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        },
        "test_stripe_hub_badpayload": {
            "name": "test_stripe_hub_badpayload",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "subhub-master/src/hub/tests/unit/stripe/charge/__init__.py": {},
    "subhub-master/src/hub/tests/unit/stripe/customer/test_stripe_customer.py": {
        "StripeCustomerCreatedTest.setUp": {
            "name": "setUp",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerCreatedTest.test_run": {
            "name": "test_run",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerCreatedTest.test_create_payload": {
            "name": "test_create_payload",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerCreatedTest.test_create_payload_missing_name": {
            "name": "test_create_payload_missing_name",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerUpdatedTest.setUp": {
            "name": "setUp",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerUpdatedTest.test_run": {
            "name": "test_run",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerUpdatedTest.test_create_payload": {
            "name": "test_create_payload",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerUpdatedTest.test_create_payload_missing_name": {
            "name": "test_create_payload_missing_name",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerDeletedTest.setUp": {
            "name": "setUp",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerDeletedTest.test_run": {
            "name": "test_run",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerDeletedTest.test_get_deleted_user": {
            "name": "test_get_deleted_user",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerDeletedTest.test_get_deleted_user_no_meta": {
            "name": "test_get_deleted_user_no_meta",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerDeletedTest.test_get_deleted_user_not_found": {
            "name": "test_get_deleted_user_not_found",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerSourceExpiringTest.setUp": {
            "name": "setUp",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerSourceExpiringTest.test_run": {
            "name": "test_run",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerSourceExpiringTest.test_run_no_subscriptions": {
            "name": "test_run_no_subscriptions",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerSourceExpiringTest.test_run_customer_not_found": {
            "name": "test_run_customer_not_found",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerSourceExpiringTest.test_create_payload": {
            "name": "test_create_payload",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerSourceExpiringTest.test_create_payload_no_subscriptions": {
            "name": "test_create_payload_no_subscriptions",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerSubscriptionDeletedTest.setUp": {
            "name": "setUp",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerSubscriptionDeletedTest.test_run": {
            "name": "test_run",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerSubscriptionDeletedTest.test_check_for_deleted_user": {
            "name": "test_check_for_deleted_user",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerSubscriptionDeletedTest.test_add_user_to_deleted_users_record": {
            "name": "test_add_user_to_deleted_users_record",
            "location": 401,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerSubscriptionDeletedTest.test_update_deleted_user": {
            "name": "test_update_deleted_user",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerSubscriptionDeletedTest.test_get_origin_system": {
            "name": "test_get_origin_system",
            "location": 458,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerSubscriptionDeletedTest.test_get_user_id": {
            "name": "test_get_user_id",
            "location": 465,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerSubscriptionDeletedTest.test_delete_customer": {
            "name": "test_delete_customer",
            "location": 472,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerSubscriptionDeletedTest.test_get_customer": {
            "name": "test_get_customer",
            "location": 481,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerSubscriptionDeletedTest.test_check_all_subscriptions": {
            "name": "test_check_all_subscriptions",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerSubscriptionDeletedTest.test_check_mark_delete": {
            "name": "test_check_mark_delete",
            "location": 496,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerSubscriptionDeletedTest.test_get_subscription_info": {
            "name": "test_get_subscription_info",
            "location": 504,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerSubscriptionUpdatedTest.setUp": {
            "name": "setUp",
            "location": 517,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerSubscriptionUpdatedTest.test_run_cancel": {
            "name": "test_run_cancel",
            "location": 606,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerSubscriptionUpdatedTest.test_run_charge": {
            "name": "test_run_charge",
            "location": 616,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerSubscriptionUpdatedTest.test_run_reactivate": {
            "name": "test_run_reactivate",
            "location": 630,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerSubscriptionUpdatedTest.test_run_no_action": {
            "name": "test_run_no_action",
            "location": 642,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerSubscriptionUpdatedTest.test_get_FxA_Id__c_missing": {
            "name": "test_get_FxA_Id__c_missing",
            "location": 650,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerSubscriptionUpdatedTest.test_get_FxA_Id__c_fetch_error": {
            "name": "test_get_FxA_Id__c_fetch_error",
            "location": 658,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerSubscriptionUpdatedTest.test_get_FxA_Id__c_deleted_cust": {
            "name": "test_get_FxA_Id__c_deleted_cust",
            "location": 668,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerSubscriptionUpdatedTest.test_create_payload_error": {
            "name": "test_create_payload_error",
            "location": 676,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerSubscriptionUpdatedTest.test_create_payload_cancelled": {
            "name": "test_create_payload_cancelled",
            "location": 688,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerSubscriptionUpdatedTest.test_create_payload_reactivated": {
            "name": "test_create_payload_reactivated",
            "location": 716,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerSubscriptionUpdatedTest.test_get_subscription_change": {
            "name": "test_get_subscription_change",
            "location": 744,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "subhub-master/src/hub/tests/unit/stripe/customer/__init__.py": {},
    "subhub-master/src/hub/tests/unit/stripe/event/test_stripe_events.py": {
        "test_hours_back": {
            "name": "test_hours_back",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_process_missing_event": {
            "name": "test_process_missing_event",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "dynamodb": []
            }
        },
        "test_retrieve_events": {
            "name": "test_retrieve_events",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "dynamodb": []
            }
        },
        "test_retrieve_events_more": {
            "name": "test_retrieve_events_more",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_process_events": {
            "name": "test_process_events",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "dynamodb": []
            }
        },
        "test_retrieve_events.get_hours_back": {
            "name": "get_hours_back",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "test_retrieve_events_more.get_hours_back": {
            "name": "get_hours_back",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "test_process_events.get_hours_back": {
            "name": "get_hours_back",
            "location": 95,
            "return": [],
            "arguments": {}
        }
    },
    "subhub-master/src/hub/tests/unit/stripe/event/__init__.py": {},
    "subhub-master/src/hub/tests/unit/stripe/invoice/test_stripe_invoice.py": {
        "StripeInvoicePaymentFailedTest.setUp": {
            "name": "setUp",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeInvoicePaymentFailedTest.test_run_success": {
            "name": "test_run_success",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeInvoicePaymentFailedTest.test_run_subscription_create": {
            "name": "test_run_subscription_create",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeInvoicePaymentFailedTest.test_create_payload": {
            "name": "test_create_payload",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeInvoicePaymentFailedTest.test_create_payload_nickname_error": {
            "name": "test_create_payload_nickname_error",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeInvoicePaymentSucceededTest.setUp": {
            "name": "setUp",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeInvoicePaymentSucceededTest.test_run_success": {
            "name": "test_run_success",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeInvoicePaymentSucceededTest.test_run_new": {
            "name": "test_run_new",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "subhub-master/src/hub/tests/unit/stripe/invoice/__init__.py": {},
    "subhub-master/src/hub/tests/unit/stripe/payment/test_stripe_payments.py": {
        "run_customer": {
            "name": "run_customer",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": [],
                "data": [],
                "filename": []
            }
        },
        "test_stripe_payment_intent_succeeded": {
            "name": "test_stripe_payment_intent_succeeded",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        }
    },
    "subhub-master/src/hub/tests/unit/stripe/payment/__init__.py": {},
    "subhub-master/src/hub/vendor/abstract.py": {
        "AbstractStripeHubEvent.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "AbstractStripeHubEvent.is_active_or_trialing": {
            "name": "is_active_or_trialing",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractStripeHubEvent.send_to_routes": {
            "name": "send_to_routes",
            "location": 27,
            "return": [],
            "arguments": {
                "report_routes": [],
                "message_to_route": []
            }
        },
        "AbstractStripeHubEvent.send_to_all_routes": {
            "name": "send_to_all_routes",
            "location": 36,
            "return": [],
            "arguments": {
                "messages_to_routes": []
            }
        },
        "AbstractStripeHubEvent.send_to_salesforce": {
            "name": "send_to_salesforce",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "AbstractStripeHubEvent.unhandled_event": {
            "name": "unhandled_event",
            "location": 47,
            "return": [],
            "arguments": {
                "payload": []
            }
        },
        "AbstractStripeHubEvent.run": {
            "name": "run",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractStripeHubEvent.create_data": {
            "name": "create_data",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractStripeHubEvent.customer_event_to_all_routes": {
            "name": "customer_event_to_all_routes",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "data_projection": [],
                "data": []
            }
        }
    },
    "subhub-master/src/hub/vendor/controller.py": {
        "view": {
            "name": "view",
            "location": 59,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "event_process": {
            "name": "event_process",
            "location": 98,
            "return": [
                "Any"
            ],
            "arguments": {
                "missing_event": []
            }
        },
        "StripeHubEventPipeline.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "StripeHubEventPipeline.run": {
            "name": "run",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "subhub-master/src/hub/vendor/customer.py": {
        "StripeCustomerCreated.run": {
            "name": "run",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerCreated.create_payload": {
            "name": "create_payload",
            "location": 41,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerUpdated.run": {
            "name": "run",
            "location": 67,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerUpdated.parse_payload": {
            "name": "parse_payload",
            "location": 93,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerUpdated.cancel_subscription": {
            "name": "cancel_subscription",
            "location": 121,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "subscription_id": []
            }
        },
        "StripeCustomerDeleted.run": {
            "name": "run",
            "location": 130,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerDeleted.get_deleted_user": {
            "name": "get_deleted_user",
            "location": 143,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerDeleted.create_payload": {
            "name": "create_payload",
            "location": 174,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "deleted_user": []
            }
        },
        "StripeCustomerSourceExpiring.run": {
            "name": "run",
            "location": 205,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerSourceExpiring.create_payload": {
            "name": "create_payload",
            "location": 224,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "customer": []
            }
        },
        "StripeCustomerSourceExpiring.first_plan_name": {
            "name": "first_plan_name",
            "location": 242,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "subscriptions": []
            }
        },
        "StripeCustomerSubscriptionDeleted.run": {
            "name": "run",
            "location": 262,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerSubscriptionDeleted.check_for_deleted_user": {
            "name": "check_for_deleted_user",
            "location": 308,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "user_id": [],
                "cust_id": []
            }
        },
        "StripeCustomerSubscriptionDeleted.update_deleted_user": {
            "name": "update_deleted_user",
            "location": 313,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "user_id": [],
                "cust_id": [],
                "subscription_list": []
            }
        },
        "StripeCustomerSubscriptionDeleted.add_user_to_deleted_users_record": {
            "name": "add_user_to_deleted_users_record",
            "location": 326,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "user_id": [],
                "cust_id": [],
                "origin_system": [],
                "subscription_info": []
            }
        },
        "StripeCustomerSubscriptionDeleted.get_subscription_info": {
            "name": "get_subscription_info",
            "location": 342,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "subscriptions": [],
                "current_sub": []
            }
        },
        "StripeCustomerSubscriptionDeleted.get_origin_system": {
            "name": "get_origin_system",
            "location": 382,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "customer": []
            }
        },
        "StripeCustomerSubscriptionDeleted.get_user_id": {
            "name": "get_user_id",
            "location": 392,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "customer": []
            }
        },
        "StripeCustomerSubscriptionDeleted.get_customer": {
            "name": "get_customer",
            "location": 417,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "customer_id": []
            }
        },
        "StripeCustomerSubscriptionDeleted.delete_customer": {
            "name": "delete_customer",
            "location": 430,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "customer_id": []
            }
        },
        "StripeCustomerSubscriptionDeleted.check_all_subscriptions": {
            "name": "check_all_subscriptions",
            "location": 438,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "customer": []
            }
        },
        "StripeCustomerSubscriptionDeleted.check_mark_delete": {
            "name": "check_mark_delete",
            "location": 455,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "customer": []
            }
        },
        "StripeCustomerSubscriptionUpdated.run": {
            "name": "run",
            "location": 469,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerSubscriptionUpdated.get_user_id": {
            "name": "get_user_id",
            "location": 544,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "customer_id": []
            }
        },
        "StripeCustomerSubscriptionUpdated.create_payload": {
            "name": "create_payload",
            "location": 574,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "event_type": [],
                "user_id": [],
                "previous_plan": []
            }
        },
        "StripeCustomerSubscriptionUpdated.get_cancellation_data": {
            "name": "get_cancellation_data",
            "location": 618,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerSubscriptionUpdated.get_total_upcoming_invoice_amount": {
            "name": "get_total_upcoming_invoice_amount",
            "location": 630,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "upcoming_invoice": []
            }
        },
        "StripeCustomerSubscriptionUpdated.get_reactivation_data": {
            "name": "get_reactivation_data",
            "location": 643,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeCustomerSubscriptionUpdated.get_subscription_change": {
            "name": "get_subscription_change",
            "location": 661,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "payload": [],
                "previous_plan": [],
                "new_product": []
            }
        },
        "StripeCustomerSubscriptionUpdated.get_subscription_type": {
            "name": "get_subscription_type",
            "location": 709,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "new_product": [],
                "previous_product": []
            }
        },
        "StripeCustomerSubscriptionUpdated.get_previous_plan_amount": {
            "name": "get_previous_plan_amount",
            "location": 739,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "previous_plan": []
            }
        }
    },
    "subhub-master/src/hub/vendor/events.py": {
        "EventMaker.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "payload": []
            }
        },
        "EventMaker.get_complete_event": {
            "name": "get_complete_event",
            "location": 21,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "subhub-master/src/hub/vendor/invoices.py": {
        "StripeInvoicePaymentFailed.run": {
            "name": "run",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeInvoicePaymentFailed.create_payload": {
            "name": "create_payload",
            "location": 50,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeInvoicePaymentSucceeded.run": {
            "name": "run",
            "location": 76,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StripeInvoicePaymentSucceeded.diff_month": {
            "name": "diff_month",
            "location": 113,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "begin_date_int": [],
                "end_date_int": []
            }
        },
        "StripeInvoicePaymentSucceeded.diff_day": {
            "name": "diff_day",
            "location": 124,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "begin_date_int": [],
                "end_date_int": []
            }
        },
        "StripeInvoicePaymentSucceeded.create_payload": {
            "name": "create_payload",
            "location": 144,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "event_type": [],
                "user_id": [],
                "plan": [],
                "customer": [],
                "subscription": [],
                "email": []
            }
        },
        "StripeInvoicePaymentSucceeded.get_subscription_data": {
            "name": "get_subscription_data",
            "location": 190,
            "return": [
                "Optional[dict]"
            ],
            "arguments": {
                "self": [],
                "customer": [],
                "product_name": [],
                "subscription": [],
                "event_type": []
            }
        },
        "StripeInvoicePaymentSucceeded.get_recurring_data": {
            "name": "get_recurring_data",
            "location": 243,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "customer_id": []
            }
        },
        "StripeInvoicePaymentSucceeded.payment_active_or_trialing": {
            "name": "payment_active_or_trialing",
            "location": 257,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "status": []
            }
        },
        "StripeInvoicePaymentSucceeded.get_total_upcoming_invoice_amount": {
            "name": "get_total_upcoming_invoice_amount",
            "location": 265,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "upcoming_invoice": []
            }
        }
    },
    "subhub-master/src/hub/vendor/__init__.py": {},
    "subhub-master/src/hub/verifications/events_check.py": {
        "process_events": {
            "name": "process_events",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "hours_back": []
            }
        },
        "EventCheck.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hours_back": []
            }
        },
        "EventCheck.retrieve_events": {
            "name": "retrieve_events",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "last_event": []
            }
        },
        "EventCheck.get_events": {
            "name": "get_events",
            "location": 56,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "EventCheck.get_events_with_last_event": {
            "name": "get_events_with_last_event",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "last_event": []
            }
        },
        "EventCheck.get_time_h_hours_ago": {
            "name": "get_time_h_hours_ago",
            "location": 72,
            "return": [
                "int"
            ],
            "arguments": {
                "hours_back": []
            }
        },
        "EventCheck.process_missing_event": {
            "name": "process_missing_event",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "missing_event": []
            }
        }
    },
    "subhub-master/src/hub/verifications/__init__.py": {},
    "subhub-master/src/shared/authentication.py": {
        "test_token": {
            "name": "test_token",
            "location": 12,
            "return": [
                "Optional[Dict[(str, bool)]]"
            ],
            "arguments": {
                "test_api_token": [],
                "cfg_api_token": []
            }
        },
        "payment_auth": {
            "name": "payment_auth",
            "location": 24,
            "return": [
                "Optional[Dict[(str, bool)]]"
            ],
            "arguments": {
                "api_token": [],
                "required_scopes": []
            }
        },
        "support_auth": {
            "name": "support_auth",
            "location": 28,
            "return": [
                "Optional[Dict[(str, bool)]]"
            ],
            "arguments": {
                "api_token": [],
                "required_scopes": []
            }
        },
        "hub_auth": {
            "name": "hub_auth",
            "location": 32,
            "return": [
                "Optional[Dict[(str, bool)]]"
            ],
            "arguments": {
                "api_token": [],
                "required_scopes": []
            }
        }
    },
    "subhub-master/src/shared/cfg.py": {
        "call": {
            "name": "call",
            "location": 36,
            "return": [
                "Tuple[(Optional[int], str, str)]"
            ],
            "arguments": {
                "cmd": [],
                "stdout": [],
                "stderr": [],
                "shell": [],
                "nerf": [],
                "throw": [],
                "verbose": []
            }
        },
        "git": {
            "name": "git",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {
                "args": [],
                "strip": []
            }
        },
        "NotGitRepoError.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cwd": []
            }
        },
        "GitCommandNotFoundError.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.REPO_ROOT": {
            "name": "REPO_ROOT",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.LOG_LEVEL": {
            "name": "LOG_LEVEL",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.VERSION": {
            "name": "VERSION",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.BRANCH": {
            "name": "BRANCH",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.DEPLOYED_ENV": {
            "name": "DEPLOYED_ENV",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.DEPLOYED_BY": {
            "name": "DEPLOYED_BY",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.DEPLOYED_WHEN": {
            "name": "DEPLOYED_WHEN",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.REVISION": {
            "name": "REVISION",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.REMOTE_ORIGIN_URL": {
            "name": "REMOTE_ORIGIN_URL",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.REPO_NAME": {
            "name": "REPO_NAME",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.PROJECT_NAME": {
            "name": "PROJECT_NAME",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.PROJECT_PATH": {
            "name": "PROJECT_PATH",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.LS_REMOTE": {
            "name": "LS_REMOTE",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.DELETED_USER_TABLE": {
            "name": "DELETED_USER_TABLE",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.EVENT_TABLE": {
            "name": "EVENT_TABLE",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.STRIPE_REQUEST_TIMEOUT": {
            "name": "STRIPE_REQUEST_TIMEOUT",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.STRIPE_MOCK_HOST": {
            "name": "STRIPE_MOCK_HOST",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.STRIPE_MOCK_PORT": {
            "name": "STRIPE_MOCK_PORT",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.STRIPE_LOCAL": {
            "name": "STRIPE_LOCAL",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.HUB_LOCAL": {
            "name": "HUB_LOCAL",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.STRIPE_API_KEY": {
            "name": "STRIPE_API_KEY",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.LOCAL_FLASK_PORT": {
            "name": "LOCAL_FLASK_PORT",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.LOCAL_HUB_FLASK_PORT": {
            "name": "LOCAL_HUB_FLASK_PORT",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.DYNALITE_URL": {
            "name": "DYNALITE_URL",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.DYNALITE_PORT": {
            "name": "DYNALITE_PORT",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.SALESFORCE_BASKET_URI": {
            "name": "SALESFORCE_BASKET_URI",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.BASKET_API_KEY": {
            "name": "BASKET_API_KEY",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.AWS_REGION": {
            "name": "AWS_REGION",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.SUPPORTED_COUNTRIES": {
            "name": "SUPPORTED_COUNTRIES",
            "location": 238,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.SENTRY_URL": {
            "name": "SENTRY_URL",
            "location": 242,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.PAYMENT_API_KEY": {
            "name": "PAYMENT_API_KEY",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.TOPIC_ARN_KEY": {
            "name": "TOPIC_ARN_KEY",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.SUPPORT_API_KEY": {
            "name": "SUPPORT_API_KEY",
            "location": 254,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.AWS_ACCESS_KEY_ID": {
            "name": "AWS_ACCESS_KEY_ID",
            "location": 258,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.AWS_SECRET_ACCESS_KEY": {
            "name": "AWS_SECRET_ACCESS_KEY",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.HUB_API_KEY": {
            "name": "HUB_API_KEY",
            "location": 266,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.AWS_EXECUTION_ENV": {
            "name": "AWS_EXECUTION_ENV",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.SWAGGER_UI": {
            "name": "SWAGGER_UI",
            "location": 274,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.NEW_RELIC_ACCOUNT_ID": {
            "name": "NEW_RELIC_ACCOUNT_ID",
            "location": 278,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.NEW_RELIC_TRUSTED_ACCOUNT_ID": {
            "name": "NEW_RELIC_TRUSTED_ACCOUNT_ID",
            "location": 282,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.NEW_RELIC_SERVERLESS_MODE_ENABLED": {
            "name": "NEW_RELIC_SERVERLESS_MODE_ENABLED",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.NEW_RELIC_DISTRIBUTED_TRACING_ENABLED": {
            "name": "NEW_RELIC_DISTRIBUTED_TRACING_ENABLED",
            "location": 290,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.ALLOWED_ORIGIN_SYSTEMS": {
            "name": "ALLOWED_ORIGIN_SYSTEMS",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.PAYMENT_EVENT_LIST": {
            "name": "PAYMENT_EVENT_LIST",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.PROFILING_ENABLED": {
            "name": "PROFILING_ENABLED",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.DEPLOY_DOMAIN": {
            "name": "DEPLOY_DOMAIN",
            "location": 306,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.DEPLOYED_CUSTOMER": {
            "name": "DEPLOYED_CUSTOMER",
            "location": 310,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.SRCTAR": {
            "name": "SRCTAR",
            "location": 314,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.USER": {
            "name": "USER",
            "location": 318,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.HOSTNAME": {
            "name": "HOSTNAME",
            "location": 325,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AutoConfigPlus.__getattr__": {
            "name": "__getattr__",
            "location": 331,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "attr": []
            }
        }
    },
    "subhub-master/src/shared/db.py": {
        "_create_account_model": {
            "name": "_create_account_model",
            "location": 27,
            "return": [
                "type"
            ],
            "arguments": {
                "table_name_": [],
                "region_": [],
                "host_": []
            }
        },
        "_create_hub_model": {
            "name": "_create_hub_model",
            "location": 113,
            "return": [
                "type"
            ],
            "arguments": {
                "table_name_": [],
                "region_": [],
                "host_": []
            }
        },
        "_create_deleted_account_model": {
            "name": "_create_deleted_account_model",
            "location": 190,
            "return": [
                "type"
            ],
            "arguments": {
                "table_name_": [],
                "region_": [],
                "host_": []
            }
        },
        "SubHubAccount.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table_name": [],
                "region": [],
                "host": []
            }
        },
        "SubHubAccount.new_user": {
            "name": "new_user",
            "location": 47,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "uid": [],
                "origin_system": [],
                "cust_id": []
            }
        },
        "SubHubAccount.get_user": {
            "name": "get_user",
            "location": 57,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "uid": []
            }
        },
        "SubHubAccount.save_user": {
            "name": "save_user",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "user": []
            }
        },
        "SubHubAccount.append_custid": {
            "name": "append_custid",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "uid": [],
                "cust_id": []
            }
        },
        "SubHubAccount.remove_from_db": {
            "name": "remove_from_db",
            "location": 91,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "uid": []
            }
        },
        "SubHubAccount.mark_deleted": {
            "name": "mark_deleted",
            "location": 102,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "uid": []
            }
        },
        "HubEvent.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table_name": [],
                "region": [],
                "host": []
            }
        },
        "HubEvent.new_event": {
            "name": "new_event",
            "location": 136,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "event_id": [],
                "sent_system": []
            }
        },
        "HubEvent.get_event": {
            "name": "get_event",
            "location": 139,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "event_id": []
            }
        },
        "HubEvent.save_event": {
            "name": "save_event",
            "location": 148,
            "return": [
                "bool"
            ],
            "arguments": {
                "hub_event": []
            }
        },
        "HubEvent.append_event": {
            "name": "append_event",
            "location": 156,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "event_id": [],
                "sent_system": []
            }
        },
        "HubEvent.remove_from_db": {
            "name": "remove_from_db",
            "location": 168,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "uid": []
            }
        },
        "SubHubDeletedAccount.__init__": {
            "name": "__init__",
            "location": 218,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table_name": [],
                "region": [],
                "host": []
            }
        },
        "SubHubDeletedAccount.new_user": {
            "name": "new_user",
            "location": 221,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "uid": [],
                "origin_system": [],
                "subscription_info": [],
                "cust_id": []
            }
        },
        "SubHubDeletedAccount.get_user": {
            "name": "get_user",
            "location": 236,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "uid": [],
                "cust_id": []
            }
        },
        "SubHubDeletedAccount.find_by_cust": {
            "name": "find_by_cust",
            "location": 248,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "customer_id": []
            }
        },
        "SubHubDeletedAccount.save_user": {
            "name": "save_user",
            "location": 254,
            "return": [
                "bool"
            ],
            "arguments": {
                "user": []
            }
        },
        "SubHubDeletedAccount.append_custid": {
            "name": "append_custid",
            "location": 262,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "uid": [],
                "cust_id": []
            }
        },
        "SubHubDeletedAccount.update_subscriptions": {
            "name": "update_subscriptions",
            "location": 272,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "uid": [],
                "cust_id": [],
                "subscriptions": []
            }
        },
        "SubHubDeletedAccount.remove_from_db": {
            "name": "remove_from_db",
            "location": 287,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "uid": []
            }
        },
        "SubHubDeletedAccount.mark_deleted": {
            "name": "mark_deleted",
            "location": 298,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "uid": []
            }
        }
    },
    "subhub-master/src/shared/deployed.py": {
        "get_deployed": {
            "name": "get_deployed",
            "location": 12,
            "return": [
                "Tuple[(dict, int)]"
            ],
            "arguments": {}
        }
    },
    "subhub-master/src/shared/dynamodb.py": {
        "random_label": {
            "name": "random_label",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "length": []
            }
        },
        "get_free_tcp_port": {
            "name": "get_free_tcp_port",
            "location": 31,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "pull_image": {
            "name": "pull_image",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "image": []
            }
        },
        "dynamodb": {
            "name": "dynamodb",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "_check_container": {
            "name": "_check_container",
            "location": 73,
            "return": [],
            "arguments": {
                "url": []
            }
        }
    },
    "subhub-master/src/shared/exceptions.py": {
        "SubHubError.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "status_code": [],
                "payload": []
            }
        },
        "SubHubError.to_dict": {
            "name": "to_dict",
            "location": 17,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "SubHubError.__repr__": {
            "name": "__repr__",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntermittentError.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "status_code": [],
                "payload": []
            }
        },
        "ClientError.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "status_code": [],
                "payload": []
            }
        },
        "EntityNotFoundError.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "error_number": []
            }
        },
        "ValidationError.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "error_number": []
            }
        },
        "ServerError.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "status_code": [],
                "payload": []
            }
        },
        "SecretStringMissingError.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "secret": []
            }
        },
        "UnsupportedStaticRouteError.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "route": [],
                "routes": []
            }
        },
        "UnsupportedDataError.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [],
                "route": [],
                "routes": []
            }
        }
    },
    "subhub-master/src/shared/headers.py": {
        "dump_safe_headers": {
            "name": "dump_safe_headers",
            "location": 15,
            "return": [
                "dict"
            ],
            "arguments": {
                "request_headers": []
            }
        },
        "extract_safe": {
            "name": "extract_safe",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {
                "request_headers": [],
                "key": []
            }
        }
    },
    "subhub-master/src/shared/log.py": {
        "event_uppercase": {
            "name": "event_uppercase",
            "location": 49,
            "return": [
                "_T2@@"
            ],
            "arguments": {
                "logger": [],
                "method_name": [],
                "event_dict": [
                    "_T2@@"
                ]
            }
        },
        "censor_event_dict": {
            "name": "censor_event_dict",
            "location": 54,
            "return": [
                "Optional[_T0]"
            ],
            "arguments": {
                "event_dict": [
                    "_T0@@"
                ]
            }
        },
        "censor_header": {
            "name": "censor_header",
            "location": 70,
            "return": [
                "Any"
            ],
            "arguments": {
                "logger": [],
                "method_name": [],
                "event_dict": []
            }
        },
        "get_logger": {
            "name": "get_logger",
            "location": 74,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "subhub-master/src/shared/secrets.py": {
        "get_secret": {
            "name": "get_secret",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "secret_id": []
            }
        }
    },
    "subhub-master/src/shared/types.py": {},
    "subhub-master/src/shared/utils.py": {
        "get_indempotency_key": {
            "name": "get_indempotency_key",
            "location": 10,
            "return": [],
            "arguments": {}
        }
    },
    "subhub-master/src/shared/vendor.py": {
        "get_customer_list": {
            "name": "get_customer_list",
            "location": 31,
            "return": [],
            "arguments": {
                "email": []
            }
        },
        "modify_customer": {
            "name": "modify_customer",
            "location": 51,
            "return": [],
            "arguments": {
                "customer_id": [],
                "source_token": [],
                "idempotency_key": []
            }
        },
        "create_stripe_customer": {
            "name": "create_stripe_customer",
            "location": 85,
            "return": [],
            "arguments": {
                "source_token": [],
                "email": [],
                "userid": [],
                "name": [],
                "idempotency_key": []
            }
        },
        "delete_stripe_customer": {
            "name": "delete_stripe_customer",
            "location": 126,
            "return": [],
            "arguments": {
                "customer_id": []
            }
        },
        "retrieve_stripe_customer": {
            "name": "retrieve_stripe_customer",
            "location": 152,
            "return": [],
            "arguments": {
                "customer_id": []
            }
        },
        "retrieve_stripe_subscription": {
            "name": "retrieve_stripe_subscription",
            "location": 182,
            "return": [],
            "arguments": {
                "subscription_id": []
            }
        },
        "build_stripe_subscription": {
            "name": "build_stripe_subscription",
            "location": 212,
            "return": [],
            "arguments": {
                "customer_id": [],
                "plan_id": [],
                "idempotency_key": []
            }
        },
        "update_stripe_subscription": {
            "name": "update_stripe_subscription",
            "location": 248,
            "return": [],
            "arguments": {
                "subscription": [],
                "plan_id": [],
                "idempotency_key": []
            }
        },
        "cancel_stripe_subscription_period_end": {
            "name": "cancel_stripe_subscription_period_end",
            "location": 290,
            "return": [],
            "arguments": {
                "subscription_id": [],
                "idempotency_key": []
            }
        },
        "cancel_stripe_subscription_immediately": {
            "name": "cancel_stripe_subscription_immediately",
            "location": 324,
            "return": [],
            "arguments": {
                "subscription_id": [],
                "idempotency_key": []
            }
        },
        "reactivate_stripe_subscription": {
            "name": "reactivate_stripe_subscription",
            "location": 354,
            "return": [],
            "arguments": {
                "subscription_id": [],
                "idempotency_key": []
            }
        },
        "list_customer_subscriptions": {
            "name": "list_customer_subscriptions",
            "location": 388,
            "return": [],
            "arguments": {
                "cust_id": []
            }
        },
        "retrieve_stripe_charge": {
            "name": "retrieve_stripe_charge",
            "location": 419,
            "return": [],
            "arguments": {
                "charge_id": []
            }
        },
        "retrieve_stripe_invoice": {
            "name": "retrieve_stripe_invoice",
            "location": 456,
            "return": [],
            "arguments": {
                "invoice_id": []
            }
        },
        "retrieve_stripe_invoice_upcoming_by_subscription": {
            "name": "retrieve_stripe_invoice_upcoming_by_subscription",
            "location": 483,
            "return": [],
            "arguments": {
                "customer_id": [],
                "subscription_id": []
            }
        },
        "retrieve_stripe_invoice_upcoming": {
            "name": "retrieve_stripe_invoice_upcoming",
            "location": 508,
            "return": [
                "Any"
            ],
            "arguments": {
                "customer": []
            }
        },
        "retrieve_plan_list": {
            "name": "retrieve_plan_list",
            "location": 538,
            "return": [],
            "arguments": {
                "limit": []
            }
        },
        "retrieve_stripe_plan": {
            "name": "retrieve_stripe_plan",
            "location": 564,
            "return": [],
            "arguments": {
                "plan_id": []
            }
        },
        "retrieve_stripe_product": {
            "name": "retrieve_stripe_product",
            "location": 595,
            "return": [],
            "arguments": {
                "product_id": []
            }
        }
    },
    "subhub-master/src/shared/vendor_utils.py": {
        "format_brand": {
            "name": "format_brand",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "brand": []
            }
        }
    },
    "subhub-master/src/shared/version.py": {
        "get_version": {
            "name": "get_version",
            "location": 12,
            "return": [
                "Tuple[(dict, int)]"
            ],
            "arguments": {}
        }
    },
    "subhub-master/src/shared/__init__.py": {},
    "subhub-master/src/shared/tests/unit/test_deployed.py": {
        "test_get_deployed": {
            "name": "test_get_deployed",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "subhub-master/src/shared/tests/unit/test_exceptions.py": {
        "test_subhub_error": {
            "name": "test_subhub_error",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hub_error": {
            "name": "test_hub_error",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_intermittent_error": {
            "name": "test_intermittent_error",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_client_error": {
            "name": "test_client_error",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_entity_not_found_error": {
            "name": "test_entity_not_found_error",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validation_error": {
            "name": "test_validation_error",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_server_error": {
            "name": "test_server_error",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_SecretStringMissingError": {
            "name": "test_SecretStringMissingError",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "subhub-master/src/shared/tests/unit/test_headers.py": {
        "test_no_headers_provided": {
            "name": "test_no_headers_provided",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_safe_extract_with_no_header_available": {
            "name": "test_safe_extract_with_no_header_available",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_safe_extract_with_header_available": {
            "name": "test_safe_extract_with_header_available",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_non_safe_headers_no_provided": {
            "name": "test_non_safe_headers_no_provided",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "test_non_safe_headers_no_provided.request_callback": {
            "name": "request_callback",
            "location": 35,
            "return": [],
            "arguments": {
                "request": []
            }
        }
    },
    "subhub-master/src/shared/tests/unit/test_secrets.py": {
        "test_get_secret": {
            "name": "test_get_secret",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_secret_exception": {
            "name": "test_get_secret_exception",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MockSecretsManager.get_secret_value": {
            "name": "get_secret_value",
            "location": 31,
            "return": [
                "Dict[(str, Union[(MockSecretsManager, str)])]"
            ],
            "arguments": {
                "SecretId": [
                    "MockSecretsManager"
                ],
                "VersionId": [],
                "VersionStage": []
            }
        }
    },
    "subhub-master/src/shared/tests/unit/test_vendor.py": {
        "TestStripeCustomerCalls.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeCustomerCalls.test_create_success": {
            "name": "test_create_success",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeCustomerCalls.test_create_error": {
            "name": "test_create_error",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeCustomerCalls.test_retrieve_success": {
            "name": "test_retrieve_success",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeCustomerCalls.test_retrieve_error": {
            "name": "test_retrieve_error",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeCustomerCalls.test_list_success": {
            "name": "test_list_success",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeCustomerCalls.test_list_error": {
            "name": "test_list_error",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeCustomerCalls.test_modify_success": {
            "name": "test_modify_success",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeCustomerCalls.test_modify_error": {
            "name": "test_modify_error",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeCustomerCalls.test_delete_success": {
            "name": "test_delete_success",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeCustomerCalls.test_delete_error": {
            "name": "test_delete_error",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeSubscriptionCalls.setUp": {
            "name": "setUp",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeSubscriptionCalls.test_build_success": {
            "name": "test_build_success",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeSubscriptionCalls.test_build_error": {
            "name": "test_build_error",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeSubscriptionCalls.test_update_success": {
            "name": "test_update_success",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeSubscriptionCalls.test_update_error": {
            "name": "test_update_error",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeSubscriptionCalls.test_cancel_at_end_success": {
            "name": "test_cancel_at_end_success",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeSubscriptionCalls.test_cancel_at_end_error": {
            "name": "test_cancel_at_end_error",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeSubscriptionCalls.test_cancel_immediately_success": {
            "name": "test_cancel_immediately_success",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeSubscriptionCalls.test_cancel_immediately_error": {
            "name": "test_cancel_immediately_error",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeSubscriptionCalls.test_reactivate_success": {
            "name": "test_reactivate_success",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeSubscriptionCalls.test_reactivate_error": {
            "name": "test_reactivate_error",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeSubscriptionCalls.test_list_success": {
            "name": "test_list_success",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeSubscriptionCalls.test_list_error": {
            "name": "test_list_error",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeSubscriptionCalls.test_retrieve_stripe_subscription": {
            "name": "test_retrieve_stripe_subscription",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeChargeCalls.setUp": {
            "name": "setUp",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeChargeCalls.test_retrieve_success": {
            "name": "test_retrieve_success",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeChargeCalls.test_retrieve_no_charge_id": {
            "name": "test_retrieve_no_charge_id",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeChargeCalls.test_retrieve_error": {
            "name": "test_retrieve_error",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeInvoiceCalls.setUp": {
            "name": "setUp",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeInvoiceCalls.test_retrieve_success": {
            "name": "test_retrieve_success",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeInvoiceCalls.test_retrieve_error": {
            "name": "test_retrieve_error",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeInvoiceCalls.test_upcoming_by_subscription_success": {
            "name": "test_upcoming_by_subscription_success",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeInvoiceCalls.test_upcoming_by_subscription_error": {
            "name": "test_upcoming_by_subscription_error",
            "location": 360,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeInvoiceCalls.test_upcoming_success": {
            "name": "test_upcoming_success",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeInvoiceCalls.test_upcoming_error": {
            "name": "test_upcoming_error",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripePlanCalls.setUp": {
            "name": "setUp",
            "location": 382,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripePlanCalls.test_retrieve_list_success": {
            "name": "test_retrieve_list_success",
            "location": 396,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripePlanCalls.test_retrieve_list_error": {
            "name": "test_retrieve_list_error",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripePlanCalls.test_retrieve_success": {
            "name": "test_retrieve_success",
            "location": 408,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripePlanCalls.test_retrieve_error": {
            "name": "test_retrieve_error",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeProductCalls.setUp": {
            "name": "setUp",
            "location": 425,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeProductCalls.test_retrieve_success": {
            "name": "test_retrieve_success",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStripeProductCalls.test_retrieve_error": {
            "name": "test_retrieve_error",
            "location": 444,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "subhub-master/src/shared/tests/unit/test_vendor_utils.py": {
        "test_format_brand": {
            "name": "test_format_brand",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_format_brand_unknown": {
            "name": "test_format_brand_unknown",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "subhub-master/src/shared/tests/unit/test_version.py": {
        "test_get_version": {
            "name": "test_get_version",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "subhub-master/src/shared/tests/unit/utils.py": {
        "run_test": {
            "name": "run_test",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [],
                "cwd": []
            }
        },
        "run_view": {
            "name": "run_view",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "request": []
            }
        },
        "run_event_process": {
            "name": "run_event_process",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {
                "event": []
            }
        },
        "MockSqsClient.list_queues": {
            "name": "list_queues",
            "location": 32,
            "return": [
                "Dict[(str, List[str])]"
            ],
            "arguments": {
                "QueueNamePrefix": []
            }
        },
        "MockSqsClient.send_message": {
            "name": "send_message",
            "location": 36,
            "return": [
                "Dict[(str, Dict[(str, int)])]"
            ],
            "arguments": {
                "QueueUrl": [],
                "MessageBody": []
            }
        },
        "MockSnsClient.publish": {
            "name": "publish",
            "location": 42,
            "return": [
                "Dict[(str, Dict[(str, int)])]"
            ],
            "arguments": {
                "Message": [],
                "MessageStructure": [],
                "TopicArn": []
            }
        },
        "MockSubhubAccount.subhub_account": {
            "name": "subhub_account",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
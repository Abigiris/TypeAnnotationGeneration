{
    "synology-toolset-master/conftest.py": {},
    "synology-toolset-master/setup.py": {},
    "synology-toolset-master/synotools/constants.py": {},
    "synology-toolset-master/synotools/settings.py": {
        "Settings.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.credentials_path": {
            "name": "credentials_path",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Settings.get_environmental_variable": {
            "name": "get_environmental_variable",
            "location": 22,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "var_name": []
            }
        }
    },
    "synology-toolset-master/synotools/__init__.py": {},
    "synology-toolset-master/synotools/commands/constants.py": {},
    "synology-toolset-master/synotools/commands/download.py": {
        "download_torrent_with_deluge": {
            "name": "download_torrent_with_deluge",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "torrent_url": [],
                "skip_vpn": []
            }
        }
    },
    "synology-toolset-master/synotools/commands/install.py": {
        "install_scripts": {
            "name": "install_scripts",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "destination_username": []
            }
        },
        "build_destination_paths": {
            "name": "build_destination_paths",
            "location": 49,
            "return": [
                "Tuple[(str, str)]"
            ],
            "arguments": {
                "username": []
            }
        },
        "run_remote_installation_commands": {
            "name": "run_remote_installation_commands",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "syno_config": [],
                "zipped_scripts": [],
                "remote_sftp_destination_path": [],
                "remote_absolute_destination_path": []
            }
        }
    },
    "synology-toolset-master/synotools/commands/vpn_connect.py": {
        "check_and_connect": {
            "name": "check_and_connect",
            "location": 10,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "is_vpn_enabled": {
            "name": "is_vpn_enabled",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "connection": []
            }
        },
        "connect_vpn": {
            "name": "connect_vpn",
            "location": 42,
            "return": [
                "Any"
            ],
            "arguments": {
                "connection": []
            }
        }
    },
    "synology-toolset-master/synotools/commands/__init__.py": {},
    "synology-toolset-master/synotools/common/exceptions.py": {},
    "synology-toolset-master/synotools/common/logging.py": {
        "get_logger": {
            "name": "get_logger",
            "location": 38,
            "return": [
                "logging.Logger"
            ],
            "arguments": {
                "module_name": []
            }
        },
        "PasswordMaskingFilter.filter": {
            "name": "filter",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "PasswordMaskingFilter.sanitize_config": {
            "name": "sanitize_config",
            "location": 21,
            "return": [
                "_T0"
            ],
            "arguments": {
                "config": [
                    "_T0"
                ]
            }
        }
    },
    "synology-toolset-master/synotools/common/utils.py": {
        "zip_folder": {
            "name": "zip_folder",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [],
                "origin_dir": [],
                "destination_dir": [],
                "exclude": []
            }
        }
    },
    "synology-toolset-master/synotools/common/__init__.py": {},
    "synology-toolset-master/synotools/models/base.py": {
        "ModelBase.__new__": {
            "name": "__new__",
            "location": 15,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "name": [
                    "str"
                ],
                "bases": [
                    "Tuple[type]"
                ],
                "attrs": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "Model.dict": {
            "name": "dict",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.validate": {
            "name": "validate",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.__eq__": {
            "name": "__eq__",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Model.__str__": {
            "name": "__str__",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.__repl__": {
            "name": "__repl__",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "synology-toolset-master/synotools/models/__init__.py": {},
    "synology-toolset-master/synotools/models/config/base.py": {
        "ConfigBase.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigBase.get_field_from_config": {
            "name": "get_field_from_config",
            "location": 28,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "config_prefix": [],
                "field": []
            }
        }
    },
    "synology-toolset-master/synotools/models/config/deluge.py": {},
    "synology-toolset-master/synotools/models/config/syno.py": {},
    "synology-toolset-master/synotools/models/config/vpn.py": {},
    "synology-toolset-master/synotools/models/config/__init__.py": {},
    "synology-toolset-master/synotools/scripts/__init__.py": {},
    "synology-toolset-master/synotools/syno_api/api.py": {
        "create_api_client": {
            "name": "create_api_client",
            "location": 6,
            "return": [
                "Any"
            ],
            "arguments": {
                "syno_config": []
            }
        },
        "print_sanity_test_report": {
            "name": "print_sanity_test_report",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        }
    },
    "synology-toolset-master/tests/integration/test_api.py": {
        "test_print_sanity_test_report": {
            "name": "test_print_sanity_test_report",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "synology-toolset-master/tests/integration/settings/test_settings_os.py": {
        "TestSettingsOS.test_get_environmental_variable_loads_credentials_from_expected_location_on_linux": {
            "name": "test_get_environmental_variable_loads_credentials_from_expected_location_on_linux",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestSettingsOS.test_get_environmental_variable_loads_credentials_from_expected_location_on_windows": {
            "name": "test_get_environmental_variable_loads_credentials_from_expected_location_on_windows",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        }
    },
    "synology-toolset-master/tests/unit/fixtures.py": {
        "create_syno_config_mock": {
            "name": "create_syno_config_mock",
            "location": 6,
            "return": [
                "unittest.mock.Mock"
            ],
            "arguments": {}
        },
        "create_syno_config_fake": {
            "name": "create_syno_config_fake",
            "location": 19,
            "return": [
                "synotools.models.config.syno.SynoConfig"
            ],
            "arguments": {}
        },
        "create_deluge_config_mock": {
            "name": "create_deluge_config_mock",
            "location": 29,
            "return": [
                "unittest.mock.Mock"
            ],
            "arguments": {}
        },
        "create_vpn_config_fake": {
            "name": "create_vpn_config_fake",
            "location": 41,
            "return": [
                "synotools.models.config.vpn.VpnConfig"
            ],
            "arguments": {}
        }
    },
    "synology-toolset-master/tests/unit/command/download/test_download_torrent_with_deluge.py": {
        "test_gets_synology_config_details": {
            "name": "test_gets_synology_config_details",
            "location": 18,
            "return": [],
            "arguments": {
                "syno_config_mock": [],
                "deluge_config_mock": []
            }
        },
        "test_gets_deluge_config_details": {
            "name": "test_gets_deluge_config_details",
            "location": 29,
            "return": [],
            "arguments": {
                "deluge_config_mock": []
            }
        },
        "test_creates_fabric_connection_with_correct_sudo_config": {
            "name": "test_creates_fabric_connection_with_correct_sudo_config",
            "location": 42,
            "return": [],
            "arguments": {
                "connection_mock": [],
                "config_mock": []
            }
        },
        "test_creates_fabric_connection_with_correct_credentials": {
            "name": "test_creates_fabric_connection_with_correct_credentials",
            "location": 60,
            "return": [],
            "arguments": {
                "connection_mock": [],
                "config_mock": []
            }
        },
        "test_logs_message_when_exception_occurs": {
            "name": "test_logs_message_when_exception_occurs",
            "location": 80,
            "return": [],
            "arguments": {
                "connection_mock": [],
                "logger_mock": []
            }
        },
        "test_skips_vpn_checks_when_flag_is_passed": {
            "name": "test_skips_vpn_checks_when_flag_is_passed",
            "location": 100,
            "return": [],
            "arguments": {
                "connection_mock": [],
                "logger_mock": [],
                "check_and_connect_mock": []
            }
        },
        "test_checks_and_connects_vpn_by_default": {
            "name": "test_checks_and_connects_vpn_by_default",
            "location": 119,
            "return": [],
            "arguments": {
                "connection_mock": [],
                "logger_mock": [],
                "check_and_connect_mock": []
            }
        }
    },
    "synology-toolset-master/tests/unit/command/install/test_build_destination_paths.py": {
        "test_uses_provided_config_username_when_provided": {
            "name": "test_uses_provided_config_username_when_provided",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_returns_processed_sftp_path_as_first_element_of_tuple": {
            "name": "test_returns_processed_sftp_path_as_first_element_of_tuple",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_returns_processed_absolute_path_as_second_element_of_tuple": {
            "name": "test_returns_processed_absolute_path_as_second_element_of_tuple",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "synology-toolset-master/tests/unit/command/install/test_install_scripts.py": {
        "test_optionally_accepts_username_as_parameter": {
            "name": "test_optionally_accepts_username_as_parameter",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "test_instances_required_configurations": {
            "name": "test_instances_required_configurations",
            "location": 26,
            "return": [],
            "arguments": {
                "syno_config_mock": []
            }
        },
        "test_builds_destination_paths_according_to_default_username": {
            "name": "test_builds_destination_paths_according_to_default_username",
            "location": 38,
            "return": [],
            "arguments": {
                "build_destination_paths_mock": []
            }
        },
        "test_builds_destination_paths_according_to_username": {
            "name": "test_builds_destination_paths_according_to_username",
            "location": 53,
            "return": [],
            "arguments": {
                "build_destination_paths_mock": []
            }
        },
        "test_runs_remote_installation_commands": {
            "name": "test_runs_remote_installation_commands",
            "location": 68,
            "return": [],
            "arguments": {
                "run_remote_installation_commands_mock": []
            }
        },
        "test_logs_error_on_command_exception": {
            "name": "test_logs_error_on_command_exception",
            "location": 85,
            "return": [],
            "arguments": {
                "logging_mock": []
            }
        }
    },
    "synology-toolset-master/tests/unit/command/install/test_run_remote_installation_commands.py": {
        "test_opens_fabric_connection_with_correct_credentials": {
            "name": "test_opens_fabric_connection_with_correct_credentials",
            "location": 16,
            "return": [],
            "arguments": {
                "config_mock": [],
                "connection_mock": []
            }
        },
        "test_creates_scripts_dir_in_destination_if_it_does_not_exist": {
            "name": "test_creates_scripts_dir_in_destination_if_it_does_not_exist",
            "location": 34,
            "return": [],
            "arguments": {
                "connection_mock": []
            }
        },
        "test_creates_transfers_zipped_files": {
            "name": "test_creates_transfers_zipped_files",
            "location": 48,
            "return": [],
            "arguments": {
                "connection_mock": []
            }
        },
        "test_runs_unzip_command_on_destination": {
            "name": "test_runs_unzip_command_on_destination",
            "location": 68,
            "return": [],
            "arguments": {
                "connection_mock": [],
                "os_path_mock": []
            }
        },
        "test_deleted_zipped_file_after_extraction": {
            "name": "test_deleted_zipped_file_after_extraction",
            "location": 91,
            "return": [],
            "arguments": {
                "connection_mock": [],
                "os_path_mock": []
            }
        }
    },
    "synology-toolset-master/tests/unit/command/vpn_connect/test_check_and_connect.py": {
        "test_gets_synology_config_details": {
            "name": "test_gets_synology_config_details",
            "location": 11,
            "return": [],
            "arguments": {
                "syno_config_mock": [],
                "deluge_config_mock": []
            }
        },
        "test_creates_fabric_connection_with_correct_sudo_config": {
            "name": "test_creates_fabric_connection_with_correct_sudo_config",
            "location": 22,
            "return": [],
            "arguments": {
                "connection_mock": [],
                "config_mock": []
            }
        },
        "test_creates_fabric_connection_with_correct_credentials": {
            "name": "test_creates_fabric_connection_with_correct_credentials",
            "location": 38,
            "return": [],
            "arguments": {
                "connection_mock": [],
                "config_mock": []
            }
        },
        "test_checks_whether_vpn_connection_is_already_being_used": {
            "name": "test_checks_whether_vpn_connection_is_already_being_used",
            "location": 55,
            "return": [],
            "arguments": {
                "connection_mock": [],
                "is_vpn_enabled_mock": []
            }
        },
        "test_does_not_connect_if_already_connected": {
            "name": "test_does_not_connect_if_already_connected",
            "location": 71,
            "return": [],
            "arguments": {
                "connection_mock": [],
                "is_vpn_enabled_mock": [],
                "connect_vpn_mock": []
            }
        },
        "test_connects_if_check_retrieves_it_is_not_connected": {
            "name": "test_connects_if_check_retrieves_it_is_not_connected",
            "location": 89,
            "return": [],
            "arguments": {
                "connection_mock": [],
                "is_vpn_enabled_mock": [],
                "connect_vpn_mock": []
            }
        },
        "test_returns_true_when_vpn_is_already_connected": {
            "name": "test_returns_true_when_vpn_is_already_connected",
            "location": 107,
            "return": [],
            "arguments": {
                "connection_mock": [],
                "is_vpn_enabled_mock": [],
                "connect_vpn_mock": []
            }
        },
        "test_returns_true_when_vpn_is_attempted_to_connect_and_succeeds": {
            "name": "test_returns_true_when_vpn_is_attempted_to_connect_and_succeeds",
            "location": 129,
            "return": [],
            "arguments": {
                "connection_mock": [],
                "is_vpn_enabled_mock": [],
                "connect_vpn_mock": []
            }
        }
    },
    "synology-toolset-master/tests/unit/command/vpn_connect/test_connect_vpn.py": {
        "test_calls_vpn_connection_check_script_via_open_fabric_connection": {
            "name": "test_calls_vpn_connection_check_script_via_open_fabric_connection",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_logs_error_ans_raises_exception_when_fabric_process_fails": {
            "name": "test_logs_error_ans_raises_exception_when_fabric_process_fails",
            "location": 28,
            "return": [],
            "arguments": {
                "logger_mock": []
            }
        },
        "test_returns_true_when_remote_script_succeeds": {
            "name": "test_returns_true_when_remote_script_succeeds",
            "location": 42,
            "return": [],
            "arguments": {
                "logger_mock": []
            }
        },
        "test_returns_false_when_remote_script_fails": {
            "name": "test_returns_false_when_remote_script_fails",
            "location": 58,
            "return": [],
            "arguments": {
                "logger_mock": []
            }
        }
    },
    "synology-toolset-master/tests/unit/command/vpn_connect/test_is_vpn_enabled.py": {
        "test_calls_vpn_connection_check_script_via_open_fabric_connection": {
            "name": "test_calls_vpn_connection_check_script_via_open_fabric_connection",
            "location": 10,
            "return": [],
            "arguments": {
                "logger_mock": []
            }
        },
        "test_returns_true_when_vpn_is_active": {
            "name": "test_returns_true_when_vpn_is_active",
            "location": 21,
            "return": [],
            "arguments": {
                "logger_mock": []
            }
        },
        "test_returns_false_when_vpn_is_not_active": {
            "name": "test_returns_false_when_vpn_is_not_active",
            "location": 33,
            "return": [],
            "arguments": {
                "logger_mock": []
            }
        },
        "test_raises_exception_when_command_fails": {
            "name": "test_raises_exception_when_command_fails",
            "location": 43,
            "return": [],
            "arguments": {
                "logger_mock": []
            }
        }
    },
    "synology-toolset-master/tests/unit/common/test_get_logger.py": {
        "test_passes_module_name_to_instanced_logger": {
            "name": "test_passes_module_name_to_instanced_logger",
            "location": 7,
            "return": [],
            "arguments": {
                "python_logging_mock": []
            }
        },
        "test_installs_password_filter": {
            "name": "test_installs_password_filter",
            "location": 15,
            "return": [],
            "arguments": {
                "python_logging_mock": [],
                "password_filter_mock": []
            }
        }
    },
    "synology-toolset-master/tests/unit/common/logging/test_password_masking_filter.py": {
        "test_filters_config_objects_to_redact_passwords": {
            "name": "test_filters_config_objects_to_redact_passwords",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_filters_do_not_modify_original_objects": {
            "name": "test_filters_do_not_modify_original_objects",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_filters_do_not_fail_when_password_field_is_missing": {
            "name": "test_filters_do_not_fail_when_password_field_is_missing",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sanitization_passes_with_objects_other_than_configs": {
            "name": "test_sanitization_passes_with_objects_other_than_configs",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "synology-toolset-master/tests/unit/common/utils/test_zip_folder.py": {
        "test_creates_and_returns_zipname_with_passed_base_and_timestamp": {
            "name": "test_creates_and_returns_zipname_with_passed_base_and_timestamp",
            "location": 15,
            "return": [],
            "arguments": {
                "os_walk_mock": []
            }
        },
        "test_gets_filepaths_from_os_walk": {
            "name": "test_gets_filepaths_from_os_walk",
            "location": 28,
            "return": [],
            "arguments": {
                "os_walk_mock": [],
                "logger_mock": []
            }
        },
        "test_zips_files_with_flattened_paths": {
            "name": "test_zips_files_with_flattened_paths",
            "location": 44,
            "return": [],
            "arguments": {
                "os_walk_mock": [],
                "zipfile_mock": []
            }
        },
        "test_adds_path_to_filename_when_destination_dir_is_provided": {
            "name": "test_adds_path_to_filename_when_destination_dir_is_provided",
            "location": 77,
            "return": [],
            "arguments": {
                "os_walk_mock": [],
                "zipfile_mock": []
            }
        },
        "test_excludes_files_by_passed_extension": {
            "name": "test_excludes_files_by_passed_extension",
            "location": 93,
            "return": [],
            "arguments": {
                "os_walk_mock": [],
                "logger_mock": []
            }
        }
    },
    "synology-toolset-master/tests/unit/models/test_base.py": {
        "test_raises_type_error_if_field_provided_that_does_not_exist_in_model": {
            "name": "test_raises_type_error_if_field_provided_that_does_not_exist_in_model",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sets_values_provided_against_specified_fields": {
            "name": "test_sets_values_provided_against_specified_fields",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_can_compare_two_instances_of_a_model_based_on_their_fields": {
            "name": "test_can_compare_two_instances_of_a_model_based_on_their_fields",
            "location": 60,
            "return": [],
            "arguments": {
                "model_1": [],
                "model_2": [],
                "expected": []
            }
        },
        "test_uses_set_method_if_provided_for_field": {
            "name": "test_uses_set_method_if_provided_for_field",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dict_uses_dict_value_for_model_fields": {
            "name": "test_dict_uses_dict_value_for_model_fields",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_uses_per_field_validator": {
            "name": "test_validate_uses_per_field_validator",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_ignores_validation_when_field_has_no_validator": {
            "name": "test_validate_ignores_validation_when_field_has_no_validator",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dunder_str_returns_stringified_dict": {
            "name": "test_dunder_str_returns_stringified_dict",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dunder_repl_returns_stringified_dict": {
            "name": "test_dunder_repl_returns_stringified_dict",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Alice.__repr__": {
            "name": "__repr__",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bob.set_field_1": {
            "name": "set_field_1",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "Clive.__repr__": {
            "name": "__repr__",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "synology-toolset-master/tests/unit/models/config/test_config_base.py": {
        "test_config_base_initialisation_logs_message_when_config_prefix_is_not_set": {
            "name": "test_config_base_initialisation_logs_message_when_config_prefix_is_not_set",
            "location": 7,
            "return": [],
            "arguments": {
                "logging_mock": []
            }
        },
        "test_config_base_initialisation_get_fields_from_config_when_prefix_is_set": {
            "name": "test_config_base_initialisation_get_fields_from_config_when_prefix_is_set",
            "location": 20,
            "return": [],
            "arguments": {
                "get_environmental_variable_mock": [],
                "setattr_mock": []
            }
        },
        "test_get_field_from_config_gets_fields_using_attr_name_and_config_prefix": {
            "name": "test_get_field_from_config_gets_fields_using_attr_name_and_config_prefix",
            "location": 40,
            "return": [],
            "arguments": {
                "get_environmental_variable_mock": []
            }
        }
    },
    "synology-toolset-master/tests/unit/models/config/test_deluge.py": {
        "test_deluge_config_initialisation_has_correct_prefix": {
            "name": "test_deluge_config_initialisation_has_correct_prefix",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_deluge_config_initialisation_has_correct_fields": {
            "name": "test_deluge_config_initialisation_has_correct_fields",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "synology-toolset-master/tests/unit/models/config/test_syno.py": {
        "test_syno_config_initialisation_has_correct_prefix": {
            "name": "test_syno_config_initialisation_has_correct_prefix",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_syno_config_initialisation_has_correct_fields": {
            "name": "test_syno_config_initialisation_has_correct_fields",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "synology-toolset-master/tests/unit/models/config/test_vpn.py": {
        "test_syno_config_initialisation_has_correct_prefix": {
            "name": "test_syno_config_initialisation_has_correct_prefix",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_syno_config_initialisation_has_correct_fields": {
            "name": "test_syno_config_initialisation_has_correct_fields",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "synology-toolset-master/tests/unit/settings/test_settings.py": {
        "test_get_environmental_variable_loads_credentials_from_expected_location": {
            "name": "test_get_environmental_variable_loads_credentials_from_expected_location",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "mocker": []
            }
        }
    }
}
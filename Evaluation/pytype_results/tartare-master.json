{
    "tartare-master/manage_tartare.py": {},
    "tartare-master/migrations/20170726145800.py": {
        "Migration._fix_preprocess_missing_sequence": {
            "name": "_fix_preprocess_missing_sequence",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "preprocesses": []
            }
        },
        "Migration._fix_coverage_environments_missing_sequence": {
            "name": "_fix_coverage_environments_missing_sequence",
            "location": 21,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "coverage": [
                    "_T0@@"
                ]
            }
        },
        "Migration.upgrade_coverages": {
            "name": "upgrade_coverages",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Migration.upgrade_contributors": {
            "name": "upgrade_contributors",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Migration.upgrade": {
            "name": "upgrade",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/migrations/20170727133400.py": {
        "Migration._update_data_sources": {
            "name": "_update_data_sources",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "data_sources": [],
                "gridfs_id": []
            }
        },
        "Migration._coverage_exports": {
            "name": "_coverage_exports",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Migration._contributor_exports": {
            "name": "_contributor_exports",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Migration.upgrade": {
            "name": "upgrade",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/migrations/20170804162100.py": {
        "Migration._fix_data_sources_missing_data_format": {
            "name": "_fix_data_sources_missing_data_format",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_sources": []
            }
        },
        "Migration.upgrade_contributors": {
            "name": "upgrade_contributors",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Migration.upgrade": {
            "name": "upgrade",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/migrations/20170913102100.py": {
        "Migration.upgrade": {
            "name": "upgrade",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/migrations/20171013121700.py": {
        "Migration.upgrade": {
            "name": "upgrade",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/migrations/20171030101700.py": {
        "Migration.upgrade": {
            "name": "upgrade",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/migrations/20171109164000.py": {
        "Migration.manage_compute_direction": {
            "name": "manage_compute_direction",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "preprocess": [],
                "contributor": []
            }
        },
        "Migration.manage_external_setting": {
            "name": "manage_external_setting",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "preprocess": [],
                "contributor": []
            }
        },
        "Migration.manage_ruspell": {
            "name": "manage_ruspell",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": [],
                "contributor": []
            }
        },
        "Migration.manage_data_sources": {
            "name": "manage_data_sources",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contributor": [],
                "geographic_contributor": []
            }
        },
        "Migration.manage_data_source_fetched": {
            "name": "manage_data_source_fetched",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contributor_id": [],
                "data_source_id": [],
                "geographic_contributor_id": []
            }
        },
        "Migration.manage_contributor": {
            "name": "manage_contributor",
            "location": 193,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Migration.upgrade": {
            "name": "upgrade",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/migrations/20171129110000.py": {
        "Migration.upgrade": {
            "name": "upgrade",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/migrations/20180521150400.py": {
        "Migration.upgrade": {
            "name": "upgrade",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/migrations/20180605105500.py": {
        "Migration.upgrade": {
            "name": "upgrade",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/migrations/20180618151600.py": {
        "Migration.upgrade": {
            "name": "upgrade",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Migration.__update_data_source_inputs": {
            "name": "__update_data_source_inputs",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "coverages_or_contributors": []
            }
        }
    },
    "tartare-master/migrations/20180703153100.py": {
        "Migration.upgrade": {
            "name": "upgrade",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Migration.__update_processes": {
            "name": "__update_processes",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "coverages_or_contributors": []
            }
        }
    },
    "tartare-master/migrations/20180712115300.py": {
        "Migration.upgrade": {
            "name": "upgrade",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/migrations/20180716145300.py": {
        "Migration.upgrade": {
            "name": "upgrade",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/migrations/20180717155300.py": {
        "Migration.upgrade": {
            "name": "upgrade",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/migrations/20180723165100.py": {
        "Migration.upgrade": {
            "name": "upgrade",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/migrations/20180726165100.py": {
        "Migration.upgrade": {
            "name": "upgrade",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/migrations/20180727165710.py": {
        "Migration.upgrade": {
            "name": "upgrade",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tartare/api.py": {},
    "tartare-master/tartare/decorators.py": {
        "check_excepted_data_format": {
            "name": "check_excepted_data_format",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "data_format": [],
                "data_type": []
            }
        },
        "check_contributor_data_source_osm_and_poly_constraint": {
            "name": "check_contributor_data_source_osm_and_poly_constraint",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "existing_data_sources": [],
                "new_data_sources": []
            }
        },
        "validate_post_data_set": {
            "name": "validate_post_data_set",
            "location": 192,
            "return": [
                "Callable"
            ],
            "arguments": {
                "func": []
            }
        },
        "JsonDataValidate.__call__": {
            "name": "__call__",
            "location": 83,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "ValidateInputDataSourceIds.__call__": {
            "name": "__call__",
            "location": 97,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "ValidateContributorPrepocessesDataSourceIds.__call__": {
            "name": "__call__",
            "location": 128,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "ValidateUniqueDataSources.__call__": {
            "name": "__call__",
            "location": 142,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "RemoveComputedDataSources.__call__": {
            "name": "__call__",
            "location": 160,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "CheckContributorIntegrity.__init__": {
            "name": "__init__",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "update": []
            }
        },
        "CheckContributorIntegrity.__call__": {
            "name": "__call__",
            "location": 177,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "validate_post_data_set.wrapper": {
            "name": "wrapper",
            "location": 194,
            "return": [],
            "arguments": {}
        },
        "validate_file_params.__call__": {
            "name": "__call__",
            "location": 218,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "RemoveLastActiveJob.__call__": {
            "name": "__call__",
            "location": 234,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "JsonDataValidate.__call__.wrapper": {
            "name": "wrapper",
            "location": 85,
            "return": [],
            "arguments": {}
        },
        "ValidateInputDataSourceIds.__call__.wrapper": {
            "name": "wrapper",
            "location": 99,
            "return": [],
            "arguments": {}
        },
        "ValidateContributorPrepocessesDataSourceIds.__call__.wrapper": {
            "name": "wrapper",
            "location": 130,
            "return": [],
            "arguments": {}
        },
        "ValidateUniqueDataSources.__call__.wrapper": {
            "name": "wrapper",
            "location": 144,
            "return": [],
            "arguments": {}
        },
        "RemoveComputedDataSources.__call__.wrapper": {
            "name": "wrapper",
            "location": 162,
            "return": [],
            "arguments": {}
        },
        "CheckContributorIntegrity.__call__.wrapper": {
            "name": "wrapper",
            "location": 179,
            "return": [],
            "arguments": {}
        },
        "validate_file_params.__call__.wrapper": {
            "name": "wrapper",
            "location": 220,
            "return": [],
            "arguments": {}
        },
        "RemoveLastActiveJob.__call__.wrapper": {
            "name": "wrapper",
            "location": 236,
            "return": [],
            "arguments": {}
        }
    },
    "tartare-master/tartare/default_settings.py": {},
    "tartare-master/tartare/exceptions.py": {
        "ColumnNotFound.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "FileNotFound.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "InvalidFile.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "CommandRuntimeException.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [],
                "message": []
            }
        }
    },
    "tartare-master/tartare/helper.py": {
        "grid_out_len": {
            "name": "grid_out_len",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "configure_logger": {
            "name": "configure_logger",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "app_config": []
            }
        },
        "_make_doted_key": {
            "name": "_make_doted_key",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "to_doted_notation": {
            "name": "to_doted_notation",
            "location": 67,
            "return": [
                "dict"
            ],
            "arguments": {
                "data": [],
                "prefix": []
            }
        },
        "get_filename": {
            "name": "get_filename",
            "location": 86,
            "return": [
                "Any"
            ],
            "arguments": {
                "url": [],
                "data_source_id": []
            }
        },
        "get_md5_content_file": {
            "name": "get_md5_content_file",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "file": []
            }
        },
        "setdefault_ids": {
            "name": "setdefault_ids",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "collections": []
            }
        },
        "get_values_by_key": {
            "name": "get_values_by_key",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "values": [],
                "out": [],
                "key": []
            }
        },
        "get_dict_from_zip": {
            "name": "get_dict_from_zip",
            "location": 123,
            "return": [
                "List[Dict[(str, str)]]"
            ],
            "arguments": {
                "zip": [],
                "file_name": []
            }
        },
        "get_content_file_from_grid_out_file": {
            "name": "get_content_file_from_grid_out_file",
            "location": 128,
            "return": [
                "Any"
            ],
            "arguments": {
                "zip_file": [],
                "filename": []
            }
        },
        "date_from_string": {
            "name": "date_from_string",
            "location": 138,
            "return": [
                "_datetime.date"
            ],
            "arguments": {
                "value": [],
                "name": []
            }
        },
        "datetime_from_string": {
            "name": "datetime_from_string",
            "location": 151,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "value": []
            }
        },
        "dic_to_memory_csv": {
            "name": "dic_to_memory_csv",
            "location": 164,
            "return": [
                "Optional[io.StringIO]"
            ],
            "arguments": {
                "list_of_dict": [],
                "keys": []
            }
        }
    },
    "tartare-master/tartare/http_exceptions.py": {
        "TartareException.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "detailed_message": []
            }
        },
        "InvalidArguments.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "detailed_message": []
            }
        },
        "DuplicateEntry.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "detailed_message": []
            }
        },
        "InternalServerError.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "detailed_message": []
            }
        },
        "ObjectNotFound.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "detailed_message": []
            }
        },
        "UnsupportedMediaType.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "detailed_message": []
            }
        }
    },
    "tartare-master/tartare/tasks.py": {
        "publish_data_on_platform": {
            "name": "publish_data_on_platform",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "platform": [],
                "coverage": [],
                "environment_id": [],
                "job": []
            }
        },
        "finish_job": {
            "name": "finish_job",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "context": []
            }
        },
        "contributor_export": {
            "name": "contributor_export",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "contributor": [],
                "check_for_update": [],
                "data_source_to_fetch_id": []
            }
        },
        "contributor_export_finalization": {
            "name": "contributor_export_finalization",
            "location": 140,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "coverage_export": {
            "name": "coverage_export",
            "location": 158,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "coverage_export_finalization": {
            "name": "coverage_export_finalization",
            "location": 173,
            "return": [],
            "arguments": {
                "context": []
            }
        },
        "launch": {
            "name": "launch",
            "location": 205,
            "return": [
                "Any"
            ],
            "arguments": {
                "processes": [],
                "context": []
            }
        },
        "run_process": {
            "name": "run_process",
            "location": 239,
            "return": [],
            "arguments": {
                "context": [],
                "process": []
            }
        },
        "automatic_update": {
            "name": "automatic_update",
            "location": 246,
            "return": [],
            "arguments": {}
        },
        "automatic_update_launch_coverage_exports": {
            "name": "automatic_update_launch_coverage_exports",
            "location": 272,
            "return": [],
            "arguments": {
                "self": [],
                "contributor_export_results": []
            }
        },
        "limit_chord_unlock_retry_delay": {
            "name": "limit_chord_unlock_retry_delay",
            "location": 315,
            "return": [],
            "arguments": {
                "signal": [],
                "sender": []
            }
        },
        "purge_pending_jobs": {
            "name": "purge_pending_jobs",
            "location": 323,
            "return": [],
            "arguments": {}
        },
        "CallbackTask.on_failure": {
            "name": "on_failure",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc": [],
                "task_id": [],
                "args": [],
                "kwargs": [],
                "einfo": []
            }
        },
        "CallbackTask.send_mail": {
            "name": "send_mail",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "CallbackTask.update_job": {
            "name": "update_job",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [],
                "exc": []
            }
        },
        "launch.get_queue": {
            "name": "get_queue",
            "location": 211,
            "return": [],
            "arguments": {
                "process": []
            }
        }
    },
    "tartare-master/tartare/__init__.py": {
        "after": {
            "name": "after",
            "location": 55,
            "return": [],
            "arguments": {
                "response": []
            }
        },
        "page_not_found": {
            "name": "page_not_found",
            "location": 85,
            "return": [],
            "arguments": {
                "e": []
            }
        },
        "celery_setup_logging": {
            "name": "celery_setup_logging",
            "location": 90,
            "return": [],
            "arguments": {}
        },
        "ContextTask.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextTask.__call__": {
            "name": "__call__",
            "location": 101,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tartare/core/constants.py": {},
    "tartare-master/tartare/core/context.py": {
        "DataSourceContext.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_source_id": [],
                "gridfs_id": [],
                "validity_period": []
            }
        },
        "DataSourceContext.__repr__": {
            "name": "__repr__",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContributorContext.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contributor": [],
                "data_source_contexts": [],
                "validity_period": []
            }
        },
        "ContributorContext.__repr__": {
            "name": "__repr__",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "Context.__repr__": {
            "name": "__repr__",
            "location": 65,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSourceExport.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gridfs_id": [],
                "data_source_id": [],
                "data_format": [],
                "service_id": []
            }
        },
        "DataSourceExport.update_data_set_state": {
            "name": "update_data_set_state",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gridfs_id": [],
                "export_type": []
            }
        },
        "ContributorExportContext.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "ContributorExportContext.append_data_source_export": {
            "name": "append_data_source_export",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_source": [],
                "data_set": []
            }
        },
        "ContributorExportContext.get_data_source_export_from_data_source": {
            "name": "get_data_source_export_from_data_source",
            "location": 98,
            "return": [
                "DataSourceExport"
            ],
            "arguments": {
                "self": [],
                "data_source_id": []
            }
        },
        "ContributorExportContext.get_data_source_context_in_links": {
            "name": "get_data_source_context_in_links",
            "location": 106,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "links": [],
                "data_format": []
            }
        },
        "ContributorExportContext.get_data_source_context_in_configuration": {
            "name": "get_data_source_context_in_configuration",
            "location": 117,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "configuration": [],
                "data_format": []
            }
        },
        "ContributorExportContext.get_contributor_data_source_contexts": {
            "name": "get_contributor_data_source_contexts",
            "location": 127,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "contributor_id": [],
                "data_format_list": []
            }
        },
        "ContributorExportContext.get_contributor_data_source_context": {
            "name": "get_contributor_data_source_context",
            "location": 140,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "contributor_id": [],
                "data_source_id": [],
                "data_format_list": []
            }
        },
        "ContributorExportContext.add_contributor_context": {
            "name": "add_contributor_context",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contributor": []
            }
        },
        "ContributorExportContext.add_contributor_data_source_context": {
            "name": "add_contributor_data_source_context",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contributor_id": [],
                "data_source_id": [],
                "validity_period": [],
                "gridfs_id": []
            }
        },
        "ContributorExportContext.fill_context": {
            "name": "fill_context",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contributor": []
            }
        },
        "ContributorExportContext.__repr__": {
            "name": "__repr__",
            "location": 203,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoverageExportContext.__init__": {
            "name": "__init__",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": [],
                "coverage": [],
                "current_date": []
            }
        },
        "CoverageExportContext.__repr__": {
            "name": "__repr__",
            "location": 215,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tartare/core/contributor_export_functions.py": {
        "merge": {
            "name": "merge",
            "location": 49,
            "return": [
                "_T1@@"
            ],
            "arguments": {
                "contributor": [],
                "context": [
                    "_T1@@"
                ]
            }
        },
        "postprocess": {
            "name": "postprocess",
            "location": 54,
            "return": [
                "_T1@@"
            ],
            "arguments": {
                "contributor": [],
                "context": [
                    "_T1@@"
                ]
            }
        },
        "save_export": {
            "name": "save_export",
            "location": 59,
            "return": [
                "list"
            ],
            "arguments": {
                "contributor": [],
                "context": []
            }
        },
        "fetch_datasets_and_return_updated_number": {
            "name": "fetch_datasets_and_return_updated_number",
            "location": 85,
            "return": [
                "int"
            ],
            "arguments": {
                "contributor": [],
                "data_source_to_fetch_id": []
            }
        },
        "fetch_and_save_dataset": {
            "name": "fetch_and_save_dataset",
            "location": 94,
            "return": [
                "bool"
            ],
            "arguments": {
                "contributor": [],
                "data_source_id": []
            }
        }
    },
    "tartare-master/tartare/core/coverage_export_functions.py": {
        "merge": {
            "name": "merge",
            "location": 43,
            "return": [
                "_T1@@"
            ],
            "arguments": {
                "coverage": [],
                "context": [
                    "_T1@@"
                ]
            }
        },
        "postprocess": {
            "name": "postprocess",
            "location": 62,
            "return": [
                "_T1@@"
            ],
            "arguments": {
                "coverage": [],
                "context": [
                    "_T1@@"
                ]
            }
        },
        "save_export": {
            "name": "save_export",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "coverage": [],
                "context": []
            }
        }
    },
    "tartare-master/tartare/core/fetcher.py": {
        "AbstractFetcher.fetch": {
            "name": "fetch",
            "location": 55,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "destination_path": [],
                "expected_filename": [],
                "options": []
            }
        },
        "AbstractFetcher.check_authent_and_fetch_to_target": {
            "name": "check_authent_and_fetch_to_target",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "url": [],
                "dest_full_file_name": [],
                "options": []
            }
        },
        "AbstractFetcher.recompose_url_without_authent_from_parsed_result": {
            "name": "recompose_url_without_authent_from_parsed_result",
            "location": 71,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "parsed": []
            }
        },
        "AbstractFetcher.get_url_and_credentials": {
            "name": "get_url_and_credentials",
            "location": 75,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "cls": [],
                "url": [
                    "_T0@@"
                ],
                "options": []
            }
        },
        "AbstractFetcher.fetch_to_target": {
            "name": "fetch_to_target",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "url": [],
                "dest_full_file_name": []
            }
        },
        "AbstractFetcher.guess_file_name_from_url": {
            "name": "guess_file_name_from_url",
            "location": 107,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "url": []
            }
        },
        "FetcherManager.http_matches_url": {
            "name": "http_matches_url",
            "location": 141,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "url": []
            }
        },
        "FetcherManager.ftp_matches_url": {
            "name": "ftp_matches_url",
            "location": 145,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "url": []
            }
        },
        "FetcherManager.select_from_url": {
            "name": "select_from_url",
            "location": 149,
            "return": [
                "Union[(FtpFetcher, HttpFetcher)]"
            ],
            "arguments": {
                "cls": [],
                "url": []
            }
        },
        "FtpFetcher.fetch": {
            "name": "fetch",
            "location": 158,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "destination_path": [],
                "expected_filename": [],
                "options": []
            }
        },
        "FtpFetcher.check_authent_and_fetch_to_target": {
            "name": "check_authent_and_fetch_to_target",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "url": [],
                "dest_full_file_name": [],
                "options": []
            }
        },
        "HttpFetcher.check_authent_and_fetch_to_target": {
            "name": "check_authent_and_fetch_to_target",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "url": [],
                "dest_full_file_name": [],
                "options": []
            }
        },
        "HttpFetcher.fetch": {
            "name": "fetch",
            "location": 196,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "destination_path": [],
                "expected_filename": [],
                "options": []
            }
        },
        "AbstractFetcher.guess_file_name_from_url.NoRedirection.http_response": {
            "name": "http_response",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "request": [],
                "response": []
            }
        }
    },
    "tartare-master/tartare/core/gridfs_handler.py": {
        "GridFsHandler.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "database": []
            }
        },
        "GridFsHandler.save_file_in_gridfs": {
            "name": "save_file_in_gridfs",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "file": []
            }
        },
        "GridFsHandler.get_file_from_gridfs": {
            "name": "get_file_from_gridfs",
            "location": 53,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "GridFsHandler.delete_file_from_gridfs": {
            "name": "delete_file_from_gridfs",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "GridFsHandler.copy_file": {
            "name": "copy_file",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "id": []
            }
        }
    },
    "tartare-master/tartare/core/mailer.py": {
        "Mailer.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "platform": []
            }
        },
        "Mailer.get_message": {
            "name": "get_message",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "Mailer.format_mail": {
            "name": "format_mail",
            "location": 74,
            "return": [
                "email.mime.multipart.MIMEMultipart"
            ],
            "arguments": {
                "self": [],
                "message": [],
                "subject": []
            }
        },
        "Mailer.get_to_addrs": {
            "name": "get_to_addrs",
            "location": 87,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mailer.send": {
            "name": "send",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mail": []
            }
        },
        "Mailer.build_msg_and_send_mail": {
            "name": "build_msg_and_send_mail",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "Mailer.build_purge_report_and_send_mail": {
            "name": "build_purge_report_and_send_mail",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cancelled_jobs": [],
                "nb_hours": [],
                "statuses": []
            }
        }
    },
    "tartare-master/tartare/core/models.py": {
        "init_mongo": {
            "name": "init_mongo",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "ChoiceField.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "possible_values": []
            }
        },
        "ChoiceField._serialize": {
            "name": "_serialize",
            "location": 72,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "attr": [],
                "_": []
            }
        },
        "ChoiceField._deserialize": {
            "name": "_deserialize",
            "location": 78,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "value": [],
                "attr": [],
                "data": []
            }
        },
        "DataFormat.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataType.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlatformProtocol.__init__": {
            "name": "__init__",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JobStatus.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoverageType.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SequenceContainer.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sequence": []
            }
        },
        "SequenceContainer.sort_by_sequence": {
            "name": "sort_by_sequence",
            "location": 118,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [],
                "list_to_sort": []
            }
        },
        "DataSourceAndProcessContainer.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "processes": [],
                "data_sources": []
            }
        },
        "DataSourceAndProcessContainer.add_computed_data_sources": {
            "name": "add_computed_data_sources",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSourceAndProcessContainer.fill_data_source_passwords_from_existing_object": {
            "name": "fill_data_source_passwords_from_existing_object",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "existing_object": []
            }
        },
        "DataSourceAndProcessContainer.delete_files_linked": {
            "name": "delete_files_linked",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSourceAndProcessContainer.get": {
            "name": "get",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "object_id": []
            }
        },
        "PlatformOptionsAuthent.__init__": {
            "name": "__init__",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [],
                "password": []
            }
        },
        "PlatformOptions.__init__": {
            "name": "__init__",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authent": [],
                "directory": []
            }
        },
        "Platform.__init__": {
            "name": "__init__",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "protocol": [],
                "url": [],
                "options": []
            }
        },
        "PublicationPlatform.__init__": {
            "name": "__init__",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "protocol": [],
                "url": [],
                "options": [],
                "sequence": [],
                "input_data_source_ids": []
            }
        },
        "Environment.__init__": {
            "name": "__init__",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "current_ntfs_id": [],
                "publication_platforms": [],
                "sequence": []
            }
        },
        "Environment.get_publication_platform_with_user": {
            "name": "get_publication_platform_with_user",
            "location": 231,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "username": []
            }
        },
        "ValidityPeriod.__init__": {
            "name": "__init__",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start_date": [],
                "end_date": []
            }
        },
        "ValidityPeriod.__repr__": {
            "name": "__repr__",
            "location": 243,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidityPeriod.union": {
            "name": "union",
            "location": 247,
            "return": [
                "_TValidityPeriod@@ValidityPeriod@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TValidityPeriod]"
                ],
                "validity_period_list": []
            }
        },
        "ValidityPeriod.to_valid": {
            "name": "to_valid",
            "location": 255,
            "return": [
                "_TValidityPeriod@@ValidityPeriod@@"
            ],
            "arguments": {
                "self": [
                    "_TValidityPeriod@@ValidityPeriod@@"
                ],
                "current_date": []
            }
        },
        "ValidityPeriodContainer.__init__": {
            "name": "__init__",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validity_period": []
            }
        },
        "ContributorExportDataSource.__init__": {
            "name": "__init__",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_source_id": [],
                "gridfs_id": [],
                "validity_period": []
            }
        },
        "License.__init__": {
            "name": "__init__",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "url": []
            }
        },
        "License.__repr__": {
            "name": "__repr__",
            "location": 290,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSetStatus.__init__": {
            "name": "__init__",
            "location": 295,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [],
                "updated_at": []
            }
        },
        "DataSet.__init__": {
            "name": "__init__",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [],
                "gridfs_id": [],
                "validity_period": [],
                "created_at": [],
                "status_history": []
            }
        },
        "DataSet.get_md5": {
            "name": "get_md5",
            "location": 309,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSet.is_identical_to": {
            "name": "is_identical_to",
            "location": 315,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "file_path": []
            }
        },
        "DataSet.add_file_from_path": {
            "name": "add_file_from_path",
            "location": 318,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_full_path": [],
                "file_name": []
            }
        },
        "DataSet.add_file_from_io": {
            "name": "add_file_from_io",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "io": [],
                "file_name": []
            }
        },
        "DataSet.__repr__": {
            "name": "__repr__",
            "location": 325,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Enabled.__init__": {
            "name": "__init__",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "enabled": []
            }
        },
        "FrequencyContinuously.__init__": {
            "name": "__init__",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "minutes": [],
                "enabled": []
            }
        },
        "FrequencyContinuously.should_fetch": {
            "name": "should_fetch",
            "location": 339,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "last_fetched_at": [],
                "now": []
            }
        },
        "FrequencyContinuously.__repr__": {
            "name": "__repr__",
            "location": 342,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrequencyDaily.__init__": {
            "name": "__init__",
            "location": 347,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hour_of_day": [],
                "enabled": []
            }
        },
        "FrequencyDaily.should_fetch": {
            "name": "should_fetch",
            "location": 351,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "last_fetched_at": [],
                "now": []
            }
        },
        "FrequencyWeekly.__init__": {
            "name": "__init__",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "day_of_week": [],
                "hour_of_day": [],
                "enabled": []
            }
        },
        "FrequencyWeekly.should_fetch": {
            "name": "should_fetch",
            "location": 368,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "last_fetched_at": [],
                "now": []
            }
        },
        "FrequencyMonthly.__init__": {
            "name": "__init__",
            "location": 387,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "day_of_month": [],
                "hour_of_day": [],
                "enabled": []
            }
        },
        "FrequencyMonthly.should_fetch": {
            "name": "should_fetch",
            "location": 392,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "last_fetched_at": [],
                "now": []
            }
        },
        "AbstractInput.__init__": {
            "name": "__init__",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_file_name": []
            }
        },
        "InputAuto.__init__": {
            "name": "__init__",
            "location": 419,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "frequency": [],
                "expected_file_name": [],
                "options": []
            }
        },
        "InputAuto.__repr__": {
            "name": "__repr__",
            "location": 426,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputManual.__init__": {
            "name": "__init__",
            "location": 431,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_file_name": []
            }
        },
        "InputManual.__repr__": {
            "name": "__repr__",
            "location": 434,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InputComputed.__init__": {
            "name": "__init__",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_file_name": []
            }
        },
        "InputComputed.__repr__": {
            "name": "__repr__",
            "location": 442,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSource.__init__": {
            "name": "__init__",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [],
                "name": [],
                "data_format": [],
                "input": [],
                "license": [],
                "export_data_source_id": [],
                "service_id": [],
                "data_sets": [],
                "fetch_started_at": [],
                "updated_at": [],
                "status": [],
                "validity_period": []
            }
        },
        "DataSource.__repr__": {
            "name": "__repr__",
            "location": 473,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSource.save": {
            "name": "save",
            "location": 476,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contributor_id": []
            }
        },
        "DataSource.exists": {
            "name": "exists",
            "location": 485,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "data_source_id": []
            }
        },
        "DataSource.get_data_format": {
            "name": "get_data_format",
            "location": 489,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "data_source_id": []
            }
        },
        "DataSource.get_one": {
            "name": "get_one",
            "location": 495,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "data_source_id": []
            }
        },
        "DataSource.get_owner_of_data_source": {
            "name": "get_owner_of_data_source",
            "location": 505,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "data_source_id": [],
                "model": []
            }
        },
        "DataSource.get_coverage_of_data_source": {
            "name": "get_coverage_of_data_source",
            "location": 515,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "data_source_id": []
            }
        },
        "DataSource.get_contributor_of_data_source": {
            "name": "get_contributor_of_data_source",
            "location": 519,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "data_source_id": []
            }
        },
        "DataSource.add_data_set_and_update_owner": {
            "name": "add_data_set_and_update_owner",
            "location": 522,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_set": [],
                "owner": []
            }
        },
        "DataSource.is_of_data_format": {
            "name": "is_of_data_format",
            "location": 536,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "data_format": []
            }
        },
        "DataSource.is_of_one_of_data_format": {
            "name": "is_of_one_of_data_format",
            "location": 539,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "data_format_list": []
            }
        },
        "DataSource.is_auto": {
            "name": "is_auto",
            "location": 542,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSource.is_computed": {
            "name": "is_computed",
            "location": 545,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSource.get_last_data_set_if_exists": {
            "name": "get_last_data_set_if_exists",
            "location": 548,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSource.get_last_data_set": {
            "name": "get_last_data_set",
            "location": 551,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSource.starts_fetch": {
            "name": "starts_fetch",
            "location": 557,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "DataSource.fetch_fails": {
            "name": "fetch_fails",
            "location": 562,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "DataSource.fetch_unchanged": {
            "name": "fetch_unchanged",
            "location": 566,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": []
            }
        },
        "DataSource.should_fetch": {
            "name": "should_fetch",
            "location": 570,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Process.__init__": {
            "name": "__init__",
            "location": 577,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [],
                "sequence": [],
                "enabled": []
            }
        },
        "Process.__repr__": {
            "name": "__repr__",
            "location": 583,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OldProcess.__init__": {
            "name": "__init__",
            "location": 588,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [],
                "params": [],
                "sequence": [],
                "data_source_ids": [],
                "enabled": []
            }
        },
        "OldProcess.__repr__": {
            "name": "__repr__",
            "location": 595,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigurationDataSource.__init__": {
            "name": "__init__",
            "location": 600,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "ids": []
            }
        },
        "NewProcess.__init__": {
            "name": "__init__",
            "location": 607,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [],
                "configuration_data_sources": [],
                "sequence": [],
                "input_data_source_ids": [],
                "target_data_source_id": [],
                "enabled": []
            }
        },
        "NewProcess.__repr__": {
            "name": "__repr__",
            "location": 618,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GtfsAgencyFileProcessParameters.__init__": {
            "name": "__init__",
            "location": 627,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "agency_id": [],
                "agency_name": [],
                "agency_url": [],
                "agency_timezone": [],
                "agency_lang": [],
                "agency_phone": [],
                "agency_email": [],
                "agency_fare_url": []
            }
        },
        "GtfsAgencyFileProcessParameters.apply_to_file_dict": {
            "name": "apply_to_file_dict",
            "location": 639,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "file_dict": []
            }
        },
        "GtfsAgencyFileProcess.__init__": {
            "name": "__init__",
            "location": 649,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [],
                "configuration_data_sources": [],
                "sequence": [],
                "input_data_source_ids": [],
                "target_data_source_id": [],
                "enabled": [],
                "parameters": []
            }
        },
        "ComputeODSProcess.__init__": {
            "name": "__init__",
            "location": 660,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [],
                "configuration_data_sources": [],
                "sequence": [],
                "input_data_source_ids": [],
                "target_data_source_id": [],
                "enabled": []
            }
        },
        "ComputeExternalSettingsProcess.__init__": {
            "name": "__init__",
            "location": 670,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [],
                "configuration_data_sources": [],
                "sequence": [],
                "input_data_source_ids": [],
                "target_data_source_id": [],
                "enabled": []
            }
        },
        "Contributor.__init__": {
            "name": "__init__",
            "location": 724,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [],
                "name": [],
                "data_prefix": [],
                "data_sources": [],
                "processes": [],
                "data_type": []
            }
        },
        "Contributor.__repr__": {
            "name": "__repr__",
            "location": 732,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Contributor.save": {
            "name": "save",
            "location": 735,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Contributor.get": {
            "name": "get",
            "location": 740,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "contributor_id": []
            }
        },
        "Contributor.__check_contributors_using_integrity": {
            "name": "__check_contributors_using_integrity",
            "location": 748,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Contributor.__check_coverages_using_integrity": {
            "name": "__check_coverages_using_integrity",
            "location": 773,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Contributor.delete": {
            "name": "delete",
            "location": 785,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "contributor_id": []
            }
        },
        "Contributor.find": {
            "name": "find",
            "location": 795,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "filter": []
            }
        },
        "Contributor.all": {
            "name": "all",
            "location": 800,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": []
            }
        },
        "Contributor.update": {
            "name": "update",
            "location": 803,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Contributor.update_with_object": {
            "name": "update_with_object",
            "location": 806,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contributor_object": []
            }
        },
        "Contributor.get_data_source": {
            "name": "get_data_source",
            "location": 812,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "data_source_id": []
            }
        },
        "Contributor.is_geographic": {
            "name": "is_geographic",
            "location": 820,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coverage.__init__": {
            "name": "__init__",
            "location": 828,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [],
                "name": [],
                "environments": [],
                "input_data_source_ids": [],
                "license": [],
                "processes": [],
                "data_sources": [],
                "type": [],
                "short_description": [],
                "comment": []
            }
        },
        "Coverage.save": {
            "name": "save",
            "location": 843,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coverage.get": {
            "name": "get",
            "location": 848,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[Coverage]"
                ],
                "coverage_id": []
            }
        },
        "Coverage.delete": {
            "name": "delete",
            "location": 857,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[Coverage]"
                ],
                "coverage_id": []
            }
        },
        "Coverage.find": {
            "name": "find",
            "location": 865,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[Coverage]"
                ],
                "filter": []
            }
        },
        "Coverage.all": {
            "name": "all",
            "location": 870,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [
                    "builtins.type[Coverage]"
                ]
            }
        },
        "Coverage.__fill_platform_passwords_from_existing_coverage": {
            "name": "__fill_platform_passwords_from_existing_coverage",
            "location": 873,
            "return": [],
            "arguments": {
                "self": [],
                "existing_coverage": []
            }
        },
        "Coverage.update_with_object": {
            "name": "update_with_object",
            "location": 884,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coverage_object": []
            }
        },
        "Coverage.update": {
            "name": "update",
            "location": 891,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Coverage.get_data_source": {
            "name": "get_data_source",
            "location": 894,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "data_source_id": []
            }
        },
        "Coverage.__repr__": {
            "name": "__repr__",
            "location": 897,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoValidityPeriodSchema.make_validityperiod": {
            "name": "make_validityperiod",
            "location": 906,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MongoDataSetSchema.make_data_set": {
            "name": "make_data_set",
            "location": 923,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MongoContributorExportDataSourceSchema.make_contributorexportdatasource": {
            "name": "make_contributorexportdatasource",
            "location": 933,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MongoPlatformOptionsAuthentSchema.make_platform_options_authent": {
            "name": "make_platform_options_authent",
            "location": 942,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MongoPlatformOptionsSchema.make_platform_options": {
            "name": "make_platform_options",
            "location": 951,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MongoPlatformSchema.make_platform": {
            "name": "make_platform",
            "location": 961,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MongoPublicationPlatformSchema.make_publication_platform": {
            "name": "make_publication_platform",
            "location": 976,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MongoEnvironmentSchema.make_environment": {
            "name": "make_environment",
            "location": 987,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MongoEnvironmentListSchema.remove_none": {
            "name": "remove_none",
            "location": 997,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Historisable.get_all_before_n_last": {
            "name": "get_all_before_n_last",
            "location": 1005,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "n": [],
                "filter": []
            }
        },
        "Historisable.delete_many": {
            "name": "delete_many",
            "location": 1014,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "ids": []
            }
        },
        "Historisable.keep_historical": {
            "name": "keep_historical",
            "location": 1023,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num": [],
                "filter": []
            }
        },
        "MongoDataSourceLicenseSchema.build_license": {
            "name": "build_license",
            "location": 1048,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ValidateHour.validates": {
            "name": "validates",
            "location": 1060,
            "return": [],
            "arguments": {
                "self": [],
                "hour_of_day": []
            }
        },
        "FrequencyContinuouslySchema.make": {
            "name": "make",
            "location": 1069,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "FrequencyContinuouslySchema.validate": {
            "name": "validate",
            "location": 1073,
            "return": [],
            "arguments": {
                "self": [],
                "minutes": []
            }
        },
        "FrequencyDailySchema.make": {
            "name": "make",
            "location": 1080,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "FrequencyWeeklySchema.make": {
            "name": "make",
            "location": 1088,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "FrequencyWeeklySchema.validates_day_of_week": {
            "name": "validates_day_of_week",
            "location": 1092,
            "return": [],
            "arguments": {
                "self": [],
                "day_of_week": []
            }
        },
        "FrequencyMonthlySchema.make": {
            "name": "make",
            "location": 1101,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "FrequencyMonthlySchema.validates_day_of_month": {
            "name": "validates_day_of_month",
            "location": 1105,
            "return": [],
            "arguments": {
                "self": [],
                "day_of_month": []
            }
        },
        "FrequencySchema.get_obj_type": {
            "name": "get_obj_type",
            "location": 1118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "InputAutoSchema.make_input": {
            "name": "make_input",
            "location": 1138,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "InputManualSchema.make_input": {
            "name": "make_input",
            "location": 1146,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "InputComputedSchema.make_input": {
            "name": "make_input",
            "location": 1154,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MongoDataSourceInputSchema.get_obj_type": {
            "name": "get_obj_type",
            "location": 1165,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "MongoDataSourceSchema.build_data_source": {
            "name": "build_data_source",
            "location": 1191,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MongoConfigurationDataSource.build_configuration": {
            "name": "build_configuration",
            "location": 1205,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MongoNewProcessSchema.check_configuration_data_source_contains_only": {
            "name": "check_configuration_data_source_contains_only",
            "location": 1216,
            "return": [
                "None"
            ],
            "arguments": {
                "configuration_data_sources": [],
                "configuration_data_source_names_mandatory_expected": [],
                "configuration_data_source_names_optional_expected": []
            }
        },
        "MongoNewProcessSchema.validate_input_data_source_ids": {
            "name": "validate_input_data_source_ids",
            "location": 1239,
            "return": [],
            "arguments": {
                "self": [],
                "input_data_source_ids": []
            }
        },
        "MongoOldProcessSchema.build_process": {
            "name": "build_process",
            "location": 1249,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MongoGtfsAgencyFileProcessParametersSchema.build_parameters": {
            "name": "build_parameters",
            "location": 1264,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MongoGtfsAgencyFileProcessSchema.build_process": {
            "name": "build_process",
            "location": 1272,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MongoGtfs2NtfsProcessSchema.build_process": {
            "name": "build_process",
            "location": 1278,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MongoHeadsignShortNameProcessSchema.build_process": {
            "name": "build_process",
            "location": 1284,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MongoRuspellProcessSchema.validate_configuration_data_sources": {
            "name": "validate_configuration_data_sources",
            "location": 1292,
            "return": [],
            "arguments": {
                "self": [],
                "configuration_data_sources": []
            }
        },
        "MongoRuspellProcessSchema.build_process": {
            "name": "build_process",
            "location": 1297,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MongoSleepingProcessSchema.build_process": {
            "name": "build_process",
            "location": 1303,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MongoComputeExternalSettingsProcessSchema.build_process": {
            "name": "build_process",
            "location": 1312,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MongoComputeExternalSettingsProcessSchema.validate_configuration_data_sources": {
            "name": "validate_configuration_data_sources",
            "location": 1316,
            "return": [],
            "arguments": {
                "self": [],
                "configuration_data_sources": []
            }
        },
        "MongoFusioDataUpdateProcessSchema.build_process": {
            "name": "build_process",
            "location": 1323,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MongoFusioExportProcessSchema.build_process": {
            "name": "build_process",
            "location": 1329,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MongoFusioExportContributorProcessSchema.build_process": {
            "name": "build_process",
            "location": 1335,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MongoFusioImportProcessSchema.build_process": {
            "name": "build_process",
            "location": 1341,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MongoFusioPreProdProcessSchema.build_process": {
            "name": "build_process",
            "location": 1347,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MongoFusioSendPtExternalSettingsProcessSchema.build_process": {
            "name": "build_process",
            "location": 1353,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MongoComputeDirectionsProcessSchema.build": {
            "name": "build",
            "location": 1361,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MongoComputeDirectionsProcessSchema.validate_configuration_data_sources": {
            "name": "validate_configuration_data_sources",
            "location": 1365,
            "return": [],
            "arguments": {
                "self": [],
                "configuration_data_sources": []
            }
        },
        "MongoComputeODSProcessSchema.build": {
            "name": "build",
            "location": 1373,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MongoComputeODSProcessSchema.validate_input_data_source_ids": {
            "name": "validate_input_data_source_ids",
            "location": 1377,
            "return": [],
            "arguments": {
                "self": [],
                "input_data_source_ids": []
            }
        },
        "MongoProcessSchema.get_obj_type": {
            "name": "get_obj_type",
            "location": 1400,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "MongoCoverageSchema.make_coverage": {
            "name": "make_coverage",
            "location": 1444,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MongoCoverageSchema.validate_input_data_source_ids": {
            "name": "validate_input_data_source_ids",
            "location": 1448,
            "return": [],
            "arguments": {
                "self": [],
                "processes": []
            }
        },
        "MongoContributorSchema.validate_contributor_process_input_data_source_ids": {
            "name": "validate_contributor_process_input_data_source_ids",
            "location": 1474,
            "return": [],
            "arguments": {
                "self": [],
                "unmarshalled": [],
                "contributors": [],
                "many": []
            }
        },
        "MongoContributorSchema.validate_input_data_source_id_has_data_format": {
            "name": "validate_input_data_source_id_has_data_format",
            "location": 1497,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "data_format_found": [],
                "process_type": []
            }
        },
        "MongoContributorSchema.validate_configuration_has_data_format": {
            "name": "validate_configuration_has_data_format",
            "location": 1504,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "configuration_key": [],
                "data_format_found": [],
                "process_type": []
            }
        },
        "MongoContributorSchema.validate_contributor_process_configuration": {
            "name": "validate_contributor_process_configuration",
            "location": 1523,
            "return": [],
            "arguments": {
                "self": [],
                "unmarshalled": [],
                "contributors": [],
                "many": []
            }
        },
        "MongoContributorSchema.make_contributor": {
            "name": "make_contributor",
            "location": 1551,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Job.__init__": {
            "name": "__init__",
            "location": 1558,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action_type": [],
                "contributor_id": [],
                "coverage_id": [],
                "parent_id": [],
                "state": [],
                "step": [],
                "id": [],
                "started_at": [],
                "updated_at": [],
                "error_message": [],
                "data_source_id": []
            }
        },
        "Job.save": {
            "name": "save",
            "location": 1574,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.cancel_pending_updated_before": {
            "name": "cancel_pending_updated_before",
            "location": 1579,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "nb_hours": [],
                "statuses": [],
                "current_date": []
            }
        },
        "Job.get_some": {
            "name": "get_some",
            "location": 1594,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "cls": [],
                "contributor_id": [],
                "coverage_id": [],
                "page": [],
                "per_page": []
            }
        },
        "Job.get_one": {
            "name": "get_one",
            "location": 1607,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "job_id": []
            }
        },
        "Job.get_last": {
            "name": "get_last",
            "location": 1614,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "filter": []
            }
        },
        "Job.update": {
            "name": "update",
            "location": 1619,
            "return": [
                "Optional[Job]"
            ],
            "arguments": {
                "self": [],
                "state": [],
                "step": [],
                "error_message": []
            }
        },
        "Job.has_failed": {
            "name": "has_failed",
            "location": 1633,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Job.data_source_has_exports_running": {
            "name": "data_source_has_exports_running",
            "location": 1637,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "contributor_id": [],
                "data_source_id": []
            }
        },
        "Job.__repr__": {
            "name": "__repr__",
            "location": 1648,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoJobSchema.make": {
            "name": "make",
            "location": 1666,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ContributorExport.__init__": {
            "name": "__init__",
            "location": 1673,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contributor_id": [],
                "validity_period": [],
                "data_sources": [],
                "id": [],
                "created_at": []
            }
        },
        "ContributorExport.save": {
            "name": "save",
            "location": 1684,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContributorExport.get": {
            "name": "get",
            "location": 1691,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "contributor_id": []
            }
        },
        "ContributorExport.get_last": {
            "name": "get_last",
            "location": 1698,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "contributor_id": []
            }
        },
        "MongoContributorExportSchema.make_contributor_export": {
            "name": "make_contributor_export",
            "location": 1714,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "CoverageExportContributor.__init__": {
            "name": "__init__",
            "location": 1719,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contributor_id": [],
                "validity_period": [],
                "data_sources": []
            }
        },
        "CoverageExportContributor.__repr__": {
            "name": "__repr__",
            "location": 1725,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoCoverageExportContributorSchema.make_coverageexportcontributor": {
            "name": "make_coverageexportcontributor",
            "location": 1735,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "CoverageExport.__init__": {
            "name": "__init__",
            "location": 1742,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coverage_id": [],
                "gridfs_id": [],
                "validity_period": [],
                "id": [],
                "created_at": []
            }
        },
        "CoverageExport.save": {
            "name": "save",
            "location": 1750,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CoverageExport.get": {
            "name": "get",
            "location": 1757,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "coverage_id": []
            }
        },
        "CoverageExport.get_last": {
            "name": "get_last",
            "location": 1764,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "coverage_id": []
            }
        },
        "CoverageExport.__repr__": {
            "name": "__repr__",
            "location": 1769,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoCoverageExportSchema.make_coverage_export": {
            "name": "make_coverage_export",
            "location": 1781,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "Contributor.__check_contributors_using_integrity.handle_contributor_query_result": {
            "name": "handle_contributor_query_result",
            "location": 749,
            "return": [],
            "arguments": {
                "contributors_using_result": []
            }
        }
    },
    "tartare-master/tartare/core/mongodb_helper.py": {
        "upgrade_dict": {
            "name": "upgrade_dict",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [],
                "request_data": [],
                "key": []
            }
        }
    },
    "tartare-master/tartare/core/publisher.py": {
        "AbstractProtocol.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "options": []
            }
        },
        "AbstractProtocol.publish": {
            "name": "publish",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [],
                "filename": []
            }
        },
        "HttpProtocol.publish": {
            "name": "publish",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [],
                "filename": []
            }
        },
        "FtpProtocol.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "options": []
            }
        },
        "FtpProtocol.publish": {
            "name": "publish",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [],
                "filename": []
            }
        },
        "ProtocolManager.select_from_platform": {
            "name": "select_from_platform",
            "location": 109,
            "return": [
                "Union[(FtpProtocol, HttpProtocol)]"
            ],
            "arguments": {
                "cls": [],
                "platform": []
            }
        },
        "Publisher.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "protocol_uploader": []
            }
        },
        "Publisher.publish": {
            "name": "publish",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "input_data_source_ids": []
            }
        }
    },
    "tartare-master/tartare/core/readers.py": {
        "AbstractPandaReader.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractPandaReader.count_rows": {
            "name": "count_rows",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractPandaReader.get_max": {
            "name": "get_max",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "column": []
            }
        },
        "AbstractPandaReader.get_min": {
            "name": "get_min",
            "location": 55,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "column": []
            }
        },
        "AbstractPandaReader.get_mapping_from_columns": {
            "name": "get_mapping_from_columns",
            "location": 58,
            "return": [
                "Generator[(dict, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "key_column": [],
                "value_apply_function": []
            }
        },
        "AbstractPandaReader.apply": {
            "name": "apply",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "column_name": [],
                "callback": [],
                "fillna": []
            }
        },
        "JsonReader.load_json_data_from_io": {
            "name": "load_json_data_from_io",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "json_file": [],
                "usecols": []
            }
        },
        "CsvReader.file_in_zip_files": {
            "name": "file_in_zip_files",
            "location": 94,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [],
                "zip_file": [],
                "filename": []
            }
        },
        "CsvReader.load_csv_data_from_zip_file": {
            "name": "load_csv_data_from_zip_file",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "zip_file": [],
                "filename": [],
                "sep": [],
                "usecols": []
            }
        },
        "CsvReader.load_csv_data": {
            "name": "load_csv_data",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "csv_full_filename": [],
                "sep": [],
                "usecols": []
            }
        },
        "CsvReader.save_as_csv": {
            "name": "save_as_csv",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "csv_full_filename": []
            }
        }
    },
    "tartare-master/tartare/core/subprocess_wrapper.py": {
        "SubProcessWrapper.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "SubProcessWrapper.run_cmd": {
            "name": "run_cmd",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": []
            }
        }
    },
    "tartare-master/tartare/core/validity_period_computers.py": {
        "AbstractValidityPeriodComputer.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "date_format": []
            }
        },
        "AbstractValidityPeriodComputer.compute": {
            "name": "compute",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "file_name": []
            }
        },
        "AbstractValidityPeriodComputer.check_zip_file": {
            "name": "check_zip_file",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "file_name": []
            }
        },
        "ValidityPeriodFromCsvComputer.compute": {
            "name": "compute",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_name": []
            }
        },
        "ValidityPeriodFromCsvComputer.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "date_format": []
            }
        },
        "GtfsValidityPeriodComputer.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GtfsValidityPeriodComputer.compute": {
            "name": "compute",
            "location": 83,
            "return": [
                "tartare.core.models.ValidityPeriod"
            ],
            "arguments": {
                "self": [],
                "file_name": []
            }
        },
        "GtfsValidityPeriodComputer.is_start_date_valid": {
            "name": "is_start_date_valid",
            "location": 109,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "GtfsValidityPeriodComputer.is_end_date_valid": {
            "name": "is_end_date_valid",
            "location": 112,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "GtfsValidityPeriodComputer._parse_calendar": {
            "name": "_parse_calendar",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "files_zip": []
            }
        },
        "GtfsValidityPeriodComputer.add_dates": {
            "name": "add_dates",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dates": []
            }
        },
        "GtfsValidityPeriodComputer.remove_dates": {
            "name": "remove_dates",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dates": []
            }
        },
        "GtfsValidityPeriodComputer._parse_calendar_dates": {
            "name": "_parse_calendar_dates",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "files_zip": []
            }
        },
        "GtfsValidityPeriodComputer._parse_feed_info": {
            "name": "_parse_feed_info",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "files_zip": []
            }
        },
        "TitanValidityPeriodComputer.__init__": {
            "name": "__init__",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TitanValidityPeriodComputer.compute": {
            "name": "compute",
            "location": 200,
            "return": [
                "tartare.core.models.ValidityPeriod"
            ],
            "arguments": {
                "self": [],
                "file_name": []
            }
        },
        "ObitiValidityPeriodComputer.__init__": {
            "name": "__init__",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObitiValidityPeriodComputer.__check_file_exists_and_return_right_case": {
            "name": "__check_file_exists_and_return_right_case",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "zip_file": [],
                "file_to_check": []
            }
        },
        "ObitiValidityPeriodComputer.compute": {
            "name": "compute",
            "location": 233,
            "return": [
                "tartare.core.models.ValidityPeriod"
            ],
            "arguments": {
                "self": [],
                "file_name": []
            }
        },
        "NeptuneValidityPeriodComputer.__init__": {
            "name": "__init__",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NeptuneValidityPeriodComputer.__change_day_until_weekday_reached": {
            "name": "__change_day_until_weekday_reached",
            "location": 276,
            "return": [],
            "arguments": {
                "cls": [],
                "period_date": [],
                "weekdays": [],
                "nb_days": []
            }
        },
        "NeptuneValidityPeriodComputer.__parse_xml_file_into_unique_validity_period": {
            "name": "__parse_xml_file_into_unique_validity_period",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "xml_file_name": []
            }
        },
        "NeptuneValidityPeriodComputer.compute": {
            "name": "compute",
            "location": 307,
            "return": [
                "tartare.core.models.ValidityPeriod"
            ],
            "arguments": {
                "self": [],
                "file_name": []
            }
        }
    },
    "tartare-master/tartare/core/validity_period_finder.py": {
        "ValidityPeriodFinder.get_data_format_with_validity": {
            "name": "get_data_format_with_validity",
            "location": 42,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ValidityPeriodFinder.get_computers_mapping": {
            "name": "get_computers_mapping",
            "location": 46,
            "return": [
                "Dict[(str, Union[(tartare.core.validity_period_computers.GtfsValidityPeriodComputer, tartare.core.validity_period_computers.NeptuneValidityPeriodComputer, tartare.core.validity_period_computers.ObitiValidityPeriodComputer, tartare.core.validity_period_computers.TitanValidityPeriodComputer)])]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "ValidityPeriodFinder.select_computer_from_data_format": {
            "name": "select_computer_from_data_format",
            "location": 56,
            "return": [
                "Union[(tartare.core.validity_period_computers.GtfsValidityPeriodComputer, tartare.core.validity_period_computers.NeptuneValidityPeriodComputer, tartare.core.validity_period_computers.ObitiValidityPeriodComputer, tartare.core.validity_period_computers.TitanValidityPeriodComputer)]"
            ],
            "arguments": {
                "cls": [],
                "data_format": []
            }
        },
        "ValidityPeriodFinder.select_computer_and_find": {
            "name": "select_computer_and_find",
            "location": 64,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "file_or_file_name": [],
                "data_format": []
            }
        }
    },
    "tartare-master/tartare/core/zip.py": {
        "edit_file_in_zip_file": {
            "name": "edit_file_in_zip_file",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "zip_file": [],
                "filename": [],
                "extract_zip_path": [],
                "callback": []
            }
        },
        "edit_file_in_zip_file_and_pack": {
            "name": "edit_file_in_zip_file_and_pack",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "zip_file": [],
                "filename": [],
                "extract_zip_path": [],
                "new_zip_path": [],
                "callback": [],
                "computed_file_name": []
            }
        },
        "create_zip_file": {
            "name": "create_zip_file",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "from_dir": [],
                "to_dir": [],
                "filename": []
            }
        }
    },
    "tartare-master/tartare/core/__init__.py": {},
    "tartare-master/tartare/interfaces/automatic_update.py": {
        "AutomaticUpdateResource.post": {
            "name": "post",
            "location": 38,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tartare/interfaces/common_argrs.py": {
        "CommonArgs.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommonArgs.get_current_date": {
            "name": "get_current_date",
            "location": 43,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pagination.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tartare/interfaces/contributors.py": {
        "Contributor.__pre_save_contributor": {
            "name": "__pre_save_contributor",
            "location": 50,
            "return": [],
            "arguments": {
                "cls": [],
                "post_data": []
            }
        },
        "Contributor.post": {
            "name": "post",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Contributor.get": {
            "name": "get",
            "location": 87,
            "return": [
                "Tuple[(Dict[(str, Any)], int)]"
            ],
            "arguments": {
                "self": [],
                "contributor_id": []
            }
        },
        "Contributor.delete": {
            "name": "delete",
            "location": 99,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "self": [],
                "contributor_id": []
            }
        },
        "Contributor.put": {
            "name": "put",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "contributor_id": []
            }
        }
    },
    "tartare-master/tartare/interfaces/contributor_export.py": {
        "ContributorExportResource._export": {
            "name": "_export",
            "location": 46,
            "return": [
                "tartare.core.models.Job"
            ],
            "arguments": {
                "contributor": []
            }
        },
        "ContributorExportResource.post": {
            "name": "post",
            "location": 56,
            "return": [
                "Tuple[(Dict[(str, Any)], int)]"
            ],
            "arguments": {
                "self": [],
                "contributor_id": []
            }
        },
        "ContributorExportResource.get": {
            "name": "get",
            "location": 65,
            "return": [
                "Tuple[(Dict[(str, Any)], int)]"
            ],
            "arguments": {
                "self": [],
                "contributor_id": []
            }
        }
    },
    "tartare-master/tartare/interfaces/coverages.py": {
        "Coverage.__pre_save_coverage": {
            "name": "__pre_save_coverage",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "post_data": []
            }
        },
        "Coverage.post": {
            "name": "post",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Coverage.get": {
            "name": "get",
            "location": 76,
            "return": [
                "Tuple[(Dict[(str, Any)], int)]"
            ],
            "arguments": {
                "self": [],
                "coverage_id": []
            }
        },
        "Coverage.delete": {
            "name": "delete",
            "location": 87,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "self": [],
                "coverage_id": []
            }
        },
        "Coverage.put": {
            "name": "put",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "coverage_id": []
            }
        }
    },
    "tartare-master/tartare/interfaces/coverage_export.py": {
        "CoverageExportResource._export": {
            "name": "_export",
            "location": 48,
            "return": [
                "models.Job"
            ],
            "arguments": {
                "self": [],
                "coverage": []
            }
        },
        "CoverageExportResource.post": {
            "name": "post",
            "location": 58,
            "return": [
                "Tuple[(Dict[(str, Any)], int)]"
            ],
            "arguments": {
                "self": [],
                "coverage_id": []
            }
        },
        "CoverageExportResource.get": {
            "name": "get",
            "location": 67,
            "return": [
                "Tuple[(Dict[(str, Any)], int)]"
            ],
            "arguments": {
                "self": [],
                "coverage_id": []
            }
        }
    },
    "tartare-master/tartare/interfaces/data_set.py": {
        "DataSet.post": {
            "name": "post",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "contributor_id": [],
                "data_source_id": []
            }
        }
    },
    "tartare-master/tartare/interfaces/data_sources.py": {
        "DataSource.get": {
            "name": "get",
            "location": 42,
            "return": [
                "Tuple[(Dict[(str, Any)], int)]"
            ],
            "arguments": {
                "self": [],
                "contributor_id": [],
                "data_source_id": []
            }
        }
    },
    "tartare-master/tartare/interfaces/data_source_fetch.py": {
        "DataSourceFetch.post": {
            "name": "post",
            "location": 42,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "self": [],
                "contributor_id": [],
                "data_source_id": []
            }
        }
    },
    "tartare-master/tartare/interfaces/files_download.py": {
        "FileDownload.get": {
            "name": "get",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "file_id": []
            }
        }
    },
    "tartare-master/tartare/interfaces/index.py": {
        "Index.get": {
            "name": "get",
            "location": 41,
            "return": [
                "Tuple[(Dict[(str, Dict[(str, Dict[(str, Any)])])], int)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tartare/interfaces/jobs.py": {
        "Job.get": {
            "name": "get",
            "location": 41,
            "return": [
                "Tuple[(Dict[(str, Any)], int)]"
            ],
            "arguments": {
                "self": [],
                "contributor_id": [],
                "coverage_id": [],
                "job_id": []
            }
        }
    },
    "tartare-master/tartare/interfaces/logs.py": {
        "datetime_type": {
            "name": "datetime_type",
            "location": 38,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "value": []
            }
        },
        "reset_time": {
            "name": "reset_time",
            "location": 44,
            "return": [
                "Any"
            ],
            "arguments": {
                "_datetime": []
            }
        },
        "RequestLogs.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestLogs.get": {
            "name": "get",
            "location": 58,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tartare/interfaces/processes.py": {
        "Processes.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Processes.get": {
            "name": "get",
            "location": 42,
            "return": [
                "Tuple[(Dict[(str, Dict[(Any, list)])], int)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tartare/interfaces/schema.py": {
        "NoUnknownFieldMixin.check_unknown_fields": {
            "name": "check_unknown_fields",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "original_data": []
            }
        },
        "PublicationPlatformSchema.remove_password": {
            "name": "remove_password",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "DataSourceSchema.remove_password": {
            "name": "remove_password",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "CoverageSchema.make_coverage": {
            "name": "make_coverage",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "CoverageSchema.add_last_active_job": {
            "name": "add_last_active_job",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "CoverageSchema.add_last_active_job.job_get_last": {
            "name": "job_get_last",
            "location": 99,
            "return": [],
            "arguments": {
                "is_coverage": [],
                "id": [],
                "action_types": []
            }
        },
        "CoverageSchema.add_last_active_job.get_last_active_job": {
            "name": "get_last_active_job",
            "location": 107,
            "return": [],
            "arguments": {
                "data": []
            }
        }
    },
    "tartare-master/tartare/interfaces/status.py": {
        "Status.get": {
            "name": "get",
            "location": 40,
            "return": [
                "Tuple[(Dict[(str, str)], int)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tartare/interfaces/__init__.py": {},
    "tartare-master/tartare/processes/abstract_process.py": {
        "AbstractProcess.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "process": []
            }
        },
        "AbstractProcess.save_result_into_target_data_source": {
            "name": "save_result_into_target_data_source",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_source_owner": [],
                "target_data_set_gridfs_id": [],
                "validity_period": []
            }
        },
        "AbstractProcess.do": {
            "name": "do",
            "location": 60,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractProcess.format_error_message": {
            "name": "format_error_message",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "AbstractProcess.get_link": {
            "name": "get_link",
            "location": 66,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "NewAbstractProcess.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "process": []
            }
        },
        "AbstractFusioProcess.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [],
                "process": []
            }
        },
        "AbstractFusioProcess.get_files_from_gridfs": {
            "name": "get_files_from_gridfs",
            "location": 89,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "gridfs_id": []
            }
        },
        "AbstractContributorProcess.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [],
                "process": []
            }
        },
        "AbstractContributorProcess.check_expected_files": {
            "name": "check_expected_files",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_files": []
            }
        },
        "AbstractContributorProcess.replace_in_grid_fs": {
            "name": "replace_in_grid_fs",
            "location": 117,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "old_gridfs_id": [],
                "zip_file": [],
                "computed_file_name": []
            }
        },
        "AbstractContributorProcess.add_in_grid_fs": {
            "name": "add_in_grid_fs",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "zip_file": [],
                "computed_file_name": []
            }
        },
        "AbstractContributorProcess.create_archive_and_replace_in_grid_fs": {
            "name": "create_archive_and_replace_in_grid_fs",
            "location": 127,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "old_gridfs_id": [],
                "files": [],
                "computed_file_name": []
            }
        },
        "AbstractContributorProcess.create_archive_and_add_in_grid_fs": {
            "name": "create_archive_and_add_in_grid_fs",
            "location": 136,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "files": [],
                "computed_file_name": []
            }
        },
        "AbstractContributorProcess.check_links": {
            "name": "check_links",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_format_required": []
            }
        },
        "NewAbstractContributorProcess.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [],
                "process": []
            }
        },
        "NewAbstractContributorProcess.save_result_into_target_data_source": {
            "name": "save_result_into_target_data_source",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_source_owner": [],
                "target_data_set_gridfs_id": [],
                "validity_period": []
            }
        },
        "NewAbstractCoverageProcess.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "context": [],
                "process": []
            }
        },
        "NewAbstractCoverageProcess.save_result_into_target_data_source": {
            "name": "save_result_into_target_data_source",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_source_owner": [],
                "target_data_set_gridfs_id": [],
                "validity_period": []
            }
        }
    },
    "tartare-master/tartare/processes/fusio.py": {
        "is_running": {
            "name": "is_running",
            "location": 43,
            "return": [
                "Any"
            ],
            "arguments": {
                "status": []
            }
        },
        "Fusio.format_date": {
            "name": "format_date",
            "location": 54,
            "return": [
                "Any"
            ],
            "arguments": {
                "_date": [],
                "format": []
            }
        },
        "Fusio.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "Fusio.__parse_xml": {
            "name": "__parse_xml",
            "location": 61,
            "return": [],
            "arguments": {
                "raw_xml": []
            }
        },
        "Fusio.get_action_id": {
            "name": "get_action_id",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "raw_xml": []
            }
        },
        "Fusio.get_export_url": {
            "name": "get_export_url",
            "location": 73,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "action_id": []
            }
        },
        "Fusio.__get_status_by_action_id": {
            "name": "__get_status_by_action_id",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "action_id": [],
                "raw_xml": []
            }
        },
        "Fusio.call": {
            "name": "call",
            "location": 86,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "method": [],
                "api": [],
                "data": [],
                "files": []
            }
        },
        "Fusio.replace_url_hostname_from_url": {
            "name": "replace_url_hostname_from_url",
            "location": 108,
            "return": [
                "Any"
            ],
            "arguments": {
                "export_url": [],
                "fusio_url": []
            }
        },
        "Fusio.wait_for_action_terminated": {
            "name": "wait_for_action_terminated",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "action_id": []
            }
        }
    },
    "tartare-master/tartare/processes/processes.py": {
        "ProcessManager.get_process_class": {
            "name": "get_process_class",
            "location": 43,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "process_name": [],
                "instance": []
            }
        },
        "ProcessManager.get_process": {
            "name": "get_process",
            "location": 58,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "context": [],
                "process": []
            }
        },
        "ProcessManager.check_processes_for_instance": {
            "name": "check_processes_for_instance",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "processes": [],
                "instance": []
            }
        },
        "ProcessManager.check_process_data_source_integrity": {
            "name": "check_process_data_source_integrity",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "process_dict_list": [],
                "existing_data_source_ids": [],
                "instance": []
            }
        }
    },
    "tartare-master/tartare/processes/utils.py": {
        "process_registry": {
            "name": "process_registry",
            "location": 35,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "filter": []
            }
        },
        "process_registry.deco": {
            "name": "deco",
            "location": 36,
            "return": [],
            "arguments": {
                "cls": []
            }
        }
    },
    "tartare-master/tartare/processes/__init__.py": {},
    "tartare-master/tartare/processes/contributor/compute_directions.py": {
        "ComputeDirections.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "process": []
            }
        },
        "ComputeDirections.__get_config_gridfs_id_from_context": {
            "name": "__get_config_gridfs_id_from_context",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ComputeDirections.do": {
            "name": "do",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ComputeDirections.__get_rules": {
            "name": "__get_rules",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "trip_to_route": [],
                "trip_stop_sequences": [],
                "config": []
            }
        },
        "ComputeDirections.__apply_rules": {
            "name": "__apply_rules",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "trips_reader": [],
                "trips_file_name": [],
                "trips_to_fix": []
            }
        },
        "ComputeDirections.__get_stop_sequence_by_trip": {
            "name": "__get_stop_sequence_by_trip",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "trip_to_route": []
            }
        },
        "ComputeDirections.do_compute_directions": {
            "name": "do_compute_directions",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "trips_file_name": [],
                "config": []
            }
        },
        "ComputeDirections.__process_file_from_gridfs_id": {
            "name": "__process_file_from_gridfs_id",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "gridfs_id_to_process": [],
                "config": []
            }
        }
    },
    "tartare-master/tartare/processes/contributor/compute_external_settings.py": {
        "ComputeExternalSettings.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "process": []
            }
        },
        "ComputeExternalSettings.__write_row_for_codes": {
            "name": "__write_row_for_codes",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "writer": [],
                "object_type": [],
                "object_system": [],
                "object_id": [],
                "object_code": []
            }
        },
        "ComputeExternalSettings.__write_row_for_properties": {
            "name": "__write_row_for_properties",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "writer": [],
                "object_type": [],
                "object_property_name": [],
                "object_property_value": [],
                "object_id": []
            }
        },
        "ComputeExternalSettings.__get_navitia_code_from_gtfs_stop_point": {
            "name": "__get_navitia_code_from_gtfs_stop_point",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "gtfs_stop_code": []
            }
        },
        "ComputeExternalSettings.__init_route_id_to_navitia_code_mapping": {
            "name": "__init_route_id_to_navitia_code_mapping",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "zip_file": []
            }
        },
        "ComputeExternalSettings.__create_rules_deactivate_realtime_for_routes_from_gtfs": {
            "name": "__create_rules_deactivate_realtime_for_routes_from_gtfs",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "tmp_dir_name": [],
                "writer_properties": []
            }
        },
        "ComputeExternalSettings.__create_rules_from_stop_extensions": {
            "name": "__create_rules_from_stop_extensions",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "tmp_dir_name": [],
                "writer_codes": []
            }
        },
        "ComputeExternalSettings.__create_rules_from_codif_ligne": {
            "name": "__create_rules_from_codif_ligne",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "writer_codes": []
            }
        },
        "ComputeExternalSettings.__create_rules_from_tr_perimeter": {
            "name": "__create_rules_from_tr_perimeter",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "writer_codes": [],
                "writer_properties": []
            }
        },
        "ComputeExternalSettings.__save_csv_files_as_data_set": {
            "name": "__save_csv_files_as_data_set",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "tmp_csv_workspace": []
            }
        },
        "ComputeExternalSettings.__process_file_from_gridfs_id": {
            "name": "__process_file_from_gridfs_id",
            "location": 170,
            "return": [],
            "arguments": {
                "self": [],
                "gridfs_id_to_process": []
            }
        },
        "ComputeExternalSettings.do": {
            "name": "do",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tartare/processes/contributor/gtfs2ntfs.py": {
        "Gtfs2Ntfs.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "process": []
            }
        },
        "Gtfs2Ntfs.do_gtfs2ntfs": {
            "name": "do_gtfs2ntfs",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "config_path": [],
                "input_dir": [],
                "output_dir": [],
                "prefix": []
            }
        },
        "Gtfs2Ntfs.__create_config": {
            "name": "__create_config",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "config_dir_path": [],
                "data_source_id": []
            }
        },
        "Gtfs2Ntfs.do": {
            "name": "do",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tartare/processes/contributor/gtfs_agency_file.py": {
        "GtfsAgencyFile.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "process": []
            }
        },
        "GtfsAgencyFile.manage_agency_file": {
            "name": "manage_agency_file",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "file_data": []
            }
        },
        "GtfsAgencyFile.do": {
            "name": "do",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tartare/processes/contributor/headsign_short_name.py": {
        "HeadsignShortName.get_trip_short_name": {
            "name": "get_trip_short_name",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "row": [],
                "map_route_modes": []
            }
        },
        "HeadsignShortName.get_map_route_modes": {
            "name": "get_map_route_modes",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "grid_out": []
            }
        },
        "HeadsignShortName.do_manage_headsign_short_name": {
            "name": "do_manage_headsign_short_name",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "filename": [],
                "map_route_modes": []
            }
        },
        "HeadsignShortName.do": {
            "name": "do",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tartare/processes/contributor/ruspell.py": {
        "Ruspell.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "process": []
            }
        },
        "Ruspell.__get_gridfs_id_from_data_source_context": {
            "name": "__get_gridfs_id_from_data_source_context",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "data_source_id": [],
                "contributor_id": []
            }
        },
        "Ruspell.__extract_data_sources_from_gridfs": {
            "name": "__extract_data_sources_from_gridfs",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "Ruspell.do_ruspell": {
            "name": "do_ruspell",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "file_path": [],
                "stops_output_path": [],
                "config_path": []
            }
        },
        "Ruspell.do": {
            "name": "do",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tartare/processes/contributor/sleeping.py": {
        "Sleeping.do": {
            "name": "do",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tartare/processes/contributor/__init__.py": {},
    "tartare-master/tartare/processes/coverage/compute_ods.py": {
        "ComputeODS.metadata_ordered_columns": {
            "name": "metadata_ordered_columns",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ComputeODS.do": {
            "name": "do",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tartare/processes/coverage/fusio_data_update.py": {
        "FusioDataUpdate.__get_data": {
            "name": "__get_data",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "contributor": [],
                "data_source": [],
                "data_set": []
            }
        },
        "FusioDataUpdate.do": {
            "name": "do",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tartare/processes/coverage/fusio_export.py": {
        "FusioExport.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "context": [],
                "process": []
            }
        },
        "FusioExport.get_export_type": {
            "name": "get_export_type",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FusioExport.save_export": {
            "name": "save_export",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "FusioExport.do": {
            "name": "do",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tartare/processes/coverage/fusio_export_contributor.py": {
        "FusioExportContributor.publish": {
            "name": "publish",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "protocol_uploader": [],
                "url": []
            }
        },
        "FusioExportContributor.do": {
            "name": "do",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tartare/processes/coverage/fusio_import.py": {
        "FusioImport.get_validity_period": {
            "name": "get_validity_period",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FusioImport.do": {
            "name": "do",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tartare/processes/coverage/fusio_preprod.py": {
        "FusioPreProd.do": {
            "name": "do",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tartare/processes/coverage/fusio_send_pt_external_settings.py": {
        "FusioSendPtExternalSettings.do": {
            "name": "do",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tartare/processes/coverage/__init__.py": {},
    "tartare-master/tests/docker_wrapper.py": {
        "AbstractDocker.fixtures_directory": {
            "name": "fixtures_directory",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractDocker._get_docker_file": {
            "name": "_get_docker_file",
            "location": 45,
            "return": [
                "io.BytesIO"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractDocker.volumes_bindings": {
            "name": "volumes_bindings",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractDocker.wait_until_available": {
            "name": "wait_until_available",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractDocker._remove_temporary_files": {
            "name": "_remove_temporary_files",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractDocker._fetch_image": {
            "name": "_fetch_image",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractDocker.image_name": {
            "name": "image_name",
            "location": 70,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractDocker.container_name": {
            "name": "container_name",
            "location": 74,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractDocker.ports": {
            "name": "ports",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractDocker.port_bindings": {
            "name": "port_bindings",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractDocker.env_vars": {
            "name": "env_vars",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractDocker.command": {
            "name": "command",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractDocker.volumes": {
            "name": "volumes",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractDocker.__enter__": {
            "name": "__enter__",
            "location": 97,
            "return": [
                "_TAbstractDocker@@AbstractDocker@@"
            ],
            "arguments": {
                "self": [
                    "_TAbstractDocker@@AbstractDocker@@"
                ]
            }
        },
        "AbstractDocker.execute_manual_build": {
            "name": "execute_manual_build",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractDocker.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractDocker.__exit__": {
            "name": "__exit__",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractHttpServerDocker.container_name": {
            "name": "container_name",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractHttpServerDocker.image_name": {
            "name": "image_name",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractHttpServerDocker.wait_until_available": {
            "name": "wait_until_available",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DownloadHttpServerDocker.working_dir": {
            "name": "working_dir",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DownloadHttpServerDocker.volumes": {
            "name": "volumes",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DownloadHttpServerDocker.container_name": {
            "name": "container_name",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DownloadHttpServerDocker.image_name": {
            "name": "image_name",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DownloadHttpServerDocker.volumes_bindings": {
            "name": "volumes_bindings",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DownloadHttpServerDocker._remove_temporary_files": {
            "name": "_remove_temporary_files",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DownloadHttpServerAuthentDocker.working_dir": {
            "name": "working_dir",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DownloadHttpServerAuthentDocker.volumes": {
            "name": "volumes",
            "location": 208,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DownloadHttpServerAuthentDocker.container_name": {
            "name": "container_name",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DownloadHttpServerAuthentDocker.image_name": {
            "name": "image_name",
            "location": 216,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DownloadHttpServerAuthentDocker.volumes_bindings": {
            "name": "volumes_bindings",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DownloadHttpServerAuthentDocker.env_vars": {
            "name": "env_vars",
            "location": 229,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DownloadHttpServerAuthentDocker.properties": {
            "name": "properties",
            "location": 233,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DownloadFtpServerDocker.working_dir": {
            "name": "working_dir",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DownloadFtpServerDocker.volumes": {
            "name": "volumes",
            "location": 245,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DownloadFtpServerDocker.container_name": {
            "name": "container_name",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DownloadFtpServerDocker.image_name": {
            "name": "image_name",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DownloadFtpServerDocker.volumes_bindings": {
            "name": "volumes_bindings",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UploadFtpServerDocker.user": {
            "name": "user",
            "location": 269,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UploadFtpServerDocker.password": {
            "name": "password",
            "location": 273,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UploadFtpServerDocker.conf_dir": {
            "name": "conf_dir",
            "location": 277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UploadFtpServerDocker.volumes": {
            "name": "volumes",
            "location": 281,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UploadFtpServerDocker.container_name": {
            "name": "container_name",
            "location": 285,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UploadFtpServerDocker.image_name": {
            "name": "image_name",
            "location": 289,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UploadFtpServerDocker.port_bindings": {
            "name": "port_bindings",
            "location": 293,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UploadFtpServerDocker.ports": {
            "name": "ports",
            "location": 300,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UploadFtpServerDocker.env_vars": {
            "name": "env_vars",
            "location": 304,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UploadFtpServerDocker.volumes_bindings": {
            "name": "volumes_bindings",
            "location": 308,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "UploadFtpServerDocker.wait_until_available": {
            "name": "wait_until_available",
            "location": 316,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DownloadFtpServerAuthentDocker.home_dir": {
            "name": "home_dir",
            "location": 323,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DownloadFtpServerAuthentDocker.volumes": {
            "name": "volumes",
            "location": 327,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DownloadFtpServerAuthentDocker.container_name": {
            "name": "container_name",
            "location": 331,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DownloadFtpServerAuthentDocker.image_name": {
            "name": "image_name",
            "location": 335,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DownloadFtpServerAuthentDocker.volumes_bindings": {
            "name": "volumes_bindings",
            "location": 339,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DownloadFtpServerAuthentDocker.port_bindings": {
            "name": "port_bindings",
            "location": 348,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DownloadFtpServerAuthentDocker.ports": {
            "name": "ports",
            "location": 352,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DownloadFtpServerAuthentDocker.env_vars": {
            "name": "env_vars",
            "location": 356,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MongoDocker.db_name": {
            "name": "db_name",
            "location": 362,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MongoDocker.container_name": {
            "name": "container_name",
            "location": 366,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MongoDocker.image_name": {
            "name": "image_name",
            "location": 370,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tests/fetcher_test.py": {
        "TestFetcher.test_http_matches_url": {
            "name": "test_http_matches_url",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "res": []
            }
        },
        "TestFetcher.test_ftp_matches_url": {
            "name": "test_ftp_matches_url",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "res": []
            }
        },
        "TestFetcher.test_guess_file_name_from_url_ok": {
            "name": "test_guess_file_name_from_url_ok",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "expected_file_name": []
            }
        },
        "TestFetcher.test_guess_file_name_from_url_ok_mocked": {
            "name": "test_guess_file_name_from_url_ok_mocked",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "mock_response": [],
                "url": []
            }
        },
        "TestFetcher.test_guess_file_name_from_url_error": {
            "name": "test_guess_file_name_from_url_error",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "mock_response": [],
                "url": []
            }
        },
        "TestFetcher.test_fetch_http_error": {
            "name": "test_fetch_http_error",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "mock_url_retrieve": []
            }
        },
        "TestFetcher.test_fetch_url_error": {
            "name": "test_fetch_url_error",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "mock_url_retrieve": []
            }
        },
        "TestFetcher.test_fetch_ok_data_format": {
            "name": "test_fetch_ok_data_format",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "mock_urlopen": [],
                "mock_open": [],
                "mock_copyfileobj": []
            }
        },
        "TestFetcher.test_fetch_ok_expected_file_name": {
            "name": "test_fetch_ok_expected_file_name",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "mock_urlopen": [],
                "mock_file": [],
                "mock_copyfileobj": []
            }
        },
        "TestFetcher.test_fetch_ok_expected_file_name_missing": {
            "name": "test_fetch_ok_expected_file_name_missing",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "mock_response": [],
                "mock_url_retrieve": []
            }
        },
        "TestFetcher.test_fetch_recompose_url": {
            "name": "test_fetch_recompose_url",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "url": [],
                "expected": []
            }
        },
        "TestFetcher.test_guess_file_name_from_url_redirect": {
            "name": "test_guess_file_name_from_url_redirect",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "mock_response": []
            }
        }
    },
    "tartare-master/tests/helper_test.py": {
        "test_to_doted_notation_flat": {
            "name": "test_to_doted_notation_flat",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_doted_notation_one": {
            "name": "test_to_doted_notation_one",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_doted_notation_one_multiple": {
            "name": "test_to_doted_notation_one_multiple",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_doted_notation_two": {
            "name": "test_to_doted_notation_two",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_doted_notation_array": {
            "name": "test_to_doted_notation_array",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_to_doted_notation_with_list_of_scalars": {
            "name": "test_to_doted_notation_with_list_of_scalars",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_make_doted_key": {
            "name": "test_make_doted_key",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_values_by_key_list": {
            "name": "test_get_values_by_key_list",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_values_by_key_dict": {
            "name": "test_get_values_by_key_dict",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_values_by_key_list_doublon": {
            "name": "test_get_values_by_key_list_doublon",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_values_by_key_dict_doublon": {
            "name": "test_get_values_by_key_dict_doublon",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_date_from_string": {
            "name": "test_date_from_string",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_date_from_string_invalid": {
            "name": "test_date_from_string_invalid",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dic_to_memory_csv_none": {
            "name": "test_dic_to_memory_csv_none",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dic_to_memory_csv_argument_keys": {
            "name": "test_dic_to_memory_csv_argument_keys",
            "location": 128,
            "return": [],
            "arguments": {
                "dict_writer": []
            }
        },
        "test_dic_to_memory_csv_keys": {
            "name": "test_dic_to_memory_csv_keys",
            "location": 135,
            "return": [],
            "arguments": {
                "dict_writer": []
            }
        },
        "test_dic_to_memory_csv_return_type": {
            "name": "test_dic_to_memory_csv_return_type",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tartare-master/tests/readers_test.py": {
        "TestCsvReader.__load_sample": {
            "name": "__load_sample",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCsvReader.test_reader_load": {
            "name": "test_reader_load",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCsvReader.test_reader_count": {
            "name": "test_reader_count",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCsvReader.test_reader_min": {
            "name": "test_reader_min",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCsvReader.test_reader_max": {
            "name": "test_reader_max",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCsvReader.test_get_mapping_from_columns": {
            "name": "test_get_mapping_from_columns",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJsonReader.test_load": {
            "name": "test_load",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJsonReader.__load_sample": {
            "name": "__load_sample",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestJsonReader.test_reader_count": {
            "name": "test_reader_count",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJsonReader.test_reader_min": {
            "name": "test_reader_min",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJsonReader.test_reader_max": {
            "name": "test_reader_max",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJsonReader.test_get_mapping_from_columns": {
            "name": "test_get_mapping_from_columns",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tests/subprocess_wrapper_test.py": {
        "test_subprocess_wrapper_invalid_command": {
            "name": "test_subprocess_wrapper_invalid_command",
            "location": 37,
            "return": [],
            "arguments": {
                "mocked_popen": []
            }
        },
        "test_subprocess_wrapper_valid_command": {
            "name": "test_subprocess_wrapper_valid_command",
            "location": 47,
            "return": [],
            "arguments": {
                "mocked_popen": []
            }
        }
    },
    "tartare-master/tests/testing_settings.py": {},
    "tartare-master/tests/utils.py": {
        "to_dict": {
            "name": "to_dict",
            "location": 42,
            "return": [
                "Any"
            ],
            "arguments": {
                "response": []
            }
        },
        "to_json": {
            "name": "to_json",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "dict": []
            }
        },
        "delete": {
            "name": "delete",
            "location": 50,
            "return": [
                "Any"
            ],
            "arguments": {
                "app": [],
                "url": []
            }
        },
        "post": {
            "name": "post",
            "location": 57,
            "return": [
                "Any"
            ],
            "arguments": {
                "app": [],
                "url": [],
                "params": [],
                "headers": []
            }
        },
        "patch": {
            "name": "patch",
            "location": 66,
            "return": [
                "Any"
            ],
            "arguments": {
                "app": [],
                "url": [],
                "params": [],
                "headers": []
            }
        },
        "mock_requests_post": {
            "name": "mock_requests_post",
            "location": 75,
            "return": [
                "mock.mock.MagicMock"
            ],
            "arguments": {
                "url": [],
                "files": [],
                "timeout": []
            }
        },
        "get_response": {
            "name": "get_response",
            "location": 79,
            "return": [
                "mock.mock.MagicMock"
            ],
            "arguments": {
                "status_code": [],
                "content": []
            }
        },
        "_get_file_fixture_full_path": {
            "name": "_get_file_fixture_full_path",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "rel_path": []
            }
        },
        "assert_zip_contains_only_files_with_extensions": {
            "name": "assert_zip_contains_only_files_with_extensions",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "zip_file": [],
                "extensions": []
            }
        },
        "assert_zip_contains_only_txt_files": {
            "name": "assert_zip_contains_only_txt_files",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "zip_file": []
            }
        },
        "display_files_content": {
            "name": "display_files_content",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "result_file_name": [],
                "expected_file_name": []
            }
        },
        "assert_text_files_equals": {
            "name": "assert_text_files_equals",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "result_file_name": [],
                "expected_file_name": []
            }
        },
        "assert_zip_file_equals_ref_zip_file": {
            "name": "assert_zip_file_equals_ref_zip_file",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "zip_file": [],
                "tmp_dir": [],
                "ref_zip_file": [],
                "ref_tmp_dir": []
            }
        },
        "assert_content_equals_ref_file": {
            "name": "assert_content_equals_ref_file",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "content": [],
                "ref_zip_file": []
            }
        }
    },
    "tartare-master/tests/validity_period_finder_test.py": {
        "test_zip_file_only_calendar": {
            "name": "test_zip_file_only_calendar",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_zip_file_only_feed_info": {
            "name": "test_zip_file_only_feed_info",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_zip_file_only_feed_info_invalid": {
            "name": "test_zip_file_only_feed_info_invalid",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_zip_file_only_feed_info_missing_dates": {
            "name": "test_zip_file_only_feed_info_missing_dates",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_zip_file_invalid": {
            "name": "test_zip_file_invalid",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_not_zipfile": {
            "name": "test_not_zipfile",
            "location": 82,
            "return": [],
            "arguments": {
                "data_format": []
            }
        },
        "test_empty_zipfile": {
            "name": "test_empty_zipfile",
            "location": 95,
            "return": [],
            "arguments": {
                "data_format": [],
                "message": []
            }
        },
        "test_calendar_without_end_date_column": {
            "name": "test_calendar_without_end_date_column",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calendar_without_start_date_column": {
            "name": "test_calendar_without_start_date_column",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gtfs_without_calendar": {
            "name": "test_gtfs_without_calendar",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calendar_with_not_date": {
            "name": "test_calendar_with_not_date",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calendar_dates_without_exception_type": {
            "name": "test_calendar_dates_without_exception_type",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calendar_dates_without_dates": {
            "name": "test_calendar_dates_without_dates",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_dates": {
            "name": "test_add_dates",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_dates": {
            "name": "test_remove_dates",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calendar_with_many_periods": {
            "name": "test_calendar_with_many_periods",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calendar_dates_with_headers_only": {
            "name": "test_calendar_dates_with_headers_only",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calendar_with_headers_only": {
            "name": "test_calendar_with_headers_only",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calendar_dates_with_empty_line": {
            "name": "test_calendar_dates_with_empty_line",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calendar_with_empty_line_and_remove_date_only": {
            "name": "test_calendar_with_empty_line_and_remove_date_only",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_calendar_with_empty_line_and_add_date_only": {
            "name": "test_calendar_with_empty_line_and_add_date_only",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gtfs_feed_info_with_2_rows": {
            "name": "test_gtfs_feed_info_with_2_rows",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compute_for_data_format_union_past": {
            "name": "test_compute_for_data_format_union_past",
            "location": 238,
            "return": [],
            "arguments": {
                "validity_periods": [],
                "expected_message": []
            }
        },
        "test_compute_for_data_format_union_empty": {
            "name": "test_compute_for_data_format_union_empty",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compute_for_data_format_union_valid": {
            "name": "test_compute_for_data_format_union_valid",
            "location": 284,
            "return": [],
            "arguments": {
                "validity_period_dates": [],
                "expected_period": []
            }
        },
        "test_titan_data_set": {
            "name": "test_titan_data_set",
            "location": 294,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_obiti_data_set": {
            "name": "test_obiti_data_set",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_obiti_data_set_invalid": {
            "name": "test_obiti_data_set_invalid",
            "location": 312,
            "return": [],
            "arguments": {
                "fixture": [],
                "message": []
            }
        },
        "test_neptune_data_set": {
            "name": "test_neptune_data_set",
            "location": 323,
            "return": [],
            "arguments": {
                "fixture": [],
                "start_date": [],
                "end_date": []
            }
        }
    },
    "tartare-master/tests/__init__.py": {},
    "tartare-master/tests/functional/abstract_request_client.py": {
        "AbstractRequestClient.get_url": {
            "name": "get_url",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractRequestClient.get_test_relative_path": {
            "name": "get_test_relative_path",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "relative_path": []
            }
        },
        "AbstractRequestClient.get_functional_relative_path": {
            "name": "get_functional_relative_path",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "relative_path": []
            }
        },
        "AbstractRequestClient.get_fixtures_relative_path": {
            "name": "get_fixtures_relative_path",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "relative_path": []
            }
        },
        "AbstractRequestClient.get_api_fixture_path": {
            "name": "get_api_fixture_path",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "relative_path": []
            }
        },
        "AbstractRequestClient.get": {
            "name": "get",
            "location": 55,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {
                "self": [],
                "uri": []
            }
        },
        "AbstractRequestClient.delete": {
            "name": "delete",
            "location": 58,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {
                "self": [],
                "uri": []
            }
        },
        "AbstractRequestClient.post": {
            "name": "post",
            "location": 61,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {
                "self": [],
                "uri": [],
                "payload": [],
                "files": [],
                "headers": []
            }
        },
        "AbstractRequestClient.put": {
            "name": "put",
            "location": 64,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {
                "self": [],
                "uri": [],
                "payload": [],
                "headers": []
            }
        },
        "AbstractRequestClient.get_json_from_dict": {
            "name": "get_json_from_dict",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "dict": []
            }
        },
        "AbstractRequestClient.get_dict_from_response": {
            "name": "get_dict_from_response",
            "location": 70,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "AbstractRequestClient.reset_api": {
            "name": "reset_api",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractRequestClient.assert_export_file_equals_ref_file": {
            "name": "assert_export_file_equals_ref_file",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contributor_id": [],
                "data_source_id": [],
                "ref_file": [],
                "expected_filename": []
            }
        },
        "AbstractRequestClient.replace_server_id_in_input_data_source_fixture": {
            "name": "replace_server_id_in_input_data_source_fixture",
            "location": 100,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "fixture_path": []
            }
        },
        "AbstractRequestClient.wait_for_jobs_to_exist": {
            "name": "wait_for_jobs_to_exist",
            "location": 109,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "action_type": [],
                "number": [],
                "nb_retries_max": []
            }
        },
        "AbstractRequestClient.wait_for_job_to_be_done": {
            "name": "wait_for_job_to_be_done",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_id": [],
                "step": [],
                "nb_retries_max": [],
                "break_if": [],
                "sleep_time": []
            }
        },
        "AbstractRequestClient.assert_status_is": {
            "name": "assert_status_is",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw": [],
                "status": []
            }
        },
        "AbstractRequestClient.assert_sucessful_call": {
            "name": "assert_sucessful_call",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw": []
            }
        },
        "AbstractRequestClient.assert_sucessful_create": {
            "name": "assert_sucessful_create",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw": []
            }
        },
        "AbstractRequestClient.full_export": {
            "name": "full_export",
            "location": 150,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {
                "self": [],
                "contributor_id": [],
                "coverage_id": [],
                "current_date": []
            }
        },
        "AbstractRequestClient.init_contributor": {
            "name": "init_contributor",
            "location": 162,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "fixture": []
            }
        },
        "AbstractRequestClient.init_coverage": {
            "name": "init_coverage",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fixture": []
            }
        },
        "AbstractRequestClient.contributor_export": {
            "name": "contributor_export",
            "location": 175,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "contributor_id": []
            }
        }
    },
    "tartare-master/tests/functional/conftest.py": {
        "empty_mongo": {
            "name": "empty_mongo",
            "location": 35,
            "return": [],
            "arguments": {}
        }
    },
    "tartare-master/tests/functional/full_export_test.py": {
        "TestFullExport.test_contrib_export_with_compute_directions": {
            "name": "test_contrib_export_with_compute_directions",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFullExport.test_contrib_export_with_ruspell": {
            "name": "test_contrib_export_with_ruspell",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFullExport.test_exports_combined": {
            "name": "test_exports_combined",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFullExport.test_exports_combined_two_coverages": {
            "name": "test_exports_combined_two_coverages",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFullExport.test_contrib_export_process_ko_before_ok": {
            "name": "test_contrib_export_process_ko_before_ok",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFullExport.test_coverage_exports_callback_waits_for_contributor_full_export": {
            "name": "test_coverage_exports_callback_waits_for_contributor_full_export",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFullExport.test_contrib_export_with_gtfs2ntfs": {
            "name": "test_contrib_export_with_gtfs2ntfs",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFullExport.test_auto_update_one_contributor": {
            "name": "test_auto_update_one_contributor",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tests/functional/regression_test.py": {
        "TestFullExport.test_stif_compute_directions": {
            "name": "test_stif_compute_directions",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tests/functional/__init__.py": {},
    "tartare-master/tests/integration/conftest.py": {
        "app": {
            "name": "app",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "fixture_dir": {
            "name": "fixture_dir",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "not_send_mail": {
            "name": "not_send_mail",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "not_send_mail.mock_send": {
            "name": "mock_send",
            "location": 49,
            "return": [],
            "arguments": {
                "arg": []
            }
        }
    },
    "tartare-master/tests/integration/fusio_test.py": {
        "test_is_running_none_status": {
            "name": "test_is_running_none_status",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_running_abort_status": {
            "name": "test_is_running_abort_status",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_running_terminated_status": {
            "name": "test_is_running_terminated_status",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_running_action": {
            "name": "test_is_running_action",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_action_id_none_xml": {
            "name": "test_get_action_id_none_xml",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_action_id_valid_xml": {
            "name": "test_get_action_id_valid_xml",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_action_id_xml_without_action_id": {
            "name": "test_get_action_id_xml_without_action_id",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_call_fusio_timeout": {
            "name": "test_call_fusio_timeout",
            "location": 94,
            "return": [],
            "arguments": {
                "timeout": []
            }
        },
        "test_call_fusio_RequestException": {
            "name": "test_call_fusio_RequestException",
            "location": 102,
            "return": [],
            "arguments": {
                "RequestException": []
            }
        },
        "test_call_fusio_status_404": {
            "name": "test_call_fusio_status_404",
            "location": 110,
            "return": [],
            "arguments": {
                "RequestException": []
            }
        },
        "action_status": {
            "name": "action_status",
            "location": 119,
            "return": [
                "mock.mock.MagicMock"
            ],
            "arguments": {}
        },
        "test_wait_for_action_terminated_retry": {
            "name": "test_wait_for_action_terminated_retry",
            "location": 145,
            "return": [],
            "arguments": {
                "action_status": []
            }
        },
        "test_replace_url_hostname": {
            "name": "test_replace_url_hostname",
            "location": 157,
            "return": [],
            "arguments": {
                "export_url": [],
                "fusio_url": [],
                "expected_url": []
            }
        }
    },
    "tartare-master/tests/integration/processes_test.py": {
        "test_contributor_process": {
            "name": "test_contributor_process",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_coverage_process": {
            "name": "test_coverage_process",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_launch_in_sequence": {
            "name": "test_launch_in_sequence",
            "location": 86,
            "return": [],
            "arguments": {
                "mock_run_process": []
            }
        },
        "test_launch_enabled": {
            "name": "test_launch_enabled",
            "location": 97,
            "return": [],
            "arguments": {
                "mock_run_process": []
            }
        }
    },
    "tartare-master/tests/integration/publisher_test.py": {
        "TestUploader.test_select_from_platform_ok": {
            "name": "test_select_from_platform_ok",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUploader.test_select_from_platform_ko": {
            "name": "test_select_from_platform_ko",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tests/integration/test_mechanism.py": {
        "TartareFixture.post": {
            "name": "post",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "params": [],
                "headers": []
            }
        },
        "TartareFixture.get": {
            "name": "get",
            "location": 54,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "TartareFixture.dict_to_json": {
            "name": "dict_to_json",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "dict": []
            }
        },
        "TartareFixture.json_to_dict": {
            "name": "json_to_dict",
            "location": 60,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "TartareFixture.patch": {
            "name": "patch",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "params": [],
                "headers": []
            }
        },
        "TartareFixture.put": {
            "name": "put",
            "location": 69,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "params": [],
                "headers": []
            }
        },
        "TartareFixture.delete": {
            "name": "delete",
            "location": 75,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "TartareFixture.is_json": {
            "name": "is_json",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TartareFixture.format_url": {
            "name": "format_url",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "ip": [],
                "filename": [],
                "path": [],
                "method": []
            }
        },
        "TartareFixture.assert_sucessful_create": {
            "name": "assert_sucessful_create",
            "location": 88,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "raw": []
            }
        },
        "TartareFixture.assert_sucessful_call": {
            "name": "assert_sucessful_call",
            "location": 91,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "raw": [],
                "status_code_expected": []
            }
        },
        "TartareFixture.assert_failed_call": {
            "name": "assert_failed_call",
            "location": 96,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "raw": [],
                "status_code_expected": []
            }
        },
        "TartareFixture.get_job_details": {
            "name": "get_job_details",
            "location": 100,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "TartareFixture.contributor_export": {
            "name": "contributor_export",
            "location": 105,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "contributor_id": [],
                "check_done": []
            }
        },
        "TartareFixture.get_all_jobs": {
            "name": "get_all_jobs",
            "location": 116,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "TartareFixture.get_jobs": {
            "name": "get_jobs",
            "location": 119,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "contributor_id": [],
                "coverage_id": [],
                "job_id": [],
                "page": [],
                "per_page": [],
                "check_success": []
            }
        },
        "TartareFixture.get_job_from_export_response": {
            "name": "get_job_from_export_response",
            "location": 142,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "TartareFixture.coverage_export": {
            "name": "coverage_export",
            "location": 147,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "coverage_id": [],
                "current_date": []
            }
        },
        "TartareFixture.full_export": {
            "name": "full_export",
            "location": 153,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "contributor_id": [],
                "coverage_id": [],
                "current_date": []
            }
        },
        "TartareFixture.init_contributor": {
            "name": "init_contributor",
            "location": 157,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "contributor_id": [],
                "data_source_id": [],
                "url": [],
                "data_format": [],
                "data_type": [],
                "service_id": [],
                "data_prefix": [],
                "export_id": [],
                "options": [],
                "type": [],
                "frequency": [],
                "expected_file_name": []
            }
        },
        "TartareFixture.init_coverage": {
            "name": "init_coverage",
            "location": 195,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "id": [],
                "input_data_source_ids": [],
                "processes": [],
                "environments": [],
                "license": [],
                "data_sources": [],
                "check_success": []
            }
        },
        "TartareFixture.add_process_to_coverage": {
            "name": "add_process_to_coverage",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "process": [],
                "coverage_id": []
            }
        },
        "TartareFixture.add_publication_platform_to_coverage": {
            "name": "add_publication_platform_to_coverage",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "platform": [],
                "coverage_id": [],
                "environment_name": []
            }
        },
        "TartareFixture.add_process_to_contributor": {
            "name": "add_process_to_contributor",
            "location": 234,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "process": [],
                "contributor_id": [],
                "check_success": []
            }
        },
        "TartareFixture.add_data_source_to_contributor": {
            "name": "add_data_source_to_contributor",
            "location": 242,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "contributor_id": [],
                "data_source_id": [],
                "url": [],
                "data_format": [],
                "service_id": [],
                "export_id": [],
                "type": [],
                "check_success": []
            }
        },
        "TartareFixture.update_data_source_url": {
            "name": "update_data_source_url",
            "location": 271,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "contrib_id": [],
                "ds_id": [],
                "url": []
            }
        },
        "TartareFixture.run_automatic_update": {
            "name": "run_automatic_update",
            "location": 278,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "TartareFixture.get_fusio_export_url_response_from_action_id": {
            "name": "get_fusio_export_url_response_from_action_id",
            "location": 285,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "action_id": [],
                "export_url": []
            }
        },
        "TartareFixture.get_fusio_response_from_action_id": {
            "name": "get_fusio_response_from_action_id",
            "location": 299,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "action_id": []
            }
        },
        "TartareFixture.post_manual_data_set": {
            "name": "post_manual_data_set",
            "location": 305,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "cid": [],
                "dsid": [],
                "path": []
            }
        },
        "TartareFixture.assert_ods_metadata": {
            "name": "assert_ods_metadata",
            "location": 313,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coverage_id": [],
                "test_ods_file_exist": []
            }
        },
        "TartareFixture.fetch_data_source": {
            "name": "fetch_data_source",
            "location": 327,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "contributor_id": [],
                "data_source_id": [],
                "check_success": []
            }
        },
        "TartareFixture.filter_job_of_action_type": {
            "name": "filter_job_of_action_type",
            "location": 335,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "jobs": [],
                "action_type": [],
                "return_first": []
            }
        },
        "TartareFixture.get_coverage": {
            "name": "get_coverage",
            "location": 341,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "coverage_id": []
            }
        },
        "TartareFixture.get_contributor": {
            "name": "get_contributor",
            "location": 346,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "contributor_id": []
            }
        },
        "TartareFixture.get_gridfs_id_from_data_source": {
            "name": "get_gridfs_id_from_data_source",
            "location": 351,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "contributor_id": [],
                "data_source_id": []
            }
        },
        "TartareFixture.get_gridfs_id_from_data_source_of_coverage": {
            "name": "get_gridfs_id_from_data_source_of_coverage",
            "location": 357,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "coverage_id": [],
                "data_source_id": []
            }
        },
        "TartareFixture.assert_gridfs_equals_fixture": {
            "name": "assert_gridfs_equals_fixture",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gridfs_id": [],
                "fixture": []
            }
        },
        "TartareFixture.assert_data_source_has_username_and_password": {
            "name": "assert_data_source_has_username_and_password",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "data_source": [],
                "username": [],
                "password": [],
                "model": [],
                "id": []
            }
        },
        "TartareFixture.assert_process_validation_error": {
            "name": "assert_process_validation_error",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw": [],
                "key": [],
                "message": []
            }
        },
        "TartareFixture.assert_process_validation_error_global": {
            "name": "assert_process_validation_error_global",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw": [],
                "key": [],
                "message": []
            }
        }
    },
    "tartare-master/tests/integration/__init__.py": {},
    "tartare-master/tests/integration/mongo/automatic_update_test.py": {
        "TestAutomaticUpdate.test_automatic_update_nothing_done": {
            "name": "test_automatic_update_nothing_done",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAutomaticUpdate.__create_contributor": {
            "name": "__create_contributor",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "ip": [],
                "id": []
            }
        },
        "TestAutomaticUpdate.__assert_job_is_automatic_update_contributor_export": {
            "name": "__assert_job_is_automatic_update_contributor_export",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "job": [],
                "cid": []
            }
        },
        "TestAutomaticUpdate.__assert_job_is_automatic_update_contributor_export_unchanged": {
            "name": "__assert_job_is_automatic_update_contributor_export_unchanged",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "TestAutomaticUpdate.__assert_job_is_automatic_update_coverage_export": {
            "name": "__assert_job_is_automatic_update_coverage_export",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "job": []
            }
        },
        "TestAutomaticUpdate.test_automatic_update_one_contributor": {
            "name": "test_automatic_update_one_contributor",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        },
        "TestAutomaticUpdate.__create_coverage": {
            "name": "__create_coverage",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "input_data_source_ids": [],
                "coverage_id": []
            }
        },
        "TestAutomaticUpdate.test_automatic_update_one_contributor_and_coverage": {
            "name": "test_automatic_update_one_contributor_and_coverage",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        },
        "TestAutomaticUpdate.test_automatic_update_twice_one_contributor_and_coverage": {
            "name": "test_automatic_update_twice_one_contributor_and_coverage",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        },
        "TestAutomaticUpdate.test_automatic_update_twice_multi_contributor_and_multi_coverage": {
            "name": "test_automatic_update_twice_multi_contributor_and_multi_coverage",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        },
        "TestAutomaticUpdate.test_data_format_generate_export": {
            "name": "test_data_format_generate_export",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        },
        "TestAutomaticUpdate.test_generate_2_exports_when_data_changes_with_different_data_formats": {
            "name": "test_generate_2_exports_when_data_changes_with_different_data_formats",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "init_http_download_server": [],
                "path": [],
                "filename": [],
                "updated_filename": [],
                "data_format": []
            }
        },
        "TestAutomaticUpdate.test_data_format_generate_no_export": {
            "name": "test_data_format_generate_no_export",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        }
    },
    "tartare-master/tests/integration/mongo/conftest.py": {
        "docker": {
            "name": "docker",
            "location": 41,
            "return": [],
            "arguments": {}
        },
        "init_mongo_db": {
            "name": "init_mongo_db",
            "location": 50,
            "return": [],
            "arguments": {
                "docker": []
            }
        },
        "empty_mongo": {
            "name": "empty_mongo",
            "location": 60,
            "return": [],
            "arguments": {
                "docker": []
            }
        },
        "init_http_download_server": {
            "name": "init_http_download_server",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "init_http_download_authent_server": {
            "name": "init_http_download_authent_server",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "init_ftp_upload_server": {
            "name": "init_ftp_upload_server",
            "location": 80,
            "return": [],
            "arguments": {}
        },
        "init_ftp_download_server": {
            "name": "init_ftp_download_server",
            "location": 86,
            "return": [],
            "arguments": {}
        },
        "init_ftp_download_server_authent": {
            "name": "init_ftp_download_server_authent",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "get_app_context": {
            "name": "get_app_context",
            "location": 98,
            "return": [],
            "arguments": {}
        },
        "coverage_with_data_source_tram_lyon": {
            "name": "coverage_with_data_source_tram_lyon",
            "location": 104,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "coverage": {
            "name": "coverage",
            "location": 112,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "contributor": {
            "name": "contributor",
            "location": 120,
            "return": [],
            "arguments": {
                "app": []
            }
        },
        "data_source": {
            "name": "data_source",
            "location": 128,
            "return": [],
            "arguments": {
                "app": [],
                "contributor": []
            }
        },
        "coverage_export_obj": {
            "name": "coverage_export_obj",
            "location": 155,
            "return": [],
            "arguments": {
                "tmpdir": [],
                "get_app_context": []
            }
        }
    },
    "tartare-master/tests/integration/mongo/contributors_api_test.py": {
        "TestContributors.test_get_contributors_empty_success": {
            "name": "test_get_contributors_empty_success",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_get_contributors_non_exist": {
            "name": "test_get_contributors_non_exist",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_add_contributor_without_id": {
            "name": "test_add_contributor_without_id",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_add_contributor_empty_id": {
            "name": "test_add_contributor_empty_id",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_add_contributor_without_data_prefix": {
            "name": "test_add_contributor_without_data_prefix",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_add_contributor_returns_success": {
            "name": "test_add_contributor_returns_success",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_add_contributor_with_data_type_geographic": {
            "name": "test_add_contributor_with_data_type_geographic",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_add_contributor_with_invalid_data_type": {
            "name": "test_add_contributor_with_invalid_data_type",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_add_contributors_no_id": {
            "name": "test_add_contributors_no_id",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_add_coverage_no_name": {
            "name": "test_add_coverage_no_name",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_add_coverage_no_prefix": {
            "name": "test_add_coverage_no_prefix",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_add_contributors_unique_data_suffix_ok": {
            "name": "test_add_contributors_unique_data_suffix_ok",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_add_contributors_unique_data_suffix_error": {
            "name": "test_add_contributors_unique_data_suffix_error",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_post_contrib_no_data_source": {
            "name": "test_post_contrib_no_data_source",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_post_contrib_with_existing_id": {
            "name": "test_post_contrib_with_existing_id",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contributor": []
            }
        },
        "TestContributors.test_post_contrib_with_existing_data_prefix": {
            "name": "test_post_contrib_with_existing_data_prefix",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contributor": []
            }
        },
        "TestContributors.test_post_contrib_with_existing_data_source_id": {
            "name": "test_post_contrib_with_existing_data_source_id",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contributor": [],
                "data_source": []
            }
        },
        "TestContributors.test_post_contrib_with_two_data_sources_with_same_ids": {
            "name": "test_post_contrib_with_two_data_sources_with_same_ids",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_delete_contributors_returns_success": {
            "name": "test_delete_contributors_returns_success",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_update_contributor_name": {
            "name": "test_update_contributor_name",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contributor": []
            }
        },
        "TestContributors.test_update_contributor_data_prefix": {
            "name": "test_update_contributor_data_prefix",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contributor": []
            }
        },
        "TestContributors.test_update_unknown_contributor": {
            "name": "test_update_unknown_contributor",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_update_contributor_id_impossible": {
            "name": "test_update_contributor_id_impossible",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contributor": []
            }
        },
        "TestContributors.test_post_contrib_one_data_source_without_id": {
            "name": "test_post_contrib_one_data_source_without_id",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_post_contrib_one_data_source_with_frequency": {
            "name": "test_post_contrib_one_data_source_with_frequency",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_post_contrib_one_data_source_with_continuously_frequency_and_invalid_minutes": {
            "name": "test_post_contrib_one_data_source_with_continuously_frequency_and_invalid_minutes",
            "location": 410,
            "return": [],
            "arguments": {
                "self": [],
                "minutes": []
            }
        },
        "TestContributors.test_post_contrib_one_data_source_with_daily_frequency_and_invalid_hour": {
            "name": "test_post_contrib_one_data_source_with_daily_frequency_and_invalid_hour",
            "location": 438,
            "return": [],
            "arguments": {
                "self": [],
                "hour_of_day": []
            }
        },
        "TestContributors.test_post_contrib_one_data_source_with_weekly_frequency_and_invalid_params": {
            "name": "test_post_contrib_one_data_source_with_weekly_frequency_and_invalid_params",
            "location": 469,
            "return": [],
            "arguments": {
                "self": [],
                "day_of_week": [],
                "hour_of_day": []
            }
        },
        "TestContributors.test_post_contrib_one_data_source_with_monthly_frequency_and_invalid_params": {
            "name": "test_post_contrib_one_data_source_with_monthly_frequency_and_invalid_params",
            "location": 502,
            "return": [],
            "arguments": {
                "self": [],
                "day_of_month": [],
                "hour_of_day": []
            }
        },
        "TestContributors.test_post_contrib_one_data_source_with_id": {
            "name": "test_post_contrib_one_data_source_with_id",
            "location": 531,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_post_contrib_one_data_source_with_service_id": {
            "name": "test_post_contrib_one_data_source_with_service_id",
            "location": 558,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_post_contrib_one_data_source_with_invalid_input": {
            "name": "test_post_contrib_one_data_source_with_invalid_input",
            "location": 587,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_post_contrib_one_data_source_with_invalid_data_format": {
            "name": "test_post_contrib_one_data_source_with_invalid_data_format",
            "location": 609,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_post_contrib_two_data_source": {
            "name": "test_post_contrib_two_data_source",
            "location": 631,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_put_contrib_data_source_with_full_contributor": {
            "name": "test_put_contrib_data_source_with_full_contributor",
            "location": 669,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_put_contrib_add_data_source_with_existing_id": {
            "name": "test_put_contrib_add_data_source_with_existing_id",
            "location": 697,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_put_contrib_with_different_input": {
            "name": "test_put_contrib_with_different_input",
            "location": 704,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_put_contrib_with_different_frequency": {
            "name": "test_put_contrib_with_different_frequency",
            "location": 736,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_put_contrib_processes_without_id": {
            "name": "test_put_contrib_processes_without_id",
            "location": 775,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_put_contrib_processes_with_id": {
            "name": "test_put_contrib_processes_with_id",
            "location": 797,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_put_contrib_processes_type_unknown": {
            "name": "test_put_contrib_processes_type_unknown",
            "location": 815,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contributor": []
            }
        },
        "TestContributors.test_put_contrib_processes_gtfs_agency_file": {
            "name": "test_put_contrib_processes_gtfs_agency_file",
            "location": 830,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_post_contrib_integrity_fail_data_source_ids": {
            "name": "test_post_contrib_integrity_fail_data_source_ids",
            "location": 860,
            "return": [],
            "arguments": {
                "self": [],
                "data_sources": [],
                "data_source_ids": [],
                "missing_id": []
            }
        },
        "TestContributors.test_put_contrib_integrity_fail_data_source_ids": {
            "name": "test_put_contrib_integrity_fail_data_source_ids",
            "location": 885,
            "return": [],
            "arguments": {
                "self": [],
                "data_source_to_build_ids": [],
                "process_data_source_ids": [],
                "missing_id": []
            }
        },
        "TestContributors.__create_contributor": {
            "name": "__create_contributor",
            "location": 921,
            "return": [],
            "arguments": {
                "self": [],
                "data_type": [],
                "data_format": []
            }
        },
        "TestContributors.test_post_contrib_public_transport_with_data_format_invalid": {
            "name": "test_post_contrib_public_transport_with_data_format_invalid",
            "location": 946,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_post_contrib_public_transport_with_data_format_valid": {
            "name": "test_post_contrib_public_transport_with_data_format_valid",
            "location": 958,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_put_contrib_public_transport_with_data_format_invalid": {
            "name": "test_put_contrib_public_transport_with_data_format_invalid",
            "location": 964,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_put_contrib_public_transport_with_data_format_valid": {
            "name": "test_put_contrib_public_transport_with_data_format_valid",
            "location": 980,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_put_data_type_with_wrong_data_source": {
            "name": "test_put_data_type_with_wrong_data_source",
            "location": 991,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_post_contributor_multi_data_sources_osm_poly": {
            "name": "test_post_contributor_multi_data_sources_osm_poly",
            "location": 1010,
            "return": [],
            "arguments": {
                "self": [],
                "data_format": []
            }
        },
        "TestContributors.test_put_contributor_multi_data_sources_osm_poly_with_new_one": {
            "name": "test_put_contributor_multi_data_sources_osm_poly_with_new_one",
            "location": 1031,
            "return": [],
            "arguments": {
                "self": [],
                "data_format": []
            }
        },
        "TestContributors.test_put_contributor_multi_data_sources_osm_or_poly_update_one": {
            "name": "test_put_contributor_multi_data_sources_osm_or_poly_update_one",
            "location": 1056,
            "return": [],
            "arguments": {
                "self": [],
                "data_format": []
            }
        },
        "TestContributors.test_put_contributor_simple": {
            "name": "test_put_contributor_simple",
            "location": 1075,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contributor": []
            }
        },
        "TestContributors.test_put_contributor_id": {
            "name": "test_put_contributor_id",
            "location": 1085,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contributor": []
            }
        },
        "TestContributors.test_put_invalid_contributor_preserve_existing_one": {
            "name": "test_put_invalid_contributor_preserve_existing_one",
            "location": 1094,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contributor": []
            }
        },
        "TestContributors.test_put_contributor_data_sources": {
            "name": "test_put_contributor_data_sources",
            "location": 1105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        },
        "TestContributors.test_put_contributor_processes": {
            "name": "test_put_contributor_processes",
            "location": 1137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        },
        "TestContributors.test_post_and_put_contributor_processes_with_target_data_source_id": {
            "name": "test_post_and_put_contributor_processes_with_target_data_source_id",
            "location": 1170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.__assert_export_id_generated_computed_data_source": {
            "name": "__assert_export_id_generated_computed_data_source",
            "location": 1209,
            "return": [],
            "arguments": {
                "self": [],
                "contributor": []
            }
        },
        "TestContributors.test_post_contributor_data_source_export_id": {
            "name": "test_post_contributor_data_source_export_id",
            "location": 1219,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_put_contributor_data_source_export_id": {
            "name": "test_put_contributor_data_source_export_id",
            "location": 1224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_post_contributor_with_data_source_and_password_hidden": {
            "name": "test_post_contributor_with_data_source_and_password_hidden",
            "location": 1233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_put_contributor_with_data_source_and_password_hidden": {
            "name": "test_put_contributor_with_data_source_and_password_hidden",
            "location": 1242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_delete_contributor_with_data_source_used_by_other_contributor": {
            "name": "test_delete_contributor_with_data_source_used_by_other_contributor",
            "location": 1274,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        },
        "TestContributors.test_delete_contributor_with_data_source_used_by_other_new_contributor": {
            "name": "test_delete_contributor_with_data_source_used_by_other_new_contributor",
            "location": 1299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        },
        "TestContributors.test_delete_contributor_with_data_source_used_by_itself": {
            "name": "test_delete_contributor_with_data_source_used_by_itself",
            "location": 1322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        },
        "TestContributors.test_delete_contributor_with_data_source_used_by_coverage": {
            "name": "test_delete_contributor_with_data_source_used_by_coverage",
            "location": 1339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        },
        "TestContributors.test_delete_contributor_remove_files": {
            "name": "test_delete_contributor_remove_files",
            "location": 1350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        },
        "TestContributors.test_delete_contributor_with_process_remove_files": {
            "name": "test_delete_contributor_with_process_remove_files",
            "location": 1359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        },
        "TestContributors.test_get_data_source_of_unknown_contributor": {
            "name": "test_get_data_source_of_unknown_contributor",
            "location": 1375,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributors.test_get_data_source_unknown_in_contributor": {
            "name": "test_get_data_source_unknown_in_contributor",
            "location": 1380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contributor": []
            }
        }
    },
    "tartare-master/tests/integration/mongo/contributor_export_test.py": {
        "TestContributorExport.test_contributor_export_contributor_not_found": {
            "name": "test_contributor_export_contributor_not_found",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributorExport.test_get_contributor_export_contributor_not_found": {
            "name": "test_get_contributor_export_contributor_not_found",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributorExport.test_contributor_export": {
            "name": "test_contributor_export",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributorExport.test_contributor_export_find_job_by_contributor": {
            "name": "test_contributor_export_find_job_by_contributor",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributorExport.test_contributor_export_with_http_download": {
            "name": "test_contributor_export_with_http_download",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "init_http_download_server": [],
                "init_ftp_download_server": [],
                "contributor": [],
                "method": [],
                "filename": [],
                "state": [],
                "step": [],
                "error_message": []
            }
        },
        "TestContributorExport.test_contributor_export_with_processes_called": {
            "name": "test_contributor_export_with_processes_called",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": [],
                "contributor": []
            }
        },
        "TestContributorExport.test_contributor_export_generates_jobs": {
            "name": "test_contributor_export_generates_jobs",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        },
        "TestContributorExport.test_contributor_export_no_data_set": {
            "name": "test_contributor_export_no_data_set",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tests/integration/mongo/contributor_processes_api_test.py": {
        "TestComputeDirectionContributorProcessesApi.test_post_contributor_process_wrong_config_format": {
            "name": "test_post_contributor_process_wrong_config_format",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComputeDirectionContributorProcessesApi.test_post_contributor_process_no_config_data_source": {
            "name": "test_post_contributor_process_no_config_data_source",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComputeDirectionContributorProcessesApi.test_post_contributor_process_wrong_input": {
            "name": "test_post_contributor_process_wrong_input",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComputeDirectionContributorProcessesApi.test_post_contributor_process_ok": {
            "name": "test_post_contributor_process_ok",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComputeDirectionContributorProcessesApi.test_post_contributor_process_ok_on_create": {
            "name": "test_post_contributor_process_ok_on_create",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHeadSignShortNameContributorProcessesApi.test_post_contributor_process_wrong_input": {
            "name": "test_post_contributor_process_wrong_input",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHeadSignShortNameContributorProcessesApi.test_post_contributor_process_ok": {
            "name": "test_post_contributor_process_ok",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComputeExternalSettingsContributorProcessesApi.test_post_contributor_process_wrong_input": {
            "name": "test_post_contributor_process_wrong_input",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComputeExternalSettingsContributorProcessesApi.test_post_contributor_process_no_config_data_source": {
            "name": "test_post_contributor_process_no_config_data_source",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [],
                "data_format": [],
                "missing": []
            }
        },
        "TestComputeExternalSettingsContributorProcessesApi.test_post_contributor_process_missing_tr_perimeter": {
            "name": "test_post_contributor_process_missing_tr_perimeter",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComputeExternalSettingsContributorProcessesApi.test_post_contributor_process_wrong_tr_perimeter": {
            "name": "test_post_contributor_process_wrong_tr_perimeter",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComputeExternalSettingsContributorProcessesApi.test_post_contributor_process_missing_lines_referential": {
            "name": "test_post_contributor_process_missing_lines_referential",
            "location": 188,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComputeExternalSettingsContributorProcessesApi.test_post_contributor_process_wrong_lines_referential": {
            "name": "test_post_contributor_process_wrong_lines_referential",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComputeExternalSettingsContributorProcessesApi.test_post_contributor_process_missing_target": {
            "name": "test_post_contributor_process_missing_target",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComputeExternalSettingsContributorProcessesApi.test_post_contributor_process_ok": {
            "name": "test_post_contributor_process_ok",
            "location": 223,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGtfsAgencyFileContributorProcessesApi.test_post_contributor_process_wrong_input": {
            "name": "test_post_contributor_process_wrong_input",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGtfsAgencyFileContributorProcessesApi.test_post_contributor_process_invalid_parameters": {
            "name": "test_post_contributor_process_invalid_parameters",
            "location": 259,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "value": [],
                "error_message": []
            }
        },
        "TestGtfsAgencyFileContributorProcessesApi.test_post_contributor_process_valid_parameters": {
            "name": "test_post_contributor_process_valid_parameters",
            "location": 278,
            "return": [],
            "arguments": {
                "self": [],
                "field": [],
                "value": []
            }
        },
        "TestGtfsAgencyFileContributorProcessesApi.test_post_contributor_process_ok": {
            "name": "test_post_contributor_process_ok",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuspellContributorProcessesApi.test_post_contributor_process_wrong_input": {
            "name": "test_post_contributor_process_wrong_input",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuspellContributorProcessesApi.test_post_contributor_process_no_config_data_source": {
            "name": "test_post_contributor_process_no_config_data_source",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [],
                "data_format": [],
                "data_type": [],
                "missing": []
            }
        },
        "TestRuspellContributorProcessesApi.test_post_contributor_process_wrong_ruspell_config": {
            "name": "test_post_contributor_process_wrong_ruspell_config",
            "location": 324,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuspellContributorProcessesApi.test_post_contributor_process_wrong_geo_config": {
            "name": "test_post_contributor_process_wrong_geo_config",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuspellContributorProcessesApi.test_post_contributor_process_ok": {
            "name": "test_post_contributor_process_ok",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRuspellContributorProcessesApi.test_post_contributor_process_with_geo_ok": {
            "name": "test_post_contributor_process_with_geo_ok",
            "location": 355,
            "return": [],
            "arguments": {
                "self": [],
                "geo_data_sources": []
            }
        },
        "TestContributorProcessesApi.test_post_contributor_process_wrong_configuration_data_sources": {
            "name": "test_post_contributor_process_wrong_configuration_data_sources",
            "location": 380,
            "return": [],
            "arguments": {
                "self": [],
                "configuration_data_sources": []
            }
        },
        "TestContributorProcessesApi.test_post_contributor_process_no_configuration_data_sources": {
            "name": "test_post_contributor_process_no_configuration_data_sources",
            "location": 399,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributorProcessesApi.test_post_contributor_process_invalid_input_data_source_ids": {
            "name": "test_post_contributor_process_invalid_input_data_source_ids",
            "location": 417,
            "return": [],
            "arguments": {
                "self": [],
                "input_data_source_ids": [],
                "message": []
            }
        },
        "TestContributorProcessesApi.test_post_contributor_process_unknown_input_data_source_ids": {
            "name": "test_post_contributor_process_unknown_input_data_source_ids",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContributorProcessesApi.test_process_with_unrecognized_config_data_source": {
            "name": "test_process_with_unrecognized_config_data_source",
            "location": 455,
            "return": [],
            "arguments": {
                "self": [],
                "valid_process": [],
                "message": []
            }
        }
    },
    "tartare-master/tests/integration/mongo/contributor_processes_test.py": {
        "TestGtfsAgencyProcess.__contributor_creator": {
            "name": "__contributor_creator",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "data_set_url": [],
                "agency_params": [],
                "contrib_id": [],
                "data_source_id": []
            }
        },
        "TestGtfsAgencyProcess.test_gtfs_without_agency_file_and_no_agency_id_in_params": {
            "name": "test_gtfs_without_agency_file_and_no_agency_id_in_params",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        },
        "TestGtfsAgencyProcess.assert_agency_data_equals": {
            "name": "assert_agency_data_equals",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expected_data": [],
                "expected_filename": []
            }
        },
        "TestGtfsAgencyProcess.test_gtfs_without_agency_file_but_agency_id_in_params": {
            "name": "test_gtfs_without_agency_file_but_agency_id_in_params",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        },
        "TestGtfsAgencyProcess.test_gtfs_without_or_empty_agency_file": {
            "name": "test_gtfs_without_or_empty_agency_file",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "init_http_download_server": [],
                "agency_file": []
            }
        },
        "TestGtfsAgencyProcess.test_gtfs_with_agency_file_and_two_agencies": {
            "name": "test_gtfs_with_agency_file_and_two_agencies",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        },
        "TestGtfsAgencyProcess.test_gtfs_with_agency_file_but_no_agency_id_in_file": {
            "name": "test_gtfs_with_agency_file_but_no_agency_id_in_file",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        },
        "TestComputeDirectionsProcess.__setup_contributor_export_environment": {
            "name": "__setup_contributor_export_environment",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "init_http_download_server": [],
                "params": [],
                "add_data_source_config": [],
                "add_data_source_target": [],
                "data_set_filename": [],
                "do_export": []
            }
        },
        "TestComputeDirectionsProcess.test_compute_directions": {
            "name": "test_compute_directions",
            "location": 252,
            "return": [],
            "arguments": {
                "self": [],
                "init_http_download_server": [],
                "data_set_filename": [],
                "expected_trips_file_name": []
            }
        },
        "TestComputeExternalSettings.test_prepare_external_settings": {
            "name": "test_prepare_external_settings",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        },
        "TestHeadsignShortNameProcess.__contributor_creator": {
            "name": "__contributor_creator",
            "location": 320,
            "return": [],
            "arguments": {
                "self": [],
                "data_set_url": [],
                "data_source_id": []
            }
        },
        "TestHeadsignShortNameProcess.test_expected_files": {
            "name": "test_expected_files",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        },
        "TestHeadsignShortNameProcess.test_headsign_short_name": {
            "name": "test_headsign_short_name",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        },
        "TestHeadsignShortNameProcess.test_headsign_short_name_missing_column": {
            "name": "test_headsign_short_name_missing_column",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        },
        "TestRuspellProcess.test_ruspell_error_message_contributor_geographic_not_exported": {
            "name": "test_ruspell_error_message_contributor_geographic_not_exported",
            "location": 405,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        }
    },
    "tartare-master/tests/integration/mongo/coverage_api_test.py": {
        "TestCoverageApi.test_get_coverage_empty_success": {
            "name": "test_get_coverage_empty_success",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoverageApi.test_get_coverage_non_exist": {
            "name": "test_get_coverage_non_exist",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoverageApi.test_post_minimal_coverage_returns_success": {
            "name": "test_post_minimal_coverage_returns_success",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoverageApi.test_post_coverage_no_id": {
            "name": "test_post_coverage_no_id",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoverageApi.test_post_coverage_empty_id": {
            "name": "test_post_coverage_empty_id",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoverageApi.test_post_coverage_no_name": {
            "name": "test_post_coverage_no_name",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoverageApi.test_post_coverage_with_name": {
            "name": "test_post_coverage_with_name",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoverageApi.test_post_coverage_with_wrong_type": {
            "name": "test_post_coverage_with_wrong_type",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoverageApi.test_post_coverage_with_good_type": {
            "name": "test_post_coverage_with_good_type",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "type": []
            }
        },
        "TestCoverageApi.test_post_coverage_with_short_description_and_comment": {
            "name": "test_post_coverage_with_short_description_and_comment",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoverageApi.test_post_coverage_with_pre_env": {
            "name": "test_post_coverage_with_pre_env",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoverageApi.test_post_coverage_with_no_env": {
            "name": "test_post_coverage_with_no_env",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoverageApi.test_post_coverage_with_all_env": {
            "name": "test_post_coverage_with_all_env",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoverageApi.test_post_coverage_with_invalid_platorm_protocol": {
            "name": "test_post_coverage_with_invalid_platorm_protocol",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoverageApi.test_post_coverage_with_valid_platorm_protocol": {
            "name": "test_post_coverage_with_valid_platorm_protocol",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoverageApi.test_delete_coverage_returns_success": {
            "name": "test_delete_coverage_returns_success",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoverageApi.test_post_with_license": {
            "name": "test_post_with_license",
            "location": 347,
            "return": [],
            "arguments": {
                "self": [],
                "license_url": [],
                "license_name": [],
                "expected_status_code": []
            }
        },
        "TestCoverageApi.__assert_pub_platform_authent": {
            "name": "__assert_pub_platform_authent",
            "location": 369,
            "return": [],
            "arguments": {
                "self": [],
                "pub_platform": [],
                "user_to_set": []
            }
        },
        "TestCoverageApi.test_post_config_user_password_check_in_get": {
            "name": "test_post_config_user_password_check_in_get",
            "location": 374,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoverageApi.__create_geo_contributor": {
            "name": "__create_geo_contributor",
            "location": 414,
            "return": [],
            "arguments": {
                "self": [],
                "id": [],
                "data_source_id": []
            }
        },
        "TestCoverageApi.test_post_coverage_with_input_data_source_ids_not_found": {
            "name": "test_post_coverage_with_input_data_source_ids_not_found",
            "location": 433,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoverageApi.test_post_coverage_with_one_existing_input_data_source_id": {
            "name": "test_post_coverage_with_one_existing_input_data_source_id",
            "location": 440,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_source": []
            }
        },
        "TestCoverageApi.test_post_coverage_with_two_same_existing_input_data_source_id": {
            "name": "test_post_coverage_with_two_same_existing_input_data_source_id",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_source": []
            }
        },
        "TestCoverageApi.test_post_coverage_with_2_input_data_source_ids_belonging_to_2_contributors_geographic": {
            "name": "test_post_coverage_with_2_input_data_source_ids_belonging_to_2_contributors_geographic",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoverageApi.test_put_coverage_id": {
            "name": "test_put_coverage_id",
            "location": 466,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coverage": []
            }
        },
        "TestCoverageApi.test_put_invalid_coverage_missing_data_preserve_existing_one": {
            "name": "test_put_invalid_coverage_missing_data_preserve_existing_one",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coverage": []
            }
        },
        "TestCoverageApi.test_put_invalid_coverage_added_data_preserve_existing_one": {
            "name": "test_put_invalid_coverage_added_data_preserve_existing_one",
            "location": 486,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coverage": []
            }
        },
        "TestCoverageApi.test_put_coverage_simple": {
            "name": "test_put_coverage_simple",
            "location": 497,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coverage": [],
                "contributor": []
            }
        },
        "TestCoverageApi.test_put_coverage_process": {
            "name": "test_put_coverage_process",
            "location": 526,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoverageApi.test_put_coverage_publications": {
            "name": "test_put_coverage_publications",
            "location": 581,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoverageApi.test_post_coverage_publication_with_input_data_source_ids": {
            "name": "test_post_coverage_publication_with_input_data_source_ids",
            "location": 662,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoverageApi.test_put_coverage_with_input_data_source_ids": {
            "name": "test_put_coverage_with_input_data_source_ids",
            "location": 681,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coverage": [],
                "data_source": []
            }
        },
        "TestCoverageApi.test_put_coverage_preserve_hidden_password_if_username_doesnt_change": {
            "name": "test_put_coverage_preserve_hidden_password_if_username_doesnt_change",
            "location": 689,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoverageApi.test_put_coverage_remove_password_if_username_change": {
            "name": "test_put_coverage_remove_password_if_username_change",
            "location": 723,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoverageApi.test_post_coverage_with_data_source_and_password_hidden": {
            "name": "test_post_coverage_with_data_source_and_password_hidden",
            "location": 755,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoverageApi.test_put_coverage_with_data_source_and_password_hidden": {
            "name": "test_put_coverage_with_data_source_and_password_hidden",
            "location": 781,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoverageApi.test_post_coverage_duplicate_data_source": {
            "name": "test_post_coverage_duplicate_data_source",
            "location": 830,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoverageApi.test_put_coverage_duplicate_data_source": {
            "name": "test_put_coverage_duplicate_data_source",
            "location": 847,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoverageApi.test_post_coverage_existing_data_source": {
            "name": "test_post_coverage_existing_data_source",
            "location": 867,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoverageApi.test_put_coverage_existing_data_source": {
            "name": "test_put_coverage_existing_data_source",
            "location": 886,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tests/integration/mongo/coverage_export_test.py": {
        "TestCoverageExport.test_coverage_export_coverage_not_found": {
            "name": "test_coverage_export_coverage_not_found",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoverageExport.test_coverage_export": {
            "name": "test_coverage_export",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoverageExport.test_get_coverage_export": {
            "name": "test_get_coverage_export",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coverage_export_obj": []
            }
        }
    },
    "tartare-master/tests/integration/mongo/coverage_processes_api_test.py": {
        "TestComputeODSCoverageProcessesApi.test_post_coverage_with_process_invalid_input_data_source_ids": {
            "name": "test_post_coverage_with_process_invalid_input_data_source_ids",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "input_data_source_ids": [],
                "message": []
            }
        },
        "TestComputeODSCoverageProcessesApi.test_post_coverage_with_process_no_target_data_source_id": {
            "name": "test_post_coverage_with_process_no_target_data_source_id",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComputeODSCoverageProcessesApi.test_post_coverage_with_2_same_data_format_from_different_processes": {
            "name": "test_post_coverage_with_2_same_data_format_from_different_processes",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestComputeODSCoverageProcessesApi.test_post_coverage_with_2_same_data_format_in_process": {
            "name": "test_post_coverage_with_2_same_data_format_in_process",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tests/integration/mongo/coverage_processes_test.py": {
        "TestFusioDataUpdateProcess.__create_data_source": {
            "name": "__create_data_source",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "data_source_id": [],
                "url": [],
                "service_id": [],
                "name": []
            }
        },
        "TestFusioDataUpdateProcess.__init_contributor": {
            "name": "__init_contributor",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "contributor_id": [],
                "data_sources": [],
                "data_prefix": []
            }
        },
        "TestFusioDataUpdateProcess.__init_coverage": {
            "name": "__init_coverage",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "coverage_id": [],
                "input_data_source_ids": []
            }
        },
        "TestFusioDataUpdateProcess.test_data_update_called_for_each_data_source": {
            "name": "test_data_update_called_for_each_data_source",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "fusio_call": [],
                "wait_for_action_terminated": [],
                "init_http_download_server": []
            }
        },
        "TestFusioDataUpdateProcess.test_data_update_fail_if_data_source_has_service_id_null": {
            "name": "test_data_update_fail_if_data_source_has_service_id_null",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        },
        "TestFusioDataUpdateProcess.test_data_update_one_contributor_with_two_data_sources": {
            "name": "test_data_update_one_contributor_with_two_data_sources",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "fusio_call": [],
                "wait_for_action_terminated": [],
                "init_http_download_server": []
            }
        },
        "TestFusioDataUpdateProcess.test_data_update_other_data_formats": {
            "name": "test_data_update_other_data_formats",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "fusio_call": [],
                "wait_for_action_terminated": [],
                "init_http_download_server": [],
                "data_format": [],
                "file_name": [],
                "begin_date": [],
                "end_date": []
            }
        },
        "TestFusioDataUpdateProcess.test_data_update_past_period": {
            "name": "test_data_update_past_period",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        },
        "TestFusioImportProcess.test_import_period": {
            "name": "test_import_period",
            "location": 228,
            "return": [],
            "arguments": {
                "self": [],
                "fusio_call": [],
                "wait_for_action_terminated": [],
                "init_http_download_server": []
            }
        },
        "TestFusioImportProcess.test_import_invalid_dates": {
            "name": "test_import_invalid_dates",
            "location": 257,
            "return": [],
            "arguments": {
                "self": [],
                "fusio_call": [],
                "wait_for_action_terminated": [],
                "init_http_download_server": []
            }
        },
        "TestFusioExportProcess.test_fusio_export_avoid_merge_and_use_fusio_export_file": {
            "name": "test_fusio_export_avoid_merge_and_use_fusio_export_file",
            "location": 289,
            "return": [],
            "arguments": {
                "self": [],
                "fusio_get": [],
                "fusio_post": [],
                "wait_for_action_terminated": [],
                "replace_url_hostname_from_url": [],
                "init_http_download_server": []
            }
        },
        "TestFusioExportProcess.test_fusio_export_to_data_source": {
            "name": "test_fusio_export_to_data_source",
            "location": 362,
            "return": [],
            "arguments": {
                "self": [],
                "fusio_get": [],
                "fusio_post": [],
                "wait_for_action_terminated": [],
                "replace_url_hostname_from_url": [],
                "init_http_download_server": []
            }
        },
        "TestFusioExportProcess.test_fusio_export_missing_export_type": {
            "name": "test_fusio_export_missing_export_type",
            "location": 417,
            "return": [],
            "arguments": {
                "self": [],
                "init_http_download_server": [],
                "export_type": [],
                "expected_message": []
            }
        },
        "TestFusioExportContributorProcess.test_fusio_export_contributor": {
            "name": "test_fusio_export_contributor",
            "location": 448,
            "return": [],
            "arguments": {
                "self": [],
                "fusio_get": [],
                "fusio_post": [],
                "wait_for_action_terminated": [],
                "replace_url_hostname_from_url": [],
                "init_http_download_server": [],
                "init_ftp_upload_server": []
            }
        },
        "TestFusioPreProdProcess.test_fusio_preprod": {
            "name": "test_fusio_preprod",
            "location": 537,
            "return": [],
            "arguments": {
                "self": [],
                "fusio_call": [],
                "wait_for_action_terminated": [],
                "init_http_download_server": []
            }
        },
        "TestFusioSendPtExternalSettingsProcess.test_fusio_send_pt_external_settings": {
            "name": "test_fusio_send_pt_external_settings",
            "location": 563,
            "return": [],
            "arguments": {
                "self": [],
                "fusio_call": [],
                "wait_for_action_terminated": [],
                "init_http_download_server": []
            }
        },
        "TestComputeODSProcess.test_process_compute_ods": {
            "name": "test_process_compute_ods",
            "location": 633,
            "return": [],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        },
        "TestComputeODSProcess.test_process_compute_ods.test_ods_file_exist": {
            "name": "test_ods_file_exist",
            "location": 660,
            "return": [],
            "arguments": {
                "_extract_path": []
            }
        }
    },
    "tartare-master/tests/integration/mongo/coverage_status_test.py": {
        "TestCoverageStatus.__run_automatic_update": {
            "name": "__run_automatic_update",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCoverageStatus.__run_coverage_export": {
            "name": "__run_coverage_export",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "coverage_id": []
            }
        },
        "TestCoverageStatus.__create_contributor": {
            "name": "__create_contributor",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "ip": [],
                "id": [],
                "file": []
            }
        },
        "TestCoverageStatus.__create_coverage": {
            "name": "__create_coverage",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "input_data_source_ids": [],
                "coverage_id": [],
                "publication_platform": []
            }
        },
        "TestCoverageStatus.test_status_after_success_coverage_export_without_input_data_source_ids": {
            "name": "test_status_after_success_coverage_export_without_input_data_source_ids",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCoverageStatus.test_status_after_success_coverage_export_without_contributor_export": {
            "name": "test_status_after_success_coverage_export_without_contributor_export",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        },
        "TestCoverageStatus.test_status_after_success_coverage_export_with_one_contributor": {
            "name": "test_status_after_success_coverage_export_with_one_contributor",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        },
        "TestCoverageStatus.test_status_after_success_automatic_update": {
            "name": "test_status_after_success_automatic_update",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        },
        "TestCoverageStatus.test_status_after_failed_automatic_update_with_invalid_contributor": {
            "name": "test_status_after_failed_automatic_update_with_invalid_contributor",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        },
        "TestCoverageStatus.test_status_after_failed_automatic_update_on_publication": {
            "name": "test_status_after_failed_automatic_update_on_publication",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": [],
                "init_ftp_upload_server": []
            }
        },
        "TestCoverageStatus.test_status_successive_automatic_update": {
            "name": "test_status_successive_automatic_update",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        }
    },
    "tartare-master/tests/integration/mongo/data_publisher_test.py": {
        "TestDataPublisher._create_contributor": {
            "name": "_create_contributor",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "id": [],
                "url": [],
                "data_format": [],
                "data_type": []
            }
        },
        "TestDataPublisher._create_coverage": {
            "name": "_create_coverage",
            "location": 77,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "id": [],
                "input_data_source_id": [],
                "publication_platform": [],
                "license": []
            }
        },
        "TestDataPublisher.test_publish_ok": {
            "name": "test_publish_ok",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        },
        "TestDataPublisher.test_publish_ftp": {
            "name": "test_publish_ftp",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": [],
                "init_ftp_upload_server": []
            }
        },
        "TestDataPublisher.test_publish_ftp_with_directory": {
            "name": "test_publish_ftp_with_directory",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "init_http_download_server": [],
                "init_ftp_upload_server": []
            }
        },
        "TestDataPublisher.test_process_compute_ods_with_metadata_fusio": {
            "name": "test_process_compute_ods_with_metadata_fusio",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "fusio_get": [],
                "fusio_post": [],
                "wait_for_action_terminated": [],
                "replace_url_hostname_from_url": [],
                "init_http_download_server": [],
                "init_ftp_upload_server": []
            }
        },
        "TestDataPublisher.test_publish_environment_respect_sequence_order": {
            "name": "test_publish_environment_respect_sequence_order",
            "location": 298,
            "return": [],
            "arguments": {
                "self": [],
                "mock_post": [],
                "init_http_download_server": []
            }
        },
        "TestDataPublisher.test_publish_platform_respect_sequence_order": {
            "name": "test_publish_platform_respect_sequence_order",
            "location": 346,
            "return": [],
            "arguments": {
                "self": [],
                "mock_post": [],
                "init_http_download_server": []
            }
        },
        "TestDataPublisher.test_publish_platform_failed": {
            "name": "test_publish_platform_failed",
            "location": 392,
            "return": [],
            "arguments": {
                "self": [],
                "mock_post": [],
                "init_http_download_server": []
            }
        },
        "TestDataPublisher.test_publish_http": {
            "name": "test_publish_http",
            "location": 437,
            "return": [],
            "arguments": {
                "self": [],
                "post_mock": [],
                "init_http_download_server": []
            }
        },
        "TestDataPublisher.test_publish_navitia_with_osm_or_poly": {
            "name": "test_publish_navitia_with_osm_or_poly",
            "location": 469,
            "return": [],
            "arguments": {
                "self": [],
                "post_mock": [],
                "init_http_download_server": [],
                "data_format": [],
                "file_name": []
            }
        },
        "TestDataPublisher.test_publish_navitia_with_osm_and_poly": {
            "name": "test_publish_navitia_with_osm_and_poly",
            "location": 503,
            "return": [],
            "arguments": {
                "self": [],
                "post_mock": [],
                "init_http_download_server": []
            }
        },
        "TestDataPublisher.test_publish_only_osm_or_poly": {
            "name": "test_publish_only_osm_or_poly",
            "location": 546,
            "return": [],
            "arguments": {
                "self": [],
                "post_mock": [],
                "init_http_download_server": [],
                "data_format": [],
                "file_name": []
            }
        },
        "TestDataPublisher.test_publish_modified_fixture_from_contributor_process": {
            "name": "test_publish_modified_fixture_from_contributor_process",
            "location": 575,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_ftp_upload_server": [],
                "init_http_download_server": []
            }
        },
        "TestDataPublisher.test_process_compute_ods_with_metadata_fusio.test_ods_file_exist": {
            "name": "test_ods_file_exist",
            "location": 276,
            "return": [],
            "arguments": {
                "extract_path": []
            }
        }
    },
    "tartare-master/tests/integration/mongo/data_set_test.py": {
        "TestDatasetApi.test_post_dataset_of_unknown_contributor": {
            "name": "test_post_dataset_of_unknown_contributor",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatasetApi.test_post_dataset_with_unknown_data_source": {
            "name": "test_post_dataset_with_unknown_data_source",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contributor": []
            }
        },
        "TestDatasetApi.test_post_dataset_without_file": {
            "name": "test_post_dataset_without_file",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_source": []
            }
        },
        "TestDatasetApi.test_post_dataset_with_bad_file_param": {
            "name": "test_post_dataset_with_bad_file_param",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_source": []
            }
        },
        "TestDatasetApi.test_post_dataset_on_unexisting_contributor": {
            "name": "test_post_dataset_on_unexisting_contributor",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatasetApi.test_post_dataset_on_unexisting_data_source": {
            "name": "test_post_dataset_on_unexisting_data_source",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contributor": []
            }
        },
        "TestDatasetApi.test_post_dataset": {
            "name": "test_post_dataset",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_source": []
            }
        }
    },
    "tartare-master/tests/integration/mongo/data_source_fetch_test.py": {
        "TestDataSourceFetchAction.test_fetch_with_unknown_contributor": {
            "name": "test_fetch_with_unknown_contributor",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDataSourceFetchAction.test_fetch_with_unknown_data_source": {
            "name": "test_fetch_with_unknown_data_source",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contributor": []
            }
        },
        "TestDataSourceFetchAction.test_fetch_ok": {
            "name": "test_fetch_ok",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": [],
                "contributor": []
            }
        },
        "TestDataSourceFetchAction.test_fetch_invalid_type": {
            "name": "test_fetch_invalid_type",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": [],
                "contributor": []
            }
        },
        "TestDataSourceFetchAction.test_fetch_invalid_url": {
            "name": "test_fetch_invalid_url",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": [],
                "contributor": []
            }
        },
        "TestDataSourceFetchAction.test_fetch_authent_in_http_url_ok": {
            "name": "test_fetch_authent_in_http_url_ok",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_authent_server": []
            }
        },
        "TestDataSourceFetchAction.test_fetch_authent_in_options_ok": {
            "name": "test_fetch_authent_in_options_ok",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_authent_server": []
            }
        },
        "TestDataSourceFetchAction.test_fetch_ftp_authent_in_options_ok": {
            "name": "test_fetch_ftp_authent_in_options_ok",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_ftp_download_server_authent": []
            }
        },
        "TestDataSourceFetchAction.test_fetch_ftp_authent_in_options_unauthorized": {
            "name": "test_fetch_ftp_authent_in_options_unauthorized",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_ftp_download_server_authent": []
            }
        },
        "TestDataSourceFetchAction.test_fetch_ftp_authent_in_options_not_found": {
            "name": "test_fetch_ftp_authent_in_options_not_found",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_ftp_download_server_authent": []
            }
        },
        "TestDataSourceFetchAction.test_fetch_authent_in_http_url_unauthorized": {
            "name": "test_fetch_authent_in_http_url_unauthorized",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_authent_server": []
            }
        },
        "TestDataSourceFetchAction.test_fetch_authent_in_http_url_not_found": {
            "name": "test_fetch_authent_in_http_url_not_found",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_authent_server": []
            }
        },
        "TestDataSourceShouldFetch.__fetch": {
            "name": "__fetch",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDataSourceShouldFetch.__init_data_source": {
            "name": "__init_data_source",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "ip": [],
                "type": [],
                "frequency": []
            }
        },
        "TestDataSourceShouldFetch.__assert_should_fetch": {
            "name": "__assert_should_fetch",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "should_fetch": []
            }
        },
        "TestDataSourceShouldFetch.test_manual_should_not_fetch": {
            "name": "test_manual_should_not_fetch",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        },
        "TestDataSourceShouldFetch.test_computed_should_not_fetch": {
            "name": "test_computed_should_not_fetch",
            "location": 276,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        },
        "TestDataSourceShouldFetch.test_never_fetched_should_fetch": {
            "name": "test_never_fetched_should_fetch",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        },
        "TestDataSourceShouldFetch.test_continuous_fetch": {
            "name": "test_continuous_fetch",
            "location": 292,
            "return": [],
            "arguments": {
                "self": [],
                "init_http_download_server": [],
                "minutes": []
            }
        },
        "TestDataSourceShouldFetch.test_daily_fetch": {
            "name": "test_daily_fetch",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        },
        "TestDataSourceShouldFetch.test_weekly_fetch": {
            "name": "test_weekly_fetch",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        },
        "TestDataSourceShouldFetch.test_monthly_fetch": {
            "name": "test_monthly_fetch",
            "location": 413,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": []
            }
        }
    },
    "tartare-master/tests/integration/mongo/errorhandler_test.py": {
        "TestCoverageApi.test_404_http_error": {
            "name": "test_404_http_error",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tests/integration/mongo/get_files_test.py": {
        "TestGetFiles.test_get_files_invalid_file_id": {
            "name": "test_get_files_invalid_file_id",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetFiles.test_get_files": {
            "name": "test_get_files",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_http_download_server": [],
                "init_ftp_upload_server": [],
                "contributor": []
            }
        }
    },
    "tartare-master/tests/integration/mongo/historical_test.py": {
        "TestHistorical.__init_contributor_config": {
            "name": "__init_contributor_config",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "contributor": []
            }
        },
        "TestHistorical.__init_coverage_config": {
            "name": "__init_coverage_config",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestHistorical.test_historisation": {
            "name": "test_historisation",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "contributor": [],
                "init_http_download_server": [],
                "exports_number": []
            }
        },
        "TestHistorical.assert_data_set_number": {
            "name": "assert_data_set_number",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_source_id": [],
                "exports_number": []
            }
        },
        "TestHistorical.assert_coverage_exports_number": {
            "name": "assert_coverage_exports_number",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exports_number": []
            }
        },
        "TestHistorical.assert_files_number": {
            "name": "assert_files_number",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exports_number": []
            }
        }
    },
    "tartare-master/tests/integration/mongo/jobs_api_test.py": {
        "TestJobsApi.test_get_one_job_found": {
            "name": "test_get_one_job_found",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJobsApi.test_get_one_job_not_found": {
            "name": "test_get_one_job_not_found",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJobsApi.test_get_job_contributor": {
            "name": "test_get_job_contributor",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJobsApi.test_get_job_coverage": {
            "name": "test_get_job_coverage",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJobsApi.test_get_job_with_details": {
            "name": "test_get_job_with_details",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJobsApi.test_get_jobs_sorted_by_updated_date": {
            "name": "test_get_jobs_sorted_by_updated_date",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJobsApi.test_get_jobs_paginated": {
            "name": "test_get_jobs_paginated",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJobsApi.test_get_jobs_wrong_pagination": {
            "name": "test_get_jobs_wrong_pagination",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "page": [],
                "per_page": [],
                "message": []
            }
        }
    },
    "tartare-master/tests/integration/mongo/job_test.py": {
        "TestJobs.test_cancel_pending_updated_before": {
            "name": "test_cancel_pending_updated_before",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tests/integration/mongo/logs_api_test.py": {
        "TestRequestRequestLogs.test_logs_api_query": {
            "name": "test_logs_api_query",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequestRequestLogs.test_request_logs": {
            "name": "test_request_logs",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tests/integration/mongo/mailer_test.py": {
        "TestMailer._same_list": {
            "name": "_same_list",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "list1": [],
                "list2": []
            }
        },
        "TestMailer.test_contributor_export": {
            "name": "test_contributor_export",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMailer.test_coverage_export": {
            "name": "test_coverage_export",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMailer.test_automatic_update": {
            "name": "test_automatic_update",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tests/integration/mongo/processes_api_test.py": {
        "TestProcesses.assert_processes_by_owner": {
            "name": "assert_processes_by_owner",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "processes": [],
                "owner": []
            }
        },
        "TestProcesses.test_processes_owner_contributor": {
            "name": "test_processes_owner_contributor",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcesses.test_processes_owner_coverage": {
            "name": "test_processes_owner_coverage",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcesses.test_processes_without_owner": {
            "name": "test_processes_without_owner",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcesses.test_processes_owner_invalid": {
            "name": "test_processes_owner_invalid",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tests/integration/mongo/rest_api_test.py": {
        "test_unkown_version_status": {
            "name": "test_unkown_version_status",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        },
        "test_kown_version_status": {
            "name": "test_kown_version_status",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [],
                "monkeypatch": []
            }
        },
        "test_index": {
            "name": "test_index",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "tartare-master/tests/integration/mongo/unsupported_media_type_test.py": {
        "TestUnsupportedMediaType.test_posts_without_head": {
            "name": "test_posts_without_head",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnsupportedMediaType.test_put_without_head": {
            "name": "test_put_without_head",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tartare-master/tests/integration/mongo/__init__.py": {}
}
{
    "task_processing-master/setup.py": {},
    "task_processing-master/docs/source/conf.py": {},
    "task_processing-master/examples/async.py": {
        "main": {
            "name": "main",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "Counter.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Counter.process_event": {
            "name": "process_event",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        }
    },
    "task_processing-master/examples/common.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "task_processing-master/examples/dynamo_persistence.py": {
        "main": {
            "name": "main",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "create_table": {
            "name": "create_table",
            "location": 73,
            "return": [],
            "arguments": {
                "client": []
            }
        }
    },
    "task_processing-master/examples/file_persistence.py": {
        "main": {
            "name": "main",
            "location": 15,
            "return": [],
            "arguments": {}
        }
    },
    "task_processing-master/examples/hello-world.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "task_processing-master/examples/offer_timeout.py": {
        "main": {
            "name": "main",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "Counter.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Counter.process_event": {
            "name": "process_event",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        }
    },
    "task_processing-master/examples/promise.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [],
            "arguments": {}
        }
    },
    "task_processing-master/examples/retry.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [],
            "arguments": {}
        }
    },
    "task_processing-master/examples/subscription.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [],
            "arguments": {}
        }
    },
    "task_processing-master/examples/sync.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [],
            "arguments": {}
        }
    },
    "task_processing-master/examples/task_logging.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [],
            "arguments": {}
        }
    },
    "task_processing-master/examples/timeout.py": {
        "main": {
            "name": "main",
            "location": 14,
            "return": [],
            "arguments": {}
        }
    },
    "task_processing-master/examples/__init__.py": {},
    "task_processing-master/task_processing/metrics.py": {
        "create_counter": {
            "name": "create_counter",
            "location": 25,
            "return": [],
            "arguments": {
                "name": [],
                "dimensions": []
            }
        },
        "create_timer": {
            "name": "create_timer",
            "location": 35,
            "return": [],
            "arguments": {
                "name": [],
                "dimensions": []
            }
        },
        "get_metric": {
            "name": "get_metric",
            "location": 45,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "_DummyMetricType.count": {
            "name": "count",
            "location": 12,
            "return": [],
            "arguments": {}
        }
    },
    "task_processing-master/task_processing/task_processor.py": {
        "Registry.register_task_executor": {
            "name": "register_task_executor",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "task_executor_cls": []
            }
        },
        "Registry.register_deprecated_task_executor": {
            "name": "register_deprecated_task_executor",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "task_executor_cls": []
            }
        },
        "Registry._executor_invariant": {
            "name": "_executor_invariant",
            "location": 36,
            "return": [],
            "arguments": {
                "task_executors": []
            }
        },
        "TaskProcessor.load_plugin": {
            "name": "load_plugin",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "provider_module": []
            }
        },
        "TaskProcessor.executor_cls": {
            "name": "executor_cls",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "provider": []
            }
        },
        "TaskProcessor.executor_from_config": {
            "name": "executor_from_config",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "provider": [],
                "provider_config": []
            }
        },
        "TaskProcessor.load_plugin.conflict_check": {
            "name": "conflict_check",
            "location": 93,
            "return": [],
            "arguments": {
                "old": [],
                "new": []
            }
        }
    },
    "task_processing-master/task_processing/utils.py": {
        "get_cluster_master_by_proxy": {
            "name": "get_cluster_master_by_proxy",
            "location": 28,
            "return": [],
            "arguments": {
                "proxy_prefix": [],
                "cluster": [],
                "services_file": []
            }
        },
        "AutoEnum._generate_next_value_": {
            "name": "_generate_next_value_",
            "location": 18,
            "return": [],
            "arguments": {
                "name": [],
                "start": [],
                "count": [],
                "last_values": []
            }
        }
    },
    "task_processing-master/task_processing/__init__.py": {},
    "task_processing-master/task_processing/interfaces/event.py": {
        "task_event": {
            "name": "task_event",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "control_event": {
            "name": "control_event",
            "location": 65,
            "return": [],
            "arguments": {}
        },
        "json_serializer": {
            "name": "json_serializer",
            "location": 70,
            "return": [],
            "arguments": {
                "o": []
            }
        },
        "json_deserializer": {
            "name": "json_deserializer",
            "location": 76,
            "return": [],
            "arguments": {
                "dct": []
            }
        },
        "Event.__invariant__": {
            "name": "__invariant__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "task_processing-master/task_processing/interfaces/persistence.py": {
        "Persister.read": {
            "name": "read",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "task_id": []
            }
        },
        "Persister.write": {
            "name": "write",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        }
    },
    "task_processing-master/task_processing/interfaces/runner.py": {
        "Runner.run": {
            "name": "run",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "task_config": []
            }
        },
        "Runner.reconcile": {
            "name": "reconcile",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "task_config": []
            }
        },
        "Runner.kill": {
            "name": "kill",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "task_id": []
            }
        }
    },
    "task_processing-master/task_processing/interfaces/task_executor.py": {
        "TaskExecutor.run": {
            "name": "run",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "task_config": []
            }
        },
        "TaskExecutor.reconcile": {
            "name": "reconcile",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "task_config": []
            }
        },
        "TaskExecutor.kill": {
            "name": "kill",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "task_id": []
            }
        },
        "TaskExecutor.stop": {
            "name": "stop",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TaskExecutor.get_event_queue": {
            "name": "get_event_queue",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "task_processing-master/task_processing/interfaces/__init__.py": {},
    "task_processing-master/task_processing/plugins/__init__.py": {},
    "task_processing-master/task_processing/plugins/kubernetes/kubernetes_pod_executor.py": {
        "KubernetesPodExecutor.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "namespace": [],
                "kubeconfig_path": [],
                "task_configs": []
            }
        },
        "KubernetesPodExecutor._initialize_existing_task": {
            "name": "_initialize_existing_task",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "task_config": []
            }
        },
        "KubernetesPodExecutor._pod_event_watch_loop": {
            "name": "_pod_event_watch_loop",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KubernetesPodExecutor.__handle_deleted_pod_event": {
            "name": "__handle_deleted_pod_event",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "KubernetesPodExecutor.__handle_modified_pod_event": {
            "name": "__handle_modified_pod_event",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "KubernetesPodExecutor.__update_modified_pod": {
            "name": "__update_modified_pod",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "pod": [],
                "event": []
            }
        },
        "KubernetesPodExecutor._process_pod_event": {
            "name": "_process_pod_event",
            "location": 331,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "KubernetesPodExecutor._pending_event_processing_loop": {
            "name": "_pending_event_processing_loop",
            "location": 362,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KubernetesPodExecutor.run": {
            "name": "run",
            "location": 395,
            "return": [],
            "arguments": {
                "self": [],
                "task_config": []
            }
        },
        "KubernetesPodExecutor.reconcile": {
            "name": "reconcile",
            "location": 483,
            "return": [],
            "arguments": {
                "self": [],
                "task_config": []
            }
        },
        "KubernetesPodExecutor.kill": {
            "name": "kill",
            "location": 532,
            "return": [],
            "arguments": {
                "self": [],
                "task_id": []
            }
        },
        "KubernetesPodExecutor.stop": {
            "name": "stop",
            "location": 547,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KubernetesPodExecutor.get_event_queue": {
            "name": "get_event_queue",
            "location": 572,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "task_processing-master/task_processing/plugins/kubernetes/kube_client.py": {
        "KubeClient.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "kubeconfig_path": []
            }
        },
        "KubeClient.reload_kubeconfig": {
            "name": "reload_kubeconfig",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KubeClient.maybe_reload_on_exception": {
            "name": "maybe_reload_on_exception",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "exception": []
            }
        },
        "KubeClient.terminate_pod": {
            "name": "terminate_pod",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "namespace": [],
                "pod_name": [],
                "attempts": []
            }
        },
        "KubeClient.create_pod": {
            "name": "create_pod",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "namespace": [],
                "pod": [],
                "attempts": []
            }
        },
        "KubeClient.get_pod": {
            "name": "get_pod",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "namespace": [],
                "pod_name": [],
                "attempts": []
            }
        }
    },
    "task_processing-master/task_processing/plugins/kubernetes/task_config.py": {
        "_generate_pod_suffix": {
            "name": "_generate_pod_suffix",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "_valid_volumes": {
            "name": "_valid_volumes",
            "location": 105,
            "return": [],
            "arguments": {
                "volumes": []
            }
        },
        "_valid_secret_envs": {
            "name": "_valid_secret_envs",
            "location": 121,
            "return": [],
            "arguments": {
                "secret_envs": []
            }
        },
        "_valid_field_selector_envs": {
            "name": "_valid_field_selector_envs",
            "location": 133,
            "return": [],
            "arguments": {
                "field_selector_envs": []
            }
        },
        "_valid_capabilities": {
            "name": "_valid_capabilities",
            "location": 148,
            "return": [],
            "arguments": {
                "capabilities": []
            }
        },
        "_valid_node_affinities": {
            "name": "_valid_node_affinities",
            "location": 158,
            "return": [],
            "arguments": {
                "affinities": []
            }
        },
        "_valid_port": {
            "name": "_valid_port",
            "location": 199,
            "return": [],
            "arguments": {
                "ports": []
            }
        },
        "_valid_service_account_name": {
            "name": "_valid_service_account_name",
            "location": 206,
            "return": [],
            "arguments": {
                "service_account_name": []
            }
        },
        "KubernetesTaskConfig.__invariant__": {
            "name": "__invariant__",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KubernetesTaskConfig.pod_name": {
            "name": "pod_name",
            "location": 342,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KubernetesTaskConfig.set_pod_name": {
            "name": "set_pod_name",
            "location": 348,
            "return": [],
            "arguments": {
                "self": [],
                "pod_name": []
            }
        }
    },
    "task_processing-master/task_processing/plugins/kubernetes/task_metadata.py": {},
    "task_processing-master/task_processing/plugins/kubernetes/types.py": {
        "EnumSet.__contains__": {
            "name": "__contains__",
            "location": 25,
            "return": [],
            "arguments": {
                "cls": [],
                "v": []
            }
        }
    },
    "task_processing-master/task_processing/plugins/kubernetes/utils.py": {
        "get_security_context_for_capabilities": {
            "name": "get_security_context_for_capabilities",
            "location": 34,
            "return": [],
            "arguments": {
                "cap_add": [],
                "cap_drop": []
            }
        },
        "get_kubernetes_env_vars": {
            "name": "get_kubernetes_env_vars",
            "location": 57,
            "return": [],
            "arguments": {
                "environment": [],
                "secret_environment": [],
                "field_selector_environment": []
            }
        },
        "get_sanitised_kubernetes_name": {
            "name": "get_sanitised_kubernetes_name",
            "location": 101,
            "return": [],
            "arguments": {
                "name": [],
                "replace_dots": [],
                "replace_forward_slash": [],
                "length_limit": []
            }
        },
        "get_sanitised_volume_name": {
            "name": "get_sanitised_volume_name",
            "location": 140,
            "return": [],
            "arguments": {
                "volume_name": [],
                "length_limit": []
            }
        },
        "get_kubernetes_volume_mounts": {
            "name": "get_kubernetes_volume_mounts",
            "location": 156,
            "return": [],
            "arguments": {
                "volumes": []
            }
        },
        "get_pod_volumes": {
            "name": "get_pod_volumes",
            "location": 174,
            "return": [],
            "arguments": {
                "volumes": []
            }
        },
        "get_node_affinity": {
            "name": "get_node_affinity",
            "location": 193,
            "return": [],
            "arguments": {
                "affinities": []
            }
        }
    },
    "task_processing-master/task_processing/plugins/kubernetes/__init__.py": {
        "register_plugin": {
            "name": "register_plugin",
            "location": 7,
            "return": [],
            "arguments": {
                "registry": []
            }
        }
    },
    "task_processing-master/task_processing/plugins/mesos/constraints.py": {
        "equals_op": {
            "name": "equals_op",
            "location": 7,
            "return": [],
            "arguments": {
                "expected_value": [],
                "actual_value": []
            }
        },
        "notequals_op": {
            "name": "notequals_op",
            "location": 11,
            "return": [],
            "arguments": {
                "expected_value": [],
                "actual_value": []
            }
        },
        "like_op": {
            "name": "like_op",
            "location": 15,
            "return": [],
            "arguments": {
                "re_pattern": [],
                "actual_value": []
            }
        },
        "unlike_op": {
            "name": "unlike_op",
            "location": 19,
            "return": [],
            "arguments": {
                "re_pattern": [],
                "actual_value": []
            }
        },
        "_attributes_match_constraint": {
            "name": "_attributes_match_constraint",
            "location": 33,
            "return": [],
            "arguments": {
                "attributes": [],
                "constraint": []
            }
        },
        "attributes_match_constraints": {
            "name": "attributes_match_constraints",
            "location": 45,
            "return": [],
            "arguments": {
                "attributes": [],
                "constraints": []
            }
        },
        "valid_constraint_operator_name": {
            "name": "valid_constraint_operator_name",
            "location": 54,
            "return": [],
            "arguments": {
                "name": []
            }
        }
    },
    "task_processing-master/task_processing/plugins/mesos/execution_framework.py": {
        "ExecutionFramework.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "role": [],
                "callbacks": [],
                "task_staging_timeout_s": [],
                "pool": [],
                "slave_blacklist_timeout_s": [],
                "offer_backoff": [],
                "suppress_delay": [],
                "initial_decline_delay": [],
                "task_reconciliation_delay": [],
                "framework_id": [],
                "failover_timeout": []
            }
        },
        "ExecutionFramework.call_driver": {
            "name": "call_driver",
            "location": 115,
            "return": [],
            "arguments": {
                "self": [],
                "method": []
            }
        },
        "ExecutionFramework._background_check_task": {
            "name": "_background_check_task",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "time_now": [],
                "tasks_to_reconcile": [],
                "task_id": [],
                "md": []
            }
        },
        "ExecutionFramework._background_check": {
            "name": "_background_check",
            "location": 213,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExecutionFramework.reconcile_task": {
            "name": "reconcile_task",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "task_config": []
            }
        },
        "ExecutionFramework._reconcile_tasks": {
            "name": "_reconcile_tasks",
            "location": 265,
            "return": [],
            "arguments": {
                "self": [],
                "tasks_to_reconcile": []
            }
        },
        "ExecutionFramework.offer_matches_pool": {
            "name": "offer_matches_pool",
            "location": 276,
            "return": [],
            "arguments": {
                "self": [],
                "offer": []
            }
        },
        "ExecutionFramework.kill_task": {
            "name": "kill_task",
            "location": 287,
            "return": [],
            "arguments": {
                "self": [],
                "task_id": []
            }
        },
        "ExecutionFramework.blacklist_slave": {
            "name": "blacklist_slave",
            "location": 308,
            "return": [],
            "arguments": {
                "self": [],
                "agent_id": [],
                "timeout": []
            }
        },
        "ExecutionFramework.unblacklist_slave": {
            "name": "unblacklist_slave",
            "location": 323,
            "return": [],
            "arguments": {
                "self": [],
                "agent_id": [],
                "timeout": []
            }
        },
        "ExecutionFramework.enqueue_task": {
            "name": "enqueue_task",
            "location": 331,
            "return": [],
            "arguments": {
                "self": [],
                "task_config": []
            }
        },
        "ExecutionFramework.launch_tasks_for_offer": {
            "name": "launch_tasks_for_offer",
            "location": 354,
            "return": [],
            "arguments": {
                "self": [],
                "offer": [],
                "tasks_to_launch": []
            }
        },
        "ExecutionFramework.stop": {
            "name": "stop",
            "location": 411,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExecutionFramework._initialize_metrics": {
            "name": "_initialize_metrics",
            "location": 415,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ExecutionFramework.offerRescinded": {
            "name": "offerRescinded",
            "location": 444,
            "return": [],
            "arguments": {
                "self": [],
                "driver": [],
                "offerId": []
            }
        },
        "ExecutionFramework.error": {
            "name": "error",
            "location": 448,
            "return": [],
            "arguments": {
                "self": [],
                "driver": [],
                "message": []
            }
        },
        "ExecutionFramework.slaveLost": {
            "name": "slaveLost",
            "location": 459,
            "return": [],
            "arguments": {
                "self": [],
                "drive": [],
                "slaveId": []
            }
        },
        "ExecutionFramework.registered": {
            "name": "registered",
            "location": 462,
            "return": [],
            "arguments": {
                "self": [],
                "driver": [],
                "frameworkId": [],
                "masterInfo": []
            }
        },
        "ExecutionFramework.reregistered": {
            "name": "reregistered",
            "location": 476,
            "return": [],
            "arguments": {
                "self": [],
                "driver": [],
                "masterInfo": []
            }
        },
        "ExecutionFramework.resourceOffers": {
            "name": "resourceOffers",
            "location": 480,
            "return": [],
            "arguments": {
                "self": [],
                "driver": [],
                "offers": []
            }
        },
        "ExecutionFramework.statusUpdate": {
            "name": "statusUpdate",
            "location": 623,
            "return": [],
            "arguments": {
                "self": [],
                "driver": [],
                "update": []
            }
        }
    },
    "task_processing-master/task_processing/plugins/mesos/logging_executor.py": {
        "standard_handler": {
            "name": "standard_handler",
            "location": 39,
            "return": [],
            "arguments": {
                "task_id": [],
                "message": [],
                "stream": []
            }
        },
        "extract_url_from_offer": {
            "name": "extract_url_from_offer",
            "location": 253,
            "return": [],
            "arguments": {
                "offer": []
            }
        },
        "MesosLoggingExecutor.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "downstream_executor": [],
                "handler": [],
                "format_string": []
            }
        },
        "MesosLoggingExecutor.log_line": {
            "name": "log_line",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "stream": [],
                "line": [],
                "task_id": [],
                "container_id": [],
                "agent": []
            }
        },
        "MesosLoggingExecutor.set_task_log_path": {
            "name": "set_task_log_path",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "task_id": []
            }
        },
        "MesosLoggingExecutor.stream_task_log": {
            "name": "stream_task_log",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "task_id": []
            }
        },
        "MesosLoggingExecutor.event_loop": {
            "name": "event_loop",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MesosLoggingExecutor.logging_loop": {
            "name": "logging_loop",
            "location": 216,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MesosLoggingExecutor.run": {
            "name": "run",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "task_config": []
            }
        },
        "MesosLoggingExecutor.stop": {
            "name": "stop",
            "location": 237,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MesosLoggingExecutor.get_event_queue": {
            "name": "get_event_queue",
            "location": 243,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MesosLoggingExecutor.reconcile": {
            "name": "reconcile",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "task_config": []
            }
        },
        "MesosLoggingExecutor.kill": {
            "name": "kill",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "task_id": []
            }
        }
    },
    "task_processing-master/task_processing/plugins/mesos/mesos_executor.py": {
        "MesosExecutor.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "role": [],
                "callbacks": [],
                "pool": [],
                "principal": [],
                "secret": [],
                "mesos_address": [],
                "initial_decline_delay": [],
                "framework_name": [],
                "framework_staging_timeout": [],
                "framework_id": [],
                "failover": []
            }
        },
        "MesosExecutor._run_driver": {
            "name": "_run_driver",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MesosExecutor.run": {
            "name": "run",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "task_config": []
            }
        },
        "MesosExecutor.reconcile": {
            "name": "reconcile",
            "location": 96,
            "return": [],
            "arguments": {
                "self": [],
                "task_config": []
            }
        },
        "MesosExecutor.kill": {
            "name": "kill",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "task_id": []
            }
        },
        "MesosExecutor.stop": {
            "name": "stop",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MesosExecutor.get_event_queue": {
            "name": "get_event_queue",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "task_processing-master/task_processing/plugins/mesos/mesos_pod_executor.py": {
        "MesosPodExecutor.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "role": []
            }
        }
    },
    "task_processing-master/task_processing/plugins/mesos/mesos_task_executor.py": {
        "get_tasks_for_offer": {
            "name": "get_tasks_for_offer",
            "location": 15,
            "return": [],
            "arguments": {
                "task_configs": [],
                "offer_resources": [],
                "offer_attributes": [],
                "role": []
            }
        },
        "MesosTaskExecutor.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "role": []
            }
        }
    },
    "task_processing-master/task_processing/plugins/mesos/metrics.py": {},
    "task_processing-master/task_processing/plugins/mesos/resource_helpers.py": {
        "get_offer_resources": {
            "name": "get_offer_resources",
            "location": 35,
            "return": [],
            "arguments": {
                "offer": [],
                "role": []
            }
        },
        "allocate_task_resources": {
            "name": "allocate_task_resources",
            "location": 54,
            "return": [],
            "arguments": {
                "task_config": [],
                "offer_resources": []
            }
        },
        "task_fits": {
            "name": "task_fits",
            "location": 83,
            "return": [],
            "arguments": {
                "task": [],
                "offer_resources": []
            }
        }
    },
    "task_processing-master/task_processing/plugins/mesos/retrying_executor.py": {
        "RetryingExecutor.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "downstream_executor": [],
                "retry_pred": [],
                "retries": []
            }
        },
        "RetryingExecutor.event_with_retries": {
            "name": "event_with_retries",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "RetryingExecutor.retry": {
            "name": "retry",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "RetryingExecutor.retry_loop": {
            "name": "retry_loop",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RetryingExecutor.run": {
            "name": "run",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "task_config": []
            }
        },
        "RetryingExecutor.reconcile": {
            "name": "reconcile",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "task_config": []
            }
        },
        "RetryingExecutor.kill": {
            "name": "kill",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "task_id": []
            }
        },
        "RetryingExecutor.stop": {
            "name": "stop",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RetryingExecutor.get_event_queue": {
            "name": "get_event_queue",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RetryingExecutor._task_config_with_retry": {
            "name": "_task_config_with_retry",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "task_config": []
            }
        },
        "RetryingExecutor._restore_task_id": {
            "name": "_restore_task_id",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "e": [],
                "original_task_id": []
            }
        },
        "RetryingExecutor._is_current_attempt": {
            "name": "_is_current_attempt",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "e": [],
                "original_task_id": []
            }
        },
        "RetryingExecutor._task_or_executor_retries": {
            "name": "_task_or_executor_retries",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "task_config": []
            }
        }
    },
    "task_processing-master/task_processing/plugins/mesos/task_config.py": {
        "valid_volumes": {
            "name": "valid_volumes",
            "location": 21,
            "return": [],
            "arguments": {
                "volumes": []
            }
        },
        "_valid_constraints": {
            "name": "_valid_constraints",
            "location": 32,
            "return": [],
            "arguments": {
                "constraints": []
            }
        },
        "MesosTaskConfig.__invariant__": {
            "name": "__invariant__",
            "location": 48,
            "return": [],
            "arguments": {
                "conf": []
            }
        },
        "MesosTaskConfig.task_id": {
            "name": "task_id",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MesosTaskConfig.set_task_id": {
            "name": "set_task_id",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "task_id": []
            }
        }
    },
    "task_processing-master/task_processing/plugins/mesos/timeout_executor.py": {
        "TimeoutExecutor.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "downstream_executor": []
            }
        },
        "TimeoutExecutor.timeout_loop": {
            "name": "timeout_loop",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeoutExecutor.run": {
            "name": "run",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "task_config": []
            }
        },
        "TimeoutExecutor.reconcile": {
            "name": "reconcile",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "task_config": []
            }
        },
        "TimeoutExecutor.kill": {
            "name": "kill",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "task_id": []
            }
        },
        "TimeoutExecutor.stop": {
            "name": "stop",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeoutExecutor.get_event_queue": {
            "name": "get_event_queue",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TimeoutExecutor._insert_new_running_task_entry": {
            "name": "_insert_new_running_task_entry",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "new_entry": []
            }
        }
    },
    "task_processing-master/task_processing/plugins/mesos/translator.py": {
        "make_mesos_container_info": {
            "name": "make_mesos_container_info",
            "location": 14,
            "return": [],
            "arguments": {
                "task_config": []
            }
        },
        "make_mesos_resources": {
            "name": "make_mesos_resources",
            "location": 43,
            "return": [],
            "arguments": {
                "task_config": [],
                "role": []
            }
        },
        "make_mesos_command_info": {
            "name": "make_mesos_command_info",
            "location": 81,
            "return": [],
            "arguments": {
                "task_config": []
            }
        },
        "make_task_environment_variables": {
            "name": "make_task_environment_variables",
            "location": 90,
            "return": [],
            "arguments": {
                "task_config": []
            }
        },
        "make_mesos_task_info": {
            "name": "make_mesos_task_info",
            "location": 96,
            "return": [],
            "arguments": {
                "task_config": [],
                "agent_id": [],
                "role": []
            }
        },
        "mesos_update_to_event": {
            "name": "mesos_update_to_event",
            "location": 151,
            "return": [],
            "arguments": {
                "mesos_status": [],
                "task_config": []
            }
        }
    },
    "task_processing-master/task_processing/plugins/mesos/__init__.py": {
        "register_plugin": {
            "name": "register_plugin",
            "location": 11,
            "return": [],
            "arguments": {
                "registry": []
            }
        }
    },
    "task_processing-master/task_processing/plugins/persistence/dynamodb_persistence.py": {
        "DynamoDBPersister.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "table_name": [],
                "endpoint_url": [],
                "session": []
            }
        },
        "DynamoDBPersister.read": {
            "name": "read",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "task_id": [],
                "comparison_operator": []
            }
        },
        "DynamoDBPersister.write": {
            "name": "write",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "DynamoDBPersister._event_to_item": {
            "name": "_event_to_item",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "e": []
            }
        },
        "DynamoDBPersister.item_to_event": {
            "name": "item_to_event",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "DynamoDBPersister._replace_decimals": {
            "name": "_replace_decimals",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "task_processing-master/task_processing/plugins/persistence/file_persistence.py": {
        "FilePersistence.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "output_file": []
            }
        },
        "FilePersistence.read": {
            "name": "read",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "task_id": []
            }
        },
        "FilePersistence.write": {
            "name": "write",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        }
    },
    "task_processing-master/task_processing/plugins/persistence/__init__.py": {},
    "task_processing-master/task_processing/plugins/stateful/stateful_executor.py": {
        "StatefulTaskExecutor.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "downstream_executor": [],
                "persister": []
            }
        },
        "StatefulTaskExecutor.run": {
            "name": "run",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "task_config": []
            }
        },
        "StatefulTaskExecutor.reconcile": {
            "name": "reconcile",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "task_config": []
            }
        },
        "StatefulTaskExecutor.kill": {
            "name": "kill",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "task_id": []
            }
        },
        "StatefulTaskExecutor.status": {
            "name": "status",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "task_id": []
            }
        },
        "StatefulTaskExecutor.stop": {
            "name": "stop",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StatefulTaskExecutor.get_event_queue": {
            "name": "get_event_queue",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StatefulTaskExecutor.subscribe_to_updates_for_task": {
            "name": "subscribe_to_updates_for_task",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "task_processing-master/task_processing/plugins/stateful/__init__.py": {
        "register_plugin": {
            "name": "register_plugin",
            "location": 7,
            "return": [],
            "arguments": {
                "registry": []
            }
        }
    },
    "task_processing-master/task_processing/runners/async_runner.py": {
        "Async.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "executor": [],
                "callbacks": []
            }
        },
        "Async.run": {
            "name": "run",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "task_config": []
            }
        },
        "Async.kill": {
            "name": "kill",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "task_id": []
            }
        },
        "Async.reconcile": {
            "name": "reconcile",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "task_config": []
            }
        },
        "Async.callback_loop": {
            "name": "callback_loop",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Async.stop": {
            "name": "stop",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "task_processing-master/task_processing/runners/promise.py": {
        "Promise.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [],
            "arguments": {
                "self": [],
                "executor": [],
                "futures_executor": []
            }
        },
        "Promise.run": {
            "name": "run",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "task_config": []
            }
        },
        "Promise.kill": {
            "name": "kill",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "task_id": []
            }
        },
        "Promise.reconcile": {
            "name": "reconcile",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "task_config": []
            }
        },
        "Promise.stop": {
            "name": "stop",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "task_processing-master/task_processing/runners/subscription.py": {
        "Subscription.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "executor": [],
                "queue": []
            }
        },
        "Subscription.event_producer": {
            "name": "event_producer",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Subscription.run": {
            "name": "run",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "task_config": []
            }
        },
        "Subscription.kill": {
            "name": "kill",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "task_id": []
            }
        },
        "Subscription.reconcile": {
            "name": "reconcile",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "task_config": []
            }
        },
        "Subscription.stop": {
            "name": "stop",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "task_processing-master/task_processing/runners/sync.py": {
        "Sync.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "executor": []
            }
        },
        "Sync.kill": {
            "name": "kill",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "task_id": []
            }
        },
        "Sync.reconcile": {
            "name": "reconcile",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "task_config": []
            }
        },
        "Sync.run": {
            "name": "run",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "task_config": []
            }
        },
        "Sync.stop": {
            "name": "stop",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "task_processing-master/task_processing/runners/__init__.py": {},
    "task_processing-master/tests/smoke_test.py": {
        "test_task_executor": {
            "name": "test_task_executor",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_task_executor.TaskExecutorImpl.run": {
            "name": "run",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "task_config": []
            }
        },
        "test_task_executor.TaskExecutorImpl.kill": {
            "name": "kill",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "task_id": []
            }
        },
        "test_task_executor.TaskExecutorImpl.get_event_queue": {
            "name": "get_event_queue",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "test_task_executor.TaskExecutorImpl.reconcile": {
            "name": "reconcile",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "task_config": []
            }
        },
        "test_task_executor.TaskExecutorImpl.stop": {
            "name": "stop",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "task_processing-master/tests/__init__.py": {},
    "task_processing-master/tests/integration/mesos/mesos_test.py": {
        "mesos_executor_runner": {
            "name": "mesos_executor_runner",
            "location": 10,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "launch_task": {
            "name": "launch_task",
            "location": 22,
            "return": [],
            "arguments": {
                "mesos_executor_runner": []
            }
        },
        "block_until_finished": {
            "name": "block_until_finished",
            "location": 28,
            "return": [],
            "arguments": {}
        }
    },
    "task_processing-master/tests/mock_plugin/__init__.py": {
        "register_plugin": {
            "name": "register_plugin",
            "location": 44,
            "return": [],
            "arguments": {
                "registry": []
            }
        },
        "DummyTaskExecutor.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "DummyTaskExecutor.run": {
            "name": "run",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "task_config": []
            }
        },
        "DummyTaskExecutor.reconcile": {
            "name": "reconcile",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "task_config": []
            }
        },
        "DummyTaskExecutor.kill": {
            "name": "kill",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "task_id": []
            }
        },
        "DummyTaskExecutor.stop": {
            "name": "stop",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DummyTaskExecutor.get_event_queue": {
            "name": "get_event_queue",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "task_id": []
            }
        },
        "DummyTaskExecutor2.run": {
            "name": "run",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "task_config": []
            }
        },
        "DummyTaskExecutor2.reconcile": {
            "name": "reconcile",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "task_config": []
            }
        },
        "DummyTaskExecutor2.kill": {
            "name": "kill",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "task_id": []
            }
        },
        "DummyTaskExecutor2.stop": {
            "name": "stop",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DummyTaskExecutor2.get_event_queue": {
            "name": "get_event_queue",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "task_id": []
            }
        }
    },
    "task_processing-master/tests/unit/conftest.py": {
        "mock_sleep": {
            "name": "mock_sleep",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "mock_Thread": {
            "name": "mock_Thread",
            "location": 14,
            "return": [],
            "arguments": {}
        }
    },
    "task_processing-master/tests/unit/task_processor_test.py": {
        "test_load_plugin": {
            "name": "test_load_plugin",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_executor_from_config": {
            "name": "test_executor_from_config",
            "location": 18,
            "return": [],
            "arguments": {}
        }
    },
    "task_processing-master/tests/unit/utils_test.py": {
        "mock_yamlload": {
            "name": "mock_yamlload",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "test_get_cluster_master_by_proxy": {
            "name": "test_get_cluster_master_by_proxy",
            "location": 25,
            "return": [],
            "arguments": {
                "mock_yamlload": []
            }
        },
        "test_get_cluster_master_by_proxy_no_proxy": {
            "name": "test_get_cluster_master_by_proxy_no_proxy",
            "location": 35,
            "return": [],
            "arguments": {
                "mock_yamlload": []
            }
        }
    },
    "task_processing-master/tests/unit/interfaces/event_test.py": {
        "event": {
            "name": "event",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_event_creation": {
            "name": "test_event_creation",
            "location": 15,
            "return": [],
            "arguments": {}
        },
        "test_event_creation_default": {
            "name": "test_event_creation_default",
            "location": 24,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "test_event_is_immutable": {
            "name": "test_event_is_immutable",
            "location": 28,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "test_event_has_task_id": {
            "name": "test_event_has_task_id",
            "location": 32,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "test_event_type_checks": {
            "name": "test_event_type_checks",
            "location": 36,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "test_event_optional_attributes": {
            "name": "test_event_optional_attributes",
            "location": 52,
            "return": [],
            "arguments": {
                "event": []
            }
        }
    },
    "task_processing-master/tests/unit/interfaces/runner_test.py": {
        "test_abstract_interface": {
            "name": "test_abstract_interface",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "task_processing-master/tests/unit/interfaces/task_executor_test.py": {
        "test_abstract_interface": {
            "name": "test_abstract_interface",
            "location": 6,
            "return": [],
            "arguments": {}
        }
    },
    "task_processing-master/tests/unit/plugins/kubernetes/kubernetes_pod_executor_test.py": {
        "k8s_executor": {
            "name": "k8s_executor",
            "location": 31,
            "return": [],
            "arguments": {
                "mock_Thread": []
            }
        },
        "mock_task_configs": {
            "name": "mock_task_configs",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "k8s_executor_with_tasks": {
            "name": "k8s_executor_with_tasks",
            "location": 61,
            "return": [],
            "arguments": {
                "mock_Thread": [],
                "mock_task_configs": []
            }
        },
        "test_run_updates_task_metadata": {
            "name": "test_run_updates_task_metadata",
            "location": 77,
            "return": [],
            "arguments": {
                "k8s_executor": []
            }
        },
        "test_run": {
            "name": "test_run",
            "location": 102,
            "return": [],
            "arguments": {
                "mock_get_node_affinity": [],
                "k8s_executor": []
            }
        },
        "test_run_failed_exception": {
            "name": "test_run_failed_exception",
            "location": 184,
            "return": [],
            "arguments": {
                "k8s_executor": []
            }
        },
        "test_process_event_enqueues_task_processing_events_pending_to_running": {
            "name": "test_process_event_enqueues_task_processing_events_pending_to_running",
            "location": 196,
            "return": [],
            "arguments": {
                "k8s_executor": []
            }
        },
        "test_process_event_enqueues_task_processing_events_running_to_terminal": {
            "name": "test_process_event_enqueues_task_processing_events_running_to_terminal",
            "location": 228,
            "return": [],
            "arguments": {
                "k8s_executor": [],
                "phase": []
            }
        },
        "test_process_event_enqueues_task_processing_events_no_state_transition": {
            "name": "test_process_event_enqueues_task_processing_events_no_state_transition",
            "location": 260,
            "return": [],
            "arguments": {
                "k8s_executor": [],
                "phase": [],
                "task_state": []
            }
        },
        "test_pending_event_processing_loop_processes_remaining_events_after_stop": {
            "name": "test_pending_event_processing_loop_processes_remaining_events_after_stop",
            "location": 294,
            "return": [],
            "arguments": {
                "k8s_executor": []
            }
        },
        "test_process_event_enqueues_task_processing_events_deleted": {
            "name": "test_process_event_enqueues_task_processing_events_deleted",
            "location": 315,
            "return": [],
            "arguments": {
                "k8s_executor": []
            }
        },
        "test_initial_task_metadata": {
            "name": "test_initial_task_metadata",
            "location": 342,
            "return": [],
            "arguments": {
                "k8s_executor_with_tasks": []
            }
        },
        "test_reconcile_missing_pod": {
            "name": "test_reconcile_missing_pod",
            "location": 355,
            "return": [],
            "arguments": {
                "k8s_executor": []
            }
        },
        "test_reconcile_existing_pods": {
            "name": "test_reconcile_existing_pods",
            "location": 380,
            "return": [],
            "arguments": {
                "k8s_executor": [],
                "mock_task_configs": []
            }
        },
        "test_reconcile_api_error": {
            "name": "test_reconcile_api_error",
            "location": 411,
            "return": [],
            "arguments": {
                "k8s_executor": []
            }
        }
    },
    "task_processing-master/tests/unit/plugins/kubernetes/kubernetes_task_config_test.py": {
        "test_kubernetes_task_config_set_pod_name": {
            "name": "test_kubernetes_task_config_set_pod_name",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_kubernetes_task_config_set_pod_name_truncates_long_name": {
            "name": "test_kubernetes_task_config_set_pod_name_truncates_long_name",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "test_kubernetes_task_config_enforces_command_requirmenets": {
            "name": "test_kubernetes_task_config_enforces_command_requirmenets",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "test_cap_add_capabilities_rejects_invalid_capabilites": {
            "name": "test_cap_add_capabilities_rejects_invalid_capabilites",
            "location": 50,
            "return": [],
            "arguments": {
                "capabilties": []
            }
        },
        "test_cap_add_capabilities_valid_capabilites": {
            "name": "test_cap_add_capabilities_valid_capabilites",
            "location": 67,
            "return": [],
            "arguments": {
                "capabilties": []
            }
        },
        "test_cap_drop_capabilities_rejects_invalid_capabilites": {
            "name": "test_cap_drop_capabilities_rejects_invalid_capabilites",
            "location": 84,
            "return": [],
            "arguments": {
                "capabilties": []
            }
        },
        "test_cap_drop_capabilities_valid_capabilites": {
            "name": "test_cap_drop_capabilities_valid_capabilites",
            "location": 101,
            "return": [],
            "arguments": {
                "capabilties": []
            }
        },
        "test_volume_rejects_invalid_specification": {
            "name": "test_volume_rejects_invalid_specification",
            "location": 124,
            "return": [],
            "arguments": {
                "volumes": []
            }
        },
        "test_volume_valid_specification": {
            "name": "test_volume_valid_specification",
            "location": 144,
            "return": [],
            "arguments": {
                "volumes": []
            }
        },
        "test_secret_env_valid_specification": {
            "name": "test_secret_env_valid_specification",
            "location": 165,
            "return": [],
            "arguments": {
                "secret_environment": []
            }
        },
        "test_secret_env_rejects_invalid_specification": {
            "name": "test_secret_env_rejects_invalid_specification",
            "location": 185,
            "return": [],
            "arguments": {
                "secret_environment": []
            }
        },
        "test_field_selector_env_valid_specification": {
            "name": "test_field_selector_env_valid_specification",
            "location": 205,
            "return": [],
            "arguments": {
                "field_selector_environment": []
            }
        },
        "test_field_selector_env_rejects_invalid_specification": {
            "name": "test_field_selector_env_rejects_invalid_specification",
            "location": 226,
            "return": [],
            "arguments": {
                "field_selector_environment": []
            }
        },
        "test_valid_node_affinities_invalid_affinity": {
            "name": "test_valid_node_affinities_invalid_affinity",
            "location": 264,
            "return": [],
            "arguments": {
                "node_affinity": [],
                "exc_msg": []
            }
        },
        "test_service_account_name_invariant": {
            "name": "test_service_account_name_invariant",
            "location": 281,
            "return": [],
            "arguments": {
                "service_account_name": []
            }
        },
        "test_service_account_name_invariant_success": {
            "name": "test_service_account_name_invariant_success",
            "location": 298,
            "return": [],
            "arguments": {
                "service_account_name": []
            }
        },
        "test_valid_ports_invariant_failure": {
            "name": "test_valid_ports_invariant_failure",
            "location": 316,
            "return": [],
            "arguments": {
                "ports": []
            }
        },
        "test_valid_ports_invariant": {
            "name": "test_valid_ports_invariant",
            "location": 332,
            "return": [],
            "arguments": {
                "ports": []
            }
        }
    },
    "task_processing-master/tests/unit/plugins/kubernetes/kubernetes_utils_test.py": {
        "test_get_security_context_for_capabilities": {
            "name": "test_get_security_context_for_capabilities",
            "location": 38,
            "return": [],
            "arguments": {
                "cap_add": [],
                "cap_drop": [],
                "expected": []
            }
        },
        "test_get_sanitised_kubernetes_name": {
            "name": "test_get_sanitised_kubernetes_name",
            "location": 50,
            "return": [],
            "arguments": {
                "name": [],
                "expected_name": []
            }
        },
        "test_get_sanitised_volume_name": {
            "name": "test_get_sanitised_volume_name",
            "location": 74,
            "return": [],
            "arguments": {
                "name": [],
                "length_limit": [],
                "expected": []
            }
        },
        "test_get_kubernetes_volume_mounts": {
            "name": "test_get_kubernetes_volume_mounts",
            "location": 100,
            "return": [],
            "arguments": {
                "volumes": [],
                "expected": []
            }
        },
        "test_get_pod_volumes": {
            "name": "test_get_pod_volumes",
            "location": 125,
            "return": [],
            "arguments": {
                "volumes": [],
                "expected": []
            }
        },
        "test_get_kubernetes_env_vars": {
            "name": "test_get_kubernetes_env_vars",
            "location": 129,
            "return": [],
            "arguments": {}
        },
        "test_get_node_affinity_ok": {
            "name": "test_get_node_affinity_ok",
            "location": 205,
            "return": [],
            "arguments": {}
        },
        "test_get_node_affinity_empty": {
            "name": "test_get_node_affinity_empty",
            "location": 245,
            "return": [],
            "arguments": {}
        }
    },
    "task_processing-master/tests/unit/plugins/kubernetes/kube_client_test.py": {
        "test_KubeClient_no_kubeconfig": {
            "name": "test_KubeClient_no_kubeconfig",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_KubeClient_kubeconfig_init": {
            "name": "test_KubeClient_kubeconfig_init",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "test_KubeClient_kubeconfig_env_var": {
            "name": "test_KubeClient_kubeconfig_env_var",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "test_KubeClient_kubeconfig_init_overrides_env_var": {
            "name": "test_KubeClient_kubeconfig_init_overrides_env_var",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "test_KubeClient_get_pod_too_many_failures": {
            "name": "test_KubeClient_get_pod_too_many_failures",
            "location": 64,
            "return": [],
            "arguments": {}
        },
        "test_KubeClient_get_pod_unknown_exception": {
            "name": "test_KubeClient_get_pod_unknown_exception",
            "location": 81,
            "return": [],
            "arguments": {}
        },
        "test_KubeClient_get_pod": {
            "name": "test_KubeClient_get_pod",
            "location": 97,
            "return": [],
            "arguments": {}
        }
    },
    "task_processing-master/tests/unit/plugins/mesos/conftest.py": {
        "fake_task": {
            "name": "fake_task",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "fake_offer": {
            "name": "fake_offer",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "mock_fw_and_driver": {
            "name": "mock_fw_and_driver",
            "location": 83,
            "return": [],
            "arguments": {}
        }
    },
    "task_processing-master/tests/unit/plugins/mesos/constraints_test.py": {
        "fake_dict": {
            "name": "fake_dict",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "test_constraints_eq_match": {
            "name": "test_constraints_eq_match",
            "location": 17,
            "return": [],
            "arguments": {
                "fake_dict": []
            }
        },
        "test_constraints_eq_not_match": {
            "name": "test_constraints_eq_not_match",
            "location": 40,
            "return": [],
            "arguments": {
                "fake_dict": []
            }
        },
        "test_constraints_EQUALS_match": {
            "name": "test_constraints_EQUALS_match",
            "location": 53,
            "return": [],
            "arguments": {
                "fake_dict": []
            }
        },
        "test_constraints_EQUALS_not_match": {
            "name": "test_constraints_EQUALS_not_match",
            "location": 76,
            "return": [],
            "arguments": {
                "fake_dict": []
            }
        },
        "test_constraints_ne_match": {
            "name": "test_constraints_ne_match",
            "location": 89,
            "return": [],
            "arguments": {
                "fake_dict": []
            }
        },
        "test_constraints_ne_not_match": {
            "name": "test_constraints_ne_not_match",
            "location": 112,
            "return": [],
            "arguments": {
                "fake_dict": []
            }
        },
        "test_constraints_NOTEQUALS_match": {
            "name": "test_constraints_NOTEQUALS_match",
            "location": 125,
            "return": [],
            "arguments": {
                "fake_dict": []
            }
        },
        "test_constraints_NOTEQUALS_not_match": {
            "name": "test_constraints_NOTEQUALS_not_match",
            "location": 148,
            "return": [],
            "arguments": {
                "fake_dict": []
            }
        },
        "test_constraints_LIKE_match": {
            "name": "test_constraints_LIKE_match",
            "location": 161,
            "return": [],
            "arguments": {
                "fake_dict": []
            }
        },
        "test_constraints_LIKE_not_match": {
            "name": "test_constraints_LIKE_not_match",
            "location": 184,
            "return": [],
            "arguments": {
                "fake_dict": []
            }
        },
        "test_constraints_UNLIKE_match": {
            "name": "test_constraints_UNLIKE_match",
            "location": 207,
            "return": [],
            "arguments": {
                "fake_dict": []
            }
        },
        "test_constraints_UNLIKE_not_match": {
            "name": "test_constraints_UNLIKE_not_match",
            "location": 230,
            "return": [],
            "arguments": {
                "fake_dict": []
            }
        },
        "test_constraints_all_match": {
            "name": "test_constraints_all_match",
            "location": 243,
            "return": [],
            "arguments": {
                "fake_dict": []
            }
        },
        "test_constraints_all_not_match": {
            "name": "test_constraints_all_not_match",
            "location": 261,
            "return": [],
            "arguments": {
                "fake_dict": []
            }
        }
    },
    "task_processing-master/tests/unit/plugins/mesos/execution_framework_test.py": {
        "ef": {
            "name": "ef",
            "location": 19,
            "return": [],
            "arguments": {
                "mock_Thread": []
            }
        },
        "mock_driver": {
            "name": "mock_driver",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "mock_get_metric": {
            "name": "mock_get_metric",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "mock_time": {
            "name": "mock_time",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "mock_sleep": {
            "name": "mock_sleep",
            "location": 45,
            "return": [],
            "arguments": {
                "ef": []
            }
        },
        "test_ef_kills_stuck_tasks": {
            "name": "test_ef_kills_stuck_tasks",
            "location": 53,
            "return": [],
            "arguments": {
                "ef": [],
                "fake_task": [],
                "mock_sleep": [],
                "mock_get_metric": []
            }
        },
        "test_reenqueue_tasks_stuck_in_unknown_state": {
            "name": "test_reenqueue_tasks_stuck_in_unknown_state",
            "location": 91,
            "return": [],
            "arguments": {
                "ef": [],
                "fake_task": [],
                "mock_sleep": [],
                "mock_get_metric": []
            }
        },
        "test_offer_matches_pool_no_pool": {
            "name": "test_offer_matches_pool_no_pool",
            "location": 125,
            "return": [],
            "arguments": {
                "ef": [],
                "fake_offer": []
            }
        },
        "test_offer_matches_pool_match": {
            "name": "test_offer_matches_pool_match",
            "location": 130,
            "return": [],
            "arguments": {
                "ef": [],
                "fake_offer": []
            }
        },
        "test_offer_matches_pool_no_match": {
            "name": "test_offer_matches_pool_no_match",
            "location": 137,
            "return": [],
            "arguments": {
                "ef": [],
                "fake_offer": []
            }
        },
        "test_offer_matches_constraints_no_constraints": {
            "name": "test_offer_matches_constraints_no_constraints",
            "location": 144,
            "return": [],
            "arguments": {
                "ef": [],
                "fake_task": [],
                "fake_offer": []
            }
        },
        "test_offer_matches_constraints_match": {
            "name": "test_offer_matches_constraints_match",
            "location": 151,
            "return": [],
            "arguments": {
                "ef": [],
                "fake_offer": []
            }
        },
        "test_offer_matches_constraints_no_match": {
            "name": "test_offer_matches_constraints_no_match",
            "location": 165,
            "return": [],
            "arguments": {
                "ef": [],
                "fake_offer": []
            }
        },
        "test_kill_task": {
            "name": "test_kill_task",
            "location": 179,
            "return": [],
            "arguments": {
                "ef": [],
                "mock_driver": []
            }
        },
        "test_kill_task_from_task_queue": {
            "name": "test_kill_task_from_task_queue",
            "location": 190,
            "return": [],
            "arguments": {
                "ef": [],
                "mock_driver": []
            }
        },
        "test_blacklist_slave": {
            "name": "test_blacklist_slave",
            "location": 202,
            "return": [],
            "arguments": {
                "ef": [],
                "mock_get_metric": [],
                "mock_time": []
            }
        },
        "test_unblacklist_slave": {
            "name": "test_unblacklist_slave",
            "location": 221,
            "return": [],
            "arguments": {
                "ef": [],
                "mock_time": [],
                "mock_sleep": []
            }
        },
        "test_enqueue_task": {
            "name": "test_enqueue_task",
            "location": 234,
            "return": [],
            "arguments": {
                "ef": [],
                "fake_task": [],
                "mock_driver": [],
                "mock_get_metric": []
            }
        },
        "test_stop": {
            "name": "test_stop",
            "location": 255,
            "return": [],
            "arguments": {
                "ef": []
            }
        },
        "test_initialize_metrics": {
            "name": "test_initialize_metrics",
            "location": 261,
            "return": [],
            "arguments": {
                "ef": []
            }
        },
        "test_slave_lost": {
            "name": "test_slave_lost",
            "location": 303,
            "return": [],
            "arguments": {
                "ef": [],
                "mock_driver": []
            }
        },
        "test_registered": {
            "name": "test_registered",
            "location": 307,
            "return": [],
            "arguments": {
                "ef": [],
                "mock_driver": []
            }
        },
        "test_reregistered": {
            "name": "test_reregistered",
            "location": 318,
            "return": [],
            "arguments": {
                "ef": [],
                "mock_driver": []
            }
        },
        "test_resource_offers_launch": {
            "name": "test_resource_offers_launch",
            "location": 325,
            "return": [],
            "arguments": {
                "ef": [],
                "fake_task": [],
                "fake_offer": [],
                "mock_driver": [],
                "mock_get_metric": [],
                "mock_time": []
            }
        },
        "test_resource_offers_launch_tasks_failed": {
            "name": "test_resource_offers_launch_tasks_failed",
            "location": 367,
            "return": [],
            "arguments": {
                "ef": [],
                "fake_task": [],
                "fake_offer": [],
                "mock_driver": [],
                "mock_get_metric": [],
                "mock_time": []
            }
        },
        "test_resource_offers_no_tasks_to_launch": {
            "name": "test_resource_offers_no_tasks_to_launch",
            "location": 401,
            "return": [],
            "arguments": {
                "ef": [],
                "fake_offer": [],
                "mock_driver": [],
                "mock_get_metric": []
            }
        },
        "test_resource_offers_blacklisted_offer": {
            "name": "test_resource_offers_blacklisted_offer",
            "location": 422,
            "return": [],
            "arguments": {
                "ef": [],
                "fake_task": [],
                "fake_offer": [],
                "mock_driver": [],
                "mock_get_metric": []
            }
        },
        "test_resource_offers_not_for_pool": {
            "name": "test_resource_offers_not_for_pool",
            "location": 445,
            "return": [],
            "arguments": {
                "ef": [],
                "fake_task": [],
                "fake_offer": [],
                "mock_driver": [],
                "mock_get_metric": []
            }
        },
        "test_resource_offers_unmet_reqs": {
            "name": "test_resource_offers_unmet_reqs",
            "location": 469,
            "return": [],
            "arguments": {
                "ef": [],
                "fake_task": [],
                "fake_offer": [],
                "mock_driver": [],
                "mock_get_metric": []
            }
        },
        "status_update_test_prep": {
            "name": "status_update_test_prep",
            "location": 493,
            "return": [],
            "arguments": {
                "state": [],
                "reason": []
            }
        },
        "test_status_update_record_only": {
            "name": "test_status_update_record_only",
            "location": 511,
            "return": [],
            "arguments": {
                "ef": [],
                "mock_driver": []
            }
        },
        "test_status_update_finished": {
            "name": "test_status_update_finished",
            "location": 528,
            "return": [],
            "arguments": {
                "ef": [],
                "mock_driver": [],
                "mock_get_metric": []
            }
        },
        "test_ignore_status_update": {
            "name": "test_ignore_status_update",
            "location": 550,
            "return": [],
            "arguments": {
                "ef": [],
                "mock_driver": [],
                "mock_get_metric": []
            }
        },
        "test_task_lost_due_to_invalid_offers": {
            "name": "test_task_lost_due_to_invalid_offers",
            "location": 567,
            "return": [],
            "arguments": {
                "ef": [],
                "mock_driver": [],
                "mock_get_metric": []
            }
        },
        "test_background_thread_removes_offer_timeout": {
            "name": "test_background_thread_removes_offer_timeout",
            "location": 591,
            "return": [],
            "arguments": {
                "ef": [],
                "mock_driver": [],
                "fake_task": [],
                "mock_time": [],
                "mock_sleep": []
            }
        },
        "test_launch_tasks_for_offer_task_missing": {
            "name": "test_launch_tasks_for_offer_task_missing",
            "location": 621,
            "return": [],
            "arguments": {
                "ef": [],
                "fake_task": [],
                "fake_offer": []
            }
        },
        "test_reconcile_task_unknown": {
            "name": "test_reconcile_task_unknown",
            "location": 630,
            "return": [],
            "arguments": {
                "ef": [],
                "mock_driver": [],
                "fake_task": []
            }
        },
        "test_reconcile_task_existing": {
            "name": "test_reconcile_task_existing",
            "location": 644,
            "return": [],
            "arguments": {
                "ef": [],
                "mock_driver": [],
                "fake_task": []
            }
        },
        "mock_sleep.stop_killing": {
            "name": "stop_killing",
            "location": 46,
            "return": [],
            "arguments": {
                "task_id": []
            }
        }
    },
    "task_processing-master/tests/unit/plugins/mesos/logging_executor_test.py": {
        "mock_Thread": {
            "name": "mock_Thread",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "source_queue": {
            "name": "source_queue",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "mock_downstream": {
            "name": "mock_downstream",
            "location": 23,
            "return": [],
            "arguments": {
                "source_queue": []
            }
        },
        "mock_logging_executor": {
            "name": "mock_logging_executor",
            "location": 30,
            "return": [],
            "arguments": {
                "mock_Thread": [],
                "mock_downstream": []
            }
        },
        "test_run": {
            "name": "test_run",
            "location": 34,
            "return": [],
            "arguments": {
                "mock_logging_executor": [],
                "mock_downstream": []
            }
        },
        "test_kill": {
            "name": "test_kill",
            "location": 40,
            "return": [],
            "arguments": {
                "mock_logging_executor": [],
                "mock_downstream": []
            }
        },
        "test_reconcile": {
            "name": "test_reconcile",
            "location": 46,
            "return": [],
            "arguments": {
                "mock_logging_executor": [],
                "mock_downstream": []
            }
        },
        "test_stop": {
            "name": "test_stop",
            "location": 51,
            "return": [],
            "arguments": {
                "mock_logging_executor": [],
                "mock_downstream": []
            }
        },
        "test_event_loop_stores_staging_event": {
            "name": "test_event_loop_stores_staging_event",
            "location": 57,
            "return": [],
            "arguments": {
                "mock_logging_executor": [],
                "source_queue": []
            }
        },
        "test_event_loop_stores_staging_event_with_bogus_url": {
            "name": "test_event_loop_stores_staging_event_with_bogus_url",
            "location": 84,
            "return": [],
            "arguments": {
                "mock_logging_executor": [],
                "source_queue": []
            }
        },
        "test_event_loop_continues_after_unknown_task": {
            "name": "test_event_loop_continues_after_unknown_task",
            "location": 108,
            "return": [],
            "arguments": {
                "mock_logging_executor": [],
                "source_queue": []
            }
        },
        "test_event_loop_running_event": {
            "name": "test_event_loop_running_event",
            "location": 131,
            "return": [],
            "arguments": {
                "mock_logging_executor": [],
                "source_queue": []
            }
        },
        "test_event_loop_terminal_event": {
            "name": "test_event_loop_terminal_event",
            "location": 159,
            "return": [],
            "arguments": {
                "mock_logging_executor": [],
                "source_queue": []
            }
        }
    },
    "task_processing-master/tests/unit/plugins/mesos/mesos_executor_test.py": {
        "mock_callbacks": {
            "name": "mock_callbacks",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "mesos_executor": {
            "name": "mesos_executor",
            "location": 14,
            "return": [],
            "arguments": {
                "request": [],
                "mock_callbacks": [],
                "mock_Thread": [],
                "mock_fw_and_driver": []
            }
        },
        "test_creates_execution_framework_and_driver": {
            "name": "test_creates_execution_framework_and_driver",
            "location": 27,
            "return": [],
            "arguments": {
                "mock_callbacks": [],
                "mock_Thread": [],
                "mesos_executor": [],
                "mock_fw_and_driver": []
            }
        },
        "test_run_passes_task_to_execution_framework": {
            "name": "test_run_passes_task_to_execution_framework",
            "location": 63,
            "return": [],
            "arguments": {
                "mesos_executor": []
            }
        },
        "test_stop_shuts_down_properly": {
            "name": "test_stop_shuts_down_properly",
            "location": 69,
            "return": [],
            "arguments": {
                "mesos_executor": []
            }
        },
        "test_event_queue": {
            "name": "test_event_queue",
            "location": 76,
            "return": [],
            "arguments": {
                "mocker": [],
                "mesos_executor": []
            }
        },
        "test_kill_returns": {
            "name": "test_kill_returns",
            "location": 82,
            "return": [],
            "arguments": {
                "mesos_executor": []
            }
        },
        "test_reconcile": {
            "name": "test_reconcile",
            "location": 89,
            "return": [],
            "arguments": {
                "mesos_executor": []
            }
        },
        "mesos_executor.mesos_executor_teardown": {
            "name": "mesos_executor_teardown",
            "location": 20,
            "return": [],
            "arguments": {}
        }
    },
    "task_processing-master/tests/unit/plugins/mesos/mesos_task_config_test.py": {
        "test_mesos_task_config_factories": {
            "name": "test_mesos_task_config_factories",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_mesos_task_config_set_task_id": {
            "name": "test_mesos_task_config_set_task_id",
            "location": 30,
            "return": [],
            "arguments": {}
        }
    },
    "task_processing-master/tests/unit/plugins/mesos/mesos_task_executor_test.py": {
        "resource_patches": {
            "name": "resource_patches",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_get_tasks_for_offer_doesnt_fit": {
            "name": "test_get_tasks_for_offer_doesnt_fit",
            "location": 20,
            "return": [],
            "arguments": {
                "resource_patches": [],
                "fits": [],
                "constraints": []
            }
        },
        "test_get_tasks_for_offer": {
            "name": "test_get_tasks_for_offer",
            "location": 36,
            "return": [],
            "arguments": {
                "resource_patches": []
            }
        }
    },
    "task_processing-master/tests/unit/plugins/mesos/resource_helpers_test.py": {
        "offer_resources": {
            "name": "offer_resources",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_get_offer_resources": {
            "name": "test_get_offer_resources",
            "location": 22,
            "return": [],
            "arguments": {
                "fake_offer": [],
                "role": []
            }
        },
        "test_allocate_task_resources": {
            "name": "test_allocate_task_resources",
            "location": 36,
            "return": [],
            "arguments": {
                "fake_task": [],
                "offer_resources": [],
                "available_ports": []
            }
        },
        "test_task_fits": {
            "name": "test_task_fits",
            "location": 56,
            "return": [],
            "arguments": {
                "fake_task": [],
                "offer_resources": [],
                "cpus": [],
                "available_ports": []
            }
        }
    },
    "task_processing-master/tests/unit/plugins/mesos/retrying_executor_test.py": {
        "mock_Thread": {
            "name": "mock_Thread",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "source_queue": {
            "name": "source_queue",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "mock_downstream": {
            "name": "mock_downstream",
            "location": 23,
            "return": [],
            "arguments": {
                "source_queue": []
            }
        },
        "mock_retrying_executor": {
            "name": "mock_retrying_executor",
            "location": 30,
            "return": [],
            "arguments": {
                "mock_Thread": [],
                "mock_downstream": []
            }
        },
        "mock_task_config": {
            "name": "mock_task_config",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "mock_event": {
            "name": "mock_event",
            "location": 49,
            "return": [],
            "arguments": {
                "mock_task_config": [],
                "is_terminal": []
            }
        },
        "test_task_retry": {
            "name": "test_task_retry",
            "location": 64,
            "return": [],
            "arguments": {
                "mock_retrying_executor": [],
                "mock_event": []
            }
        },
        "test_task_retry_retries_exhausted": {
            "name": "test_task_retry_retries_exhausted",
            "location": 75,
            "return": [],
            "arguments": {
                "mock_retrying_executor": [],
                "mock_event": []
            }
        },
        "test_retry_loop_retries_task": {
            "name": "test_retry_loop_retries_task",
            "location": 88,
            "return": [],
            "arguments": {
                "mock_retrying_executor": [],
                "mock_event": []
            }
        },
        "test_retry_loop_does_not_retry_task": {
            "name": "test_retry_loop_does_not_retry_task",
            "location": 106,
            "return": [],
            "arguments": {
                "mock_retrying_executor": [],
                "mock_event": []
            }
        },
        "test_retry_loop_filters_out_non_task": {
            "name": "test_retry_loop_filters_out_non_task",
            "location": 128,
            "return": [],
            "arguments": {
                "mock_retrying_executor": []
            }
        },
        "test_retry_loop_recover_attempt": {
            "name": "test_retry_loop_recover_attempt",
            "location": 149,
            "return": [],
            "arguments": {
                "mock_retrying_executor": [],
                "mock_event": []
            }
        },
        "test_run": {
            "name": "test_run",
            "location": 169,
            "return": [],
            "arguments": {
                "mock_retrying_executor": [],
                "mock_downstream": [],
                "mock_task_config": []
            }
        },
        "test_run_default_retries": {
            "name": "test_run_default_retries",
            "location": 182,
            "return": [],
            "arguments": {
                "mock_retrying_executor": [],
                "mock_downstream": []
            }
        },
        "test_reconcile": {
            "name": "test_reconcile",
            "location": 191,
            "return": [],
            "arguments": {
                "mock_retrying_executor": [],
                "mock_downstream": []
            }
        },
        "test_kill": {
            "name": "test_kill",
            "location": 198,
            "return": [],
            "arguments": {
                "mock_retrying_executor": [],
                "mock_downstream": []
            }
        },
        "test_stop": {
            "name": "test_stop",
            "location": 207,
            "return": [],
            "arguments": {
                "mock_retrying_executor": [],
                "mock_downstream": []
            }
        },
        "test_task_config_with_retry": {
            "name": "test_task_config_with_retry",
            "location": 215,
            "return": [],
            "arguments": {
                "mock_retrying_executor": [],
                "mock_task_config": []
            }
        },
        "test_restore_task_id": {
            "name": "test_restore_task_id",
            "location": 227,
            "return": [],
            "arguments": {
                "mock_retrying_executor": [],
                "mock_event": []
            }
        },
        "test_is_current_attempt": {
            "name": "test_is_current_attempt",
            "location": 249,
            "return": [],
            "arguments": {
                "mock_retrying_executor": [],
                "mock_event": [],
                "mock_task_config": []
            }
        },
        "test_is_not_current_attempt": {
            "name": "test_is_not_current_attempt",
            "location": 279,
            "return": [],
            "arguments": {
                "mock_retrying_executor": [],
                "mock_event": []
            }
        },
        "test_is_unknown_attempt": {
            "name": "test_is_unknown_attempt",
            "location": 305,
            "return": [],
            "arguments": {
                "mock_retrying_executor": [],
                "mock_event": []
            }
        }
    },
    "task_processing-master/tests/unit/plugins/mesos/timeout_executor_test.py": {
        "mock_Thread": {
            "name": "mock_Thread",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "source_queue": {
            "name": "source_queue",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "mock_downstream": {
            "name": "mock_downstream",
            "location": 25,
            "return": [],
            "arguments": {
                "source_queue": []
            }
        },
        "mock_timeout_executor": {
            "name": "mock_timeout_executor",
            "location": 32,
            "return": [],
            "arguments": {
                "mock_Thread": [],
                "mock_downstream": []
            }
        },
        "mock_task_config": {
            "name": "mock_task_config",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "mock_entry": {
            "name": "mock_entry",
            "location": 48,
            "return": [],
            "arguments": {
                "mock_task_config": []
            }
        },
        "mock_event": {
            "name": "mock_event",
            "location": 56,
            "return": [],
            "arguments": {
                "mock_task_config": []
            }
        },
        "test_timeout_loop_nontask": {
            "name": "test_timeout_loop_nontask",
            "location": 70,
            "return": [],
            "arguments": {
                "mock_timeout_executor": [],
                "mock_event": []
            }
        },
        "test_timeout_loop_terminal_task_timed_out": {
            "name": "test_timeout_loop_terminal_task_timed_out",
            "location": 86,
            "return": [],
            "arguments": {
                "mock_timeout_executor": [],
                "mock_event": [],
                "mock_entry": []
            }
        },
        "test_timeout_loop_existing_nonterminal_task": {
            "name": "test_timeout_loop_existing_nonterminal_task",
            "location": 104,
            "return": [],
            "arguments": {
                "mock_timeout_executor": [],
                "mock_event": [],
                "mock_entry": []
            }
        },
        "test_timeout_loop_nonexistent_nonterminal_task": {
            "name": "test_timeout_loop_nonexistent_nonterminal_task",
            "location": 124,
            "return": [],
            "arguments": {
                "mock_timeout_executor": [],
                "mock_event": [],
                "mock_entry": []
            }
        },
        "test_run": {
            "name": "test_run",
            "location": 144,
            "return": [],
            "arguments": {
                "mock_timeout_executor": [],
                "mock_downstream": []
            }
        },
        "test_reconcile": {
            "name": "test_reconcile",
            "location": 153,
            "return": [],
            "arguments": {
                "mock_timeout_executor": [],
                "mock_downstream": []
            }
        },
        "test_kill_existing_task": {
            "name": "test_kill_existing_task",
            "location": 159,
            "return": [],
            "arguments": {
                "mock_timeout_executor": [],
                "mock_downstream": []
            }
        },
        "test_stop": {
            "name": "test_stop",
            "location": 173,
            "return": [],
            "arguments": {
                "mock_timeout_executor": [],
                "mock_downstream": []
            }
        },
        "test_insert_new_running_task_entry_enumerate": {
            "name": "test_insert_new_running_task_entry_enumerate",
            "location": 180,
            "return": [],
            "arguments": {
                "mock_timeout_executor": []
            }
        },
        "test_insert_new_running_task_entry_append": {
            "name": "test_insert_new_running_task_entry_append",
            "location": 193,
            "return": [],
            "arguments": {
                "mock_timeout_executor": []
            }
        }
    },
    "task_processing-master/tests/unit/plugins/mesos/translator_test.py": {
        "test_make_mesos_task_info": {
            "name": "test_make_mesos_task_info",
            "location": 47,
            "return": [],
            "arguments": {
                "fake_task": [],
                "fake_offer": [],
                "gpus_count": [],
                "containerizer": [],
                "container": []
            }
        },
        "test_mesos_update_to_event": {
            "name": "test_mesos_update_to_event",
            "location": 121,
            "return": [],
            "arguments": {
                "mock_time": []
            }
        }
    },
    "task_processing-master/tests/unit/plugins/persistence/dynamo_persistence_test.py": {
        "persister": {
            "name": "persister",
            "location": 12,
            "return": [],
            "arguments": {
                "mocker": []
            }
        },
        "test_replaces_decimals_dict": {
            "name": "test_replaces_decimals_dict",
            "location": 30,
            "return": [],
            "arguments": {
                "x": [],
                "persister": []
            }
        },
        "test_replaces_decimals_decimal": {
            "name": "test_replaces_decimals_decimal",
            "location": 36,
            "return": [],
            "arguments": {
                "x": [],
                "persister": []
            }
        },
        "test_replaces_decimals_list": {
            "name": "test_replaces_decimals_list",
            "location": 41,
            "return": [],
            "arguments": {
                "x": [],
                "persister": []
            }
        },
        "test_replaces_decimals_unaffected": {
            "name": "test_replaces_decimals_unaffected",
            "location": 49,
            "return": [],
            "arguments": {
                "x": [],
                "persister": []
            }
        },
        "test_event_to_item_timestamp": {
            "name": "test_event_to_item_timestamp",
            "location": 78,
            "return": [],
            "arguments": {
                "x": [],
                "persister": []
            }
        },
        "test_event_to_item_list": {
            "name": "test_event_to_item_list",
            "location": 88,
            "return": [],
            "arguments": {
                "x": [],
                "persister": []
            }
        }
    },
    "task_processing-master/tests/unit/plugins/stateful/stateful_executor_test.py": {
        "mock_downstream": {
            "name": "mock_downstream",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "mock_persister": {
            "name": "mock_persister",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "mock_stateful_executor": {
            "name": "mock_stateful_executor",
            "location": 18,
            "return": [],
            "arguments": {
                "mock_Thread": [],
                "mock_downstream": [],
                "mock_persister": []
            }
        },
        "test_run": {
            "name": "test_run",
            "location": 25,
            "return": [],
            "arguments": {
                "mock_stateful_executor": [],
                "mock_downstream": []
            }
        },
        "test_kill": {
            "name": "test_kill",
            "location": 31,
            "return": [],
            "arguments": {
                "mock_stateful_executor": [],
                "mock_downstream": []
            }
        },
        "test_reconcile": {
            "name": "test_reconcile",
            "location": 37,
            "return": [],
            "arguments": {
                "mock_stateful_executor": [],
                "mock_downstream": []
            }
        },
        "test_stop": {
            "name": "test_stop",
            "location": 42,
            "return": [],
            "arguments": {
                "mock_stateful_executor": [],
                "mock_downstream": []
            }
        }
    },
    "task_processing-master/tests/unit/runners/async_test.py": {
        "fake_executor": {
            "name": "fake_executor",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "fake_runner": {
            "name": "fake_runner",
            "location": 13,
            "return": [],
            "arguments": {
                "fake_executor": []
            }
        },
        "test_run": {
            "name": "test_run",
            "location": 22,
            "return": [],
            "arguments": {
                "fake_runner": [],
                "fake_executor": []
            }
        },
        "test_reconcile": {
            "name": "test_reconcile",
            "location": 27,
            "return": [],
            "arguments": {
                "fake_runner": [],
                "fake_executor": []
            }
        },
        "test_kill": {
            "name": "test_kill",
            "location": 32,
            "return": [],
            "arguments": {
                "fake_runner": [],
                "fake_executor": []
            }
        },
        "test_stop": {
            "name": "test_stop",
            "location": 38,
            "return": [],
            "arguments": {
                "fake_runner": [],
                "fake_executor": []
            }
        }
    },
    "task_processing-master/tests/unit/runners/promise_test.py": {
        "fake_executor": {
            "name": "fake_executor",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "fake_runner": {
            "name": "fake_runner",
            "location": 13,
            "return": [],
            "arguments": {
                "fake_executor": []
            }
        },
        "test_reconcile": {
            "name": "test_reconcile",
            "location": 20,
            "return": [],
            "arguments": {
                "fake_runner": [],
                "fake_executor": []
            }
        },
        "test_kill": {
            "name": "test_kill",
            "location": 25,
            "return": [],
            "arguments": {
                "fake_runner": [],
                "fake_executor": []
            }
        },
        "test_stop": {
            "name": "test_stop",
            "location": 31,
            "return": [],
            "arguments": {
                "fake_runner": [],
                "fake_executor": []
            }
        }
    },
    "task_processing-master/tests/unit/runners/subscription_test.py": {
        "fake_executor": {
            "name": "fake_executor",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "fake_runner": {
            "name": "fake_runner",
            "location": 13,
            "return": [],
            "arguments": {
                "fake_executor": []
            }
        },
        "test_run": {
            "name": "test_run",
            "location": 22,
            "return": [],
            "arguments": {
                "fake_runner": [],
                "fake_executor": []
            }
        },
        "test_reconcile": {
            "name": "test_reconcile",
            "location": 27,
            "return": [],
            "arguments": {
                "fake_runner": [],
                "fake_executor": []
            }
        },
        "test_kill": {
            "name": "test_kill",
            "location": 32,
            "return": [],
            "arguments": {
                "fake_runner": [],
                "fake_executor": []
            }
        },
        "test_stop": {
            "name": "test_stop",
            "location": 38,
            "return": [],
            "arguments": {
                "fake_runner": [],
                "fake_executor": []
            }
        }
    },
    "task_processing-master/tests/unit/runners/sync_test.py": {
        "fake_executor": {
            "name": "fake_executor",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "fake_runner": {
            "name": "fake_runner",
            "location": 13,
            "return": [],
            "arguments": {
                "fake_executor": []
            }
        },
        "test_run": {
            "name": "test_run",
            "location": 21,
            "return": [],
            "arguments": {
                "fake_runner": [],
                "fake_executor": []
            }
        },
        "test_run_stop_event": {
            "name": "test_run_stop_event",
            "location": 32,
            "return": [],
            "arguments": {
                "fake_runner": [],
                "fake_executor": []
            }
        },
        "test_run_other_task": {
            "name": "test_run_other_task",
            "location": 43,
            "return": [],
            "arguments": {
                "fake_runner": [],
                "fake_executor": []
            }
        },
        "test_reconcile": {
            "name": "test_reconcile",
            "location": 61,
            "return": [],
            "arguments": {
                "fake_runner": [],
                "fake_executor": []
            }
        },
        "test_kill": {
            "name": "test_kill",
            "location": 66,
            "return": [],
            "arguments": {
                "fake_runner": [],
                "fake_executor": []
            }
        },
        "test_stop": {
            "name": "test_stop",
            "location": 72,
            "return": [],
            "arguments": {
                "fake_runner": [],
                "fake_executor": []
            }
        }
    }
}
{
    "tcpy-master/tcpy/arp.py": {
        "_check_opcode_fn": {
            "name": "_check_opcode_fn",
            "location": 9,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "opcode": []
            }
        },
        "fmt_mac": {
            "name": "fmt_mac",
            "location": 201,
            "return": [
                "str"
            ],
            "arguments": {
                "tup": []
            }
        },
        "mac2b": {
            "name": "mac2b",
            "location": 206,
            "return": [
                "bytes"
            ],
            "arguments": {
                "addr": []
            }
        },
        "_check_opcode_fn.f": {
            "name": "f",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ARPHeader.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hwtype": [],
                "protype": [],
                "hwsize": [],
                "prosize": [],
                "opcode": [],
                "data": []
            }
        },
        "ARPHeader.is_supported": {
            "name": "is_supported",
            "location": 53,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ARPHeader.ipv4_data": {
            "name": "ipv4_data",
            "location": 61,
            "return": [
                "ARPIPv4"
            ],
            "arguments": {
                "self": []
            }
        },
        "ARPHeader.replace_data": {
            "name": "replace_data",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ARPHeader.encode": {
            "name": "encode",
            "location": 82,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "ARPHeader.decode": {
            "name": "decode",
            "location": 107,
            "return": [
                "_TARPHeader@@ARPHeader@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TARPHeader]"
                ],
                "raw": []
            }
        },
        "ARPIPv4.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "smac": [],
                "sip": [],
                "dmac": [],
                "dip": []
            }
        },
        "ARPIPv4.encode": {
            "name": "encode",
            "location": 155,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ARPIPv4.decode": {
            "name": "decode",
            "location": 176,
            "return": [
                "_TARPIPv4@@ARPIPv4@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TARPIPv4]"
                ],
                "raw": []
            }
        },
        "ARPIPv4.__repr__": {
            "name": "__repr__",
            "location": 195,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tcpy-master/tcpy/arp_table.py": {
        "ARPTable.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ip": [],
                "mac": []
            }
        },
        "ARPTable.process_arp": {
            "name": "process_arp",
            "location": 25,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "eth": []
            }
        },
        "ARPTable._reply": {
            "name": "_reply",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "arp": [],
                "ipv4": []
            }
        },
        "ARPTable.update": {
            "name": "update",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "protype": [],
                "pro_addr": [],
                "mac": []
            }
        },
        "ARPTable.insert": {
            "name": "insert",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "protype": [],
                "pro_addr": [],
                "mac": []
            }
        },
        "ARPTable.get_mac_for_ip": {
            "name": "get_mac_for_ip",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ip": []
            }
        }
    },
    "tcpy-master/tcpy/constants.py": {},
    "tcpy-master/tcpy/eth.py": {
        "EthernetHeader.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dmac": [],
                "smac": [],
                "typ": [],
                "payload": []
            }
        },
        "EthernetHeader.encode": {
            "name": "encode",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthernetHeader.decode": {
            "name": "decode",
            "location": 41,
            "return": [
                "_TEthernetHeader@@EthernetHeader@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TEthernetHeader]"
                ],
                "raw": []
            }
        },
        "EthernetHeader.is_arp": {
            "name": "is_arp",
            "location": 58,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthernetHeader.is_ip": {
            "name": "is_ip",
            "location": 66,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tcpy-master/tcpy/icmpv4.py": {
        "ICMPv4Header.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "typ": [],
                "code": [],
                "csum": [],
                "data": []
            }
        },
        "ICMPv4Header.adjust_checksum": {
            "name": "adjust_checksum",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ICMPv4Header.encode": {
            "name": "encode",
            "location": 35,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "ICMPv4Header.decode": {
            "name": "decode",
            "location": 53,
            "return": [
                "_TICMPv4Header@@ICMPv4Header@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TICMPv4Header]"
                ],
                "raw": []
            }
        },
        "ICMPv4Header.reply": {
            "name": "reply",
            "location": 78,
            "return": [
                "_TICMPv4Header@@ICMPv4Header@@"
            ],
            "arguments": {
                "self": [
                    "_TICMPv4Header@@ICMPv4Header@@"
                ]
            }
        }
    },
    "tcpy-master/tcpy/ip.py": {
        "IPHeader.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "version": [],
                "ihl": [],
                "tos": [],
                "len": [],
                "id": [],
                "flags": [],
                "frag_offset": [],
                "ttl": [],
                "proto": [],
                "csum": [],
                "saddr": [],
                "daddr": [],
                "payload": []
            }
        },
        "IPHeader.is_tcp": {
            "name": "is_tcp",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "IPHeader.is_icmp": {
            "name": "is_icmp",
            "location": 70,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "IPHeader.adjust_checksum": {
            "name": "adjust_checksum",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IPHeader.encode": {
            "name": "encode",
            "location": 85,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "IPHeader.decode": {
            "name": "decode",
            "location": 110,
            "return": [
                "_TIPHeader@@IPHeader@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TIPHeader]"
                ],
                "raw": []
            }
        },
        "IPHeader.is_supported": {
            "name": "is_supported",
            "location": 156,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "IPHeader.__repr__": {
            "name": "__repr__",
            "location": 167,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "IPHeader.reply": {
            "name": "reply",
            "location": 170,
            "return": [
                "_TIPHeader@@IPHeader@@"
            ],
            "arguments": {
                "self": [
                    "_TIPHeader@@IPHeader@@"
                ],
                "src_ip": [],
                "payload": [],
                "proto": []
            }
        }
    },
    "tcpy-master/tcpy/ip_util.py": {
        "ip_checksum": {
            "name": "ip_checksum",
            "location": 5,
            "return": [
                "Any"
            ],
            "arguments": {
                "hdr_raw": [],
                "start": []
            }
        },
        "sum_by_16bits": {
            "name": "sum_by_16bits",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "raw": []
            }
        },
        "ip2int": {
            "name": "ip2int",
            "location": 44,
            "return": [
                "Any"
            ],
            "arguments": {
                "addr": []
            }
        },
        "int2ip": {
            "name": "int2ip",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "addr": []
            }
        }
    },
    "tcpy-master/tcpy/stack.py": {
        "to_run": {
            "name": "to_run",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "name": []
            }
        },
        "hex_debug": {
            "name": "hex_debug",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "raw": [],
                "desc": []
            }
        },
        "Stack.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ip": [],
                "mac": [],
                "interf": []
            }
        },
        "Stack.start": {
            "name": "start",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.stop": {
            "name": "stop",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.start_in_fg": {
            "name": "start_in_fg",
            "location": 60,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack._handle_arp": {
            "name": "_handle_arp",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "eth": []
            }
        },
        "Stack._handle_ip": {
            "name": "_handle_ip",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "eth": []
            }
        },
        "Stack._handle_icmp": {
            "name": "_handle_icmp",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "eth": [],
                "ip_hdr": []
            }
        },
        "Stack._handle_tcp": {
            "name": "_handle_tcp",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "eth": [],
                "ip_hdr": []
            }
        },
        "Stack.ip_output": {
            "name": "ip_output",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "daddr": [],
                "payload": []
            }
        },
        "Stack._build_eth_reply": {
            "name": "_build_eth_reply",
            "location": 144,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "typ": [],
                "daddr": [],
                "payload": []
            }
        }
    },
    "tcpy-master/tcpy/tcp.py": {
        "TCPHeader.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src_port": [],
                "dst_port": [],
                "seq": [],
                "ack": [],
                "hl": [],
                "flags": [],
                "win_size": [],
                "csum": [],
                "uptr": [],
                "additional_fields": [],
                "payload": []
            }
        },
        "TCPHeader.decode": {
            "name": "decode",
            "location": 59,
            "return": [
                "_TTCPHeader@@TCPHeader@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TTCPHeader]"
                ],
                "raw": []
            }
        },
        "TCPHeader.encode": {
            "name": "encode",
            "location": 104,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "TCPHeader.adjust_checksum": {
            "name": "adjust_checksum",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ip_hdr": []
            }
        },
        "TCPHeader.checksum": {
            "name": "checksum",
            "location": 136,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "ip_hdr": []
            }
        },
        "TCPHeader.reply": {
            "name": "reply",
            "location": 170,
            "return": [
                "_TTCPHeader@@TCPHeader@@"
            ],
            "arguments": {
                "self": [
                    "_TTCPHeader@@TCPHeader@@"
                ],
                "ip_hdr": []
            }
        }
    },
    "tcpy-master/tcpy/tuntap.py": {
        "open_tun": {
            "name": "open_tun",
            "location": 11,
            "return": [
                "Tuple[(int, Tuple[(Any, Any)])]"
            ],
            "arguments": {
                "interf": []
            }
        },
        "encode_ifreq": {
            "name": "encode_ifreq",
            "location": 24,
            "return": [
                "bytes"
            ],
            "arguments": {
                "name": [],
                "mode": []
            }
        },
        "decode_ifreq": {
            "name": "decode_ifreq",
            "location": 36,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "raw": []
            }
        }
    },
    "tcpy-master/tcpy/tests/arp_test.py": {
        "test_arping": {
            "name": "test_arping",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tcpy-master/tcpy/tests/icmp_test.py": {
        "test_arping": {
            "name": "test_arping",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tcpy-master/tcpy/tests/ip_test.py": {
        "test_ip_checksum": {
            "name": "test_ip_checksum",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tcpy-master/tcpy/tests/tcp_test.py": {
        "test_tcp_handshake": {
            "name": "test_tcp_handshake",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_decode_encode_tcp_hdr": {
            "name": "test_decode_encode_tcp_hdr",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_tcp_checksum": {
            "name": "test_tcp_checksum",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tcpy-master/tcpy/tests/utils.py": {
        "setup_virt_interf": {
            "name": "setup_virt_interf",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_cmd_with_stack": {
            "name": "run_cmd_with_stack",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "cmd": []
            }
        }
    },
    "tcpy-master/tcpy/tests/__init__.py": {}
}
{
    "telepresence-release-v1/setup.py": {},
    "telepresence-release-v1/versioneer.py": {
        "get_root": {
            "name": "get_root",
            "location": 296,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_config_from_root": {
            "name": "get_config_from_root",
            "location": 335,
            "return": [
                "VersioneerConfig"
            ],
            "arguments": {
                "root": []
            }
        },
        "register_vcs_handler": {
            "name": "register_vcs_handler",
            "location": 373,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "vcs": [],
                "method": []
            }
        },
        "run_command": {
            "name": "run_command",
            "location": 384,
            "return": [
                "Tuple[(Optional[str], Optional[int])]"
            ],
            "arguments": {
                "commands": [],
                "args": [],
                "cwd": [],
                "verbose": [],
                "hide_stderr": [],
                "env": []
            }
        },
        "git_get_keywords": {
            "name": "git_get_keywords",
            "location": 945,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "versionfile_abs": []
            }
        },
        "git_versions_from_keywords": {
            "name": "git_versions_from_keywords",
            "location": 974,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "keywords": [],
                "tag_prefix": [],
                "verbose": []
            }
        },
        "git_pieces_from_vcs": {
            "name": "git_pieces_from_vcs",
            "location": 1029,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "tag_prefix": [],
                "root": [],
                "verbose": [],
                "run_command": []
            }
        },
        "do_vcs_install": {
            "name": "do_vcs_install",
            "location": 1120,
            "return": [
                "None"
            ],
            "arguments": {
                "manifest_in": [],
                "versionfile_source": [],
                "ipy": []
            }
        },
        "versions_from_parentdir": {
            "name": "versions_from_parentdir",
            "location": 1158,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "parentdir_prefix": [],
                "root": [],
                "verbose": []
            }
        },
        "versions_from_file": {
            "name": "versions_from_file",
            "location": 1201,
            "return": [
                "Any"
            ],
            "arguments": {
                "filename": []
            }
        },
        "write_to_version_file": {
            "name": "write_to_version_file",
            "location": 1218,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [],
                "versions": []
            }
        },
        "plus_or_dot": {
            "name": "plus_or_dot",
            "location": 1229,
            "return": [
                "str"
            ],
            "arguments": {
                "pieces": []
            }
        },
        "render_pep440": {
            "name": "render_pep440",
            "location": 1236,
            "return": [
                "Any"
            ],
            "arguments": {
                "pieces": []
            }
        },
        "render_pep440_pre": {
            "name": "render_pep440_pre",
            "location": 1261,
            "return": [
                "Any"
            ],
            "arguments": {
                "pieces": []
            }
        },
        "render_pep440_post": {
            "name": "render_pep440_post",
            "location": 1277,
            "return": [
                "Any"
            ],
            "arguments": {
                "pieces": []
            }
        },
        "render_pep440_old": {
            "name": "render_pep440_old",
            "location": 1304,
            "return": [
                "Any"
            ],
            "arguments": {
                "pieces": []
            }
        },
        "render_git_describe": {
            "name": "render_git_describe",
            "location": 1326,
            "return": [
                "Any"
            ],
            "arguments": {
                "pieces": []
            }
        },
        "render_git_describe_long": {
            "name": "render_git_describe_long",
            "location": 1346,
            "return": [
                "Any"
            ],
            "arguments": {
                "pieces": []
            }
        },
        "render": {
            "name": "render",
            "location": 1366,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "pieces": [],
                "style": []
            }
        },
        "get_versions": {
            "name": "get_versions",
            "location": 1402,
            "return": [
                "Any"
            ],
            "arguments": {
                "verbose": []
            }
        },
        "get_version": {
            "name": "get_version",
            "location": 1478,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "get_cmdclass": {
            "name": "get_cmdclass",
            "location": 1483,
            "return": [
                "Dict[(str, type)]"
            ],
            "arguments": {}
        },
        "do_setup": {
            "name": "do_setup",
            "location": 1697,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "scan_setup_py": {
            "name": "scan_setup_py",
            "location": 1779,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "get_config_from_root.get": {
            "name": "get",
            "location": 347,
            "return": [],
            "arguments": {
                "parser": [],
                "name": []
            }
        },
        "register_vcs_handler.decorate": {
            "name": "decorate",
            "location": 375,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "get_cmdclass.cmd_version.initialize_options": {
            "name": "initialize_options",
            "location": 1510,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_version.finalize_options": {
            "name": "finalize_options",
            "location": 1513,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_version.run": {
            "name": "run",
            "location": 1516,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_build_py.run": {
            "name": "run",
            "location": 1548,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_sdist.run": {
            "name": "run",
            "location": 1629,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_sdist.make_release_tree": {
            "name": "make_release_tree",
            "location": 1637,
            "return": [],
            "arguments": {
                "self": [],
                "base_dir": [],
                "files": []
            }
        },
        "get_cmdclass.cmd_build_exe.run": {
            "name": "run",
            "location": 1572,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "get_cmdclass.cmd_py2exe.run": {
            "name": "run",
            "location": 1601,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "telepresence-release-v1/ci/clean-cluster.py": {
        "get_now": {
            "name": "get_now",
            "location": 14,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {}
        },
        "parse_k8s_timestamp": {
            "name": "parse_k8s_timestamp",
            "location": 19,
            "return": [
                "_datetime.datetime"
            ],
            "arguments": {
                "timestamp": [
                    "str"
                ]
            }
        },
        "get_kubectl_json": {
            "name": "get_kubectl_json",
            "location": 26,
            "return": [
                "dict"
            ],
            "arguments": {
                "cmd": [
                    "List[str]"
                ]
            }
        },
        "get_resource_names": {
            "name": "get_resource_names",
            "location": 41,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "kinds": [
                    "List[str]"
                ],
                "prefix": [
                    "str"
                ],
                "min_age": [
                    "_datetime.timedelta"
                ]
            }
        },
        "seconds": {
            "name": "seconds",
            "location": 66,
            "return": [
                "_datetime.timedelta"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "telepresence-release-v1/docs/build-website.py": {
        "spew": {
            "name": "spew",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "telepresence-release-v1/k8s-proxy/forwarder.py": {
        "_get_env_namespace": {
            "name": "_get_env_namespace",
            "location": 42,
            "return": [
                "Optional[str]"
            ],
            "arguments": {}
        },
        "_get_sa_namespace": {
            "name": "_get_sa_namespace",
            "location": 51,
            "return": [
                "Optional[str]"
            ],
            "arguments": {}
        },
        "_guess_namespace": {
            "name": "_guess_namespace",
            "location": 61,
            "return": [
                "Optional[str]"
            ],
            "arguments": {}
        },
        "listen": {
            "name": "listen",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "client": []
            }
        },
        "main": {
            "name": "main",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "telepresence-release-v1/k8s-proxy/periodic.py": {
        "setup": {
            "name": "setup",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "reactor": []
            }
        },
        "Poll.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reactor": []
            }
        },
        "Poll.periodic": {
            "name": "periodic",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Poll.success": {
            "name": "success",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "Poll.failure": {
            "name": "failure",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "failure": []
            }
        }
    },
    "telepresence-release-v1/k8s-proxy/podinfo.py": {
        "get_mount_points": {
            "name": "get_mount_points",
            "location": 34,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "telepresence-release-v1/k8s-proxy/resolver.py": {
        "insort": {
            "name": "insort",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "target_list": [],
                "new_element": [],
                "key": []
            }
        },
        "resolve": {
            "name": "resolve",
            "location": 48,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "hostname": [
                    "str"
                ]
            }
        },
        "get_resolv_conf_namservers": {
            "name": "get_resolv_conf_namservers",
            "location": 54,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "LocalResolver.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "telepresence_nameserver": [],
                "namespace": [],
                "telepresence_local_names": []
            }
        },
        "LocalResolver._got_ips": {
            "name": "_got_ips",
            "location": 114,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "bytes"
                ],
                "ips": [
                    "List[str]"
                ],
                "record_type": [
                    "Callable"
                ]
            }
        },
        "LocalResolver._got_error": {
            "name": "_got_error",
            "location": 128,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "failure": []
            }
        },
        "LocalResolver._no_loop_kube_query": {
            "name": "_no_loop_kube_query",
            "location": 133,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "query": [],
                "timeout": [
                    "float"
                ],
                "real_name": [
                    "bytes"
                ]
            }
        },
        "LocalResolver._identify_sanity_check": {
            "name": "_identify_sanity_check",
            "location": 179,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "real_name": []
            }
        },
        "LocalResolver._identify_suffix_probe": {
            "name": "_identify_suffix_probe",
            "location": 187,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "real_name": [],
                "parts": []
            }
        },
        "LocalResolver._strip_search_suffix": {
            "name": "_strip_search_suffix",
            "location": 199,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "parts": []
            }
        },
        "LocalResolver._handle_search_suffix": {
            "name": "_handle_search_suffix",
            "location": 205,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "query": [],
                "parts": [],
                "timeout": []
            }
        },
        "LocalResolver.query": {
            "name": "query",
            "location": 229,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "query": [],
                "timeout": [],
                "real_name": [
                    "Optional[bytes]"
                ]
            }
        },
        "LocalResolver._no_loop_kube_query.fallback": {
            "name": "fallback",
            "location": 155,
            "return": [],
            "arguments": {
                "err": []
            }
        },
        "LocalResolver._no_loop_kube_query.fix_names": {
            "name": "fix_names",
            "location": 162,
            "return": [],
            "arguments": {
                "result": []
            }
        },
        "LocalResolver._handle_search_suffix.failed": {
            "name": "failed",
            "location": 215,
            "return": [],
            "arguments": {
                "f": []
            }
        }
    },
    "telepresence-release-v1/k8s-proxy/socks.py": {
        "reverse_resolve": {
            "name": "reverse_resolve",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "SOCKSv5Outgoing.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "socks": []
            }
        },
        "SOCKSv5Outgoing.connectionMade": {
            "name": "connectionMade",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SOCKSv5Outgoing.connectionLost": {
            "name": "connectionLost",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": []
            }
        },
        "SOCKSv5Outgoing.dataReceived": {
            "name": "dataReceived",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "SOCKSv5Outgoing.write": {
            "name": "write",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "SOCKSv5.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reactor": [],
                "reverse": []
            }
        },
        "SOCKSv5.connectionMade": {
            "name": "connectionMade",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SOCKSv5.dataReceived": {
            "name": "dataReceived",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "SOCKSv5.getInitialState": {
            "name": "getInitialState",
            "location": 106,
            "return": [
                "Optional[Tuple[(Callable, int)]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SOCKSv5._parse_handshake_start": {
            "name": "_parse_handshake_start",
            "location": 110,
            "return": [
                "Optional[Tuple[(Callable, int)]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "SOCKSv5._parse_handshake_auth": {
            "name": "_parse_handshake_auth",
            "location": 116,
            "return": [
                "Optional[Tuple[(Callable, int)]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "SOCKSv5._parse_request_start": {
            "name": "_parse_request_start",
            "location": 122,
            "return": [
                "Optional[Tuple[(Callable, int)]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "SOCKSv5._parse_request_ipv4": {
            "name": "_parse_request_ipv4",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "SOCKSv5._parse_request_domainname_start": {
            "name": "_parse_request_domainname_start",
            "location": 154,
            "return": [
                "Optional[Tuple[(Callable, int)]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "SOCKSv5._parse_request_domainname": {
            "name": "_parse_request_domainname",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes"
                ]
            }
        },
        "SOCKSv5._handle_error": {
            "name": "_handle_error",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "failure": []
            }
        },
        "SOCKSv5._write_response": {
            "name": "_write_response",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "int"
                ],
                "host": [
                    "str"
                ],
                "port": [
                    "int"
                ]
            }
        },
        "SOCKSv5._done_parsing": {
            "name": "_done_parsing",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ],
                "port": [
                    "int"
                ]
            }
        },
        "SOCKSv5.connectionLost": {
            "name": "connectionLost",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": []
            }
        },
        "SOCKSv5.connectClass": {
            "name": "connectClass",
            "location": 234,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str"
                ],
                "port": [
                    "int"
                ],
                "klass": [
                    "type"
                ]
            }
        },
        "SOCKSv5.write": {
            "name": "write",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "SOCKSv5Factory.buildProtocol": {
            "name": "buildProtocol",
            "location": 253,
            "return": [
                "SOCKSv5"
            ],
            "arguments": {
                "self": [],
                "addr": []
            }
        },
        "SOCKSv5._done_parsing.write_response": {
            "name": "write_response",
            "location": 194,
            "return": [],
            "arguments": {
                "addr": []
            }
        },
        "SOCKSv5._done_parsing.write_error": {
            "name": "write_error",
            "location": 198,
            "return": [],
            "arguments": {
                "e": []
            }
        },
        "SOCKSv5._done_parsing.squelch_error": {
            "name": "squelch_error",
            "location": 208,
            "return": [],
            "arguments": {
                "e": []
            }
        },
        "SOCKSv5._done_parsing.write_domain": {
            "name": "write_domain",
            "location": 214,
            "return": [],
            "arguments": {
                "name": []
            }
        }
    },
    "telepresence-release-v1/k8s-proxy/test_forwarder.py": {
        "resolver": {
            "name": "resolver",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "test_infer_search_domains": {
            "name": "test_infer_search_domains",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "resolver": []
            }
        },
        "labels": {
            "name": "labels",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "test_prefer_longest_suffix": {
            "name": "test_prefer_longest_suffix",
            "location": 77,
            "return": [],
            "arguments": {
                "first": [],
                "second": [],
                "third": []
            }
        },
        "test_insort": {
            "name": "test_insort",
            "location": 116,
            "return": [],
            "arguments": {
                "values": []
            }
        }
    },
    "telepresence-release-v1/k8s-proxy/test_resolver.py": {
        "resolver": {
            "name": "resolver",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "TestLocalResolver.test_query_service": {
            "name": "test_query_service",
            "location": 17,
            "return": [],
            "arguments": {
                "client_mock": [],
                "resolver": []
            }
        },
        "TestLocalResolver.test_query_service_ns": {
            "name": "test_query_service_ns",
            "location": 30,
            "return": [],
            "arguments": {
                "client_mock": [],
                "resolver": []
            }
        },
        "TestLocalResolver.test_query_svc": {
            "name": "test_query_svc",
            "location": 43,
            "return": [],
            "arguments": {
                "client_mock": [],
                "resolver": []
            }
        },
        "TestLocalResolver.test_query_local": {
            "name": "test_query_local",
            "location": 56,
            "return": [],
            "arguments": {
                "client_mock": [],
                "resolver": []
            }
        }
    },
    "telepresence-release-v1/k8s-proxy/test_socks.py": {
        "StringTCPTransport.getPeer": {
            "name": "getPeer",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringTCPTransport.getHost": {
            "name": "getHost",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringTCPTransport.loseConnection": {
            "name": "loseConnection",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeResolverReactor.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "names": []
            }
        },
        "FakeResolverReactor.resolve": {
            "name": "resolve",
            "location": 56,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "hostname": []
            }
        },
        "SOCKSv5Driver.connectClass": {
            "name": "connectClass",
            "location": 77,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "host": [],
                "port": [],
                "klass": []
            }
        },
        "SOCKSv5Driver.listenClass": {
            "name": "listenClass",
            "location": 91,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "port": [],
                "klass": []
            }
        },
        "ReverseResolver.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dns": []
            }
        },
        "ReverseResolver.reverse_resolve": {
            "name": "reverse_resolve",
            "location": 104,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "target_ip": []
            }
        },
        "ReverseResolveTestsMixin.test_fail": {
            "name": "test_fail",
            "location": 112,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReverseResolveTestsMixin.test_succeed": {
            "name": "test_succeed",
            "location": 117,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadedReverseResolverTest.test_fail": {
            "name": "test_fail",
            "location": 126,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectTests.setUp": {
            "name": "setUp",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectTests.deliver_data": {
            "name": "deliver_data",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "protocol": [],
                "data": []
            }
        },
        "ConnectTests.assert_handshake": {
            "name": "assert_handshake",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectTests.assert_connect": {
            "name": "assert_connect",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connect_address": [],
                "connect_port": [],
                "bound_address": [],
                "bound_port": []
            }
        },
        "ConnectTests.assert_dataflow": {
            "name": "assert_dataflow",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectTests.assert_resolve": {
            "name": "assert_resolve",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "domainname": [],
                "address": []
            }
        },
        "ConnectTests.test_ipv4Connect": {
            "name": "test_ipv4Connect",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectTests.test_domainnameConnect": {
            "name": "test_domainnameConnect",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectTests.test_socks5SuccessfulResolution": {
            "name": "test_socks5SuccessfulResolution",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectTests.test_socks5TorStyleFailedResolution": {
            "name": "test_socks5TorStyleFailedResolution",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectTests.assert_resolve_pointer": {
            "name": "assert_resolve_pointer",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "address": [],
                "resolved_name": []
            }
        },
        "ConnectTests.test_socks5TorStyleSuccessfulResolvePointer": {
            "name": "test_socks5TorStyleSuccessfulResolvePointer",
            "location": 414,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectTests.test_socks5TorStyleFailedResolvePointer": {
            "name": "test_socks5TorStyleFailedResolvePointer",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectTests.test_eofRemote": {
            "name": "test_eofRemote",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectTests.test_eofLocal": {
            "name": "test_eofLocal",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SOCKSv5Driver.connectClass.got_ip": {
            "name": "got_ip",
            "location": 79,
            "return": [],
            "arguments": {
                "ip": []
            }
        }
    },
    "telepresence-release-v1/local-docker/entrypoint.py": {
        "main": {
            "name": "main",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "proxy": {
            "name": "proxy",
            "location": 71,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "wait": {
            "name": "wait",
            "location": 116,
            "return": [],
            "arguments": {}
        }
    },
    "telepresence-release-v1/packaging/build-sshuttle.py": {
        "build_sshuttle": {
            "name": "build_sshuttle",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "output": [
                    "pathlib.Path"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "telepresence-release-v1/packaging/build-telepresence.py": {
        "make_compressed_zipapp": {
            "name": "make_compressed_zipapp",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "pathlib.Path"
                ],
                "output": [
                    "pathlib.Path"
                ],
                "main_function": [
                    "str"
                ]
            }
        },
        "build_telepresence": {
            "name": "build_telepresence",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "project": [
                    "pathlib.Path"
                ],
                "output": [
                    "pathlib.Path"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "telepresence-release-v1/packaging/container.py": {
        "str_command": {
            "name": "str_command",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [
                    "List[str]"
                ]
            }
        },
        "Container.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "str"
                ],
                "verbose": []
            }
        },
        "Container.__del__": {
            "name": "__del__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Container._run": {
            "name": "_run",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Container.execute": {
            "name": "execute",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "args": [
                    "List[str]"
                ],
                "cwd": [
                    "Optional[str]"
                ]
            }
        },
        "Container.execute_sh": {
            "name": "execute_sh",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str"
                ],
                "cwd": [
                    "Optional[str]"
                ]
            }
        },
        "Container.copy_from": {
            "name": "copy_from",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "target": [
                    "str"
                ]
            }
        },
        "Container.copy_to": {
            "name": "copy_to",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str"
                ],
                "target": [
                    "str"
                ]
            }
        }
    },
    "telepresence-release-v1/packaging/deploy.py": {
        "get_version": {
            "name": "get_version",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "emit_release_info": {
            "name": "emit_release_info",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "version": [],
                "notices": []
            }
        },
        "emit_announcement_gitter": {
            "name": "emit_announcement_gitter",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "version": []
            }
        },
        "emit_announcement": {
            "name": "emit_announcement",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "version": []
            }
        },
        "emit_machinery": {
            "name": "emit_machinery",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "build_executables": {
            "name": "build_executables",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "make_archive": {
            "name": "make_archive",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "version": []
            }
        },
        "main": {
            "name": "main",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "telepresence-release-v1/packaging/distros.py": {},
    "telepresence-release-v1/packaging/package_linux.py": {
        "show_banner": {
            "name": "show_banner",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [],
                "char": [],
                "width": []
            }
        },
        "prep_to_build": {
            "name": "prep_to_build",
            "location": 45,
            "return": [
                "container.Container"
            ],
            "arguments": {}
        },
        "build_package": {
            "name": "build_package",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "con": [
                    "container.Container"
                ],
                "name": [
                    "str"
                ],
                "version": [
                    "str"
                ],
                "dependencies": [
                    "List[str]"
                ],
                "package_type": [
                    "str"
                ]
            }
        },
        "test_package": {
            "name": "test_package",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "image": [
                    "str"
                ],
                "package": [
                    "pathlib.Path"
                ],
                "install_cmd": [
                    "str"
                ]
            }
        },
        "get_upload_commands": {
            "name": "get_upload_commands",
            "location": 106,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "system": [],
                "release": [],
                "package": []
            }
        },
        "main": {
            "name": "main",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "version": []
            }
        }
    },
    "telepresence-release-v1/telepresence/cli.py": {
        "safe_output": {
            "name": "safe_output",
            "location": 74,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "report_crash": {
            "name": "report_crash",
            "location": 86,
            "return": [],
            "arguments": {
                "error": [],
                "log_path": [],
                "logs": []
            }
        },
        "crash_reporting": {
            "name": "crash_reporting",
            "location": 130,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "path_or_bool": {
            "name": "path_or_bool",
            "location": 160,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "absolute_path": {
            "name": "absolute_path",
            "location": 175,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "parse_args": {
            "name": "parse_args",
            "location": 186,
            "return": [],
            "arguments": {
                "in_args": []
            }
        },
        "PortMapping.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PortMapping.parse": {
            "name": "parse",
            "location": 36,
            "return": [],
            "arguments": {
                "cls": [],
                "port_strings": []
            }
        },
        "PortMapping.merge_automatic_ports": {
            "name": "merge_automatic_ports",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "ports": []
            }
        },
        "PortMapping.remote": {
            "name": "remote",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PortMapping.local_to_remote": {
            "name": "local_to_remote",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PortMapping.has_privileged_ports": {
            "name": "has_privileged_ports",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "telepresence-release-v1/telepresence/main.py": {
        "main": {
            "name": "main",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "run_telepresence": {
            "name": "run_telepresence",
            "location": 88,
            "return": [],
            "arguments": {}
        }
    },
    "telepresence-release-v1/telepresence/mount.py": {
        "mount_remote_volumes": {
            "name": "mount_remote_volumes",
            "location": 22,
            "return": [],
            "arguments": {
                "runner": [],
                "ssh": [],
                "allow_all_users": [],
                "mount_dir": []
            }
        },
        "mount_remote": {
            "name": "mount_remote",
            "location": 72,
            "return": [],
            "arguments": {
                "runner": [],
                "mount": [],
                "ssh": [],
                "allow_all_users": [],
                "env": []
            }
        },
        "mount_remote_volumes_docker": {
            "name": "mount_remote_volumes_docker",
            "location": 101,
            "return": [],
            "arguments": {
                "runner": [],
                "ssh": []
            }
        },
        "mount_remote_docker": {
            "name": "mount_remote_docker",
            "location": 151,
            "return": [],
            "arguments": {
                "runner": [],
                "ssh": [],
                "docker_mount": [],
                "env": []
            }
        },
        "setup": {
            "name": "setup",
            "location": 166,
            "return": [],
            "arguments": {
                "runner": [],
                "args": []
            }
        },
        "mount_remote_volumes.no_cleanup": {
            "name": "no_cleanup",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "mount_remote_volumes.cleanup": {
            "name": "cleanup",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "mount_remote_volumes_docker.no_cleanup": {
            "name": "no_cleanup",
            "location": 137,
            "return": [],
            "arguments": {}
        },
        "mount_remote_volumes_docker.cleanup": {
            "name": "cleanup",
            "location": 140,
            "return": [],
            "arguments": {}
        },
        "setup.do_mount_remote": {
            "name": "do_mount_remote",
            "location": 210,
            "return": [],
            "arguments": {
                "runner_": [],
                "env": [],
                "ssh": []
            }
        }
    },
    "telepresence-release-v1/telepresence/remote_env.py": {
        "get_remote_env": {
            "name": "get_remote_env",
            "location": 23,
            "return": [],
            "arguments": {
                "runner": [],
                "ssh": [],
                "remote_info": []
            }
        },
        "_serialize_as_env_file": {
            "name": "_serialize_as_env_file",
            "location": 59,
            "return": [],
            "arguments": {
                "env": []
            }
        },
        "write_env_file": {
            "name": "write_env_file",
            "location": 82,
            "return": [],
            "arguments": {
                "runner": [],
                "env": [],
                "env_file": []
            }
        },
        "write_env_json": {
            "name": "write_env_json",
            "location": 98,
            "return": [],
            "arguments": {
                "runner": [],
                "env": [],
                "env_json": []
            }
        },
        "setup": {
            "name": "setup",
            "location": 106,
            "return": [],
            "arguments": {
                "_": [],
                "args": []
            }
        },
        "setup.write_env_files": {
            "name": "write_env_files",
            "location": 107,
            "return": [],
            "arguments": {
                "runner_": [],
                "env": []
            }
        }
    },
    "telepresence-release-v1/telepresence/startup.py": {
        "kubectl_or_oc": {
            "name": "kubectl_or_oc",
            "location": 28,
            "return": [],
            "arguments": {
                "server": []
            }
        },
        "_parse_version_component": {
            "name": "_parse_version_component",
            "location": 64,
            "return": [],
            "arguments": {
                "comp": []
            }
        },
        "_parse_version": {
            "name": "_parse_version",
            "location": 74,
            "return": [],
            "arguments": {
                "version": []
            }
        },
        "set_kube_command": {
            "name": "set_kube_command",
            "location": 81,
            "return": [],
            "arguments": {
                "runner": [],
                "args": []
            }
        },
        "_check_if_in_local_vm": {
            "name": "_check_if_in_local_vm",
            "location": 212,
            "return": [],
            "arguments": {
                "runner": [],
                "cluster": [],
                "context": [],
                "command": [],
                "server": []
            }
        },
        "_check_versions": {
            "name": "_check_versions",
            "location": 245,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "final_checks": {
            "name": "final_checks",
            "location": 281,
            "return": [],
            "arguments": {
                "runner": [],
                "args": []
            }
        }
    },
    "telepresence-release-v1/telepresence/usage_tracking.py": {
        "get_numeric_version": {
            "name": "get_numeric_version",
            "location": 113,
            "return": [],
            "arguments": {
                "version_str": []
            }
        },
        "call_scout": {
            "name": "call_scout",
            "location": 127,
            "return": [],
            "arguments": {
                "runner": [],
                "args": []
            }
        },
        "Scout.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "app": [],
                "version": [],
                "install_id": []
            }
        },
        "Scout.report": {
            "name": "report",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scout.create_user_agent": {
            "name": "create_user_agent",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Scout.__not_blank": {
            "name": "__not_blank",
            "location": 91,
            "return": [],
            "arguments": {
                "name": [],
                "value": []
            }
        },
        "Scout.__merge_dicts": {
            "name": "__merge_dicts",
            "location": 100,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "Scout.__is_disabled": {
            "name": "__is_disabled",
            "location": 106,
            "return": [],
            "arguments": {}
        },
        "call_scout.ver_notice": {
            "name": "ver_notice",
            "location": 166,
            "return": [],
            "arguments": {}
        }
    },
    "telepresence-release-v1/telepresence/utilities.py": {
        "dumb_print": {
            "name": "dumb_print",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str"
                ]
            }
        },
        "random_name": {
            "name": "random_name",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "find_free_port": {
            "name": "find_free_port",
            "location": 33,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "get_resolv_conf_nameservers": {
            "name": "get_resolv_conf_nameservers",
            "location": 49,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "get_alternate_nameserver": {
            "name": "get_alternate_nameserver",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "str_command": {
            "name": "str_command",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "args": [
                    "Iterable[str]"
                ]
            }
        },
        "kill_process": {
            "name": "kill_process",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "process": [
                    "subprocess.Popen[str]"
                ]
            }
        }
    },
    "telepresence-release-v1/telepresence/_version.py": {
        "get_keywords": {
            "name": "get_keywords",
            "location": 39,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {}
        },
        "get_config": {
            "name": "get_config",
            "location": 56,
            "return": [
                "VersioneerConfig"
            ],
            "arguments": {}
        },
        "register_vcs_handler": {
            "name": "register_vcs_handler",
            "location": 79,
            "return": [
                "Callable[([typing.Any], typing.Any)]"
            ],
            "arguments": {
                "vcs": [
                    "typing.Any"
                ],
                "method": [
                    "typing.Any"
                ]
            }
        },
        "run_command": {
            "name": "run_command",
            "location": 91,
            "return": [
                "Tuple[(typing.Any, typing.Any)]"
            ],
            "arguments": {
                "commands": [
                    "typing.Any"
                ],
                "args": [
                    "typing.Any"
                ],
                "cwd": [
                    "typing.Any"
                ],
                "verbose": [
                    "typing.Any"
                ],
                "hide_stderr": [
                    "typing.Any"
                ],
                "env": [
                    "typing.Any"
                ]
            }
        },
        "versions_from_parentdir": {
            "name": "versions_from_parentdir",
            "location": 132,
            "return": [
                "Dict[(str, typing.Any)]"
            ],
            "arguments": {
                "parentdir_prefix": [
                    "typing.Any"
                ],
                "root": [
                    "typing.Any"
                ],
                "verbose": [
                    "typing.Any"
                ]
            }
        },
        "git_get_keywords": {
            "name": "git_get_keywords",
            "location": 164,
            "return": [
                "Dict[(str, typing.Any)]"
            ],
            "arguments": {
                "versionfile_abs": [
                    "typing.Any"
                ]
            }
        },
        "git_versions_from_keywords": {
            "name": "git_versions_from_keywords",
            "location": 193,
            "return": [
                "Dict[(str, typing.Any)]"
            ],
            "arguments": {
                "keywords": [
                    "typing.Any"
                ],
                "tag_prefix": [
                    "typing.Any"
                ],
                "verbose": [
                    "typing.Any"
                ]
            }
        },
        "git_pieces_from_vcs": {
            "name": "git_pieces_from_vcs",
            "location": 255,
            "return": [
                "Dict[(str, typing.Any)]"
            ],
            "arguments": {
                "tag_prefix": [
                    "typing.Any"
                ],
                "root": [
                    "typing.Any"
                ],
                "verbose": [
                    "typing.Any"
                ],
                "run_command": [
                    "typing.Any"
                ]
            }
        },
        "plus_or_dot": {
            "name": "plus_or_dot",
            "location": 354,
            "return": [
                "str"
            ],
            "arguments": {
                "pieces": [
                    "typing.Any"
                ]
            }
        },
        "render_pep440": {
            "name": "render_pep440",
            "location": 361,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "pieces": [
                    "typing.Any"
                ]
            }
        },
        "render_pep440_pre": {
            "name": "render_pep440_pre",
            "location": 385,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "pieces": [
                    "typing.Any"
                ]
            }
        },
        "render_pep440_post": {
            "name": "render_pep440_post",
            "location": 401,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "pieces": [
                    "typing.Any"
                ]
            }
        },
        "render_pep440_old": {
            "name": "render_pep440_old",
            "location": 428,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "pieces": [
                    "typing.Any"
                ]
            }
        },
        "render_git_describe": {
            "name": "render_git_describe",
            "location": 450,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "pieces": [
                    "typing.Any"
                ]
            }
        },
        "render_git_describe_long": {
            "name": "render_git_describe_long",
            "location": 470,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "pieces": [
                    "typing.Any"
                ]
            }
        },
        "render": {
            "name": "render",
            "location": 490,
            "return": [
                "Dict[(str, typing.Any)]"
            ],
            "arguments": {
                "pieces": [
                    "typing.Any"
                ],
                "style": [
                    "typing.Any"
                ]
            }
        },
        "get_versions": {
            "name": "get_versions",
            "location": 528,
            "return": [
                "Dict[(str, typing.Any)]"
            ],
            "arguments": {}
        },
        "register_vcs_handler.decorate": {
            "name": "decorate",
            "location": 81,
            "return": [],
            "arguments": {
                "f": []
            }
        }
    },
    "telepresence-release-v1/telepresence/__init__.py": {},
    "telepresence-release-v1/telepresence/connect/connect.py": {
        "connect": {
            "name": "connect",
            "location": 28,
            "return": [],
            "arguments": {
                "runner": [],
                "remote_info": [],
                "is_container_mode": [],
                "expose": [],
                "to_pod": [],
                "from_pod": []
            }
        },
        "setup": {
            "name": "setup",
            "location": 103,
            "return": [],
            "arguments": {
                "runner": [],
                "args": []
            }
        },
        "setup.do_connect": {
            "name": "do_connect",
            "location": 116,
            "return": [],
            "arguments": {
                "runner_": [],
                "remote_info": []
            }
        }
    },
    "telepresence-release-v1/telepresence/connect/expose.py": {
        "expose_local_services": {
            "name": "expose_local_services",
            "location": 22,
            "return": [],
            "arguments": {
                "runner": [],
                "ssh": [],
                "exp_port_numbers": [],
                "to_pod": [],
                "from_pod": [],
                "show_only": []
            }
        }
    },
    "telepresence-release-v1/telepresence/connect/ssh.py": {
        "SSH.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "runner": [],
                "port": [],
                "user_at_host": []
            }
        },
        "SSH.command": {
            "name": "command",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "additional_args": [],
                "prepend_arguments": []
            }
        },
        "SSH.bg_command": {
            "name": "bg_command",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "additional_args": []
            }
        },
        "SSH.wait": {
            "name": "wait",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "telepresence-release-v1/telepresence/connect/__init__.py": {},
    "telepresence-release-v1/telepresence/outbound/cidr.py": {
        "_is_subnet_of": {
            "name": "_is_subnet_of",
            "location": 26,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "covering_cidrs": {
            "name": "covering_cidrs",
            "location": 39,
            "return": [],
            "arguments": {
                "ips": []
            }
        },
        "get_proxy_cidrs": {
            "name": "get_proxy_cidrs",
            "location": 96,
            "return": [],
            "arguments": {
                "runner": [],
                "remote_info": [],
                "hosts_or_ips": []
            }
        },
        "k8s_resolve": {
            "name": "k8s_resolve",
            "location": 129,
            "return": [],
            "arguments": {
                "runner": [],
                "remote_info": [],
                "hosts_or_ips": []
            }
        },
        "podCIDRs": {
            "name": "podCIDRs",
            "location": 189,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "serviceCIDR": {
            "name": "serviceCIDR",
            "location": 233,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "cluster_serviceCIDR": {
            "name": "cluster_serviceCIDR",
            "location": 243,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "guess_serviceCIDR": {
            "name": "guess_serviceCIDR",
            "location": 269,
            "return": [],
            "arguments": {
                "runner": []
            }
        },
        "covering_cidrs.collapse": {
            "name": "collapse",
            "location": 47,
            "return": [],
            "arguments": {
                "ns": []
            }
        },
        "guess_serviceCIDR.get_service_ips": {
            "name": "get_service_ips",
            "location": 275,
            "return": [],
            "arguments": {}
        }
    },
    "telepresence-release-v1/telepresence/outbound/container.py": {
        "make_docker_kill": {
            "name": "make_docker_kill",
            "location": 30,
            "return": [],
            "arguments": {
                "runner": [],
                "name": []
            }
        },
        "parse_docker_args": {
            "name": "parse_docker_args",
            "location": 38,
            "return": [],
            "arguments": {
                "docker_run": []
            }
        },
        "parse_resolv_conf": {
            "name": "parse_resolv_conf",
            "location": 47,
            "return": [],
            "arguments": {
                "contents": []
            }
        },
        "parse_hosts_aliases": {
            "name": "parse_hosts_aliases",
            "location": 74,
            "return": [],
            "arguments": {
                "contents": []
            }
        },
        "run_docker_command": {
            "name": "run_docker_command",
            "location": 105,
            "return": [],
            "arguments": {
                "runner": [],
                "remote_info": [],
                "docker_run": [],
                "expose": [],
                "to_pod": [],
                "from_pod": [],
                "container_to_host": [],
                "remote_env": [],
                "ssh": [],
                "mount_dir": [],
                "use_docker_mount": [],
                "pod_info": []
            }
        },
        "make_docker_kill.kill": {
            "name": "kill",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "run_docker_command.terminate_if_alive": {
            "name": "terminate_if_alive",
            "location": 260,
            "return": [],
            "arguments": {}
        }
    },
    "telepresence-release-v1/telepresence/outbound/local.py": {
        "set_up_torsocks": {
            "name": "set_up_torsocks",
            "location": 37,
            "return": [],
            "arguments": {
                "runner": [],
                "socks_port": []
            }
        },
        "terminate_local_process": {
            "name": "terminate_local_process",
            "location": 76,
            "return": [],
            "arguments": {
                "runner": [],
                "process": []
            }
        },
        "launch_local": {
            "name": "launch_local",
            "location": 85,
            "return": [],
            "arguments": {
                "runner": [],
                "command": [],
                "env_overrides": [],
                "replace_dns_tools": []
            }
        },
        "launch_inject": {
            "name": "launch_inject",
            "location": 111,
            "return": [],
            "arguments": {
                "runner": [],
                "command": [],
                "socks_port": [],
                "env_overrides": []
            }
        },
        "launch_vpn": {
            "name": "launch_vpn",
            "location": 125,
            "return": [],
            "arguments": {
                "runner": [],
                "remote_info": [],
                "command": [],
                "also_proxy": [],
                "env_overrides": [],
                "ssh": []
            }
        },
        "_flush_dns_cache": {
            "name": "_flush_dns_cache",
            "location": 142,
            "return": [],
            "arguments": {
                "runner": []
            }
        }
    },
    "telepresence-release-v1/telepresence/outbound/setup.py": {
        "check_local_command": {
            "name": "check_local_command",
            "location": 37,
            "return": [],
            "arguments": {
                "runner": [],
                "command": []
            }
        },
        "setup_inject": {
            "name": "setup_inject",
            "location": 42,
            "return": [],
            "arguments": {
                "runner": [],
                "args": []
            }
        },
        "setup_vpn": {
            "name": "setup_vpn",
            "location": 69,
            "return": [],
            "arguments": {
                "runner": [],
                "args": []
            }
        },
        "setup_container": {
            "name": "setup_container",
            "location": 118,
            "return": [],
            "arguments": {
                "runner": [],
                "args": []
            }
        },
        "setup": {
            "name": "setup",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "runner": [],
                "args": []
            }
        },
        "setup_inject.launch": {
            "name": "launch",
            "location": 61,
            "return": [],
            "arguments": {
                "runner_": [],
                "_remote_info": [],
                "env": [],
                "socks_port": [],
                "_ssh": [],
                "_mount_dir": [],
                "_pod_info": []
            }
        },
        "setup_vpn.launch": {
            "name": "launch",
            "location": 108,
            "return": [],
            "arguments": {
                "runner_": [],
                "remote_info": [],
                "env": [],
                "_socks_port": [],
                "ssh": [],
                "_mount_dir": [],
                "_pod_info": []
            }
        },
        "setup_container.launch": {
            "name": "launch",
            "location": 154,
            "return": [],
            "arguments": {
                "runner_": [],
                "remote_info": [],
                "env": [],
                "_socks_port": [],
                "ssh": [],
                "mount_dir": [],
                "pod_info": []
            }
        }
    },
    "telepresence-release-v1/telepresence/outbound/vpn.py": {
        "get_sshuttle_command": {
            "name": "get_sshuttle_command",
            "location": 24,
            "return": [],
            "arguments": {
                "ssh": [],
                "method": []
            }
        },
        "dns_lookup": {
            "name": "dns_lookup",
            "location": 38,
            "return": [],
            "arguments": {
                "runner": [],
                "name": [],
                "timeout": []
            }
        },
        "connect_sshuttle": {
            "name": "connect_sshuttle",
            "location": 58,
            "return": [],
            "arguments": {
                "runner": [],
                "remote_info": [],
                "hosts_or_ips": [],
                "ssh": []
            }
        },
        "log_info_vpn_crash": {
            "name": "log_info_vpn_crash",
            "location": 116,
            "return": [],
            "arguments": {
                "runner": []
            }
        }
    },
    "telepresence-release-v1/telepresence/outbound/workarounds.py": {
        "make_unsupported_tool": {
            "name": "make_unsupported_tool",
            "location": 30,
            "return": [],
            "arguments": {
                "commands": [],
                "destination": []
            }
        },
        "make_sip_workaround_copy": {
            "name": "make_sip_workaround_copy",
            "location": 40,
            "return": [],
            "arguments": {
                "protected": [],
                "destination": []
            }
        },
        "apply_workarounds": {
            "name": "apply_workarounds",
            "location": 61,
            "return": [],
            "arguments": {
                "runner": [],
                "original_path": [],
                "replace_dns_tools": []
            }
        }
    },
    "telepresence-release-v1/telepresence/outbound/__init__.py": {},
    "telepresence-release-v1/telepresence/proxy/deployment.py": {
        "get_image_name": {
            "name": "get_image_name",
            "location": 31,
            "return": [],
            "arguments": {
                "runner": [],
                "expose": []
            }
        },
        "existing_deployment": {
            "name": "existing_deployment",
            "location": 60,
            "return": [],
            "arguments": {
                "runner": [],
                "deployment_arg": [],
                "expose": [],
                "deployment_env": [],
                "service_account": []
            }
        },
        "existing_deployment_openshift": {
            "name": "existing_deployment_openshift",
            "location": 94,
            "return": [],
            "arguments": {
                "runner": [],
                "deployment_arg": [],
                "expose": [],
                "deployment_env": [],
                "service_account": []
            }
        },
        "_set_expose_ports": {
            "name": "_set_expose_ports",
            "location": 128,
            "return": [],
            "arguments": {
                "expose": [],
                "deployment_arg": [],
                "d_json": []
            }
        },
        "_get_deployment_yaml": {
            "name": "_get_deployment_yaml",
            "location": 171,
            "return": [],
            "arguments": {
                "name": [],
                "run_id": [],
                "image_name": [],
                "service_account": [],
                "env": []
            }
        },
        "create_new_deployment": {
            "name": "create_new_deployment",
            "location": 198,
            "return": [],
            "arguments": {
                "runner": [],
                "deployment_arg": [],
                "expose": [],
                "deployment_env": [],
                "service_account": []
            }
        },
        "_split_deployment_container": {
            "name": "_split_deployment_container",
            "location": 274,
            "return": [],
            "arguments": {
                "deployment_arg": []
            }
        },
        "_get_container_name": {
            "name": "_get_container_name",
            "location": 281,
            "return": [],
            "arguments": {
                "container": [],
                "deployment_json": []
            }
        },
        "supplant_deployment": {
            "name": "supplant_deployment",
            "location": 289,
            "return": [],
            "arguments": {
                "runner": [],
                "deployment_arg": [],
                "expose": [],
                "deployment_env": [],
                "service_account": []
            }
        },
        "new_swapped_deployment": {
            "name": "new_swapped_deployment",
            "location": 380,
            "return": [],
            "arguments": {
                "runner": [],
                "old_deployment": [],
                "container_to_update": [],
                "run_id": [],
                "expose": [],
                "service_account": [],
                "deployment_env": []
            }
        },
        "swap_deployment_openshift": {
            "name": "swap_deployment_openshift",
            "location": 467,
            "return": [],
            "arguments": {
                "runner": [],
                "deployment_arg": [],
                "expose": [],
                "deployment_env": [],
                "service_account": []
            }
        },
        "create_new_deployment.remove_existing_deployment": {
            "name": "remove_existing_deployment",
            "location": 215,
            "return": [],
            "arguments": {
                "quiet": []
            }
        },
        "supplant_deployment.resize_original": {
            "name": "resize_original",
            "location": 336,
            "return": [],
            "arguments": {
                "replicas": []
            }
        },
        "supplant_deployment.delete_new_deployment": {
            "name": "delete_new_deployment",
            "location": 345,
            "return": [],
            "arguments": {
                "check": []
            }
        },
        "swap_deployment_openshift.apply_json": {
            "name": "apply_json",
            "location": 510,
            "return": [],
            "arguments": {
                "json_config": []
            }
        }
    },
    "telepresence-release-v1/telepresence/proxy/manifest.py": {
        "make_k8s_list": {
            "name": "make_k8s_list",
            "location": 20,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "items": [
                    "Iterable[Dict[(str, Any)]]"
                ]
            }
        },
        "make_svc_manifest": {
            "name": "make_svc_manifest",
            "location": 28,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "labels": [
                    "Dict[(str, str)]"
                ],
                "selector": [
                    "Dict[(str, str)]"
                ],
                "ports": [
                    "Dict[(int, int)]"
                ]
            }
        },
        "make_pod_manifest": {
            "name": "make_pod_manifest",
            "location": 51,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "pod_metadata": [
                    "Dict[(str, Any)]"
                ],
                "pod_spec": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "make_new_proxy_pod_manifest": {
            "name": "make_new_proxy_pod_manifest",
            "location": 61,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "run_id": [
                    "str"
                ],
                "image_name": [
                    "str"
                ],
                "service_account": [
                    "str"
                ],
                "env": [
                    "Dict[(str, str)]"
                ]
            }
        }
    },
    "telepresence-release-v1/telepresence/proxy/operation.py": {
        "create_with_cleanup": {
            "name": "create_with_cleanup",
            "location": 64,
            "return": [],
            "arguments": {
                "runner": [],
                "manifests": []
            }
        },
        "find_container": {
            "name": "find_container",
            "location": 140,
            "return": [],
            "arguments": {
                "pod_spec": [],
                "container_name": []
            }
        },
        "set_expose_ports": {
            "name": "set_expose_ports",
            "location": 153,
            "return": [],
            "arguments": {
                "expose": [],
                "pod": [],
                "container_name": []
            }
        },
        "ProxyOperation.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "intent": []
            }
        },
        "ProxyOperation.prepare": {
            "name": "prepare",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "_": []
            }
        },
        "ProxyOperation.act": {
            "name": "act",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "_": []
            }
        },
        "create_with_cleanup.clean_up": {
            "name": "clean_up",
            "location": 85,
            "return": [],
            "arguments": {}
        },
        "New.prepare": {
            "name": "prepare",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "runner": []
            }
        },
        "New.act": {
            "name": "act",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "runner": []
            }
        },
        "Swap.prepare": {
            "name": "prepare",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "runner": []
            }
        },
        "Swap.act": {
            "name": "act",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "runner": []
            }
        },
        "Existing.prepare": {
            "name": "prepare",
            "location": 278,
            "return": [],
            "arguments": {
                "self": [],
                "runner": []
            }
        },
        "Existing.act": {
            "name": "act",
            "location": 298,
            "return": [],
            "arguments": {
                "self": [],
                "runner": []
            }
        },
        "Swap.act.resize_original": {
            "name": "resize_original",
            "location": 253,
            "return": [],
            "arguments": {
                "replicas": []
            }
        }
    },
    "telepresence-release-v1/telepresence/proxy/proxy.py": {
        "_dc_exists": {
            "name": "_dc_exists",
            "location": 32,
            "return": [],
            "arguments": {
                "runner": [],
                "name": []
            }
        },
        "setup": {
            "name": "setup",
            "location": 56,
            "return": [],
            "arguments": {
                "runner": [],
                "args": []
            }
        },
        "legacy_setup": {
            "name": "legacy_setup",
            "location": 162,
            "return": [],
            "arguments": {
                "runner": [],
                "args": []
            }
        },
        "legacy_setup.start_proxy": {
            "name": "start_proxy",
            "location": 245,
            "return": [],
            "arguments": {
                "runner_": []
            }
        }
    },
    "telepresence-release-v1/telepresence/proxy/remote.py": {
        "get_deployment": {
            "name": "get_deployment",
            "location": 62,
            "return": [],
            "arguments": {
                "runner": [],
                "name": []
            }
        },
        "wait_for_pod": {
            "name": "wait_for_pod",
            "location": 107,
            "return": [],
            "arguments": {
                "runner": [],
                "remote_info": []
            }
        },
        "get_remote_info": {
            "name": "get_remote_info",
            "location": 145,
            "return": [],
            "arguments": {
                "runner": [],
                "deployment_name": [],
                "unused_deployment_type": [],
                "run_id": []
            }
        },
        "make_remote_info_from_pod": {
            "name": "make_remote_info_from_pod",
            "location": 216,
            "return": [],
            "arguments": {
                "pod": []
            }
        },
        "get_pod_for_deployment": {
            "name": "get_pod_for_deployment",
            "location": 222,
            "return": [],
            "arguments": {
                "runner": [],
                "deployment": []
            }
        },
        "RemoteInfo.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "pod_name": [],
                "pod_spec": []
            }
        },
        "RemoteInfo.remote_telepresence_version": {
            "name": "remote_telepresence_version",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "telepresence-release-v1/telepresence/proxy/__init__.py": {},
    "telepresence-release-v1/telepresence/runner/background.py": {
        "launch_local_server": {
            "name": "launch_local_server",
            "location": 46,
            "return": [],
            "arguments": {
                "runner": [],
                "port": []
            }
        },
        "DumbHandler.do_HEAD": {
            "name": "do_HEAD",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DumbHandler.log_message": {
            "name": "log_message",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "format": []
            }
        }
    },
    "telepresence-release-v1/telepresence/runner/cache.py": {
        "Cache.load": {
            "name": "load",
            "location": 38,
            "return": [
                "_TCache"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCache]"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "Cache.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "values": []
            }
        },
        "Cache.save": {
            "name": "save",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "Cache.__contains__": {
            "name": "__contains__",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Cache.__getitem__": {
            "name": "__getitem__",
            "location": 59,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Cache.__setitem__": {
            "name": "__setitem__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": []
            }
        },
        "Cache.child": {
            "name": "child",
            "location": 65,
            "return": [
                "_TCache"
            ],
            "arguments": {
                "self": [
                    "_TCache"
                ],
                "key": [
                    "str"
                ]
            }
        },
        "Cache.invalidate": {
            "name": "invalidate",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ttl": [
                    "float"
                ]
            }
        },
        "Cache.lookup": {
            "name": "lookup",
            "location": 89,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "function": [
                    "Callable[([], Any)]"
                ]
            }
        },
        "Cache.clear": {
            "name": "clear",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "telepresence-release-v1/telepresence/runner/kube.py": {
        "KubeInfo.__call__": {
            "name": "__call__",
            "location": 34,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "telepresence-release-v1/telepresence/runner/launch.py": {
        "_launch_command": {
            "name": "_launch_command",
            "location": 61,
            "return": [
                "subprocess.Popen[str]"
            ],
            "arguments": {
                "args": [
                    "List[str]"
                ],
                "out_logger": [
                    "_Logger"
                ],
                "err_logger": [
                    "_Logger"
                ],
                "done": [
                    "Optional[Callable[([subprocess.Popen[str]], None)]]"
                ]
            }
        },
        "BackgroundProcessCrash.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "details": [
                    "str"
                ]
            }
        },
        "_Logger.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "write": [
                    "Callable[([str], None)]"
                ],
                "do_log": [
                    "bool"
                ],
                "do_capture": [
                    "bool"
                ],
                "max_capture": [
                    "int"
                ]
            }
        },
        "_Logger.log": {
            "name": "log",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        },
        "_Logger.finish": {
            "name": "finish",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Logger.get_captured": {
            "name": "get_captured",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_launch_command.pump_stream": {
            "name": "pump_stream",
            "location": 72,
            "return": [],
            "arguments": {
                "logger": [],
                "stream": []
            }
        },
        "_launch_command.joiner": {
            "name": "joiner",
            "location": 78,
            "return": [],
            "arguments": {}
        }
    },
    "telepresence-release-v1/telepresence/runner/output.py": {
        "_open_logfile": {
            "name": "_open_logfile",
            "location": 26,
            "return": [
                "TextIO"
            ],
            "arguments": {
                "logfile_path": [
                    "str"
                ]
            }
        },
        "Output.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logfile_path": [
                    "str"
                ]
            }
        },
        "Output.write": {
            "name": "write",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "Output.read_logs": {
            "name": "read_logs",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "telepresence-release-v1/telepresence/runner/output_mask.py": {
        "_replace_closure": {
            "name": "_replace_closure",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "replacement": [
                    "str"
                ],
                "m": [
                    "Match[str]"
                ]
            }
        },
        "mask_values": {
            "name": "mask_values",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "source": [
                    "str"
                ],
                "keys": [
                    "Iterable[str]"
                ],
                "mask": [
                    "str"
                ]
            }
        },
        "mask_sensitive_data": {
            "name": "mask_sensitive_data",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "source": [
                    "str"
                ]
            }
        },
        "_replace_closure._replace_group": {
            "name": "_replace_group",
            "location": 31,
            "return": [],
            "arguments": {
                "index": []
            }
        }
    },
    "telepresence-release-v1/telepresence/runner/runner.py": {
        "Runner.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "logfile_path": [],
                "verbose": []
            }
        },
        "Runner.span": {
            "name": "span",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "context": [],
                "verbose": []
            }
        },
        "Runner.write": {
            "name": "write",
            "location": 181,
            "return": [],
            "arguments": {
                "self": [],
                "message": [],
                "prefix": []
            }
        },
        "Runner.read_logs": {
            "name": "read_logs",
            "location": 185,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Runner.show": {
            "name": "show",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Runner.show_raw": {
            "name": "show_raw",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Runner.make_temp": {
            "name": "make_temp",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Runner._hold_sudo": {
            "name": "_hold_sudo",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Runner._drop_sudo": {
            "name": "_drop_sudo",
            "location": 225,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Runner.require_sudo": {
            "name": "require_sudo",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Runner.depend": {
            "name": "depend",
            "location": 257,
            "return": [],
            "arguments": {
                "self": [],
                "commands": []
            }
        },
        "Runner.require": {
            "name": "require",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "commands": [],
                "message": []
            }
        },
        "Runner.require_docker": {
            "name": "require_docker",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Runner.docker": {
            "name": "docker",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Runner.time": {
            "name": "time",
            "location": 307,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Runner.sleep": {
            "name": "sleep",
            "location": 313,
            "return": [],
            "arguments": {
                "self": [],
                "seconds": []
            }
        },
        "Runner.loop_until": {
            "name": "loop_until",
            "location": 319,
            "return": [],
            "arguments": {
                "self": [],
                "loop_seconds": [],
                "sleep_seconds": []
            }
        },
        "Runner._make_logger": {
            "name": "_make_logger",
            "location": 344,
            "return": [],
            "arguments": {
                "self": [],
                "track": [],
                "do_log": [],
                "do_capture": [],
                "capture_limit": []
            }
        },
        "Runner._run_command_sync": {
            "name": "_run_command_sync",
            "location": 355,
            "return": [],
            "arguments": {
                "self": [],
                "messages": [],
                "log_stdout": [],
                "stderr_to_stdout": [],
                "args": [],
                "capture_limit": [],
                "timeout": [],
                "input": [],
                "env": []
            }
        },
        "Runner.check_call": {
            "name": "check_call",
            "location": 450,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "timeout": [],
                "input": [],
                "env": []
            }
        },
        "Runner.get_output": {
            "name": "get_output",
            "location": 469,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "timeout": [],
                "stderr_to_stdout": [],
                "reveal": [],
                "input": [],
                "env": []
            }
        },
        "Runner.report_subprocess_failure": {
            "name": "report_subprocess_failure",
            "location": 491,
            "return": [],
            "arguments": {
                "self": [],
                "exc": []
            }
        },
        "Runner.launch": {
            "name": "launch",
            "location": 516,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "args": [],
                "killer": [],
                "notify": [],
                "keep_session": [],
                "bufsize": [],
                "is_critical": []
            }
        },
        "Runner.add_cleanup": {
            "name": "add_cleanup",
            "location": 634,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "callback": []
            }
        },
        "Runner._signal_received": {
            "name": "_signal_received",
            "location": 647,
            "return": [],
            "arguments": {
                "self": [],
                "sig_num": [],
                "frame": []
            }
        },
        "Runner._do_cleanup": {
            "name": "_do_cleanup",
            "location": 663,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Runner.cleanup_handling": {
            "name": "cleanup_handling",
            "location": 677,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Runner.bg_process_crash": {
            "name": "bg_process_crash",
            "location": 689,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Runner.fail": {
            "name": "fail",
            "location": 699,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Runner.exit": {
            "name": "exit",
            "location": 719,
            "return": [],
            "arguments": {
                "self": [],
                "code": []
            }
        },
        "Runner.wait_for_exit": {
            "name": "wait_for_exit",
            "location": 732,
            "return": [],
            "arguments": {
                "self": [],
                "main_process": []
            }
        },
        "Runner._make_logger.write": {
            "name": "write",
            "location": 350,
            "return": [],
            "arguments": {
                "line": []
            }
        },
        "Runner.launch.done": {
            "name": "done",
            "location": 559,
            "return": [],
            "arguments": {
                "proc": []
            }
        },
        "Runner.wait_for_exit.wait_for_process": {
            "name": "wait_for_process",
            "location": 738,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "Runner.launch.pipewait": {
            "name": "pipewait",
            "location": 614,
            "return": [],
            "arguments": {}
        }
    },
    "telepresence-release-v1/telepresence/runner/span.py": {
        "Span.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "runner": [],
                "tag": [],
                "parent": [],
                "verbose": []
            }
        },
        "Span.begin": {
            "name": "begin",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Span.end": {
            "name": "end",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Span.summarize": {
            "name": "summarize",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "telepresence-release-v1/telepresence/runner/__init__.py": {},
    "telepresence-release-v1/tests/__init__.py": {},
    "telepresence-release-v1/tests/cluster/conftest.py": {
        "probe": {
            "name": "probe",
            "location": 15,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "_make_mark": {
            "name": "_make_mark",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {
                "name": []
            }
        },
        "_get_marks": {
            "name": "_get_marks",
            "location": 33,
            "return": [
                "list"
            ],
            "arguments": {
                "items": []
            }
        },
        "_probe_parametrize": {
            "name": "_probe_parametrize",
            "location": 40,
            "return": [
                "Any"
            ],
            "arguments": {
                "fixture_name": []
            }
        },
        "after_probe": {
            "name": "after_probe",
            "location": 77,
            "return": [
                "Any"
            ],
            "arguments": {
                "f": []
            }
        },
        "pytest_collection_modifyitems": {
            "name": "pytest_collection_modifyitems",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [],
                "config": [],
                "items": []
            }
        },
        "_is_after_probe_item": {
            "name": "_is_after_probe_item",
            "location": 155,
            "return": [
                "bool"
            ],
            "arguments": {
                "item": []
            }
        }
    },
    "telepresence-release-v1/tests/cluster/parameterize_utils.py": {
        "retry": {
            "name": "retry",
            "location": 31,
            "return": [
                "Any"
            ],
            "arguments": {
                "condition": [],
                "function": []
            }
        },
        "random_port": {
            "name": "random_port",
            "location": 57,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "create_deployment": {
            "name": "create_deployment",
            "location": 323,
            "return": [
                "None"
            ],
            "arguments": {
                "deployment_ident": [],
                "image": [],
                "args": [],
                "environ": [],
                "ports": [],
                "replicas": []
            }
        },
        "create_service": {
            "name": "create_service",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "deployment_ident": [],
                "ports": []
            }
        },
        "cleanup_service": {
            "name": "cleanup_service",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "deployment_ident": []
            }
        },
        "NEW_DEPLOYMENT_OPERATION_GETTER": {
            "name": "NEW_DEPLOYMENT_OPERATION_GETTER",
            "location": 455,
            "return": [
                "_NewDeploymentOperation"
            ],
            "arguments": {}
        },
        "_cleanup_deployment": {
            "name": "_cleanup_deployment",
            "location": 480,
            "return": [
                "None"
            ],
            "arguments": {
                "ident": []
            }
        },
        "_telepresence": {
            "name": "_telepresence",
            "location": 493,
            "return": [
                "subprocess.Popen[bytes]"
            ],
            "arguments": {
                "telepresence_args": [],
                "env": []
            }
        },
        "run_telepresence_probe": {
            "name": "run_telepresence_probe",
            "location": 527,
            "return": [
                "ProbeResult"
            ],
            "arguments": {
                "request": [],
                "method": [],
                "operation": [],
                "desired_environment": [],
                "client_environment": [],
                "probe_urls": [],
                "probe_commands": [],
                "probe_paths": [],
                "also_proxy": [],
                "http_servers": [],
                "desired_exit_code": []
            }
        },
        "_read_tagged_output": {
            "name": "_read_tagged_output",
            "location": 697,
            "return": [
                "bytes"
            ],
            "arguments": {
                "process": [],
                "output": [],
                "writer": []
            }
        },
        "_cleanup_process": {
            "name": "_cleanup_process",
            "location": 1033,
            "return": [
                "None"
            ],
            "arguments": {
                "process": []
            }
        },
        "_RandomPortAssigner.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "low": [],
                "high": []
            }
        },
        "_RandomPortAssigner.__iter__": {
            "name": "__iter__",
            "location": 48,
            "return": [
                "listiterator[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPServer.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "local_port": [],
                "remote_port": [],
                "value": []
            }
        },
        "HTTPServer.expose_string": {
            "name": "expose_string",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ContainerMethod.unsupported": {
            "name": "unsupported",
            "location": 82,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ContainerMethod.command_has_graceful_failure": {
            "name": "command_has_graceful_failure",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "command": []
            }
        },
        "_ContainerMethod.loopback_is_host": {
            "name": "loopback_is_host",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ContainerMethod.inherits_client_environment": {
            "name": "inherits_client_environment",
            "location": 99,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ContainerMethod.telepresence_args": {
            "name": "telepresence_args",
            "location": 102,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "probe": []
            }
        },
        "_InjectTCPMethod.unsupported": {
            "name": "unsupported",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_InjectTCPMethod.command_has_graceful_failure": {
            "name": "command_has_graceful_failure",
            "location": 127,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "command": []
            }
        },
        "_InjectTCPMethod.loopback_is_host": {
            "name": "loopback_is_host",
            "location": 136,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_InjectTCPMethod.inherits_client_environment": {
            "name": "inherits_client_environment",
            "location": 139,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_InjectTCPMethod.telepresence_args": {
            "name": "telepresence_args",
            "location": 142,
            "return": [
                "List[Union[(str, _T0)]]"
            ],
            "arguments": {
                "self": [],
                "probe": [
                    "_T0"
                ]
            }
        },
        "_VPNTCPMethod.unsupported": {
            "name": "unsupported",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_VPNTCPMethod.command_has_graceful_failure": {
            "name": "command_has_graceful_failure",
            "location": 158,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "command": []
            }
        },
        "_VPNTCPMethod.loopback_is_host": {
            "name": "loopback_is_host",
            "location": 164,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_VPNTCPMethod.inherits_client_environment": {
            "name": "inherits_client_environment",
            "location": 167,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_VPNTCPMethod.telepresence_args": {
            "name": "telepresence_args",
            "location": 170,
            "return": [
                "List[Union[(str, _T0)]]"
            ],
            "arguments": {
                "self": [],
                "probe": [
                    "_T0"
                ]
            }
        },
        "_ExistingDeploymentOperation.__init__": {
            "name": "__init__",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "swap": []
            }
        },
        "_ExistingDeploymentOperation.inherits_deployment_environment": {
            "name": "inherits_deployment_environment",
            "location": 224,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ExistingDeploymentOperation.prepare_deployment": {
            "name": "prepare_deployment",
            "location": 227,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deployment_ident": [],
                "environ": []
            }
        },
        "_ExistingDeploymentOperation.cleanup_deployment": {
            "name": "cleanup_deployment",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deployment_ident": []
            }
        },
        "_ExistingDeploymentOperation.auto_http_servers": {
            "name": "auto_http_servers",
            "location": 260,
            "return": [
                "List[HTTPServer]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_ExistingDeploymentOperation.prepare_service": {
            "name": "prepare_service",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deployment_ident": [],
                "ports": []
            }
        },
        "_ExistingDeploymentOperation.cleanup_service": {
            "name": "cleanup_service",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deployment_ident": []
            }
        },
        "_ExistingDeploymentOperation.telepresence_args": {
            "name": "telepresence_args",
            "location": 272,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "deployment_ident": []
            }
        },
        "_NewDeploymentOperation.inherits_deployment_environment": {
            "name": "inherits_deployment_environment",
            "location": 296,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "_NewDeploymentOperation.prepare_deployment": {
            "name": "prepare_deployment",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deployment_ident": [],
                "environ": []
            }
        },
        "_NewDeploymentOperation.cleanup_deployment": {
            "name": "cleanup_deployment",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deployment_ident": []
            }
        },
        "_NewDeploymentOperation.auto_http_servers": {
            "name": "auto_http_servers",
            "location": 305,
            "return": [
                "List[nothing]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_NewDeploymentOperation.prepare_service": {
            "name": "prepare_service",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deployment_ident": [],
                "ports": []
            }
        },
        "_NewDeploymentOperation.cleanup_service": {
            "name": "cleanup_service",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deployment_ident": []
            }
        },
        "_NewDeploymentOperation.telepresence_args": {
            "name": "telepresence_args",
            "location": 314,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "deployment_ident": []
            }
        },
        "ResourceIdent.__init__": {
            "name": "__init__",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace": [],
                "name": []
            }
        },
        "ProbeResult.__init__": {
            "name": "__init__",
            "location": 766,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "writer": [],
                "telepresence": [],
                "deployment_ident": [],
                "webserver_name": [],
                "result": []
            }
        },
        "ProbeResult.write": {
            "name": "write",
            "location": 776,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": []
            }
        },
        "ProbeResult.read": {
            "name": "read",
            "location": 781,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlsoProxy.__init__": {
            "name": "__init__",
            "location": 793,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "argument": [],
                "host": []
            }
        },
        "Probe.__init__": {
            "name": "__init__",
            "location": 926,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "method": [],
                "operation": []
            }
        },
        "Probe.__str__": {
            "name": "__str__",
            "location": 932,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Probe.result": {
            "name": "result",
            "location": 938,
            "return": [
                "ProbeResult"
            ],
            "arguments": {
                "self": []
            }
        },
        "Probe.cleanup": {
            "name": "cleanup",
            "location": 991,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Probe.ensure_dead": {
            "name": "ensure_dead",
            "location": 996,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Probe.cleanup_resources": {
            "name": "cleanup_resources",
            "location": 1018,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "telepresence-release-v1/tests/cluster/probe_endtoend.py": {
        "main": {
            "name": "main",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "read_and_respond": {
            "name": "read_and_respond",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "commands": [],
                "output": []
            }
        },
        "probe_also_proxy": {
            "name": "probe_also_proxy",
            "location": 98,
            "return": [
                "Tuple[(bool, Any)]"
            ],
            "arguments": {
                "hostname": []
            }
        },
        "run_http_server": {
            "name": "run_http_server",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "port": [],
                "value": []
            }
        },
        "disconnect_telepresence": {
            "name": "disconnect_telepresence",
            "location": 131,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "namespace": []
            }
        },
        "probe_gethostbyname": {
            "name": "probe_gethostbyname",
            "location": 158,
            "return": [
                "Tuple[(bool, str)]"
            ],
            "arguments": {
                "name": []
            }
        },
        "probe_gethostbyaddr": {
            "name": "probe_gethostbyaddr",
            "location": 165,
            "return": [
                "Tuple[(bool, Union[(str, Tuple[(str, List[str], List[str])])])]"
            ],
            "arguments": {
                "name": []
            }
        },
        "probe_urls": {
            "name": "probe_urls",
            "location": 182,
            "return": [
                "Generator[(Tuple[(Any, Tuple[(bool, Any)])], Any, None)]"
            ],
            "arguments": {
                "urls": []
            }
        },
        "probe_commands": {
            "name": "probe_commands",
            "location": 196,
            "return": [
                "Generator[(Tuple[(Any, Tuple[(bool, Optional[Union[(int, str)]])])], Any, None)]"
            ],
            "arguments": {
                "commands": []
            }
        },
        "probe_paths": {
            "name": "probe_paths",
            "location": 209,
            "return": [
                "Generator[(Tuple[(Any, Optional[str])], Any, None)]"
            ],
            "arguments": {
                "paths": []
            }
        },
        "argument_parser": {
            "name": "argument_parser",
            "location": 219,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "TaggedOutput.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stdout": []
            }
        },
        "TaggedOutput.write": {
            "name": "write",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": []
            }
        },
        "run_http_server.SingleValueHTTPRequestHandler.do_GET": {
            "name": "do_GET",
            "location": 119,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "telepresence-release-v1/tests/cluster/test_endtoend.py": {
        "origin_ip": {
            "name": "origin_ip",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_probe_launch": {
            "name": "test_probe_launch",
            "location": 28,
            "return": [],
            "arguments": {
                "probe": [],
                "origin_ip": []
            }
        },
        "test_environment_from_deployment": {
            "name": "test_environment_from_deployment",
            "location": 56,
            "return": [],
            "arguments": {
                "probe": []
            }
        },
        "test_environment_for_services": {
            "name": "test_environment_for_services",
            "location": 126,
            "return": [],
            "arguments": {
                "probe": []
            }
        },
        "test_loopback_network_access": {
            "name": "test_loopback_network_access",
            "location": 163,
            "return": [],
            "arguments": {
                "probe": []
            }
        },
        "test_unsupported_tools": {
            "name": "test_unsupported_tools",
            "location": 186,
            "return": [],
            "arguments": {
                "probe": []
            }
        },
        "test_volumes": {
            "name": "test_volumes",
            "location": 200,
            "return": [],
            "arguments": {
                "probe": []
            }
        },
        "test_network_routing_to_cluster": {
            "name": "test_network_routing_to_cluster",
            "location": 221,
            "return": [],
            "arguments": {
                "probe": []
            }
        },
        "probe_url": {
            "name": "probe_url",
            "location": 255,
            "return": [
                "Any"
            ],
            "arguments": {
                "probe_result": [],
                "url": []
            }
        },
        "test_network_routing_also_proxy_hostname": {
            "name": "test_network_routing_also_proxy_hostname",
            "location": 261,
            "return": [],
            "arguments": {
                "probe": [],
                "origin_ip": []
            }
        },
        "test_network_routing_also_proxy_ip_literal": {
            "name": "test_network_routing_also_proxy_ip_literal",
            "location": 283,
            "return": [],
            "arguments": {
                "probe": [],
                "origin_ip": []
            }
        },
        "test_network_routing_also_proxy_ip_cidr": {
            "name": "test_network_routing_also_proxy_ip_cidr",
            "location": 305,
            "return": [],
            "arguments": {
                "probe": [],
                "origin_ip": []
            }
        },
        "test_network_routing_from_cluster": {
            "name": "test_network_routing_from_cluster",
            "location": 327,
            "return": [],
            "arguments": {
                "probe": []
            }
        },
        "test_network_routing_from_cluster_local_port": {
            "name": "test_network_routing_from_cluster_local_port",
            "location": 338,
            "return": [],
            "arguments": {
                "probe": []
            }
        },
        "test_network_routing_from_cluster_low_port": {
            "name": "test_network_routing_from_cluster_low_port",
            "location": 349,
            "return": [],
            "arguments": {
                "probe": []
            }
        },
        "test_network_routing_from_cluster_auto_expose_same": {
            "name": "test_network_routing_from_cluster_auto_expose_same",
            "location": 361,
            "return": [],
            "arguments": {
                "probe": []
            }
        },
        "test_network_routing_from_cluster_auto_expose_diff": {
            "name": "test_network_routing_from_cluster_auto_expose_diff",
            "location": 382,
            "return": [],
            "arguments": {
                "probe": []
            }
        },
        "query_http_server": {
            "name": "query_http_server",
            "location": 398,
            "return": [
                "str"
            ],
            "arguments": {
                "probe_result": [],
                "http": []
            }
        },
        "fix_httpbin_ip": {
            "name": "fix_httpbin_ip",
            "location": 425,
            "return": [
                "Any"
            ],
            "arguments": {
                "maybe_ip": []
            }
        },
        "httpbin_ip": {
            "name": "httpbin_ip",
            "location": 431,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "get_cluster_ip": {
            "name": "get_cluster_ip",
            "location": 437,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "probe_also_proxy": {
            "name": "probe_also_proxy",
            "location": 447,
            "return": [
                "Tuple[(Any, Optional[ipaddress.IPv4Address])]"
            ],
            "arguments": {
                "probe_result": [],
                "hostname": []
            }
        },
        "_get_post_exit_result": {
            "name": "_get_post_exit_result",
            "location": 460,
            "return": [
                "Any"
            ],
            "arguments": {
                "probe": []
            }
        },
        "test_network_routing_to_from_pod": {
            "name": "test_network_routing_to_from_pod",
            "location": 469,
            "return": [],
            "arguments": {
                "probe": []
            }
        },
        "test_resolve_names": {
            "name": "test_resolve_names",
            "location": 490,
            "return": [],
            "arguments": {
                "probe": []
            }
        },
        "test_resolve_host_alias": {
            "name": "test_resolve_host_alias",
            "location": 506,
            "return": [],
            "arguments": {
                "probe": []
            }
        },
        "test_resolve_names_failure": {
            "name": "test_resolve_names_failure",
            "location": 520,
            "return": [],
            "arguments": {
                "probe": []
            }
        },
        "test_resolve_addresses": {
            "name": "test_resolve_addresses",
            "location": 531,
            "return": [],
            "arguments": {
                "probe": []
            }
        },
        "test_resolve_addresses_failure": {
            "name": "test_resolve_addresses_failure",
            "location": 546,
            "return": [],
            "arguments": {
                "probe": []
            }
        },
        "test_exit_code": {
            "name": "test_exit_code",
            "location": 568,
            "return": [],
            "arguments": {
                "probe": [],
                "origin_ip": []
            }
        },
        "test_swapdeployment_restores_container_image": {
            "name": "test_swapdeployment_restores_container_image",
            "location": 587,
            "return": [],
            "arguments": {
                "probe": []
            }
        },
        "test_swapdeployment_restores_container_command": {
            "name": "test_swapdeployment_restores_container_command",
            "location": 606,
            "return": [],
            "arguments": {
                "probe": []
            }
        },
        "test_swapdeployment_restores_deployment_pods": {
            "name": "test_swapdeployment_restores_deployment_pods",
            "location": 625,
            "return": [],
            "arguments": {
                "probe": []
            }
        },
        "test_swapdeployment_restores_deployment_replicas": {
            "name": "test_swapdeployment_restores_deployment_replicas",
            "location": 659,
            "return": [],
            "arguments": {
                "probe": []
            }
        },
        "kubectl": {
            "name": "kubectl",
            "location": 672,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "get_deployment": {
            "name": "get_deployment",
            "location": 676,
            "return": [
                "Any"
            ],
            "arguments": {
                "ident": []
            }
        },
        "get_pods": {
            "name": "get_pods",
            "location": 688,
            "return": [
                "Any"
            ],
            "arguments": {
                "ident": []
            }
        }
    },
    "telepresence-release-v1/tests/cluster/test_endtoend_distinct.py": {
        "test_disconnect": {
            "name": "test_disconnect",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "request": []
            }
        },
        "disconnect_telepresence": {
            "name": "disconnect_telepresence",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "probe_result": [],
                "namespace": []
            }
        },
        "test_docker_mount": {
            "name": "test_docker_mount",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "telepresence-release-v1/tests/cluster/utils.py": {
        "random_name": {
            "name": "random_name",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "suffix": []
            }
        },
        "telepresence_image_version": {
            "name": "telepresence_image_version",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "query_from_cluster": {
            "name": "query_from_cluster",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "url": [],
                "namespace": [],
                "tries": [],
                "retries_on_empty": []
            }
        },
        "_indent": {
            "name": "_indent",
            "location": 185,
            "return": [
                "str"
            ],
            "arguments": {
                "text": []
            }
        },
        "is_helper_running": {
            "name": "is_helper_running",
            "location": 192,
            "return": [
                "bool"
            ],
            "arguments": {
                "namespace": []
            }
        },
        "run_helper": {
            "name": "run_helper",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "namespace": []
            }
        },
        "run_webserver": {
            "name": "run_webserver",
            "location": 246,
            "return": [
                "str"
            ],
            "arguments": {
                "namespace": []
            }
        },
        "current_namespace": {
            "name": "current_namespace",
            "location": 256,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "create_namespace": {
            "name": "create_namespace",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "namespace_name": [],
                "name": []
            }
        },
        "cleanup_namespace": {
            "name": "cleanup_namespace",
            "location": 281,
            "return": [
                "None"
            ],
            "arguments": {
                "namespace_name": []
            }
        }
    },
    "telepresence-release-v1/tests/cluster/__init__.py": {},
    "telepresence-release-v1/tests/local/test_output_mask.py": {
        "test_non_existing_key": {
            "name": "test_non_existing_key",
            "location": 59,
            "return": [],
            "arguments": {
                "source": []
            }
        },
        "test_should_mask_multiple_keys": {
            "name": "test_should_mask_multiple_keys",
            "location": 68,
            "return": [],
            "arguments": {
                "source": [],
                "unmarshal": []
            }
        },
        "test_should_mask_token": {
            "name": "test_should_mask_token",
            "location": 81,
            "return": [],
            "arguments": {
                "source": [],
                "unmarshal": []
            }
        },
        "generate_dictionary_with_fixed_tokens": {
            "name": "generate_dictionary_with_fixed_tokens",
            "location": 96,
            "return": [],
            "arguments": {
                "draw": []
            }
        },
        "test_fuzzy_should_mask_token_keys": {
            "name": "test_fuzzy_should_mask_token_keys",
            "location": 129,
            "return": [],
            "arguments": {
                "fixture": []
            }
        }
    },
    "telepresence-release-v1/tests/local/test_unit.py": {
        "test_swap_deployment_changes": {
            "name": "test_swap_deployment_changes",
            "location": 218,
            "return": [],
            "arguments": {}
        },
        "test_portmapping": {
            "name": "test_portmapping",
            "location": 292,
            "return": [],
            "arguments": {}
        },
        "test_covering_cidrs": {
            "name": "test_covering_cidrs",
            "location": 315,
            "return": [],
            "arguments": {
                "ips": []
            }
        },
        "test_output_file": {
            "name": "test_output_file",
            "location": 354,
            "return": [],
            "arguments": {}
        },
        "test_docker_publish_args": {
            "name": "test_docker_publish_args",
            "location": 374,
            "return": [],
            "arguments": {}
        },
        "test_default_method": {
            "name": "test_default_method",
            "location": 394,
            "return": [],
            "arguments": {}
        },
        "test_docker_run_implies_container_method": {
            "name": "test_docker_run_implies_container_method",
            "location": 402,
            "return": [],
            "arguments": {}
        },
        "test_default_operation": {
            "name": "test_default_operation",
            "location": 413,
            "return": [],
            "arguments": {}
        },
        "test_cache": {
            "name": "test_cache",
            "location": 423,
            "return": [],
            "arguments": {}
        },
        "test_cache_invalidation": {
            "name": "test_cache_invalidation",
            "location": 430,
            "return": [],
            "arguments": {}
        },
        "test_get_output": {
            "name": "test_get_output",
            "location": 441,
            "return": [],
            "arguments": {}
        },
        "test_check_call_timeout": {
            "name": "test_check_call_timeout",
            "location": 458,
            "return": [],
            "arguments": {}
        }
    },
    "telepresence-release-v1/tests/local/__init__.py": {}
}
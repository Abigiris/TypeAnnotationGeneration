{
    "tellopy-master/speech2sdk.py": {},
    "tellopy-master/tellopy/mock.py": {
        "Socket.sendto": {
            "name": "sendto",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [],
                "addr": []
            }
        },
        "UDPSocket.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ip": [],
                "port": []
            }
        },
        "UDPSocket.__del__": {
            "name": "__del__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UDPSocket.bind": {
            "name": "bind",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UDPSocket.recvfrom": {
            "name": "recvfrom",
            "location": 35,
            "return": [
                "Tuple[(_T0, Tuple[(str, int)])]"
            ],
            "arguments": {
                "self": [],
                "num_bytes": [
                    "_T0@@"
                ]
            }
        },
        "UDPSocket._receive_thread": {
            "name": "_receive_thread",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UDPSocket.set_abort_flag": {
            "name": "set_abort_flag",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UDPSocket.wait_for_response": {
            "name": "wait_for_response",
            "location": 51,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "UDPSocket.send": {
            "name": "send",
            "location": 69,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "addr": [],
                "msg": []
            }
        },
        "Mock.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mock.send_command": {
            "name": "send_command",
            "location": 92,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "command": []
            }
        },
        "Mock.flip": {
            "name": "flip",
            "location": 95,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "direction": []
            }
        },
        "Mock.get_battery": {
            "name": "get_battery",
            "location": 98,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mock.get_flight_time": {
            "name": "get_flight_time",
            "location": 106,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mock.get_speed": {
            "name": "get_speed",
            "location": 114,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mock.land": {
            "name": "land",
            "location": 123,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mock.move": {
            "name": "move",
            "location": 126,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "direction": [],
                "distance": []
            }
        },
        "Mock.move_backward": {
            "name": "move_backward",
            "location": 130,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "distance": []
            }
        },
        "Mock.move_down": {
            "name": "move_down",
            "location": 133,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "distance": []
            }
        },
        "Mock.move_forward": {
            "name": "move_forward",
            "location": 136,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "distance": []
            }
        },
        "Mock.move_left": {
            "name": "move_left",
            "location": 139,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "distance": []
            }
        },
        "Mock.move_right": {
            "name": "move_right",
            "location": 142,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "distance": []
            }
        },
        "Mock.move_up": {
            "name": "move_up",
            "location": 145,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "distance": []
            }
        },
        "Mock.set_speed": {
            "name": "set_speed",
            "location": 148,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "speed": []
            }
        },
        "Mock.takeoff": {
            "name": "takeoff",
            "location": 152,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Mock.rotate_cw": {
            "name": "rotate_cw",
            "location": 155,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "degrees": []
            }
        },
        "Mock.rotate_ccw": {
            "name": "rotate_ccw",
            "location": 158,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "degrees": []
            }
        }
    },
    "tellopy-master/tellopy/speech2sdk.py": {
        "Speech2sdk.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test": []
            }
        },
        "Speech2sdk.initialize_control": {
            "name": "initialize_control",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test": []
            }
        },
        "Speech2sdk.init_video": {
            "name": "init_video",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Speech2sdk.send_command": {
            "name": "send_command",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "txt": []
            }
        },
        "Speech2sdk.run_hotword_detector": {
            "name": "run_hotword_detector",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tellopy-master/tellopy/utils.py": {
        "get_own_ip": {
            "name": "get_own_ip",
            "location": 4,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "tellopy-master/tellopy/__init__.py": {},
    "tellopy-master/tellopy/device/abort_timer.py": {
        "AbortTimer.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": []
            }
        },
        "AbortTimer.set_abort": {
            "name": "set_abort",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tellopy-master/tellopy/device/command.py": {
        "level_2_command_fn": {
            "name": "level_2_command_fn",
            "location": 67,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {
                "command": []
            }
        },
        "Command.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": []
            }
        },
        "Command.tobytes": {
            "name": "tobytes",
            "location": 28,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.validate": {
            "name": "validate",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._validate": {
            "name": "_validate",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.is_init_command": {
            "name": "is_init_command",
            "location": 49,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.from_string": {
            "name": "from_string",
            "location": 53,
            "return": [
                "_TCommand@@Command@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TCommand]"
                ],
                "string": []
            }
        },
        "Command.__repr__": {
            "name": "__repr__",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "level_2_command_fn.fn": {
            "name": "fn",
            "location": 69,
            "return": [],
            "arguments": {
                "cls": [],
                "value": []
            }
        }
    },
    "tellopy-master/tellopy/device/command_socket.py": {
        "CommandSocket.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandSocket.send": {
            "name": "send",
            "location": 20,
            "return": [
                "Optional[bytes]"
            ],
            "arguments": {
                "self": [],
                "cmd": []
            }
        },
        "CommandSocket.check_command": {
            "name": "check_command",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cmd": []
            }
        },
        "CommandSocket.wait_for_response": {
            "name": "wait_for_response",
            "location": 30,
            "return": [
                "Optional[bytes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandSocket.init": {
            "name": "init",
            "location": 38,
            "return": [
                "_TCommandSocket@@CommandSocket@@"
            ],
            "arguments": {
                "self": [
                    "_TCommandSocket@@CommandSocket@@"
                ]
            }
        },
        "CommandSocket._listen": {
            "name": "_listen",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tellopy-master/tellopy/device/config.py": {},
    "tellopy-master/tellopy/device/device.py": {
        "Device.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "socket": []
            }
        },
        "Device.init": {
            "name": "init",
            "location": 11,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Device.takeoff": {
            "name": "takeoff",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Device.land": {
            "name": "land",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Device.stop": {
            "name": "stop",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Device.command": {
            "name": "command",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Device.emergency": {
            "name": "emergency",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Device.streamon": {
            "name": "streamon",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Device.streamoff": {
            "name": "streamoff",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Device.forward": {
            "name": "forward",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "distance": []
            }
        },
        "Device.right": {
            "name": "right",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "distance": []
            }
        },
        "Device.left": {
            "name": "left",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "distance": []
            }
        },
        "Device.back": {
            "name": "back",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "distance": []
            }
        },
        "Device.up": {
            "name": "up",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "distance": []
            }
        },
        "Device.down": {
            "name": "down",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "distance": []
            }
        },
        "Device.flip": {
            "name": "flip",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "direction": []
            }
        },
        "Device.ccw": {
            "name": "ccw",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "degrees": []
            }
        },
        "Device.cw": {
            "name": "cw",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "degrees": []
            }
        }
    },
    "tellopy-master/tellopy/device/mock_tello.py": {
        "TelloProtocol.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": []
            }
        },
        "TelloProtocol.send": {
            "name": "send",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "txt": []
            }
        },
        "TelloProtocol.recv": {
            "name": "recv",
            "location": 23,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockTello.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockTello.addr": {
            "name": "addr",
            "location": 45,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "cls": []
            }
        },
        "MockTello.listen": {
            "name": "listen",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockTello.streamon": {
            "name": "streamon",
            "location": 56,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockTello.init_tello": {
            "name": "init_tello",
            "location": 75,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockTello.match_cmd_with_params": {
            "name": "match_cmd_with_params",
            "location": 84,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "MockTello.process": {
            "name": "process",
            "location": 92,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "msg": []
            }
        },
        "MockTello._serve": {
            "name": "_serve",
            "location": 111,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "conn": []
            }
        },
        "MockTello.serve": {
            "name": "serve",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [],
                "addr": []
            }
        },
        "MockTello.streamon.ffmpeg_stream": {
            "name": "ffmpeg_stream",
            "location": 60,
            "return": [],
            "arguments": {}
        }
    },
    "tellopy-master/tellopy/device/video.py": {
        "tensor_to_image": {
            "name": "tensor_to_image",
            "location": 9,
            "return": [
                "Any"
            ],
            "arguments": {
                "t": []
            }
        },
        "Video.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": []
            }
        },
        "Video.container": {
            "name": "container",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Video._image_to_numpy": {
            "name": "_image_to_numpy",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "image": []
            }
        },
        "Video.frame": {
            "name": "frame",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Video._read_frames_from_container": {
            "name": "_read_frames_from_container",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Video.start": {
            "name": "start",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timeout": [],
                "blocking": []
            }
        },
        "Video.stop": {
            "name": "stop",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Video.running": {
            "name": "running",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tellopy-master/tellopy/device/__init__.py": {},
    "tellopy-master/tellopy/manual/control.py": {
        "ButtonControl.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "device": [],
                "keyboard": []
            }
        },
        "ButtonControl.keyPressEvent": {
            "name": "keyPressEvent",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "ButtonControl.create_button_grid": {
            "name": "create_button_grid",
            "location": 17,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tellopy-master/tellopy/manual/device.py": {
        "Device.left": {
            "name": "left",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.right": {
            "name": "right",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.up": {
            "name": "up",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.down": {
            "name": "down",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.forward": {
            "name": "forward",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.back": {
            "name": "back",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.cw": {
            "name": "cw",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.ccw": {
            "name": "ccw",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Device.flip": {
            "name": "flip",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tellopy-master/tellopy/manual/keyboard.py": {
        "Keyboard.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keyboard.register": {
            "name": "register",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [],
                "method": []
            }
        },
        "Keyboard.keyPressEvent": {
            "name": "keyPressEvent",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Keyboard.registry_table": {
            "name": "registry_table",
            "location": 34,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Keyboard.__str__": {
            "name": "__str__",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tellopy-master/tellopy/manual/mock_device.py": {
        "Device.__getattr__": {
            "name": "__getattr__",
            "location": 9,
            "return": [
                "Callable[([], Any)]"
            ],
            "arguments": {
                "self": [],
                "a": []
            }
        },
        "Device.init": {
            "name": "init",
            "location": 15,
            "return": [
                "_TDevice@@Device@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TDevice]"
                ]
            }
        },
        "Device.__getattr__.fn": {
            "name": "fn",
            "location": 10,
            "return": [],
            "arguments": {}
        }
    },
    "tellopy-master/tellopy/manual/__init__.py": {},
    "tellopy-master/tellopy/manual/__main__.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 9,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {}
        }
    },
    "tellopy-master/tellopy/server/client.py": {
        "Client.socket": {
            "name": "socket",
            "location": 9,
            "return": [
                "socket.socket"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.connect": {
            "name": "connect",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sock": []
            }
        },
        "Client.send": {
            "name": "send",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "sock": [],
                "obj": []
            }
        }
    },
    "tellopy-master/tellopy/server/pickle_protocol.py": {
        "PickleProtocol.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": []
            }
        },
        "PickleProtocol.send": {
            "name": "send",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "PickleProtocol.recv": {
            "name": "recv",
            "location": 17,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PickleProtocol.prefix_length": {
            "name": "prefix_length",
            "location": 25,
            "return": [
                "Any"
            ],
            "arguments": {
                "msg": []
            }
        },
        "PickleProtocol._recv": {
            "name": "_recv",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PickleProtocol.read_bytes": {
            "name": "read_bytes",
            "location": 31,
            "return": [
                "bytes"
            ],
            "arguments": {
                "self": [],
                "n": []
            }
        }
    },
    "tellopy-master/tellopy/server/server.py": {
        "Server.addr": {
            "name": "addr",
            "location": 11,
            "return": [
                "Tuple[(str, int)]"
            ],
            "arguments": {
                "self": [
                    "Type[Server]"
                ]
            }
        },
        "Server.socket": {
            "name": "socket",
            "location": 14,
            "return": [
                "socket.socket"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server.listen": {
            "name": "listen",
            "location": 17,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Server._serve": {
            "name": "_serve",
            "location": 25,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "conn": []
            }
        },
        "Server.serve": {
            "name": "serve",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn": [],
                "addr": []
            }
        }
    },
    "tellopy-master/tellopy/server/__init__.py": {},
    "tellopy-master/tellopy/server/__main__.py": {},
    "tellopy-master/tellopy/speech/hotword_detector.py": {
        "_default_library_path": {
            "name": "_default_library_path",
            "location": 124,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "HotwordDetector.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": [],
                "sensitivities": [],
                "input_device_index": []
            }
        },
        "HotwordDetector.run": {
            "name": "run",
            "location": 58,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "HotwordDetector.show_audio_devices_info": {
            "name": "show_audio_devices_info",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "tellopy-master/tellopy/speech/__init__.py": {},
    "tellopy-master/tellopy/speech/porcupine/porcupine.py": {
        "Porcupine.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "keyword_file_path": [],
                "sensitivity": [],
                "keyword_file_paths": [],
                "sensitivities": []
            }
        },
        "Porcupine.sample_rate": {
            "name": "sample_rate",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Porcupine.frame_length": {
            "name": "frame_length",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Porcupine.process": {
            "name": "process",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "pcm": []
            }
        },
        "Porcupine.delete": {
            "name": "delete",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tellopy-master/tellopy/speech/porcupine/__init__.py": {},
    "tellopy-master/tellopy/yolo/datasets.py": {
        "resize_square": {
            "name": "resize_square",
            "location": 230,
            "return": [
                "Tuple[(Any, Any, Any, Any)]"
            ],
            "arguments": {
                "img": [],
                "height": [],
                "color": []
            }
        },
        "random_affine": {
            "name": "random_affine",
            "location": 244,
            "return": [
                "Any"
            ],
            "arguments": {
                "img": [],
                "targets": [],
                "degrees": [],
                "translate": [],
                "scale": [],
                "shear": [],
                "borderValue": []
            }
        },
        "convert_tif2bmp": {
            "name": "convert_tif2bmp",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "load_images.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "batch_size": [],
                "img_size": []
            }
        },
        "load_images.__iter__": {
            "name": "__iter__",
            "location": 45,
            "return": [
                "_Tload_images@@load_images@@"
            ],
            "arguments": {
                "self": [
                    "_Tload_images@@load_images@@"
                ]
            }
        },
        "load_images.__next__": {
            "name": "__next__",
            "location": 49,
            "return": [
                "Tuple[(list, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "load_images.__len__": {
            "name": "__len__",
            "location": 72,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "load_images_and_labels.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "batch_size": [],
                "img_size": [],
                "multi_scale": [],
                "augment": []
            }
        },
        "load_images_and_labels.__iter__": {
            "name": "__iter__",
            "location": 102,
            "return": [
                "_Tload_images_and_labels@@load_images_and_labels@@"
            ],
            "arguments": {
                "self": [
                    "_Tload_images_and_labels@@load_images_and_labels@@"
                ]
            }
        },
        "load_images_and_labels.__next__": {
            "name": "__next__",
            "location": 108,
            "return": [
                "Tuple[(Any, list)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "load_images_and_labels.__len__": {
            "name": "__len__",
            "location": 225,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tellopy-master/tellopy/yolo/detector.py": {
        "Detector.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Detector.load_weights": {
            "name": "load_weights",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Detector.eval": {
            "name": "eval",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "b": []
            }
        },
        "Detector.cuda": {
            "name": "cuda",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Detector.raw_call": {
            "name": "raw_call",
            "location": 55,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Detector.__call__": {
            "name": "__call__",
            "location": 61,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Detector.prepare": {
            "name": "prepare",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "img": []
            }
        },
        "Detector.predict": {
            "name": "predict",
            "location": 87,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "img": []
            }
        },
        "Detector.classes": {
            "name": "classes",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tellopy-master/tellopy/yolo/models.py": {
        "create_modules": {
            "name": "create_modules",
            "location": 18,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "module_defs": []
            }
        },
        "load_weights": {
            "name": "load_weights",
            "location": 373,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "weights_path": [],
                "cutoff": []
            }
        },
        "save_weights": {
            "name": "save_weights",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "cutoff": []
            }
        },
        "EmptyLayer.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Upsample.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scale_factor": [],
                "mode": []
            }
        },
        "Upsample.forward": {
            "name": "forward",
            "location": 107,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "YOLOLayer.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "anchors": [],
                "nC": [],
                "img_dim": [],
                "anchor_idxs": [],
                "cfg": []
            }
        },
        "YOLOLayer.forward": {
            "name": "forward",
            "location": 165,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "p": [],
                "targets": [],
                "batch_report": [],
                "var": []
            }
        },
        "Darknet.__init__": {
            "name": "__init__",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg_path": [],
                "img_size": []
            }
        },
        "Darknet.forward": {
            "name": "forward",
            "location": 309,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "targets": [],
                "batch_report": [],
                "var": []
            }
        }
    },
    "tellopy-master/tellopy/yolo/onnx2coreml.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tellopy-master/tellopy/yolo/parse_config.py": {
        "parse_model_config": {
            "name": "parse_model_config",
            "location": 4,
            "return": [
                "List[Dict[(str, Union[(int, str)])]]"
            ],
            "arguments": {
                "path": []
            }
        },
        "parse_data_config": {
            "name": "parse_data_config",
            "location": 27,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "path": []
            }
        }
    },
    "tellopy-master/tellopy/yolo/torch_utils.py": {
        "check_cuda": {
            "name": "check_cuda",
            "location": 4,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "init_seeds": {
            "name": "init_seeds",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "seed": []
            }
        },
        "select_device": {
            "name": "select_device",
            "location": 20,
            "return": [
                "Any"
            ],
            "arguments": {
                "force_cpu": []
            }
        }
    },
    "tellopy-master/tellopy/yolo/utils.py": {
        "prepare_tensor_for_imshow": {
            "name": "prepare_tensor_for_imshow",
            "location": 17,
            "return": [
                "Any"
            ],
            "arguments": {
                "t": []
            }
        },
        "init_seeds": {
            "name": "init_seeds",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "seed": []
            }
        },
        "load_classes": {
            "name": "load_classes",
            "location": 30,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "path": []
            }
        },
        "model_info": {
            "name": "model_info",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "model": []
            }
        },
        "class_weights": {
            "name": "class_weights",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "weights_init_normal": {
            "name": "weights_init_normal",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "m": []
            }
        },
        "xyxy2xywh": {
            "name": "xyxy2xywh",
            "location": 77,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": []
            }
        },
        "xywh2xyxy": {
            "name": "xywh2xyxy",
            "location": 87,
            "return": [
                "Any"
            ],
            "arguments": {
                "x": []
            }
        },
        "ap_per_class": {
            "name": "ap_per_class",
            "location": 96,
            "return": [
                "Tuple[(np.ndarray, Any, np.ndarray, np.ndarray)]"
            ],
            "arguments": {
                "tp": [],
                "conf": [],
                "pred_cls": [],
                "target_cls": []
            }
        },
        "compute_ap": {
            "name": "compute_ap",
            "location": 157,
            "return": [
                "Any"
            ],
            "arguments": {
                "recall": [],
                "precision": []
            }
        },
        "bbox_iou": {
            "name": "bbox_iou",
            "location": 189,
            "return": [
                "Any"
            ],
            "arguments": {
                "box1": [],
                "box2": [],
                "x1y1x2y2": []
            }
        },
        "build_targets": {
            "name": "build_targets",
            "location": 221,
            "return": [
                "Tuple[(Any, Any, Any, Any, Any, Any, Any, Any, Any, Any)]"
            ],
            "arguments": {
                "pred_boxes": [],
                "pred_conf": [],
                "pred_cls": [],
                "target": [],
                "anchor_wh": [],
                "nA": [],
                "nC": [],
                "nG": [],
                "batch_report": []
            }
        },
        "non_max_suppression": {
            "name": "non_max_suppression",
            "location": 324,
            "return": [
                "list"
            ],
            "arguments": {
                "prediction": [],
                "conf_thres": [],
                "nms_thres": []
            }
        },
        "strip_optimizer_from_checkpoint": {
            "name": "strip_optimizer_from_checkpoint",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": []
            }
        },
        "coco_class_count": {
            "name": "coco_class_count",
            "location": 458,
            "return": [
                "None"
            ],
            "arguments": {
                "path": []
            }
        },
        "plot_results": {
            "name": "plot_results",
            "location": 471,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tellopy-master/tellopy/yolo/__init__.py": {},
    "tellopy-master/tellopy/yolo/weights/__init__.py": {},
    "tellopy-master/tests/integration/test_video.py": {
        "test_video": {
            "name": "test_video",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tellopy-master/tests/unit/conftest.py": {
        "is_valid_ip": {
            "name": "is_valid_ip",
            "location": 1,
            "return": [
                "bool"
            ],
            "arguments": {
                "ip": []
            }
        }
    },
    "tellopy-master/tests/unit/test_abort_timer.py": {
        "test_abort_timer": {
            "name": "test_abort_timer",
            "location": 7,
            "return": [],
            "arguments": {
                "waiting_time": []
            }
        }
    },
    "tellopy-master/tests/unit/test_utils.py": {
        "test_get_own_ip": {
            "name": "test_get_own_ip",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tellopy-master/tests/unit/__init__.py": {}
}
{
    "template_jit-master/template_jit/cfg.py": {
        "labels": {
            "name": "labels",
            "location": 86,
            "return": [
                "list"
            ],
            "arguments": {
                "nodes": []
            }
        },
        "build_initial_cfg": {
            "name": "build_initial_cfg",
            "location": 189,
            "return": [
                "ControlFlowGraph"
            ],
            "arguments": {
                "blocks": []
            }
        },
        "compute_block_boundaries": {
            "name": "compute_block_boundaries",
            "location": 245,
            "return": [
                "List[Tuple[(Any, Any)]]"
            ],
            "arguments": {
                "func": []
            }
        },
        "make_branch_symbolic": {
            "name": "make_branch_symbolic",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "instr": [],
                "labels": []
            }
        },
        "build_cfg": {
            "name": "build_cfg",
            "location": 285,
            "return": [
                "ControlFlowGraph"
            ],
            "arguments": {
                "func": []
            }
        },
        "BasicBlock.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [],
                "instructions": []
            }
        },
        "BasicBlock.__str__": {
            "name": "__str__",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CFGIterator.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": []
            }
        },
        "CFGIterator.__iter__": {
            "name": "__iter__",
            "location": 59,
            "return": [
                "_TCFGIterator@@CFGIterator@@"
            ],
            "arguments": {
                "self": [
                    "_TCFGIterator@@CFGIterator@@"
                ]
            }
        },
        "CFGIterator.__next__": {
            "name": "__next__",
            "location": 62,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkStack.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkStack.append": {
            "name": "append",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "WorkStack.extend": {
            "name": "extend",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nodes": []
            }
        },
        "WorkStack.has_node": {
            "name": "has_node",
            "location": 111,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "WorkStack.pop": {
            "name": "pop",
            "location": 114,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkStack.is_empty": {
            "name": "is_empty",
            "location": 119,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostOrderCFGIterator.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cfg": []
            }
        },
        "PostOrderCFGIterator.__iter__": {
            "name": "__iter__",
            "location": 135,
            "return": [
                "_TPostOrderCFGIterator@@PostOrderCFGIterator@@"
            ],
            "arguments": {
                "self": [
                    "_TPostOrderCFGIterator@@PostOrderCFGIterator@@"
                ]
            }
        },
        "PostOrderCFGIterator.__next__": {
            "name": "__next__",
            "location": 138,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ControlFlowGraph.__init__": {
            "name": "__init__",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ControlFlowGraph.add_block": {
            "name": "add_block",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block": []
            }
        },
        "ControlFlowGraph.add_edge": {
            "name": "add_edge",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [],
                "dst": []
            }
        },
        "ControlFlowGraph.get_successors": {
            "name": "get_successors",
            "location": 174,
            "return": [
                "set"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "ControlFlowGraph.__iter__": {
            "name": "__iter__",
            "location": 177,
            "return": [
                "CFGIterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "ControlFlowGraph.__str__": {
            "name": "__str__",
            "location": 180,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "template_jit-master/template_jit/compiler.py": {
        "incref": {
            "name": "incref",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "pyobj": []
            }
        },
        "decref": {
            "name": "decref",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "pyobj": [],
                "tmp": []
            }
        },
        "xdecref": {
            "name": "xdecref",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "pyobj": [],
                "tmp": []
            }
        },
        "Compiler.get_signature": {
            "name": "get_signature",
            "location": 82,
            "return": [
                "Tuple[(Tuple[()], Any)]"
            ],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "Compiler.emit_BINARY_ADD": {
            "name": "emit_BINARY_ADD",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "instr": []
            }
        },
        "Compiler.emit_COMPARE_OP": {
            "name": "emit_COMPARE_OP",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "instr": []
            }
        },
        "Compiler.emit_LOAD_CONST": {
            "name": "emit_LOAD_CONST",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "instr": []
            }
        },
        "Compiler.emit_LOAD_FAST": {
            "name": "emit_LOAD_FAST",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "instr": []
            }
        },
        "Compiler.emit_POP_JUMP_IF_FALSE": {
            "name": "emit_POP_JUMP_IF_FALSE",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "instr": []
            }
        },
        "Compiler.emit_POP_TOP": {
            "name": "emit_POP_TOP",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "instr": []
            }
        },
        "Compiler.emit_RETURN_VALUE": {
            "name": "emit_RETURN_VALUE",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "instr": []
            }
        },
        "Compiler.emit_instruction": {
            "name": "emit_instruction",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": [],
                "instr": []
            }
        },
        "Compiler.emit_error_check": {
            "name": "emit_error_check",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Compiler.emit_prologue": {
            "name": "emit_prologue",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "func": []
            }
        },
        "Compiler.emit_epilogue": {
            "name": "emit_epilogue",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Compiler.compile": {
            "name": "compile",
            "location": 194,
            "return": [
                "template_jit.runtime.JITFunction"
            ],
            "arguments": {
                "self": [],
                "func": []
            }
        }
    },
    "template_jit-master/template_jit/runtime.py": {
        "pysym": {
            "name": "pysym",
            "location": 9,
            "return": [
                "Any"
            ],
            "arguments": {
                "name": []
            }
        },
        "JITFunction.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_args": [],
                "encoded_func": []
            }
        },
        "JITFunction.__call__": {
            "name": "__call__",
            "location": 33,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "JITFunction.format": {
            "name": "format",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "template_jit-master/template_jit/__init__.py": {},
    "template_jit-master/tests/test_cfg.py": {
        "max": {
            "name": "max",
            "location": 6,
            "return": [
                "Union[(_T0, _T1)]"
            ],
            "arguments": {
                "a": [
                    "_T0@@"
                ],
                "b": [
                    "_T1@@"
                ]
            }
        },
        "add": {
            "name": "add",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_compute_block_boundaries": {
            "name": "test_compute_block_boundaries",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_build_cfg": {
            "name": "test_build_cfg",
            "location": 42,
            "return": [],
            "arguments": {
                "func": [],
                "expected": []
            }
        }
    },
    "template_jit-master/tests/test_compiler.py": {
        "test_peachpy_works": {
            "name": "test_peachpy_works",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_simple_function": {
            "name": "test_simple_function",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_local_variables": {
            "name": "test_local_variables",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_binary_add": {
            "name": "test_binary_add",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_compare_op": {
            "name": "test_compare_op",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_control_flow": {
            "name": "test_control_flow",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_simple_function.func": {
            "name": "func",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "test_local_variables.identity": {
            "name": "identity",
            "location": 31,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "test_binary_add.add": {
            "name": "add",
            "location": 40,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_compare_op.identical": {
            "name": "identical",
            "location": 49,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_control_flow.identical": {
            "name": "identical",
            "location": 60,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        }
    }
}
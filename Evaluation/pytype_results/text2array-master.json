{
    "text2array-master/docs/conf.py": {},
    "text2array-master/tests/conftest.py": {
        "rng": {
            "name": "rng",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "samples": {
            "name": "samples",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "stream": {
            "name": "stream",
            "location": 17,
            "return": [],
            "arguments": {
                "samples": []
            }
        },
        "stream_cls": {
            "name": "stream_cls",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "Stream.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "samples": []
            }
        },
        "Stream.__iter__": {
            "name": "__iter__",
            "location": 30,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "text2array-master/tests/test_batch.py": {
        "test_init": {
            "name": "test_init",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "samples": []
            }
        },
        "TestToArray.test_ok": {
            "name": "test_ok",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToArray.test_empty": {
            "name": "test_empty",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToArray.test_seq": {
            "name": "test_seq",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToArray.test_seq_of_seq": {
            "name": "test_seq_of_seq",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToArray.test_seq_of_seq_of_seq": {
            "name": "test_seq_of_seq_of_seq",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToArray.test_custom_padding": {
            "name": "test_custom_padding",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToArray.test_pad_with_dict": {
            "name": "test_pad_with_dict",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToArray.test_missing_field": {
            "name": "test_missing_field",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToArray.test_inconsistent_depth": {
            "name": "test_inconsistent_depth",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToArray.test_str": {
            "name": "test_str",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "text2array-master/tests/test_batch_iterator.py": {
        "test_init": {
            "name": "test_init",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "samples": []
            }
        },
        "test_init_stream": {
            "name": "test_init_stream",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "stream": []
            }
        },
        "test_init_kwargs": {
            "name": "test_init_kwargs",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_init_nonpositive_batch_size": {
            "name": "test_init_nonpositive_batch_size",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "samples": []
            }
        }
    },
    "text2array-master/tests/test_bucket_iterator.py": {
        "test_init": {
            "name": "test_init",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_shuffle_bucket": {
            "name": "test_shuffle_bucket",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "rng": []
            }
        },
        "test_sort_bucket": {
            "name": "test_sort_bucket",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_shuffle_and_sort_bucket": {
            "name": "test_shuffle_and_sort_bucket",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "text2array-master/tests/test_shuffle_iterator.py": {
        "test_init": {
            "name": "test_init",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "rng": [],
                "samples": []
            }
        },
        "test_init_kwargs": {
            "name": "test_init_kwargs",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "rng": []
            }
        },
        "test_rng_called_correctly": {
            "name": "test_rng_called_correctly",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "rng": [],
                "samples": []
            }
        },
        "test_init_zero_scale": {
            "name": "test_init_zero_scale",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "rng": []
            }
        },
        "test_init_negative_scale": {
            "name": "test_init_negative_scale",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "rng": [],
                "samples": []
            }
        },
        "assert_shuffled": {
            "name": "assert_shuffled",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "before": [],
                "after": []
            }
        }
    },
    "text2array-master/tests/test_string_store.py": {
        "test_default": {
            "name": "test_default",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_eq": {
            "name": "test_eq",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pickling": {
            "name": "test_pickling",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        },
        "TestAsSequence.test_ok": {
            "name": "test_ok",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsSequence.test_index_out_of_range": {
            "name": "test_index_out_of_range",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsSequence.test_value_not_exist": {
            "name": "test_value_not_exist",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsMutableSet.test_ok": {
            "name": "test_ok",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsMutableSet.test_add": {
            "name": "test_add",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAsMutableSet.test_discard": {
            "name": "test_discard",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "text2array-master/tests/test_vocab.py": {
        "TestFromSamples.from_samples": {
            "name": "from_samples",
            "location": 11,
            "return": [
                "text2array.vocab.Vocab"
            ],
            "arguments": {
                "ss": []
            }
        },
        "TestFromSamples.test_ok": {
            "name": "test_ok",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFromSamples.test_has_vocab_for_all_str_fields": {
            "name": "test_has_vocab_for_all_str_fields",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFromSamples.test_no_vocab_for_non_str": {
            "name": "test_no_vocab_for_non_str",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFromSamples.test_seq": {
            "name": "test_seq",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFromSamples.test_seq_of_seq": {
            "name": "test_seq_of_seq",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFromSamples.test_empty_field_values": {
            "name": "test_empty_field_values",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFromSamples.test_min_count": {
            "name": "test_min_count",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFromSamples.test_no_unk": {
            "name": "test_no_unk",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFromSamples.test_no_pad": {
            "name": "test_no_pad",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFromSamples.test_max_size": {
            "name": "test_max_size",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFromSamples.test_iterator_is_passed": {
            "name": "test_iterator_is_passed",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStoi.test_samples_to_indices": {
            "name": "test_samples_to_indices",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStoi.test_value_is_not_str": {
            "name": "test_value_is_not_str",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestItos.test_samples_to_strings": {
            "name": "test_samples_to_strings",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestItos.test_value_is_str": {
            "name": "test_value_is_str",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtend.test_ok": {
            "name": "test_ok",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExtend.test_selected_field_names": {
            "name": "test_selected_field_names",
            "location": 174,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "text2array-master/text2array/batches.py": {
        "Batch.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "samples": []
            }
        },
        "Batch.to_array": {
            "name": "to_array",
            "location": 38,
            "return": [
                "Dict[(Any, np.ndarray)]"
            ],
            "arguments": {
                "self": [],
                "pad_with": []
            }
        },
        "Batch._get_values": {
            "name": "_get_values",
            "location": 83,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Batch._get_maxlens": {
            "name": "_get_maxlens",
            "location": 90,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "values": []
            }
        },
        "Batch._get_paddings": {
            "name": "_get_paddings",
            "location": 107,
            "return": [
                "List[Union[(List[_T1], _T1)]]"
            ],
            "arguments": {
                "cls": [],
                "maxlens": [],
                "with_": [
                    "_T1@@"
                ]
            }
        },
        "Batch._pad": {
            "name": "_pad",
            "location": 115,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [],
                "values": [],
                "maxlens": [],
                "paddings": [],
                "depth": []
            }
        }
    },
    "text2array-master/text2array/iterators.py": {
        "BatchIterator.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "samples": [],
                "batch_size": []
            }
        },
        "BatchIterator.batch_size": {
            "name": "batch_size",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BatchIterator.__len__": {
            "name": "__len__",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatchIterator.__iter__": {
            "name": "__iter__",
            "location": 68,
            "return": [
                "Generator[(text2array.batches.Batch, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShuffleIterator.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "items": [],
                "key": [],
                "scale": [],
                "rng": []
            }
        },
        "ShuffleIterator.__len__": {
            "name": "__len__",
            "location": 137,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShuffleIterator.__iter__": {
            "name": "__iter__",
            "location": 140,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShuffleIterator._shuffle": {
            "name": "_shuffle",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShuffleIterator._shuffle_by_key": {
            "name": "_shuffle_by_key",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BucketIterator.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "samples": [],
                "key": [],
                "batch_size": [],
                "shuffle_bucket": [],
                "rng": [],
                "sort_bucket": [],
                "sort_bucket_by": []
            }
        },
        "BucketIterator.batch_size": {
            "name": "batch_size",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BucketIterator.__len__": {
            "name": "__len__",
            "location": 238,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BucketIterator.__iter__": {
            "name": "__iter__",
            "location": 241,
            "return": [
                "Generator[(nothing, Any, None)]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "text2array-master/text2array/samples.py": {},
    "text2array-master/text2array/vocab.py": {
        "Vocab.__getitem__": {
            "name": "__getitem__",
            "location": 40,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Vocab.stoi": {
            "name": "stoi",
            "location": 46,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": [],
                "samples": []
            }
        },
        "Vocab.itos": {
            "name": "itos",
            "location": 62,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": [],
                "samples": []
            }
        },
        "Vocab.from_samples": {
            "name": "from_samples",
            "location": 76,
            "return": [
                "_TVocab@@Vocab@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TVocab]"
                ],
                "samples": [],
                "options": [],
                "pbar": []
            }
        },
        "Vocab.extend": {
            "name": "extend",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "samples": [],
                "fields": []
            }
        },
        "Vocab._needs_vocab": {
            "name": "_needs_vocab",
            "location": 180,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "val": []
            }
        },
        "Vocab._flatten": {
            "name": "_flatten",
            "location": 188,
            "return": [
                "Generator[(_T0, Any, None)]"
            ],
            "arguments": {
                "cls": [],
                "xs": [
                    "_T0@@"
                ]
            }
        },
        "Vocab._apply_to_sample": {
            "name": "_apply_to_sample",
            "location": 197,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "sample": [],
                "index": []
            }
        },
        "Vocab._index_value": {
            "name": "_index_value",
            "location": 210,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "store": [],
                "value": []
            }
        },
        "Vocab._get_value": {
            "name": "_get_value",
            "location": 219,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "store": [],
                "value": []
            }
        },
        "StringStore.__init__": {
            "name": "__init__",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial": [],
                "default": []
            }
        },
        "StringStore.index": {
            "name": "index",
            "location": 265,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "s": []
            }
        },
        "StringStore.__eq__": {
            "name": "__eq__",
            "location": 273,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "o": []
            }
        },
        "StringStore.__repr__": {
            "name": "__repr__",
            "location": 278,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringStore.__getstate__": {
            "name": "__getstate__",
            "location": 283,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "StringStore.__setstate__": {
            "name": "__setstate__",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        }
    },
    "text2array-master/text2array/__init__.py": {}
}
{
    "tezos-flask-master/service.py": {
        "tezos_client": {
            "name": "tezos_client",
            "location": 55,
            "return": [
                "client.client.Client"
            ],
            "arguments": {}
        },
        "tezosclient": {
            "name": "tezosclient",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "index": {
            "name": "index",
            "location": 83,
            "return": [],
            "arguments": {
                "msg": []
            }
        }
    },
    "tezos-flask-master/client/client.py": {
        "format_command": {
            "name": "format_command",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "cmd": []
            }
        },
        "Client.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_path": [],
                "admin_client_path": [],
                "host": [],
                "base_dir": [],
                "rpc_port": [],
                "use_tls": [],
                "disable_disclaimer": []
            }
        },
        "Client.run": {
            "name": "run",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "params": [],
                "admin": [],
                "check": [],
                "trace": []
            }
        },
        "Client.rpc": {
            "name": "rpc",
            "location": 136,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "verb": [],
                "path": [],
                "data": [],
                "params": []
            }
        },
        "Client.typecheck": {
            "name": "typecheck",
            "location": 162,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "contract": []
            }
        },
        "Client.run_script": {
            "name": "run_script",
            "location": 166,
            "return": [
                "client_output.RunScriptResult"
            ],
            "arguments": {
                "self": [],
                "contract": [],
                "storage": [],
                "inp": [],
                "amount": []
            }
        },
        "Client.gen_key": {
            "name": "gen_key",
            "location": 178,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "alias": [],
                "args": []
            }
        },
        "Client.import_secret_key": {
            "name": "import_secret_key",
            "location": 185,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "secret": []
            }
        },
        "Client.activate_protocol": {
            "name": "activate_protocol",
            "location": 188,
            "return": [
                "client_output.ActivationResult"
            ],
            "arguments": {
                "self": [],
                "protocol": [],
                "parameter_file": [],
                "fitness": [],
                "key": [],
                "timestamp": []
            }
        },
        "Client.activate_protocol_json": {
            "name": "activate_protocol_json",
            "location": 204,
            "return": [
                "client_output.ActivationResult"
            ],
            "arguments": {
                "self": [],
                "protocol": [],
                "parameters": [],
                "fitness": [],
                "key": [],
                "timestamp": []
            }
        },
        "Client.show_voting_period": {
            "name": "show_voting_period",
            "location": 218,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.ban_peer": {
            "name": "ban_peer",
            "location": 221,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "port": []
            }
        },
        "Client.unban_peer": {
            "name": "unban_peer",
            "location": 224,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "port": []
            }
        },
        "Client.trust_peer": {
            "name": "trust_peer",
            "location": 227,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "port": []
            }
        },
        "Client.untrust_peer": {
            "name": "untrust_peer",
            "location": 230,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "port": []
            }
        },
        "Client.endorse": {
            "name": "endorse",
            "location": 233,
            "return": [
                "client_output.EndorseResult"
            ],
            "arguments": {
                "self": [],
                "account": []
            }
        },
        "Client.bake": {
            "name": "bake",
            "location": 237,
            "return": [
                "client_output.BakeForResult"
            ],
            "arguments": {
                "self": [],
                "account": [],
                "args": []
            }
        },
        "Client.originate": {
            "name": "originate",
            "location": 246,
            "return": [
                "client_output.OriginationResult"
            ],
            "arguments": {
                "self": [],
                "contract_name": [],
                "manager": [],
                "amount": [],
                "sender": [],
                "contract": [],
                "args": []
            }
        },
        "Client.transfer": {
            "name": "transfer",
            "location": 261,
            "return": [
                "client_output.TransferResult"
            ],
            "arguments": {
                "self": [],
                "amount": [],
                "account1": [],
                "account2": [],
                "args": []
            }
        },
        "Client.p2p_stat": {
            "name": "p2p_stat",
            "location": 273,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_balance": {
            "name": "get_balance",
            "location": 276,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "account": []
            }
        },
        "Client.get_receipt": {
            "name": "get_receipt",
            "location": 280,
            "return": [
                "client_output.GetReceiptResult"
            ],
            "arguments": {
                "self": [],
                "operation": [],
                "args": []
            }
        },
        "Client.get_prevalidator": {
            "name": "get_prevalidator",
            "location": 289,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_mempool": {
            "name": "get_mempool",
            "location": 292,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.mempool_is_empty": {
            "name": "mempool_is_empty",
            "location": 295,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_head": {
            "name": "get_head",
            "location": 303,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_block": {
            "name": "get_block",
            "location": 306,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "block_hash": []
            }
        },
        "Client.get_ballot_list": {
            "name": "get_ballot_list",
            "location": 309,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_ballots": {
            "name": "get_ballots",
            "location": 312,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_current_period_kind": {
            "name": "get_current_period_kind",
            "location": 315,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_current_proposal": {
            "name": "get_current_proposal",
            "location": 319,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_current_quorum": {
            "name": "get_current_quorum",
            "location": 323,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_listings": {
            "name": "get_listings",
            "location": 326,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_proposals": {
            "name": "get_proposals",
            "location": 329,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_protocol": {
            "name": "get_protocol",
            "location": 332,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "params": []
            }
        },
        "Client.get_period_position": {
            "name": "get_period_position",
            "location": 337,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.get_level": {
            "name": "get_level",
            "location": 342,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "params": []
            }
        },
        "Client.wait_for_inclusion": {
            "name": "wait_for_inclusion",
            "location": 347,
            "return": [
                "client_output.WaitForResult"
            ],
            "arguments": {
                "self": [],
                "operation_hash": [],
                "branch": [],
                "args": []
            }
        },
        "Client.inject_protocol": {
            "name": "inject_protocol",
            "location": 360,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "proto": []
            }
        },
        "Client.list_protocols": {
            "name": "list_protocols",
            "location": 363,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.submit_proposals": {
            "name": "submit_proposals",
            "location": 367,
            "return": [
                "client_output.SubmitProposalsResult"
            ],
            "arguments": {
                "self": [],
                "account": [],
                "protos": []
            }
        },
        "Client.submit_ballot": {
            "name": "submit_ballot",
            "location": 374,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "account": [],
                "proto": [],
                "vote": []
            }
        },
        "Client.bootstrapped": {
            "name": "bootstrapped",
            "location": 380,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client.cleanup": {
            "name": "cleanup",
            "location": 383,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tezos-flask-master/client/client_output.py": {
        "extract_rpc_answer": {
            "name": "extract_rpc_answer",
            "location": 132,
            "return": [
                "Any"
            ],
            "arguments": {
                "client_output": []
            }
        },
        "extract_balance": {
            "name": "extract_balance",
            "location": 143,
            "return": [
                "float"
            ],
            "arguments": {
                "client_output": []
            }
        },
        "extract_protocols": {
            "name": "extract_protocols",
            "location": 151,
            "return": [
                "Any"
            ],
            "arguments": {
                "client_output": []
            }
        },
        "InvalidClientOutput.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_output": []
            }
        },
        "EndorseResult.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_output": []
            }
        },
        "TransferResult.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_output": []
            }
        },
        "GetReceiptResult.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_output": []
            }
        },
        "RunScriptResult.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_output": []
            }
        },
        "OriginationResult.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_output": []
            }
        },
        "SubmitProposalsResult.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_output": []
            }
        },
        "BakeForResult.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_output": []
            }
        },
        "ActivationResult.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_output": []
            }
        },
        "WaitForResult.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_output": []
            }
        }
    },
    "tezos-flask-master/client/__init__.py": {},
    "tezos-flask-master/tools/constants.py": {},
    "tezos-flask-master/tools/paths.py": {},
    "tezos-flask-master/tools/utils.py": {
        "retry": {
            "name": "retry",
            "location": 18,
            "return": [
                "Callable[([Any], Any)]"
            ],
            "arguments": {
                "timeout": [],
                "attempts": []
            }
        },
        "check_block_contains_operations": {
            "name": "check_block_contains_operations",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "client": [],
                "operation_hashes": []
            }
        },
        "check_mempool_contains_operations": {
            "name": "check_mempool_contains_operations",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "client": [],
                "operation_hashes": []
            }
        },
        "check_protocol": {
            "name": "check_protocol",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "client": [],
                "proto": [],
                "params": []
            }
        },
        "check_level": {
            "name": "check_level",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "client": [],
                "level": []
            }
        },
        "check_level_greater_than": {
            "name": "check_level_greater_than",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "client": [],
                "level": []
            }
        },
        "check_operation_in_receipt": {
            "name": "check_operation_in_receipt",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "client": [],
                "operation_hash": [],
                "check_previous": []
            }
        },
        "synchronize": {
            "name": "synchronize",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "clients": [],
                "max_diff": []
            }
        },
        "get_block_hash": {
            "name": "get_block_hash",
            "location": 95,
            "return": [
                "str"
            ],
            "arguments": {
                "client": [],
                "level": []
            }
        },
        "all_blocks": {
            "name": "all_blocks",
            "location": 109,
            "return": [
                "list"
            ],
            "arguments": {
                "client": []
            }
        },
        "operations_hash_from_block": {
            "name": "operations_hash_from_block",
            "location": 122,
            "return": [
                "list"
            ],
            "arguments": {
                "block": []
            }
        },
        "check_logs": {
            "name": "check_logs",
            "location": 131,
            "return": [
                "bool"
            ],
            "arguments": {
                "logs": [],
                "pattern": []
            }
        },
        "check_logs_counts": {
            "name": "check_logs_counts",
            "location": 142,
            "return": [
                "int"
            ],
            "arguments": {
                "logs": [],
                "pattern": []
            }
        },
        "activate_alpha": {
            "name": "activate_alpha",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "client": [],
                "parameters": []
            }
        },
        "pprint": {
            "name": "pprint",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "json_data": []
            }
        },
        "rpc": {
            "name": "rpc",
            "location": 165,
            "return": [
                "requests.models.Response"
            ],
            "arguments": {
                "server": [],
                "port": [],
                "verb": [],
                "path": [],
                "data": [],
                "headers": []
            }
        },
        "sign": {
            "name": "sign",
            "location": 200,
            "return": [
                "Any"
            ],
            "arguments": {
                "data": [],
                "secret_key": []
            }
        },
        "b58_key_to_hex": {
            "name": "b58_key_to_hex",
            "location": 220,
            "return": [
                "Any"
            ],
            "arguments": {
                "b58_key": []
            }
        },
        "b58_sig_to_hex": {
            "name": "b58_sig_to_hex",
            "location": 233,
            "return": [
                "Any"
            ],
            "arguments": {
                "b58_sig": []
            }
        },
        "hex_sig_to_b58": {
            "name": "hex_sig_to_b58",
            "location": 246,
            "return": [
                "Any"
            ],
            "arguments": {
                "hexsig": []
            }
        },
        "sign_operation": {
            "name": "sign_operation",
            "location": 269,
            "return": [
                "Any"
            ],
            "arguments": {
                "encoded_operation": [],
                "secret_key": []
            }
        },
        "retry.decorator_retry": {
            "name": "decorator_retry",
            "location": 28,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "hex_sig_to_b58.sha256": {
            "name": "sha256",
            "location": 255,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "retry.decorator_retry.wrapper": {
            "name": "wrapper",
            "location": 29,
            "return": [],
            "arguments": {}
        }
    },
    "tezos-flask-master/tools/__init__.py": {}
}
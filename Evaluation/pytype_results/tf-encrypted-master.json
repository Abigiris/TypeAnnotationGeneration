{
    "tf-encrypted-master/setup.py": {},
    "tf-encrypted-master/bin/data_preprocessing.py": {
        "data_prep_from_saved_model": {
            "name": "data_prep_from_saved_model",
            "location": 12,
            "return": [],
            "arguments": {
                "graph_def": [],
                "data_filenames": [],
                "batch_size": [],
                "data_prep_start_node": [],
                "data_prep_end_node": []
            }
        },
        "list_files_from_dir": {
            "name": "list_files_from_dir",
            "location": 47,
            "return": [],
            "arguments": {
                "directory": []
            }
        }
    },
    "tf-encrypted-master/docs/source/conf.py": {},
    "tf-encrypted-master/examples/bloom/regressor.py": {
        "BloomRegressor.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BloomRegressor.estimator_fn": {
            "name": "estimator_fn",
            "location": 22,
            "return": [],
            "arguments": {
                "cls": [],
                "x_p": [],
                "y_p": []
            }
        },
        "BloomRegressor.fit": {
            "name": "fit",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "training_players": [],
                "summary": [],
                "validation_split": []
            }
        },
        "BloomRegressor.predict": {
            "name": "predict",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "BloomRegressor.evaluate": {
            "name": "evaluate",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "testing_players": []
            }
        },
        "BloomRegressor.__getattribute__": {
            "name": "__getattribute__",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "attr": []
            }
        },
        "BloomRegressor.summarize": {
            "name": "summarize",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "summary_level": []
            }
        },
        "DataOwner.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "player_name": [],
                "num_features": [],
                "training_set_size": [],
                "test_set_size": []
            }
        },
        "DataOwner._build_training_data": {
            "name": "_build_training_data",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataOwner._build_testing_data": {
            "name": "_build_testing_data",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataOwner.compute_estimators": {
            "name": "compute_estimators",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "estimator_fn": []
            }
        },
        "DataOwner._build_training_data.cast": {
            "name": "cast",
            "location": 108,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "DataOwner._build_testing_data.cast": {
            "name": "cast",
            "location": 127,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        }
    },
    "tf-encrypted-master/examples/bloom/__init__.py": {},
    "tf-encrypted-master/examples/bloom/__main__.py": {},
    "tf-encrypted-master/examples/deprecated/bench_conv2d_sigmoid.py": {
        "provide_input_conv11weights": {
            "name": "provide_input_conv11weights",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "provide_input_conv12weights": {
            "name": "provide_input_conv12weights",
            "location": 73,
            "return": [],
            "arguments": {}
        },
        "provide_input_pool1weights": {
            "name": "provide_input_pool1weights",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "provide_input_conv21weights": {
            "name": "provide_input_conv21weights",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "provide_input_conv22weights": {
            "name": "provide_input_conv22weights",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "provide_input_pool2weights": {
            "name": "provide_input_pool2weights",
            "location": 93,
            "return": [],
            "arguments": {}
        },
        "provide_input_conv31weights": {
            "name": "provide_input_conv31weights",
            "location": 98,
            "return": [],
            "arguments": {}
        },
        "provide_input_conv32weights": {
            "name": "provide_input_conv32weights",
            "location": 103,
            "return": [],
            "arguments": {}
        },
        "provide_input_conv33weights": {
            "name": "provide_input_conv33weights",
            "location": 108,
            "return": [],
            "arguments": {}
        },
        "provide_input_pool3weights": {
            "name": "provide_input_pool3weights",
            "location": 113,
            "return": [],
            "arguments": {}
        },
        "provide_input_conv41weights": {
            "name": "provide_input_conv41weights",
            "location": 118,
            "return": [],
            "arguments": {}
        },
        "provide_input_conv42weights": {
            "name": "provide_input_conv42weights",
            "location": 123,
            "return": [],
            "arguments": {}
        },
        "provide_input_conv43weights": {
            "name": "provide_input_conv43weights",
            "location": 128,
            "return": [],
            "arguments": {}
        },
        "provide_input_pool4weights": {
            "name": "provide_input_pool4weights",
            "location": 133,
            "return": [],
            "arguments": {}
        },
        "provide_input_conv51weights": {
            "name": "provide_input_conv51weights",
            "location": 138,
            "return": [],
            "arguments": {}
        },
        "provide_input_conv52weights": {
            "name": "provide_input_conv52weights",
            "location": 143,
            "return": [],
            "arguments": {}
        },
        "provide_input_conv53weights": {
            "name": "provide_input_conv53weights",
            "location": 148,
            "return": [],
            "arguments": {}
        },
        "provide_input_pool5weights": {
            "name": "provide_input_pool5weights",
            "location": 153,
            "return": [],
            "arguments": {}
        },
        "provide_input_prediction": {
            "name": "provide_input_prediction",
            "location": 158,
            "return": [],
            "arguments": {}
        },
        "receive_output": {
            "name": "receive_output",
            "location": 163,
            "return": [],
            "arguments": {
                "tensor": []
            }
        }
    },
    "tf-encrypted-master/examples/deprecated/convert.py": {
        "export_cnn": {
            "name": "export_cnn",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "provide_input": {
            "name": "provide_input",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "receive_output": {
            "name": "receive_output",
            "location": 53,
            "return": [],
            "arguments": {
                "tensor": []
            }
        }
    },
    "tf-encrypted-master/examples/deprecated/export_2hlayers_model.py": {},
    "tf-encrypted-master/examples/deprecated/export_2inputs_model.py": {},
    "tf-encrypted-master/examples/deprecated/inputs.py": {
        "provide_weights": {
            "name": "provide_weights",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "provide_input": {
            "name": "provide_input",
            "location": 34,
            "return": [],
            "arguments": {}
        },
        "receive_output": {
            "name": "receive_output",
            "location": 39,
            "return": [],
            "arguments": {
                "prediction": []
            }
        }
    },
    "tf-encrypted-master/examples/deprecated/int100.py": {},
    "tf-encrypted-master/examples/deprecated/int32.py": {},
    "tf-encrypted-master/examples/deprecated/matmul.py": {},
    "tf-encrypted-master/examples/deprecated/mnist_deep_cnn.py": {
        "deepnn": {
            "name": "deepnn",
            "location": 29,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "conv2d": {
            "name": "conv2d",
            "location": 83,
            "return": [],
            "arguments": {
                "x": [],
                "W": []
            }
        },
        "avg_pool_2x2": {
            "name": "avg_pool_2x2",
            "location": 88,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "weight_variable": {
            "name": "weight_variable",
            "location": 93,
            "return": [],
            "arguments": {
                "shape": []
            }
        },
        "bias_variable": {
            "name": "bias_variable",
            "location": 99,
            "return": [],
            "arguments": {
                "shape": []
            }
        },
        "main": {
            "name": "main",
            "location": 105,
            "return": [],
            "arguments": {
                "_": []
            }
        },
        "export_to_pb": {
            "name": "export_to_pb",
            "location": 158,
            "return": [],
            "arguments": {
                "sess": [],
                "x": [],
                "filename": []
            }
        }
    },
    "tf-encrypted-master/examples/deprecated/pond-simple.py": {},
    "tf-encrypted-master/examples/deprecated/securenn-playground.py": {},
    "tf-encrypted-master/examples/federated-learning/convert.py": {
        "encode_image": {
            "name": "encode_image",
            "location": 10,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "decode_image": {
            "name": "decode_image",
            "location": 16,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "encode_label": {
            "name": "encode_label",
            "location": 23,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "decode_label": {
            "name": "decode_label",
            "location": 28,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "encode": {
            "name": "encode",
            "location": 33,
            "return": [],
            "arguments": {
                "image": [],
                "label": []
            }
        },
        "decode": {
            "name": "decode",
            "location": 40,
            "return": [],
            "arguments": {
                "serialized_example": []
            }
        },
        "normalize": {
            "name": "normalize",
            "location": 54,
            "return": [],
            "arguments": {
                "image": [],
                "label": []
            }
        },
        "get_data_from_tfrecord": {
            "name": "get_data_from_tfrecord",
            "location": 61,
            "return": [],
            "arguments": {
                "filename": [],
                "batch_size": []
            }
        }
    },
    "tf-encrypted-master/examples/federated-learning/download.py": {
        "save_training_data": {
            "name": "save_training_data",
            "location": 11,
            "return": [],
            "arguments": {
                "images": [],
                "labels": [],
                "filename": []
            }
        }
    },
    "tf-encrypted-master/examples/federated-learning/run.py": {
        "ModelOwner.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "player_name": []
            }
        },
        "ModelOwner._initialize_weights": {
            "name": "_initialize_weights",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelOwner._build_model": {
            "name": "_build_model",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "ModelOwner.build_update_step": {
            "name": "build_update_step",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "ModelOwner._build_validation_step": {
            "name": "_build_validation_step",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "ModelOwner._build_data_pipeline": {
            "name": "_build_data_pipeline",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelOwner.update_model": {
            "name": "update_model",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataOwner.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "player_name": [],
                "local_data_file": [],
                "build_update_step": []
            }
        },
        "DataOwner._build_data_pipeline": {
            "name": "_build_data_pipeline",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataOwner.compute_gradient": {
            "name": "compute_gradient",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelOwner._build_data_pipeline.normalize": {
            "name": "normalize",
            "location": 84,
            "return": [],
            "arguments": {
                "image": [],
                "label": []
            }
        },
        "DataOwner._build_data_pipeline.normalize": {
            "name": "normalize",
            "location": 149,
            "return": [],
            "arguments": {
                "image": [],
                "label": []
            }
        }
    },
    "tf-encrypted-master/examples/house-credit-default/get_input.py": {},
    "tf-encrypted-master/examples/house-credit-default/main.py": {
        "export_to_pb": {
            "name": "export_to_pb",
            "location": 48,
            "return": [],
            "arguments": {
                "sess": [],
                "x": [],
                "filename": []
            }
        },
        "print_nodes": {
            "name": "print_nodes",
            "location": 61,
            "return": [],
            "arguments": {
                "graph": []
            }
        },
        "build_model": {
            "name": "build_model",
            "location": 66,
            "return": [],
            "arguments": {
                "input_shape": []
            }
        },
        "train": {
            "name": "train",
            "location": 85,
            "return": [],
            "arguments": {
                "train_x_df": [],
                "train_y_df": []
            }
        },
        "predict_preamble": {
            "name": "predict_preamble",
            "location": 143,
            "return": [],
            "arguments": {
                "train_x_df": [],
                "train_y_df": []
            }
        },
        "predict": {
            "name": "predict",
            "location": 160,
            "return": [],
            "arguments": {
                "train_x_df": [],
                "train_y_df": []
            }
        },
        "benchmark": {
            "name": "benchmark",
            "location": 166,
            "return": [],
            "arguments": {
                "train_x_df": [],
                "train_y_df": []
            }
        },
        "main": {
            "name": "main",
            "location": 183,
            "return": [],
            "arguments": {}
        }
    },
    "tf-encrypted-master/examples/house-credit-default/utils.py": {
        "data_prep": {
            "name": "data_prep",
            "location": 7,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "save_input": {
            "name": "save_input",
            "location": 26,
            "return": [],
            "arguments": {
                "filename": [],
                "output": []
            }
        },
        "read_one_row": {
            "name": "read_one_row",
            "location": 30,
            "return": [],
            "arguments": {
                "row": [],
                "train_x_df": []
            }
        }
    },
    "tf-encrypted-master/examples/logistic/common.py": {
        "LogisticRegression.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "num_features": []
            }
        },
        "LogisticRegression.weights": {
            "name": "weights",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LogisticRegression.forward": {
            "name": "forward",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "LogisticRegression.backward": {
            "name": "backward",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "dy": [],
                "learning_rate": []
            }
        },
        "LogisticRegression.loss_grad": {
            "name": "loss_grad",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "y": [],
                "y_hat": []
            }
        },
        "LogisticRegression.fit_batch": {
            "name": "fit_batch",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "LogisticRegression.fit": {
            "name": "fit",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "sess": [],
                "x": [],
                "y": [],
                "num_batches": []
            }
        },
        "LogisticRegression.evaluate": {
            "name": "evaluate",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "sess": [],
                "x": [],
                "y": [],
                "data_owner": []
            }
        },
        "DataOwner.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "player_name": [],
                "num_features": [],
                "training_set_size": [],
                "test_set_size": [],
                "batch_size": []
            }
        },
        "DataOwner.initializer": {
            "name": "initializer",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataOwner.provide_training_data": {
            "name": "provide_training_data",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataOwner.provide_testing_data": {
            "name": "provide_testing_data",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelOwner.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "player_name": []
            }
        },
        "ModelOwner.receive_weights": {
            "name": "receive_weights",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictionClient.__init__": {
            "name": "__init__",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "player_name": [],
                "num_features": []
            }
        },
        "PredictionClient.provide_input": {
            "name": "provide_input",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictionClient.receive_output": {
            "name": "receive_output",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "result": []
            }
        },
        "LogisticRegression.evaluate.print_accuracy": {
            "name": "print_accuracy",
            "location": 61,
            "return": [],
            "arguments": {
                "y_hat": [],
                "y": []
            }
        },
        "DataOwner.provide_training_data.norm": {
            "name": "norm",
            "location": 104,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "DataOwner.provide_testing_data.norm": {
            "name": "norm",
            "location": 137,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        }
    },
    "tf-encrypted-master/examples/logistic/data.py": {
        "norm": {
            "name": "norm",
            "location": 10,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "gen_training_input": {
            "name": "gen_training_input",
            "location": 14,
            "return": [],
            "arguments": {
                "total_size": [],
                "nb_feats": [],
                "batch_size": []
            }
        },
        "gen_test_input": {
            "name": "gen_test_input",
            "location": 34,
            "return": [],
            "arguments": {
                "total_size": [],
                "nb_feats": [],
                "batch_size": []
            }
        }
    },
    "tf-encrypted-master/examples/logistic/prediction_joint.py": {},
    "tf-encrypted-master/examples/logistic/prediction_single.py": {},
    "tf-encrypted-master/examples/logistic/training_joint.py": {},
    "tf-encrypted-master/examples/logistic/training_single.py": {},
    "tf-encrypted-master/examples/mnist/convert.py": {
        "encode_image": {
            "name": "encode_image",
            "location": 10,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "decode_image": {
            "name": "decode_image",
            "location": 16,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "encode_label": {
            "name": "encode_label",
            "location": 23,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "decode_label": {
            "name": "decode_label",
            "location": 28,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "encode": {
            "name": "encode",
            "location": 33,
            "return": [],
            "arguments": {
                "image": [],
                "label": []
            }
        },
        "decode": {
            "name": "decode",
            "location": 40,
            "return": [],
            "arguments": {
                "serialized_example": []
            }
        },
        "normalize": {
            "name": "normalize",
            "location": 54,
            "return": [],
            "arguments": {
                "image": [],
                "label": []
            }
        },
        "get_data_from_tfrecord": {
            "name": "get_data_from_tfrecord",
            "location": 61,
            "return": [],
            "arguments": {
                "filename": [],
                "batch_size": []
            }
        }
    },
    "tf-encrypted-master/examples/mnist/download.py": {
        "save_training_data": {
            "name": "save_training_data",
            "location": 11,
            "return": [],
            "arguments": {
                "images": [],
                "labels": [],
                "filename": []
            }
        }
    },
    "tf-encrypted-master/examples/mnist/run.py": {
        "ModelOwner.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "player_name": [],
                "local_data_file": []
            }
        },
        "ModelOwner._build_data_pipeline": {
            "name": "_build_data_pipeline",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelOwner._build_training_graph": {
            "name": "_build_training_graph",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "training_data": []
            }
        },
        "ModelOwner.provide_weights": {
            "name": "provide_weights",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictionClient.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "player_name": [],
                "local_data_file": []
            }
        },
        "PredictionClient._build_data_pipeline": {
            "name": "_build_data_pipeline",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictionClient.provide_input": {
            "name": "provide_input",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictionClient.receive_output": {
            "name": "receive_output",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "logits": []
            }
        },
        "ModelOwner._build_data_pipeline.normalize": {
            "name": "normalize",
            "location": 52,
            "return": [],
            "arguments": {
                "image": [],
                "label": []
            }
        },
        "ModelOwner._build_data_pipeline.flatten": {
            "name": "flatten",
            "location": 56,
            "return": [],
            "arguments": {
                "image": [],
                "label": []
            }
        },
        "ModelOwner._build_training_graph.loss": {
            "name": "loss",
            "location": 81,
            "return": [],
            "arguments": {
                "model": [],
                "inputs": [],
                "targets": []
            }
        },
        "ModelOwner._build_training_graph.grad": {
            "name": "grad",
            "location": 88,
            "return": [],
            "arguments": {
                "model": [],
                "inputs": [],
                "targets": []
            }
        },
        "ModelOwner._build_training_graph.loop_body": {
            "name": "loop_body",
            "location": 92,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "PredictionClient._build_data_pipeline.normalize": {
            "name": "normalize",
            "location": 139,
            "return": [],
            "arguments": {
                "image": [],
                "label": []
            }
        }
    },
    "tf-encrypted-master/examples/notebooks/utils.py": {
        "print_in_notebook": {
            "name": "print_in_notebook",
            "location": 9,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "tf-encrypted-master/examples/notebooks/keras-training/common.py": {
        "DataOwner.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "player_name": [],
                "num_features": [],
                "training_set_size": [],
                "test_set_size": [],
                "batch_size": []
            }
        },
        "DataOwner.initializer": {
            "name": "initializer",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataOwner.provide_training_data": {
            "name": "provide_training_data",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataOwner.provide_testing_data": {
            "name": "provide_testing_data",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataOwner.provide_training_data.norm": {
            "name": "norm",
            "location": 34,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "DataOwner.provide_testing_data.norm": {
            "name": "norm",
            "location": 67,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        }
    },
    "tf-encrypted-master/examples/securenn/conv_convert.py": {
        "encode_image": {
            "name": "encode_image",
            "location": 12,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "decode_image": {
            "name": "decode_image",
            "location": 18,
            "return": [],
            "arguments": {
                "value": [],
                "flattened": []
            }
        },
        "encode_label": {
            "name": "encode_label",
            "location": 26,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "decode_label": {
            "name": "decode_label",
            "location": 31,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "encode": {
            "name": "encode",
            "location": 36,
            "return": [],
            "arguments": {
                "image": [],
                "label": []
            }
        },
        "decode": {
            "name": "decode",
            "location": 43,
            "return": [],
            "arguments": {
                "serialized_example": [],
                "flattened": []
            }
        },
        "normalize": {
            "name": "normalize",
            "location": 57,
            "return": [],
            "arguments": {
                "image": [],
                "label": []
            }
        },
        "get_data_from_tfrecord": {
            "name": "get_data_from_tfrecord",
            "location": 64,
            "return": [],
            "arguments": {
                "filename": [],
                "batch_size": [],
                "flattened": []
            }
        }
    },
    "tf-encrypted-master/examples/securenn/download.py": {
        "save_training_data": {
            "name": "save_training_data",
            "location": 11,
            "return": [],
            "arguments": {
                "images": [],
                "labels": [],
                "filename": []
            }
        }
    },
    "tf-encrypted-master/examples/securenn/network_a.py": {
        "ModelTrainer.cond": {
            "name": "cond",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "max_iter": [],
                "nb_epochs": [],
                "avg_loss": []
            }
        },
        "ModelTrainer.build_training_graph": {
            "name": "build_training_graph",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "training_data": []
            }
        },
        "ModelTrainer.provide_input": {
            "name": "provide_input",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictionClient.provide_input": {
            "name": "provide_input",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictionClient.receive_output": {
            "name": "receive_output",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "likelihoods": [],
                "y_true": []
            }
        },
        "ModelTrainer.cond.true_fn": {
            "name": "true_fn",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "ModelTrainer.cond.false_fn": {
            "name": "false_fn",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "ModelTrainer.build_training_graph.loss": {
            "name": "loss",
            "location": 82,
            "return": [],
            "arguments": {
                "model": [],
                "inputs": [],
                "targets": []
            }
        },
        "ModelTrainer.build_training_graph.grad": {
            "name": "grad",
            "location": 89,
            "return": [],
            "arguments": {
                "model": [],
                "inputs": [],
                "targets": []
            }
        },
        "ModelTrainer.build_training_graph.loop_body": {
            "name": "loop_body",
            "location": 94,
            "return": [],
            "arguments": {
                "i": [],
                "max_iter": [],
                "nb_epochs": [],
                "avg_loss": []
            }
        },
        "ModelTrainer.build_training_graph.loop_body.true_fn": {
            "name": "true_fn",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "ModelTrainer.build_training_graph.loop_body.false_fn": {
            "name": "false_fn",
            "location": 104,
            "return": [],
            "arguments": {}
        }
    },
    "tf-encrypted-master/examples/securenn/network_b.py": {
        "ModelTrainer.cond": {
            "name": "cond",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "max_iter": [],
                "nb_epochs": [],
                "avg_loss": []
            }
        },
        "ModelTrainer.build_training_graph": {
            "name": "build_training_graph",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "training_data": []
            }
        },
        "ModelTrainer.provide_input": {
            "name": "provide_input",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictionClient.provide_input": {
            "name": "provide_input",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictionClient.receive_output": {
            "name": "receive_output",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "likelihoods": [],
                "y_true": []
            }
        },
        "ModelTrainer.cond.true_fn": {
            "name": "true_fn",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "ModelTrainer.cond.false_fn": {
            "name": "false_fn",
            "location": 70,
            "return": [],
            "arguments": {}
        },
        "ModelTrainer.build_training_graph.loss": {
            "name": "loss",
            "location": 106,
            "return": [],
            "arguments": {
                "model": [],
                "inputs": [],
                "targets": []
            }
        },
        "ModelTrainer.build_training_graph.grad": {
            "name": "grad",
            "location": 113,
            "return": [],
            "arguments": {
                "model": [],
                "inputs": [],
                "targets": []
            }
        },
        "ModelTrainer.build_training_graph.loop_body": {
            "name": "loop_body",
            "location": 118,
            "return": [],
            "arguments": {
                "i": [],
                "max_iter": [],
                "nb_epochs": [],
                "avg_loss": []
            }
        },
        "ModelTrainer.build_training_graph.loop_body.true_fn": {
            "name": "true_fn",
            "location": 130,
            "return": [],
            "arguments": {}
        },
        "ModelTrainer.build_training_graph.loop_body.false_fn": {
            "name": "false_fn",
            "location": 133,
            "return": [],
            "arguments": {}
        }
    },
    "tf-encrypted-master/examples/securenn/network_c.py": {
        "ModelTrainer.cond": {
            "name": "cond",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "max_iter": [],
                "nb_epochs": [],
                "avg_loss": []
            }
        },
        "ModelTrainer.build_training_graph": {
            "name": "build_training_graph",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "training_data": []
            }
        },
        "ModelTrainer.provide_input": {
            "name": "provide_input",
            "location": 151,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictionClient.provide_input": {
            "name": "provide_input",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictionClient.receive_output": {
            "name": "receive_output",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "likelihoods": [],
                "y_true": []
            }
        },
        "ModelTrainer.cond.true_fn": {
            "name": "true_fn",
            "location": 65,
            "return": [],
            "arguments": {}
        },
        "ModelTrainer.cond.false_fn": {
            "name": "false_fn",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "ModelTrainer.build_training_graph.loss": {
            "name": "loss",
            "location": 106,
            "return": [],
            "arguments": {
                "model": [],
                "inputs": [],
                "targets": []
            }
        },
        "ModelTrainer.build_training_graph.grad": {
            "name": "grad",
            "location": 113,
            "return": [],
            "arguments": {
                "model": [],
                "inputs": [],
                "targets": []
            }
        },
        "ModelTrainer.build_training_graph.loop_body": {
            "name": "loop_body",
            "location": 118,
            "return": [],
            "arguments": {
                "i": [],
                "max_iter": [],
                "nb_epochs": [],
                "avg_loss": []
            }
        },
        "ModelTrainer.build_training_graph.loop_body.true_fn": {
            "name": "true_fn",
            "location": 130,
            "return": [],
            "arguments": {}
        },
        "ModelTrainer.build_training_graph.loop_body.false_fn": {
            "name": "false_fn",
            "location": 133,
            "return": [],
            "arguments": {}
        }
    },
    "tf-encrypted-master/examples/securenn/network_d.py": {
        "ModelTrainer.cond": {
            "name": "cond",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "max_iter": [],
                "nb_epochs": [],
                "avg_loss": []
            }
        },
        "ModelTrainer.build_training_graph": {
            "name": "build_training_graph",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "training_data": []
            }
        },
        "ModelTrainer.provide_input": {
            "name": "provide_input",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictionClient.provide_input": {
            "name": "provide_input",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictionClient.receive_output": {
            "name": "receive_output",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "likelihoods": [],
                "y_true": []
            }
        },
        "ModelTrainer.cond.true_fn": {
            "name": "true_fn",
            "location": 66,
            "return": [],
            "arguments": {}
        },
        "ModelTrainer.cond.false_fn": {
            "name": "false_fn",
            "location": 70,
            "return": [],
            "arguments": {}
        },
        "ModelTrainer.build_training_graph.loss": {
            "name": "loss",
            "location": 104,
            "return": [],
            "arguments": {
                "model": [],
                "inputs": [],
                "targets": []
            }
        },
        "ModelTrainer.build_training_graph.grad": {
            "name": "grad",
            "location": 111,
            "return": [],
            "arguments": {
                "model": [],
                "inputs": [],
                "targets": []
            }
        },
        "ModelTrainer.build_training_graph.loop_body": {
            "name": "loop_body",
            "location": 117,
            "return": [],
            "arguments": {
                "i": [],
                "max_iter": [],
                "nb_epochs": [],
                "avg_loss": []
            }
        },
        "ModelTrainer.build_training_graph.loop_body.true_fn": {
            "name": "true_fn",
            "location": 129,
            "return": [],
            "arguments": {}
        },
        "ModelTrainer.build_training_graph.loop_body.false_fn": {
            "name": "false_fn",
            "location": 132,
            "return": [],
            "arguments": {}
        }
    },
    "tf-encrypted-master/examples/simple-average/run.py": {
        "provide_input": {
            "name": "provide_input",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "receive_output": {
            "name": "receive_output",
            "location": 27,
            "return": [],
            "arguments": {
                "average": []
            }
        }
    },
    "tf-encrypted-master/operations/__init__.py": {},
    "tf-encrypted-master/operations/secure_random/test_secure_random.py": {
        "TestSeededRandomUniform.test_int32_return": {
            "name": "test_int32_return",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSeededRandomUniform.test_int64_return": {
            "name": "test_int64_return",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSeededRandomUniform.test_min_max_range": {
            "name": "test_min_max_range",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSeededRandomUniform.test_invalid_max_min": {
            "name": "test_invalid_max_min",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSeededRandomUniform.test_negative_numbers": {
            "name": "test_negative_numbers",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRandomUniform.test_min_max_range": {
            "name": "test_min_max_range",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRandomUniform.test_small_range": {
            "name": "test_small_range",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRandomUniform.test_neg_range": {
            "name": "test_neg_range",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSeed.test_seed": {
            "name": "test_seed",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tf-encrypted-master/operations/secure_random/__init__.py": {},
    "tf-encrypted-master/primitives/setup.py": {},
    "tf-encrypted-master/primitives/tf_encrypted/primitives/__init__.py": {},
    "tf-encrypted-master/primitives/tf_encrypted/primitives/paillier/primitives.py": {
        "_import_maybe_limbs": {
            "name": "_import_maybe_limbs",
            "location": 10,
            "return": [],
            "arguments": {
                "tensor": []
            }
        },
        "_export_maybe_limbs": {
            "name": "_export_maybe_limbs",
            "location": 20,
            "return": [],
            "arguments": {
                "tensor": [],
                "dtype": []
            }
        },
        "gen_keypair": {
            "name": "gen_keypair",
            "location": 63,
            "return": [],
            "arguments": {
                "bitlength": []
            }
        },
        "gen_randomness": {
            "name": "gen_randomness",
            "location": 78,
            "return": [],
            "arguments": {
                "ek": [],
                "shape": []
            }
        },
        "encrypt": {
            "name": "encrypt",
            "location": 98,
            "return": [],
            "arguments": {
                "ek": [],
                "plaintext": [],
                "randomness": []
            }
        },
        "decrypt": {
            "name": "decrypt",
            "location": 113,
            "return": [],
            "arguments": {
                "dk": [],
                "ciphertext": [],
                "dtype": []
            }
        },
        "refresh": {
            "name": "refresh",
            "location": 128,
            "return": [],
            "arguments": {
                "ek": [],
                "ciphertext": []
            }
        },
        "add": {
            "name": "add",
            "location": 136,
            "return": [],
            "arguments": {
                "ek": [],
                "lhs": [],
                "rhs": [],
                "do_refresh": []
            }
        },
        "mul": {
            "name": "mul",
            "location": 149,
            "return": [],
            "arguments": {
                "ek": [],
                "lhs": [],
                "rhs": [],
                "do_refresh": []
            }
        },
        "EncryptionKey.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "EncryptionKey.export": {
            "name": "export",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "dtype": []
            }
        },
        "DecryptionKey.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "p": [],
                "q": []
            }
        },
        "DecryptionKey.export": {
            "name": "export",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "dtype": []
            }
        },
        "Randomness.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "raw_randomness": []
            }
        },
        "Randomness.export": {
            "name": "export",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "dtype": []
            }
        },
        "Ciphertext.__init__": {
            "name": "__init__",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "ek": [],
                "raw_ciphertext": []
            }
        },
        "Ciphertext.export": {
            "name": "export",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "dtype": []
            }
        },
        "Ciphertext.__add__": {
            "name": "__add__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Ciphertext.__mul__": {
            "name": "__mul__",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "tf-encrypted-master/primitives/tf_encrypted/primitives/paillier/primitives_test.py": {
        "EncryptionTest.test_export": {
            "name": "test_export",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "run_eagerly": [],
                "export_dtype": [],
                "export_expansion": []
            }
        },
        "EncryptionTest.test_correctness": {
            "name": "test_correctness",
            "location": 60,
            "return": [],
            "arguments": {
                "self": [],
                "run_eagerly": []
            }
        },
        "EncryptionTest.test_encrypt_decrypt": {
            "name": "test_encrypt_decrypt",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "run_eagerly": [],
                "x": [],
                "dtype": []
            }
        },
        "EncryptionTest.test_add": {
            "name": "test_add",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "run_eagerly": [],
                "dtype": [],
                "x0": [],
                "x1": []
            }
        }
    },
    "tf-encrypted-master/primitives/tf_encrypted/primitives/paillier/__init__.py": {},
    "tf-encrypted-master/primitives/tf_encrypted/primitives/sodium/__init__.py": {},
    "tf-encrypted-master/primitives/tf_encrypted/primitives/sodium/python/easy_box.py": {
        "gen_keypair": {
            "name": "gen_keypair",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "gen_nonce": {
            "name": "gen_nonce",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "seal_detached": {
            "name": "seal_detached",
            "location": 52,
            "return": [],
            "arguments": {
                "plaintext": [],
                "nonce": [],
                "publickey_receiver": [],
                "secretkey_sender": []
            }
        },
        "open_detached": {
            "name": "open_detached",
            "location": 64,
            "return": [],
            "arguments": {
                "ciphertext": [],
                "mac": [],
                "nonce": [],
                "public_sender": [],
                "secretkey_receiver": [],
                "plaintext_dtype": []
            }
        },
        "PublicKey.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "raw_pk": []
            }
        },
        "SecretKey.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "raw_sk": []
            }
        },
        "Nonce.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "raw_nonce": []
            }
        },
        "Ciphertext.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "raw_ciphertext": []
            }
        },
        "Mac.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "raw_mac": []
            }
        }
    },
    "tf-encrypted-master/primitives/tf_encrypted/primitives/sodium/python/easy_box_test.py": {
        "TestEasyBox.test_gen_keypair": {
            "name": "test_gen_keypair",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "run_eagerly": []
            }
        },
        "TestEasyBox.test_gen_nonce": {
            "name": "test_gen_nonce",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "run_eagerly": []
            }
        },
        "TestEasyBox.test_seal_and_open": {
            "name": "test_seal_and_open",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "run_eagerly": [],
                "m": [],
                "dtype": [],
                "dtype_size": []
            }
        }
    },
    "tf-encrypted-master/primitives/tf_encrypted/primitives/sodium/python/__init__.py": {},
    "tf-encrypted-master/primitives/tf_encrypted/test/execution_context.py": {
        "tf_execution_context": {
            "name": "tf_execution_context",
            "location": 39,
            "return": [],
            "arguments": {
                "run_eagerly": []
            }
        },
        "EagerExecutionContext.scope": {
            "name": "scope",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EagerExecutionContext.evaluate": {
            "name": "evaluate",
            "location": 10,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "GraphExecutionContext.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphExecutionContext.graph": {
            "name": "graph",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphExecutionContext.session": {
            "name": "session",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphExecutionContext.scope": {
            "name": "scope",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GraphExecutionContext.evaluate": {
            "name": "evaluate",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "tf-encrypted-master/primitives/tf_encrypted/test/execution_context_test.py": {
        "TestExecutionContext.test_tf_execution_mode": {
            "name": "test_tf_execution_mode",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "run_eagerly": []
            }
        }
    },
    "tf-encrypted-master/primitives/tf_encrypted/test/__init__.py": {},
    "tf-encrypted-master/tf_encrypted/config.py": {
        "tensorflow_supports_int64": {
            "name": "tensorflow_supports_int64",
            "location": 18,
            "return": [],
            "arguments": {}
        },
        "_get_docker_cpu_quota": {
            "name": "_get_docker_cpu_quota",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "get_config": {
            "name": "get_config",
            "location": 294,
            "return": [],
            "arguments": {}
        },
        "set_config": {
            "name": "set_config",
            "location": 299,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "Config.players": {
            "name": "players",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Config.get_player": {
            "name": "get_player",
            "location": 62,
            "return": [],
            "arguments": {
                "self": [],
                "name_or_player": []
            }
        },
        "Config.get_tf_config": {
            "name": "get_tf_config",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "log_device_placement": [],
                "disable_optimizations": []
            }
        },
        "Config.build_graph_options": {
            "name": "build_graph_options",
            "location": 76,
            "return": [],
            "arguments": {
                "cls": [],
                "disable_optimizations": []
            }
        },
        "LocalConfig.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "player_names": [],
                "job_name": [],
                "auto_add_unknown_players": []
            }
        },
        "LocalConfig.add_player": {
            "name": "add_player",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "LocalConfig.players": {
            "name": "players",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LocalConfig.get_player": {
            "name": "get_player",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "name_or_player": []
            }
        },
        "LocalConfig.get_players": {
            "name": "get_players",
            "location": 148,
            "return": [],
            "arguments": {
                "self": [],
                "names": []
            }
        },
        "LocalConfig.get_tf_config": {
            "name": "get_tf_config",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "log_device_placement": [],
                "disable_optimizations": []
            }
        },
        "RemoteConfig.__init__": {
            "name": "__init__",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "hostmap": [],
                "job_name": []
            }
        },
        "RemoteConfig.load": {
            "name": "load",
            "location": 203,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "RemoteConfig.save": {
            "name": "save",
            "location": 212,
            "return": [],
            "arguments": {
                "self": [],
                "filename": []
            }
        },
        "RemoteConfig.hostmap": {
            "name": "hostmap",
            "location": 221,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RemoteConfig.hosts": {
            "name": "hosts",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RemoteConfig.players": {
            "name": "players",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RemoteConfig.get_player": {
            "name": "get_player",
            "location": 234,
            "return": [],
            "arguments": {
                "self": [],
                "name_or_player": []
            }
        },
        "RemoteConfig.get_players": {
            "name": "get_players",
            "location": 243,
            "return": [],
            "arguments": {
                "self": [],
                "names": []
            }
        },
        "RemoteConfig.server": {
            "name": "server",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "start": []
            }
        },
        "RemoteConfig.get_tf_config": {
            "name": "get_tf_config",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "log_device_placement": [],
                "disable_optimizations": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/private_model.py": {
        "load_graph": {
            "name": "load_graph",
            "location": 45,
            "return": [],
            "arguments": {
                "model_file": [],
                "model_name": [],
                "batch_size": []
            }
        },
        "secure_model": {
            "name": "secure_model",
            "location": 86,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "PrivateModel.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "output_node": []
            }
        },
        "PrivateModel.private_predict": {
            "name": "private_predict",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "input_name": [],
                "tag": []
            }
        },
        "load_graph.scope": {
            "name": "scope",
            "location": 69,
            "return": [],
            "arguments": {
                "i": [],
                "spec": []
            }
        },
        "load_graph.scope.provide_input": {
            "name": "provide_input",
            "location": 70,
            "return": [],
            "arguments": {}
        }
    },
    "tf-encrypted-master/tf_encrypted/private_model_test.py": {
        "TestPrivateModel.test_private_model": {
            "name": "test_private_model",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSecureModel.setUp": {
            "name": "setUp",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSecureModel.tearDown": {
            "name": "tearDown",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSecureModel.test_secure_model": {
            "name": "test_secure_model",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSecureModel.test_secure_model_batch": {
            "name": "test_secure_model_batch",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPrivateModel.test_private_model.provide_input": {
            "name": "provide_input",
            "location": 17,
            "return": [],
            "arguments": {}
        }
    },
    "tf-encrypted-master/tf_encrypted/session.py": {
        "set_tfe_events_flag": {
            "name": "set_tfe_events_flag",
            "location": 135,
            "return": [],
            "arguments": {
                "monitor_events": []
            }
        },
        "set_tfe_trace_flag": {
            "name": "set_tfe_trace_flag",
            "location": 151,
            "return": [],
            "arguments": {
                "trace": []
            }
        },
        "set_log_directory": {
            "name": "set_log_directory",
            "location": 166,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "Session.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "graph": [],
                "config": [],
                "target": []
            }
        },
        "Session.run": {
            "name": "run",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "fetches": [],
                "feed_dict": [],
                "tag": [],
                "write_trace": [],
                "output_partition_graphs": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/utils.py": {
        "wrap_in_variables": {
            "name": "wrap_in_variables",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "flatten": {
            "name": "flatten",
            "location": 19,
            "return": [],
            "arguments": {
                "xs": []
            }
        },
        "reachable_nodes": {
            "name": "reachable_nodes",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "unwrap_fetches": {
            "name": "unwrap_fetches",
            "location": 69,
            "return": [],
            "arguments": {
                "fetches": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/__init__.py": {
        "_prot_func_not_implemented": {
            "name": "_prot_func_not_implemented",
            "location": 48,
            "return": [],
            "arguments": {}
        },
        "_update_protocol": {
            "name": "_update_protocol",
            "location": 53,
            "return": [],
            "arguments": {
                "prot": []
            }
        },
        "get_protocol": {
            "name": "get_protocol",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "set_protocol": {
            "name": "set_protocol",
            "location": 68,
            "return": [],
            "arguments": {
                "prot": []
            }
        },
        "set_config": {
            "name": "set_config",
            "location": 91,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "global_variables_initializer": {
            "name": "global_variables_initializer",
            "location": 101,
            "return": [],
            "arguments": {}
        }
    },
    "tf-encrypted-master/tf_encrypted/convert/convert.py": {
        "select_relevant_ops": {
            "name": "select_relevant_ops",
            "location": 160,
            "return": [],
            "arguments": {
                "all_specop_inputs": [],
                "all_specop_outputs": [],
                "graph_def": []
            }
        },
        "find_specops": {
            "name": "find_specops",
            "location": 190,
            "return": [],
            "arguments": {
                "graph_def": [],
                "output_name": []
            }
        },
        "specop_namespace": {
            "name": "specop_namespace",
            "location": 219,
            "return": [],
            "arguments": {
                "graph_def": []
            }
        },
        "get_interiors": {
            "name": "get_interiors",
            "location": 245,
            "return": [],
            "arguments": {
                "specop_scope": [],
                "subscope_map": []
            }
        },
        "find_leaves": {
            "name": "find_leaves",
            "location": 270,
            "return": [],
            "arguments": {
                "scope": [],
                "subscope_map": []
            }
        },
        "match_numbered_scope": {
            "name": "match_numbered_scope",
            "location": 301,
            "return": [],
            "arguments": {
                "specop": [],
                "search_string": [],
                "return_group": [],
                "numbered": []
            }
        },
        "match_numbered_leaf": {
            "name": "match_numbered_leaf",
            "location": 331,
            "return": [],
            "arguments": {
                "leaf_to_match": [],
                "search_string": []
            }
        },
        "specop_from_numberedscope": {
            "name": "specop_from_numberedscope",
            "location": 344,
            "return": [],
            "arguments": {
                "scope": []
            }
        },
        "strip_tensor_info": {
            "name": "strip_tensor_info",
            "location": 357,
            "return": [],
            "arguments": {
                "node_name": []
            }
        },
        "find_output_names": {
            "name": "find_output_names",
            "location": 367,
            "return": [],
            "arguments": {
                "graph_def": [],
                "node_name": [],
                "num_outputs": []
            }
        },
        "Converter.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "registry": [],
                "config": [],
                "protocol": [],
                "model_provider": []
            }
        },
        "Converter.convert": {
            "name": "convert",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "graph_def": [],
                "input_player": [],
                "inputter_fn": []
            }
        },
        "Converter._register_op": {
            "name": "_register_op",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "inputs_iterable": [],
                "input_player": [],
                "graph_def": []
            }
        },
        "Converter._register_specop": {
            "name": "_register_specop",
            "location": 141,
            "return": [],
            "arguments": {
                "self": [],
                "node": [],
                "specop_scope_dict": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/convert/convert_test.py": {
        "export_argmax": {
            "name": "export_argmax",
            "location": 345,
            "return": [],
            "arguments": {
                "filename": [],
                "input_shape": [],
                "axis": []
            }
        },
        "run_argmax": {
            "name": "run_argmax",
            "location": 353,
            "return": [],
            "arguments": {
                "data": [],
                "axis": []
            }
        },
        "run_stack": {
            "name": "run_stack",
            "location": 364,
            "return": [],
            "arguments": {
                "input1": [],
                "input2": [],
                "input3": []
            }
        },
        "export_stack": {
            "name": "export_stack",
            "location": 376,
            "return": [],
            "arguments": {
                "filename": [],
                "input_shape": []
            }
        },
        "run_avgpool": {
            "name": "run_avgpool",
            "location": 386,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "export_avgpool": {
            "name": "export_avgpool",
            "location": 397,
            "return": [],
            "arguments": {
                "filename": [],
                "input_shape": []
            }
        },
        "run_maxpool": {
            "name": "run_maxpool",
            "location": 405,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "export_maxpool": {
            "name": "export_maxpool",
            "location": 416,
            "return": [],
            "arguments": {
                "filename": [],
                "input_shape": []
            }
        },
        "run_batchnorm": {
            "name": "run_batchnorm",
            "location": 424,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "export_batchnorm": {
            "name": "export_batchnorm",
            "location": 441,
            "return": [],
            "arguments": {
                "filename": [],
                "input_shape": []
            }
        },
        "run_conv2d": {
            "name": "run_conv2d",
            "location": 454,
            "return": [],
            "arguments": {
                "data": [],
                "data_format": []
            }
        },
        "export_conv2d": {
            "name": "export_conv2d",
            "location": 473,
            "return": [],
            "arguments": {
                "filename": [],
                "input_shape": [],
                "data_format": []
            }
        },
        "run_matmul": {
            "name": "run_matmul",
            "location": 484,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "export_matmul": {
            "name": "export_matmul",
            "location": 496,
            "return": [],
            "arguments": {
                "filename": [],
                "input_shape": []
            }
        },
        "export_neg": {
            "name": "export_neg",
            "location": 505,
            "return": [],
            "arguments": {
                "filename": [],
                "input_shape": []
            }
        },
        "run_neg": {
            "name": "run_neg",
            "location": 513,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "run_add": {
            "name": "run_add",
            "location": 524,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "export_add": {
            "name": "export_add",
            "location": 536,
            "return": [],
            "arguments": {
                "filename": [],
                "input_shape": []
            }
        },
        "run_transpose": {
            "name": "run_transpose",
            "location": 545,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "export_transpose": {
            "name": "export_transpose",
            "location": 556,
            "return": [],
            "arguments": {
                "filename": [],
                "input_shape": []
            }
        },
        "run_reshape": {
            "name": "run_reshape",
            "location": 564,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "export_reshape": {
            "name": "export_reshape",
            "location": 579,
            "return": [],
            "arguments": {
                "filename": [],
                "input_shape": []
            }
        },
        "run_expand_dims": {
            "name": "run_expand_dims",
            "location": 591,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "export_expand_dims": {
            "name": "export_expand_dims",
            "location": 602,
            "return": [],
            "arguments": {
                "filename": [],
                "input_shape": []
            }
        },
        "run_pad": {
            "name": "run_pad",
            "location": 610,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "export_pad": {
            "name": "export_pad",
            "location": 621,
            "return": [],
            "arguments": {
                "filename": [],
                "input_shape": []
            }
        },
        "_construct_batch_to_space_nd": {
            "name": "_construct_batch_to_space_nd",
            "location": 629,
            "return": [],
            "arguments": {
                "input_shape": []
            }
        },
        "export_batch_to_space_nd": {
            "name": "export_batch_to_space_nd",
            "location": 637,
            "return": [],
            "arguments": {
                "filename": [],
                "input_shape": []
            }
        },
        "run_batch_to_space_nd": {
            "name": "run_batch_to_space_nd",
            "location": 642,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "_construct_space_to_batch_nd": {
            "name": "_construct_space_to_batch_nd",
            "location": 649,
            "return": [],
            "arguments": {
                "input_shape": []
            }
        },
        "export_space_to_batch_nd": {
            "name": "export_space_to_batch_nd",
            "location": 657,
            "return": [],
            "arguments": {
                "filename": [],
                "input_shape": []
            }
        },
        "run_space_to_batch_nd": {
            "name": "run_space_to_batch_nd",
            "location": 662,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "run_squeeze": {
            "name": "run_squeeze",
            "location": 669,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "export_squeeze": {
            "name": "export_squeeze",
            "location": 677,
            "return": [],
            "arguments": {
                "filename": [],
                "input_shape": []
            }
        },
        "run_gather": {
            "name": "run_gather",
            "location": 683,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "export_gather": {
            "name": "export_gather",
            "location": 691,
            "return": [],
            "arguments": {
                "filename": [],
                "input_shape": []
            }
        },
        "run_split": {
            "name": "run_split",
            "location": 697,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "export_split": {
            "name": "export_split",
            "location": 705,
            "return": [],
            "arguments": {
                "filename": [],
                "input_shape": []
            }
        },
        "split_edge_case_builder": {
            "name": "split_edge_case_builder",
            "location": 711,
            "return": [],
            "arguments": {
                "input_shape": [],
                "filters": [],
                "kernel_size": []
            }
        },
        "export_split_edge_case": {
            "name": "export_split_edge_case",
            "location": 726,
            "return": [],
            "arguments": {
                "filename": [],
                "input_shape": []
            }
        },
        "run_split_edge_case": {
            "name": "run_split_edge_case",
            "location": 734,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "run_split_v": {
            "name": "run_split_v",
            "location": 739,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "export_split_v": {
            "name": "export_split_v",
            "location": 747,
            "return": [],
            "arguments": {
                "filename": [],
                "input_shape": []
            }
        },
        "run_concat": {
            "name": "run_concat",
            "location": 753,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "export_concat": {
            "name": "export_concat",
            "location": 761,
            "return": [],
            "arguments": {
                "filename": [],
                "input_shape": []
            }
        },
        "run_sub": {
            "name": "run_sub",
            "location": 767,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "export_sub": {
            "name": "export_sub",
            "location": 779,
            "return": [],
            "arguments": {
                "filename": [],
                "input_shape": []
            }
        },
        "run_mul": {
            "name": "run_mul",
            "location": 788,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "export_mul": {
            "name": "export_mul",
            "location": 802,
            "return": [],
            "arguments": {
                "filename": [],
                "input_shape": []
            }
        },
        "export_strided_slice": {
            "name": "export_strided_slice",
            "location": 813,
            "return": [],
            "arguments": {
                "filename": [],
                "input_shape": []
            }
        },
        "run_strided_slice": {
            "name": "run_strided_slice",
            "location": 820,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "export_slice": {
            "name": "export_slice",
            "location": 830,
            "return": [],
            "arguments": {
                "filename": [],
                "input_shape": []
            }
        },
        "run_slice": {
            "name": "run_slice",
            "location": 837,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "export_flatten": {
            "name": "export_flatten",
            "location": 847,
            "return": [],
            "arguments": {
                "filename": [],
                "input_shape": []
            }
        },
        "run_flatten": {
            "name": "run_flatten",
            "location": 858,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "keras_multilayer_builder": {
            "name": "keras_multilayer_builder",
            "location": 864,
            "return": [],
            "arguments": {
                "input_shape": [],
                "filters": [],
                "kernel_size": [],
                "pool_size": [],
                "units": []
            }
        },
        "export_keras_multilayer": {
            "name": "export_keras_multilayer",
            "location": 878,
            "return": [],
            "arguments": {
                "filename": [],
                "input_shape": []
            }
        },
        "run_keras_multilayer": {
            "name": "run_keras_multilayer",
            "location": 886,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "_keras_model_core": {
            "name": "_keras_model_core",
            "location": 891,
            "return": [],
            "arguments": {
                "model_builder": [],
                "shape": [],
                "data": []
            }
        },
        "export_keras_conv2d": {
            "name": "export_keras_conv2d",
            "location": 904,
            "return": [],
            "arguments": {
                "filename": [],
                "input_shape": []
            }
        },
        "run_keras_conv2d": {
            "name": "run_keras_conv2d",
            "location": 912,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "_keras_conv2d_core": {
            "name": "_keras_conv2d_core",
            "location": 917,
            "return": [],
            "arguments": {
                "shape": [],
                "data": []
            }
        },
        "export_keras_depthwise_conv2d": {
            "name": "export_keras_depthwise_conv2d",
            "location": 941,
            "return": [],
            "arguments": {
                "filename": [],
                "input_shape": []
            }
        },
        "run_keras_depthwise_conv2d": {
            "name": "run_keras_depthwise_conv2d",
            "location": 949,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "_keras_depthwise_conv2d_core": {
            "name": "_keras_depthwise_conv2d_core",
            "location": 954,
            "return": [],
            "arguments": {
                "shape": [],
                "data": []
            }
        },
        "export_keras_dense": {
            "name": "export_keras_dense",
            "location": 977,
            "return": [],
            "arguments": {
                "filename": [],
                "input_shape": []
            }
        },
        "run_keras_dense": {
            "name": "run_keras_dense",
            "location": 985,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "_keras_dense_core": {
            "name": "_keras_dense_core",
            "location": 990,
            "return": [],
            "arguments": {
                "shape": [],
                "data": []
            }
        },
        "export_keras_batchnorm": {
            "name": "export_keras_batchnorm",
            "location": 1007,
            "return": [],
            "arguments": {
                "filename": [],
                "input_shape": []
            }
        },
        "run_keras_batchnorm": {
            "name": "run_keras_batchnorm",
            "location": 1015,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "_keras_batchnorm_core": {
            "name": "_keras_batchnorm_core",
            "location": 1020,
            "return": [],
            "arguments": {
                "shape": [],
                "data": []
            }
        },
        "export_keras_global_avgpool": {
            "name": "export_keras_global_avgpool",
            "location": 1035,
            "return": [],
            "arguments": {
                "filename": [],
                "input_shape": []
            }
        },
        "run_keras_global_avgpool": {
            "name": "run_keras_global_avgpool",
            "location": 1043,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "_keras_global_avgpool_core": {
            "name": "_keras_global_avgpool_core",
            "location": 1048,
            "return": [],
            "arguments": {
                "shape": [],
                "data": []
            }
        },
        "export_keras_global_maxpool": {
            "name": "export_keras_global_maxpool",
            "location": 1063,
            "return": [],
            "arguments": {
                "filename": [],
                "input_shape": []
            }
        },
        "run_keras_global_maxpool": {
            "name": "run_keras_global_maxpool",
            "location": 1071,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "_keras_global_maxpool_core": {
            "name": "_keras_global_maxpool_core",
            "location": 1076,
            "return": [],
            "arguments": {
                "shape": [],
                "data": []
            }
        },
        "run_required_space_to_batch_paddings": {
            "name": "run_required_space_to_batch_paddings",
            "location": 1091,
            "return": [],
            "arguments": {
                "data": []
            }
        },
        "export_required_space_to_batch_paddings": {
            "name": "export_required_space_to_batch_paddings",
            "location": 1105,
            "return": [],
            "arguments": {
                "filename": [],
                "input_shape": []
            }
        },
        "export": {
            "name": "export",
            "location": 1116,
            "return": [],
            "arguments": {
                "x": [],
                "filename": [],
                "sess": []
            }
        },
        "read_graph": {
            "name": "read_graph",
            "location": 1138,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "TestConvert.setUp": {
            "name": "setUp",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConvert.tearDown": {
            "name": "tearDown",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConvert.ndarray_input_fn": {
            "name": "ndarray_input_fn",
            "location": 52,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "TestConvert._assert_successful_conversion": {
            "name": "_assert_successful_conversion",
            "location": 59,
            "return": [],
            "arguments": {
                "prot": [],
                "graph_def": [],
                "actual": []
            }
        },
        "TestConvert._construct_conversion_test": {
            "name": "_construct_conversion_test",
            "location": 93,
            "return": [],
            "arguments": {
                "op_name": []
            }
        },
        "TestConvert._construct_empty_conversion_test": {
            "name": "_construct_empty_conversion_test",
            "location": 114,
            "return": [],
            "arguments": {
                "op_name": []
            }
        },
        "TestConvert._test_with_ndarray_input_fn": {
            "name": "_test_with_ndarray_input_fn",
            "location": 131,
            "return": [],
            "arguments": {
                "cls": [],
                "op_name": [],
                "test_input": [],
                "protocol": [],
                "decimals": []
            }
        },
        "TestConvert.test_empty_model": {
            "name": "test_empty_model",
            "location": 144,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConvert.test_keras_multilayer": {
            "name": "test_keras_multilayer",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConvert.test_conv2d_convert": {
            "name": "test_conv2d_convert",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConvert.test_matmul_convert": {
            "name": "test_matmul_convert",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConvert.test_neg_convert": {
            "name": "test_neg_convert",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConvert.test_add_convert": {
            "name": "test_add_convert",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConvert.test_transpose_convert": {
            "name": "test_transpose_convert",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConvert.test_reshape_convert": {
            "name": "test_reshape_convert",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConvert.test_expand_dims_convert": {
            "name": "test_expand_dims_convert",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConvert.test_pad_convert": {
            "name": "test_pad_convert",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConvert.test_batch_to_space_nd_convert": {
            "name": "test_batch_to_space_nd_convert",
            "location": 204,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConvert.test_space_to_batch_nd_convert": {
            "name": "test_space_to_batch_nd_convert",
            "location": 210,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConvert.test_squeeze_convert": {
            "name": "test_squeeze_convert",
            "location": 216,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConvert.test_split_convert": {
            "name": "test_split_convert",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConvert.test_split_edge_case_convert": {
            "name": "test_split_edge_case_convert",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConvert.test_split_v_convert": {
            "name": "test_split_v_convert",
            "location": 228,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConvert.test_concat_convert": {
            "name": "test_concat_convert",
            "location": 232,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConvert.test_sub_convert": {
            "name": "test_sub_convert",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConvert.test_mul_convert": {
            "name": "test_mul_convert",
            "location": 240,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConvert.test_strided_slice_convert": {
            "name": "test_strided_slice_convert",
            "location": 244,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConvert.test_slice_convert": {
            "name": "test_slice_convert",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConvert.test_batchnorm_convert": {
            "name": "test_batchnorm_convert",
            "location": 261,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConvert.test_avgpool_convert": {
            "name": "test_avgpool_convert",
            "location": 265,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConvert.test_maxpool_convert": {
            "name": "test_maxpool_convert",
            "location": 270,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConvert.test_stack_convert": {
            "name": "test_stack_convert",
            "location": 274,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConvert.test_argmax_convert": {
            "name": "test_argmax_convert",
            "location": 290,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConvert.test_required_space_to_batch_paddings_convert": {
            "name": "test_required_space_to_batch_paddings_convert",
            "location": 296,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConvert.test_flatten_convert": {
            "name": "test_flatten_convert",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConvert.test_keras_conv2d_convert": {
            "name": "test_keras_conv2d_convert",
            "location": 308,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConvert.test_keras_depthwise_conv2d_convert": {
            "name": "test_keras_depthwise_conv2d_convert",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConvert.test_keras_dense_convert": {
            "name": "test_keras_dense_convert",
            "location": 318,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConvert.test_keras_global_avgpool_convert": {
            "name": "test_keras_global_avgpool_convert",
            "location": 332,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConvert.test_keras_global_maxgpool_convert": {
            "name": "test_keras_global_maxgpool_convert",
            "location": 338,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConvert.ndarray_input_fn.input_fn": {
            "name": "input_fn",
            "location": 53,
            "return": [],
            "arguments": {}
        }
    },
    "tf-encrypted-master/tf_encrypted/convert/inspect.py": {
        "inspect_subgraph": {
            "name": "inspect_subgraph",
            "location": 8,
            "return": [],
            "arguments": {
                "subgraph": [],
                "input_shape": [],
                "sess": []
            }
        },
        "_gen_graph_def": {
            "name": "_gen_graph_def",
            "location": 14,
            "return": [],
            "arguments": {
                "subgraph": [],
                "input_shape": [],
                "sess": []
            }
        },
        "_read_graph": {
            "name": "_read_graph",
            "location": 26,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "print_from_graphdef": {
            "name": "print_from_graphdef",
            "location": 34,
            "return": [],
            "arguments": {
                "graphdef": []
            }
        },
        "export": {
            "name": "export",
            "location": 39,
            "return": [],
            "arguments": {
                "x": [],
                "filename": [],
                "sess": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/convert/register.py": {
        "registry": {
            "name": "registry",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "_placeholder": {
            "name": "_placeholder",
            "location": 87,
            "return": [],
            "arguments": {
                "converter": [],
                "node": [],
                "inputs": []
            }
        },
        "_constant": {
            "name": "_constant",
            "location": 91,
            "return": [],
            "arguments": {
                "converter": [],
                "node": [],
                "inputs": []
            }
        },
        "_identity": {
            "name": "_identity",
            "location": 96,
            "return": [],
            "arguments": {
                "converter": [],
                "node": [],
                "inputs": []
            }
        },
        "_matmul": {
            "name": "_matmul",
            "location": 101,
            "return": [],
            "arguments": {
                "converter": [],
                "node": [],
                "inputs": []
            }
        },
        "_conv2d": {
            "name": "_conv2d",
            "location": 138,
            "return": [],
            "arguments": {
                "converter": [],
                "node": [],
                "inputs": []
            }
        },
        "_keras_conv2d": {
            "name": "_keras_conv2d",
            "location": 166,
            "return": [],
            "arguments": {
                "converter": [],
                "interiors": [],
                "inputs": []
            }
        },
        "_keras_depthwise_conv2d": {
            "name": "_keras_depthwise_conv2d",
            "location": 200,
            "return": [],
            "arguments": {
                "converter": [],
                "interiors": [],
                "inputs": []
            }
        },
        "_keras_dense": {
            "name": "_keras_dense",
            "location": 240,
            "return": [],
            "arguments": {
                "converter": [],
                "interiors": [],
                "inputs": []
            }
        },
        "_keras_batchnorm": {
            "name": "_keras_batchnorm",
            "location": 262,
            "return": [],
            "arguments": {
                "converter": [],
                "interiors": [],
                "inputs": []
            }
        },
        "_relu": {
            "name": "_relu",
            "location": 294,
            "return": [],
            "arguments": {
                "converter": [],
                "node": [],
                "inputs": []
            }
        },
        "_sigmoid": {
            "name": "_sigmoid",
            "location": 300,
            "return": [],
            "arguments": {
                "converter": [],
                "node": [],
                "inputs": []
            }
        },
        "_strided_slice": {
            "name": "_strided_slice",
            "location": 306,
            "return": [],
            "arguments": {
                "converter": [],
                "node": [],
                "inputs": []
            }
        },
        "_pack": {
            "name": "_pack",
            "location": 341,
            "return": [],
            "arguments": {
                "converter": [],
                "node": [],
                "inputs": []
            }
        },
        "_bias_add": {
            "name": "_bias_add",
            "location": 354,
            "return": [],
            "arguments": {
                "converter": [],
                "node": [],
                "inputs": []
            }
        },
        "_maxpool": {
            "name": "_maxpool",
            "location": 371,
            "return": [],
            "arguments": {
                "converter": [],
                "node": [],
                "inputs": []
            }
        },
        "_shape": {
            "name": "_shape",
            "location": 392,
            "return": [],
            "arguments": {
                "converter": [],
                "node": [],
                "inputs": []
            }
        },
        "_reshape": {
            "name": "_reshape",
            "location": 398,
            "return": [],
            "arguments": {
                "converter": [],
                "node": [],
                "inputs": []
            }
        },
        "_transpose": {
            "name": "_transpose",
            "location": 414,
            "return": [],
            "arguments": {
                "converter": [],
                "node": [],
                "inputs": []
            }
        },
        "_expand_dims": {
            "name": "_expand_dims",
            "location": 432,
            "return": [],
            "arguments": {
                "converter": [],
                "node": [],
                "inputs": []
            }
        },
        "_negative": {
            "name": "_negative",
            "location": 447,
            "return": [],
            "arguments": {
                "converter": [],
                "node": [],
                "inputs": []
            }
        },
        "_gather": {
            "name": "_gather",
            "location": 458,
            "return": [],
            "arguments": {
                "converter": [],
                "node": [],
                "inputs": []
            }
        },
        "_squeeze": {
            "name": "_squeeze",
            "location": 475,
            "return": [],
            "arguments": {
                "converter": [],
                "node": [],
                "inputs": []
            }
        },
        "_split": {
            "name": "_split",
            "location": 483,
            "return": [],
            "arguments": {
                "converter": [],
                "node": [],
                "inputs": []
            }
        },
        "_pad": {
            "name": "_pad",
            "location": 510,
            "return": [],
            "arguments": {
                "converter": [],
                "node": [],
                "inputs": []
            }
        },
        "_rsqrt": {
            "name": "_rsqrt",
            "location": 522,
            "return": [],
            "arguments": {
                "converter": [],
                "node": [],
                "inputs": []
            }
        },
        "_add": {
            "name": "_add",
            "location": 558,
            "return": [],
            "arguments": {
                "converter": [],
                "node": [],
                "inputs": []
            }
        },
        "_sub": {
            "name": "_sub",
            "location": 575,
            "return": [],
            "arguments": {
                "converter": [],
                "node": [],
                "inputs": []
            }
        },
        "_mul": {
            "name": "_mul",
            "location": 592,
            "return": [],
            "arguments": {
                "converter": [],
                "node": [],
                "inputs": []
            }
        },
        "_avgpool": {
            "name": "_avgpool",
            "location": 609,
            "return": [],
            "arguments": {
                "converter": [],
                "node": [],
                "inputs": []
            }
        },
        "_keras_global_avgpool": {
            "name": "_keras_global_avgpool",
            "location": 630,
            "return": [],
            "arguments": {
                "converter": [],
                "node": [],
                "inputs": []
            }
        },
        "_keras_global_maxpool": {
            "name": "_keras_global_maxpool",
            "location": 646,
            "return": [],
            "arguments": {
                "converter": [],
                "node": [],
                "inputs": []
            }
        },
        "_concat": {
            "name": "_concat",
            "location": 662,
            "return": [],
            "arguments": {
                "converter": [],
                "node": [],
                "inputs": []
            }
        },
        "_batch_to_space_nd": {
            "name": "_batch_to_space_nd",
            "location": 670,
            "return": [],
            "arguments": {
                "converter": [],
                "node": [],
                "inputs": []
            }
        },
        "_space_to_batch_nd": {
            "name": "_space_to_batch_nd",
            "location": 678,
            "return": [],
            "arguments": {
                "converter": [],
                "node": [],
                "inputs": []
            }
        },
        "_flatten": {
            "name": "_flatten",
            "location": 686,
            "return": [],
            "arguments": {
                "converter": [],
                "node": [],
                "inputs": []
            }
        },
        "_required_space_to_batch_paddings": {
            "name": "_required_space_to_batch_paddings",
            "location": 697,
            "return": [],
            "arguments": {
                "converter": [],
                "node": [],
                "inputs": []
            }
        },
        "_argmax": {
            "name": "_argmax",
            "location": 750,
            "return": [],
            "arguments": {
                "converter": [],
                "node": [],
                "inputs": []
            }
        },
        "_slice": {
            "name": "_slice",
            "location": 757,
            "return": [],
            "arguments": {
                "converter": [],
                "node": [],
                "inputs": []
            }
        },
        "_nodef_to_public_pond": {
            "name": "_nodef_to_public_pond",
            "location": 789,
            "return": [],
            "arguments": {
                "converter": [],
                "x": []
            }
        },
        "_nodef_to_private_pond": {
            "name": "_nodef_to_private_pond",
            "location": 825,
            "return": [],
            "arguments": {
                "converter": [],
                "x": []
            }
        },
        "_nodef_to_numpy_array": {
            "name": "_nodef_to_numpy_array",
            "location": 866,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "_matmul.inputter_fn": {
            "name": "inputter_fn",
            "location": 128,
            "return": [],
            "arguments": {}
        },
        "_rsqrt.inputter_fn": {
            "name": "inputter_fn",
            "location": 550,
            "return": [],
            "arguments": {}
        },
        "_required_space_to_batch_paddings.inputter_pad": {
            "name": "inputter_pad",
            "location": 732,
            "return": [],
            "arguments": {}
        },
        "_required_space_to_batch_paddings.inputter_crop": {
            "name": "inputter_crop",
            "location": 738,
            "return": [],
            "arguments": {}
        },
        "_nodef_to_public_pond.inputter_fn": {
            "name": "inputter_fn",
            "location": 817,
            "return": [],
            "arguments": {}
        },
        "_nodef_to_private_pond.inputter_fn": {
            "name": "inputter_fn",
            "location": 858,
            "return": [],
            "arguments": {}
        }
    },
    "tf-encrypted-master/tf_encrypted/convert/__init__.py": {},
    "tf-encrypted-master/tf_encrypted/convert/gen/generate_reserved_scopes.py": {
        "_table_from_registered_specops": {
            "name": "_table_from_registered_specops",
            "location": 10,
            "return": [],
            "arguments": {}
        }
    },
    "tf-encrypted-master/tf_encrypted/convert/gen/__init__.py": {},
    "tf-encrypted-master/tf_encrypted/keras/activations.py": {
        "relu": {
            "name": "relu",
            "location": 6,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "sigmoid": {
            "name": "sigmoid",
            "location": 11,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "sigmoid_deriv": {
            "name": "sigmoid_deriv",
            "location": 16,
            "return": [],
            "arguments": {
                "y": [],
                "d_y": []
            }
        },
        "tanh": {
            "name": "tanh",
            "location": 21,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "linear": {
            "name": "linear",
            "location": 26,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "get": {
            "name": "get",
            "location": 30,
            "return": [],
            "arguments": {
                "identifier": []
            }
        },
        "get_deriv": {
            "name": "get_deriv",
            "location": 46,
            "return": [],
            "arguments": {
                "identifier": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/keras/backend.py": {
        "get_session": {
            "name": "get_session",
            "location": 16,
            "return": [],
            "arguments": {
                "op_input_list": []
            }
        },
        "_current_graph": {
            "name": "_current_graph",
            "location": 48,
            "return": [],
            "arguments": {
                "op_input_list": []
            }
        },
        "set_session": {
            "name": "set_session",
            "location": 54,
            "return": [],
            "arguments": {
                "session": []
            }
        },
        "clear_session": {
            "name": "clear_session",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "get_session.valid_session": {
            "name": "valid_session",
            "location": 20,
            "return": [],
            "arguments": {
                "session": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/keras/losses.py": {
        "binary_crossentropy": {
            "name": "binary_crossentropy",
            "location": 57,
            "return": [],
            "arguments": {
                "y_true": [],
                "y_pred": []
            }
        },
        "binary_crossentropy_from_logits": {
            "name": "binary_crossentropy_from_logits",
            "location": 67,
            "return": [],
            "arguments": {
                "y_true": [],
                "y_pred": []
            }
        },
        "mean_squared_error": {
            "name": "mean_squared_error",
            "location": 84,
            "return": [],
            "arguments": {
                "y_true": [],
                "y_pred": []
            }
        },
        "Loss.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "loss_fn": []
            }
        },
        "Loss.call": {
            "name": "call",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "y_true": [],
                "y_pred": []
            }
        },
        "Loss.__call__": {
            "name": "__call__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "y_true": [],
                "y_pred": []
            }
        },
        "BinaryCrossentropy.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "from_logits": []
            }
        },
        "BinaryCrossentropy.grad": {
            "name": "grad",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "y_true": [],
                "y_pred": []
            }
        },
        "MeanSquaredError.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MeanSquaredError.grad": {
            "name": "grad",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "y_true": [],
                "y_pred": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/keras/losses_test.py": {
        "TestLosses.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLosses.test_binary_crossentropy": {
            "name": "test_binary_crossentropy",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLosses.test_binary_crossentropy_from_logits": {
            "name": "test_binary_crossentropy_from_logits",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLosses.test_mean_squared_error": {
            "name": "test_mean_squared_error",
            "location": 81,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/keras/optimizers.py": {
        "get": {
            "name": "get",
            "location": 27,
            "return": [],
            "arguments": {
                "identifier": []
            }
        },
        "SGD.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "lr": []
            }
        },
        "SGD.apply_gradients": {
            "name": "apply_gradients",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "var": [],
                "grad": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/keras/testing_utils.py": {
        "agreement_test": {
            "name": "agreement_test",
            "location": 9,
            "return": [],
            "arguments": {
                "tfe_layer_cls": [],
                "kwargs": [],
                "input_shape": [],
                "input_data": [],
                "rtol": [],
                "atol": []
            }
        },
        "layer_test": {
            "name": "layer_test",
            "location": 57,
            "return": [],
            "arguments": {
                "layer_cls": [],
                "kwargs": [],
                "batch_input_shape": [],
                "input_data": []
            }
        },
        "_sanitize_testing_args": {
            "name": "_sanitize_testing_args",
            "location": 86,
            "return": [],
            "arguments": {
                "input_shape": [],
                "input_data": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/keras/__init__.py": {},
    "tf-encrypted-master/tf_encrypted/keras/engine/base_layer.py": {
        "Layer.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "trainable": [],
                "name": []
            }
        },
        "Layer.build": {
            "name": "build",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "input_shape": []
            }
        },
        "Layer.call": {
            "name": "call",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "Layer.compute_output_shape": {
            "name": "compute_output_shape",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "input_shape": []
            }
        },
        "Layer.__call__": {
            "name": "__call__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "Layer.add_weight": {
            "name": "add_weight",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "variable": [],
                "make_private": []
            }
        },
        "Layer.set_weights": {
            "name": "set_weights",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "weights": [],
                "sess": []
            }
        },
        "Layer.name": {
            "name": "name",
            "location": 146,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Layer._init_set_name": {
            "name": "_init_set_name",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "zero_based": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/keras/engine/base_layer_utils.py": {
        "_get_default_graph_uid_map": {
            "name": "_get_default_graph_uid_map",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "unique_object_name": {
            "name": "unique_object_name",
            "location": 36,
            "return": [],
            "arguments": {
                "name": [],
                "name_uid_map": [],
                "avoid_names": [],
                "namespace": [],
                "zero_based": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/keras/engine/input_layer.py": {
        "Input": {
            "name": "Input",
            "location": 82,
            "return": [],
            "arguments": {
                "shape": [],
                "batch_size": [],
                "name": [],
                "dtype": [],
                "sparse": [],
                "tensor": []
            }
        },
        "InputLayer.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "input_shape": [],
                "batch_size": [],
                "dtype": [],
                "input_tensor": [],
                "sparse": [],
                "name": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/keras/engine/input_layer_test.py": {
        "TestInput.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInput.test_input": {
            "name": "test_input",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/keras/engine/__init__.py": {},
    "tf-encrypted-master/tf_encrypted/keras/layers/activation.py": {
        "Activation.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "activation": []
            }
        },
        "Activation.build": {
            "name": "build",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "input_shape": []
            }
        },
        "Activation.call": {
            "name": "call",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "Activation.compute_output_shape": {
            "name": "compute_output_shape",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "input_shape": []
            }
        },
        "Activation.backward": {
            "name": "backward",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "d_y": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/keras/layers/activation_test.py": {
        "TestActivation.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivation.test_activation_relu": {
            "name": "test_activation_relu",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivation._core_activation": {
            "name": "_core_activation",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivation.test_backward_sigmoid": {
            "name": "test_backward_sigmoid",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/keras/layers/convolutional.py": {
        "Conv2D.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "filters": [],
                "kernel_size": [],
                "strides": [],
                "padding": [],
                "data_format": [],
                "dilation_rate": [],
                "activation": [],
                "use_bias": [],
                "kernel_initializer": [],
                "bias_initializer": [],
                "kernel_regularizer": [],
                "bias_regularizer": [],
                "activity_regularizer": [],
                "kernel_constraint": [],
                "bias_constraint": []
            }
        },
        "Conv2D.build": {
            "name": "build",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "input_shape": []
            }
        },
        "Conv2D.call": {
            "name": "call",
            "location": 169,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "Conv2D.compute_output_shape": {
            "name": "compute_output_shape",
            "location": 186,
            "return": [],
            "arguments": {
                "self": [],
                "input_shape": []
            }
        },
        "DepthwiseConv2D.__init__": {
            "name": "__init__",
            "location": 269,
            "return": [],
            "arguments": {
                "self": [],
                "kernel_size": [],
                "strides": [],
                "padding": [],
                "depth_multiplier": [],
                "data_format": [],
                "activation": [],
                "use_bias": [],
                "depthwise_initializer": [],
                "bias_initializer": [],
                "depthwise_regularizer": [],
                "bias_regularizer": [],
                "activity_regularizer": [],
                "depthwise_constraint": [],
                "bias_constraint": []
            }
        },
        "DepthwiseConv2D.build": {
            "name": "build",
            "location": 344,
            "return": [],
            "arguments": {
                "self": [],
                "input_shape": []
            }
        },
        "DepthwiseConv2D.rearrange_kernel": {
            "name": "rearrange_kernel",
            "location": 372,
            "return": [],
            "arguments": {
                "self": [],
                "kernel": []
            }
        },
        "DepthwiseConv2D.call": {
            "name": "call",
            "location": 430,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "DepthwiseConv2D.compute_output_shape": {
            "name": "compute_output_shape",
            "location": 447,
            "return": [],
            "arguments": {
                "self": [],
                "input_shape": []
            }
        },
        "DepthwiseConv2D.get_mask": {
            "name": "get_mask",
            "location": 465,
            "return": [],
            "arguments": {
                "self": [],
                "in_channels": []
            }
        },
        "DepthwiseConv2D.set_weights": {
            "name": "set_weights",
            "location": 480,
            "return": [],
            "arguments": {
                "self": [],
                "weights": [],
                "sess": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/keras/layers/convolutional_test.py": {
        "TestConv2d.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConv2d.test_conv2d_bias": {
            "name": "test_conv2d_bias",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConv2d.test_conv2d_nobias": {
            "name": "test_conv2d_nobias",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConv2d.test_conv2d_same_padding": {
            "name": "test_conv2d_same_padding",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConv2d.test_conv2d_kernelsize_tuple": {
            "name": "test_conv2d_kernelsize_tuple",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConv2d._core_conv2d": {
            "name": "_core_conv2d",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDepthwiseConv2d.setUp": {
            "name": "setUp",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDepthwiseConv2d.test_depthwise_conv2d_bias": {
            "name": "test_depthwise_conv2d_bias",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDepthwiseConv2d.test_depthwise_conv2d_nobias": {
            "name": "test_depthwise_conv2d_nobias",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDepthwiseConv2d.test_depthwise_conv2d_same_padding": {
            "name": "test_depthwise_conv2d_same_padding",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDepthwiseConv2d.test_depthwise_conv2d_kernelsize_tuple": {
            "name": "test_depthwise_conv2d_kernelsize_tuple",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDepthwiseConv2d.test_depthwise_conv2d_depth_multiplier": {
            "name": "test_depthwise_conv2d_depth_multiplier",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDepthwiseConv2d.test_depthwise_conv2d_set_weights": {
            "name": "test_depthwise_conv2d_set_weights",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDepthwiseConv2d._core_depthwise_conv2d": {
            "name": "_core_depthwise_conv2d",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/keras/layers/core.py": {
        "Reshape.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "target_shape": []
            }
        },
        "Reshape._fix_unknown_dimension": {
            "name": "_fix_unknown_dimension",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "input_shape": [],
                "output_shape": []
            }
        },
        "Reshape.compute_output_shape": {
            "name": "compute_output_shape",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "input_shape": []
            }
        },
        "Reshape.call": {
            "name": "call",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/keras/layers/core_test.py": {
        "TestReshape.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReshape.test_reshape": {
            "name": "test_reshape",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReshape.test_reshape_unknown_dim": {
            "name": "test_reshape_unknown_dim",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReshape._core_reshape": {
            "name": "_core_reshape",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "input_shape": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/keras/layers/dense.py": {
        "Dense.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "units": [],
                "activation": [],
                "use_bias": [],
                "kernel_initializer": [],
                "bias_initializer": [],
                "kernel_regularizer": [],
                "bias_regularizer": [],
                "activity_regularizer": [],
                "kernel_constraint": [],
                "bias_constraint": []
            }
        },
        "Dense.compute_output_shape": {
            "name": "compute_output_shape",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "input_shape": []
            }
        },
        "Dense.build": {
            "name": "build",
            "location": 78,
            "return": [],
            "arguments": {
                "self": [],
                "input_shape": []
            }
        },
        "Dense.call": {
            "name": "call",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "Dense.backward": {
            "name": "backward",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "d_y": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/keras/layers/dense_test.py": {
        "TestDense.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDense.test_dense_bias": {
            "name": "test_dense_bias",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDense.test_dense_nobias": {
            "name": "test_dense_nobias",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDense.test_dense_relu": {
            "name": "test_dense_relu",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDense._core_dense": {
            "name": "_core_dense",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDense.test_backward": {
            "name": "test_backward",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/keras/layers/flatten.py": {
        "Flatten.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "data_format": []
            }
        },
        "Flatten.build": {
            "name": "build",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "input_shape": []
            }
        },
        "Flatten.call": {
            "name": "call",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "Flatten.compute_output_shape": {
            "name": "compute_output_shape",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "input_shape": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/keras/layers/flatten_test.py": {
        "TestFlatten.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFlatten.test_flatten_rank_four": {
            "name": "test_flatten_rank_four",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFlatten.test_flatten_rank_one": {
            "name": "test_flatten_rank_one",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFlatten.test_flatten_channels_first": {
            "name": "test_flatten_channels_first",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFlatten._core_flatten": {
            "name": "_core_flatten",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/keras/layers/layers_utils.py": {
        "default_args_check": {
            "name": "default_args_check",
            "location": 59,
            "return": [],
            "arguments": {
                "arg": [],
                "arg_name": [],
                "tf_layer_name": []
            }
        },
        "UnknownLayerArgError.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "arg_name": [],
                "layer_sign": [],
                "layer_name": []
            }
        },
        "UnknownLayerArgError.__str__": {
            "name": "__str__",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LayerArgNotImplementedError.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "arg_name": [],
                "tf_layer_name": [],
                "tf_default_arg": []
            }
        },
        "LayerArgNotImplementedError.__str__": {
            "name": "__str__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/keras/layers/normalization.py": {
        "BatchNormalization.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "momentum": [],
                "epsilon": [],
                "center": [],
                "scale": [],
                "beta_initializer": [],
                "gamma_initializer": [],
                "moving_mean_initializer": [],
                "moving_variance_initializer": [],
                "beta_regularizer": [],
                "gamma_regularizer": [],
                "beta_constraint": [],
                "gamma_constraint": [],
                "renorm": [],
                "renorm_clipping": [],
                "renorm_momentum": [],
                "fused": [],
                "trainable": [],
                "virtual_batch_size": [],
                "adjustment": [],
                "name": []
            }
        },
        "BatchNormalization.build": {
            "name": "build",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "input_shape": []
            }
        },
        "BatchNormalization.call": {
            "name": "call",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "BatchNormalization.compute_output_shape": {
            "name": "compute_output_shape",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "input_shape": []
            }
        },
        "BatchNormalization.set_weights": {
            "name": "set_weights",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "weights": [],
                "sess": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/keras/layers/normalization_test.py": {
        "TestBatchNormalization.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBatchNormalization.test_batchnorm_2d": {
            "name": "test_batchnorm_2d",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBatchNormalization.test_batchnorm_4d": {
            "name": "test_batchnorm_4d",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBatchNormalization.test_batchnorm_channels_first": {
            "name": "test_batchnorm_channels_first",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBatchNormalization.test_batchnorm_no_scale": {
            "name": "test_batchnorm_no_scale",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBatchNormalization.test_batchnorm_no_center": {
            "name": "test_batchnorm_no_center",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBatchNormalization.test_batchnorm_non_default_mean_init": {
            "name": "test_batchnorm_non_default_mean_init",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBatchNormalization.test_batchnorm_non_default_variance_init": {
            "name": "test_batchnorm_non_default_variance_init",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBatchNormalization._core_batchnorm": {
            "name": "_core_batchnorm",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "input_shape": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/keras/layers/pooling.py": {
        "Pooling2D.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "_pool_function": [],
                "pool_size": [],
                "strides": [],
                "padding": [],
                "data_format": []
            }
        },
        "Pooling2D.build": {
            "name": "build",
            "location": 54,
            "return": [],
            "arguments": {
                "self": [],
                "input_shape": []
            }
        },
        "Pooling2D.call": {
            "name": "call",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "Pooling2D.compute_output_shape": {
            "name": "compute_output_shape",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "input_shape": []
            }
        },
        "MaxPooling2D.__init__": {
            "name": "__init__",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "pool_size": [],
                "strides": [],
                "padding": [],
                "data_format": []
            }
        },
        "AveragePooling2D.__init__": {
            "name": "__init__",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "pool_size": [],
                "strides": [],
                "padding": [],
                "data_format": []
            }
        },
        "GlobalPooling2D.__init__": {
            "name": "__init__",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "data_format": []
            }
        },
        "GlobalPooling2D.compute_output_shape": {
            "name": "compute_output_shape",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "input_shape": []
            }
        },
        "GlobalPooling2D.call": {
            "name": "call",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "GlobalAveragePooling2D.build": {
            "name": "build",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "input_shape": []
            }
        },
        "GlobalAveragePooling2D.call": {
            "name": "call",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "GlobalMaxPooling2D.call": {
            "name": "call",
            "location": 286,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/keras/layers/pooling_test.py": {
        "TestPooling2d.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPooling2d.test_maxpooling2d_valid": {
            "name": "test_maxpooling2d_valid",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPooling2d.test_maxpooling2d_same": {
            "name": "test_maxpooling2d_same",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPooling2d.test_maxpooling2d_strides_one": {
            "name": "test_maxpooling2d_strides_one",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPooling2d.test_avgpooling2d_valid": {
            "name": "test_avgpooling2d_valid",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPooling2d.test_avgpooling2d_same": {
            "name": "test_avgpooling2d_same",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPooling2d.test_avgpooling2d_strides_one": {
            "name": "test_avgpooling2d_strides_one",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPooling2d._core_maxpooling2d": {
            "name": "_core_maxpooling2d",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPooling2d._core_avgpooling2d": {
            "name": "_core_avgpooling2d",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGlobalPooling2d.setUp": {
            "name": "setUp",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGlobalPooling2d.test_global_maxpooling2d": {
            "name": "test_global_maxpooling2d",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGlobalPooling2d.test_global_avgpooling2d": {
            "name": "test_global_avgpooling2d",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGlobalPooling2d._core_global_maxpooling2d": {
            "name": "_core_global_maxpooling2d",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGlobalPooling2d._core_global_avgpooling2d": {
            "name": "_core_global_avgpooling2d",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/keras/layers/relu.py": {
        "ReLU.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "max_value": [],
                "negative_slope": [],
                "threshold": []
            }
        },
        "ReLU.build": {
            "name": "build",
            "location": 34,
            "return": [],
            "arguments": {
                "self": [],
                "input_shape": []
            }
        },
        "ReLU.call": {
            "name": "call",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": []
            }
        },
        "ReLU.compute_output_shape": {
            "name": "compute_output_shape",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "input_shape": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/keras/layers/relu_test.py": {
        "TestActivation.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivation.test_activation_relu": {
            "name": "test_activation_relu",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestActivation._core_relu": {
            "name": "_core_relu",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/keras/layers/__init__.py": {},
    "tf-encrypted-master/tf_encrypted/keras/models/sequential.py": {
        "model_from_config": {
            "name": "model_from_config",
            "location": 218,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "clone_model": {
            "name": "clone_model",
            "location": 238,
            "return": [],
            "arguments": {
                "model": []
            }
        },
        "_instantiate_tfe_layer": {
            "name": "_instantiate_tfe_layer",
            "location": 258,
            "return": [],
            "arguments": {
                "keras_layer_config": []
            }
        },
        "Sequential.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "layers": [],
                "name": []
            }
        },
        "Sequential.add": {
            "name": "add",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "layer": []
            }
        },
        "Sequential.call": {
            "name": "call",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "inputs": [],
                "training": [],
                "mask": []
            }
        },
        "Sequential.layers": {
            "name": "layers",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sequential.backward": {
            "name": "backward",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "d_y": []
            }
        },
        "Sequential.compile": {
            "name": "compile",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "optimizer": [],
                "loss": []
            }
        },
        "Sequential.fit_batch": {
            "name": "fit_batch",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Sequential.fit": {
            "name": "fit",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "epochs": [],
                "steps_per_epoch": []
            }
        },
        "Sequential.set_weights": {
            "name": "set_weights",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "weights": [],
                "sess": []
            }
        },
        "Sequential.from_config": {
            "name": "from_config",
            "location": 203,
            "return": [],
            "arguments": {
                "cls": [],
                "config": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/keras/models/sequential_test.py": {
        "_model_predict_keras": {
            "name": "_model_predict_keras",
            "location": 162,
            "return": [],
            "arguments": {
                "input_data": [],
                "input_shape": []
            }
        },
        "TestSequential.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequential.test_two_layers": {
            "name": "test_two_layers",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequential.test_model_from_config": {
            "name": "test_model_from_config",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequential.test_from_config": {
            "name": "test_from_config",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequential.test_clone_model": {
            "name": "test_clone_model",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequential.test_weights_as_private_var": {
            "name": "test_weights_as_private_var",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSequential.test_conv_model": {
            "name": "test_conv_model",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/keras/models/__init__.py": {},
    "tf-encrypted-master/tf_encrypted/layers/activation.py": {
        "Sigmoid.get_output_shape": {
            "name": "get_output_shape",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sigmoid.initialize": {
            "name": "initialize",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sigmoid.forward": {
            "name": "forward",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Sigmoid.backward": {
            "name": "backward",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "d_y": []
            }
        },
        "Relu.get_output_shape": {
            "name": "get_output_shape",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Relu.initialize": {
            "name": "initialize",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Relu.forward": {
            "name": "forward",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Relu.backward": {
            "name": "backward",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "d_y": []
            }
        },
        "Tanh.get_output_shape": {
            "name": "get_output_shape",
            "location": 75,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tanh.initialize": {
            "name": "initialize",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tanh.forward": {
            "name": "forward",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Tanh.backward": {
            "name": "backward",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "d_y": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/layers/activation_test.py": {
        "TestRelu.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRelu.test_forward": {
            "name": "test_forward",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigmoid.setUp": {
            "name": "setUp",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSigmoid.test_forward": {
            "name": "test_forward",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTanh.setUp": {
            "name": "setUp",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTanh.test_forward": {
            "name": "test_forward",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/layers/batchnorm.py": {
        "Batchnorm.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "input_shape": [],
                "mean": [],
                "variance": [],
                "scale": [],
                "offset": [],
                "variance_epsilon": [],
                "channels_first": []
            }
        },
        "Batchnorm.get_output_shape": {
            "name": "get_output_shape",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Batchnorm.initialize": {
            "name": "initialize",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Batchnorm.forward": {
            "name": "forward",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Batchnorm.backward": {
            "name": "backward",
            "location": 91,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/layers/batchnorm_test.py": {
        "TestBatchnorm.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBatchnorm.test_channels_first": {
            "name": "test_channels_first",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBatchnorm.test_channels_last": {
            "name": "test_channels_last",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/layers/convolution.py": {
        "Conv2D.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "input_shape": [],
                "filter_shape": [],
                "strides": [],
                "padding": [],
                "filter_init": [],
                "l2reg_lambda": [],
                "channels_first": []
            }
        },
        "Conv2D.get_output_shape": {
            "name": "get_output_shape",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Conv2D.initialize": {
            "name": "initialize",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "initial_weights": [],
                "initial_bias": []
            }
        },
        "Conv2D.forward": {
            "name": "forward",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Conv2D.backward": {
            "name": "backward",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "d_y": [],
                "learning_rate": []
            }
        },
        "Conv2D.initialize.is_secret": {
            "name": "is_secret",
            "location": 77,
            "return": [],
            "arguments": {
                "x": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/layers/core.py": {
        "Layer.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "input_shape": []
            }
        },
        "Layer.get_output_shape": {
            "name": "get_output_shape",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Layer.initialize": {
            "name": "initialize",
            "location": 29,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Layer.forward": {
            "name": "forward",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Layer.backward": {
            "name": "backward",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/layers/dense.py": {
        "Dense.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "input_shape": [],
                "out_features": [],
                "transpose_input": [],
                "transpose_weight": []
            }
        },
        "Dense.get_output_shape": {
            "name": "get_output_shape",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dense.initialize": {
            "name": "initialize",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "initial_weights": [],
                "initial_bias": []
            }
        },
        "Dense.forward": {
            "name": "forward",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Dense.backward": {
            "name": "backward",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "d_y": [],
                "learning_rate": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/layers/pooling.py": {
        "Pooling2D.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "input_shape": [],
                "pool_size": [],
                "strides": [],
                "padding": [],
                "channels_first": []
            }
        },
        "Pooling2D.initialize": {
            "name": "initialize",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "input_shape": [],
                "initializer": []
            }
        },
        "Pooling2D.get_output_shape": {
            "name": "get_output_shape",
            "location": 55,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pooling2D.pool": {
            "name": "pool",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "pool_size": [],
                "strides": [],
                "padding": []
            }
        },
        "Pooling2D.forward": {
            "name": "forward",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Pooling2D.backward": {
            "name": "backward",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "d_y": [],
                "learning_rate": []
            }
        },
        "AveragePooling2D.pool": {
            "name": "pool",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "pool_size": [],
                "strides": [],
                "padding": []
            }
        },
        "MaxPooling2D.pool": {
            "name": "pool",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "pool_size": [],
                "strides": [],
                "padding": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/layers/pooling_test.py": {
        "TestAveragePooling2D.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAveragePooling2D._get_fixtures": {
            "name": "_get_fixtures",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "even": []
            }
        },
        "TestAveragePooling2D._tf_tiled_forward": {
            "name": "_tf_tiled_forward",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "input_pool": []
            }
        },
        "TestAveragePooling2D._generic_tiled_forward": {
            "name": "_generic_tiled_forward",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "t_type": [],
                "even": []
            }
        },
        "TestAveragePooling2D.test_public_tiled_forward": {
            "name": "test_public_tiled_forward",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAveragePooling2D.test_public_forward": {
            "name": "test_public_forward",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAveragePooling2D.test_private_tiled_forward": {
            "name": "test_private_tiled_forward",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAveragePooling2D.test_private_forward": {
            "name": "test_private_forward",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAveragePooling2D.test_masked_tiled_forward": {
            "name": "test_masked_tiled_forward",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAveragePooling2D.test_masked_forward": {
            "name": "test_masked_forward",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMaxPooling2D.setUp": {
            "name": "setUp",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMaxPooling2D.tearDown": {
            "name": "tearDown",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMaxPooling2D.test_maxpool2d": {
            "name": "test_maxpool2d",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/layers/reshape.py": {
        "Reshape.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "input_shape": [],
                "output_shape": []
            }
        },
        "Reshape.get_output_shape": {
            "name": "get_output_shape",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Reshape.initialize": {
            "name": "initialize",
            "location": 46,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Reshape.forward": {
            "name": "forward",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Reshape.backward": {
            "name": "backward",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/layers/reshape_test.py": {
        "TestReshape.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReshape.test_forward": {
            "name": "test_forward",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/layers/__init__.py": {},
    "tf-encrypted-master/tf_encrypted/operations/__init__.py": {},
    "tf-encrypted-master/tf_encrypted/operations/secure_random/secure_random.py": {
        "_try_load_secure_random_module": {
            "name": "_try_load_secure_random_module",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "supports_secure_randomness": {
            "name": "supports_secure_randomness",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "supports_seeded_randomness": {
            "name": "supports_seeded_randomness",
            "location": 67,
            "return": [],
            "arguments": {}
        },
        "seeded_random_uniform": {
            "name": "seeded_random_uniform",
            "location": 71,
            "return": [],
            "arguments": {
                "shape": [],
                "minval": [],
                "maxval": [],
                "dtype": [],
                "seed": [],
                "name": []
            }
        },
        "random_uniform": {
            "name": "random_uniform",
            "location": 108,
            "return": [],
            "arguments": {
                "shape": [],
                "minval": [],
                "maxval": [],
                "dtype": [],
                "name": []
            }
        },
        "secure_seed": {
            "name": "secure_seed",
            "location": 141,
            "return": [],
            "arguments": {}
        }
    },
    "tf-encrypted-master/tf_encrypted/operations/secure_random/secure_random_test.py": {
        "TestSeededRandom.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSeededRandom.tearDown": {
            "name": "tearDown",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSeededRandom.test_wrapper": {
            "name": "test_wrapper",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSeededRandom.test_min_val": {
            "name": "test_min_val",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSeededRandom.test_invalid_args": {
            "name": "test_invalid_args",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSeededRandom.test_rejection": {
            "name": "test_rejection",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRandomUniform.setUp": {
            "name": "setUp",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRandomUniform.tearDown": {
            "name": "tearDown",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRandomUniform.test_wrapper": {
            "name": "test_wrapper",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRandomUniform.test_min_val": {
            "name": "test_min_val",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestRandomUniform.test_invalid_args": {
            "name": "test_invalid_args",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSeed.test_seed_generation": {
            "name": "test_seed_generation",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/operations/secure_random/__init__.py": {},
    "tf-encrypted-master/tf_encrypted/player/player.py": {
        "player_device": {
            "name": "player_device",
            "location": 23,
            "return": [],
            "arguments": {
                "player": []
            }
        },
        "Player.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "name": [],
                "index": [],
                "device_name": [],
                "host": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/player/__init__.py": {},
    "tf-encrypted-master/tf_encrypted/player/__main__.py": {},
    "tf-encrypted-master/tf_encrypted/protocol/ops_test.py": {
        "TestBatchToSpaceND.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBatchToSpaceND.test_4d_no_crops": {
            "name": "test_4d_no_crops",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBatchToSpaceND.test_4d_single_crop": {
            "name": "test_4d_single_crop",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBatchToSpaceND.test_3d_no_crops": {
            "name": "test_3d_no_crops",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBatchToSpaceND.test_3d_mirror_crops": {
            "name": "test_3d_mirror_crops",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBatchToSpaceND.test_3d_uneven_crops": {
            "name": "test_3d_uneven_crops",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBatchToSpaceND.test_3d_block_shape": {
            "name": "test_3d_block_shape",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBatchToSpaceND.test_public": {
            "name": "test_public",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBatchToSpaceND.test_masked": {
            "name": "test_masked",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestBatchToSpaceND._generic_public_test": {
            "name": "_generic_public_test",
            "location": 81,
            "return": [],
            "arguments": {
                "t": [],
                "block_shape": [],
                "crops": []
            }
        },
        "TestBatchToSpaceND._generic_private_test": {
            "name": "_generic_private_test",
            "location": 96,
            "return": [],
            "arguments": {
                "t": [],
                "block_shape": [],
                "crops": []
            }
        },
        "TestBatchToSpaceND._generic_masked_test": {
            "name": "_generic_masked_test",
            "location": 111,
            "return": [],
            "arguments": {
                "t": [],
                "block_shape": [],
                "crops": []
            }
        },
        "TestSpaceToBatchND.setUp": {
            "name": "setUp",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpaceToBatchND.test_4d_no_crops": {
            "name": "test_4d_no_crops",
            "location": 131,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpaceToBatchND.test_4d_single_crop": {
            "name": "test_4d_single_crop",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpaceToBatchND.test_3d_no_crops": {
            "name": "test_3d_no_crops",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpaceToBatchND.test_3d_mirror_crops": {
            "name": "test_3d_mirror_crops",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpaceToBatchND.test_3d_uneven_crops": {
            "name": "test_3d_uneven_crops",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpaceToBatchND.test_3d_block_shape": {
            "name": "test_3d_block_shape",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpaceToBatchND.test_public": {
            "name": "test_public",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpaceToBatchND.test_masked": {
            "name": "test_masked",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSpaceToBatchND._generic_public_test": {
            "name": "_generic_public_test",
            "location": 190,
            "return": [],
            "arguments": {
                "t": [],
                "block_shape": [],
                "paddings": []
            }
        },
        "TestSpaceToBatchND._generic_private_test": {
            "name": "_generic_private_test",
            "location": 205,
            "return": [],
            "arguments": {
                "t": [],
                "block_shape": [],
                "paddings": []
            }
        },
        "TestSpaceToBatchND._generic_masked_test": {
            "name": "_generic_masked_test",
            "location": 220,
            "return": [],
            "arguments": {
                "t": [],
                "block_shape": [],
                "paddings": []
            }
        },
        "Testconcat.setUp": {
            "name": "setUp",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Testconcat.test_concat": {
            "name": "test_concat",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Testconcat.test_masked_concat": {
            "name": "test_masked_concat",
            "location": 261,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConv2D.setUp": {
            "name": "setUp",
            "location": 285,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConv2D.test_forward": {
            "name": "test_forward",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConv2D.test_forward_bias": {
            "name": "test_forward_bias",
            "location": 335,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConv2D.test_backward": {
            "name": "test_backward",
            "location": 388,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMatMul.setUp": {
            "name": "setUp",
            "location": 393,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMatMul.test_matmul": {
            "name": "test_matmul",
            "location": 396,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMatMul.test_big_middle_matmul": {
            "name": "test_big_middle_matmul",
            "location": 430,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNegative.setUp": {
            "name": "setUp",
            "location": 465,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestNegative.test_negative": {
            "name": "test_negative",
            "location": 468,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSqrt.setUp": {
            "name": "setUp",
            "location": 501,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestSqrt.test_sqrt": {
            "name": "test_sqrt",
            "location": 504,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPad.setUp": {
            "name": "setUp",
            "location": 537,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPad.test_pad": {
            "name": "test_pad",
            "location": 540,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReduceMax.setUp": {
            "name": "setUp",
            "location": 567,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReduceMax.tearDown": {
            "name": "tearDown",
            "location": 570,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReduceMax.test_reduce_max_1d": {
            "name": "test_reduce_max_1d",
            "location": 573,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReduceMax.test_reduce_max_2d_axis0": {
            "name": "test_reduce_max_2d_axis0",
            "location": 592,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReduceMax.test_reduce_max_2d_axis1": {
            "name": "test_reduce_max_2d_axis1",
            "location": 611,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReduceMax.test_reduce_max_3d_axis0": {
            "name": "test_reduce_max_3d_axis0",
            "location": 630,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReduceSum.setUp": {
            "name": "setUp",
            "location": 651,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReduceSum.test_reduce_sum_1d": {
            "name": "test_reduce_sum_1d",
            "location": 654,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReduceSum.test_reduce_sum_2d": {
            "name": "test_reduce_sum_2d",
            "location": 671,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestReduceSum.test_reduce_sum_huge_vector": {
            "name": "test_reduce_sum_huge_vector",
            "location": 688,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStack.setUp": {
            "name": "setUp",
            "location": 707,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStack.test_stack": {
            "name": "test_stack",
            "location": 710,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStridedSlice.setUp": {
            "name": "setUp",
            "location": 737,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStridedSlice.test_strided_slice": {
            "name": "test_strided_slice",
            "location": 740,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/protocol/protocol.py": {
        "memoize": {
            "name": "memoize",
            "location": 39,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "Protocol.__enter__": {
            "name": "__enter__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Protocol.__exit__": {
            "name": "__exit__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "exception_type": [],
                "exception_value": [],
                "traceback": []
            }
        },
        "memoize.cache_nodes": {
            "name": "cache_nodes",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/protocol/__init__.py": {
        "get_all_funcs": {
            "name": "get_all_funcs",
            "location": 16,
            "return": [],
            "arguments": {}
        }
    },
    "tf-encrypted-master/tf_encrypted/protocol/aby3/aby3.py": {
        "_reveal_private": {
            "name": "_reveal_private",
            "location": 1706,
            "return": [],
            "arguments": {
                "prot": [],
                "x": []
            }
        },
        "_add_private_private": {
            "name": "_add_private_private",
            "location": 1730,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_add_private_public": {
            "name": "_add_private_public",
            "location": 1744,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_add_public_private": {
            "name": "_add_public_private",
            "location": 1771,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_add_public_public": {
            "name": "_add_public_public",
            "location": 1799,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_sub_private_private": {
            "name": "_sub_private_private",
            "location": 1820,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_sub_private_public": {
            "name": "_sub_private_public",
            "location": 1837,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_sub_public_private": {
            "name": "_sub_public_private",
            "location": 1863,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_negative_private": {
            "name": "_negative_private",
            "location": 1893,
            "return": [],
            "arguments": {
                "prot": [],
                "x": []
            }
        },
        "_negative_public": {
            "name": "_negative_public",
            "location": 1909,
            "return": [],
            "arguments": {
                "prot": [],
                "x": []
            }
        },
        "_mul_public_private": {
            "name": "_mul_public_private",
            "location": 1932,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_mul_private_public": {
            "name": "_mul_private_public",
            "location": 1959,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_mul_private_private": {
            "name": "_mul_private_private",
            "location": 1986,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_mul_trunc2_private_private": {
            "name": "_mul_trunc2_private_private",
            "location": 2035,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_matmul_public_private": {
            "name": "_matmul_public_private",
            "location": 2108,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_matmul_private_public": {
            "name": "_matmul_private_public",
            "location": 2135,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_matmul_private_private": {
            "name": "_matmul_private_private",
            "location": 2162,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_truncate_private": {
            "name": "_truncate_private",
            "location": 2216,
            "return": [],
            "arguments": {
                "prot": [],
                "x": []
            }
        },
        "_truncate_private_noninteractive": {
            "name": "_truncate_private_noninteractive",
            "location": 2225,
            "return": [],
            "arguments": {
                "prot": [],
                "x": []
            }
        },
        "_truncate_private_interactive": {
            "name": "_truncate_private_interactive",
            "location": 2273,
            "return": [],
            "arguments": {
                "prot": [],
                "a": []
            }
        },
        "_B_xor_private_private": {
            "name": "_B_xor_private_private",
            "location": 2394,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_B_xor_private_public": {
            "name": "_B_xor_private_public",
            "location": 2417,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_B_and_private_private": {
            "name": "_B_and_private_private",
            "location": 2440,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_B_and_private_public": {
            "name": "_B_and_private_public",
            "location": 2487,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_B_and_public_private": {
            "name": "_B_and_public_private",
            "location": 2511,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_B_or_private_private": {
            "name": "_B_or_private_private",
            "location": 2535,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_B_not_private": {
            "name": "_B_not_private",
            "location": 2545,
            "return": [],
            "arguments": {
                "prot": [],
                "x": []
            }
        },
        "_lshift_private": {
            "name": "_lshift_private",
            "location": 2567,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "steps": []
            }
        },
        "_rshift_private": {
            "name": "_rshift_private",
            "location": 2587,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "steps": []
            }
        },
        "_logical_rshift_private": {
            "name": "_logical_rshift_private",
            "location": 2607,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "steps": []
            }
        },
        "_B_add_private_private": {
            "name": "_B_add_private_private",
            "location": 2627,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_B_sub_private_private": {
            "name": "_B_sub_private_private",
            "location": 2633,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_B_ppa_private_private": {
            "name": "_B_ppa_private_private",
            "location": 2639,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": [],
                "n_bits": [],
                "topology": []
            }
        },
        "_B_ppa_sklansky_private_private": {
            "name": "_B_ppa_sklansky_private_private",
            "location": 2658,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": [],
                "n_bits": []
            }
        },
        "_B_ppa_kogge_stone_private_private": {
            "name": "_B_ppa_kogge_stone_private_private",
            "location": 2755,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": [],
                "n_bits": []
            }
        },
        "_A2B_private": {
            "name": "_A2B_private",
            "location": 2815,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "nbits": []
            }
        },
        "_bit_extract_private": {
            "name": "_bit_extract_private",
            "location": 2867,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "i": []
            }
        },
        "_B2A_private": {
            "name": "_B2A_private",
            "location": 2943,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "nbits": []
            }
        },
        "_mul_AB_public_private": {
            "name": "_mul_AB_public_private",
            "location": 3003,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_mul_AB_private_private": {
            "name": "_mul_AB_private_private",
            "location": 3018,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "__mul_AB_routine": {
            "name": "__mul_AB_routine",
            "location": 3041,
            "return": [],
            "arguments": {
                "prot": [],
                "a": [],
                "b": [],
                "sender_idx": []
            }
        },
        "_pow_private": {
            "name": "_pow_private",
            "location": 3099,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "p": []
            }
        },
        "_polynomial_private": {
            "name": "_polynomial_private",
            "location": 3119,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "coeffs": []
            }
        },
        "_polynomial_piecewise_private": {
            "name": "_polynomial_piecewise_private",
            "location": 3142,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "c": [],
                "coeffs": []
            }
        },
        "_sigmoid_private": {
            "name": "_sigmoid_private",
            "location": 3173,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "approx_type": []
            }
        },
        "_transpose_private": {
            "name": "_transpose_private",
            "location": 3194,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "perm": []
            }
        },
        "_transpose_public": {
            "name": "_transpose_public",
            "location": 3209,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "perm": []
            }
        },
        "_reduce_sum_public": {
            "name": "_reduce_sum_public",
            "location": 3235,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "axis": [],
                "keepdims": []
            }
        },
        "_reduce_sum_private": {
            "name": "_reduce_sum_private",
            "location": 3253,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "axis": [],
                "keepdims": []
            }
        },
        "_concat_public": {
            "name": "_concat_public",
            "location": 3271,
            "return": [],
            "arguments": {
                "prot": [],
                "xs": [],
                "axis": []
            }
        },
        "_concat_private": {
            "name": "_concat_private",
            "location": 3297,
            "return": [],
            "arguments": {
                "prot": [],
                "xs": [],
                "axis": []
            }
        },
        "_write_private": {
            "name": "_write_private",
            "location": 3320,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "filename_prefix": []
            }
        },
        "_read_": {
            "name": "_read_",
            "location": 3347,
            "return": [],
            "arguments": {
                "prot": [],
                "filename_prefix": [],
                "batch_size": [],
                "n_columns": []
            }
        },
        "_iterate_private": {
            "name": "_iterate_private",
            "location": 3377,
            "return": [],
            "arguments": {
                "prot": [],
                "tensor": [],
                "batch_size": [],
                "repeat": [],
                "shuffle": [],
                "seed": []
            }
        },
        "_indexer_private": {
            "name": "_indexer_private",
            "location": 3436,
            "return": [],
            "arguments": {
                "prot": [],
                "tensor": [],
                "slc": []
            }
        },
        "_reshape_private": {
            "name": "_reshape_private",
            "location": 3447,
            "return": [],
            "arguments": {
                "prot": [],
                "tensor": [],
                "axe": []
            }
        },
        "ABY3.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "server_0": [],
                "server_1": [],
                "server_2": [],
                "use_noninteractive_truncation": []
            }
        },
        "ABY3.nbits": {
            "name": "nbits",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ABY3.setup_pairwise_randomness": {
            "name": "setup_pairwise_randomness",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ABY3.setup_b2a_generator": {
            "name": "setup_b2a_generator",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ABY3.define_constant": {
            "name": "define_constant",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "apply_scaling": [],
                "share_type": [],
                "name": [],
                "factory": []
            }
        },
        "ABY3.define_private_variable": {
            "name": "define_private_variable",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "initial_value": [],
                "apply_scaling": [],
                "share_type": [],
                "name": [],
                "factory": []
            }
        },
        "ABY3.define_local_computation": {
            "name": "define_local_computation",
            "location": 333,
            "return": [],
            "arguments": {
                "self": [],
                "player": [],
                "computation_fn": [],
                "arguments": [],
                "apply_scaling": [],
                "share_type": [],
                "name": [],
                "factory": []
            }
        },
        "ABY3.define_private_input": {
            "name": "define_private_input",
            "location": 420,
            "return": [],
            "arguments": {
                "self": [],
                "player": [],
                "inputter_fn": [],
                "apply_scaling": [],
                "share_type": [],
                "name": [],
                "factory": []
            }
        },
        "ABY3.define_public_input": {
            "name": "define_public_input",
            "location": 452,
            "return": [],
            "arguments": {
                "self": [],
                "player": [],
                "inputter_fn": [],
                "apply_scaling": [],
                "share_type": [],
                "name": [],
                "factory": []
            }
        },
        "ABY3.define_public_tensor": {
            "name": "define_public_tensor",
            "location": 507,
            "return": [],
            "arguments": {
                "self": [],
                "tensor": [],
                "apply_scaling": [],
                "share_type": [],
                "name": [],
                "factory": []
            }
        },
        "ABY3.define_output": {
            "name": "define_output",
            "location": 530,
            "return": [],
            "arguments": {
                "self": [],
                "player": [],
                "arguments": [],
                "outputter_fn": [],
                "name": []
            }
        },
        "ABY3._encode": {
            "name": "_encode",
            "location": 552,
            "return": [],
            "arguments": {
                "self": [],
                "rationals": [],
                "apply_scaling": [],
                "factory": []
            }
        },
        "ABY3._decode": {
            "name": "_decode",
            "location": 589,
            "return": [],
            "arguments": {
                "self": [],
                "elements": [],
                "is_scaled": []
            }
        },
        "ABY3._share": {
            "name": "_share",
            "location": 598,
            "return": [],
            "arguments": {
                "self": [],
                "secret": [],
                "share_type": [],
                "player": []
            }
        },
        "ABY3._share_and_wrap": {
            "name": "_share_and_wrap",
            "location": 623,
            "return": [],
            "arguments": {
                "self": [],
                "secret": [],
                "is_scaled": [],
                "share_type": [],
                "player": []
            }
        },
        "ABY3._reconstruct": {
            "name": "_reconstruct",
            "location": 629,
            "return": [],
            "arguments": {
                "self": [],
                "shares": [],
                "player": [],
                "share_type": []
            }
        },
        "ABY3._gen_zero_sharing": {
            "name": "_gen_zero_sharing",
            "location": 668,
            "return": [],
            "arguments": {
                "self": [],
                "shape": [],
                "share_type": [],
                "factory": []
            }
        },
        "ABY3._gen_random_sharing": {
            "name": "_gen_random_sharing",
            "location": 709,
            "return": [],
            "arguments": {
                "self": [],
                "shape": [],
                "share_type": [],
                "factory": []
            }
        },
        "ABY3._gen_b2a_sharing": {
            "name": "_gen_b2a_sharing",
            "location": 740,
            "return": [],
            "arguments": {
                "self": [],
                "shape": [],
                "b2a_keys": []
            }
        },
        "ABY3._ot": {
            "name": "_ot",
            "location": 787,
            "return": [],
            "arguments": {
                "self": [],
                "sender": [],
                "receiver": [],
                "helper": [],
                "m0": [],
                "m1": [],
                "c_on_receiver": [],
                "c_on_helper": [],
                "key_on_sender": [],
                "key_on_helper": [],
                "nonce": []
            }
        },
        "ABY3.assign": {
            "name": "assign",
            "location": 840,
            "return": [],
            "arguments": {
                "self": [],
                "variable": [],
                "value": []
            }
        },
        "ABY3.add": {
            "name": "add",
            "location": 885,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "ABY3.lift": {
            "name": "lift",
            "location": 895,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "share_type": []
            }
        },
        "ABY3.add_n": {
            "name": "add_n",
            "location": 994,
            "return": [],
            "arguments": {
                "self": [],
                "tensors": []
            }
        },
        "ABY3.sub": {
            "name": "sub",
            "location": 1000,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "ABY3.negative": {
            "name": "negative",
            "location": 1005,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ABY3.mul": {
            "name": "mul",
            "location": 1010,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "ABY3.mul_trunc2": {
            "name": "mul_trunc2",
            "location": 1015,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "ABY3.div": {
            "name": "div",
            "location": 1020,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "ABY3.pow": {
            "name": "pow",
            "location": 1042,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "p": []
            }
        },
        "ABY3.matmul": {
            "name": "matmul",
            "location": 1047,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "ABY3.gather_bit": {
            "name": "gather_bit",
            "location": 1051,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "even": []
            }
        },
        "ABY3.xor_indices": {
            "name": "xor_indices",
            "location": 1055,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ABY3.transpose": {
            "name": "transpose",
            "location": 1060,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "perm": []
            }
        },
        "ABY3.indexer": {
            "name": "indexer",
            "location": 1064,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "slc": []
            }
        },
        "ABY3.reshape": {
            "name": "reshape",
            "location": 1067,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "axe": []
            }
        },
        "ABY3.concat": {
            "name": "concat",
            "location": 1071,
            "return": [],
            "arguments": {
                "self": [],
                "xs": [],
                "axis": []
            }
        },
        "ABY3.reduce_sum": {
            "name": "reduce_sum",
            "location": 1081,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "axis": [],
                "keepdims": []
            }
        },
        "ABY3.truncate": {
            "name": "truncate",
            "location": 1086,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ABY3.reveal": {
            "name": "reveal",
            "location": 1090,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ABY3.B_xor": {
            "name": "B_xor",
            "location": 1094,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "ABY3.B_and": {
            "name": "B_and",
            "location": 1099,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "ABY3.B_or": {
            "name": "B_or",
            "location": 1104,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "ABY3.B_not": {
            "name": "B_not",
            "location": 1109,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ABY3.B_ppa": {
            "name": "B_ppa",
            "location": 1114,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "n_bits": [],
                "topology": []
            }
        },
        "ABY3.B_add": {
            "name": "B_add",
            "location": 1119,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "ABY3.B_sub": {
            "name": "B_sub",
            "location": 1124,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "ABY3.lshift": {
            "name": "lshift",
            "location": 1129,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "steps": []
            }
        },
        "ABY3.rshift": {
            "name": "rshift",
            "location": 1133,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "steps": []
            }
        },
        "ABY3.logical_rshift": {
            "name": "logical_rshift",
            "location": 1137,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "steps": []
            }
        },
        "ABY3.A2B": {
            "name": "A2B",
            "location": 1141,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "nbits": []
            }
        },
        "ABY3.B2A": {
            "name": "B2A",
            "location": 1145,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "nbits": []
            }
        },
        "ABY3.mul_AB": {
            "name": "mul_AB",
            "location": 1149,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "ABY3.bit_extract": {
            "name": "bit_extract",
            "location": 1158,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "i": []
            }
        },
        "ABY3.msb": {
            "name": "msb",
            "location": 1165,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "ABY3.polynomial": {
            "name": "polynomial",
            "location": 1169,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "coeffs": []
            }
        },
        "ABY3.polynomial_piecewise": {
            "name": "polynomial_piecewise",
            "location": 1174,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "c": [],
                "coeffs": []
            }
        },
        "ABY3.sigmoid": {
            "name": "sigmoid",
            "location": 1178,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "approx_type": []
            }
        },
        "ABY3.gather": {
            "name": "gather",
            "location": 1182,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "indices": [],
                "axis": []
            }
        },
        "ABY3.stack": {
            "name": "stack",
            "location": 1186,
            "return": [],
            "arguments": {
                "self": [],
                "xs": [],
                "axis": []
            }
        },
        "ABY3.write": {
            "name": "write",
            "location": 1189,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "filename_prefix": []
            }
        },
        "ABY3.read": {
            "name": "read",
            "location": 1194,
            "return": [],
            "arguments": {
                "self": [],
                "filename_prefix": [],
                "batch_size": [],
                "n_columns": []
            }
        },
        "ABY3.iterate": {
            "name": "iterate",
            "location": 1197,
            "return": [],
            "arguments": {
                "self": [],
                "tensor": [],
                "batch_size": [],
                "repeat": [],
                "shuffle": [],
                "seed": []
            }
        },
        "ABY3.blinded_shuffle": {
            "name": "blinded_shuffle",
            "location": 1209,
            "return": [],
            "arguments": {
                "self": [],
                "tensor": []
            }
        },
        "ABY3.dispatch": {
            "name": "dispatch",
            "location": 1223,
            "return": [],
            "arguments": {
                "self": [],
                "base_name": []
            }
        },
        "ABY3Tensor.__init__": {
            "name": "__init__",
            "location": 1270,
            "return": [],
            "arguments": {
                "self": [],
                "prot": [],
                "is_scaled": [],
                "share_type": []
            }
        },
        "ABY3Tensor.shape": {
            "name": "shape",
            "location": 1277,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ABY3Tensor.unwrapped": {
            "name": "unwrapped",
            "location": 1286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ABY3Tensor.add": {
            "name": "add",
            "location": 1289,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ABY3Tensor.__add__": {
            "name": "__add__",
            "location": 1307,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ABY3Tensor.__radd__": {
            "name": "__radd__",
            "location": 1313,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ABY3Tensor.reduce_sum": {
            "name": "reduce_sum",
            "location": 1316,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "keepdims": []
            }
        },
        "ABY3Tensor.sum": {
            "name": "sum",
            "location": 1327,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "keepdims": []
            }
        },
        "ABY3Tensor.sub": {
            "name": "sub",
            "location": 1333,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ABY3Tensor.__sub__": {
            "name": "__sub__",
            "location": 1348,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ABY3Tensor.__rsub__": {
            "name": "__rsub__",
            "location": 1351,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ABY3Tensor.mul": {
            "name": "mul",
            "location": 1359,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ABY3Tensor.__mul__": {
            "name": "__mul__",
            "location": 1369,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ABY3Tensor.__rmul__": {
            "name": "__rmul__",
            "location": 1372,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ABY3Tensor.__truediv__": {
            "name": "__truediv__",
            "location": 1375,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ABY3Tensor.__mod__": {
            "name": "__mod__",
            "location": 1378,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ABY3Tensor.__pow__": {
            "name": "__pow__",
            "location": 1381,
            "return": [],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "ABY3Tensor.square": {
            "name": "square",
            "location": 1384,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ABY3Tensor.matmul": {
            "name": "matmul",
            "location": 1393,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ABY3Tensor.dot": {
            "name": "dot",
            "location": 1405,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ABY3Tensor.__getitem__": {
            "name": "__getitem__",
            "location": 1412,
            "return": [],
            "arguments": {
                "self": [],
                "slc": []
            }
        },
        "ABY3Tensor.transpose": {
            "name": "transpose",
            "location": 1415,
            "return": [],
            "arguments": {
                "self": [],
                "perm": []
            }
        },
        "ABY3Tensor.truncate": {
            "name": "truncate",
            "location": 1428,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ABY3Tensor.expand_dims": {
            "name": "expand_dims",
            "location": 1439,
            "return": [],
            "arguments": {
                "self": [],
                "axis": []
            }
        },
        "ABY3Tensor.reshape": {
            "name": "reshape",
            "location": 1448,
            "return": [],
            "arguments": {
                "self": [],
                "shape": []
            }
        },
        "ABY3Tensor.__neg__": {
            "name": "__neg__",
            "location": 1459,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ABY3Tensor.negative": {
            "name": "negative",
            "location": 1462,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ABY3Tensor.reduce_max": {
            "name": "reduce_max",
            "location": 1471,
            "return": [],
            "arguments": {
                "self": [],
                "axis": []
            }
        },
        "ABY3Tensor.bitwise_xor": {
            "name": "bitwise_xor",
            "location": 1481,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ABY3Tensor.__xor__": {
            "name": "__xor__",
            "location": 1489,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ABY3Tensor.bitwise_and": {
            "name": "bitwise_and",
            "location": 1492,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ABY3Tensor.__and__": {
            "name": "__and__",
            "location": 1500,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ABY3Tensor.bitwise_or": {
            "name": "bitwise_or",
            "location": 1503,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ABY3Tensor.__or__": {
            "name": "__or__",
            "location": 1511,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "ABY3Tensor.invert": {
            "name": "invert",
            "location": 1514,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ABY3Tensor.__invert__": {
            "name": "__invert__",
            "location": 1522,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ABY3Tensor.__lshift__": {
            "name": "__lshift__",
            "location": 1525,
            "return": [],
            "arguments": {
                "self": [],
                "steps": []
            }
        },
        "ABY3Tensor.lshift": {
            "name": "lshift",
            "location": 1528,
            "return": [],
            "arguments": {
                "self": [],
                "steps": []
            }
        },
        "ABY3Tensor.__rshift__": {
            "name": "__rshift__",
            "location": 1531,
            "return": [],
            "arguments": {
                "self": [],
                "steps": []
            }
        },
        "ABY3Tensor.rshift": {
            "name": "rshift",
            "location": 1534,
            "return": [],
            "arguments": {
                "self": [],
                "steps": []
            }
        },
        "ABY3Tensor.arith_rshift": {
            "name": "arith_rshift",
            "location": 1537,
            "return": [],
            "arguments": {
                "self": [],
                "steps": []
            }
        },
        "ABY3Tensor.logical_rshift": {
            "name": "logical_rshift",
            "location": 1540,
            "return": [],
            "arguments": {
                "self": [],
                "steps": []
            }
        },
        "ABY3Tensor.write": {
            "name": "write",
            "location": 1543,
            "return": [],
            "arguments": {
                "self": [],
                "filename_prefix": []
            }
        },
        "ABY3PublicTensor.__init__": {
            "name": "__init__",
            "location": 1557,
            "return": [],
            "arguments": {
                "self": [],
                "prot": [],
                "values": [],
                "is_scaled": [],
                "share_type": []
            }
        },
        "ABY3PublicTensor.__repr__": {
            "name": "__repr__",
            "location": 1566,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ABY3PublicTensor.shape": {
            "name": "shape",
            "location": 1572,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ABY3PublicTensor.backing_dtype": {
            "name": "backing_dtype",
            "location": 1576,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ABY3PublicTensor.unwrapped": {
            "name": "unwrapped",
            "location": 1580,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ABY3PublicTensor.decode": {
            "name": "decode",
            "location": 1616,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ABY3PublicTensor.to_native": {
            "name": "to_native",
            "location": 1621,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ABY3Constant.__init__": {
            "name": "__init__",
            "location": 1631,
            "return": [],
            "arguments": {
                "self": [],
                "prot": [],
                "constants": [],
                "is_scaled": [],
                "share_type": []
            }
        },
        "ABY3Constant.__repr__": {
            "name": "__repr__",
            "location": 1638,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ABY3PrivateTensor.__init__": {
            "name": "__init__",
            "location": 1651,
            "return": [],
            "arguments": {
                "self": [],
                "prot": [],
                "shares": [],
                "is_scaled": [],
                "share_type": []
            }
        },
        "ABY3PrivateTensor.__repr__": {
            "name": "__repr__",
            "location": 1660,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ABY3PrivateTensor.shape": {
            "name": "shape",
            "location": 1666,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ABY3PrivateTensor.backing_dtype": {
            "name": "backing_dtype",
            "location": 1670,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ABY3PrivateTensor.unwrapped": {
            "name": "unwrapped",
            "location": 1674,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ABY3PrivateTensor.reveal": {
            "name": "reveal",
            "location": 1677,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ABY3PrivateVariable.__init__": {
            "name": "__init__",
            "location": 1688,
            "return": [],
            "arguments": {
                "self": [],
                "prot": [],
                "shares": [],
                "is_scaled": [],
                "share_type": []
            }
        },
        "ABY3PrivateVariable.__repr__": {
            "name": "__repr__",
            "location": 1695,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "_write_private.encode": {
            "name": "encode",
            "location": 3323,
            "return": [],
            "arguments": {
                "feature_row": []
            }
        },
        "_read_.decode": {
            "name": "decode",
            "location": 3351,
            "return": [],
            "arguments": {
                "line": []
            }
        },
        "_iterate_private.helper": {
            "name": "helper",
            "location": 3395,
            "return": [],
            "arguments": {
                "idx": []
            }
        },
        "ABY3.define_local_computation.share_output": {
            "name": "share_output",
            "location": 358,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "ABY3.define_local_computation.reconstruct_input": {
            "name": "reconstruct_input",
            "location": 371,
            "return": [],
            "arguments": {
                "x": [],
                "player": []
            }
        },
        "ABY3.define_public_input.helper": {
            "name": "helper",
            "location": 478,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "ABY3.define_output.result_wrapper": {
            "name": "result_wrapper",
            "location": 539,
            "return": [],
            "arguments": {}
        },
        "ABY3._reconstruct.helper": {
            "name": "helper",
            "location": 641,
            "return": [],
            "arguments": {
                "s0": [],
                "s1": [],
                "s2": []
            }
        },
        "ABY3._gen_zero_sharing.helper": {
            "name": "helper",
            "location": 669,
            "return": [],
            "arguments": {
                "f0": [],
                "f1": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/protocol/aby3/aby3_test.py": {
        "print_banner": {
            "name": "print_banner",
            "location": 1101,
            "return": [],
            "arguments": {
                "title": []
            }
        },
        "TestABY3.test_add_private_private": {
            "name": "test_add_private_private",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABY3.test_add_private_public": {
            "name": "test_add_private_public",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABY3.test_sub_private_private": {
            "name": "test_sub_private_private",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABY3.test_sub_private_public": {
            "name": "test_sub_private_public",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABY3.test_neg": {
            "name": "test_neg",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABY3.test_mul_private_public": {
            "name": "test_mul_private_public",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABY3.test_mul_private_private": {
            "name": "test_mul_private_private",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABY3.test_matmul_public_private": {
            "name": "test_matmul_public_private",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABY3.test_matmul_private_private": {
            "name": "test_matmul_private_private",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABY3.test_3d_matmul_private": {
            "name": "test_3d_matmul_private",
            "location": 251,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABY3.test_boolean_sharing": {
            "name": "test_boolean_sharing",
            "location": 275,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABY3.test_not_private": {
            "name": "test_not_private",
            "location": 306,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABY3.test_native_ppa_sklansky": {
            "name": "test_native_ppa_sklansky",
            "location": 338,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABY3.test_native_ppa_kogge_stone": {
            "name": "test_native_ppa_kogge_stone",
            "location": 420,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABY3.test_lshift_private": {
            "name": "test_lshift_private",
            "location": 473,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABY3.test_rshift_private": {
            "name": "test_rshift_private",
            "location": 494,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABY3.test_ppa_private_private": {
            "name": "test_ppa_private_private",
            "location": 547,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABY3.test_a2b_private": {
            "name": "test_a2b_private",
            "location": 578,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABY3.test_b2a_private": {
            "name": "test_b2a_private",
            "location": 600,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABY3.test_ot": {
            "name": "test_ot",
            "location": 622,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABY3.test_mul_AB_public_private": {
            "name": "test_mul_AB_public_private",
            "location": 669,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABY3.test_mul_AB_private_private": {
            "name": "test_mul_AB_private_private",
            "location": 694,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABY3.test_bit_extract": {
            "name": "test_bit_extract",
            "location": 721,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABY3.test_pow_private": {
            "name": "test_pow_private",
            "location": 768,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABY3.test_polynomial_private": {
            "name": "test_polynomial_private",
            "location": 793,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABY3.test_polynomial_piecewise": {
            "name": "test_polynomial_piecewise",
            "location": 826,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABY3.test_transpose": {
            "name": "test_transpose",
            "location": 860,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABY3.test_reduce_sum": {
            "name": "test_reduce_sum",
            "location": 886,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABY3.test_concat": {
            "name": "test_concat",
            "location": 910,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABY3.test_simple_lr_model": {
            "name": "test_simple_lr_model",
            "location": 938,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABY3.test_mul_trunc2_private_private": {
            "name": "test_mul_trunc2_private_private",
            "location": 976,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABY3.test_write_private": {
            "name": "test_write_private",
            "location": 1004,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABY3.test_read_private": {
            "name": "test_read_private",
            "location": 1030,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABY3.test_iterate_private": {
            "name": "test_iterate_private",
            "location": 1065,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestABY3.test_add_private_private.provide_input": {
            "name": "provide_input",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "TestABY3.test_sub_private_private.provide_input": {
            "name": "provide_input",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "TestABY3.test_mul_private_private.provide_input": {
            "name": "provide_input",
            "location": 168,
            "return": [],
            "arguments": {}
        },
        "TestABY3.test_matmul_public_private.provide_input": {
            "name": "provide_input",
            "location": 196,
            "return": [],
            "arguments": {}
        },
        "TestABY3.test_mul_trunc2_private_private.provide_input": {
            "name": "provide_input",
            "location": 982,
            "return": [],
            "arguments": {}
        },
        "TestABY3.test_write_private.provide_input": {
            "name": "provide_input",
            "location": 1010,
            "return": [],
            "arguments": {}
        },
        "TestABY3.test_read_private.provide_input": {
            "name": "provide_input",
            "location": 1037,
            "return": [],
            "arguments": {}
        },
        "TestABY3.test_iterate_private.provide_input": {
            "name": "provide_input",
            "location": 1071,
            "return": [],
            "arguments": {}
        }
    },
    "tf-encrypted-master/tf_encrypted/protocol/aby3/__init__.py": {},
    "tf-encrypted-master/tf_encrypted/protocol/aby3/model/logistic_regression.py": {
        "LogisticRegression.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "num_features": [],
                "init_learning_rate": []
            }
        },
        "LogisticRegression.weights": {
            "name": "weights",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LogisticRegression.forward": {
            "name": "forward",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "LogisticRegression.backward": {
            "name": "backward",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "dy": [],
                "learning_rate": []
            }
        },
        "LogisticRegression.loss_grad": {
            "name": "loss_grad",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "y": [],
                "y_hat": []
            }
        },
        "LogisticRegression.fit_batch": {
            "name": "fit_batch",
            "location": 42,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "LogisticRegression.fit": {
            "name": "fit",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "sess": [],
                "x": [],
                "y": [],
                "num_iters": []
            }
        },
        "LogisticRegression.loss": {
            "name": "loss",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "sess": [],
                "x": [],
                "y": [],
                "player_name": []
            }
        },
        "LogisticRegression.evaluate": {
            "name": "evaluate",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "sess": [],
                "x": [],
                "y": [],
                "data_owner": []
            }
        },
        "FakeDataOwner.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "player_name": [],
                "num_features": [],
                "train_set_size": [],
                "test_set_size": [],
                "batch_size": []
            }
        },
        "FakeDataOwner.initializer": {
            "name": "initializer",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeDataOwner.provide_train_data_fake": {
            "name": "provide_train_data_fake",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeDataOwner.provide_train_features_fake": {
            "name": "provide_train_features_fake",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeDataOwner.provide_train_targets_fake": {
            "name": "provide_train_targets_fake",
            "location": 153,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeDataOwner.provide_test_data_fake": {
            "name": "provide_test_data_fake",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeDataOwner.provide_test_features_fake": {
            "name": "provide_test_features_fake",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FakeDataOwner.provide_test_targets_fake": {
            "name": "provide_test_targets_fake",
            "location": 198,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataSchema.__init__": {
            "name": "__init__",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "field_types": [],
                "field_defaults": []
            }
        },
        "DataSchema.field_num": {
            "name": "field_num",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataOwner.__init__": {
            "name": "__init__",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "player_name": [],
                "local_data_file": [],
                "data_schema": [],
                "header": [],
                "index": [],
                "field_delim": [],
                "na_values": [],
                "batch_size": []
            }
        },
        "DataOwner.provide_data_experimental": {
            "name": "provide_data_experimental",
            "location": 236,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataOwner.provide_data": {
            "name": "provide_data",
            "location": 265,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelOwner.__init__": {
            "name": "__init__",
            "location": 295,
            "return": [],
            "arguments": {
                "self": [],
                "player_name": []
            }
        },
        "ModelOwner.receive_weights": {
            "name": "receive_weights",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictionClient.__init__": {
            "name": "__init__",
            "location": 303,
            "return": [],
            "arguments": {
                "self": [],
                "player_name": [],
                "num_features": []
            }
        },
        "PredictionClient.provide_input_fake": {
            "name": "provide_input_fake",
            "location": 307,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PredictionClient.receive_output": {
            "name": "receive_output",
            "location": 312,
            "return": [],
            "arguments": {
                "self": [],
                "result": []
            }
        },
        "LossDebugger.__init__": {
            "name": "__init__",
            "location": 317,
            "return": [],
            "arguments": {
                "self": [],
                "player_name": []
            }
        },
        "LossDebugger.loss": {
            "name": "loss",
            "location": 320,
            "return": [],
            "arguments": {
                "self": [],
                "model": [],
                "x": [],
                "y": []
            }
        },
        "LogisticRegression.loss.print_loss": {
            "name": "print_loss",
            "location": 60,
            "return": [],
            "arguments": {
                "y_hat": [],
                "y": []
            }
        },
        "LogisticRegression.evaluate.print_accuracy": {
            "name": "print_accuracy",
            "location": 74,
            "return": [],
            "arguments": {
                "y_hat": [],
                "y": []
            }
        },
        "DataOwner.provide_data.decode": {
            "name": "decode",
            "location": 266,
            "return": [],
            "arguments": {
                "line": []
            }
        },
        "DataOwner.provide_data.fill_na": {
            "name": "fill_na",
            "location": 274,
            "return": [],
            "arguments": {
                "fields": [],
                "fill_values": []
            }
        },
        "LossDebugger.loss.print_loss": {
            "name": "print_loss",
            "location": 321,
            "return": [],
            "arguments": {
                "y_hat": [],
                "y": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/protocol/pond/pond.py": {
        "_type": {
            "name": "_type",
            "location": 2243,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "debug": {
            "name": "debug",
            "location": 2259,
            "return": [],
            "arguments": {
                "x": [],
                "summarize": [],
                "message": []
            }
        },
        "_identity_public": {
            "name": "_identity_public",
            "location": 2286,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "control_dependencies_0": [],
                "control_dependencies_1": []
            }
        },
        "_identity_private": {
            "name": "_identity_private",
            "location": 2313,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "control_dependencies_0": [],
                "control_dependencies_1": []
            }
        },
        "_cache_public": {
            "name": "_cache_public",
            "location": 2345,
            "return": [],
            "arguments": {
                "prot": [],
                "x": []
            }
        },
        "_cache_private": {
            "name": "_cache_private",
            "location": 2368,
            "return": [],
            "arguments": {
                "prot": [],
                "x": []
            }
        },
        "_cache_masked": {
            "name": "_cache_masked",
            "location": 2391,
            "return": [],
            "arguments": {
                "prot": [],
                "x": []
            }
        },
        "_truncate_public": {
            "name": "_truncate_public",
            "location": 2431,
            "return": [],
            "arguments": {
                "prot": [],
                "x": []
            }
        },
        "_truncate_private": {
            "name": "_truncate_private",
            "location": 2449,
            "return": [],
            "arguments": {
                "prot": [],
                "x": []
            }
        },
        "_truncate_private_noninteractive": {
            "name": "_truncate_private_noninteractive",
            "location": 2458,
            "return": [],
            "arguments": {
                "prot": [],
                "x": []
            }
        },
        "_truncate_private_interactive": {
            "name": "_truncate_private_interactive",
            "location": 2478,
            "return": [],
            "arguments": {
                "prot": [],
                "a": []
            }
        },
        "_truncate_masked": {
            "name": "_truncate_masked",
            "location": 2542,
            "return": [],
            "arguments": {
                "prot": [],
                "x": []
            }
        },
        "_reveal_private": {
            "name": "_reveal_private",
            "location": 2552,
            "return": [],
            "arguments": {
                "prot": [],
                "x": []
            }
        },
        "_reveal_masked": {
            "name": "_reveal_masked",
            "location": 2568,
            "return": [],
            "arguments": {
                "prot": [],
                "x": []
            }
        },
        "_add_public_public": {
            "name": "_add_public_public",
            "location": 2578,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_add_public_private": {
            "name": "_add_public_private",
            "location": 2599,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_add_public_masked": {
            "name": "_add_public_masked",
            "location": 2620,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_add_private_public": {
            "name": "_add_private_public",
            "location": 2626,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_add_private_private": {
            "name": "_add_private_private",
            "location": 2647,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_add_private_masked": {
            "name": "_add_private_masked",
            "location": 2670,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_add_masked_public": {
            "name": "_add_masked_public",
            "location": 2676,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_add_masked_private": {
            "name": "_add_masked_private",
            "location": 2682,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_add_masked_masked": {
            "name": "_add_masked_masked",
            "location": 2688,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_reduce_sum_public": {
            "name": "_reduce_sum_public",
            "location": 2699,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "axis": [],
                "keepdims": []
            }
        },
        "_reduce_sum_private": {
            "name": "_reduce_sum_private",
            "location": 2719,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "axis": [],
                "keepdims": []
            }
        },
        "_reduce_sum_masked": {
            "name": "_reduce_sum_masked",
            "location": 2739,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "axis": [],
                "keepdims": []
            }
        },
        "_cumsum_public": {
            "name": "_cumsum_public",
            "location": 2753,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "axis": [],
                "exclusive": [],
                "reverse": []
            }
        },
        "_cumsum_private": {
            "name": "_cumsum_private",
            "location": 2774,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "axis": [],
                "exclusive": [],
                "reverse": []
            }
        },
        "_cumsum_masked": {
            "name": "_cumsum_masked",
            "location": 2795,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "axis": [],
                "exclusive": [],
                "reverse": []
            }
        },
        "_sub_public_public": {
            "name": "_sub_public_public",
            "location": 2810,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_sub_public_private": {
            "name": "_sub_public_private",
            "location": 2831,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_sub_public_masked": {
            "name": "_sub_public_masked",
            "location": 2852,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_sub_private_public": {
            "name": "_sub_private_public",
            "location": 2858,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_sub_private_private": {
            "name": "_sub_private_private",
            "location": 2879,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_sub_private_masked": {
            "name": "_sub_private_masked",
            "location": 2900,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_sub_masked_public": {
            "name": "_sub_masked_public",
            "location": 2906,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_sub_masked_private": {
            "name": "_sub_masked_private",
            "location": 2912,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_sub_masked_masked": {
            "name": "_sub_masked_masked",
            "location": 2918,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_mul_public_public": {
            "name": "_mul_public_public",
            "location": 2929,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_mul_public_private": {
            "name": "_mul_public_private",
            "location": 2949,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_mul_public_masked": {
            "name": "_mul_public_masked",
            "location": 2969,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_mul_private_public": {
            "name": "_mul_private_public",
            "location": 2975,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_mul_private_private": {
            "name": "_mul_private_private",
            "location": 2995,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_mul_private_masked": {
            "name": "_mul_private_masked",
            "location": 3001,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_mul_masked_public": {
            "name": "_mul_masked_public",
            "location": 3007,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_mul_masked_private": {
            "name": "_mul_masked_private",
            "location": 3013,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_mul_masked_masked": {
            "name": "_mul_masked_masked",
            "location": 3019,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_reciprocal_public": {
            "name": "_reciprocal_public",
            "location": 3052,
            "return": [],
            "arguments": {
                "prot": [],
                "x": []
            }
        },
        "_square_public": {
            "name": "_square_public",
            "location": 3097,
            "return": [],
            "arguments": {
                "prot": [],
                "x": []
            }
        },
        "_square_private": {
            "name": "_square_private",
            "location": 3115,
            "return": [],
            "arguments": {
                "prot": [],
                "x": []
            }
        },
        "_square_masked": {
            "name": "_square_masked",
            "location": 3120,
            "return": [],
            "arguments": {
                "prot": [],
                "x": []
            }
        },
        "_matmul_public_public": {
            "name": "_matmul_public_public",
            "location": 3149,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_matmul_public_private": {
            "name": "_matmul_public_private",
            "location": 3169,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_matmul_public_masked": {
            "name": "_matmul_public_masked",
            "location": 3189,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_matmul_private_public": {
            "name": "_matmul_private_public",
            "location": 3195,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_matmul_private_private": {
            "name": "_matmul_private_private",
            "location": 3215,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_matmul_private_masked": {
            "name": "_matmul_private_masked",
            "location": 3221,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_matmul_masked_public": {
            "name": "_matmul_masked_public",
            "location": 3227,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_matmul_masked_private": {
            "name": "_matmul_masked_private",
            "location": 3233,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_matmul_masked_masked": {
            "name": "_matmul_masked_masked",
            "location": 3239,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_conv2d_public_public": {
            "name": "_conv2d_public_public",
            "location": 3273,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": [],
                "strides": [],
                "padding": []
            }
        },
        "_conv2d_public_private": {
            "name": "_conv2d_public_private",
            "location": 3293,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": [],
                "strides": [],
                "padding": []
            }
        },
        "_conv2d_public_masked": {
            "name": "_conv2d_public_masked",
            "location": 3297,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": [],
                "strides": [],
                "padding": []
            }
        },
        "_conv2d_private_public": {
            "name": "_conv2d_private_public",
            "location": 3301,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": [],
                "strides": [],
                "padding": []
            }
        },
        "_conv2d_private_masked": {
            "name": "_conv2d_private_masked",
            "location": 3305,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": [],
                "strides": [],
                "padding": []
            }
        },
        "_conv2d_private_private": {
            "name": "_conv2d_private_private",
            "location": 3311,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": [],
                "strides": [],
                "padding": []
            }
        },
        "_conv2d_masked_public": {
            "name": "_conv2d_masked_public",
            "location": 3317,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": [],
                "strides": [],
                "padding": []
            }
        },
        "_conv2d_masked_private": {
            "name": "_conv2d_masked_private",
            "location": 3321,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": [],
                "strides": [],
                "padding": []
            }
        },
        "_conv2d_masked_masked": {
            "name": "_conv2d_masked_masked",
            "location": 3327,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": [],
                "strides": [],
                "padding": []
            }
        },
        "_avgpool2d_core": {
            "name": "_avgpool2d_core",
            "location": 3371,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "pool_size": [],
                "strides": [],
                "padding": []
            }
        },
        "_avgpool2d_im2col_reduce": {
            "name": "_avgpool2d_im2col_reduce",
            "location": 3398,
            "return": [],
            "arguments": {
                "x": [],
                "pool_size": [],
                "strides": [],
                "padding": []
            }
        },
        "_avgpool2d_reshape_reduce": {
            "name": "_avgpool2d_reshape_reduce",
            "location": 3423,
            "return": [],
            "arguments": {
                "x": [],
                "pool_size": []
            }
        },
        "_avgpool2d_public": {
            "name": "_avgpool2d_public",
            "location": 3436,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "pool_size": [],
                "strides": [],
                "padding": []
            }
        },
        "_avgpool2d_private": {
            "name": "_avgpool2d_private",
            "location": 3449,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "pool_size": [],
                "strides": [],
                "padding": []
            }
        },
        "_avgpool2d_masked": {
            "name": "_avgpool2d_masked",
            "location": 3462,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "pool_size": [],
                "strides": [],
                "padding": []
            }
        },
        "_batch_to_space_nd_core": {
            "name": "_batch_to_space_nd_core",
            "location": 3482,
            "return": [],
            "arguments": {
                "prot": [],
                "tensor": [],
                "block_shape": [],
                "crops": []
            }
        },
        "_batch_to_space_nd_public": {
            "name": "_batch_to_space_nd_public",
            "location": 3494,
            "return": [],
            "arguments": {
                "prot": [],
                "tensor": [],
                "block_shape": [],
                "crops": []
            }
        },
        "_batch_to_space_nd_private": {
            "name": "_batch_to_space_nd_private",
            "location": 3504,
            "return": [],
            "arguments": {
                "prot": [],
                "tensor": [],
                "block_shape": [],
                "crops": []
            }
        },
        "_batch_to_space_nd_masked": {
            "name": "_batch_to_space_nd_masked",
            "location": 3514,
            "return": [],
            "arguments": {
                "prot": [],
                "tensor": [],
                "block_shape": [],
                "crops": []
            }
        },
        "_space_to_batch_nd_core": {
            "name": "_space_to_batch_nd_core",
            "location": 3524,
            "return": [],
            "arguments": {
                "prot": [],
                "tensor": [],
                "block_shape": [],
                "paddings": []
            }
        },
        "_space_to_batch_nd_public": {
            "name": "_space_to_batch_nd_public",
            "location": 3538,
            "return": [],
            "arguments": {
                "prot": [],
                "tensor": [],
                "block_shape": [],
                "paddings": []
            }
        },
        "_space_to_batch_nd_private": {
            "name": "_space_to_batch_nd_private",
            "location": 3548,
            "return": [],
            "arguments": {
                "prot": [],
                "tensor": [],
                "block_shape": [],
                "paddings": []
            }
        },
        "_space_to_batch_nd_masked": {
            "name": "_space_to_batch_nd_masked",
            "location": 3558,
            "return": [],
            "arguments": {
                "prot": [],
                "tensor": [],
                "block_shape": [],
                "paddings": []
            }
        },
        "_indexer_public": {
            "name": "_indexer_public",
            "location": 3573,
            "return": [],
            "arguments": {
                "prot": [],
                "tensor": [],
                "slc": []
            }
        },
        "_indexer_private": {
            "name": "_indexer_private",
            "location": 3586,
            "return": [],
            "arguments": {
                "prot": [],
                "tensor": [],
                "slc": []
            }
        },
        "_indexer_masked": {
            "name": "_indexer_masked",
            "location": 3599,
            "return": [],
            "arguments": {
                "prot": [],
                "tensor": [],
                "slc": []
            }
        },
        "_transpose_public": {
            "name": "_transpose_public",
            "location": 3632,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "perm": []
            }
        },
        "_transpose_private": {
            "name": "_transpose_private",
            "location": 3648,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "perm": []
            }
        },
        "_transpose_masked": {
            "name": "_transpose_masked",
            "location": 3664,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "perm": []
            }
        },
        "_strided_slice_public": {
            "name": "_strided_slice_public",
            "location": 3698,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "args": [],
                "kwargs": []
            }
        },
        "_strided_slice_private": {
            "name": "_strided_slice_private",
            "location": 3714,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "args": [],
                "kwargs": []
            }
        },
        "_strided_slice_masked": {
            "name": "_strided_slice_masked",
            "location": 3730,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "args": [],
                "kwargs": []
            }
        },
        "_gather_public": {
            "name": "_gather_public",
            "location": 3764,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "indices": [],
                "axis": []
            }
        },
        "_gather_private": {
            "name": "_gather_private",
            "location": 3781,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "indices": [],
                "axis": []
            }
        },
        "_gather_masked": {
            "name": "_gather_masked",
            "location": 3798,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "indices": [],
                "axis": []
            }
        },
        "_split_public": {
            "name": "_split_public",
            "location": 3833,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "num_split": [],
                "axis": []
            }
        },
        "_split_private": {
            "name": "_split_private",
            "location": 3852,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "num_split": [],
                "axis": []
            }
        },
        "_split_masked": {
            "name": "_split_masked",
            "location": 3871,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "num_split": [],
                "axis": []
            }
        },
        "_stack_public": {
            "name": "_stack_public",
            "location": 3904,
            "return": [],
            "arguments": {
                "prot": [],
                "xs": [],
                "axis": []
            }
        },
        "_stack_private": {
            "name": "_stack_private",
            "location": 3922,
            "return": [],
            "arguments": {
                "prot": [],
                "xs": [],
                "axis": []
            }
        },
        "_stack_masked": {
            "name": "_stack_masked",
            "location": 3942,
            "return": [],
            "arguments": {
                "prot": [],
                "xs": [],
                "axis": []
            }
        },
        "_concat_public": {
            "name": "_concat_public",
            "location": 3978,
            "return": [],
            "arguments": {
                "prot": [],
                "xs": [],
                "axis": []
            }
        },
        "_concat_private": {
            "name": "_concat_private",
            "location": 3998,
            "return": [],
            "arguments": {
                "prot": [],
                "xs": [],
                "axis": []
            }
        },
        "_concat_masked": {
            "name": "_concat_masked",
            "location": 4018,
            "return": [],
            "arguments": {
                "prot": [],
                "xs": [],
                "axis": []
            }
        },
        "_mask_private": {
            "name": "_mask_private",
            "location": 4056,
            "return": [],
            "arguments": {
                "prot": [],
                "x": []
            }
        },
        "_sqrt_public": {
            "name": "_sqrt_public",
            "location": 4087,
            "return": [],
            "arguments": {
                "prot": [],
                "x": []
            }
        },
        "_reshape_public": {
            "name": "_reshape_public",
            "location": 4127,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "shape": []
            }
        },
        "_reshape_private": {
            "name": "_reshape_private",
            "location": 4145,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "shape": []
            }
        },
        "_reshape_masked": {
            "name": "_reshape_masked",
            "location": 4163,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "shape": []
            }
        },
        "_negative_public": {
            "name": "_negative_public",
            "location": 4198,
            "return": [],
            "arguments": {
                "prot": [],
                "x": []
            }
        },
        "_negative_private": {
            "name": "_negative_private",
            "location": 4214,
            "return": [],
            "arguments": {
                "prot": [],
                "x": []
            }
        },
        "_negative_masked": {
            "name": "_negative_masked",
            "location": 4230,
            "return": [],
            "arguments": {
                "prot": [],
                "x": []
            }
        },
        "_expand_dims_public": {
            "name": "_expand_dims_public",
            "location": 4263,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "axis": []
            }
        },
        "_expand_dims_private": {
            "name": "_expand_dims_private",
            "location": 4281,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "axis": []
            }
        },
        "_expand_dims_masked": {
            "name": "_expand_dims_masked",
            "location": 4299,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "axis": []
            }
        },
        "_squeeze_public": {
            "name": "_squeeze_public",
            "location": 4334,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "axis": []
            }
        },
        "_squeeze_private": {
            "name": "_squeeze_private",
            "location": 4352,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "axis": []
            }
        },
        "_squeeze_masked": {
            "name": "_squeeze_masked",
            "location": 4370,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "axis": []
            }
        },
        "_equal_public_public": {
            "name": "_equal_public_public",
            "location": 4404,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "y": []
            }
        },
        "_zeros_private": {
            "name": "_zeros_private",
            "location": 4427,
            "return": [],
            "arguments": {
                "prot": [],
                "shape": [],
                "apply_scaling": [],
                "name": [],
                "factory": []
            }
        },
        "_zeros_public": {
            "name": "_zeros_public",
            "location": 4454,
            "return": [],
            "arguments": {
                "prot": [],
                "shape": [],
                "apply_scaling": [],
                "name": [],
                "factory": []
            }
        },
        "Pond.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "server_0": [],
                "server_1": [],
                "triple_source": [],
                "tensor_factory": [],
                "fixedpoint_config": []
            }
        },
        "Pond.define_constant": {
            "name": "define_constant",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "apply_scaling": [],
                "name": [],
                "factory": []
            }
        },
        "Pond.define_public_placeholder": {
            "name": "define_public_placeholder",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "shape": [],
                "apply_scaling": [],
                "name": [],
                "factory": []
            }
        },
        "Pond.define_private_placeholder": {
            "name": "define_private_placeholder",
            "location": 209,
            "return": [],
            "arguments": {
                "self": [],
                "shape": [],
                "apply_scaling": [],
                "name": [],
                "factory": []
            }
        },
        "Pond.define_public_variable": {
            "name": "define_public_variable",
            "location": 245,
            "return": [],
            "arguments": {
                "self": [],
                "initial_value": [],
                "apply_scaling": [],
                "name": [],
                "factory": []
            }
        },
        "Pond.define_private_variable": {
            "name": "define_private_variable",
            "location": 309,
            "return": [],
            "arguments": {
                "self": [],
                "initial_value": [],
                "apply_scaling": [],
                "name": [],
                "factory": []
            }
        },
        "Pond.fifo_queue": {
            "name": "fifo_queue",
            "location": 380,
            "return": [],
            "arguments": {
                "self": [],
                "capacity": [],
                "shape": [],
                "shared_name": []
            }
        },
        "Pond.define_public_input": {
            "name": "define_public_input",
            "location": 391,
            "return": [],
            "arguments": {
                "self": [],
                "player": [],
                "inputter_fn": [],
                "apply_scaling": [],
                "name": []
            }
        },
        "Pond.local_computation": {
            "name": "local_computation",
            "location": 445,
            "return": [],
            "arguments": {
                "self": [],
                "player_name": []
            }
        },
        "Pond.define_local_computation": {
            "name": "define_local_computation",
            "location": 542,
            "return": [],
            "arguments": {
                "self": [],
                "player": [],
                "computation_fn": [],
                "arguments": [],
                "apply_scaling": [],
                "name_scope": [],
                "masked": [],
                "factory": []
            }
        },
        "Pond.define_private_input": {
            "name": "define_private_input",
            "location": 646,
            "return": [],
            "arguments": {
                "self": [],
                "player": [],
                "inputter_fn": [],
                "apply_scaling": [],
                "name_scope": [],
                "masked": [],
                "factory": []
            }
        },
        "Pond.define_output": {
            "name": "define_output",
            "location": 678,
            "return": [],
            "arguments": {
                "self": [],
                "player": [],
                "arguments": [],
                "outputter_fn": [],
                "name_scope": []
            }
        },
        "Pond._encode": {
            "name": "_encode",
            "location": 700,
            "return": [],
            "arguments": {
                "self": [],
                "rationals": [],
                "apply_scaling": [],
                "tf_int_type": []
            }
        },
        "Pond._decode": {
            "name": "_decode",
            "location": 743,
            "return": [],
            "arguments": {
                "self": [],
                "elements": [],
                "is_scaled": []
            }
        },
        "Pond._share": {
            "name": "_share",
            "location": 758,
            "return": [],
            "arguments": {
                "self": [],
                "secret": []
            }
        },
        "Pond._share_and_wrap": {
            "name": "_share_and_wrap",
            "location": 779,
            "return": [],
            "arguments": {
                "self": [],
                "secret": [],
                "is_scaled": []
            }
        },
        "Pond._reconstruct": {
            "name": "_reconstruct",
            "location": 785,
            "return": [],
            "arguments": {
                "self": [],
                "share0": [],
                "share1": []
            }
        },
        "Pond.assign": {
            "name": "assign",
            "location": 790,
            "return": [],
            "arguments": {
                "self": [],
                "variable": [],
                "value": []
            }
        },
        "Pond.identity": {
            "name": "identity",
            "location": 851,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "control_dependencies_0": [],
                "control_dependencies_1": []
            }
        },
        "Pond.add": {
            "name": "add",
            "location": 862,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Pond.lift": {
            "name": "lift",
            "location": 875,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": [],
                "apply_scaling": []
            }
        },
        "Pond.add_n": {
            "name": "add_n",
            "location": 935,
            "return": [],
            "arguments": {
                "self": [],
                "tensors": []
            }
        },
        "Pond.reduce_sum": {
            "name": "reduce_sum",
            "location": 941,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "axis": [],
                "keepdims": []
            }
        },
        "Pond.sum": {
            "name": "sum",
            "location": 945,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "axis": [],
                "keepdims": []
            }
        },
        "Pond.cumsum": {
            "name": "cumsum",
            "location": 949,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "axis": [],
                "exclusive": [],
                "reverse": []
            }
        },
        "Pond.sub": {
            "name": "sub",
            "location": 955,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Pond.mask": {
            "name": "mask",
            "location": 959,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Pond.mul": {
            "name": "mul",
            "location": 981,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Pond.square": {
            "name": "square",
            "location": 986,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Pond.matmul": {
            "name": "matmul",
            "location": 990,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Pond.dot": {
            "name": "dot",
            "location": 993,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Pond.reciprocal": {
            "name": "reciprocal",
            "location": 996,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Pond.div": {
            "name": "div",
            "location": 1000,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Pond.sqrt": {
            "name": "sqrt",
            "location": 1022,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Pond.truncate": {
            "name": "truncate",
            "location": 1033,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Pond.indexer": {
            "name": "indexer",
            "location": 1037,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "slc": []
            }
        },
        "Pond.transpose": {
            "name": "transpose",
            "location": 1040,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "perm": []
            }
        },
        "Pond.reshape": {
            "name": "reshape",
            "location": 1072,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "shape": []
            }
        },
        "Pond.negative": {
            "name": "negative",
            "location": 1094,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Pond.expand_dims": {
            "name": "expand_dims",
            "location": 1105,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "axis": []
            }
        },
        "Pond.squeeze": {
            "name": "squeeze",
            "location": 1120,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "axis": []
            }
        },
        "Pond.strided_slice": {
            "name": "strided_slice",
            "location": 1134,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Pond.gather": {
            "name": "gather",
            "location": 1166,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "indices": [],
                "axis": []
            }
        },
        "Pond.split": {
            "name": "split",
            "location": 1170,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "num_split": [],
                "axis": []
            }
        },
        "Pond.stack": {
            "name": "stack",
            "location": 1175,
            "return": [],
            "arguments": {
                "self": [],
                "xs": [],
                "axis": []
            }
        },
        "Pond.concat": {
            "name": "concat",
            "location": 1200,
            "return": [],
            "arguments": {
                "self": [],
                "xs": [],
                "axis": []
            }
        },
        "Pond.sigmoid": {
            "name": "sigmoid",
            "location": 1215,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Pond.relu": {
            "name": "relu",
            "location": 1248,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Pond.tanh": {
            "name": "tanh",
            "location": 1278,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Pond.log": {
            "name": "log",
            "location": 1307,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Pond.reveal": {
            "name": "reveal",
            "location": 1339,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "Pond.cache": {
            "name": "cache",
            "location": 1342,
            "return": [],
            "arguments": {
                "self": [],
                "xs": []
            }
        },
        "Pond.conv2d": {
            "name": "conv2d",
            "location": 1380,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "w": [],
                "strides": [],
                "padding": []
            }
        },
        "Pond.maxpool2d": {
            "name": "maxpool2d",
            "location": 1412,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "pool_size": [],
                "strides": [],
                "padding": []
            }
        },
        "Pond.avgpool2d": {
            "name": "avgpool2d",
            "location": 1415,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "pool_size": [],
                "strides": [],
                "padding": []
            }
        },
        "Pond.batch_to_space_nd": {
            "name": "batch_to_space_nd",
            "location": 1438,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "block_shape": [],
                "crops": []
            }
        },
        "Pond.space_to_batch_nd": {
            "name": "space_to_batch_nd",
            "location": 1441,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "block_shape": [],
                "paddings": []
            }
        },
        "Pond.equal": {
            "name": "equal",
            "location": 1445,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "Pond.dispatch": {
            "name": "dispatch",
            "location": 1449,
            "return": [],
            "arguments": {
                "self": [],
                "base_name": []
            }
        },
        "Pond.pad": {
            "name": "pad",
            "location": 1471,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "paddings": []
            }
        },
        "AdditiveFIFOQueue.__init__": {
            "name": "__init__",
            "location": 1547,
            "return": [],
            "arguments": {
                "self": [],
                "protocol": [],
                "server_0": [],
                "server_1": [],
                "capacity": [],
                "dtype": [],
                "shape": [],
                "shared_name": []
            }
        },
        "AdditiveFIFOQueue.size": {
            "name": "size",
            "location": 1579,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdditiveFIFOQueue.enqueue": {
            "name": "enqueue",
            "location": 1582,
            "return": [],
            "arguments": {
                "self": [],
                "tensor": []
            }
        },
        "AdditiveFIFOQueue.dequeue": {
            "name": "dequeue",
            "location": 1602,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PondTensor.__init__": {
            "name": "__init__",
            "location": 1641,
            "return": [],
            "arguments": {
                "self": [],
                "prot": [],
                "is_scaled": []
            }
        },
        "PondTensor.shape": {
            "name": "shape",
            "location": 1647,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PondTensor.unwrapped": {
            "name": "unwrapped",
            "location": 1655,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PondTensor.add": {
            "name": "add",
            "location": 1658,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PondTensor.__add__": {
            "name": "__add__",
            "location": 1671,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PondTensor.__radd__": {
            "name": "__radd__",
            "location": 1677,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PondTensor.reduce_sum": {
            "name": "reduce_sum",
            "location": 1680,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "keepdims": []
            }
        },
        "PondTensor.sum": {
            "name": "sum",
            "location": 1691,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "keepdims": []
            }
        },
        "PondTensor.sub": {
            "name": "sub",
            "location": 1697,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PondTensor.__sub__": {
            "name": "__sub__",
            "location": 1707,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PondTensor.__rsub__": {
            "name": "__rsub__",
            "location": 1710,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PondTensor.mul": {
            "name": "mul",
            "location": 1713,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PondTensor.__mul__": {
            "name": "__mul__",
            "location": 1723,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PondTensor.__rmul__": {
            "name": "__rmul__",
            "location": 1726,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PondTensor.__truediv__": {
            "name": "__truediv__",
            "location": 1729,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PondTensor.__mod__": {
            "name": "__mod__",
            "location": 1732,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PondTensor.square": {
            "name": "square",
            "location": 1735,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PondTensor.matmul": {
            "name": "matmul",
            "location": 1744,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PondTensor.dot": {
            "name": "dot",
            "location": 1756,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "PondTensor.__getitem__": {
            "name": "__getitem__",
            "location": 1765,
            "return": [],
            "arguments": {
                "self": [],
                "slc": []
            }
        },
        "PondTensor.transpose": {
            "name": "transpose",
            "location": 1768,
            "return": [],
            "arguments": {
                "self": [],
                "perm": []
            }
        },
        "PondTensor.truncate": {
            "name": "truncate",
            "location": 1781,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PondTensor.expand_dims": {
            "name": "expand_dims",
            "location": 1792,
            "return": [],
            "arguments": {
                "self": [],
                "axis": []
            }
        },
        "PondTensor.reshape": {
            "name": "reshape",
            "location": 1801,
            "return": [],
            "arguments": {
                "self": [],
                "shape": []
            }
        },
        "PondTensor.negative": {
            "name": "negative",
            "location": 1812,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PondTensor.reduce_max": {
            "name": "reduce_max",
            "location": 1821,
            "return": [],
            "arguments": {
                "self": [],
                "axis": []
            }
        },
        "PondPublicTensor.__init__": {
            "name": "__init__",
            "location": 1842,
            "return": [],
            "arguments": {
                "self": [],
                "prot": [],
                "value_on_0": [],
                "value_on_1": [],
                "is_scaled": []
            }
        },
        "PondPublicTensor.__repr__": {
            "name": "__repr__",
            "location": 1857,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PondPublicTensor.shape": {
            "name": "shape",
            "location": 1861,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PondPublicTensor.backing_dtype": {
            "name": "backing_dtype",
            "location": 1865,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PondPublicTensor.unwrapped": {
            "name": "unwrapped",
            "location": 1869,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PondPublicTensor.decode": {
            "name": "decode",
            "location": 1901,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PondPublicTensor.to_native": {
            "name": "to_native",
            "location": 1904,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PondPrivateTensor.__init__": {
            "name": "__init__",
            "location": 1915,
            "return": [],
            "arguments": {
                "self": [],
                "prot": [],
                "share0": [],
                "share1": [],
                "is_scaled": []
            }
        },
        "PondPrivateTensor.__repr__": {
            "name": "__repr__",
            "location": 1930,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PondPrivateTensor.shape": {
            "name": "shape",
            "location": 1934,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PondPrivateTensor.backing_dtype": {
            "name": "backing_dtype",
            "location": 1938,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PondPrivateTensor.unwrapped": {
            "name": "unwrapped",
            "location": 1942,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PondPrivateTensor.reveal": {
            "name": "reveal",
            "location": 1960,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PondMaskedTensor.__init__": {
            "name": "__init__",
            "location": 1976,
            "return": [],
            "arguments": {
                "self": [],
                "prot": [],
                "unmasked": [],
                "a": [],
                "a0": [],
                "a1": [],
                "alpha_on_0": [],
                "alpha_on_1": [],
                "is_scaled": []
            }
        },
        "PondMaskedTensor.__repr__": {
            "name": "__repr__",
            "location": 1997,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PondMaskedTensor.shape": {
            "name": "shape",
            "location": 2001,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PondMaskedTensor.backing_dtype": {
            "name": "backing_dtype",
            "location": 2005,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PondMaskedTensor.unwrapped": {
            "name": "unwrapped",
            "location": 2009,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PondMaskedTensor.reveal": {
            "name": "reveal",
            "location": 2012,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PondConstant.__init__": {
            "name": "__init__",
            "location": 2028,
            "return": [],
            "arguments": {
                "self": [],
                "prot": [],
                "constant_on_0": [],
                "constant_on_1": [],
                "is_scaled": []
            }
        },
        "PondConstant.__repr__": {
            "name": "__repr__",
            "location": 2039,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PondPublicPlaceholder.__init__": {
            "name": "__init__",
            "location": 2050,
            "return": [],
            "arguments": {
                "self": [],
                "prot": [],
                "placeholder_on_0": [],
                "placeholder_on_1": [],
                "is_scaled": []
            }
        },
        "PondPublicPlaceholder.__repr__": {
            "name": "__repr__",
            "location": 2061,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PondPublicPlaceholder.feed": {
            "name": "feed",
            "location": 2064,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "PondPrivatePlaceholder.__init__": {
            "name": "__init__",
            "location": 2082,
            "return": [],
            "arguments": {
                "self": [],
                "prot": [],
                "placeholder0": [],
                "placeholder1": [],
                "is_scaled": []
            }
        },
        "PondPrivatePlaceholder.__repr__": {
            "name": "__repr__",
            "location": 2091,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PondPrivatePlaceholder.feed": {
            "name": "feed",
            "location": 2094,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "PondPublicVariable.__init__": {
            "name": "__init__",
            "location": 2140,
            "return": [],
            "arguments": {
                "self": [],
                "prot": [],
                "variable_on_0": [],
                "variable_on_1": [],
                "is_scaled": []
            }
        },
        "PondPublicVariable.__repr__": {
            "name": "__repr__",
            "location": 2154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PondPrivateVariable.__init__": {
            "name": "__init__",
            "location": 2165,
            "return": [],
            "arguments": {
                "self": [],
                "prot": [],
                "variable0": [],
                "variable1": [],
                "is_scaled": []
            }
        },
        "PondPrivateVariable.__repr__": {
            "name": "__repr__",
            "location": 2179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PondCachedPublicTensor.__init__": {
            "name": "__init__",
            "location": 2186,
            "return": [],
            "arguments": {
                "self": [],
                "prot": [],
                "x_on_0": [],
                "x_on_1": [],
                "is_scaled": [],
                "updater": []
            }
        },
        "PondCachedPublicTensor.__repr__": {
            "name": "__repr__",
            "location": 2196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PondCachedPrivateTensor.__init__": {
            "name": "__init__",
            "location": 2203,
            "return": [],
            "arguments": {
                "self": [],
                "prot": [],
                "x0": [],
                "x1": [],
                "is_scaled": [],
                "updater": []
            }
        },
        "PondCachedPrivateTensor.__repr__": {
            "name": "__repr__",
            "location": 2211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PondCachedMaskedTensor.__init__": {
            "name": "__init__",
            "location": 2218,
            "return": [],
            "arguments": {
                "self": [],
                "prot": [],
                "unmasked": [],
                "a": [],
                "a0": [],
                "a1": [],
                "alpha_on_0": [],
                "alpha_on_1": [],
                "is_scaled": [],
                "updater": []
            }
        },
        "PondCachedMaskedTensor.__repr__": {
            "name": "__repr__",
            "location": 2234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pond.define_public_input.helper": {
            "name": "helper",
            "location": 414,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "Pond.local_computation.decorator": {
            "name": "decorator",
            "location": 499,
            "return": [],
            "arguments": {
                "compute_func": []
            }
        },
        "Pond.define_local_computation.share_output": {
            "name": "share_output",
            "location": 569,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "Pond.define_local_computation.reconstruct_input": {
            "name": "reconstruct_input",
            "location": 589,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "Pond.define_output.result_wrapper": {
            "name": "result_wrapper",
            "location": 687,
            "return": [],
            "arguments": {}
        },
        "Pond.pad.zeros": {
            "name": "zeros",
            "location": 1483,
            "return": [],
            "arguments": {
                "shape": []
            }
        },
        "Pond.pad.prepend_zeros": {
            "name": "prepend_zeros",
            "location": 1501,
            "return": [],
            "arguments": {
                "tensor": [],
                "pad_amt": [],
                "axis": []
            }
        },
        "Pond.pad.append_zeros": {
            "name": "append_zeros",
            "location": 1515,
            "return": [],
            "arguments": {
                "tensor": [],
                "pad_amt": [],
                "axis": []
            }
        },
        "Pond.local_computation.decorator.compute_func_wrapper": {
            "name": "compute_func_wrapper",
            "location": 501,
            "return": [],
            "arguments": {}
        }
    },
    "tf-encrypted-master/tf_encrypted/protocol/pond/pond_test.py": {
        "TestPond.test_encode": {
            "name": "test_encode",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTruncate.setUp": {
            "name": "setUp",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTruncate.test_interactive_truncate": {
            "name": "test_interactive_truncate",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestTruncate.test_noninteractive_truncate": {
            "name": "test_noninteractive_truncate",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPondPublicEqual.test_public_compare": {
            "name": "test_public_compare",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPondPublicDivision.test_public_division": {
            "name": "test_public_division",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPondPublicDivision.test_public_reciprocal": {
            "name": "test_public_reciprocal",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestShare.setUp": {
            "name": "setUp",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestShare._core_test_sharing": {
            "name": "_core_test_sharing",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "dtype": []
            }
        },
        "TestShare.test_int64": {
            "name": "test_int64",
            "location": 157,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestShare.test_int100": {
            "name": "test_int100",
            "location": 160,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestShare.test_prime": {
            "name": "test_prime",
            "location": 163,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMasked._setup": {
            "name": "_setup",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "dtype": []
            }
        },
        "TestMasked.test_transpose_masked": {
            "name": "test_transpose_masked",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMasked.test_indexer": {
            "name": "test_indexer",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMasked.test_gather": {
            "name": "test_gather",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestMasked.test_negative_masked": {
            "name": "test_negative_masked",
            "location": 217,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIdentity.setUp": {
            "name": "setUp",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestIdentity.test_same_value_different_instance": {
            "name": "test_same_value_different_instance",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPondAssign.setUp": {
            "name": "setUp",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPondAssign.test_assign_synchronization": {
            "name": "test_assign_synchronization",
            "location": 255,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPondAssign.test_public_assign": {
            "name": "test_public_assign",
            "location": 290,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPondAssign.test_assign_synchronization.poc": {
            "name": "poc",
            "location": 261,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/protocol/pond/queues_test.py": {
        "TestFIFO.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFIFO.test_fifo": {
            "name": "test_fifo",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/protocol/pond/triple_sources.py": {
        "TripleSource.cache": {
            "name": "cache",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "cache_updater": []
            }
        },
        "TripleSource.initializer": {
            "name": "initializer",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TripleSource.generate_triples": {
            "name": "generate_triples",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "fetches": []
            }
        },
        "BaseTripleSource.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "player0": [],
                "player1": [],
                "producer": []
            }
        },
        "BaseTripleSource.mask": {
            "name": "mask",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "backing_dtype": [],
                "shape": []
            }
        },
        "BaseTripleSource.mul_triple": {
            "name": "mul_triple",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": []
            }
        },
        "BaseTripleSource.square_triple": {
            "name": "square_triple",
            "location": 65,
            "return": [],
            "arguments": {
                "self": [],
                "a": []
            }
        },
        "BaseTripleSource.matmul_triple": {
            "name": "matmul_triple",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": []
            }
        },
        "BaseTripleSource.conv2d_triple": {
            "name": "conv2d_triple",
            "location": 83,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "b": [],
                "strides": [],
                "padding": []
            }
        },
        "BaseTripleSource.indexer_mask": {
            "name": "indexer_mask",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "slc": []
            }
        },
        "BaseTripleSource.transpose_mask": {
            "name": "transpose_mask",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "perm": []
            }
        },
        "BaseTripleSource.gather_mask": {
            "name": "gather_mask",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "indices": [],
                "axis": []
            }
        },
        "BaseTripleSource.negative_mask": {
            "name": "negative_mask",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "a": []
            }
        },
        "BaseTripleSource.strided_slice_mask": {
            "name": "strided_slice_mask",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "args": [],
                "kwargs": []
            }
        },
        "BaseTripleSource.split_mask": {
            "name": "split_mask",
            "location": 132,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "num_split": [],
                "axis": []
            }
        },
        "BaseTripleSource.stack_mask": {
            "name": "stack_mask",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "bs": [],
                "axis": []
            }
        },
        "BaseTripleSource.concat_mask": {
            "name": "concat_mask",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "bs": [],
                "axis": []
            }
        },
        "BaseTripleSource.reshape_mask": {
            "name": "reshape_mask",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "shape": []
            }
        },
        "BaseTripleSource.expand_dims_mask": {
            "name": "expand_dims_mask",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "axis": []
            }
        },
        "BaseTripleSource.squeeze_mask": {
            "name": "squeeze_mask",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "axis": []
            }
        },
        "BaseTripleSource._share": {
            "name": "_share",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "secret": []
            }
        },
        "BaseTripleSource._build_queues": {
            "name": "_build_queues",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "c0": [],
                "c1": []
            }
        },
        "OnlineTripleSource.__init__": {
            "name": "__init__",
            "location": 211,
            "return": [],
            "arguments": {
                "self": [],
                "producer": []
            }
        },
        "OnlineTripleSource.cache": {
            "name": "cache",
            "location": 214,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "cache_updater": []
            }
        },
        "OnlineTripleSource.initializer": {
            "name": "initializer",
            "location": 219,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OnlineTripleSource.generate_triples": {
            "name": "generate_triples",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "fetches": []
            }
        },
        "OnlineTripleSource._build_queues": {
            "name": "_build_queues",
            "location": 225,
            "return": [],
            "arguments": {
                "self": [],
                "c0": [],
                "c1": []
            }
        },
        "QueuedOnlineTripleSource.__init__": {
            "name": "__init__",
            "location": 235,
            "return": [],
            "arguments": {
                "self": [],
                "player0": [],
                "player1": [],
                "producer": [],
                "capacity": []
            }
        },
        "QueuedOnlineTripleSource.cache": {
            "name": "cache",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "cache_updater": []
            }
        },
        "QueuedOnlineTripleSource.initializer": {
            "name": "initializer",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "QueuedOnlineTripleSource.generate_triples": {
            "name": "generate_triples",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "fetches": []
            }
        },
        "QueuedOnlineTripleSource._build_triple_store": {
            "name": "_build_triple_store",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "mask": [],
                "player_id": []
            }
        },
        "QueuedOnlineTripleSource._build_queues": {
            "name": "_build_queues",
            "location": 294,
            "return": [],
            "arguments": {
                "self": [],
                "c0": [],
                "c1": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/protocol/pond/__init__.py": {},
    "tf-encrypted-master/tf_encrypted/protocol/securenn/odd_tensor.py": {
        "odd_factory": {
            "name": "odd_factory",
            "location": 18,
            "return": [],
            "arguments": {
                "NATIVE_TYPE": []
            }
        },
        "odd_factory._lift": {
            "name": "_lift",
            "location": 263,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "odd_factory._construct_value_from_sampler": {
            "name": "_construct_value_from_sampler",
            "location": 286,
            "return": [],
            "arguments": {
                "sampler": [],
                "shape": []
            }
        },
        "odd_factory._lessthan_as_unsigned": {
            "name": "_lessthan_as_unsigned",
            "location": 302,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "bitlength": []
            }
        },
        "odd_factory._map_minusone_to_zero": {
            "name": "_map_minusone_to_zero",
            "location": 316,
            "return": [],
            "arguments": {
                "value": [],
                "native_type": []
            }
        },
        "odd_factory.Factory.tensor": {
            "name": "tensor",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "odd_factory.Factory.constant": {
            "name": "constant",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "odd_factory.Factory.variable": {
            "name": "variable",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "initial_value": []
            }
        },
        "odd_factory.Factory.placeholder": {
            "name": "placeholder",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "shape": []
            }
        },
        "odd_factory.Factory.modulus": {
            "name": "modulus",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "odd_factory.Factory.native_type": {
            "name": "native_type",
            "location": 73,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "odd_factory.Factory.sample_uniform": {
            "name": "sample_uniform",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "shape": [],
                "minval": [],
                "maxval": []
            }
        },
        "odd_factory.Factory.sample_bounded": {
            "name": "sample_bounded",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "shape": [],
                "bitlength": []
            }
        },
        "odd_factory.Factory.stack": {
            "name": "stack",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "xs": [],
                "axis": []
            }
        },
        "odd_factory.Factory.concat": {
            "name": "concat",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "xs": [],
                "axis": []
            }
        },
        "odd_factory.OddTensor.factory": {
            "name": "factory",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "odd_factory.OddTensor.value": {
            "name": "value",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "odd_factory.OddTensor.shape": {
            "name": "shape",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "odd_factory.OddTensor.identity": {
            "name": "identity",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "odd_factory.OddTensor.__repr__": {
            "name": "__repr__",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "odd_factory.OddTensor.__getitem__": {
            "name": "__getitem__",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "slc": []
            }
        },
        "odd_factory.OddTensor.__add__": {
            "name": "__add__",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "odd_factory.OddTensor.__sub__": {
            "name": "__sub__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "odd_factory.OddTensor.add": {
            "name": "add",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "odd_factory.OddTensor.sub": {
            "name": "sub",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "odd_factory.OddTensor.bits": {
            "name": "bits",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "factory": []
            }
        },
        "odd_factory.OddTensor.cast": {
            "name": "cast",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "factory": []
            }
        },
        "odd_factory.OddDenseTensor.__init__": {
            "name": "__init__",
            "location": 218,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "odd_factory.OddDenseTensor.value": {
            "name": "value",
            "location": 223,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "odd_factory.OddDenseTensor.shape": {
            "name": "shape",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "odd_factory.OddDenseTensor.support": {
            "name": "support",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "odd_factory.OddUniformTensor.__init__": {
            "name": "__init__",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "shape": [],
                "seed": []
            }
        },
        "odd_factory.OddUniformTensor.shape": {
            "name": "shape",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "odd_factory.OddUniformTensor.value": {
            "name": "value",
            "location": 250,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "odd_factory.OddUniformTensor.support": {
            "name": "support",
            "location": 260,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/protocol/securenn/odd_tensor_test.py": {
        "TestOddImplicitTensor.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOddImplicitTensor.test_tensor": {
            "name": "test_tensor",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOddImplicitTensor.test_add": {
            "name": "test_add",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestOddImplicitTensor.test_sub": {
            "name": "test_sub",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/protocol/securenn/securenn.py": {
        "_bits_public": {
            "name": "_bits_public",
            "location": 555,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "factory": []
            }
        },
        "_lsb_public": {
            "name": "_lsb_public",
            "location": 573,
            "return": [],
            "arguments": {
                "prot": [],
                "x": []
            }
        },
        "_lsb_private": {
            "name": "_lsb_private",
            "location": 583,
            "return": [],
            "arguments": {
                "prot": [],
                "x": []
            }
        },
        "_lsb_masked": {
            "name": "_lsb_masked",
            "location": 644,
            "return": [],
            "arguments": {
                "prot": [],
                "x": []
            }
        },
        "_private_compare": {
            "name": "_private_compare",
            "location": 648,
            "return": [],
            "arguments": {
                "prot": [],
                "x_bits": [],
                "r": [],
                "beta": []
            }
        },
        "_equal_zero_public": {
            "name": "_equal_zero_public",
            "location": 742,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "dtype": []
            }
        },
        "_im2col": {
            "name": "_im2col",
            "location": 763,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "pool_size": [],
                "strides": [],
                "padding": []
            }
        },
        "_maxpool2d_public": {
            "name": "_maxpool2d_public",
            "location": 796,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "pool_size": [],
                "strides": [],
                "padding": []
            }
        },
        "_maxpool2d_private": {
            "name": "_maxpool2d_private",
            "location": 812,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "pool_size": [],
                "strides": [],
                "padding": []
            }
        },
        "_maxpool2d_masked": {
            "name": "_maxpool2d_masked",
            "location": 828,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "pool_size": [],
                "strides": [],
                "padding": []
            }
        },
        "_cast_backing_public": {
            "name": "_cast_backing_public",
            "location": 844,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "backing_dtype": []
            }
        },
        "_cast_backing_private": {
            "name": "_cast_backing_private",
            "location": 861,
            "return": [],
            "arguments": {
                "prot": [],
                "x": [],
                "backing_dtype": []
            }
        },
        "SecureNN.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "server_0": [],
                "server_1": [],
                "server_2": [],
                "tensor_factory": [],
                "prime_factory": [],
                "odd_factory": []
            }
        },
        "SecureNN.bitwise_not": {
            "name": "bitwise_not",
            "location": 93,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "SecureNN.bitwise_and": {
            "name": "bitwise_and",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "SecureNN.bitwise_or": {
            "name": "bitwise_or",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "SecureNN.bitwise_xor": {
            "name": "bitwise_xor",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "SecureNN.msb": {
            "name": "msb",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "SecureNN.lsb": {
            "name": "lsb",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "SecureNN.bits": {
            "name": "bits",
            "location": 176,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "factory": []
            }
        },
        "SecureNN.is_negative": {
            "name": "is_negative",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "SecureNN.non_negative": {
            "name": "non_negative",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "SecureNN.less": {
            "name": "less",
            "location": 225,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "SecureNN.less_equal": {
            "name": "less_equal",
            "location": 243,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "SecureNN.greater": {
            "name": "greater",
            "location": 261,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "SecureNN.greater_equal": {
            "name": "greater_equal",
            "location": 279,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "SecureNN.select": {
            "name": "select",
            "location": 297,
            "return": [],
            "arguments": {
                "self": [],
                "choice_bit": [],
                "x": [],
                "y": []
            }
        },
        "SecureNN.equal_zero": {
            "name": "equal_zero",
            "location": 337,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "dtype": []
            }
        },
        "SecureNN.relu": {
            "name": "relu",
            "location": 355,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "SecureNN.maxpool2d": {
            "name": "maxpool2d",
            "location": 404,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "pool_size": [],
                "strides": [],
                "padding": []
            }
        },
        "SecureNN.maximum": {
            "name": "maximum",
            "location": 438,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "SecureNN.reduce_max": {
            "name": "reduce_max",
            "location": 459,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "axis": []
            }
        },
        "SecureNN.argmax": {
            "name": "argmax",
            "location": 493,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "axis": []
            }
        },
        "SecureNN.cast_backing": {
            "name": "cast_backing",
            "location": 551,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "backing_dtype": []
            }
        },
        "SecureNN.relu.actual_relu": {
            "name": "actual_relu",
            "location": 369,
            "return": [],
            "arguments": {
                "x": [],
                "name_scope": []
            }
        },
        "SecureNN.reduce_max.build_comparison_tree": {
            "name": "build_comparison_tree",
            "location": 479,
            "return": [],
            "arguments": {
                "ts": []
            }
        },
        "SecureNN.argmax.build_comparison_tree": {
            "name": "build_comparison_tree",
            "location": 513,
            "return": [],
            "arguments": {
                "tensors": [],
                "indices": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/protocol/securenn/securenn_test.py": {
        "TestPrivateCompare.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPrivateCompare.test_int64": {
            "name": "test_int64",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPrivateCompare.test_int100": {
            "name": "test_int100",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPrivateCompare._core_test": {
            "name": "_core_test",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "tensor_factory": []
            }
        },
        "TestSelectShare.test_select_share": {
            "name": "test_select_share",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLSB.setUp": {
            "name": "setUp",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLSB._core_lsb": {
            "name": "_core_lsb",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "tensor_factory": [],
                "prime_factory": []
            }
        },
        "TestLSB.test_lsb_int100": {
            "name": "test_lsb_int100",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestArgMax.setUp": {
            "name": "setUp",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestArgMax.test_argmax_1d": {
            "name": "test_argmax_1d",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestArgMax.test_argmax_2d_axis0": {
            "name": "test_argmax_2d_axis0",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestArgMax.test_argmax_2d_axis1": {
            "name": "test_argmax_2d_axis1",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestArgMax.test_argmax_3d_axis0": {
            "name": "test_argmax_3d_axis0",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/protocol/securenn/__init__.py": {},
    "tf-encrypted-master/tf_encrypted/queue/fifo.py": {
        "FIFOQueue": {
            "name": "FIFOQueue",
            "location": 34,
            "return": [],
            "arguments": {
                "capacity": [],
                "shape": [],
                "shared_name": []
            }
        },
        "AbstractFIFOQueue.enqueue": {
            "name": "enqueue",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "tensor": []
            }
        },
        "AbstractFIFOQueue.dequeue": {
            "name": "dequeue",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/queue/__init__.py": {},
    "tf-encrypted-master/tf_encrypted/serving/queues.py": {
        "QueueServer.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "input_shape": [],
                "output_shape": [],
                "computation_fn": [],
                "input_queue_capacity": [],
                "input_queue_name": [],
                "output_queue_capacity": [],
                "output_queue_name": []
            }
        },
        "QueueServer.run_step": {
            "name": "run_step",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "sess": [],
                "tag": []
            }
        },
        "QueueServer.run": {
            "name": "run",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "sess": [],
                "num_steps": [],
                "step_fn": []
            }
        },
        "QueueClient.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [],
            "arguments": {
                "self": [],
                "input_shape": [],
                "output_shape": [],
                "input_queue_capacity": [],
                "input_queue_name": [],
                "output_queue_capacity": [],
                "output_queue_name": []
            }
        },
        "QueueClient.send_input": {
            "name": "send_input",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "sess": [],
                "x": [],
                "tag": []
            }
        },
        "QueueClient.receive_output": {
            "name": "receive_output",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "sess": [],
                "tag": []
            }
        },
        "QueueClient.run": {
            "name": "run",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "sess": [],
                "x": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/serving/__init__.py": {},
    "tf-encrypted-master/tf_encrypted/tensor/boolfactory.py": {
        "bool_factory": {
            "name": "bool_factory",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "bool_factory._lift": {
            "name": "_lift",
            "location": 143,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "bool_factory.Factory.tensor": {
            "name": "tensor",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "bool_factory.Factory.constant": {
            "name": "constant",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "bool_factory.Factory.variable": {
            "name": "variable",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "initial_value": []
            }
        },
        "bool_factory.Factory.placeholder": {
            "name": "placeholder",
            "location": 58,
            "return": [],
            "arguments": {
                "self": [],
                "shape": []
            }
        },
        "bool_factory.Factory.native_type": {
            "name": "native_type",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "bool_factory.Factory.modulus": {
            "name": "modulus",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "bool_factory.Factory.sample_uniform": {
            "name": "sample_uniform",
            "location": 69,
            "return": [],
            "arguments": {
                "self": [],
                "shape": []
            }
        },
        "bool_factory.Factory.sample_seeded_uniform": {
            "name": "sample_seeded_uniform",
            "location": 87,
            "return": [],
            "arguments": {
                "self": [],
                "shape": [],
                "seed": []
            }
        },
        "bool_factory.Factory.sample_bounded": {
            "name": "sample_bounded",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "shape": [],
                "bitlength": []
            }
        },
        "bool_factory.Factory.stack": {
            "name": "stack",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "xs": [],
                "axis": []
            }
        },
        "bool_factory.Factory.concat": {
            "name": "concat",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "xs": [],
                "axis": []
            }
        },
        "bool_factory.Factory.where": {
            "name": "where",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "condition": [],
                "x": [],
                "y": [],
                "v2": []
            }
        },
        "bool_factory.Tensor.value": {
            "name": "value",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "bool_factory.Tensor.shape": {
            "name": "shape",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "bool_factory.Tensor.identity": {
            "name": "identity",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "bool_factory.Tensor.to_native": {
            "name": "to_native",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "bool_factory.Tensor.__repr__": {
            "name": "__repr__",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "bool_factory.Tensor.factory": {
            "name": "factory",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "bool_factory.Tensor.dtype": {
            "name": "dtype",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "bool_factory.Tensor.__getitem__": {
            "name": "__getitem__",
            "location": 187,
            "return": [],
            "arguments": {
                "self": [],
                "slc": []
            }
        },
        "bool_factory.Tensor.transpose": {
            "name": "transpose",
            "location": 190,
            "return": [],
            "arguments": {
                "self": [],
                "perm": []
            }
        },
        "bool_factory.Tensor.strided_slice": {
            "name": "strided_slice",
            "location": 193,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "kwargs": []
            }
        },
        "bool_factory.Tensor.gather": {
            "name": "gather",
            "location": 196,
            "return": [],
            "arguments": {
                "self": [],
                "indices": [],
                "axis": []
            }
        },
        "bool_factory.Tensor.split": {
            "name": "split",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "num_split": [],
                "axis": []
            }
        },
        "bool_factory.Tensor.reshape": {
            "name": "reshape",
            "location": 203,
            "return": [],
            "arguments": {
                "self": [],
                "axes": []
            }
        },
        "bool_factory.Tensor.equal": {
            "name": "equal",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "factory": []
            }
        },
        "bool_factory.Tensor.expand_dims": {
            "name": "expand_dims",
            "location": 213,
            "return": [],
            "arguments": {
                "self": [],
                "axis": []
            }
        },
        "bool_factory.Tensor.squeeze": {
            "name": "squeeze",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "axis": []
            }
        },
        "bool_factory.Tensor.cast": {
            "name": "cast",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "factory": []
            }
        },
        "bool_factory.Tensor.__xor__": {
            "name": "__xor__",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "bool_factory.Tensor.logical_xor": {
            "name": "logical_xor",
            "location": 225,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "bool_factory.Tensor.__and__": {
            "name": "__and__",
            "location": 230,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "bool_factory.Tensor.logical_and": {
            "name": "logical_and",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "bool_factory.Tensor.__or__": {
            "name": "__or__",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "bool_factory.Tensor.logical_or": {
            "name": "logical_or",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "bool_factory.Tensor.__invert__": {
            "name": "__invert__",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "bool_factory.Tensor.logical_not": {
            "name": "logical_not",
            "location": 249,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "bool_factory.DenseTensor.__init__": {
            "name": "__init__",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "bool_factory.DenseTensor.shape": {
            "name": "shape",
            "location": 260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "bool_factory.DenseTensor.value": {
            "name": "value",
            "location": 264,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "bool_factory.DenseTensor.support": {
            "name": "support",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "bool_factory.UniformTensor.__init__": {
            "name": "__init__",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "shape": [],
                "seed": [],
                "minval": [],
                "maxval": []
            }
        },
        "bool_factory.UniformTensor.shape": {
            "name": "shape",
            "location": 284,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "bool_factory.UniformTensor.value": {
            "name": "value",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "bool_factory.UniformTensor.support": {
            "name": "support",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "bool_factory.Constant.__init__": {
            "name": "__init__",
            "location": 308,
            "return": [],
            "arguments": {
                "self": [],
                "constant": []
            }
        },
        "bool_factory.Constant.__repr__": {
            "name": "__repr__",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "bool_factory.Placeholder.__init__": {
            "name": "__init__",
            "location": 318,
            "return": [],
            "arguments": {
                "self": [],
                "shape": []
            }
        },
        "bool_factory.Placeholder.__repr__": {
            "name": "__repr__",
            "location": 322,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "bool_factory.Placeholder.feed": {
            "name": "feed",
            "location": 325,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "bool_factory.Variable.__init__": {
            "name": "__init__",
            "location": 332,
            "return": [],
            "arguments": {
                "self": [],
                "initial_value": []
            }
        },
        "bool_factory.Variable.__repr__": {
            "name": "__repr__",
            "location": 337,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "bool_factory.Variable.assign_from_native": {
            "name": "assign_from_native",
            "location": 340,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "bool_factory.Variable.assign_from_same": {
            "name": "assign_from_same",
            "location": 344,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/tensor/factory.py": {
        "AbstractTensor.factory": {
            "name": "factory",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractTensor.shape": {
            "name": "shape",
            "location": 23,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractTensor.support": {
            "name": "support",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractTensor.identity": {
            "name": "identity",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractFactory.modulus": {
            "name": "modulus",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractFactory.native_type": {
            "name": "native_type",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AbstractFactory.tensor": {
            "name": "tensor",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "AbstractFactory.constant": {
            "name": "constant",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "AbstractFactory.variable": {
            "name": "variable",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "initial_value": []
            }
        },
        "AbstractFactory.placeholder": {
            "name": "placeholder",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "shape": []
            }
        },
        "AbstractFactory.sample_uniform": {
            "name": "sample_uniform",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "shape": [],
                "minval": [],
                "maxval": []
            }
        },
        "AbstractFactory.sample_bounded": {
            "name": "sample_bounded",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "shape": [],
                "bitlength": []
            }
        },
        "AbstractFactory.stack": {
            "name": "stack",
            "location": 94,
            "return": [],
            "arguments": {
                "self": [],
                "xs": [],
                "axis": []
            }
        },
        "AbstractFactory.concat": {
            "name": "concat",
            "location": 98,
            "return": [],
            "arguments": {
                "self": [],
                "xs": [],
                "axis": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/tensor/fixed.py": {
        "_validate_fixedpoint_config": {
            "name": "_validate_fixedpoint_config",
            "location": 92,
            "return": [],
            "arguments": {
                "config": [],
                "tensor_factory": []
            }
        },
        "FixedpointConfig.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": [],
                "scaling_base": [],
                "precision_integral": [],
                "precision_fractional": [],
                "matmul_threshold": [],
                "truncation_gap": [],
                "use_noninteractive_truncation": []
            }
        },
        "FixedpointConfig.bound_single_precision": {
            "name": "bound_single_precision",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FixedpointConfig.bound_double_precision": {
            "name": "bound_double_precision",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FixedpointConfig.bound_intermediate_results": {
            "name": "bound_intermediate_results",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FixedpointConfig.scaling_factor": {
            "name": "scaling_factor",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/tensor/helpers.py": {
        "egcd": {
            "name": "egcd",
            "location": 7,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "gcd": {
            "name": "gcd",
            "location": 14,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "inverse": {
            "name": "inverse",
            "location": 19,
            "return": [],
            "arguments": {
                "a": [],
                "m": []
            }
        },
        "log2": {
            "name": "log2",
            "location": 25,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "prod": {
            "name": "prod",
            "location": 29,
            "return": [],
            "arguments": {
                "xs": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/tensor/int100.py": {
        "crt_factory": {
            "name": "crt_factory",
            "location": 35,
            "return": [],
            "arguments": {
                "INT_TYPE": [],
                "MODULI": []
            }
        },
        "crt_factory.gen_crt_recombine_lagrange": {
            "name": "gen_crt_recombine_lagrange",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "crt_factory.gen_crt_recombine_explicit": {
            "name": "gen_crt_recombine_explicit",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "crt_factory.gen_crt_mod": {
            "name": "gen_crt_mod",
            "location": 121,
            "return": [],
            "arguments": {}
        },
        "crt_factory._crt_decompose": {
            "name": "_crt_decompose",
            "location": 156,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "crt_factory._crt_add": {
            "name": "_crt_add",
            "location": 159,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "crt_factory._crt_sub": {
            "name": "_crt_sub",
            "location": 162,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "crt_factory._crt_mul": {
            "name": "_crt_mul",
            "location": 165,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "crt_factory._crt_matmul": {
            "name": "_crt_matmul",
            "location": 168,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "crt_factory._construct_backing_from_chunks": {
            "name": "_construct_backing_from_chunks",
            "location": 171,
            "return": [],
            "arguments": {
                "chunk_sizes": [],
                "chunk_values": []
            }
        },
        "crt_factory._lift": {
            "name": "_lift",
            "location": 316,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "crt_factory.gen_crt_recombine_lagrange.crt_recombine_lagrange": {
            "name": "crt_recombine_lagrange",
            "location": 59,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "crt_factory.gen_crt_recombine_explicit.crt_recombine_explicit": {
            "name": "crt_recombine_explicit",
            "location": 73,
            "return": [],
            "arguments": {
                "x": [],
                "bound": []
            }
        },
        "crt_factory.gen_crt_mod.crt_mod": {
            "name": "crt_mod",
            "location": 126,
            "return": [],
            "arguments": {
                "x": [],
                "k": []
            }
        },
        "crt_factory.Factory.zero": {
            "name": "zero",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "crt_factory.Factory.one": {
            "name": "one",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "crt_factory.Factory.sample_uniform": {
            "name": "sample_uniform",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "shape": [],
                "minval": [],
                "maxval": []
            }
        },
        "crt_factory.Factory.sample_bounded": {
            "name": "sample_bounded",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "shape": [],
                "bitlength": []
            }
        },
        "crt_factory.Factory.stack": {
            "name": "stack",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "xs": [],
                "axis": []
            }
        },
        "crt_factory.Factory.concat": {
            "name": "concat",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "xs": [],
                "axis": []
            }
        },
        "crt_factory.Factory.tensor": {
            "name": "tensor",
            "location": 257,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "crt_factory.Factory.constant": {
            "name": "constant",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "crt_factory.Factory.variable": {
            "name": "variable",
            "location": 285,
            "return": [],
            "arguments": {
                "self": [],
                "initial_value": []
            }
        },
        "crt_factory.Factory.placeholder": {
            "name": "placeholder",
            "location": 295,
            "return": [],
            "arguments": {
                "self": [],
                "shape": []
            }
        },
        "crt_factory.Factory.min": {
            "name": "min",
            "location": 299,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "crt_factory.Factory.max": {
            "name": "max",
            "location": 303,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "crt_factory.Factory.modulus": {
            "name": "modulus",
            "location": 307,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "crt_factory.Factory.native_type": {
            "name": "native_type",
            "location": 311,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "crt_factory.Tensor.backing": {
            "name": "backing",
            "location": 338,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "crt_factory.Tensor.shape": {
            "name": "shape",
            "location": 343,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "crt_factory.Tensor.identity": {
            "name": "identity",
            "location": 346,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "crt_factory.Tensor.modulus": {
            "name": "modulus",
            "location": 351,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "crt_factory.Tensor.factory": {
            "name": "factory",
            "location": 355,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "crt_factory.Tensor.to_native": {
            "name": "to_native",
            "location": 358,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "crt_factory.Tensor.bits": {
            "name": "bits",
            "location": 361,
            "return": [],
            "arguments": {
                "self": [],
                "factory": [],
                "ensure_positive_interpretation": []
            }
        },
        "crt_factory.Tensor.to_bigint": {
            "name": "to_bigint",
            "location": 443,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "crt_factory.Tensor.__getitem__": {
            "name": "__getitem__",
            "location": 446,
            "return": [],
            "arguments": {
                "self": [],
                "slc": []
            }
        },
        "crt_factory.Tensor.__repr__": {
            "name": "__repr__",
            "location": 449,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "crt_factory.Tensor.__add__": {
            "name": "__add__",
            "location": 452,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "crt_factory.Tensor.__radd__": {
            "name": "__radd__",
            "location": 456,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "crt_factory.Tensor.__sub__": {
            "name": "__sub__",
            "location": 460,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "crt_factory.Tensor.__rsub__": {
            "name": "__rsub__",
            "location": 464,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "crt_factory.Tensor.__mul__": {
            "name": "__mul__",
            "location": 468,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "crt_factory.Tensor.__rmul__": {
            "name": "__rmul__",
            "location": 472,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "crt_factory.Tensor.__mod__": {
            "name": "__mod__",
            "location": 476,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "crt_factory.Tensor.add": {
            "name": "add",
            "location": 479,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "crt_factory.Tensor.sub": {
            "name": "sub",
            "location": 483,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "crt_factory.Tensor.mul": {
            "name": "mul",
            "location": 487,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "crt_factory.Tensor.matmul": {
            "name": "matmul",
            "location": 491,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "crt_factory.Tensor.mod": {
            "name": "mod",
            "location": 527,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "crt_factory.Tensor.reduce_sum": {
            "name": "reduce_sum",
            "location": 531,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "keepdims": []
            }
        },
        "crt_factory.Tensor.cumsum": {
            "name": "cumsum",
            "location": 539,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "exclusive": [],
                "reverse": []
            }
        },
        "crt_factory.Tensor.equal_zero": {
            "name": "equal_zero",
            "location": 547,
            "return": [],
            "arguments": {
                "self": [],
                "factory": []
            }
        },
        "crt_factory.Tensor.equal": {
            "name": "equal",
            "location": 561,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "factory": []
            }
        },
        "crt_factory.Tensor.im2col": {
            "name": "im2col",
            "location": 577,
            "return": [],
            "arguments": {
                "self": [],
                "h_filter": [],
                "w_filter": [],
                "padding": [],
                "stride": []
            }
        },
        "crt_factory.Tensor.conv2d": {
            "name": "conv2d",
            "location": 591,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "stride": [],
                "padding": []
            }
        },
        "crt_factory.Tensor.batch_to_space_nd": {
            "name": "batch_to_space_nd",
            "location": 595,
            "return": [],
            "arguments": {
                "self": [],
                "block_shape": [],
                "crops": []
            }
        },
        "crt_factory.Tensor.space_to_batch_nd": {
            "name": "space_to_batch_nd",
            "location": 603,
            "return": [],
            "arguments": {
                "self": [],
                "block_shape": [],
                "paddings": []
            }
        },
        "crt_factory.Tensor.transpose": {
            "name": "transpose",
            "location": 611,
            "return": [],
            "arguments": {
                "self": [],
                "perm": []
            }
        },
        "crt_factory.Tensor.strided_slice": {
            "name": "strided_slice",
            "location": 615,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "kwargs": []
            }
        },
        "crt_factory.Tensor.gather": {
            "name": "gather",
            "location": 619,
            "return": [],
            "arguments": {
                "self": [],
                "indices": [],
                "axis": []
            }
        },
        "crt_factory.Tensor.split": {
            "name": "split",
            "location": 623,
            "return": [],
            "arguments": {
                "self": [],
                "num_split": [],
                "axis": []
            }
        },
        "crt_factory.Tensor.reshape": {
            "name": "reshape",
            "location": 627,
            "return": [],
            "arguments": {
                "self": [],
                "axes": []
            }
        },
        "crt_factory.Tensor.negative": {
            "name": "negative",
            "location": 631,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "crt_factory.Tensor.expand_dims": {
            "name": "expand_dims",
            "location": 635,
            "return": [],
            "arguments": {
                "self": [],
                "axis": []
            }
        },
        "crt_factory.Tensor.squeeze": {
            "name": "squeeze",
            "location": 639,
            "return": [],
            "arguments": {
                "self": [],
                "axis": []
            }
        },
        "crt_factory.Tensor.truncate": {
            "name": "truncate",
            "location": 643,
            "return": [],
            "arguments": {
                "self": [],
                "amount": [],
                "base": []
            }
        },
        "crt_factory.Tensor.right_shift": {
            "name": "right_shift",
            "location": 648,
            "return": [],
            "arguments": {
                "self": [],
                "bitlength": []
            }
        },
        "crt_factory.Tensor.cast": {
            "name": "cast",
            "location": 651,
            "return": [],
            "arguments": {
                "self": [],
                "factory": []
            }
        },
        "crt_factory.DenseTensor.__init__": {
            "name": "__init__",
            "location": 660,
            "return": [],
            "arguments": {
                "self": [],
                "backing": []
            }
        },
        "crt_factory.DenseTensor.shape": {
            "name": "shape",
            "location": 664,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "crt_factory.DenseTensor.backing": {
            "name": "backing",
            "location": 668,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "crt_factory.DenseTensor.support": {
            "name": "support",
            "location": 672,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "crt_factory.UniformTensor.__init__": {
            "name": "__init__",
            "location": 681,
            "return": [],
            "arguments": {
                "self": [],
                "shape": [],
                "seeds": []
            }
        },
        "crt_factory.UniformTensor.shape": {
            "name": "shape",
            "location": 686,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "crt_factory.UniformTensor.backing": {
            "name": "backing",
            "location": 690,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "crt_factory.UniformTensor.support": {
            "name": "support",
            "location": 700,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "crt_factory.BoundedTensor.__init__": {
            "name": "__init__",
            "location": 706,
            "return": [],
            "arguments": {
                "self": [],
                "shape": [],
                "seeds": [],
                "chunk_sizes": []
            }
        },
        "crt_factory.BoundedTensor.shape": {
            "name": "shape",
            "location": 712,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "crt_factory.BoundedTensor.backing": {
            "name": "backing",
            "location": 716,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "crt_factory.BoundedTensor.support": {
            "name": "support",
            "location": 732,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "crt_factory.Constant.__init__": {
            "name": "__init__",
            "location": 738,
            "return": [],
            "arguments": {
                "self": [],
                "backing": []
            }
        },
        "crt_factory.Constant.__repr__": {
            "name": "__repr__",
            "location": 742,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "crt_factory.Placeholder.__init__": {
            "name": "__init__",
            "location": 748,
            "return": [],
            "arguments": {
                "self": [],
                "shape": []
            }
        },
        "crt_factory.Placeholder.__repr__": {
            "name": "__repr__",
            "location": 752,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "crt_factory.Placeholder.feed": {
            "name": "feed",
            "location": 755,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "crt_factory.Variable.__init__": {
            "name": "__init__",
            "location": 763,
            "return": [],
            "arguments": {
                "self": [],
                "initial_backing": []
            }
        },
        "crt_factory.Variable.__repr__": {
            "name": "__repr__",
            "location": 772,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "crt_factory.Variable.assign_from_native": {
            "name": "assign_from_native",
            "location": 775,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "crt_factory.Variable.assign_from_same": {
            "name": "assign_from_same",
            "location": 779,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/tensor/int100_test.py": {
        "TestInt100Tensor.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInt100Tensor.test_pond": {
            "name": "test_pond",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInt100Tensor.core_test_binarize": {
            "name": "core_test_binarize",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "raw": [],
                "shape": [],
                "modulus": [],
                "bitlen": [],
                "ensure_positive_interpretation": []
            }
        },
        "TestInt100Tensor.test_binarize_positive": {
            "name": "test_binarize_positive",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInt100Tensor.test_binarize_symmetric": {
            "name": "test_binarize_symmetric",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConv2D.setUp": {
            "name": "setUp",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConv2D.test_forward": {
            "name": "test_forward",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInt100Tensor.core_test_binarize.as_bits": {
            "name": "as_bits",
            "location": 39,
            "return": [],
            "arguments": {
                "x": [],
                "min_bitlength": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/tensor/native.py": {
        "native_factory": {
            "name": "native_factory",
            "location": 30,
            "return": [],
            "arguments": {
                "NATIVE_TYPE": [],
                "EXPLICIT_MODULUS": []
            }
        },
        "native_factory._lift": {
            "name": "_lift",
            "location": 200,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "native_factory.Factory.tensor": {
            "name": "tensor",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "native_factory.Factory.constant": {
            "name": "constant",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "native_factory.Factory.variable": {
            "name": "variable",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "initial_value": []
            }
        },
        "native_factory.Factory.placeholder": {
            "name": "placeholder",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "shape": []
            }
        },
        "native_factory.Factory.min": {
            "name": "min",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "native_factory.Factory.max": {
            "name": "max",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "native_factory.Factory.modulus": {
            "name": "modulus",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "native_factory.Factory.native_type": {
            "name": "native_type",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "native_factory.Factory.nbits": {
            "name": "nbits",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "native_factory.Factory.sample_uniform": {
            "name": "sample_uniform",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "shape": [],
                "minval": [],
                "maxval": []
            }
        },
        "native_factory.Factory.sample_seeded_uniform": {
            "name": "sample_seeded_uniform",
            "location": 121,
            "return": [],
            "arguments": {
                "self": [],
                "shape": [],
                "seed": [],
                "minval": [],
                "maxval": []
            }
        },
        "native_factory.Factory.sample_bounded": {
            "name": "sample_bounded",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "shape": [],
                "bitlength": []
            }
        },
        "native_factory.Factory.sample_bits": {
            "name": "sample_bits",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "shape": []
            }
        },
        "native_factory.Factory.stack": {
            "name": "stack",
            "location": 178,
            "return": [],
            "arguments": {
                "self": [],
                "xs": [],
                "axis": []
            }
        },
        "native_factory.Factory.concat": {
            "name": "concat",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "xs": [],
                "axis": []
            }
        },
        "native_factory.Factory.where": {
            "name": "where",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "condition": [],
                "x": [],
                "y": [],
                "v2": []
            }
        },
        "native_factory.Tensor.value": {
            "name": "value",
            "location": 222,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "native_factory.Tensor.shape": {
            "name": "shape",
            "location": 227,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "native_factory.Tensor.identity": {
            "name": "identity",
            "location": 230,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "native_factory.Tensor.to_native": {
            "name": "to_native",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "native_factory.Tensor.bits": {
            "name": "bits",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "factory": []
            }
        },
        "native_factory.Tensor.__repr__": {
            "name": "__repr__",
            "location": 244,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "native_factory.Tensor.factory": {
            "name": "factory",
            "location": 248,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "native_factory.Tensor.__add__": {
            "name": "__add__",
            "location": 251,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "native_factory.Tensor.__radd__": {
            "name": "__radd__",
            "location": 255,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "native_factory.Tensor.__sub__": {
            "name": "__sub__",
            "location": 259,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "native_factory.Tensor.__rsub__": {
            "name": "__rsub__",
            "location": 263,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "native_factory.Tensor.__mul__": {
            "name": "__mul__",
            "location": 267,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "native_factory.Tensor.__rmul__": {
            "name": "__rmul__",
            "location": 271,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "native_factory.Tensor.__mod__": {
            "name": "__mod__",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "native_factory.Tensor.__neg__": {
            "name": "__neg__",
            "location": 278,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "native_factory.Tensor.__getitem__": {
            "name": "__getitem__",
            "location": 281,
            "return": [],
            "arguments": {
                "self": [],
                "slc": []
            }
        },
        "native_factory.Tensor.add": {
            "name": "add",
            "location": 284,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "native_factory.Tensor.sub": {
            "name": "sub",
            "location": 291,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "native_factory.Tensor.mul": {
            "name": "mul",
            "location": 298,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "native_factory.Tensor.matmul": {
            "name": "matmul",
            "location": 305,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "native_factory.Tensor.im2col": {
            "name": "im2col",
            "location": 312,
            "return": [],
            "arguments": {
                "self": [],
                "h_filter": [],
                "w_filter": [],
                "padding": [],
                "stride": []
            }
        },
        "native_factory.Tensor.conv2d": {
            "name": "conv2d",
            "location": 316,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "stride": [],
                "padding": []
            }
        },
        "native_factory.Tensor.batch_to_space_nd": {
            "name": "batch_to_space_nd",
            "location": 323,
            "return": [],
            "arguments": {
                "self": [],
                "block_shape": [],
                "crops": []
            }
        },
        "native_factory.Tensor.space_to_batch_nd": {
            "name": "space_to_batch_nd",
            "location": 327,
            "return": [],
            "arguments": {
                "self": [],
                "block_shape": [],
                "paddings": []
            }
        },
        "native_factory.Tensor.mod": {
            "name": "mod",
            "location": 331,
            "return": [],
            "arguments": {
                "self": [],
                "k": []
            }
        },
        "native_factory.Tensor.transpose": {
            "name": "transpose",
            "location": 337,
            "return": [],
            "arguments": {
                "self": [],
                "perm": []
            }
        },
        "native_factory.Tensor.strided_slice": {
            "name": "strided_slice",
            "location": 340,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "kwargs": []
            }
        },
        "native_factory.Tensor.gather": {
            "name": "gather",
            "location": 343,
            "return": [],
            "arguments": {
                "self": [],
                "indices": [],
                "axis": []
            }
        },
        "native_factory.Tensor.split": {
            "name": "split",
            "location": 346,
            "return": [],
            "arguments": {
                "self": [],
                "num_split": [],
                "axis": []
            }
        },
        "native_factory.Tensor.reshape": {
            "name": "reshape",
            "location": 350,
            "return": [],
            "arguments": {
                "self": [],
                "axes": []
            }
        },
        "native_factory.Tensor.negative": {
            "name": "negative",
            "location": 353,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "native_factory.Tensor.reduce_sum": {
            "name": "reduce_sum",
            "location": 359,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "keepdims": []
            }
        },
        "native_factory.Tensor.cumsum": {
            "name": "cumsum",
            "location": 365,
            "return": [],
            "arguments": {
                "self": [],
                "axis": [],
                "exclusive": [],
                "reverse": []
            }
        },
        "native_factory.Tensor.equal_zero": {
            "name": "equal_zero",
            "location": 373,
            "return": [],
            "arguments": {
                "self": [],
                "factory": []
            }
        },
        "native_factory.Tensor.equal": {
            "name": "equal",
            "location": 379,
            "return": [],
            "arguments": {
                "self": [],
                "other": [],
                "factory": []
            }
        },
        "native_factory.Tensor.truncate": {
            "name": "truncate",
            "location": 386,
            "return": [],
            "arguments": {
                "self": [],
                "amount": [],
                "base": []
            }
        },
        "native_factory.Tensor.right_shift": {
            "name": "right_shift",
            "location": 393,
            "return": [],
            "arguments": {
                "self": [],
                "bitlength": []
            }
        },
        "native_factory.Tensor.expand_dims": {
            "name": "expand_dims",
            "location": 396,
            "return": [],
            "arguments": {
                "self": [],
                "axis": []
            }
        },
        "native_factory.Tensor.squeeze": {
            "name": "squeeze",
            "location": 399,
            "return": [],
            "arguments": {
                "self": [],
                "axis": []
            }
        },
        "native_factory.Tensor.cast": {
            "name": "cast",
            "location": 402,
            "return": [],
            "arguments": {
                "self": [],
                "factory": []
            }
        },
        "native_factory.Tensor.__or__": {
            "name": "__or__",
            "location": 405,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "native_factory.Tensor.bitwise_or": {
            "name": "bitwise_or",
            "location": 408,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "native_factory.Tensor.__xor__": {
            "name": "__xor__",
            "location": 413,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "native_factory.Tensor.bitwise_xor": {
            "name": "bitwise_xor",
            "location": 416,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "native_factory.Tensor.__and__": {
            "name": "__and__",
            "location": 421,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "native_factory.Tensor.bitwise_and": {
            "name": "bitwise_and",
            "location": 424,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "native_factory.Tensor.__invert__": {
            "name": "__invert__",
            "location": 429,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "native_factory.Tensor.invert": {
            "name": "invert",
            "location": 432,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "native_factory.Tensor.__lshift__": {
            "name": "__lshift__",
            "location": 436,
            "return": [],
            "arguments": {
                "self": [],
                "bitlength": []
            }
        },
        "native_factory.Tensor.left_shift": {
            "name": "left_shift",
            "location": 439,
            "return": [],
            "arguments": {
                "self": [],
                "bitlength": []
            }
        },
        "native_factory.Tensor.__rshift__": {
            "name": "__rshift__",
            "location": 442,
            "return": [],
            "arguments": {
                "self": [],
                "bitlength": []
            }
        },
        "native_factory.Tensor.logical_rshift": {
            "name": "logical_rshift",
            "location": 449,
            "return": [],
            "arguments": {
                "self": [],
                "bitlength": []
            }
        },
        "native_factory.DenseTensor.__init__": {
            "name": "__init__",
            "location": 475,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "native_factory.DenseTensor.shape": {
            "name": "shape",
            "location": 479,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "native_factory.DenseTensor.value": {
            "name": "value",
            "location": 483,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "native_factory.DenseTensor.support": {
            "name": "support",
            "location": 487,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "native_factory.UniformTensor.__init__": {
            "name": "__init__",
            "location": 496,
            "return": [],
            "arguments": {
                "self": [],
                "shape": [],
                "seed": [],
                "minval": [],
                "maxval": []
            }
        },
        "native_factory.UniformTensor.shape": {
            "name": "shape",
            "location": 503,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "native_factory.UniformTensor.value": {
            "name": "value",
            "location": 507,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "native_factory.UniformTensor.support": {
            "name": "support",
            "location": 518,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "native_factory.Constant.__init__": {
            "name": "__init__",
            "location": 524,
            "return": [],
            "arguments": {
                "self": [],
                "constant": []
            }
        },
        "native_factory.Constant.__repr__": {
            "name": "__repr__",
            "location": 528,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "native_factory.Placeholder.__init__": {
            "name": "__init__",
            "location": 534,
            "return": [],
            "arguments": {
                "self": [],
                "shape": []
            }
        },
        "native_factory.Placeholder.__repr__": {
            "name": "__repr__",
            "location": 538,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "native_factory.Placeholder.feed": {
            "name": "feed",
            "location": 541,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "native_factory.Variable.__init__": {
            "name": "__init__",
            "location": 548,
            "return": [],
            "arguments": {
                "self": [],
                "initial_value": []
            }
        },
        "native_factory.Variable.__repr__": {
            "name": "__repr__",
            "location": 555,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "native_factory.Variable.assign_from_native": {
            "name": "assign_from_native",
            "location": 558,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "native_factory.Variable.assign_from_same": {
            "name": "assign_from_same",
            "location": 562,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/tensor/native_int32_test.py": {
        "TestInt32Tensor.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInt32Tensor.test_binarize": {
            "name": "test_binarize",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInt32Tensor.test_random_binarize": {
            "name": "test_random_binarize",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConv2D.setUp": {
            "name": "setUp",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConv2D.test_forward": {
            "name": "test_forward",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/tensor/native_int64_test.py": {
        "TestInt64Tensor.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInt64Tensor.test_pond": {
            "name": "test_pond",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInt64Tensor.test_binarize": {
            "name": "test_binarize",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestInt64Tensor.test_random_binarize": {
            "name": "test_random_binarize",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConv2D.setUp": {
            "name": "setUp",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestConv2D.test_forward": {
            "name": "test_forward",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/tensor/native_prime_test.py": {
        "TestPrimeTensor.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPrimeTensor.set_up_indexing": {
            "name": "set_up_indexing",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPrimeTensor.test_basic_indexing": {
            "name": "test_basic_indexing",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPrimeTensor.test_slice_indexing": {
            "name": "test_slice_indexing",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPrimeTensor.test_ellipsis_indexing": {
            "name": "test_ellipsis_indexing",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPrimeTensor.test_arithmetic": {
            "name": "test_arithmetic",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestPrimeTensor.test_binarize": {
            "name": "test_binarize",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/tensor/shared.py": {
        "binarize": {
            "name": "binarize",
            "location": 12,
            "return": [],
            "arguments": {
                "tensor": [],
                "bitsize": []
            }
        },
        "bits": {
            "name": "bits",
            "location": 30,
            "return": [],
            "arguments": {
                "tensor": [],
                "bitsize": []
            }
        },
        "im2col": {
            "name": "im2col",
            "location": 43,
            "return": [],
            "arguments": {
                "x": [],
                "h_filter": [],
                "w_filter": [],
                "padding": [],
                "stride": []
            }
        },
        "conv2d": {
            "name": "conv2d",
            "location": 81,
            "return": [],
            "arguments": {
                "x": [],
                "y": [],
                "stride": [],
                "padding": []
            }
        }
    },
    "tf-encrypted-master/tf_encrypted/tensor/__init__.py": {}
}
{
    "tlbc-monitor-master/setup.py": {},
    "tlbc-monitor-master/e2e_tests/tests/conftest.py": {
        "offline_validator_address": {
            "name": "offline_validator_address",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "report_directory_path": {
            "name": "report_directory_path",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "skip_report_file_path": {
            "name": "skip_report_file_path",
            "location": 33,
            "return": [],
            "arguments": {
                "report_directory_path": []
            }
        },
        "skip_report_list": {
            "name": "skip_report_list",
            "location": 39,
            "return": [],
            "arguments": {
                "skip_report_file_path": []
            }
        },
        "offline_report_file_path_list": {
            "name": "offline_report_file_path_list",
            "location": 46,
            "return": [],
            "arguments": {
                "report_directory_path": [],
                "offline_validator_address": []
            }
        },
        "get_skip_report_step_by_index": {
            "name": "get_skip_report_step_by_index",
            "location": 59,
            "return": [],
            "arguments": {
                "skip_report_list": []
            }
        },
        "get_skip_report_address_by_index": {
            "name": "get_skip_report_address_by_index",
            "location": 82,
            "return": [],
            "arguments": {
                "skip_report_list": []
            }
        },
        "get_skip_report_step_by_index.extract_step": {
            "name": "extract_step",
            "location": 68,
            "return": [],
            "arguments": {
                "index": []
            }
        },
        "get_skip_report_address_by_index.extract_address": {
            "name": "extract_address",
            "location": 91,
            "return": [],
            "arguments": {
                "index": []
            }
        }
    },
    "tlbc-monitor-master/e2e_tests/tests/test_offline_report.py": {
        "test_offline_report_file_get_created": {
            "name": "test_offline_report_file_get_created",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "offline_report_file_path_list": [],
                "offline_validator_address": []
            }
        },
        "test_offline_reports_content_is_correct": {
            "name": "test_offline_reports_content_is_correct",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "offline_report_file_path_list": [],
                "offline_validator_address": [],
                "get_skip_report_step_by_index": []
            }
        }
    },
    "tlbc-monitor-master/e2e_tests/tests/test_skip_report.py": {
        "test_skip_report_file_gets_created": {
            "name": "test_skip_report_file_gets_created",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "skip_report_file_path": []
            }
        },
        "test_correct_address_gets_reported_to_skip": {
            "name": "test_correct_address_gets_reported_to_skip",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "skip_report_list": [],
                "offline_validator_address": [],
                "get_skip_report_address_by_index": []
            }
        }
    },
    "tlbc-monitor-master/src/monitor/blocks.py": {
        "get_canonicalized_block": {
            "name": "get_canonicalized_block",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {
                "block_dict": []
            }
        },
        "get_proposer": {
            "name": "get_proposer",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "canonicalized_block": []
            }
        },
        "bare_hash": {
            "name": "bare_hash",
            "location": 48,
            "return": [
                "Any"
            ],
            "arguments": {
                "canonicalized_block": []
            }
        },
        "rlp_encoded_block": {
            "name": "rlp_encoded_block",
            "location": 54,
            "return": [
                "Any"
            ],
            "arguments": {
                "canonicalized_block": []
            }
        },
        "calculate_block_signature": {
            "name": "calculate_block_signature",
            "location": 82,
            "return": [
                "Any"
            ],
            "arguments": {
                "canonicalized_block": [],
                "private_key": []
            }
        },
        "get_step": {
            "name": "get_step",
            "location": 88,
            "return": [
                "int"
            ],
            "arguments": {
                "block_dict": []
            }
        }
    },
    "tlbc-monitor-master/src/monitor/blocksel.py": {
        "parse_date": {
            "name": "parse_date",
            "location": 60,
            "return": [
                "datetime.datetime"
            ],
            "arguments": {
                "s": []
            }
        },
        "make_blockresolver": {
            "name": "make_blockresolver",
            "location": 93,
            "return": [
                "Union[(ResolveBlockByDate, ResolveBlockByNumber, ResolveGenesisBlock, ResolveLatestBlock)]"
            ],
            "arguments": {
                "blockselector": []
            }
        },
        "ResolveBlock.from_blockselector": {
            "name": "from_blockselector",
            "location": 9,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "blocksel": []
            }
        },
        "ResolveBlock.resolve_block": {
            "name": "resolve_block",
            "location": 13,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "w3": []
            }
        },
        "ResolveBlockByNumber.from_blockselector": {
            "name": "from_blockselector",
            "location": 21,
            "return": [
                "_TResolveBlockByNumber@@ResolveBlockByNumber@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TResolveBlockByNumber]"
                ],
                "blocksel": []
            }
        },
        "ResolveBlockByNumber.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blocksel": []
            }
        },
        "ResolveBlockByNumber.resolve_block": {
            "name": "resolve_block",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "w3": []
            }
        },
        "ResolveGenesisBlock.from_blockselector": {
            "name": "from_blockselector",
            "location": 38,
            "return": [
                "_TResolveGenesisBlock@@ResolveGenesisBlock@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TResolveGenesisBlock]"
                ],
                "blocksel": []
            }
        },
        "ResolveGenesisBlock.resolve_block": {
            "name": "resolve_block",
            "location": 43,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "w3": []
            }
        },
        "ResolveLatestBlock.from_blockselector": {
            "name": "from_blockselector",
            "location": 51,
            "return": [
                "_TResolveLatestBlock@@ResolveLatestBlock@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TResolveLatestBlock]"
                ],
                "blocksel": []
            }
        },
        "ResolveLatestBlock.resolve_block": {
            "name": "resolve_block",
            "location": 56,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "w3": []
            }
        },
        "ResolveBlockByDate.from_blockselector": {
            "name": "from_blockselector",
            "location": 75,
            "return": [
                "_TResolveBlockByDate@@ResolveBlockByDate@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TResolveBlockByDate]"
                ],
                "blocksel": []
            }
        },
        "ResolveBlockByDate.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "timestamp": []
            }
        },
        "ResolveBlockByDate.resolve_block": {
            "name": "resolve_block",
            "location": 81,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "w3": []
            }
        }
    },
    "tlbc-monitor-master/src/monitor/block_fetcher.py": {
        "format_block": {
            "name": "format_block",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "block": []
            }
        },
        "BlockFetcher.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [],
                "w3": [],
                "db": [],
                "max_reorg_depth": [],
                "initial_block_resolver": []
            }
        },
        "BlockFetcher.from_fresh_state": {
            "name": "from_fresh_state",
            "location": 52,
            "return": [
                "_TBlockFetcher@@BlockFetcher@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TBlockFetcher]"
                ]
            }
        },
        "BlockFetcher.get_fresh_state": {
            "name": "get_fresh_state",
            "location": 56,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": []
            }
        },
        "BlockFetcher.state": {
            "name": "state",
            "location": 60,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlockFetcher._backwards_sync_in_progress": {
            "name": "_backwards_sync_in_progress",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlockFetcher.register_report_callback": {
            "name": "register_report_callback",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "BlockFetcher._run_callbacks": {
            "name": "_run_callbacks",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blocks": []
            }
        },
        "BlockFetcher._insert_branch": {
            "name": "_insert_branch",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blocks": []
            }
        },
        "BlockFetcher._insert_first_block": {
            "name": "_insert_first_block",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockFetcher.fetch_and_insert_new_blocks": {
            "name": "fetch_and_insert_new_blocks",
            "location": 121,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockFetcher.fetch_forward_sync_target": {
            "name": "fetch_forward_sync_target",
            "location": 170,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockFetcher._sync_forwards": {
            "name": "_sync_forwards",
            "location": 173,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockFetcher._sync_backwards": {
            "name": "_sync_backwards",
            "location": 194,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockFetcher._get_block": {
            "name": "_get_block",
            "location": 208,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "block_id": []
            }
        },
        "BlockFetcher._fetch_branch": {
            "name": "_fetch_branch",
            "location": 224,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "max_blocks_to_fetch": [],
                "head_block_id": []
            }
        },
        "BlockFetcher.get_sync_status": {
            "name": "get_sync_status",
            "location": 265,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockFetcher._save_sync_start": {
            "name": "_save_sync_start",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockFetcher.head_block_number": {
            "name": "head_block_number",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tlbc-monitor-master/src/monitor/db.py": {
        "blocks_from_block_dicts": {
            "name": "blocks_from_block_dicts",
            "location": 51,
            "return": [
                "List[Block]"
            ],
            "arguments": {
                "block_dicts": []
            }
        },
        "ensure_branch": {
            "name": "ensure_branch",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "block_dicts": []
            }
        },
        "load_pickled": {
            "name": "load_pickled",
            "location": 73,
            "return": [
                "Any"
            ],
            "arguments": {
                "session": [],
                "name": []
            }
        },
        "store_pickled": {
            "name": "store_pickled",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "session": [],
                "name": [],
                "obj": []
            }
        },
        "BlockDB.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "engine": []
            }
        },
        "BlockDB._get_session": {
            "name": "_get_session",
            "location": 104,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockDB.persistent_session": {
            "name": "persistent_session",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlockDB.insert": {
            "name": "insert",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block_dict": []
            }
        },
        "BlockDB.insert_branch": {
            "name": "insert_branch",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block_dicts": []
            }
        },
        "BlockDB.is_empty": {
            "name": "is_empty",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockDB.contains": {
            "name": "contains",
            "location": 136,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "block_hash": []
            }
        },
        "BlockDB.get_blocks_by_proposer_and_step": {
            "name": "get_blocks_by_proposer_and_step",
            "location": 140,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "proposer": [],
                "step": []
            }
        },
        "BlockDB.store_pickled": {
            "name": "store_pickled",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [],
                "obj": []
            }
        },
        "BlockDB.load_pickled": {
            "name": "load_pickled",
            "location": 153,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "tlbc-monitor-master/src/monitor/equivocation_reporter.py": {
        "EquivocationReporter.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": []
            }
        },
        "EquivocationReporter.register_report_callback": {
            "name": "register_report_callback",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "EquivocationReporter.__call__": {
            "name": "__call__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block": []
            }
        }
    },
    "tlbc-monitor-master/src/monitor/main.py": {
        "step_number_to_timestamp": {
            "name": "step_number_to_timestamp",
            "location": 93,
            "return": [
                "Any"
            ],
            "arguments": {
                "step": []
            }
        },
        "upgrade_v1_to_v2": {
            "name": "upgrade_v1_to_v2",
            "location": 109,
            "return": [
                "Any"
            ],
            "arguments": {
                "v1": []
            }
        },
        "validate_skip_rate": {
            "name": "validate_skip_rate",
            "location": 426,
            "return": [
                "_T2@@"
            ],
            "arguments": {
                "ctx": [],
                "param": [],
                "value": [
                    "_T2@@"
                ]
            }
        },
        "get_version": {
            "name": "get_version",
            "location": 433,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "_show_version": {
            "name": "_show_version",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "ctx": [],
                "param": [],
                "value": []
            }
        },
        "create_directory": {
            "name": "create_directory",
            "location": 448,
            "return": [
                "_T2@@"
            ],
            "arguments": {
                "ctx": [],
                "param": [],
                "value": [
                    "_T2@@"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 525,
            "return": [],
            "arguments": {
                "ctx": [],
                "rpc_uri": [],
                "chain_spec_path": [],
                "report_dir": [],
                "db_dir": [],
                "skip_rate": [],
                "offline_window_size_in_seconds": [],
                "sync_from": [],
                "upgrade_db": [],
                "version": [],
                "watch_chain_spec": []
            }
        },
        "App.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.wait_for_node_fully_synced": {
            "name": "wait_for_node_fully_synced",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.run": {
            "name": "run",
            "location": 180,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "App._run_cycle": {
            "name": "_run_cycle",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "App._check_chain_spec": {
            "name": "_check_chain_spec",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "App._update_epochs": {
            "name": "_update_epochs",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.stop": {
            "name": "stop",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.app_state": {
            "name": "app_state",
            "location": 244,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "App._initialize_db": {
            "name": "_initialize_db",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db_path": []
            }
        },
        "App._initialize_w3": {
            "name": "_initialize_w3",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rpc_uri": []
            }
        },
        "App._initialize_primary_oracle": {
            "name": "_initialize_primary_oracle",
            "location": 272,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chain_spec_path": []
            }
        },
        "App._initialize_reporters": {
            "name": "_initialize_reporters",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_state": [],
                "skip_rate": [],
                "offline_window_size": []
            }
        },
        "App._initialize_app_state": {
            "name": "_initialize_app_state",
            "location": 317,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "App._load_app_state": {
            "name": "_load_app_state",
            "location": 325,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "App._upgrade_app_state": {
            "name": "_upgrade_app_state",
            "location": 329,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "app_state": []
            }
        },
        "App._register_reporter_callbacks": {
            "name": "_register_reporter_callbacks",
            "location": 340,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.skip_logger": {
            "name": "skip_logger",
            "location": 351,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validator": [],
                "skipped_proposal": []
            }
        },
        "App.offline_logger": {
            "name": "offline_logger",
            "location": 361,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validator": [],
                "steps": []
            }
        },
        "App.equivocation_logger": {
            "name": "equivocation_logger",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "equivocated_block_hashes": []
            }
        },
        "App.wait_for_node_fully_synced.is_synced": {
            "name": "is_synced",
            "location": 173,
            "return": [],
            "arguments": {
                "node_status": []
            }
        }
    },
    "tlbc-monitor-master/src/monitor/node_status.py": {
        "get_node_status_parity": {
            "name": "get_node_status_parity",
            "location": 21,
            "return": [
                "NodeStatus"
            ],
            "arguments": {
                "w3": []
            }
        },
        "get_node_status_geth": {
            "name": "get_node_status_geth",
            "location": 58,
            "return": [
                "NodeStatus"
            ],
            "arguments": {
                "w3": []
            }
        },
        "get_node_status": {
            "name": "get_node_status",
            "location": 74,
            "return": [
                "NodeStatus"
            ],
            "arguments": {
                "w3": []
            }
        },
        "wait_for_node_status": {
            "name": "wait_for_node_status",
            "location": 83,
            "return": [
                "NodeStatus"
            ],
            "arguments": {
                "w3": [],
                "predicate": [],
                "sleep_time": []
            }
        }
    },
    "tlbc-monitor-master/src/monitor/offline_reporter.py": {
        "upgrade_v1_to_v2": {
            "name": "upgrade_v1_to_v2",
            "location": 34,
            "return": [
                "Any"
            ],
            "arguments": {
                "v1": []
            }
        },
        "OfflineReporter.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [],
                "primary_oracle": [],
                "offline_window_size": [],
                "allowed_skip_rate": []
            }
        },
        "OfflineReporter.from_fresh_state": {
            "name": "from_fresh_state",
            "location": 82,
            "return": [
                "_TOfflineReporter@@OfflineReporter@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TOfflineReporter]"
                ]
            }
        },
        "OfflineReporter.get_fresh_state": {
            "name": "get_fresh_state",
            "location": 86,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "OfflineReporter.state": {
            "name": "state",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "OfflineReporter.register_report_callback": {
            "name": "register_report_callback",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "OfflineReporter.__call__": {
            "name": "__call__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "primary": [],
                "skipped_proposal": []
            }
        },
        "OfflineReporter._update_offline_intervals": {
            "name": "_update_offline_intervals",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validator": [],
                "skipped_proposal": []
            }
        },
        "OfflineReporter._clear_outdated_offline_intervals": {
            "name": "_clear_outdated_offline_intervals",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_step": []
            }
        },
        "OfflineReporter._is_offline": {
            "name": "_is_offline",
            "location": 164,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "validator": []
            }
        }
    },
    "tlbc-monitor-master/src/monitor/skip_reporter.py": {
        "upgrade_v1_to_v2": {
            "name": "upgrade_v1_to_v2",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "v1": []
            }
        },
        "SkipReporter.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "state": [],
                "primary_oracle": [],
                "grace_period": []
            }
        },
        "SkipReporter.from_fresh_state": {
            "name": "from_fresh_state",
            "location": 54,
            "return": [
                "_TSkipReporter@@SkipReporter@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TSkipReporter]"
                ]
            }
        },
        "SkipReporter.get_fresh_state": {
            "name": "get_fresh_state",
            "location": 58,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "SkipReporter.state": {
            "name": "state",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SkipReporter.register_report_callback": {
            "name": "register_report_callback",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "callback": []
            }
        },
        "SkipReporter.__call__": {
            "name": "__call__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "block": []
            }
        },
        "SkipReporter.update_open_skipped_proposals": {
            "name": "update_open_skipped_proposals",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "step_seen": [],
                "block_height_seen": []
            }
        },
        "SkipReporter.remove_open_skipped_proposals_with_step": {
            "name": "remove_open_skipped_proposals_with_step",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "step": []
            }
        },
        "SkipReporter.get_missed_proposals": {
            "name": "get_missed_proposals",
            "location": 122,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tlbc-monitor-master/src/monitor/validators.py": {
        "validate_validator_definition": {
            "name": "validate_validator_definition",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "validator_definition": []
            }
        },
        "get_validator_definition_ranges": {
            "name": "get_validator_definition_ranges",
            "location": 85,
            "return": [
                "list"
            ],
            "arguments": {
                "validator_definition": []
            }
        },
        "validate_validator_definition_order": {
            "name": "validate_validator_definition_order",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "validator_definition_ranges": []
            }
        },
        "get_static_epochs": {
            "name": "get_static_epochs",
            "location": 148,
            "return": [
                "list"
            ],
            "arguments": {
                "validator_definition_ranges": []
            }
        },
        "PrimaryOracle.__init__": {
            "name": "__init__",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrimaryOracle.get_primary": {
            "name": "get_primary",
            "location": 174,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "PrimaryOracle.get_validators": {
            "name": "get_validators",
            "location": 179,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "block_height": []
            }
        },
        "PrimaryOracle.add_epoch": {
            "name": "add_epoch",
            "location": 200,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "epoch": []
            }
        },
        "PrimaryOracle._is_relevant": {
            "name": "_is_relevant",
            "location": 212,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "epoch": []
            }
        },
        "PrimaryOracle._remove_epochs_rendered_irrelevant": {
            "name": "_remove_epochs_rendered_irrelevant",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "inserted_epoch": []
            }
        },
        "ContractEpochFetcher.__init__": {
            "name": "__init__",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "w3": [],
                "validator_definition_range": [],
                "validator_definition_index": []
            }
        },
        "ContractEpochFetcher.earliest_fetched_epoch": {
            "name": "earliest_fetched_epoch",
            "location": 293,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContractEpochFetcher.latest_fetched_epoch": {
            "name": "latest_fetched_epoch",
            "location": 297,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContractEpochFetcher.last_fetch_height": {
            "name": "last_fetch_height",
            "location": 301,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ContractEpochFetcher.fetch_new_epochs": {
            "name": "fetch_new_epochs",
            "location": 304,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "EpochFetcher.__init__": {
            "name": "__init__",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "w3": [],
                "validator_definition_ranges": []
            }
        },
        "EpochFetcher.last_fetch_height": {
            "name": "last_fetch_height",
            "location": 362,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "EpochFetcher.fetch_new_epochs": {
            "name": "fetch_new_epochs",
            "location": 365,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "EpochFetcher._remove_stale_fetchers": {
            "name": "_remove_stale_fetchers",
            "location": 376,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EpochFetcher._pop_first_fetcher_if_stale": {
            "name": "_pop_first_fetcher_if_stale",
            "location": 380,
            "return": [
                "Optional[ContractEpochFetcher]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EpochFetcher._set_last_fetch_height": {
            "name": "_set_last_fetch_height",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tlbc-monitor-master/src/monitor/web3_retry_middleware.py": {
        "exception_retry_middleware_endlessly": {
            "name": "exception_retry_middleware_endlessly",
            "location": 11,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {
                "make_request": [],
                "web3": [],
                "errors": []
            }
        },
        "http_retry_request_middleware_endlessly": {
            "name": "http_retry_request_middleware_endlessly",
            "location": 30,
            "return": [
                "Callable[([Any, Any], Any)]"
            ],
            "arguments": {
                "make_request": [],
                "web3": []
            }
        },
        "exception_retry_middleware_endlessly.middleware": {
            "name": "middleware",
            "location": 12,
            "return": [],
            "arguments": {
                "method": [],
                "params": []
            }
        }
    },
    "tlbc-monitor-master/src/monitor/__init__.py": {},
    "tlbc-monitor-master/src/report_validator/cli.py": {
        "main": {
            "name": "main",
            "location": 76,
            "return": [],
            "arguments": {}
        },
        "report_via_arguments": {
            "name": "report_via_arguments",
            "location": 99,
            "return": [],
            "arguments": {
                "keystore": [],
                "gas": [],
                "gas_price": [],
                "nonce": [],
                "auto_nonce": [],
                "jsonrpc": [],
                "contract_address": [],
                "unsigned_block_header_one": [],
                "signature_one": [],
                "unsigned_block_header_two": [],
                "signature_two": []
            }
        },
        "report_via_file": {
            "name": "report_via_file",
            "location": 154,
            "return": [],
            "arguments": {
                "keystore": [],
                "gas": [],
                "gas_price": [],
                "nonce": [],
                "auto_nonce": [],
                "jsonrpc": [],
                "contract_address": [],
                "equivocation_report": []
            }
        }
    },
    "tlbc-monitor-master/src/report_validator/core.py": {
        "report_malicious_validator": {
            "name": "report_malicious_validator",
            "location": 23,
            "return": [
                "Any"
            ],
            "arguments": {
                "web3": [],
                "transaction_options": [],
                "private_key": [],
                "validator_set_contract_address": [],
                "unsigned_block_header_one": [],
                "signature_one": [],
                "unsigned_block_header_two": [],
                "signature_two": []
            }
        }
    },
    "tlbc-monitor-master/src/report_validator/validation.py": {
        "validate_address": {
            "name": "validate_address",
            "location": 6,
            "return": [
                "Any"
            ],
            "arguments": {
                "ctx": [],
                "param": [],
                "value": []
            }
        },
        "validate_signature": {
            "name": "validate_signature",
            "location": 15,
            "return": [
                "Any"
            ],
            "arguments": {
                "ctx": [],
                "param": [],
                "value": []
            }
        },
        "validate_block_header": {
            "name": "validate_block_header",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "ctx": [],
                "param": [],
                "value": []
            }
        },
        "validate_equivocation_report_file": {
            "name": "validate_equivocation_report_file",
            "location": 33,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "ctx": [],
                "param": [],
                "value": []
            }
        }
    },
    "tlbc-monitor-master/src/report_validator/__init__.py": {},
    "tlbc-monitor-master/tests/conftest.py": {
        "eth_tester": {
            "name": "eth_tester",
            "location": 28,
            "return": [],
            "arguments": {
                "address_to_private_key": []
            }
        },
        "address_to_private_key": {
            "name": "address_to_private_key",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "w3": {
            "name": "w3",
            "location": 55,
            "return": [],
            "arguments": {
                "eth_tester": []
            }
        },
        "engine": {
            "name": "engine",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "empty_db": {
            "name": "empty_db",
            "location": 68,
            "return": [],
            "arguments": {
                "engine": []
            }
        },
        "validators": {
            "name": "validators",
            "location": 73,
            "return": [],
            "arguments": {}
        },
        "primary_oracle": {
            "name": "primary_oracle",
            "location": 78,
            "return": [],
            "arguments": {
                "validators": []
            }
        }
    },
    "tlbc-monitor-master/tests/data_generation.py": {
        "random_hash": {
            "name": "random_hash",
            "location": 11,
            "return": [
                "bytes"
            ],
            "arguments": {}
        },
        "random_address": {
            "name": "random_address",
            "location": 15,
            "return": [
                "bytes"
            ],
            "arguments": {}
        },
        "random_private_key": {
            "name": "random_private_key",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "random_step": {
            "name": "random_step",
            "location": 23,
            "return": [
                "int"
            ],
            "arguments": {}
        },
        "make_block": {
            "name": "make_block",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "make_branch": {
            "name": "make_branch",
            "location": 60,
            "return": [
                "list"
            ],
            "arguments": {
                "length": []
            }
        }
    },
    "tlbc-monitor-master/tests/fake_aura_backend.py": {
        "validate_seal_fields": {
            "name": "validate_seal_fields",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "seal_fields": []
            }
        },
        "validate_signature": {
            "name": "validate_signature",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "signature": []
            }
        },
        "validate_step": {
            "name": "validate_step",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "step": []
            }
        },
        "fix_web3_keys": {
            "name": "fix_web3_keys",
            "location": 133,
            "return": [
                "Any"
            ],
            "arguments": {
                "block": []
            }
        },
        "FakeAuraBackend.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "genesis_parameters": [],
                "genesis_state": [],
                "private_keys": []
            }
        },
        "FakeAuraBackend.mine_blocks": {
            "name": "mine_blocks",
            "location": 29,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "num_blocks": [],
                "coinbase": []
            }
        },
        "FakeAuraBackend.get_block_with_aura_fields": {
            "name": "get_block_with_aura_fields",
            "location": 42,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "block": []
            }
        },
        "FakeAuraBackend._get_signature_for_block": {
            "name": "_get_signature_for_block",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "block": []
            }
        },
        "FakeAuraBackend.get_block_by_hash": {
            "name": "get_block_by_hash",
            "location": 70,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "block_hash": [],
                "full_transaction": []
            }
        },
        "FakeAuraBackend.get_block_by_number": {
            "name": "get_block_by_number",
            "location": 74,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "self": [],
                "block_number": [],
                "full_transaction": []
            }
        },
        "FakeAuraValidator.validate_outbound_block": {
            "name": "validate_outbound_block",
            "location": 112,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "block": []
            }
        },
        "FakeAuraNormalizer.normalize_outbound_block": {
            "name": "normalize_outbound_block",
            "location": 129,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "block": []
            }
        }
    },
    "tlbc-monitor-master/tests/kovan_test_data.py": {},
    "tlbc-monitor-master/tests/test_block_fields.py": {
        "test_get_proposer": {
            "name": "test_get_proposer",
            "location": 20,
            "return": [],
            "arguments": {
                "block": []
            }
        },
        "test_signing": {
            "name": "test_signing",
            "location": 35,
            "return": [],
            "arguments": {
                "block": [],
                "private_key": []
            }
        },
        "test_get_proposer_of_genesis_block": {
            "name": "test_get_proposer_of_genesis_block",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_step": {
            "name": "test_get_step",
            "location": 53,
            "return": [],
            "arguments": {
                "block": [],
                "step": []
            }
        }
    },
    "tlbc-monitor-master/tests/test_db.py": {
        "inserted_blocks": {
            "name": "inserted_blocks",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "populated_db": {
            "name": "populated_db",
            "location": 21,
            "return": [],
            "arguments": {
                "empty_db": [],
                "inserted_blocks": []
            }
        },
        "test_insert_block": {
            "name": "test_insert_block",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "populated_db": []
            }
        },
        "test_insert_hash_twice": {
            "name": "test_insert_hash_twice",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "populated_db": [],
                "inserted_blocks": []
            }
        },
        "test_insert_branch": {
            "name": "test_insert_branch",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "populated_db": []
            }
        },
        "test_insert_broken_branch": {
            "name": "test_insert_broken_branch",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "populated_db": []
            }
        },
        "test_insert_branch_with_existing_block": {
            "name": "test_insert_branch_with_existing_block",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "populated_db": []
            }
        },
        "test_contains_inserted_block": {
            "name": "test_contains_inserted_block",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "populated_db": [],
                "inserted_blocks": []
            }
        },
        "test_does_not_contain_not_inserted_block": {
            "name": "test_does_not_contain_not_inserted_block",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "populated_db": []
            }
        },
        "test_retrieve_single_block_by_proposer_and_step": {
            "name": "test_retrieve_single_block_by_proposer_and_step",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "populated_db": [],
                "inserted_blocks": []
            }
        },
        "test_retrieve_no_blocks_by_proposer_and_step_for_non_existing_combinations": {
            "name": "test_retrieve_no_blocks_by_proposer_and_step_for_non_existing_combinations",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "populated_db": [],
                "inserted_blocks": []
            }
        },
        "test_retrieve_multiple_blocks_by_proposer_and_step": {
            "name": "test_retrieve_multiple_blocks_by_proposer_and_step",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "empty_db": []
            }
        },
        "test_empty_db_is_empty": {
            "name": "test_empty_db_is_empty",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "empty_db": []
            }
        },
        "test_non_empty_db_is_not_empty": {
            "name": "test_non_empty_db_is_not_empty",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {
                "populated_db": []
            }
        },
        "test_load_pickled_non_existing_key": {
            "name": "test_load_pickled_non_existing_key",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "empty_db": []
            }
        },
        "test_load_store_pickled": {
            "name": "test_load_store_pickled",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "empty_db": []
            }
        },
        "test_store_pickled_existing": {
            "name": "test_store_pickled_existing",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "empty_db": []
            }
        },
        "test_persistent_session": {
            "name": "test_persistent_session",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "empty_db": []
            }
        },
        "test_session_handling_rollback": {
            "name": "test_session_handling_rollback",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "empty_db": []
            }
        },
        "test_session_handling_commit": {
            "name": "test_session_handling_commit",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "empty_db": []
            }
        }
    },
    "tlbc-monitor-master/tests/test_epoch_fetcher.py": {
        "seed_rng": {
            "name": "seed_rng",
            "location": 26,
            "return": [],
            "arguments": {}
        },
        "get_random_address": {
            "name": "get_random_address",
            "location": 30,
            "return": [
                "bytes"
            ],
            "arguments": {}
        },
        "tester": {
            "name": "tester",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "w3": {
            "name": "w3",
            "location": 40,
            "return": [],
            "arguments": {
                "tester": []
            }
        },
        "contracts_json": {
            "name": "contracts_json",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "validator_set_abi": {
            "name": "validator_set_abi",
            "location": 54,
            "return": [],
            "arguments": {
                "contracts_json": []
            }
        },
        "validator_set_bytecode": {
            "name": "validator_set_bytecode",
            "location": 59,
            "return": [],
            "arguments": {
                "contracts_json": []
            }
        },
        "validator_set_contract": {
            "name": "validator_set_contract",
            "location": 64,
            "return": [],
            "arguments": {
                "w3": [],
                "validator_set_bytecode": [],
                "validator_set_abi": []
            }
        },
        "test_get_static_epochs": {
            "name": "test_get_static_epochs",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "initialize_scenario": {
            "name": "initialize_scenario",
            "location": 100,
            "return": [
                "Tuple[(list, list)]"
            ],
            "arguments": {
                "validator_set_contract": [],
                "transition_heights": []
            }
        },
        "initialize_validators": {
            "name": "initialize_validators",
            "location": 135,
            "return": [
                "list"
            ],
            "arguments": {
                "contract": []
            }
        },
        "mine_until": {
            "name": "mine_until",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "w3": [],
                "tester": [],
                "height": []
            }
        },
        "change_validators": {
            "name": "change_validators",
            "location": 152,
            "return": [
                "Tuple[(list, Any)]"
            ],
            "arguments": {
                "contract": []
            }
        },
        "test_fetch_first_epoch": {
            "name": "test_fetch_first_epoch",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "w3": [],
                "validator_set_contract": []
            }
        },
        "test_fetch_second_time": {
            "name": "test_fetch_second_time",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "w3": [],
                "validator_set_contract": []
            }
        },
        "test_fetch_single_update": {
            "name": "test_fetch_single_update",
            "location": 189,
            "return": [
                "None"
            ],
            "arguments": {
                "w3": [],
                "tester": [],
                "validator_set_contract": []
            }
        },
        "test_fetch_multiple_updates": {
            "name": "test_fetch_multiple_updates",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "w3": [],
                "tester": [],
                "validator_set_contract": []
            }
        },
        "test_contract_epoch_fetcher_initialization": {
            "name": "test_contract_epoch_fetcher_initialization",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "w3": [],
                "validator_set_contract": []
            }
        },
        "test_contract_epoch_fetcher_udpates_last_fetch_height": {
            "name": "test_contract_epoch_fetcher_udpates_last_fetch_height",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "w3": [],
                "tester": [],
                "validator_set_contract": []
            }
        },
        "test_contract_epoch_fetcher_sets_earliest_epoch_once": {
            "name": "test_contract_epoch_fetcher_sets_earliest_epoch_once",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "w3": [],
                "tester": [],
                "validator_set_contract": []
            }
        },
        "test_contract_epoch_fetcher_sets_latest_epoch": {
            "name": "test_contract_epoch_fetcher_sets_latest_epoch",
            "location": 268,
            "return": [
                "None"
            ],
            "arguments": {
                "w3": [],
                "tester": [],
                "validator_set_contract": []
            }
        },
        "test_epoch_fetcher_fetches_from_all_contracts": {
            "name": "test_epoch_fetcher_fetches_from_all_contracts",
            "location": 286,
            "return": [
                "None"
            ],
            "arguments": {
                "w3": [],
                "tester": [],
                "validator_set_contract": []
            }
        },
        "test_epoch_fetcher_ignores_stale_contracts": {
            "name": "test_epoch_fetcher_ignores_stale_contracts",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "w3": [],
                "tester": [],
                "validator_set_contract": []
            }
        },
        "test_epoch_fetcher_updates_last_fetch_height": {
            "name": "test_epoch_fetcher_updates_last_fetch_height",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "w3": [],
                "tester": [],
                "validator_set_contract": []
            }
        },
        "test_epoch_fetcher_without_contracts": {
            "name": "test_epoch_fetcher_without_contracts",
            "location": 331,
            "return": [
                "None"
            ],
            "arguments": {
                "w3": [],
                "tester": []
            }
        }
    },
    "tlbc-monitor-master/tests/test_equivocation_reporter.py": {
        "block_proposer_one_privkey": {
            "name": "block_proposer_one_privkey",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "block_proposer_two_privkey": {
            "name": "block_proposer_two_privkey",
            "location": 13,
            "return": [],
            "arguments": {
                "block_proposer_one_privkey": []
            }
        },
        "report_callback": {
            "name": "report_callback",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "equivocation_reporter_with_callback": {
            "name": "equivocation_reporter_with_callback",
            "location": 28,
            "return": [],
            "arguments": {
                "empty_db": [],
                "report_callback": []
            }
        },
        "test_report_no_equivocation_for_a_single_branch": {
            "name": "test_report_no_equivocation_for_a_single_branch",
            "location": 35,
            "return": [],
            "arguments": {
                "branch_length": [],
                "block_proposer_one_privkey": [],
                "report_callback": [],
                "equivocation_reporter_with_callback": [],
                "empty_db": []
            }
        },
        "test_report_no_equivocation_for_two_different_validators": {
            "name": "test_report_no_equivocation_for_two_different_validators",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "block_proposer_one_privkey": [],
                "block_proposer_two_privkey": [],
                "report_callback": [],
                "equivocation_reporter_with_callback": [],
                "empty_db": []
            }
        },
        "test_report_equivocation": {
            "name": "test_report_equivocation",
            "location": 72,
            "return": [],
            "arguments": {
                "number_of_blocks": [],
                "block_proposer_one_privkey": [],
                "report_callback": [],
                "equivocation_reporter_with_callback": [],
                "empty_db": []
            }
        }
    },
    "tlbc-monitor-master/tests/test_fetcher.py": {
        "report_callback": {
            "name": "report_callback",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "max_reorg_depth": {
            "name": "max_reorg_depth",
            "location": 14,
            "return": [],
            "arguments": {}
        },
        "block_fetcher": {
            "name": "block_fetcher",
            "location": 19,
            "return": [],
            "arguments": {
                "w3": [],
                "empty_db": [],
                "report_callback": [],
                "max_reorg_depth": []
            }
        },
        "test_genesis": {
            "name": "test_genesis",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "w3": [],
                "block_fetcher": []
            }
        },
        "test_fetch_single_blocks": {
            "name": "test_fetch_single_blocks",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "eth_tester": [],
                "block_fetcher": [],
                "report_callback": []
            }
        },
        "test_fetch_multiple_blocks": {
            "name": "test_fetch_multiple_blocks",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "eth_tester": [],
                "block_fetcher": [],
                "report_callback": []
            }
        },
        "test_number_of_fetched_blocks": {
            "name": "test_number_of_fetched_blocks",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "eth_tester": [],
                "block_fetcher": []
            }
        },
        "test_max_block_height_of_fetched_blocks": {
            "name": "test_max_block_height_of_fetched_blocks",
            "location": 67,
            "return": [],
            "arguments": {
                "eth_tester": [],
                "w3": [],
                "block_fetcher": [],
                "max_block_height": []
            }
        },
        "test_fail_to_sync_from_block_number_that_does_not_exist": {
            "name": "test_fail_to_sync_from_block_number_that_does_not_exist",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "block_fetcher": []
            }
        },
        "test_forward_backward_sync_transition": {
            "name": "test_forward_backward_sync_transition",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "eth_tester": [],
                "block_fetcher": [],
                "report_callback": []
            }
        },
        "test_always_finish_backwards_sync": {
            "name": "test_always_finish_backwards_sync",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "eth_tester": [],
                "block_fetcher": [],
                "report_callback": []
            }
        },
        "test_fetch_multiple_blocks_with_max_number_of_blocks": {
            "name": "test_fetch_multiple_blocks_with_max_number_of_blocks",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "eth_tester": [],
                "block_fetcher": [],
                "report_callback": []
            }
        },
        "test_fetch_exact_number_of_blocks": {
            "name": "test_fetch_exact_number_of_blocks",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "eth_tester": [],
                "block_fetcher": [],
                "report_callback": []
            }
        },
        "test_noticed_reorg": {
            "name": "test_noticed_reorg",
            "location": 166,
            "return": [
                "None"
            ],
            "arguments": {
                "w3": [],
                "eth_tester": [],
                "block_fetcher": [],
                "report_callback": []
            }
        },
        "test_fail_on_fetching_fork_when_sync_forwards": {
            "name": "test_fail_on_fetching_fork_when_sync_forwards",
            "location": 200,
            "return": [],
            "arguments": {
                "block_fetcher": [],
                "eth_tester": [],
                "max_reorg_depth": [],
                "number_of_reorged_blocks": []
            }
        },
        "test_fail_on_fetching_fork_based_on_block_before_inital_one_when_sync_backwards": {
            "name": "test_fail_on_fetching_fork_based_on_block_before_inital_one_when_sync_backwards",
            "location": 264,
            "return": [],
            "arguments": {
                "block_fetcher": [],
                "eth_tester": [],
                "max_reorg_depth": [],
                "initial_block_number": [],
                "number_of_blocks_before_initial_height_to_fork": [],
                "number_of_blocks_on_fork_after_initial_block": []
            }
        },
        "test_rediscovered_reorg": {
            "name": "test_rediscovered_reorg",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "w3": [],
                "eth_tester": [],
                "block_fetcher": [],
                "report_callback": []
            }
        },
        "test_state_generation": {
            "name": "test_state_generation",
            "location": 358,
            "return": [
                "None"
            ],
            "arguments": {
                "eth_tester": [],
                "block_fetcher": []
            }
        },
        "test_restart": {
            "name": "test_restart",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "w3": [],
                "eth_tester": [],
                "block_fetcher": [],
                "report_callback": []
            }
        },
        "test_restart_with_fetch": {
            "name": "test_restart_with_fetch",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "w3": [],
                "eth_tester": [],
                "block_fetcher": [],
                "report_callback": []
            }
        },
        "test_restart_with_reorg": {
            "name": "test_restart_with_reorg",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "w3": [],
                "eth_tester": [],
                "block_fetcher": [],
                "report_callback": []
            }
        }
    },
    "tlbc-monitor-master/tests/test_get_primary.py": {
        "test_validation_invalid": {
            "name": "test_validation_invalid",
            "location": 52,
            "return": [],
            "arguments": {
                "invalid_validator_definition": []
            }
        },
        "test_validation_valid": {
            "name": "test_validation_valid",
            "location": 82,
            "return": [],
            "arguments": {
                "valid_validator_definition": []
            }
        },
        "test_get_ranges": {
            "name": "test_get_ranges",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_valid_range_order": {
            "name": "test_validate_valid_range_order",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_validate_valid_ranges": {
            "name": "test_validate_valid_ranges",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tlbc-monitor-master/tests/test_offline_reporter.py": {
        "assigned_steps": {
            "name": "assigned_steps",
            "location": 14,
            "return": [],
            "arguments": {
                "primary_oracle": []
            }
        },
        "offline_reporter": {
            "name": "offline_reporter",
            "location": 26,
            "return": [],
            "arguments": {
                "validators": [],
                "primary_oracle": []
            }
        },
        "test_report_entirely_offline_validator": {
            "name": "test_report_entirely_offline_validator",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "validators": [],
                "offline_reporter": []
            }
        },
        "test_barely_offline_validator": {
            "name": "test_barely_offline_validator",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "validators": [],
                "offline_reporter": []
            }
        },
        "test_minimally_proposing_validator": {
            "name": "test_minimally_proposing_validator",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "validators": [],
                "offline_reporter": []
            }
        },
        "test_bursts_below_threshold": {
            "name": "test_bursts_below_threshold",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "validators": [],
                "offline_reporter": []
            }
        },
        "test_no_repeated_reporting": {
            "name": "test_no_repeated_reporting",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "validators": [],
                "offline_reporter": []
            }
        },
        "test_multiple_offline_validators": {
            "name": "test_multiple_offline_validators",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "validators": [],
                "offline_reporter": [],
                "primary_oracle": []
            }
        },
        "test_reporting_after_restart": {
            "name": "test_reporting_after_restart",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "validators": [],
                "offline_reporter": [],
                "primary_oracle": []
            }
        },
        "assigned_steps.f": {
            "name": "f",
            "location": 15,
            "return": [],
            "arguments": {
                "validator": []
            }
        }
    },
    "tlbc-monitor-master/tests/test_primary_oracle.py": {
        "test_get_primary_single_epoch": {
            "name": "test_get_primary_single_epoch",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_primary_two_epochs": {
            "name": "test_get_primary_two_epochs",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_primary_no_epochs": {
            "name": "test_get_primary_no_epochs",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_primary_late_epoch": {
            "name": "test_get_primary_late_epoch",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_empty_epoch": {
            "name": "test_add_empty_epoch",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_epoch_sorting": {
            "name": "test_epoch_sorting",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_add_irrelevant_epoch": {
            "name": "test_add_irrelevant_epoch",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_remove_irrelevant_epoch": {
            "name": "test_remove_irrelevant_epoch",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_too_far_ahead": {
            "name": "test_get_too_far_ahead",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "tlbc-monitor-master/tests/test_skip_reporter.py": {
        "report_callback": {
            "name": "report_callback",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "mock_block": {
            "name": "mock_block",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {
                "step": [],
                "number": []
            }
        },
        "test_no_skips": {
            "name": "test_no_skips",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "report_callback": [],
                "primary_oracle": []
            }
        },
        "test_do_not_report_skips_after_genesis": {
            "name": "test_do_not_report_skips_after_genesis",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "report_callback": [],
                "primary_oracle": []
            }
        },
        "test_validator_offline": {
            "name": "test_validator_offline",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "primary_oracle": [],
                "report_callback": [],
                "validators": []
            }
        },
        "test_single_skip": {
            "name": "test_single_skip",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "primary_oracle": [],
                "report_callback": []
            }
        },
        "test_skip_recovery": {
            "name": "test_skip_recovery",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "primary_oracle": [],
                "report_callback": []
            }
        },
        "test_report_after_restart": {
            "name": "test_report_after_restart",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "primary_oracle": [],
                "report_callback": []
            }
        },
        "test_no_repeated_report_after_restart": {
            "name": "test_no_repeated_report_after_restart",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "primary_oracle": [],
                "report_callback": []
            }
        }
    },
    "tlbc-monitor-master/tests/__init__.py": {}
}
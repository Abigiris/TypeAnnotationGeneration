{
    "tm-experiments-master/setup.py": {},
    "tm-experiments-master/tmexp/cli.py": {
        "register_command": {
            "name": "register_command",
            "location": 18,
            "return": [
                "Callable[([Callable], Callable)]"
            ],
            "arguments": {}
        },
        "_define_parser": {
            "name": "_define_parser",
            "location": 45,
            "return": [
                "argparse.ArgumentParser"
            ],
            "arguments": {}
        },
        "parse_args": {
            "name": "parse_args",
            "location": 61,
            "return": [
                "Tuple[(Callable, Dict[(str, Any)])]"
            ],
            "arguments": {}
        },
        "register_command.wrapper": {
            "name": "wrapper",
            "location": 21,
            "return": [],
            "arguments": {
                "handler": []
            }
        },
        "CLIBuilder.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "CLIBuilder.add_lang_args": {
            "name": "add_lang_args",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLIBuilder.add_feature_arg": {
            "name": "add_feature_arg",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLIBuilder.add_force_arg": {
            "name": "add_force_arg",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CLIBuilder.add_dataset_arg": {
            "name": "add_dataset_arg",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "required": [
                    "bool"
                ]
            }
        },
        "CLIBuilder.add_bow_arg": {
            "name": "add_bow_arg",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "required": [
                    "bool"
                ]
            }
        },
        "CLIBuilder.add_experiment_arg": {
            "name": "add_experiment_arg",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "required": [
                    "bool"
                ]
            }
        },
        "CLIBuilder._add_default": {
            "name": "_add_default",
            "location": 135,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flag": [
                    "str"
                ],
                "help": [
                    "str"
                ],
                "out_type": [
                    "str"
                ]
            }
        },
        "CLIBuilder._add_required": {
            "name": "_add_required",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "flag": [
                    "str"
                ],
                "help": [
                    "str"
                ]
            }
        },
        "CLIBuilder.add_consolidate_arg": {
            "name": "add_consolidate_arg",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "register_command.wrapper.error": {
            "name": "error",
            "location": 24,
            "return": [],
            "arguments": {}
        }
    },
    "tm-experiments-master/tmexp/constants.py": {},
    "tm-experiments-master/tmexp/create_bow.py": {
        "_define_parser": {
            "name": "_define_parser",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "create_bow": {
            "name": "create_bow",
            "location": 62,
            "return": [],
            "arguments": {
                "dataset_name": [],
                "bow_name": [],
                "langs": [],
                "exclude_langs": [],
                "features": [],
                "force": [],
                "topic_model": [],
                "min_word_frac": [],
                "max_word_frac": [],
                "log_level": []
            }
        }
    },
    "tm-experiments-master/tmexp/data.py": {
        "RefsDict.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilesInfo.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "refs": [
                    "RefList"
                ]
            }
        },
        "FilesInfo.remove": {
            "name": "remove",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ],
                "blob_hash": [
                    "str"
                ]
            }
        },
        "WordCount.__sub__": {
            "name": "__sub__",
            "location": 41,
            "return": [
                "Union[(WordCount, _NotImplementedType)]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "FeatureContent.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "features": [
                    "List[str]"
                ]
            }
        },
        "FilesContent.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "files_info": [
                    "FilesInfo"
                ]
            }
        },
        "FilesContent.purge": {
            "name": "purge",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blacklist": [
                    "Set[str]"
                ]
            }
        },
        "FilesContent.map_words": {
            "name": "map_words",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mapping": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "RefMapping.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileMapping.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RepoMapping.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RepoMapping.build": {
            "name": "build",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "logging.Logger"
                ],
                "input_path": [
                    "str"
                ]
            }
        },
        "RepoMapping.create_corpus": {
            "name": "create_corpus",
            "location": 148,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "logging.Logger"
                ],
                "input_path": [
                    "str"
                ]
            }
        },
        "RepoMapping.reduce_corpus": {
            "name": "reduce_corpus",
            "location": 161,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "corpus": [
                    "np.ndarray"
                ],
                "logger": [
                    "logging.Logger"
                ],
                "refs_dict": [
                    "RefsDict"
                ],
                "file_reducer": [
                    "Callable[([np.ndarray, np.ndarray, RefList, RefMapping, int], int)]"
                ]
            }
        },
        "RefWordCounts.__init__": {
            "name": "__init__",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RepoWordCounts.__init__": {
            "name": "__init__",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RefMembership.__init__": {
            "name": "__init__",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RepoMembership.__init__": {
            "name": "__init__",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tm-experiments-master/tmexp/gitbase_queries.py": {
        "get_tagged_refs_sql": {
            "name": "get_tagged_refs_sql",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_file_info_sql": {
            "name": "get_file_info_sql",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_file_content_sql": {
            "name": "get_file_content_sql",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "tm-experiments-master/tmexp/io_constants.py": {},
    "tm-experiments-master/tmexp/label.py": {
        "_define_parser": {
            "name": "_define_parser",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "label": {
            "name": "label",
            "location": 113,
            "return": [],
            "arguments": {
                "bow_name": [],
                "exp_name": [],
                "force": [],
                "log_level": [],
                "mu": [],
                "label_size": [],
                "min_prob": [],
                "max_topics": [],
                "smoothing": [],
                "context": []
            }
        },
        "Context.__str__": {
            "name": "__str__",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Context.from_string": {
            "name": "from_string",
            "location": 101,
            "return": [
                "Context"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "Context.reducer": {
            "name": "reducer",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tm-experiments-master/tmexp/merge.py": {
        "_define_parser": {
            "name": "_define_parser",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "merge": {
            "name": "merge",
            "location": 22,
            "return": [],
            "arguments": {
                "input_datasets": [],
                "dataset_name": [],
                "force": [],
                "log_level": []
            }
        }
    },
    "tm-experiments-master/tmexp/metrics.py": {
        "_define_parser": {
            "name": "_define_parser",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "compute_distinctness": {
            "name": "compute_distinctness",
            "location": 29,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "wordtopic": [
                    "np.ndarray"
                ],
                "num_topics": [
                    "int"
                ],
                "num_words": [
                    "int"
                ]
            }
        },
        "compute_scatter": {
            "name": "compute_scatter",
            "location": 41,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "x": [
                    "np.ndarray"
                ]
            }
        },
        "metric_stats": {
            "name": "metric_stats",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "metric": [
                    "np.ndarray"
                ]
            }
        },
        "metrics_summary": {
            "name": "metrics_summary",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "metrics": [
                    "tmexp.data.Metrics"
                ],
                "summary": [
                    "str"
                ],
                "repo": [
                    "Optional[str]"
                ]
            }
        },
        "compute_metrics": {
            "name": "compute_metrics",
            "location": 73,
            "return": [],
            "arguments": {
                "bow_name": [],
                "exp_name": [],
                "force": [],
                "log_level": []
            }
        }
    },
    "tm-experiments-master/tmexp/postprocess.py": {
        "_define_parser": {
            "name": "_define_parser",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "postprocess": {
            "name": "postprocess",
            "location": 32,
            "return": [],
            "arguments": {
                "bow_name": [],
                "exp_name": [],
                "force": [],
                "log_level": []
            }
        }
    },
    "tm-experiments-master/tmexp/preprocess.py": {
        "_define_parser": {
            "name": "_define_parser",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "good_token": {
            "name": "good_token",
            "location": 120,
            "return": [
                "bool"
            ],
            "arguments": {
                "token": [
                    "str"
                ]
            }
        },
        "extract": {
            "name": "extract",
            "location": 132,
            "return": [
                "Iterator[Dict[(str, Any)]]"
            ],
            "arguments": {
                "host": [
                    "str"
                ],
                "port": [
                    "int"
                ],
                "user": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "sql": [
                    "str"
                ]
            }
        },
        "preprocess": {
            "name": "preprocess",
            "location": 154,
            "return": [],
            "arguments": {
                "repo": [],
                "dataset_name": [],
                "exclude_refs": [],
                "only_head": [],
                "only_by_date": [],
                "version_sep": [],
                "langs": [],
                "exclude_langs": [],
                "keep_vendors": [],
                "features": [],
                "force": [],
                "bblfsh_timeout": [],
                "use_nn": [],
                "log_level": []
            }
        },
        "preprocess.feature_extractor": {
            "name": "feature_extractor",
            "location": 172,
            "return": [],
            "arguments": {
                "uast_obj": []
            }
        }
    },
    "tm-experiments-master/tmexp/reduce.py": {
        "diff_to_hall_reducer": {
            "name": "diff_to_hall_reducer",
            "location": 9,
            "return": [
                "int"
            ],
            "arguments": {
                "corpus": [
                    "np.ndarray"
                ],
                "new_corpus": [
                    "np.ndarray"
                ],
                "refs": [
                    "tmexp.data.RefList"
                ],
                "ref_mapping": [
                    "tmexp.data.RefMapping"
                ],
                "cur_doc_ind": [
                    "int"
                ]
            }
        },
        "last_ref_reducer": {
            "name": "last_ref_reducer",
            "location": 40,
            "return": [
                "int"
            ],
            "arguments": {
                "corpus": [
                    "np.ndarray"
                ],
                "new_corpus": [
                    "np.ndarray"
                ],
                "refs": [
                    "tmexp.data.RefList"
                ],
                "ref_mapping": [
                    "tmexp.data.RefMapping"
                ],
                "cur_doc_ind": [
                    "int"
                ]
            }
        },
        "numpy_op_reducer": {
            "name": "numpy_op_reducer",
            "location": 52,
            "return": [
                "int"
            ],
            "arguments": {
                "corpus": [
                    "np.ndarray"
                ],
                "new_corpus": [
                    "np.ndarray"
                ],
                "_": [
                    "tmexp.data.RefList"
                ],
                "ref_mapping": [
                    "tmexp.data.RefMapping"
                ],
                "cur_doc_ind": [
                    "int"
                ],
                "numpy_op": [
                    "Callable[(..., np.ndarray)]"
                ]
            }
        },
        "max_reducer": {
            "name": "max_reducer",
            "location": 67,
            "return": [
                "int"
            ],
            "arguments": {
                "corpus": [
                    "np.ndarray"
                ],
                "new_corpus": [
                    "np.ndarray"
                ],
                "refs": [
                    "tmexp.data.RefList"
                ],
                "ref_mapping": [
                    "tmexp.data.RefMapping"
                ],
                "cur_doc_ind": [
                    "int"
                ]
            }
        },
        "mean_reducer": {
            "name": "mean_reducer",
            "location": 77,
            "return": [
                "int"
            ],
            "arguments": {
                "corpus": [
                    "np.ndarray"
                ],
                "new_corpus": [
                    "np.ndarray"
                ],
                "refs": [
                    "tmexp.data.RefList"
                ],
                "ref_mapping": [
                    "tmexp.data.RefMapping"
                ],
                "cur_doc_ind": [
                    "int"
                ]
            }
        },
        "median_reducer": {
            "name": "median_reducer",
            "location": 87,
            "return": [
                "int"
            ],
            "arguments": {
                "corpus": [
                    "np.ndarray"
                ],
                "new_corpus": [
                    "np.ndarray"
                ],
                "refs": [
                    "tmexp.data.RefList"
                ],
                "ref_mapping": [
                    "tmexp.data.RefMapping"
                ],
                "cur_doc_ind": [
                    "int"
                ]
            }
        },
        "concat_reducer": {
            "name": "concat_reducer",
            "location": 99,
            "return": [
                "int"
            ],
            "arguments": {
                "corpus": [
                    "np.ndarray"
                ],
                "new_corpus": [
                    "np.ndarray"
                ],
                "refs": [
                    "tmexp.data.RefList"
                ],
                "ref_mapping": [
                    "tmexp.data.RefMapping"
                ],
                "cur_doc_ind": [
                    "int"
                ]
            }
        }
    },
    "tm-experiments-master/tmexp/train_artm.py": {
        "_define_parser": {
            "name": "_define_parser",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "check_doctopic": {
            "name": "check_doctopic",
            "location": 143,
            "return": [
                "bool"
            ],
            "arguments": {
                "logger": [
                    "logging.Logger"
                ],
                "doctopic": [
                    "np.ndarray"
                ],
                "num_docs": [
                    "int"
                ]
            }
        },
        "create_artm_batch_vectorizer": {
            "name": "create_artm_batch_vectorizer",
            "location": 150,
            "return": [
                "Tuple[(Any, int)]"
            ],
            "arguments": {
                "collection_name": [
                    "str"
                ],
                "input_dir": [
                    "str"
                ],
                "batch_size": [
                    "int"
                ],
                "input_path": [
                    "str"
                ],
                "logger": [
                    "logging.Logger"
                ]
            }
        },
        "print_scores": {
            "name": "print_scores",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "logger": [
                    "logging.Logger"
                ],
                "scores": [
                    "Dict[(str, float)]"
                ],
                "header": [
                    "str"
                ]
            }
        },
        "compute_scores": {
            "name": "compute_scores",
            "location": 186,
            "return": [
                "Dict[(str, float)]"
            ],
            "arguments": {
                "model": [],
                "batch_vectorizer": [],
                "doctopic_eps": [
                    "float"
                ]
            }
        },
        "_loop_until_convergence": {
            "name": "_loop_until_convergence",
            "location": 203,
            "return": [
                "Tuple[(Any, float, int)]"
            ],
            "arguments": {
                "model": [],
                "start_iter": [
                    "int"
                ],
                "logger": [
                    "logging.Logger"
                ],
                "batch_vectorizer": [],
                "converge_thresh": [
                    "float"
                ],
                "max_iter": [
                    "int"
                ],
                "doctopic_eps": [
                    "float"
                ],
                "quiet": [
                    "bool"
                ]
            }
        },
        "_save_model": {
            "name": "_save_model",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [],
                "logger": [
                    "logging.Logger"
                ],
                "batch_vectorizer": [],
                "num_docs": [
                    "int"
                ],
                "batch_vectorizer_train": [],
                "num_docs_train": [
                    "int"
                ],
                "doctopic_output_path": [
                    "str"
                ],
                "wordtopic_output_path": [
                    "str"
                ],
                "consolidate": [
                    "bool"
                ]
            }
        },
        "train_artm": {
            "name": "train_artm",
            "location": 266,
            "return": [],
            "arguments": {
                "bow_name": [],
                "exp_name": [],
                "force": [],
                "batch_size": [],
                "max_topic": [],
                "converge_thresh": [],
                "max_iter": [],
                "sparse_word_coeff": [],
                "sparse_doc_coeff": [],
                "decor_coeff": [],
                "select_coeff": [],
                "doctopic_eps": [],
                "wordtopic_eps": [],
                "min_prob": [],
                "min_docs_abs": [],
                "min_docs_rel": [],
                "quiet": [],
                "consolidate": [],
                "log_level": []
            }
        },
        "train_artm.loop_until_convergence": {
            "name": "loop_until_convergence",
            "location": 341,
            "return": [],
            "arguments": {
                "model": [],
                "n_iter": []
            }
        },
        "train_artm.save_model": {
            "name": "save_model",
            "location": 353,
            "return": [],
            "arguments": {
                "model": []
            }
        }
    },
    "tm-experiments-master/tmexp/train_hdp.py": {
        "_define_parser": {
            "name": "_define_parser",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "create_gensim_corpus": {
            "name": "create_gensim_corpus",
            "location": 76,
            "return": [
                "List[List[Tuple[(int, int)]]]"
            ],
            "arguments": {
                "input_path": [
                    "str"
                ],
                "logger": [
                    "logging.Logger"
                ]
            }
        },
        "train_hdp": {
            "name": "train_hdp",
            "location": 91,
            "return": [],
            "arguments": {
                "bow_name": [],
                "exp_name": [],
                "force": [],
                "chunk_size": [],
                "kappa": [],
                "tau": [],
                "K": [],
                "T": [],
                "alpha": [],
                "gamma": [],
                "eta": [],
                "scale": [],
                "var_converge": [],
                "consolidate": [],
                "log_level": []
            }
        }
    },
    "tm-experiments-master/tmexp/utils.py": {
        "create_logger": {
            "name": "create_logger",
            "location": 60,
            "return": [
                "logging.Logger"
            ],
            "arguments": {
                "log_level": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "check_create_default": {
            "name": "check_create_default",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "out_type": [
                    "str"
                ]
            }
        },
        "check_file_exists": {
            "name": "check_file_exists",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "check_env_exists": {
            "name": "check_env_exists",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "env_name": [
                    "str"
                ]
            }
        },
        "check_range": {
            "name": "check_range",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "value": [
                    "float"
                ],
                "arg_name": [
                    "str"
                ],
                "min_value": [
                    "float"
                ],
                "max_value": [
                    "float"
                ]
            }
        },
        "check_remove": {
            "name": "check_remove",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "logger": [
                    "logging.Logger"
                ],
                "force": [
                    "bool"
                ],
                "is_dir": [
                    "bool"
                ],
                "is_symlink": [
                    "bool"
                ]
            }
        },
        "create_directory": {
            "name": "create_directory",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "dir_path": [
                    "str"
                ],
                "logger": [
                    "logging.Logger"
                ]
            }
        },
        "create_language_list": {
            "name": "create_language_list",
            "location": 132,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "langs": [
                    "Optional[List[str]]"
                ],
                "exclude_langs": [
                    "Optional[List[str]]"
                ]
            }
        },
        "recursive_update": {
            "name": "recursive_update",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "d": [
                    "typing.MutableMapping"
                ],
                "u": [
                    "typing.Mapping"
                ]
            }
        },
        "load_refs_dict": {
            "name": "load_refs_dict",
            "location": 157,
            "return": [
                "tmexp.data.RefsDict"
            ],
            "arguments": {
                "logger": [
                    "logging.Logger"
                ],
                "input_path": [
                    "str"
                ]
            }
        },
        "TqdmLoggingHandler.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int"
                ]
            }
        },
        "TqdmLoggingHandler.emit": {
            "name": "emit",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "logging.LogRecord"
                ]
            }
        },
        "recursive_update.recursive_worker": {
            "name": "recursive_worker",
            "location": 143,
            "return": [],
            "arguments": {
                "d": [],
                "u": []
            }
        }
    },
    "tm-experiments-master/tmexp/visualize.py": {
        "_define_parser": {
            "name": "_define_parser",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": [
                    "argparse.ArgumentParser"
                ]
            }
        },
        "create_heatmap": {
            "name": "create_heatmap",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "output_path": [
                    "str"
                ],
                "data": [
                    "np.ndarray"
                ],
                "title": [
                    "str"
                ],
                "y_labels": [
                    "List[str]"
                ],
                "x_label": [
                    "Optional[str]"
                ],
                "x_labels": [
                    "Optional[Union[(tmexp.data.RefList, List[str])]]"
                ]
            }
        },
        "visualize": {
            "name": "visualize",
            "location": 78,
            "return": [],
            "arguments": {
                "bow_name": [],
                "exp_name": [],
                "force": [],
                "max_topics": [],
                "log_level": []
            }
        }
    },
    "tm-experiments-master/tmexp/__init__.py": {},
    "tm-experiments-master/tmexp/__main__.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
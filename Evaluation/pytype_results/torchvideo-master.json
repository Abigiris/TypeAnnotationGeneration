{
    "torchvideo-master/conftest.py": {},
    "torchvideo-master/setup.py": {
        "UploadCommand.status": {
            "name": "status",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "s": []
            }
        },
        "UploadCommand.initialize_options": {
            "name": "initialize_options",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UploadCommand.finalize_options": {
            "name": "finalize_options",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UploadCommand.run": {
            "name": "run",
            "location": 70,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "torchvideo-master/docs/source/conf.py": {},
    "torchvideo-master/src/torchvideo/samplers.py": {
        "frame_idx_to_list": {
            "name": "frame_idx_to_list",
            "location": 313,
            "return": [
                "list"
            ],
            "arguments": {
                "frames_idx": []
            }
        },
        "compute_sample_length": {
            "name": "compute_sample_length",
            "location": 346,
            "return": [
                "Any"
            ],
            "arguments": {
                "clip_length": [],
                "step_size": []
            }
        },
        "_slice_to_list": {
            "name": "_slice_to_list",
            "location": 362,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "slice_": []
            }
        },
        "_oversample": {
            "name": "_oversample",
            "location": 371,
            "return": [
                "List[int]"
            ],
            "arguments": {
                "video_length": [],
                "sample_length": []
            }
        },
        "FrameSampler.sample": {
            "name": "sample",
            "location": 15,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "video_length": []
            }
        },
        "FullVideoSampler.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frame_step": []
            }
        },
        "FullVideoSampler.sample": {
            "name": "sample",
            "location": 38,
            "return": [
                "slice"
            ],
            "arguments": {
                "self": [],
                "video_length": []
            }
        },
        "FullVideoSampler.__str__": {
            "name": "__str__",
            "location": 57,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FullVideoSampler.__repr__": {
            "name": "__repr__",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClipSampler.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "clip_length": [],
                "frame_step": [],
                "test": []
            }
        },
        "ClipSampler.sample": {
            "name": "sample",
            "location": 80,
            "return": [
                "Union[(slice, List[int])]"
            ],
            "arguments": {
                "self": [],
                "video_length": []
            }
        },
        "ClipSampler.__repr__": {
            "name": "__repr__",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporalSegmentSampler.__init__": {
            "name": "__init__",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "segment_count": [],
                "snippet_length": []
            }
        },
        "TemporalSegmentSampler.sample": {
            "name": "sample",
            "location": 171,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "video_length": []
            }
        },
        "TemporalSegmentSampler._sample": {
            "name": "_sample",
            "location": 204,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "video_length": []
            }
        },
        "TemporalSegmentSampler._oversample_segments": {
            "name": "_oversample_segments",
            "location": 212,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "video_length": []
            }
        },
        "TemporalSegmentSampler._oversample_snippet": {
            "name": "_oversample_snippet",
            "location": 234,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "video_length": []
            }
        },
        "TemporalSegmentSampler._get_segment_offsets": {
            "name": "_get_segment_offsets",
            "location": 238,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "segment_length": []
            }
        },
        "TemporalSegmentSampler.segment_video": {
            "name": "segment_video",
            "location": 246,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "video_length": []
            }
        },
        "TemporalSegmentSampler.__str__": {
            "name": "__str__",
            "location": 262,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporalSegmentSampler.__repr__": {
            "name": "__repr__",
            "location": 265,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporalSegmentSampler._make_snippet_slice": {
            "name": "_make_snippet_slice",
            "location": 279,
            "return": [
                "slice"
            ],
            "arguments": {
                "self": [],
                "start": []
            }
        },
        "LambdaSampler.__init__": {
            "name": "__init__",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sampler": []
            }
        },
        "LambdaSampler.sample": {
            "name": "sample",
            "location": 299,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "video_length": []
            }
        },
        "LambdaSampler.__repr__": {
            "name": "__repr__",
            "location": 309,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "torchvideo-master/src/torchvideo/tools.py": {
        "show_video": {
            "name": "show_video",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "frames": [],
                "fps": [],
                "ndarray_format": []
            }
        },
        "convert_to_clip": {
            "name": "convert_to_clip",
            "location": 44,
            "return": [
                "Any"
            ],
            "arguments": {
                "frames": [],
                "fps": [],
                "ndarray_format": []
            }
        },
        "_to_list_of_np_frames": {
            "name": "_to_list_of_np_frames",
            "location": 70,
            "return": [
                "list"
            ],
            "arguments": {
                "frames": [],
                "ndarray_format": []
            }
        }
    },
    "torchvideo-master/src/torchvideo/__init__.py": {
        "get_video_backend": {
            "name": "get_video_backend",
            "location": 10,
            "return": [],
            "arguments": {}
        }
    },
    "torchvideo-master/src/torchvideo/__version__.py": {},
    "torchvideo-master/src/torchvideo/datasets/gulp_video_dataset.py": {
        "GulpVideoDataset.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root_path": []
            }
        },
        "GulpVideoDataset.video_ids": {
            "name": "video_ids",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GulpVideoDataset.__len__": {
            "name": "__len__",
            "location": 89,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GulpVideoDataset.__getitem__": {
            "name": "__getitem__",
            "location": 92,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "GulpVideoDataset._label_examples": {
            "name": "_label_examples",
            "location": 134,
            "return": [
                "Optional[list]"
            ],
            "arguments": {
                "video_ids": [],
                "label_set": []
            }
        },
        "GulpVideoDataset._get_video_ids": {
            "name": "_get_video_ids",
            "location": 141,
            "return": [
                "list"
            ],
            "arguments": {
                "gulp_dir": [],
                "filter_fn": []
            }
        },
        "GulpVideoDataset._get_label_set": {
            "name": "_get_label_set",
            "location": 153,
            "return": [
                "Union[(torchvideo.datasets.label_sets.gulp_label_set.GulpLabelSet, _T2)]"
            ],
            "arguments": {
                "gulp_dir": [],
                "label_field": [],
                "label_set": [
                    "_T2@@"
                ]
            }
        },
        "GulpVideoDataset._load_frames": {
            "name": "_load_frames",
            "location": 162,
            "return": [
                "np.ndarray"
            ],
            "arguments": {
                "self": [],
                "id_": [],
                "frame_idx": []
            }
        },
        "GulpVideoDataset._get_frame_count": {
            "name": "_get_frame_count",
            "location": 166,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "id_": []
            }
        },
        "GulpVideoDataset.__init__.transform": {
            "name": "transform",
            "location": 65,
            "return": [],
            "arguments": {
                "frames": []
            }
        }
    },
    "torchvideo-master/src/torchvideo/datasets/helpers.py": {
        "invoke_transform": {
            "name": "invoke_transform",
            "location": 4,
            "return": [
                "Any"
            ],
            "arguments": {
                "transform": [],
                "frames": [],
                "label": []
            }
        }
    },
    "torchvideo-master/src/torchvideo/datasets/image_folder_video_dataset.py": {
        "ImageFolderVideoDataset.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root_path": [],
                "filename_template": [],
                "filter": [],
                "label_set": [],
                "sampler": [],
                "transform": [],
                "frame_counter": []
            }
        },
        "ImageFolderVideoDataset.video_ids": {
            "name": "video_ids",
            "location": 78,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ImageFolderVideoDataset.__len__": {
            "name": "__len__",
            "location": 81,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ImageFolderVideoDataset.__getitem__": {
            "name": "__getitem__",
            "location": 84,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "ImageFolderVideoDataset._measure_video_lengths": {
            "name": "_measure_video_lengths",
            "location": 103,
            "return": [
                "list"
            ],
            "arguments": {
                "video_dirs": [],
                "frame_counter": []
            }
        },
        "ImageFolderVideoDataset._label_examples": {
            "name": "_label_examples",
            "location": 112,
            "return": [
                "Optional[list]"
            ],
            "arguments": {
                "video_dirs": [],
                "label_set": []
            }
        },
        "ImageFolderVideoDataset._load_frames": {
            "name": "_load_frames",
            "location": 118,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "frames_idx": [],
                "video_folder": []
            }
        },
        "ImageFolderVideoDataset._load_image": {
            "name": "_load_image",
            "location": 130,
            "return": [
                "PIL.Image.Image"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        }
    },
    "torchvideo-master/src/torchvideo/datasets/types.py": {},
    "torchvideo-master/src/torchvideo/datasets/video_dataset.py": {
        "VideoDataset.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root_path": [],
                "label_set": [],
                "sampler": [],
                "transform": []
            }
        },
        "VideoDataset.video_ids": {
            "name": "video_ids",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VideoDataset.__getitem__": {
            "name": "__getitem__",
            "location": 45,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "VideoDataset.__len__": {
            "name": "__len__",
            "location": 61,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "torchvideo-master/src/torchvideo/datasets/video_folder_dataset.py": {
        "VideoFolderDataset.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root_path": [],
                "filter": [],
                "label_set": [],
                "sampler": [],
                "transform": [],
                "frame_counter": []
            }
        },
        "VideoFolderDataset.video_ids": {
            "name": "video_ids",
            "location": 63,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "VideoFolderDataset.__getitem__": {
            "name": "__getitem__",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "index": []
            }
        },
        "VideoFolderDataset.__len__": {
            "name": "__len__",
            "location": 85,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "VideoFolderDataset._measure_video_lengths": {
            "name": "_measure_video_lengths",
            "location": 89,
            "return": [
                "list"
            ],
            "arguments": {
                "video_paths": [],
                "frame_counter": []
            }
        },
        "VideoFolderDataset._label_examples": {
            "name": "_label_examples",
            "location": 95,
            "return": [
                "Optional[list]"
            ],
            "arguments": {
                "video_paths": [],
                "label_set": []
            }
        },
        "VideoFolderDataset._get_video_paths": {
            "name": "_get_video_paths",
            "location": 102,
            "return": [
                "list"
            ],
            "arguments": {
                "root_path": [],
                "filter": []
            }
        },
        "VideoFolderDataset._load_frames": {
            "name": "_load_frames",
            "location": 112,
            "return": [
                "Any"
            ],
            "arguments": {
                "frame_idx": [],
                "video_file": []
            }
        }
    },
    "torchvideo-master/src/torchvideo/datasets/__init__.py": {},
    "torchvideo-master/src/torchvideo/datasets/label_sets/csv_label_set.py": {
        "CsvLabelSet.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "df": [],
                "col": []
            }
        },
        "CsvLabelSet.__getitem__": {
            "name": "__getitem__",
            "location": 32,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "video_name": []
            }
        }
    },
    "torchvideo-master/src/torchvideo/datasets/label_sets/dummy_label_set.py": {
        "DummyLabelSet.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "DummyLabelSet.__getitem__": {
            "name": "__getitem__",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "video_name": []
            }
        },
        "DummyLabelSet.__repr__": {
            "name": "__repr__",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "torchvideo-master/src/torchvideo/datasets/label_sets/gulp_label_set.py": {
        "GulpLabelSet.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "merged_meta_dict": [],
                "label_field": []
            }
        },
        "GulpLabelSet.__getitem__": {
            "name": "__getitem__",
            "location": 17,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "video_name": []
            }
        }
    },
    "torchvideo-master/src/torchvideo/datasets/label_sets/label_set.py": {
        "LabelSet.__getitem__": {
            "name": "__getitem__",
            "location": 12,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "video_name": []
            }
        }
    },
    "torchvideo-master/src/torchvideo/datasets/label_sets/lambda_label_set.py": {
        "LambdaLabelSet.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "labeller_fn": []
            }
        },
        "LambdaLabelSet.__getitem__": {
            "name": "__getitem__",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "video_name": []
            }
        }
    },
    "torchvideo-master/src/torchvideo/datasets/label_sets/__init__.py": {},
    "torchvideo-master/src/torchvideo/internal/readers.py": {
        "lintel_loader": {
            "name": "lintel_loader",
            "location": 30,
            "return": [
                "Generator[(Image.Image, Any, None)]"
            ],
            "arguments": {
                "file": [],
                "frames_idx": []
            }
        },
        "default_loader": {
            "name": "default_loader",
            "location": 58,
            "return": [
                "Any"
            ],
            "arguments": {
                "file": [],
                "frames_idx": []
            }
        },
        "_get_videofile_frame_count": {
            "name": "_get_videofile_frame_count",
            "location": 71,
            "return": [
                "int"
            ],
            "arguments": {
                "video_file_path": []
            }
        },
        "_is_video_file": {
            "name": "_is_video_file",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": []
            }
        }
    },
    "torchvideo-master/src/torchvideo/internal/utils.py": {
        "_is_int": {
            "name": "_is_int",
            "location": 1,
            "return": [
                "bool"
            ],
            "arguments": {
                "maybe_int": []
            }
        }
    },
    "torchvideo-master/src/torchvideo/internal/__init__.py": {},
    "torchvideo-master/src/torchvideo/scripts/dataloader_benchmark.py": {
        "benchmark_dataloader": {
            "name": "benchmark_dataloader",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "loader": [],
                "max_iterations": [],
                "profile": [],
                "profile_callgrind": []
            }
        },
        "main": {
            "name": "main",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "make_dataset": {
            "name": "make_dataset",
            "location": 121,
            "return": [
                "Union[(torchvideo.datasets.gulp_video_dataset.GulpVideoDataset, torchvideo.datasets.image_folder_video_dataset.ImageFolderVideoDataset, torchvideo.datasets.video_folder_dataset.VideoFolderDataset)]"
            ],
            "arguments": {
                "args": [],
                "sampler": [],
                "transform": []
            }
        },
        "make_sampler": {
            "name": "make_sampler",
            "location": 155,
            "return": [
                "Union[(torchvideo.samplers.ClipSampler, torchvideo.samplers.FullVideoSampler, torchvideo.samplers.TemporalSegmentSampler)]"
            ],
            "arguments": {
                "args": []
            }
        },
        "benchmark_dataloader.run_dataloader": {
            "name": "run_dataloader",
            "location": 64,
            "return": [],
            "arguments": {}
        }
    },
    "torchvideo-master/src/torchvideo/transforms/__init__.py": {},
    "torchvideo-master/src/torchvideo/transforms/functional/normalize.py": {
        "normalize": {
            "name": "normalize",
            "location": 6,
            "return": [
                "Any"
            ],
            "arguments": {
                "tensor": [],
                "mean": [],
                "std": [],
                "channel_dim": [],
                "inplace": []
            }
        }
    },
    "torchvideo-master/src/torchvideo/transforms/functional/time_to_channel.py": {
        "time_to_channel": {
            "name": "time_to_channel",
            "location": 4,
            "return": [
                "Any"
            ],
            "arguments": {
                "tensor": []
            }
        }
    },
    "torchvideo-master/src/torchvideo/transforms/functional/__init__.py": {},
    "torchvideo-master/src/torchvideo/transforms/transforms/center_crop_video.py": {
        "CenterCropVideo.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "CenterCropVideo._gen_params": {
            "name": "_gen_params",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frames": []
            }
        },
        "CenterCropVideo.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CenterCropVideo._transform": {
            "name": "_transform",
            "location": 29,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "frames": [],
                "params": []
            }
        }
    },
    "torchvideo-master/src/torchvideo/transforms/transforms/collect_frames.py": {
        "CollectFrames._gen_params": {
            "name": "_gen_params",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frames": []
            }
        },
        "CollectFrames._transform": {
            "name": "_transform",
            "location": 18,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "frames": [],
                "params": []
            }
        },
        "CollectFrames.__repr__": {
            "name": "__repr__",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "torchvideo-master/src/torchvideo/transforms/transforms/compose.py": {
        "_supports_target": {
            "name": "_supports_target",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "transform": []
            }
        },
        "_requires_target": {
            "name": "_requires_target",
            "location": 58,
            "return": [
                "Any"
            ],
            "arguments": {
                "transform": []
            }
        },
        "Compose.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transforms": []
            }
        },
        "Compose.__call__": {
            "name": "__call__",
            "location": 24,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "frames": [],
                "target": []
            }
        },
        "Compose._check_transforms_dont_require_target": {
            "name": "_check_transforms_dont_require_target",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Compose.__repr__": {
            "name": "__repr__",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "torchvideo-master/src/torchvideo/transforms/transforms/identity_transform.py": {
        "IdentityTransform._transform": {
            "name": "_transform",
            "location": 12,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "self": [],
                "frames": [
                    "_T0@@"
                ],
                "params": []
            }
        },
        "IdentityTransform.__repr__": {
            "name": "__repr__",
            "location": 15,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "torchvideo-master/src/torchvideo/transforms/transforms/internal.py": {
        "canonicalize_size": {
            "name": "canonicalize_size",
            "location": 7,
            "return": [
                "Any"
            ],
            "arguments": {
                "size": []
            }
        },
        "to_iter": {
            "name": "to_iter",
            "location": 28,
            "return": [
                "Any"
            ],
            "arguments": {
                "seq": []
            }
        },
        "peek_iter": {
            "name": "peek_iter",
            "location": 37,
            "return": [
                "Tuple[(Any, itertools.chain)]"
            ],
            "arguments": {
                "iterator": []
            }
        }
    },
    "torchvideo-master/src/torchvideo/transforms/transforms/multiscale_crop_video.py": {
        "MultiScaleCropVideo._gen_params": {
            "name": "_gen_params",
            "location": 43,
            "return": [
                "torchvideo.transforms.transforms.transform.FramesAndParams[(nothing, nothing)]"
            ],
            "arguments": {
                "self": [],
                "frames": []
            }
        },
        "MultiScaleCropVideo._transform": {
            "name": "_transform",
            "location": 63,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "frames": [],
                "params": []
            }
        },
        "MultiScaleCropVideo.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "scales": [],
                "max_distortion": [],
                "fixed_crops": [],
                "more_fixed_crops": []
            }
        },
        "MultiScaleCropVideo.__repr__": {
            "name": "__repr__",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiScaleCropVideo.get_params": {
            "name": "get_params",
            "location": 110,
            "return": [
                "Tuple[(nothing, Any)]"
            ],
            "arguments": {
                "cls": [],
                "frame": [],
                "output_shape": [],
                "scales": [],
                "max_distortion": [],
                "fixed_crops": [],
                "more_fixed_crops": []
            }
        },
        "MultiScaleCropVideo._sample_crop_shape": {
            "name": "_sample_crop_shape",
            "location": 136,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "crop_sizes": [],
                "max_distortion": [],
                "output_shape": []
            }
        },
        "MultiScaleCropVideo._sample_random_offset": {
            "name": "_sample_random_offset",
            "location": 156,
            "return": [
                "Any"
            ],
            "arguments": {
                "input_shape": [],
                "crop_shape": []
            }
        },
        "MultiScaleCropVideo._sample_fixed_offset": {
            "name": "_sample_fixed_offset",
            "location": 162,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "input_shape": [],
                "crop_shape": [],
                "more_fixed_crops": []
            }
        },
        "MultiScaleCropVideo._fixed_crop_offsets": {
            "name": "_fixed_crop_offsets",
            "location": 171,
            "return": [
                "list"
            ],
            "arguments": {
                "image_shape": [],
                "crop_shape": [],
                "more_fixed_crops": []
            }
        }
    },
    "torchvideo-master/src/torchvideo/transforms/transforms/ndarray_to_pil_video.py": {
        "NDArrayToPILVideo.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "format": []
            }
        },
        "NDArrayToPILVideo._transform": {
            "name": "_transform",
            "location": 26,
            "return": [
                "Generator[(PIL.Image.Image, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "frames": [],
                "params": []
            }
        },
        "NDArrayToPILVideo._gen_params": {
            "name": "_gen_params",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frames": []
            }
        },
        "NDArrayToPILVideo.__repr__": {
            "name": "__repr__",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "torchvideo-master/src/torchvideo/transforms/transforms/normalize_video.py": {
        "NormalizeVideo.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mean": [],
                "std": [],
                "channel_dim": [],
                "inplace": []
            }
        },
        "NormalizeVideo._gen_params": {
            "name": "_gen_params",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frames": []
            }
        },
        "NormalizeVideo.__repr__": {
            "name": "__repr__",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NormalizeVideo._transform": {
            "name": "_transform",
            "location": 57,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "frames": [],
                "params": []
            }
        },
        "NormalizeVideo._broadcast_to_seq": {
            "name": "_broadcast_to_seq",
            "location": 66,
            "return": [
                "Union[(List[_T0], _T0)]"
            ],
            "arguments": {
                "x": [
                    "_T0@@"
                ],
                "channel_count": []
            }
        }
    },
    "torchvideo-master/src/torchvideo/transforms/transforms/pil_video_to_tensor.py": {
        "PILVideoToTensor.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rescale": [],
                "ordering": []
            }
        },
        "PILVideoToTensor._gen_params": {
            "name": "_gen_params",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frames": []
            }
        },
        "PILVideoToTensor._transform": {
            "name": "_transform",
            "location": 37,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "frames": [],
                "params": []
            }
        },
        "PILVideoToTensor.__repr__": {
            "name": "__repr__",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "torchvideo-master/src/torchvideo/transforms/transforms/random_crop_video.py": {
        "RandomCropVideo.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "padding": [],
                "pad_if_needed": [],
                "fill": [],
                "padding_mode": []
            }
        },
        "RandomCropVideo._gen_params": {
            "name": "_gen_params",
            "location": 58,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "frames": []
            }
        },
        "RandomCropVideo._transform": {
            "name": "_transform",
            "location": 65,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "frames": [],
                "params": []
            }
        },
        "RandomCropVideo._maybe_pad": {
            "name": "_maybe_pad",
            "location": 71,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "frame": []
            }
        },
        "RandomCropVideo.__repr__": {
            "name": "__repr__",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "torchvideo-master/src/torchvideo/transforms/transforms/random_horizontal_flip_video.py": {
        "RandomHorizontalFlipVideo.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "RandomHorizontalFlipVideo._gen_params": {
            "name": "_gen_params",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "frames": []
            }
        },
        "RandomHorizontalFlipVideo._transform": {
            "name": "_transform",
            "location": 28,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "frames": [],
                "params": []
            }
        },
        "RandomHorizontalFlipVideo.__repr__": {
            "name": "__repr__",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "torchvideo-master/src/torchvideo/transforms/transforms/random_resized_crop_video.py": {
        "RandomResizedCropVideo._gen_params": {
            "name": "_gen_params",
            "location": 29,
            "return": [
                "torchvideo.transforms.transforms.transform.FramesAndParams[(nothing, nothing)]"
            ],
            "arguments": {
                "self": [],
                "frames": []
            }
        },
        "RandomResizedCropVideo._transform": {
            "name": "_transform",
            "location": 36,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "frames": [],
                "params": []
            }
        },
        "RandomResizedCropVideo.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "scale": [],
                "ratio": [],
                "interpolation": []
            }
        },
        "RandomResizedCropVideo.__repr__": {
            "name": "__repr__",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomResizedCropVideo._transform_frame": {
            "name": "_transform_frame",
            "location": 66,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "frame": [],
                "i": [],
                "j": [],
                "h": [],
                "w": []
            }
        }
    },
    "torchvideo-master/src/torchvideo/transforms/transforms/resize_video.py": {
        "ResizeVideo.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "size": [],
                "interpolation": []
            }
        },
        "ResizeVideo.__repr__": {
            "name": "__repr__",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResizeVideo._transform": {
            "name": "_transform",
            "location": 36,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "frames": [],
                "params": []
            }
        }
    },
    "torchvideo-master/src/torchvideo/transforms/transforms/time_apply.py": {
        "TimeApply.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "img_transform": []
            }
        },
        "TimeApply._transform": {
            "name": "_transform",
            "location": 28,
            "return": [
                "Generator[(Any, Any, None)]"
            ],
            "arguments": {
                "self": [],
                "frames": [],
                "params": []
            }
        }
    },
    "torchvideo-master/src/torchvideo/transforms/transforms/time_to_channel.py": {
        "TimeToChannel._gen_params": {
            "name": "_gen_params",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "frames": []
            }
        },
        "TimeToChannel._transform": {
            "name": "_transform",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "frames": [],
                "params": []
            }
        },
        "TimeToChannel.__repr__": {
            "name": "__repr__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "torchvideo-master/src/torchvideo/transforms/transforms/transform.py": {
        "FramesAndParams.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frames": [],
                "params": []
            }
        },
        "Transform.__call__": {
            "name": "__call__",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "frames": [],
                "target": []
            }
        },
        "Transform._gen_params": {
            "name": "_gen_params",
            "location": 40,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "frames": []
            }
        },
        "Transform._transform": {
            "name": "_transform",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "frames": [],
                "params": []
            }
        },
        "StatelessTransform._gen_params": {
            "name": "_gen_params",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frames": []
            }
        }
    },
    "torchvideo-master/src/torchvideo/transforms/transforms/types.py": {},
    "torchvideo-master/src/torchvideo/transforms/transforms/__init__.py": {},
    "torchvideo-master/tests/__init__.py": {
        "TorchRandomState.getstate": {
            "name": "getstate",
            "location": 9,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "TorchRandomState.setstate": {
            "name": "setstate",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "TorchRandomState.seed": {
            "name": "seed",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seed": []
            }
        }
    },
    "torchvideo-master/tests/assertions/seq.py": {
        "assert_ordered": {
            "name": "assert_ordered",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "seq": []
            }
        },
        "assert_elems_lt": {
            "name": "assert_elems_lt",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "seq": [],
                "upper_bound": []
            }
        },
        "assert_elems_gte": {
            "name": "assert_elems_gte",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "seq": [],
                "lower_bound": []
            }
        }
    },
    "torchvideo-master/tests/assertions/__init__.py": {},
    "torchvideo-master/tests/functional/test_readers.py": {
        "TestLintelReader.test_reading_sequential_contiguous_frames": {
            "name": "test_reading_sequential_contiguous_frames",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLintelReader.test_reading_last_frame": {
            "name": "test_reading_last_frame",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLintelReader.test_reading_frames_out_of_order": {
            "name": "test_reading_frames_out_of_order",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLintelReader.test_reading_frames_beyond_length_of_video": {
            "name": "test_reading_frames_beyond_length_of_video",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLintelReader.load_frames": {
            "name": "load_frames",
            "location": 30,
            "return": [
                "List[PIL.Image.Image]"
            ],
            "arguments": {
                "self": [],
                "frame_idx": []
            }
        },
        "TestLintelReader.check_frames": {
            "name": "check_frames",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frames": [],
                "expected_frame_count": []
            }
        }
    },
    "torchvideo-master/tests/functional/__init__.py": {},
    "torchvideo-master/tests/functional/datasets/test_gulp_video_dataset.py": {
        "gulp_path": {
            "name": "gulp_path",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "gulp_dataset": {
            "name": "gulp_dataset",
            "location": 25,
            "return": [],
            "arguments": {
                "gulp_path": []
            }
        },
        "TestGulpVideoDataset.test_dataset_length": {
            "name": "test_dataset_length",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gulp_dataset": []
            }
        },
        "TestGulpVideoDataset.test_video_id": {
            "name": "test_video_id",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gulp_dataset": []
            }
        },
        "TestGulpVideoDataset.test_video_range": {
            "name": "test_video_range",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gulp_dataset": []
            }
        },
        "TestGulpVideoDataset.test_loads_all_frames_by_default": {
            "name": "test_loads_all_frames_by_default",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gulp_dataset": []
            }
        },
        "TestGulpVideoDataset.test_loading_by_slice": {
            "name": "test_loading_by_slice",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gulp_dataset": []
            }
        },
        "TestGulpVideoDataset.test_loading_by_list_of_slices": {
            "name": "test_loading_by_list_of_slices",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gulp_dataset": []
            }
        },
        "TestGulpVideoDataset.test_loading_by_list_of_int": {
            "name": "test_loading_by_list_of_int",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gulp_dataset": []
            }
        },
        "TestGulpVideoDataset.test_filtering_videos": {
            "name": "test_filtering_videos",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gulp_path": []
            }
        },
        "TestGulpVideoDataset.test_transforms_are_passed_uint8_ndarray_video": {
            "name": "test_transforms_are_passed_uint8_ndarray_video",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gulp_path": []
            }
        },
        "TestGulpVideoDataset.test_transform_is_called": {
            "name": "test_transform_is_called",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gulp_path": []
            }
        },
        "TestGulpVideoDataset.test_transform_is_passed_target_if_it_supports_it": {
            "name": "test_transform_is_passed_target_if_it_supports_it",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gulp_path": []
            }
        },
        "TestGulpVideoDataset.test_labels_are_accessible": {
            "name": "test_labels_are_accessible",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gulp_dataset": []
            }
        },
        "TestGulpVideoDataset.test_video_ids": {
            "name": "test_video_ids",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gulp_dataset": []
            }
        },
        "TestGulpVideoDataset.test_creating_gulp_video_dataset_from_gulp_directory": {
            "name": "test_creating_gulp_video_dataset_from_gulp_directory",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gulp_path": []
            }
        },
        "TestGulpVideoDataset.test_dataset_throws_error_if_root_path_is_different_from_gulp_dir_path": {
            "name": "test_dataset_throws_error_if_root_path_is_different_from_gulp_dir_path",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "gulp_path": []
            }
        },
        "TestGulpVideoDataset.test_filtering_videos.filter": {
            "name": "filter",
            "location": 90,
            "return": [],
            "arguments": {
                "video_id": []
            }
        }
    },
    "torchvideo-master/tests/functional/datasets/test_image_folder_video_dataset.py": {
        "image_folder": {
            "name": "image_folder",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "image_folder_video_dataset": {
            "name": "image_folder_video_dataset",
            "location": 16,
            "return": [],
            "arguments": {
                "image_folder": []
            }
        },
        "TestImageFolderVideoDataset.test_length": {
            "name": "test_length",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_folder_video_dataset": []
            }
        },
        "TestImageFolderVideoDataset.test_video_range": {
            "name": "test_video_range",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_folder_video_dataset": []
            }
        },
        "TestImageFolderVideoDataset.test_loads_all_frames_by_default": {
            "name": "test_loads_all_frames_by_default",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_folder_video_dataset": []
            }
        },
        "TestImageFolderVideoDataset.test_loading_by_slice": {
            "name": "test_loading_by_slice",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_folder_video_dataset": []
            }
        },
        "TestImageFolderVideoDataset.test_loading_by_list_of_slice": {
            "name": "test_loading_by_list_of_slice",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_folder_video_dataset": []
            }
        },
        "TestImageFolderVideoDataset.test_loading_by_list_of_ints": {
            "name": "test_loading_by_list_of_ints",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_folder_video_dataset": []
            }
        },
        "TestImageFolderVideoDataset.test_using_custom_frame_counter": {
            "name": "test_using_custom_frame_counter",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_folder": []
            }
        }
    },
    "torchvideo-master/tests/functional/datasets/test_video_folder_dataset.py": {
        "video_folder_dir": {
            "name": "video_folder_dir",
            "location": 9,
            "return": [],
            "arguments": {}
        },
        "video_folder_dataset": {
            "name": "video_folder_dataset",
            "location": 14,
            "return": [],
            "arguments": {
                "video_folder_dir": []
            }
        },
        "TestVideoFolderDataset.test_dataset_length": {
            "name": "test_dataset_length",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "video_folder_dataset": []
            }
        },
        "TestVideoFolderDataset.test_video_range": {
            "name": "test_video_range",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "video_folder_dataset": []
            }
        },
        "TestVideoFolderDataset.test_loads_all_frames_by_default": {
            "name": "test_loads_all_frames_by_default",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "video_folder_dataset": []
            }
        },
        "TestVideoFolderDataset.test_loading_by_slice": {
            "name": "test_loading_by_slice",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "video_folder_dataset": []
            }
        },
        "TestVideoFolderDataset.test_loading_by_list_of_slices": {
            "name": "test_loading_by_list_of_slices",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "video_folder_dataset": []
            }
        },
        "TestVideoFolderDataset.test_loading_by_list_of_int": {
            "name": "test_loading_by_list_of_int",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "video_folder_dataset": []
            }
        },
        "TestVideoFolderDataset.test_using_custom_frame_counter": {
            "name": "test_using_custom_frame_counter",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "video_folder_dir": []
            }
        }
    },
    "torchvideo-master/tests/functional/datasets/__init__.py": {},
    "torchvideo-master/tests/unit/mock_transforms.py": {
        "_has_at_least_one_param": {
            "name": "_has_at_least_one_param",
            "location": 10,
            "return": [
                "bool"
            ],
            "arguments": {
                "fn": []
            }
        },
        "MockTransform.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "return_value": [],
                "name": []
            }
        },
        "MockTransform.assert_called_once_with": {
            "name": "assert_called_once_with",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockTransform.__repr__": {
            "name": "__repr__",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockTransform._get_frames_return_value": {
            "name": "_get_frames_return_value",
            "location": 36,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "frames": []
            }
        },
        "MockTransformWithTarget.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frames_return_value": [],
                "target_return_value": []
            }
        },
        "MockTransformWithTarget._get_target_return_value": {
            "name": "_get_target_return_value",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "target": []
            }
        },
        "MockFramesOnlyTransform.__call__": {
            "name": "__call__",
            "location": 61,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "frames": []
            }
        },
        "MockFramesAndOptionalTargetTransform.__call__": {
            "name": "__call__",
            "location": 67,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "frames": [],
                "target": []
            }
        },
        "MockFramesAndRequiredTargetTransform.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "frames_return_value": [],
                "target_return_value": [],
                "name": []
            }
        },
        "MockFramesAndRequiredTargetTransform.__call__": {
            "name": "__call__",
            "location": 85,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "self": [],
                "frames": [],
                "target": []
            }
        }
    },
    "torchvideo-master/tests/unit/strategies.py": {
        "numpy_video": {
            "name": "numpy_video",
            "location": 11,
            "return": [],
            "arguments": {
                "draw": [],
                "min_length": [],
                "max_length": [],
                "min_width": [],
                "max_width": [],
                "min_height": [],
                "max_height": [],
                "mode": []
            }
        },
        "pil_video": {
            "name": "pil_video",
            "location": 36,
            "return": [],
            "arguments": {
                "draw": [],
                "min_length": [],
                "max_length": [],
                "min_width": [],
                "max_width": [],
                "min_height": [],
                "max_height": [],
                "mode": []
            }
        },
        "tensor_video": {
            "name": "tensor_video",
            "location": 63,
            "return": [],
            "arguments": {
                "draw": [],
                "min_length": [],
                "max_length": [],
                "min_width": [],
                "max_width": [],
                "min_height": [],
                "max_height": [],
                "mode": []
            }
        },
        "video_shape": {
            "name": "video_shape",
            "location": 98,
            "return": [],
            "arguments": {
                "draw": [],
                "min_length": [],
                "max_length": [],
                "min_height": [],
                "max_height": [],
                "min_width": [],
                "max_width": []
            }
        }
    },
    "torchvideo-master/tests/unit/test_internal.py": {
        "test_compute_sample_length": {
            "name": "test_compute_sample_length",
            "location": 26,
            "return": [],
            "arguments": {
                "clip_length": [],
                "step_size": [],
                "expected_sample_size": []
            }
        }
    },
    "torchvideo-master/tests/unit/test_readers.py": {
        "loadvid_frame_nums_mock": {
            "name": "loadvid_frame_nums_mock",
            "location": 12,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "loadvid_frame_nums_mock.side_effect": {
            "name": "side_effect",
            "location": 13,
            "return": [],
            "arguments": {
                "binary_data": [],
                "frame_nums": []
            }
        },
        "TestLintelReaderUnit.test_loading_sequential_contiguous_frames": {
            "name": "test_loading_sequential_contiguous_frames",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loadvid_frame_nums_mock": []
            }
        },
        "TestLintelReaderUnit.test_loading_duplicate_frames": {
            "name": "test_loading_duplicate_frames",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loadvid_frame_nums_mock": []
            }
        },
        "TestLintelReaderUnit.test_loading_unorderd_frames": {
            "name": "test_loading_unorderd_frames",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loadvid_frame_nums_mock": []
            }
        },
        "TestLintelReaderUnit.assert_loadvid_correctly_called": {
            "name": "assert_loadvid_correctly_called",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "loadvid_frame_nums_mock": [],
                "f": [],
                "frame_nums": [],
                "frames": [],
                "expected_load_idx": []
            }
        }
    },
    "torchvideo-master/tests/unit/__init__.py": {},
    "torchvideo-master/tests/unit/datasets/conftest.py": {
        "mock_frame_count": {
            "name": "mock_frame_count",
            "location": 8,
            "return": [],
            "arguments": {
                "monkeypatch": []
            }
        },
        "dataset_dir": {
            "name": "dataset_dir",
            "location": 20,
            "return": [],
            "arguments": {
                "fs": []
            }
        },
        "mock_frame_count.get_videofile_frame_count": {
            "name": "get_videofile_frame_count",
            "location": 9,
            "return": [],
            "arguments": {
                "path": []
            }
        }
    },
    "torchvideo-master/tests/unit/datasets/test_image_folder_video_dataset.py": {
        "TestImageFolderVideoDatasetUnit.test_all_videos_folders_are_present_in_video_dirs_by_default": {
            "name": "test_all_videos_folders_are_present_in_video_dirs_by_default",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_dir": []
            }
        },
        "TestImageFolderVideoDatasetUnit.test_filtering_video_folders": {
            "name": "test_filtering_video_folders",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_dir": []
            }
        },
        "TestImageFolderVideoDatasetUnit.test_labels_are_accessible": {
            "name": "test_labels_are_accessible",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_dir": []
            }
        },
        "TestImageFolderVideoDatasetUnit.test_transform_is_applied": {
            "name": "test_transform_is_applied",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_dir": []
            }
        },
        "TestImageFolderVideoDatasetUnit.test_transform_is_passed_target_if_it_supports_it": {
            "name": "test_transform_is_passed_target_if_it_supports_it",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_dir": []
            }
        },
        "TestImageFolderVideoDatasetUnit.test_video_ids": {
            "name": "test_video_ids",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_dir": []
            }
        },
        "TestImageFolderVideoDatasetUnit.make_video_dirs": {
            "name": "make_video_dirs",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "dataset_dir": [],
                "video_count": [],
                "frame_count": []
            }
        },
        "TestImageFolderVideoDatasetUnit.test_filtering_video_folders.filter": {
            "name": "filter",
            "location": 25,
            "return": [],
            "arguments": {
                "video_path": []
            }
        }
    },
    "torchvideo-master/tests/unit/datasets/test_video_folder_dataset.py": {
        "TestVideoFolderDatasetUnit.test_all_videos_are_present_in_video_paths_by_default": {
            "name": "test_all_videos_are_present_in_video_paths_by_default",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_dir": [],
                "fs": [],
                "mock_frame_count": []
            }
        },
        "TestVideoFolderDatasetUnit.test_filtering_video_files": {
            "name": "test_filtering_video_files",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_dir": [],
                "fs": [],
                "mock_frame_count": []
            }
        },
        "TestVideoFolderDatasetUnit.test_labels_are_accessible": {
            "name": "test_labels_are_accessible",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_dir": [],
                "fs": [],
                "mock_frame_count": []
            }
        },
        "TestVideoFolderDatasetUnit.test_transform_is_applied": {
            "name": "test_transform_is_applied",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_dir": [],
                "fs": [],
                "monkeypatch": []
            }
        },
        "TestVideoFolderDatasetUnit.test_transform_is_passed_target_if_it_supports_it": {
            "name": "test_transform_is_passed_target_if_it_supports_it",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_dir": [],
                "fs": [],
                "monkeypatch": []
            }
        },
        "TestVideoFolderDatasetUnit.test_video_ids": {
            "name": "test_video_ids",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dataset_dir": [],
                "fs": []
            }
        },
        "TestVideoFolderDatasetUnit.make_video_files": {
            "name": "make_video_files",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "dataset_dir": [],
                "fs": [],
                "video_count": []
            }
        },
        "TestVideoFolderDatasetUnit.test_filtering_video_files.filter": {
            "name": "filter",
            "location": 31,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "TestVideoFolderDatasetUnit.test_transform_is_applied._load_mock_frames": {
            "name": "_load_mock_frames",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "frames_idx": [],
                "video_file": []
            }
        }
    },
    "torchvideo-master/tests/unit/datasets/__init__.py": {},
    "torchvideo-master/tests/unit/label_sets/test_csv_label_set.py": {
        "TestCsvLabelSet.test_returns_label_field_for_dataframe": {
            "name": "test_returns_label_field_for_dataframe",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCsvLabelSet.test_returns_element_from_series": {
            "name": "test_returns_element_from_series",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "torchvideo-master/tests/unit/label_sets/test_dummy_label_set.py": {
        "TestDummyLabelSet.test_return_label_for_any_video_name": {
            "name": "test_return_label_for_any_video_name",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "video_name": []
            }
        },
        "TestDummyLabelSet.test_repr": {
            "name": "test_repr",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "torchvideo-master/tests/unit/label_sets/test_gulp_label_set.py": {
        "TestGulpLabelSet.test_defaults_to_label_field": {
            "name": "test_defaults_to_label_field",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGulpLabelSet.test_custom_label_field": {
            "name": "test_custom_label_field",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "torchvideo-master/tests/unit/label_sets/__init__.py": {},
    "torchvideo-master/tests/unit/samplers/assertions.py": {
        "assert_valid_frame_index": {
            "name": "assert_valid_frame_index",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "frame_idx": [],
                "expected_frame_count": [],
                "video_length": []
            }
        },
        "assert_valid_snippet_index": {
            "name": "assert_valid_snippet_index",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "snippet_idx": [],
                "expected_snippet_length": [],
                "expected_segment_count": [],
                "video_length": []
            }
        }
    },
    "torchvideo-master/tests/unit/samplers/test_clip_sampler.py": {
        "TestClipSampler.test_clip_is_subsampled_from_video_when_video_is_longer_than_clip": {
            "name": "test_clip_is_subsampled_from_video_when_video_is_longer_than_clip",
            "location": 9,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TestClipSampler.test_clip_is_oversampled_when_video_is_shorter_than_clip_length": {
            "name": "test_clip_is_oversampled_when_video_is_shorter_than_clip_length",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TestClipSampler.test_clip_sampler_samples_central_clip_in_test_mode": {
            "name": "test_clip_sampler_samples_central_clip_in_test_mode",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestClipSampler.test_clip_sampler_is_deterministic_in_test_mode": {
            "name": "test_clip_sampler_is_deterministic_in_test_mode",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TestClipSampler.test_repr": {
            "name": "test_repr",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "torchvideo-master/tests/unit/samplers/test_full_video_sampler.py": {
        "TestFullVideoSampler.test_full_video_sampler": {
            "name": "test_full_video_sampler",
            "location": 8,
            "return": [],
            "arguments": {
                "self": [],
                "length": []
            }
        },
        "TestFullVideoSampler.test_full_video_sampler_repr": {
            "name": "test_full_video_sampler_repr",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFullVideoSampler.test_full_video_sampler_str": {
            "name": "test_full_video_sampler_str",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "torchvideo-master/tests/unit/samplers/test_lambda_sampler.py": {
        "TestLambdaSampler.test_throws_error_if_user_provided_sampling_fn_returns_invalid_idx": {
            "name": "test_throws_error_if_user_provided_sampling_fn_returns_invalid_idx",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaSampler.test_repr": {
            "name": "test_repr",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestLambdaSampler.test_repr.MySampler.__call__": {
            "name": "__call__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "video_length": []
            }
        },
        "TestLambdaSampler.test_repr.MySampler.__repr__": {
            "name": "__repr__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "torchvideo-master/tests/unit/samplers/test_samplers.py": {
        "full_video_sampler": {
            "name": "full_video_sampler",
            "location": 17,
            "return": [
                "torchvideo.samplers.FullVideoSampler"
            ],
            "arguments": {}
        },
        "temporal_segment_sampler": {
            "name": "temporal_segment_sampler",
            "location": 21,
            "return": [
                "torchvideo.samplers.TemporalSegmentSampler"
            ],
            "arguments": {}
        },
        "clip_sampler": {
            "name": "clip_sampler",
            "location": 27,
            "return": [
                "torchvideo.samplers.ClipSampler"
            ],
            "arguments": {}
        },
        "frame_sampler": {
            "name": "frame_sampler",
            "location": 33,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "TestFrameSampler.test_frame_sampler_raises_error_0_or_negative_frame_count": {
            "name": "test_frame_sampler_raises_error_0_or_negative_frame_count",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "frame_sampler": [],
                "frame_count": []
            }
        },
        "TestFrameSampler.test_frame_sampler_generates_sequential_idx": {
            "name": "test_frame_sampler_generates_sequential_idx",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "frame_sampler": [],
                "frame_count": []
            }
        }
    },
    "torchvideo-master/tests/unit/samplers/test_temporal_segment_sampler.py": {
        "TestTemporalSegmentSampler.test_raises_value_error_when_sampling_from_a_video_of_0_frames": {
            "name": "test_raises_value_error_when_sampling_from_a_video_of_0_frames",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemporalSegmentSampler.test_oversampling_within_a_segment": {
            "name": "test_oversampling_within_a_segment",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "test_mode": []
            }
        },
        "TestTemporalSegmentSampler.test_oversampling_segments_train": {
            "name": "test_oversampling_segments_train",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemporalSegmentSampler.test_oversampling_segments_test": {
            "name": "test_oversampling_segments_test",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemporalSegmentSampler.test_sampling_when_snippets_are_longer_than_segments": {
            "name": "test_sampling_when_snippets_are_longer_than_segments",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "video_length": [],
                "segment_count": [],
                "snippet_length": [],
                "expected_idx": []
            }
        },
        "TestTemporalSegmentSampler.test_sampling_snippets_same_length_as_segments": {
            "name": "test_sampling_snippets_same_length_as_segments",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "video_length": [],
                "segment_count": [],
                "snippet_length": [],
                "expected_idx": []
            }
        },
        "TestTemporalSegmentSampler.test_sampling_in_test_mode_centres_snippets_in_segments": {
            "name": "test_sampling_in_test_mode_centres_snippets_in_segments",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "video_length": [],
                "segment_count": [],
                "snippet_length": [],
                "expected_idx": []
            }
        },
        "TestTemporalSegmentSampler.test_sampling_is_random": {
            "name": "test_sampling_is_random",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemporalSegmentSampler.test_fuzz_sampler_training": {
            "name": "test_fuzz_sampler_training",
            "location": 126,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TestTemporalSegmentSampler.test_fuzz_sampler_test": {
            "name": "test_fuzz_sampler_test",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TestTemporalSegmentSampler.test_repr": {
            "name": "test_repr",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemporalSegmentSampler.test_str": {
            "name": "test_str",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemporalSegmentSampler.test_segment_length_should_be_greater_than_0": {
            "name": "test_segment_length_should_be_greater_than_0",
            "location": 157,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemporalSegmentSampler.test_segment_count_should_be_greater_than_0": {
            "name": "test_segment_count_should_be_greater_than_0",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTemporalSegmentSampler.sample": {
            "name": "sample",
            "location": 165,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "video_length": [],
                "segment_count": [],
                "snippet_length": [],
                "test": []
            }
        },
        "TestTemporalSegmentSampler.draw_sampler_parameters": {
            "name": "draw_sampler_parameters",
            "location": 171,
            "return": [
                "Tuple[(Any, Any, Any)]"
            ],
            "arguments": {
                "data": []
            }
        }
    },
    "torchvideo-master/tests/unit/samplers/__init__.py": {},
    "torchvideo-master/tests/unit/tools/test_show_video.py": {
        "TestShowVideo.test_raises_error_if_moviepy_not_available": {
            "name": "test_raises_error_if_moviepy_not_available",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShowVideo.test_uses_ipython_display_if_ipython_is_available": {
            "name": "test_uses_ipython_display_if_ipython_is_available",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": []
            }
        },
        "TestShowVideo.test_fallsback_on_pygame_display": {
            "name": "test_fallsback_on_pygame_display",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "monkeypatch": []
            }
        }
    },
    "torchvideo-master/tests/unit/tools/test_to_list_of_np_frames.py": {
        "TestToListOfNpFrames.test_from_ndarray_cthw": {
            "name": "test_from_ndarray_cthw",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToListOfNpFrames.test_from_ndarray_thwc": {
            "name": "test_from_ndarray_thwc",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToListOfNpFrames.test_from_tensor_with_range_0_1": {
            "name": "test_from_tensor_with_range_0_1",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToListOfNpFrames.test_from_list_of_pil_images": {
            "name": "test_from_list_of_pil_images",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToListOfNpFrames.test_raises_error_on_ndarray_formats_other_than_cthw_or_thwc": {
            "name": "test_raises_error_on_ndarray_formats_other_than_cthw_or_thwc",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestToListOfNpFrames.test_raises_error_on_unknown_format": {
            "name": "test_raises_error_on_unknown_format",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "torchvideo-master/tests/unit/tools/__init__.py": {},
    "torchvideo-master/tests/unit/transforms/assertions.py": {
        "assert_preserves_label": {
            "name": "assert_preserves_label",
            "location": 1,
            "return": [
                "None"
            ],
            "arguments": {
                "transform": [],
                "video": []
            }
        }
    },
    "torchvideo-master/tests/unit/transforms/test_center_crop_video.py": {
        "TestCenterCropVideo.test_repr": {
            "name": "test_repr",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCenterCropVideo.test_crop": {
            "name": "test_crop",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "video": []
            }
        },
        "TestCenterCropVideo.test_propagates_label_unchanged": {
            "name": "test_propagates_label_unchanged",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "torchvideo-master/tests/unit/transforms/test_collect_frames.py": {
        "TestCollectFrames.test_repr": {
            "name": "test_repr",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCollectFrames.test_collect_frames_make_list_from_iterator": {
            "name": "test_collect_frames_make_list_from_iterator",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "video": []
            }
        },
        "TestCollectFrames.test_propagates_label_unchanged": {
            "name": "test_propagates_label_unchanged",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "torchvideo-master/tests/unit/transforms/test_compose.py": {
        "TestCompose.test_calls_frames_only_transforms_sequentially": {
            "name": "test_calls_frames_only_transforms_sequentially",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose.test_passes_target_to_supporting_transforms": {
            "name": "test_passes_target_to_supporting_transforms",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose.test_raises_error_if_target_is_not_passed_when_a_transform_requires_target": {
            "name": "test_raises_error_if_target_is_not_passed_when_a_transform_requires_target",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose.test_single_level_repr": {
            "name": "test_single_level_repr",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose.test_nested_repr": {
            "name": "test_nested_repr",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCompose.gen_transforms": {
            "name": "gen_transforms",
            "location": 73,
            "return": [
                "Tuple[(List[tests.unit.mock_transforms.MockFramesOnlyTransform], List[str])]"
            ],
            "arguments": {
                "self": [],
                "count": []
            }
        },
        "TestCompose.make_result_class": {
            "name": "make_result_class",
            "location": 83,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "result_class_name": []
            }
        }
    },
    "torchvideo-master/tests/unit/transforms/test_identity_transform.py": {
        "TestIdentityTransform.test_identity_transform_preserves_frames": {
            "name": "test_identity_transform_preserves_frames",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIdentityTransform.test_propagates_label_unchanged": {
            "name": "test_propagates_label_unchanged",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestIdentityTransform.test_repr": {
            "name": "test_repr",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "torchvideo-master/tests/unit/transforms/test_imports.py": {
        "TestTransformImports.test_importing_center_crop": {
            "name": "test_importing_center_crop",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransformImports.test_importing_collect_frames": {
            "name": "test_importing_collect_frames",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransformImports.test_importing_compose": {
            "name": "test_importing_compose",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransformImports.test_importing_multiscale_crop_video": {
            "name": "test_importing_multiscale_crop_video",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransformImports.test_importing_ndarray_to_pil_video": {
            "name": "test_importing_ndarray_to_pil_video",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransformImports.test_importing_normalize_video": {
            "name": "test_importing_normalize_video",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransformImports.test_importing_pil_video_to_tensor": {
            "name": "test_importing_pil_video_to_tensor",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransformImports.test_importing_random_crop_video": {
            "name": "test_importing_random_crop_video",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransformImports.test_importing_random_horizontal_flip_video": {
            "name": "test_importing_random_horizontal_flip_video",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransformImports.test_importing_resize_video": {
            "name": "test_importing_resize_video",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransformImports.test_importing_time_apply": {
            "name": "test_importing_time_apply",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransformImports.test_importing_time_to_channel": {
            "name": "test_importing_time_to_channel",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransformImports.test_importing_random_resized_crop_video": {
            "name": "test_importing_random_resized_crop_video",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "torchvideo-master/tests/unit/transforms/test_multiscale_crop_video.py": {
        "TestMultiScaleCropVideo.test_transform_always_yields_crops_of_the_correct_size": {
            "name": "test_transform_always_yields_crops_of_the_correct_size",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TestMultiScaleCropVideo.test_repr": {
            "name": "test_repr",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMultiScaleCropVideo.test_propagates_label_unchanged": {
            "name": "test_propagates_label_unchanged",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "torchvideo-master/tests/unit/transforms/test_ndarray_to_pil_video.py": {
        "TestNDArrayToPILVideo.test_repr": {
            "name": "test_repr",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNDArrayToPILVideo.test_converts_thwc_to_PIL_video": {
            "name": "test_converts_thwc_to_PIL_video",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "shape": []
            }
        },
        "TestNDArrayToPILVideo.test_converts_cthw_to_PIL_video": {
            "name": "test_converts_cthw_to_PIL_video",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "shape": []
            }
        },
        "TestNDArrayToPILVideo.test_only_thwc_and_cthw_are_valid_formats": {
            "name": "test_only_thwc_and_cthw_are_valid_formats",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNDArrayToPILVideo.test_propagates_label_unchanged": {
            "name": "test_propagates_label_unchanged",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNDArrayToPILVideo.make_uint8_ndarray": {
            "name": "make_uint8_ndarray",
            "location": 63,
            "return": [
                "Any"
            ],
            "arguments": {
                "shape": []
            }
        }
    },
    "torchvideo-master/tests/unit/transforms/test_normalize_video.py": {
        "TestNormalizeVideo.test_repr": {
            "name": "test_repr",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNormalizeVideo.test_scalar_statistics_smoke": {
            "name": "test_scalar_statistics_smoke",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "video": []
            }
        },
        "TestNormalizeVideo.test_vector_statistics_smoke": {
            "name": "test_vector_statistics_smoke",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "video": []
            }
        },
        "TestNormalizeVideo.test_raises_value_error_on_0_std": {
            "name": "test_raises_value_error_on_0_std",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNormalizeVideo.test_raises_value_error_on_0_element_in_std_vector": {
            "name": "test_raises_value_error_on_0_element_in_std_vector",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNormalizeVideo.test_raises_value_error_when_length_of_std_and_mean_dont_match": {
            "name": "test_raises_value_error_when_length_of_std_and_mean_dont_match",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNormalizeVideo.test_raises_value_error_when_length_of_mean_is_not_equal_to_channel_count": {
            "name": "test_raises_value_error_when_length_of_mean_is_not_equal_to_channel_count",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNormalizeVideo.test_transform_inplace": {
            "name": "test_transform_inplace",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNormalizeVideo.test_transform_not_inplace": {
            "name": "test_transform_not_inplace",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNormalizeVideo.test_distribution_is_normal_after_transform": {
            "name": "test_distribution_is_normal_after_transform",
            "location": 66,
            "return": [],
            "arguments": {
                "self": [],
                "ndim": [],
                "data": []
            }
        },
        "TestNormalizeVideo.test_preserves_channel_count": {
            "name": "test_preserves_channel_count",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "TestNormalizeVideo.test_propagates_label_unchanged": {
            "name": "test_propagates_label_unchanged",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNormalizeVideo.test_distribution_is_normal_after_transform.samples_from_standard_normal": {
            "name": "samples_from_standard_normal",
            "location": 70,
            "return": [],
            "arguments": {
                "tensor": [],
                "significance": []
            }
        },
        "TestNormalizeVideo.test_distribution_is_normal_after_transform.get_stats": {
            "name": "get_stats",
            "location": 97,
            "return": [],
            "arguments": {
                "video": [],
                "channel_dim": [],
                "channel_count": []
            }
        }
    },
    "torchvideo-master/tests/unit/transforms/test_pil_video_to_tensor.py": {
        "TestPILVideoToTensor.test_repr": {
            "name": "test_repr",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPILVideoToTensor.test_transform": {
            "name": "test_transform",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "video": []
            }
        },
        "TestPILVideoToTensor.test_rescales_between_0_and_1": {
            "name": "test_rescales_between_0_and_1",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPILVideoToTensor.test_disabled_rescale": {
            "name": "test_disabled_rescale",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPILVideoToTensor.test_raises_exception_if_ordering_isnt_tchw_or_cthw": {
            "name": "test_raises_exception_if_ordering_isnt_tchw_or_cthw",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPILVideoToTensor.test_mapping_to_tchw_ordering": {
            "name": "test_mapping_to_tchw_ordering",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPILVideoToTensor.test_mapping_to_cthw_ordering": {
            "name": "test_mapping_to_cthw_ordering",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPILVideoToTensor.test_propagates_label_unchanged": {
            "name": "test_propagates_label_unchanged",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "torchvideo-master/tests/unit/transforms/test_random_crop_video.py": {
        "TestRandomCropVideo.test_repr": {
            "name": "test_repr",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRandomCropVideo.test_crop_yields_image_of_specified_size": {
            "name": "test_crop_yields_image_of_specified_size",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "video": [],
                "pad_if_needed": []
            }
        },
        "TestRandomCropVideo.test_crop_with_user_provided_padding": {
            "name": "test_crop_with_user_provided_padding",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "video": [],
                "fill": []
            }
        },
        "TestRandomCropVideo.test_crop_with_different_padding_modes": {
            "name": "test_crop_with_different_padding_modes",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "video": [],
                "padding_mode": []
            }
        },
        "TestRandomCropVideo.test_propagates_label_unchanges": {
            "name": "test_propagates_label_unchanges",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "torchvideo-master/tests/unit/transforms/test_random_horizontal_flip_video.py": {
        "TestRandomHorizontalFlipVideo.test_repr": {
            "name": "test_repr",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRandomHorizontalFlipVideo.test_always_flip": {
            "name": "test_always_flip",
            "location": 16,
            "return": [],
            "arguments": {
                "self": [],
                "video": []
            }
        },
        "TestRandomHorizontalFlipVideo.test_never_flip": {
            "name": "test_never_flip",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "video": []
            }
        },
        "TestRandomHorizontalFlipVideo.test_propagates_label_unchanged": {
            "name": "test_propagates_label_unchanged",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "torchvideo-master/tests/unit/transforms/test_resize_video.py": {
        "TestResizeVideo.test_resizes_to_given_size": {
            "name": "test_resizes_to_given_size",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "video": [],
                "interpolation": [],
                "data": []
            }
        },
        "TestResizeVideo.test_propagates_label_unchanged": {
            "name": "test_propagates_label_unchanged",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "torchvideo-master/tests/unit/transforms/test_time_apply.py": {
        "TestTimeApply.test_applies_given_transform_for_each_frame": {
            "name": "test_applies_given_transform_for_each_frame",
            "location": 12,
            "return": [],
            "arguments": {
                "self": [],
                "frames": []
            }
        },
        "TestTimeApply.test_propagates_label_unchanged": {
            "name": "test_propagates_label_unchanged",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "torchvideo-master/tests/unit/transforms/test_time_to_channel.py": {
        "prod": {
            "name": "prod",
            "location": 10,
            "return": [
                "Any"
            ],
            "arguments": {
                "seq": []
            }
        },
        "TestTimeToChannel.test_repr": {
            "name": "test_repr",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeToChannel.test_reshaping": {
            "name": "test_reshaping",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTimeToChannel.test_raises_value_error_if_tensor_is_not_4d": {
            "name": "test_raises_value_error_if_tensor_is_not_4d",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "ndim": []
            }
        },
        "TestTimeToChannel.test_element_count_is_preserved": {
            "name": "test_element_count_is_preserved",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "frames": []
            }
        },
        "TestTimeToChannel.test_first_dim_is_always_larger": {
            "name": "test_first_dim_is_always_larger",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "frames": []
            }
        },
        "TestTimeToChannel.test_propagates_label_unchanged": {
            "name": "test_propagates_label_unchanged",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "torchvideo-master/tests/unit/transforms/tset_random_resized_crop_video.py": {
        "TestRandomResizedCropVideo.test_resulting_video_are_specified_size": {
            "name": "test_resulting_video_are_specified_size",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "video": [],
                "interpolation": [],
                "data": []
            }
        },
        "TestRandomResizedCropVideo.test_propagates_label_unchanged": {
            "name": "test_propagates_label_unchanged",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "torchvideo-master/tests/unit/transforms/__init__.py": {}
}
{
    "touchstone-master/setup.py": {
        "find_version": {
            "name": "find_version",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "touchstone-master/src/touchstone/bindings.py": {
        "is_builtin": {
            "name": "is_builtin",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "abstract": [
                    "Hashable"
                ]
            }
        },
        "is_typing": {
            "name": "is_typing",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "abstract": [
                    "Hashable"
                ]
            }
        },
        "is_typing_classvar": {
            "name": "is_typing_classvar",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "obj": []
            }
        },
        "AnnotationHint.has_default_value": {
            "name": "has_default_value",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractBinding.is_contextual": {
            "name": "is_contextual",
            "location": 54,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractBinding.__hash__": {
            "name": "__hash__",
            "location": 58,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractBinding.make": {
            "name": "make",
            "location": 61,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "fulfilled_params": [
                    "Dict[(str, Any)]"
                ]
            }
        },
        "AbstractBinding.get_concrete_params": {
            "name": "get_concrete_params",
            "location": 64,
            "return": [
                "Dict[(str, AnnotationHint)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractBinding.get_concrete_attrs": {
            "name": "get_concrete_attrs",
            "location": 75,
            "return": [
                "Dict[(str, AnnotationHint)]"
            ],
            "arguments": {
                "self": [],
                "instance": []
            }
        },
        "AbstractBinding._is_needed_attr": {
            "name": "_is_needed_attr",
            "location": 95,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "str"
                ],
                "annotation": [
                    "Hashable"
                ]
            }
        },
        "SimpleBinding.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "abstract": [
                    "Hashable"
                ],
                "concrete": [
                    "Callable"
                ],
                "lifetime_strategy": [
                    "str"
                ]
            }
        },
        "SimpleBinding.is_contextual": {
            "name": "is_contextual",
            "location": 113,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleBinding.__hash__": {
            "name": "__hash__",
            "location": 116,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoBinding.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "abstract": [
                    "Hashable"
                ]
            }
        },
        "AutoBinding.is_contextual": {
            "name": "is_contextual",
            "location": 135,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AutoBinding.__hash__": {
            "name": "__hash__",
            "location": 138,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextualBinding.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "abstract": [
                    "Optional[Hashable]"
                ],
                "concrete": [
                    "Callable"
                ],
                "lifetime_strategy": [
                    "str"
                ],
                "parent": [
                    "Callable"
                ],
                "parent_name": [
                    "Optional[str]"
                ]
            }
        },
        "ContextualBinding.is_contextual": {
            "name": "is_contextual",
            "location": 159,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextualBinding.__hash__": {
            "name": "__hash__",
            "location": 162,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BindingResolver.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BindingResolver.bind": {
            "name": "bind",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "abstract": [
                    "Hashable"
                ],
                "concrete": [
                    "Callable"
                ],
                "lifetime_strategy": [
                    "str"
                ]
            }
        },
        "BindingResolver.bind_contextual": {
            "name": "bind_contextual",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BindingResolver.resolve_binding": {
            "name": "resolve_binding",
            "location": 217,
            "return": [
                "Union[(AutoBinding, ContextualBinding, SimpleBinding)]"
            ],
            "arguments": {
                "self": [],
                "abstract": [
                    "Hashable"
                ],
                "parent": [
                    "Optional[Callable]"
                ],
                "name": [
                    "Optional[str]"
                ],
                "default_value": []
            }
        },
        "BindingResolver.make_auto_binding": {
            "name": "make_auto_binding",
            "location": 238,
            "return": [
                "Union[(AutoBinding, ContextualBinding, SimpleBinding)]"
            ],
            "arguments": {
                "self": [],
                "abstract": [
                    "Hashable"
                ],
                "name": [
                    "Optional[str]"
                ],
                "parent": [
                    "Optional[Callable]"
                ]
            }
        },
        "BindingResolver._resolve_default_value_binding": {
            "name": "_resolve_default_value_binding",
            "location": 251,
            "return": [
                "Optional[Union[(AutoBinding, ContextualBinding, SimpleBinding)]]"
            ],
            "arguments": {
                "self": [],
                "abstract": [
                    "Hashable"
                ],
                "parent": [
                    "Callable"
                ],
                "name": [
                    "Optional[str]"
                ],
                "default_value": []
            }
        },
        "BindingResolver._resolve_contextual_binding": {
            "name": "_resolve_contextual_binding",
            "location": 268,
            "return": [
                "Optional[Union[(AutoBinding, ContextualBinding, SimpleBinding)]]"
            ],
            "arguments": {
                "self": [],
                "abstract": [
                    "Hashable"
                ],
                "parent": [
                    "Hashable"
                ],
                "name": [
                    "Optional[str]"
                ]
            }
        }
    },
    "touchstone-master/src/touchstone/container.py": {
        "AbstractContainer.bind": {
            "name": "bind",
            "location": 20,
            "return": [],
            "arguments": {
                "self": [],
                "abstract": [],
                "concrete": [],
                "lifetime_strategy": []
            }
        },
        "AbstractContainer.bind_instance": {
            "name": "bind_instance",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "abstract": [],
                "instance": []
            }
        },
        "AbstractContainer.bind_contextual": {
            "name": "bind_contextual",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Container.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "biding_resolver_cls": []
            }
        },
        "Container.bind": {
            "name": "bind",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "abstract": [],
                "concrete": [],
                "lifetime_strategy": []
            }
        },
        "Container.bind_instance": {
            "name": "bind_instance",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "abstract": [],
                "instance": []
            }
        },
        "Container.bind_contextual": {
            "name": "bind_contextual",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Container.make": {
            "name": "make",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "abstract": [],
                "init_kwargs": []
            }
        },
        "Container._make": {
            "name": "_make",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "abstract": [],
                "init_kwargs": [],
                "parent": [],
                "parent_name": [],
                "default_value": []
            }
        },
        "Container._resolve_params": {
            "name": "_resolve_params",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "binding": [],
                "init_kwargs": []
            }
        },
        "Container._resolve_attrs": {
            "name": "_resolve_attrs",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "instance": [],
                "binding": [],
                "init_kwargs": [],
                "resolved_params": []
            }
        }
    },
    "touchstone-master/src/touchstone/exceptions.py": {},
    "touchstone-master/src/touchstone/version.py": {},
    "touchstone-master/src/touchstone/__init__.py": {},
    "touchstone-master/src/touchstone/django/celery_task.py": {
        "touchstone_task": {
            "name": "touchstone_task",
            "location": 8,
            "return": [
                "type"
            ],
            "arguments": {
                "task_cls": [
                    "type"
                ]
            }
        },
        "touchstone_task._Task.run": {
            "name": "run",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "touchstone-master/src/touchstone/django/middleware.py": {
        "InjectViewsMiddleware.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "get_response": [
                    "Callable"
                ]
            }
        },
        "InjectViewsMiddleware.__call__": {
            "name": "__call__",
            "location": 11,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "InjectViewsMiddleware.process_view": {
            "name": "process_view",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "view_func": [],
                "view_args": [
                    "Sequence"
                ],
                "view_kwargs": [
                    "Mapping[(str, Any)]"
                ]
            }
        }
    },
    "touchstone-master/src/touchstone/django/properties.py": {
        "get_container": {
            "name": "get_container",
            "location": 9,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "inject_magic_properties": {
            "name": "inject_magic_properties",
            "location": 69,
            "return": [
                "TInjectedClass"
            ],
            "arguments": {
                "concrete": [
                    "TInjectedClass"
                ]
            }
        },
        "MagicProperty.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "abstract": [
                    "Hashable"
                ],
                "default_value": []
            }
        },
        "MagicProperty.__set_name__": {
            "name": "__set_name__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "type"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "MagicProperty.__get__": {
            "name": "__get__",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "object"
                ],
                "cls": [
                    "Optional[type]"
                ]
            }
        },
        "MagicProperty._make": {
            "name": "_make",
            "location": 53,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "touchstone-master/src/touchstone/django/__init__.py": {},
    "touchstone-master/tests/django_settings.py": {},
    "touchstone-master/tests/test_bindings.py": {
        "ClassWithoutDefaults.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "foo": [
                    "dict"
                ]
            }
        },
        "ClassWithDefaults.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "foo": [
                    "dict"
                ]
            }
        },
        "MyBinding.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cls": []
            }
        },
        "MyBinding.is_contextual": {
            "name": "is_contextual",
            "location": 36,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyBinding.__hash__": {
            "name": "__hash__",
            "location": 39,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractBinding.test_make": {
            "name": "test_make",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractBinding.test_get_concrete_params": {
            "name": "test_get_concrete_params",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractBinding.test_get_concrete_attrs": {
            "name": "test_get_concrete_attrs",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractBinding.test_get_concrete_params_with_defaults": {
            "name": "test_get_concrete_params_with_defaults",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractBinding.test_get_concrete_attrs_with_defaults": {
            "name": "test_get_concrete_attrs_with_defaults",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractBinding.test_get_concrete_attrs_with_return_annotation": {
            "name": "test_get_concrete_attrs_with_return_annotation",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBindingResolver.test_auto_binding": {
            "name": "test_auto_binding",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBindingResolver.test_simple_binding": {
            "name": "test_simple_binding",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBindingResolver.test_simple_binding_singleton": {
            "name": "test_simple_binding_singleton",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBindingResolver.test_contextual_binding_full": {
            "name": "test_contextual_binding_full",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBindingResolver.test_contextual_binding_just_cls": {
            "name": "test_contextual_binding_just_cls",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBindingResolver.test_contextual_binding_just_name": {
            "name": "test_contextual_binding_just_name",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBindingResolver.test_contextual_binding_singleton": {
            "name": "test_contextual_binding_singleton",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBindingResolver.test_default_value_binding": {
            "name": "test_default_value_binding",
            "location": 240,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAbstractBinding.test_get_concrete_attrs_with_return_annotation.maker": {
            "name": "maker",
            "location": 89,
            "return": [],
            "arguments": {}
        },
        "TestBindingResolver.test_contextual_binding_full.Thing.__init__": {
            "name": "__init__",
            "location": 152,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "TestBindingResolver.test_contextual_binding_just_cls.Thing.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "TestBindingResolver.test_contextual_binding_just_name.Thing.__init__": {
            "name": "__init__",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "TestBindingResolver.test_contextual_binding_singleton.Thing.__init__": {
            "name": "__init__",
            "location": 223,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "TestBindingResolver.test_default_value_binding.Thing.__init__": {
            "name": "__init__",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        }
    },
    "touchstone-master/tests/test_container.py": {
        "assert_raises": {
            "name": "assert_raises",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "exc_type": [],
                "match": []
            }
        },
        "TestContainer.test_make_simple_autowiring_with_concrete_annotations": {
            "name": "test_make_simple_autowiring_with_concrete_annotations",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_simple_autowiring_with_abstract_annotations": {
            "name": "test_make_simple_autowiring_with_abstract_annotations",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_simple_autowiring_with_factory_method_annotations": {
            "name": "test_make_simple_autowiring_with_factory_method_annotations",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_string_argument_works": {
            "name": "test_make_string_argument_works",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_raises_if_not_concrete": {
            "name": "test_make_raises_if_not_concrete",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_string_argument_in_subrequirement": {
            "name": "test_make_string_argument_in_subrequirement",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_is_not_caching_instances": {
            "name": "test_make_is_not_caching_instances",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_passes_kwargs": {
            "name": "test_make_passes_kwargs",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_with_singletons": {
            "name": "test_make_with_singletons",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_will_inject_container": {
            "name": "test_make_will_inject_container",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_supports_contextual_binding": {
            "name": "test_make_supports_contextual_binding",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_supports_contextual_binding_with_varname": {
            "name": "test_make_supports_contextual_binding_with_varname",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_supports_contextual_binding_with_only_varname": {
            "name": "test_make_supports_contextual_binding_with_only_varname",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_does_not_create_builtin_types": {
            "name": "test_make_does_not_create_builtin_types",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "typ": []
            }
        },
        "TestContainer.test_make_does_not_create_typing_hints": {
            "name": "test_make_does_not_create_typing_hints",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "typ": []
            }
        },
        "TestContainer.test_make_contextual_with_builtin_type": {
            "name": "test_make_contextual_with_builtin_type",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_does_not_support_varname_only_binding_if_annotations_used": {
            "name": "test_make_does_not_support_varname_only_binding_if_annotations_used",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_bind_contextual_needs_either_varname_or_needs_arg": {
            "name": "test_bind_contextual_needs_either_varname_or_needs_arg",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_contextual_bindings_does_not_override_global_singleton": {
            "name": "test_contextual_bindings_does_not_override_global_singleton",
            "location": 270,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_contextual_bindings_singleton": {
            "name": "test_contextual_bindings_singleton",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_supports_dataclasses": {
            "name": "test_make_supports_dataclasses",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_does_not_auto_create_namedtuple": {
            "name": "test_make_does_not_auto_create_namedtuple",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_raises_if_no_annotation": {
            "name": "test_make_raises_if_no_annotation",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_handles_None_annotation": {
            "name": "test_make_handles_None_annotation",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_supports_namedtuple_contextual_binding": {
            "name": "test_make_supports_namedtuple_contextual_binding",
            "location": 357,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_does_not_save_singleton_if_explicit_init_kwargs_set": {
            "name": "test_make_does_not_save_singleton_if_explicit_init_kwargs_set",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_raises_if_given_invalid_explicit_kwargs": {
            "name": "test_make_raises_if_given_invalid_explicit_kwargs",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_caching_fibonacci": {
            "name": "test_make_caching_fibonacci",
            "location": 393,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_injects_class_annotations": {
            "name": "test_make_injects_class_annotations",
            "location": 447,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_does_not_inject_class_annotations_if_hinted_in_init": {
            "name": "test_make_does_not_inject_class_annotations_if_hinted_in_init",
            "location": 458,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_does_not_inject_class_annotations_if_set_on_class": {
            "name": "test_make_does_not_inject_class_annotations_if_set_on_class",
            "location": 475,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_does_not_inject_class_annotations_if_hinted_as_classvar": {
            "name": "test_make_does_not_inject_class_annotations_if_hinted_as_classvar",
            "location": 489,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_init_kwargs_also_apply_to_attrs": {
            "name": "test_make_init_kwargs_also_apply_to_attrs",
            "location": 501,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_init_kwargs_params_used_before_attr": {
            "name": "test_make_init_kwargs_params_used_before_attr",
            "location": 514,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_optional_attr_injection": {
            "name": "test_make_optional_attr_injection",
            "location": 529,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_optional_attr_default_prioritized_over_explicit_binding": {
            "name": "test_make_optional_attr_default_prioritized_over_explicit_binding",
            "location": 545,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_optional_attr_contextual_binding_prioritized_over_default": {
            "name": "test_make_optional_attr_contextual_binding_prioritized_over_default",
            "location": 564,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_optional_param_injection": {
            "name": "test_make_optional_param_injection",
            "location": 583,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_optional_param_injection_default_prioritized_over_explicit_binding": {
            "name": "test_make_optional_param_injection_default_prioritized_over_explicit_binding",
            "location": 597,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_optional_param_contextual_binding_prioritized_over_default": {
            "name": "test_make_optional_param_contextual_binding_prioritized_over_default",
            "location": 614,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_binding_to_method_with_return_annotation": {
            "name": "test_binding_to_method_with_return_annotation",
            "location": 631,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_simple_autowiring_with_factory_method_annotations.make_x": {
            "name": "make_x",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "TestContainer.test_make_string_argument_works.make_n": {
            "name": "make_n",
            "location": 72,
            "return": [],
            "arguments": {}
        },
        "TestContainer.test_make_string_argument_in_subrequirement.make_n": {
            "name": "make_n",
            "location": 94,
            "return": [],
            "arguments": {}
        },
        "TestContainer.test_make_will_inject_container.returns_arg": {
            "name": "returns_arg",
            "location": 130,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "TestContainer.test_binding_to_method_with_return_annotation.make_foo": {
            "name": "make_foo",
            "location": 642,
            "return": [],
            "arguments": {}
        },
        "TestContainer.test_make_simple_autowiring_with_concrete_annotations.Y.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "TestContainer.test_make_simple_autowiring_with_abstract_annotations.Y.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "TestContainer.test_make_simple_autowiring_with_factory_method_annotations.Y.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "TestContainer.test_make_raises_if_not_concrete.X.foo": {
            "name": "foo",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_string_argument_in_subrequirement.X.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "TestContainer.test_make_passes_kwargs.X.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "foo": []
            }
        },
        "TestContainer.test_make_supports_contextual_binding.X.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "foo": []
            }
        },
        "TestContainer.test_make_supports_contextual_binding.Y1.__init__": {
            "name": "__init__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "TestContainer.test_make_supports_contextual_binding.Y2.__init__": {
            "name": "__init__",
            "location": 147,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "TestContainer.test_make_supports_contextual_binding_with_varname.X.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [],
            "arguments": {
                "self": [],
                "foo": []
            }
        },
        "TestContainer.test_make_supports_contextual_binding_with_varname.Y.__init__": {
            "name": "__init__",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "x1": [],
                "x2": []
            }
        },
        "TestContainer.test_make_supports_contextual_binding_with_only_varname.X.__init__": {
            "name": "__init__",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "foo": []
            }
        },
        "TestContainer.test_make_supports_contextual_binding_with_only_varname.Y.__init__": {
            "name": "__init__",
            "location": 183,
            "return": [],
            "arguments": {
                "self": [],
                "x1": [],
                "x2": []
            }
        },
        "TestContainer.test_make_contextual_with_builtin_type.X.__init__": {
            "name": "__init__",
            "location": 240,
            "return": [],
            "arguments": {
                "self": [],
                "foo": []
            }
        },
        "TestContainer.test_make_does_not_support_varname_only_binding_if_annotations_used.X.__init__": {
            "name": "__init__",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "foo": []
            }
        },
        "TestContainer.test_make_does_not_support_varname_only_binding_if_annotations_used.Y.__init__": {
            "name": "__init__",
            "location": 254,
            "return": [],
            "arguments": {
                "self": [],
                "x1": [],
                "x2": []
            }
        },
        "TestContainer.test_contextual_bindings_does_not_override_global_singleton.Y.__init__": {
            "name": "__init__",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "TestContainer.test_contextual_bindings_singleton.Y.__init__": {
            "name": "__init__",
            "location": 295,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "TestContainer.test_make_raises_if_no_annotation.X.__init__": {
            "name": "__init__",
            "location": 341,
            "return": [],
            "arguments": {
                "self": [],
                "foo": []
            }
        },
        "TestContainer.test_make_handles_None_annotation.X.__init__": {
            "name": "__init__",
            "location": 350,
            "return": [],
            "arguments": {
                "self": [],
                "foo": []
            }
        },
        "TestContainer.test_make_does_not_save_singleton_if_explicit_init_kwargs_set.X.__init__": {
            "name": "__init__",
            "location": 370,
            "return": [],
            "arguments": {
                "self": [],
                "foo": []
            }
        },
        "TestContainer.test_make_raises_if_given_invalid_explicit_kwargs.X.__init__": {
            "name": "__init__",
            "location": 386,
            "return": [],
            "arguments": {
                "self": [],
                "foo": []
            }
        },
        "TestContainer.test_make_caching_fibonacci.KeyValueDatabase.get": {
            "name": "get",
            "location": 398,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "TestContainer.test_make_caching_fibonacci.KeyValueDatabase.has": {
            "name": "has",
            "location": 402,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "TestContainer.test_make_caching_fibonacci.KeyValueDatabase.set": {
            "name": "set",
            "location": 406,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "TestContainer.test_make_caching_fibonacci.MemoryStore.__init__": {
            "name": "__init__",
            "location": 410,
            "return": [],
            "arguments": {
                "self": [],
                "initial_data": []
            }
        },
        "TestContainer.test_make_caching_fibonacci.MemoryStore.set": {
            "name": "set",
            "location": 413,
            "return": [],
            "arguments": {
                "self": [],
                "key": [],
                "value": []
            }
        },
        "TestContainer.test_make_caching_fibonacci.MemoryStore.has": {
            "name": "has",
            "location": 416,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "TestContainer.test_make_caching_fibonacci.MemoryStore.get": {
            "name": "get",
            "location": 419,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "TestContainer.test_make_caching_fibonacci.CachingFibonacci.__init__": {
            "name": "__init__",
            "location": 423,
            "return": [],
            "arguments": {
                "self": [],
                "cache": []
            }
        },
        "TestContainer.test_make_caching_fibonacci.CachingFibonacci.calculate": {
            "name": "calculate",
            "location": 426,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "TestContainer.test_make_does_not_inject_class_annotations_if_hinted_in_init.Y.__init__": {
            "name": "__init__",
            "location": 468,
            "return": [],
            "arguments": {
                "self": [],
                "foo": []
            }
        },
        "TestContainer.test_make_init_kwargs_params_used_before_attr.Y.__init__": {
            "name": "__init__",
            "location": 521,
            "return": [],
            "arguments": {
                "self": [],
                "foo": []
            }
        },
        "TestContainer.test_make_optional_attr_injection.Y.__init__": {
            "name": "__init__",
            "location": 538,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_optional_attr_default_prioritized_over_explicit_binding.Y.__init__": {
            "name": "__init__",
            "location": 554,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_optional_attr_contextual_binding_prioritized_over_default.Y.__init__": {
            "name": "__init__",
            "location": 573,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestContainer.test_make_optional_param_injection.Y.__init__": {
            "name": "__init__",
            "location": 590,
            "return": [],
            "arguments": {
                "self": [],
                "foo": []
            }
        },
        "TestContainer.test_make_optional_param_injection_default_prioritized_over_explicit_binding.Y.__init__": {
            "name": "__init__",
            "location": 604,
            "return": [],
            "arguments": {
                "self": [],
                "foo": []
            }
        },
        "TestContainer.test_make_optional_param_contextual_binding_prioritized_over_default.Y.__init__": {
            "name": "__init__",
            "location": 621,
            "return": [],
            "arguments": {
                "self": [],
                "foo": []
            }
        },
        "TestContainer.test_binding_to_method_with_return_annotation.MyCls.__init__": {
            "name": "__init__",
            "location": 639,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        }
    },
    "touchstone-master/tests/__init__.py": {},
    "touchstone-master/tests/django/test_celery_task.py": {
        "TestTouchstoneTask.test_touchstone_task": {
            "name": "test_touchstone_task",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mock_container": [],
                "mock_container_celery": []
            }
        }
    },
    "touchstone-master/tests/django/test_middleware.py": {
        "DjangoView.get": {
            "name": "get",
            "location": 20,
            "return": [
                "MyAbc"
            ],
            "arguments": {
                "self": []
            }
        },
        "DRFViewSet.retrieve": {
            "name": "retrieve",
            "location": 27,
            "return": [
                "MyAbc"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInjectViewsMiddleware.test_process_view_django_style": {
            "name": "test_process_view_django_style",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInjectViewsMiddleware.test_process_view_drf_style": {
            "name": "test_process_view_drf_style",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "touchstone-master/tests/django/test_properties.py": {
        "TestInjectMagicProperties.test_inject_magic_properties_uses_get_container": {
            "name": "test_inject_magic_properties_uses_get_container",
            "location": 18,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInjectMagicProperties.test_inject_magic_properties_properties_are_cached_per_instance": {
            "name": "test_inject_magic_properties_properties_are_cached_per_instance",
            "location": 33,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInjectMagicProperties.test_inject_magic_properties_two_injected_properties": {
            "name": "test_inject_magic_properties_two_injected_properties",
            "location": 51,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestInjectMagicProperties.test_inject_magic_properties_uses_late_retrieval_of_container": {
            "name": "test_inject_magic_properties_uses_late_retrieval_of_container",
            "location": 70,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMagicProperty.test_as_standard_descriptor": {
            "name": "test_as_standard_descriptor",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "mock_get_container": []
            }
        },
        "TestMagicProperty.test__get__raises_if_not_assigned_name": {
            "name": "test__get__raises_if_not_assigned_name",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMagicProperty.test__get__uses_container_to_make": {
            "name": "test__get__uses_container_to_make",
            "location": 107,
            "return": [],
            "arguments": {
                "self": [],
                "mock_get_container": []
            }
        },
        "TestMagicProperty.test__get__result_is_cached_per_instance": {
            "name": "test__get__result_is_cached_per_instance",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "mock_get_container": []
            }
        },
        "TestMagicProperty.test__get__result_is_not_cached_per_type": {
            "name": "test__get__result_is_not_cached_per_type",
            "location": 140,
            "return": [],
            "arguments": {
                "self": [],
                "mock_get_container": []
            }
        },
        "TestMagicProperty.test__set_name__sets_name": {
            "name": "test__set_name__sets_name",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMagicProperty.test__set_name__calling_twice_with_same_name_is_ok": {
            "name": "test__set_name__calling_twice_with_same_name_is_ok",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMagicProperty.test__set_name__raises_if_name_mismatch": {
            "name": "test__set_name__raises_if_name_mismatch",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "touchstone-master/tests/django/__init__.py": {}
}
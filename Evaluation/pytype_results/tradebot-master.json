{
    "tradebot-master/trade/arguments.py": {
        "Arguments.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "args": [],
                "description": []
            }
        },
        "Arguments._load_args": {
            "name": "_load_args",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arguments.get_parsed_arg": {
            "name": "get_parsed_arg",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arguments.parse_args": {
            "name": "parse_args",
            "location": 46,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arguments.common_args_parser": {
            "name": "common_args_parser",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arguments.backtesting_options": {
            "name": "backtesting_options",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "Arguments.edge_options": {
            "name": "edge_options",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "Arguments.optimizer_shared_options": {
            "name": "optimizer_shared_options",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "Arguments.hyperopt_options": {
            "name": "hyperopt_options",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "parser": []
            }
        },
        "Arguments._build_subcommands": {
            "name": "_build_subcommands",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arguments.parse_timerange": {
            "name": "parse_timerange",
            "location": 293,
            "return": [
                "Any"
            ],
            "arguments": {
                "text": []
            }
        },
        "Arguments.scripts_options": {
            "name": "scripts_options",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arguments.testdata_dl_options": {
            "name": "testdata_dl_options",
            "location": 344,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tradebot-master/trade/configuration.py": {
        "set_loggers": {
            "name": "set_loggers",
            "location": 16,
            "return": [],
            "arguments": {
                "log_level": []
            }
        },
        "Configuration.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "args": [],
                "runmode": []
            }
        },
        "Configuration.load_config": {
            "name": "load_config",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Configuration._load_config_file": {
            "name": "_load_config_file",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "Configuration._load_common_config": {
            "name": "_load_common_config",
            "location": 100,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "Configuration._create_datadir": {
            "name": "_create_datadir",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "datadir": []
            }
        },
        "Configuration._load_backtesting_config": {
            "name": "_load_backtesting_config",
            "location": 168,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "Configuration._load_edge_config": {
            "name": "_load_edge_config",
            "location": 236,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "Configuration._load_hyperopt_config": {
            "name": "_load_hyperopt_config",
            "location": 262,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "Configuration._validate_config": {
            "name": "_validate_config",
            "location": 285,
            "return": [],
            "arguments": {
                "self": [],
                "conf": []
            }
        },
        "Configuration.get_config": {
            "name": "get_config",
            "location": 303,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Configuration.check_exchange": {
            "name": "check_exchange",
            "location": 313,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        }
    },
    "tradebot-master/trade/constant.py": {},
    "tradebot-master/trade/indicator_helpers.py": {
        "went_up": {
            "name": "went_up",
            "location": 8,
            "return": [
                "Any"
            ],
            "arguments": {
                "series": []
            }
        },
        "went_down": {
            "name": "went_down",
            "location": 12,
            "return": [
                "Any"
            ],
            "arguments": {
                "series": []
            }
        },
        "ehlers_super_smoother": {
            "name": "ehlers_super_smoother",
            "location": 16,
            "return": [
                "Any"
            ],
            "arguments": {
                "series": [],
                "smoothing": []
            }
        },
        "fishers_inverse": {
            "name": "fishers_inverse",
            "location": 31,
            "return": [
                "Any"
            ],
            "arguments": {
                "series": [],
                "smoothing": []
            }
        }
    },
    "tradebot-master/trade/main.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "sysargv": []
            }
        }
    },
    "tradebot-master/trade/misc.py": {
        "shorten_date": {
            "name": "shorten_date",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "_date": []
            }
        },
        "datesarray_to_datetimearray": {
            "name": "datesarray_to_datetimearray",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {
                "dates": []
            }
        },
        "common_datearray": {
            "name": "common_datearray",
            "location": 38,
            "return": [
                "Any"
            ],
            "arguments": {
                "dfs": []
            }
        },
        "file_dump_json": {
            "name": "file_dump_json",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [],
                "data": [],
                "is_zip": []
            }
        },
        "json_load": {
            "name": "json_load",
            "location": 76,
            "return": [
                "Any"
            ],
            "arguments": {
                "datafile": []
            }
        },
        "file_load_json": {
            "name": "file_load_json",
            "location": 85,
            "return": [
                "Any"
            ],
            "arguments": {
                "file": []
            }
        },
        "format_ms_time": {
            "name": "format_ms_time",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "date": []
            }
        },
        "deep_merge_dicts": {
            "name": "deep_merge_dicts",
            "location": 111,
            "return": [
                "_T1@@"
            ],
            "arguments": {
                "source": [],
                "destination": [
                    "_T1@@"
                ]
            }
        }
    },
    "tradebot-master/trade/persistence.py": {
        "init": {
            "name": "init",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "config": []
            }
        },
        "has_column": {
            "name": "has_column",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "columns": [],
                "searchname": []
            }
        },
        "get_column_def": {
            "name": "get_column_def",
            "location": 63,
            "return": [
                "Union[(_T1, _T2)]"
            ],
            "arguments": {
                "columns": [],
                "column": [
                    "_T1@@"
                ],
                "default": [
                    "_T2@@"
                ]
            }
        },
        "check_migrate": {
            "name": "check_migrate",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "engine": []
            }
        },
        "cleanup": {
            "name": "cleanup",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "clean_dry_run_db": {
            "name": "clean_dry_run_db",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Trade.__repr__": {
            "name": "__repr__",
            "location": 192,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trade.adjust_stop_loss": {
            "name": "adjust_stop_loss",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "current_price": [],
                "stoploss": [],
                "initial": []
            }
        },
        "Trade.update": {
            "name": "update",
            "location": 239,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "order": []
            }
        },
        "Trade.close": {
            "name": "close",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rate": []
            }
        },
        "Trade.calc_open_trade_price": {
            "name": "calc_open_trade_price",
            "location": 284,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "fee": []
            }
        },
        "Trade.calc_close_trade_price": {
            "name": "calc_close_trade_price",
            "location": 295,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "rate": [],
                "fee": []
            }
        },
        "Trade.calc_profit": {
            "name": "calc_profit",
            "location": 312,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "rate": [],
                "fee": []
            }
        },
        "Trade.calc_profit_percent": {
            "name": "calc_profit_percent",
            "location": 329,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "rate": [],
                "fee": []
            }
        },
        "Trade.total_open_trades_stakes": {
            "name": "total_open_trades_stakes",
            "location": 346,
            "return": [
                "Any"
            ],
            "arguments": {}
        },
        "Trade.get_open_trades": {
            "name": "get_open_trades",
            "location": 357,
            "return": [
                "Any"
            ],
            "arguments": {}
        }
    },
    "tradebot-master/trade/state.py": {},
    "tradebot-master/trade/tradebot.py": {},
    "tradebot-master/trade/wallets.py": {
        "Wallets.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exchange": []
            }
        },
        "Wallets.get_free": {
            "name": "get_free",
            "location": 25,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "currency": []
            }
        },
        "Wallets.get_used": {
            "name": "get_used",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "currency": []
            }
        },
        "Wallets.get_total": {
            "name": "get_total",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "currency": []
            }
        },
        "Wallets.update": {
            "name": "update",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "tradebot-master/trade/__init__.py": {},
    "tradebot-master/trade/__main__.py": {},
    "tradebot-master/trade/data/converter.py": {
        "parse_ticker_dataframe": {
            "name": "parse_ticker_dataframe",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {
                "ticker": [],
                "ticker_interval": [],
                "fill_missing": []
            }
        },
        "ohlcv_fill_up_missing_data": {
            "name": "ohlcv_fill_up_missing_data",
            "location": 52,
            "return": [
                "Any"
            ],
            "arguments": {
                "dataframe": [],
                "ticker_interval": []
            }
        },
        "order_book_to_dataframe": {
            "name": "order_book_to_dataframe",
            "location": 80,
            "return": [
                "Any"
            ],
            "arguments": {
                "bids": [],
                "asks": []
            }
        }
    },
    "tradebot-master/trade/data/dataprovider.py": {
        "DataProvider.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [],
                "exchange": []
            }
        },
        "DataProvider.refresh": {
            "name": "refresh",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pairlist": [],
                "helping_pairs": []
            }
        },
        "DataProvider.available_pairs": {
            "name": "available_pairs",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataProvider.ohlcv": {
            "name": "ohlcv",
            "location": 50,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "pair": [],
                "tick_interval": [],
                "copy": []
            }
        },
        "DataProvider.historic_ohlcv": {
            "name": "historic_ohlcv",
            "location": 70,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "pair": [],
                "ticker_interval": []
            }
        },
        "DataProvider.ticker": {
            "name": "ticker",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pair": []
            }
        },
        "DataProvider.orderbook": {
            "name": "orderbook",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pair": [],
                "max": []
            }
        },
        "DataProvider.runmode": {
            "name": "runmode",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "tradebot-master/trade/data/history.py": {
        "trim_tickerlist": {
            "name": "trim_tickerlist",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "tickerlist": [],
                "timerange": []
            }
        },
        "load_tickerdata_file": {
            "name": "load_tickerdata_file",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "datadir": [],
                "pair": [],
                "ticker_interval": [],
                "timerange": []
            }
        },
        "load_pair_history": {
            "name": "load_pair_history",
            "location": 64,
            "return": [
                "Any"
            ],
            "arguments": {
                "pair": [],
                "ticker_interval": [],
                "datadir": [],
                "timerange": [],
                "refresh_pairs": [],
                "exchange": [],
                "fill_up_missing": []
            }
        },
        "load_data": {
            "name": "load_data",
            "location": 101,
            "return": [
                "dict"
            ],
            "arguments": {
                "datadir": [],
                "ticker_interval": [],
                "pairs": [],
                "refresh_pairs": [],
                "exchange": [],
                "timerange": [],
                "fill_up_missing": []
            }
        },
        "make_testdata_path": {
            "name": "make_testdata_path",
            "location": 122,
            "return": [
                "Union[(pathlib.Path, _T0)]"
            ],
            "arguments": {
                "datadir": [
                    "_T0@@"
                ]
            }
        },
        "load_cached_data_for_updating": {
            "name": "load_cached_data_for_updating",
            "location": 127,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "filename": [],
                "tick_interval": [],
                "timerage": []
            }
        },
        "download_pair_history": {
            "name": "download_pair_history",
            "location": 161,
            "return": [
                "bool"
            ],
            "arguments": {
                "datadir": [],
                "exchange": [],
                "pair": [],
                "tick_interval": [],
                "timerange": []
            }
        }
    },
    "tradebot-master/trade/data/__init__.py": {},
    "tradebot-master/trade/edge/__init__.py": {},
    "tradebot-master/trade/exchange/binance.py": {
        "Binance.get_order_book": {
            "name": "get_order_book",
            "location": 15,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "pair": [],
                "limit": []
            }
        }
    },
    "tradebot-master/trade/exchange/exchange.py": {
        "retrier_aync": {
            "name": "retrier_aync",
            "location": 30,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "retrier": {
            "name": "retrier",
            "location": 48,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "retrier.wrapper": {
            "name": "wrapper",
            "location": 49,
            "return": [],
            "arguments": {}
        },
        "Exchange.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "Exchange.__del__": {
            "name": "__del__",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Exchange._init_ccxt": {
            "name": "_init_ccxt",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "exchange_config": [],
                "ccxt_module": [],
                "ccxt_kwargs": []
            }
        },
        "Exchange.name": {
            "name": "name",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Exchange.id": {
            "name": "id",
            "location": 161,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Exchange.klines": {
            "name": "klines",
            "location": 165,
            "return": [],
            "arguments": {
                "self": [],
                "pair_interval": [],
                "copy": []
            }
        },
        "Exchange.set_sandbox": {
            "name": "set_sandbox",
            "location": 171,
            "return": [],
            "arguments": {
                "self": [],
                "api": [],
                "exchange_config": [],
                "name": []
            }
        },
        "Exchange._load_async_markets": {
            "name": "_load_async_markets",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Exchange._load_markets": {
            "name": "_load_markets",
            "location": 190,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Exchange.validate_pairs": {
            "name": "validate_pairs",
            "location": 200,
            "return": [],
            "arguments": {
                "self": [],
                "pairs": []
            }
        },
        "Exchange.validate_timeframes": {
            "name": "validate_timeframes",
            "location": 224,
            "return": [],
            "arguments": {
                "self": [],
                "timeframe": []
            }
        },
        "Exchange.validate_ordertypes": {
            "name": "validate_ordertypes",
            "location": 233,
            "return": [],
            "arguments": {
                "self": [],
                "order_types": []
            }
        },
        "Exchange.validate_order_time_in_force": {
            "name": "validate_order_time_in_force",
            "location": 248,
            "return": [],
            "arguments": {
                "self": [],
                "order_time_in_force": []
            }
        },
        "Exchange.exchange_has": {
            "name": "exchange_has",
            "location": 257,
            "return": [],
            "arguments": {
                "self": [],
                "endpoint": []
            }
        },
        "Exchange.symbol_amount_prec": {
            "name": "symbol_amount_prec",
            "location": 266,
            "return": [],
            "arguments": {
                "self": [],
                "pair": [],
                "amount": []
            }
        },
        "Exchange.symbol_price_prec": {
            "name": "symbol_price_prec",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "pair": [],
                "price": []
            }
        },
        "Exchange.dry_run_order": {
            "name": "dry_run_order",
            "location": 288,
            "return": [],
            "arguments": {
                "self": [],
                "pair": [],
                "ordertype": [],
                "side": [],
                "amount": [],
                "rate": [],
                "params": []
            }
        },
        "Exchange._store_dry_order": {
            "name": "_store_dry_order",
            "location": 308,
            "return": [],
            "arguments": {
                "self": [],
                "dry_order": []
            }
        },
        "Exchange.create_order": {
            "name": "create_order",
            "location": 318,
            "return": [],
            "arguments": {
                "self": [],
                "pair": [],
                "ordertype": [],
                "side": [],
                "amount": [],
                "rate": [],
                "params": []
            }
        },
        "Exchange.buy": {
            "name": "buy",
            "location": 344,
            "return": [],
            "arguments": {
                "self": [],
                "pair": [],
                "ordertype": [],
                "amount": [],
                "rate": [],
                "time_in_force": []
            }
        },
        "Exchange.sell": {
            "name": "sell",
            "location": 357,
            "return": [],
            "arguments": {
                "self": [],
                "pair": [],
                "ordertype": [],
                "amount": [],
                "rate": [],
                "time_in_force": []
            }
        },
        "Exchange.stoploss_limit": {
            "name": "stoploss_limit",
            "location": 370,
            "return": [],
            "arguments": {
                "self": [],
                "pair": [],
                "amount": [],
                "stop_price": [],
                "rate": []
            }
        },
        "Exchange.get_balance": {
            "name": "get_balance",
            "location": 399,
            "return": [],
            "arguments": {
                "self": [],
                "currency": []
            }
        },
        "Exchange.get_balances": {
            "name": "get_balances",
            "location": 412,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Exchange.get_tickers": {
            "name": "get_tickers",
            "location": 432,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Exchange.get_ticker": {
            "name": "get_ticker",
            "location": 446,
            "return": [],
            "arguments": {
                "self": [],
                "pair": [],
                "refresh": []
            }
        },
        "Exchange.get_history": {
            "name": "get_history",
            "location": 469,
            "return": [],
            "arguments": {
                "self": [],
                "pair": [],
                "tick_interval": [],
                "since_ms": []
            }
        },
        "Exchange.refresh_latest_ohlcv": {
            "name": "refresh_latest_ohlcv",
            "location": 503,
            "return": [],
            "arguments": {
                "self": [],
                "pair_list": []
            }
        },
        "Exchange._now_is_time_to_refresh": {
            "name": "_now_is_time_to_refresh",
            "location": 538,
            "return": [],
            "arguments": {
                "self": [],
                "pair": [],
                "ticker_interval": []
            }
        },
        "Exchange.cancel_order": {
            "name": "cancel_order",
            "location": 583,
            "return": [],
            "arguments": {
                "self": [],
                "order_id": [],
                "pair": []
            }
        },
        "Exchange.get_order": {
            "name": "get_order",
            "location": 599,
            "return": [],
            "arguments": {
                "self": [],
                "order_id": [],
                "pair": []
            }
        },
        "Exchange.get_order_book": {
            "name": "get_order_book",
            "location": 615,
            "return": [],
            "arguments": {
                "self": [],
                "pair": [],
                "limit": []
            }
        },
        "Exchange.get_trades_for_order": {
            "name": "get_trades_for_order",
            "location": 636,
            "return": [],
            "arguments": {
                "self": [],
                "order_id": [],
                "pair": [],
                "since": []
            }
        },
        "Exchange.get_markets": {
            "name": "get_markets",
            "location": 655,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Exchange.get_fee": {
            "name": "get_fee",
            "location": 665,
            "return": [],
            "arguments": {
                "self": [],
                "symbol": [],
                "type": [],
                "side": [],
                "amount": [],
                "price": [],
                "taker_or_maker": []
            }
        }
    },
    "tradebot-master/trade/exchange/kraken.py": {},
    "tradebot-master/trade/exchange/__init__.py": {},
    "tradebot-master/trade/optimize/backtesting.py": {},
    "tradebot-master/trade/optimize/default_hyperopt.py": {},
    "tradebot-master/trade/optimize/edge_cli.py": {},
    "tradebot-master/trade/optimize/hyperopt.py": {},
    "tradebot-master/trade/optimize/hyperopt_interface.py": {},
    "tradebot-master/trade/optimize/__init__.py": {},
    "tradebot-master/trade/pairlist/__init__.py": {}
}
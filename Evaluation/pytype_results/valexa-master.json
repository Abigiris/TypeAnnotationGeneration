{
    "valexa-master/tests/test_dataobject.py": {
        "TestDataObject.calibration_data": {
            "name": "calibration_data",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDataObject.validation_data": {
            "name": "validation_data",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDataObject.calculated_data": {
            "name": "calculated_data",
            "location": 134,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDataObject.test_object_with_calib": {
            "name": "test_object_with_calib",
            "location": 201,
            "return": [],
            "arguments": {
                "self": [],
                "validation_data": [],
                "calibration_data": []
            }
        },
        "TestDataObject.test_object_without_calib": {
            "name": "test_object_without_calib",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "validation_data": []
            }
        },
        "TestDataObject.test_create_dataobject_with_calibration": {
            "name": "test_create_dataobject_with_calibration",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_object_with_calib": []
            }
        },
        "TestDataObject.test_create_dataobject_without_calibration": {
            "name": "test_create_dataobject_without_calibration",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_object_without_calib": []
            }
        },
        "TestDataObject.test_add_calculated_value": {
            "name": "test_add_calculated_value",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "calculated_data": [],
                "test_object_with_calib": []
            }
        },
        "TestDataObject.test_get_level": {
            "name": "test_get_level",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_object_with_calib": []
            }
        },
        "TestDataObject.test_get_serie": {
            "name": "test_get_serie",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_object_with_calib": []
            }
        },
        "TestDataObject.test_data_x": {
            "name": "test_data_x",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_object_with_calib": [],
                "validation_data": [],
                "calibration_data": []
            }
        },
        "TestDataObject.test_data_x_calc": {
            "name": "test_data_x_calc",
            "location": 235,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_object_with_calib": [],
                "test_object_without_calib": [],
                "calculated_data": []
            }
        },
        "TestDataObject.test_data_y": {
            "name": "test_data_y",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_object_with_calib": [],
                "validation_data": [],
                "calibration_data": []
            }
        },
        "TestDataObject.test_list_of_series": {
            "name": "test_list_of_series",
            "location": 247,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_object_with_calib": []
            }
        },
        "TestDataObject.test_list_of_levels": {
            "name": "test_list_of_levels",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_object_with_calib": []
            }
        },
        "TestDataObject.test_add_corrected_value": {
            "name": "test_add_corrected_value",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_object_with_calib": [],
                "calculated_data": []
            }
        }
    },
    "valexa-master/tests/test_models.py": {
        "TestModelsManager.test_modelsmanager_hardcoded": {
            "name": "test_modelsmanager_hardcoded",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestModelsManager.test_data": {
            "name": "test_data",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestModelsManager.test_modelsmanager_initialize": {
            "name": "test_modelsmanager_initialize",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_modelsmanager_hardcoded": []
            }
        },
        "TestModelsManager.test_initialize_models_single": {
            "name": "test_initialize_models_single",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_modelsmanager_hardcoded": []
            }
        },
        "TestModelsManager.test_initialize_models_multiple": {
            "name": "test_initialize_models_multiple",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_modelsmanager_hardcoded": []
            }
        },
        "TestModelsManager.test_initialize_models_all": {
            "name": "test_initialize_models_all",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_modelsmanager_hardcoded": []
            }
        },
        "TestModelsManager.test_initialize_model_none": {
            "name": "test_initialize_model_none",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_modelsmanager_hardcoded": []
            }
        },
        "TestModelsManager.test_modelize": {
            "name": "test_modelize",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_modelsmanager_hardcoded": [],
                "test_data": []
            }
        },
        "TestModelsManager.test_get_available_models": {
            "name": "test_get_available_models",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_modelsmanager_hardcoded": []
            }
        },
        "TestModelsManager.test_get_model_weight": {
            "name": "test_get_model_weight",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_modelsmanager_hardcoded": []
            }
        },
        "TestModelsManager.test_get_model_formula": {
            "name": "test_get_model_formula",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_modelsmanager_hardcoded": []
            }
        },
        "TestModelsManager.test_get_model_info": {
            "name": "test_get_model_info",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_modelsmanager_hardcoded": []
            }
        },
        "TestModelsManager.test_number_of_models": {
            "name": "test_number_of_models",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "test_modelsmanager_hardcoded": []
            }
        },
        "TestModelsManager.test_initialized_models_list": {
            "name": "test_initialized_models_list",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "valexa-master/tests/test_models_list.py": {
        "TestModelsList.test_model_list_return_single_model": {
            "name": "test_model_list_return_single_model",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModelsList.test_model_list_return_all_models": {
            "name": "test_model_list_return_all_models",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModelsList.test_model_list_error": {
            "name": "test_model_list_error",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "valexa-master/tests/__init__.py": {},
    "valexa-master/valexa/dataobject.py": {
        "DataObject.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "validation_data": [],
                "calibration_data": []
            }
        },
        "DataObject.add_calculated_value": {
            "name": "add_calculated_value",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "calculated_value": []
            }
        },
        "DataObject.add_corrected_value": {
            "name": "add_corrected_value",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "corrected_value": []
            }
        },
        "DataObject.get_level": {
            "name": "get_level",
            "location": 45,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int"
                ],
                "data_type": [
                    "str"
                ]
            }
        },
        "DataObject.get_serie": {
            "name": "get_serie",
            "location": 55,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "serie": [
                    "int"
                ],
                "serie_type": [
                    "str"
                ]
            }
        },
        "DataObject.data_x_calc": {
            "name": "data_x_calc",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DataObject.data_x": {
            "name": "data_x",
            "location": 72,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "serie_type": [
                    "str"
                ]
            }
        },
        "DataObject.data_y": {
            "name": "data_y",
            "location": 80,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "serie_type": [
                    "str"
                ]
            }
        },
        "DataObject.list_of_series": {
            "name": "list_of_series",
            "location": 88,
            "return": [
                "Optional[np.ndarray]"
            ],
            "arguments": {
                "self": [],
                "serie_type": [
                    "str"
                ]
            }
        },
        "DataObject.list_of_levels": {
            "name": "list_of_levels",
            "location": 96,
            "return": [
                "Optional[np.ndarray]"
            ],
            "arguments": {
                "self": [],
                "serie_type": [
                    "str"
                ]
            }
        }
    },
    "valexa-master/valexa/models.py": {
        "ModelsManager.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "models_source": [
                    "str"
                ]
            }
        },
        "ModelsManager.initialize_models": {
            "name": "initialize_models",
            "location": 29,
            "return": [
                "_TModelsManager"
            ],
            "arguments": {
                "self": [
                    "_TModelsManager"
                ],
                "models_name": [
                    "Union[(list, str)]"
                ]
            }
        },
        "ModelsManager.modelize": {
            "name": "modelize",
            "location": 49,
            "return": [
                "Model"
            ],
            "arguments": {
                "self": [],
                "model_name": [
                    "str"
                ],
                "model_data": [
                    "valexa.dataobject.DataObject"
                ]
            }
        },
        "ModelsManager.get_available_models": {
            "name": "get_available_models",
            "location": 53,
            "return": [
                "Dict[(str, Dict[(str, str)])]"
            ],
            "arguments": {
                "models_source": [
                    "str"
                ]
            }
        },
        "ModelsManager.get_model_weight": {
            "name": "get_model_weight",
            "location": 64,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "model_name": [
                    "str"
                ]
            }
        },
        "ModelsManager.get_model_formula": {
            "name": "get_model_formula",
            "location": 71,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "model_name": [
                    "str"
                ]
            }
        },
        "ModelsManager.get_model_info": {
            "name": "get_model_info",
            "location": 78,
            "return": [
                "Optional[Dict[(str, str)]]"
            ],
            "arguments": {
                "self": [],
                "model_name": [
                    "str"
                ]
            }
        },
        "ModelsManager.number_of_models": {
            "name": "number_of_models",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelsManager.initialized_models_list": {
            "name": "initialized_models_list",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "valexa.dataobject.DataObject"
                ],
                "model_formula": [
                    "str"
                ],
                "model_weight": [
                    "str"
                ],
                "model_name": [
                    "str"
                ]
            }
        },
        "Model.__get_model_fit": {
            "name": "__get_model_fit",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "serie": []
            }
        },
        "Model.__get_model_roots": {
            "name": "__get_model_roots",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.__build_function_from_params": {
            "name": "__build_function_from_params",
            "location": 167,
            "return": [],
            "arguments": {
                "fitted_function": [],
                "serie": []
            }
        },
        "Model.get_level": {
            "name": "get_level",
            "location": 185,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int"
                ],
                "serie_type": [
                    "str"
                ]
            }
        },
        "Model.get_serie": {
            "name": "get_serie",
            "location": 190,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "serie": [
                    "int"
                ],
                "serie_type": [
                    "str"
                ]
            }
        },
        "Model.data_x_calc": {
            "name": "data_x_calc",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.data_x": {
            "name": "data_x",
            "location": 199,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "serie_type": [
                    "str"
                ]
            }
        },
        "Model.data_y": {
            "name": "data_y",
            "location": 202,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "serie_type": [
                    "str"
                ]
            }
        },
        "Model.list_of_series": {
            "name": "list_of_series",
            "location": 205,
            "return": [
                "Optional[np.ndarray]"
            ],
            "arguments": {
                "self": [],
                "serie_type": [
                    "str"
                ]
            }
        },
        "Model.list_of_levels": {
            "name": "list_of_levels",
            "location": 208,
            "return": [
                "Optional[np.ndarray]"
            ],
            "arguments": {
                "self": [],
                "serie_type": [
                    "str"
                ]
            }
        },
        "Model.validation_data": {
            "name": "validation_data",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.calibration_data": {
            "name": "calibration_data",
            "location": 216,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ModelGenerator.__init__": {
            "name": "__init__",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_name": [
                    "str"
                ],
                "model_info": [
                    "Dict[(str, str)]"
                ]
            }
        },
        "ModelGenerator.calculate_model": {
            "name": "calculate_model",
            "location": 230,
            "return": [
                "Model"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "valexa.dataobject.DataObject"
                ]
            }
        }
    },
    "valexa-master/valexa/models_list.py": {
        "model_list": {
            "name": "model_list",
            "location": 6,
            "return": [
                "Dict[(str, Optional[Union[(str, Dict[(str, Optional[str])])]])]"
            ],
            "arguments": {
                "model_name": [
                    "Optional[str]"
                ]
            }
        }
    },
    "valexa-master/valexa/profiles.py": {
        "ProfileManager.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "compound_name": [
                    "str"
                ],
                "data": [
                    "Dict[(str, Any)]"
                ],
                "tolerance_limit": [
                    "float"
                ],
                "acceptance_limit": [
                    "float"
                ],
                "absolute_acceptance": [
                    "bool"
                ],
                "quantity_units": [
                    "str"
                ],
                "rolling_data": [
                    "bool"
                ],
                "rolling_data_limit": [
                    "int"
                ],
                "model_to_test": [
                    "Union[(str, List[str])]"
                ],
                "generate_figure": [
                    "bool"
                ],
                "allow_correction": [
                    "bool"
                ],
                "correction_threshold": [
                    "Optional[List[float]]"
                ],
                "forced_correction_value": [
                    "Optional[float]"
                ],
                "correction_round_to": [
                    "int"
                ],
                "optimizer_parameter": [
                    "Optional[Dict[(str, Union[(bool, str)])]]"
                ],
                "validate_first": [
                    "bool"
                ]
            }
        },
        "ProfileManager.optimize": {
            "name": "optimize",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileManager.make_profiles": {
            "name": "make_profiles",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "models_names": [
                    "Optional[List[str]]"
                ]
            }
        },
        "ProfileManager.__get_profiles": {
            "name": "__get_profiles",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "model_name": []
            }
        },
        "ProfileManager.__get_dataobject": {
            "name": "__get_dataobject",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProfileManager.__sliding_window_data": {
            "name": "__sliding_window_data",
            "location": 202,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "ProfileManager.__sanitize_data_to_model": {
            "name": "__sanitize_data_to_model",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "data_to_model": []
            }
        },
        "ProfileLevel.__init__": {
            "name": "__init__",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "level_data": [],
                "absolute_acceptance": [
                    "bool"
                ]
            }
        },
        "ProfileLevel.calculate": {
            "name": "calculate",
            "location": 275,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tolerance_limit": [
                    "float"
                ],
                "acceptance_limit": [
                    "float"
                ]
            }
        },
        "ProfileLevel.get_acceptance_interval": {
            "name": "get_acceptance_interval",
            "location": 328,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "acceptance_limit": [
                    "float"
                ]
            }
        },
        "ProfileLevel.mean_square_model": {
            "name": "mean_square_model",
            "location": 339,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProfileLevel.mean_square_error": {
            "name": "mean_square_error",
            "location": 349,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProfileLevel.get_inter_series_var": {
            "name": "get_inter_series_var",
            "location": 359,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProfileLevel.sum_of_square_residual": {
            "name": "sum_of_square_residual",
            "location": 370,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProfileLevel.sum_of_square_total": {
            "name": "sum_of_square_total",
            "location": 378,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProfileLevel.get_repeatability_var": {
            "name": "get_repeatability_var",
            "location": 388,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProfileLevel.get_ratio_var": {
            "name": "get_ratio_var",
            "location": 403,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProfileLevel.get_absolute_tolerance": {
            "name": "get_absolute_tolerance",
            "location": 411,
            "return": [
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "tolerance_limit": [
                    "float"
                ]
            }
        },
        "Profile.__init__": {
            "name": "__init__",
            "location": 434,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Union[(valexa.dataobject.DataObject, models.Model)]"
                ],
                "correction_allowed": [
                    "bool"
                ],
                "correction_threshold": [
                    "List[float]"
                ],
                "forced_correction_value": [
                    "float"
                ],
                "absolute_acceptance": [
                    "bool"
                ],
                "correction_round_to": [
                    "int"
                ]
            }
        },
        "Profile.summary": {
            "name": "summary",
            "location": 464,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "nb_of_figure": [
                    "int"
                ]
            }
        },
        "Profile.average_profile_parameter": {
            "name": "average_profile_parameter",
            "location": 574,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "profile_parameter": [
                    "str"
                ]
            }
        },
        "Profile.get_profile_parameter": {
            "name": "get_profile_parameter",
            "location": 593,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "profile_parameter": [
                    "Union[(list, str)]"
                ]
            }
        },
        "Profile.calculate": {
            "name": "calculate",
            "location": 612,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stats_limits": [
                    "Optional[Dict[(str, float)]]"
                ]
            }
        },
        "Profile.get_intersection_from_points": {
            "name": "get_intersection_from_points",
            "location": 628,
            "return": [
                "list"
            ],
            "arguments": {
                "self": [],
                "point1": [],
                "point2": [],
                "point3": [],
                "point4": []
            }
        },
        "Profile.get_value_between": {
            "name": "get_value_between",
            "location": 640,
            "return": [
                "float"
            ],
            "arguments": {
                "x_value": [
                    "float"
                ],
                "left_coord": [],
                "right_coord": []
            }
        },
        "Profile.get_limits_of_quantification": {
            "name": "get_limits_of_quantification",
            "location": 649,
            "return": [
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.make_plot": {
            "name": "make_plot",
            "location": 863,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.generate_correction": {
            "name": "generate_correction",
            "location": 951,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Optimizer.__init__": {
            "name": "__init__",
            "location": 964,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "profiles": [
                    "Dict[(str, Profile)]"
                ],
                "optimizer_parameters": [
                    "Dict[(str, Union[(bool, str)])]"
                ]
            }
        },
        "Optimizer.sort_profile": {
            "name": "sort_profile",
            "location": 986,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Optimizer.get_profile_value": {
            "name": "get_profile_value",
            "location": 1011,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Optimizer.__get_validation_range": {
            "name": "__get_validation_range",
            "location": 1023,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Optimizer.__get_model_rsquared": {
            "name": "__get_model_rsquared",
            "location": 1033,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Optimizer.__get_average_bias": {
            "name": "__get_average_bias",
            "location": 1036,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Optimizer.__get_model_data_calibration_levels": {
            "name": "__get_model_data_calibration_levels",
            "location": 1039,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Optimizer.__get_min_loq": {
            "name": "__get_min_loq",
            "location": 1042,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Optimizer.__get_max_loq": {
            "name": "__get_max_loq",
            "location": 1045,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Optimizer.__get_lod": {
            "name": "__get_lod",
            "location": 1048,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Optimizer.__get_has_limits": {
            "name": "__get_has_limits",
            "location": 1051,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Optimizer.__get_profile_value": {
            "name": "__get_profile_value",
            "location": 1054,
            "return": [],
            "arguments": {
                "self": [],
                "parameter": []
            }
        },
        "Optimizer.__get_profile_model": {
            "name": "__get_profile_model",
            "location": 1065,
            "return": [],
            "arguments": {
                "self": [],
                "parameter": []
            }
        },
        "Optimizer.__get_profile_model_data": {
            "name": "__get_profile_model_data",
            "location": 1076,
            "return": [],
            "arguments": {
                "self": [],
                "parameter": []
            }
        },
        "Optimizer.__get_profile_average": {
            "name": "__get_profile_average",
            "location": 1087,
            "return": [],
            "arguments": {
                "self": [],
                "parameter": []
            }
        },
        "Optimizer.available_parameters": {
            "name": "available_parameters",
            "location": 1099,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "valexa-master/valexa/validate.py": {
        "valexa_validate": {
            "name": "valexa_validate",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "valexa-master/valexa/__init__.py": {},
    "valexa-master/valexa/examples/test_feinberg_coli.py": {
        "test_feinberg_coli": {
            "name": "test_feinberg_coli",
            "location": 7,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "valexa-master/valexa/examples/test_feinberg_labostat.py": {
        "test_feinberg_labostat": {
            "name": "test_feinberg_labostat",
            "location": 7,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "valexa-master/valexa/examples/test_feinberg_uncertainty.py": {
        "test_feinberg_uncertainty": {
            "name": "test_feinberg_uncertainty",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "valexa-master/valexa/examples/test_inra_pyrene.py": {
        "test_inra_pyrene": {
            "name": "test_inra_pyrene",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "valexa-master/valexa/examples/test_intern_dataset.py": {
        "test_intern_dataset": {
            "name": "test_intern_dataset",
            "location": 4,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "valexa-master/valexa/examples/test_sfstp.py": {
        "test_sfstp": {
            "name": "test_sfstp",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "valexa-master/valexa/examples/__init__.py": {},
    "valexa-master/valexa/examples/dataset/sample_dataset.py": {
        "dataset": {
            "name": "dataset",
            "location": 7,
            "return": [
                "Union[(Dict[(str, Any)], List[str])]"
            ],
            "arguments": {
                "data_set_name": [
                    "Optional[str]"
                ]
            }
        }
    },
    "valexa-master/valexa/examples/dataset/__init__.py": {}
}
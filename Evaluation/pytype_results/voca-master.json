{
    "voca-master/setup.py": {
        "read": {
            "name": "read",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "voca-master/ci/appveyor-bootstrap.py": {
        "download_file": {
            "name": "download_file",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "url": [],
                "path": []
            }
        },
        "install_python": {
            "name": "install_python",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "version": [],
                "arch": [],
                "home": []
            }
        },
        "download_python": {
            "name": "download_python",
            "location": 81,
            "return": [
                "Any"
            ],
            "arguments": {
                "version": [],
                "arch": []
            }
        },
        "install_pip": {
            "name": "install_pip",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "home": []
            }
        },
        "install_packages": {
            "name": "install_packages",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "home": []
            }
        },
        "download_file.report": {
            "name": "report",
            "location": 45,
            "return": [],
            "arguments": {
                "count": [],
                "size": [],
                "total": []
            }
        }
    },
    "voca-master/ci/appveyor-download.py": {
        "make_auth_headers": {
            "name": "make_auth_headers",
            "location": 18,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {}
        },
        "download_latest_artifacts": {
            "name": "download_latest_artifacts",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "account_project": [],
                "build_id": []
            }
        },
        "ensure_dirs": {
            "name": "ensure_dirs",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": []
            }
        },
        "download_url": {
            "name": "download_url",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [],
                "filename": [],
                "headers": []
            }
        },
        "unpack_zipfile": {
            "name": "unpack_zipfile",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": []
            }
        }
    },
    "voca-master/ci/bootstrap.py": {},
    "voca-master/docs/conf.py": {},
    "voca-master/src/voca/app.py": {
        "main": {
            "name": "main",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "should_log": [
                    "bool"
                ]
            }
        }
    },
    "voca-master/src/voca/caster_adapter.py": {
        "transform_tree": {
            "name": "transform_tree",
            "location": 205,
            "return": [
                "Any"
            ],
            "arguments": {
                "tree": []
            }
        },
        "add_to_registry": {
            "name": "add_to_registry",
            "location": 217,
            "return": [
                "_T1"
            ],
            "arguments": {
                "mapping": [],
                "registry": [
                    "_T1"
                ]
            }
        },
        "_function": {
            "name": "_function",
            "location": 225,
            "return": [
                "FunctionAction"
            ],
            "arguments": {
                "f": []
            }
        },
        "convert_spec": {
            "name": "convert_spec",
            "location": 277,
            "return": [
                "str"
            ],
            "arguments": {
                "spec": []
            }
        },
        "adapt_AppContext": {
            "name": "adapt_AppContext",
            "location": 308,
            "return": [
                "Any"
            ],
            "arguments": {
                "title": [],
                "executable": []
            }
        },
        "adapt_Dictation": {
            "name": "adapt_Dictation",
            "location": 312,
            "return": [
                "Dictation"
            ],
            "arguments": {
                "text": []
            }
        },
        "convert_key_name": {
            "name": "convert_key_name",
            "location": 316,
            "return": [
                "Any"
            ],
            "arguments": {
                "name": []
            }
        },
        "adapt_Key": {
            "name": "adapt_Key",
            "location": 324,
            "return": [
                "ActionSequence"
            ],
            "arguments": {
                "text": []
            }
        },
        "adapt_Text": {
            "name": "adapt_Text",
            "location": 338,
            "return": [
                "ActionSequence"
            ],
            "arguments": {
                "name": []
            }
        },
        "find_merge_rule_classes": {
            "name": "find_merge_rule_classes",
            "location": 342,
            "return": [
                "list"
            ],
            "arguments": {
                "module": []
            }
        },
        "monkeypatch": {
            "name": "monkeypatch",
            "location": 364,
            "return": [],
            "arguments": {
                "module": [],
                "name": [],
                "new": []
            }
        },
        "monkeypatch_each": {
            "name": "monkeypatch_each",
            "location": 371,
            "return": [
                "None"
            ],
            "arguments": {
                "patches": []
            }
        },
        "add_wrapper": {
            "name": "add_wrapper",
            "location": 377,
            "return": [],
            "arguments": {
                "module": []
            }
        },
        "patch_all": {
            "name": "patch_all",
            "location": 408,
            "return": [],
            "arguments": {}
        },
        "LazyLoader.__getattr__": {
            "name": "__getattr__",
            "location": 54,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "ActionSequence.__add__": {
            "name": "__add__",
            "location": 97,
            "return": [
                "_TActionSequence"
            ],
            "arguments": {
                "self": [
                    "_TActionSequence"
                ],
                "other": []
            }
        },
        "Dictation.make_definitions": {
            "name": "make_definitions",
            "location": 126,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegerRefST.make_definitions": {
            "name": "make_definitions",
            "location": 136,
            "return": [
                "Dict[(str, str)]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Choice.make_definitions": {
            "name": "make_definitions",
            "location": 171,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyRepeat.__mul__": {
            "name": "__mul__",
            "location": 181,
            "return": [
                "RepeatedAction"
            ],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "MyRepeat.__rmul__": {
            "name": "__rmul__",
            "location": 184,
            "return": [
                "RepeatedAction"
            ],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "CasterTransformer.n": {
            "name": "n",
            "location": 199,
            "return": [
                "Dict[(str, int)]"
            ],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "Settings.__getitem__": {
            "name": "__getitem__",
            "location": 244,
            "return": [
                "_TSettings"
            ],
            "arguments": {
                "self": [
                    "_TSettings"
                ],
                "name": []
            }
        },
        "Settings.__bool__": {
            "name": "__bool__",
            "location": 247,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SpecTransformer.name": {
            "name": "name",
            "location": 252,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "SpecTransformer.literal_name": {
            "name": "literal_name",
            "location": 255,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "SpecTransformer.angled_name": {
            "name": "angled_name",
            "location": 258,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "SpecTransformer.optional_component": {
            "name": "optional_component",
            "location": 261,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "SpecTransformer.phrase_component": {
            "name": "phrase_component",
            "location": 264,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "SpecTransformer.component": {
            "name": "component",
            "location": 267,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "SpecTransformer.spec": {
            "name": "spec",
            "location": 270,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "SpecTransformer.group": {
            "name": "group",
            "location": 273,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "AttributeHaver.__getattr__": {
            "name": "__getattr__",
            "location": 423,
            "return": [
                "_TAttributeHaver"
            ],
            "arguments": {
                "self": [
                    "_TAttributeHaver"
                ],
                "name": []
            }
        },
        "VirtualModule.__init__": {
            "name": "__init__",
            "location": 432,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "VirtualPackage.__init__": {
            "name": "__init__",
            "location": 437,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [],
                "contents": []
            }
        }
    },
    "voca-master/src/voca/cli.py": {
        "log_cli_call": {
            "name": "log_cli_call",
            "location": 36,
            "return": [
                "Callable"
            ],
            "arguments": {
                "f": []
            }
        },
        "cli": {
            "name": "cli",
            "location": 49,
            "return": [],
            "arguments": {
                "ctx": []
            }
        },
        "_detect_mic": {
            "name": "_detect_mic",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "_listen": {
            "name": "_listen",
            "location": 84,
            "return": [],
            "arguments": {}
        },
        "_manage": {
            "name": "_manage",
            "location": 101,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "_worker": {
            "name": "_worker",
            "location": 120,
            "return": [],
            "arguments": {
                "obj": [],
                "patch_caster": []
            }
        },
        "log_cli_call.wrap": {
            "name": "wrap",
            "location": 37,
            "return": [],
            "arguments": {}
        }
    },
    "voca-master/src/voca/config.py": {
        "get_config_dir": {
            "name": "get_config_dir",
            "location": 17,
            "return": [],
            "arguments": {}
        }
    },
    "voca-master/src/voca/context.py": {},
    "voca-master/src/voca/listen.py": {
        "setup": {
            "name": "setup",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 234,
            "return": [
                "None"
            ],
            "arguments": {
                "args": [],
                "content_type": [],
                "path": []
            }
        },
        "main": {
            "name": "main",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MyClient.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [],
                "mic": [],
                "protocols": [],
                "extensions": [],
                "heartbeat_freq": [],
                "byterate": [],
                "show_hypotheses": [],
                "save_adaptation_state_filename": [],
                "send_adaptation_state_filename": [],
                "audio_gate": []
            }
        },
        "MyClient.send_data": {
            "name": "send_data",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "MyClient.opened": {
            "name": "opened",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MyClient.received_message": {
            "name": "received_message",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "MyClient.closed": {
            "name": "closed",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "code": [],
                "reason": []
            }
        },
        "MyClient.opened.mic_to_ws": {
            "name": "mic_to_ws",
            "location": 84,
            "return": [],
            "arguments": {}
        }
    },
    "voca-master/src/voca/log.py": {
        "to_serializable": {
            "name": "to_serializable",
            "location": 40,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "_": {
            "name": "_",
            "location": 48,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "json_to_file": {
            "name": "json_to_file",
            "location": 53,
            "return": [],
            "arguments": {
                "file": []
            }
        },
        "_exception_lines": {
            "name": "_exception_lines",
            "location": 67,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "exc": [
                    "BaseException"
                ]
            }
        },
        "_extract_traceback": {
            "name": "_extract_traceback",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "exc": [
                    "BaseException"
                ]
            }
        },
        "_exception_data": {
            "name": "_exception_data",
            "location": 77,
            "return": [
                "Dict[(str, Any)]"
            ],
            "arguments": {
                "exc": [
                    "BaseException"
                ]
            }
        },
        "summarize_exception": {
            "name": "summarize_exception",
            "location": 83,
            "return": [
                "Dict[(str, dict)]"
            ],
            "arguments": {
                "exc": [
                    "BaseException"
                ]
            }
        },
        "log_call": {
            "name": "log_call",
            "location": 92,
            "return": [],
            "arguments": {
                "wrapped_function": [],
                "action_type": [],
                "include_args": [],
                "include_result": []
            }
        },
        "log_async_call": {
            "name": "log_async_call",
            "location": 155,
            "return": [],
            "arguments": {
                "wrapped_function": [],
                "action_type": [],
                "include_args": [],
                "include_result": []
            }
        },
        "get_log_filename": {
            "name": "get_log_filename",
            "location": 218,
            "return": [
                "pathlib.Path"
            ],
            "arguments": {}
        },
        "json_to_file._json_to_file": {
            "name": "_json_to_file",
            "location": 60,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "log_call.logging_wrapper": {
            "name": "logging_wrapper",
            "location": 130,
            "return": [],
            "arguments": {}
        }
    },
    "voca-master/src/voca/manager.py": {
        "handle_unexpected_worker_bytes": {
            "name": "handle_unexpected_worker_bytes",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "bytes"
                ]
            }
        },
        "worker_cli": {
            "name": "worker_cli",
            "location": 40,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "should_log": [],
                "module_names": [
                    "Optional[List[str]]"
                ]
            }
        },
        "set_state": {
            "name": "set_state",
            "location": 70,
            "return": [],
            "arguments": {
                "data": [],
                "state": []
            }
        },
        "main": {
            "name": "main",
            "location": 192,
            "return": [],
            "arguments": {
                "should_log": [],
                "module_names": [],
                "num_workers": []
            }
        },
        "Pool.start": {
            "name": "start",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pool.get_process": {
            "name": "get_process",
            "location": 107,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Pool.add_new_process": {
            "name": "add_new_process",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "voca-master/src/voca/mic.py": {
        "int_or_str": {
            "name": "int_or_str",
            "location": 16,
            "return": [
                "Union[(int, _T0)]"
            ],
            "arguments": {
                "text": [
                    "_T0"
                ]
            }
        },
        "audio_callback": {
            "name": "audio_callback",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "indata": [],
                "frames": [],
                "time": [],
                "status": []
            }
        },
        "update_plot": {
            "name": "update_plot",
            "location": 79,
            "return": [
                "Any"
            ],
            "arguments": {
                "frame": []
            }
        }
    },
    "voca-master/src/voca/parsing.py": {
        "extract": {
            "name": "extract",
            "location": 37,
            "return": [],
            "arguments": {
                "tree": []
            }
        },
        "extract_commands": {
            "name": "extract_commands",
            "location": 45,
            "return": [],
            "arguments": {
                "tree": []
            }
        },
        "_replace_match": {
            "name": "_replace_match",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "match": [
                    "Match"
                ]
            }
        },
        "normalize_pattern": {
            "name": "normalize_pattern",
            "location": 59,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "build_rules": {
            "name": "build_rules",
            "location": 66,
            "return": [],
            "arguments": {
                "registry": []
            }
        },
        "build_grammar": {
            "name": "build_grammar",
            "location": 79,
            "return": [],
            "arguments": {
                "registry": [],
                "rules": []
            }
        },
        "combine_modules": {
            "name": "combine_modules",
            "location": 112,
            "return": [],
            "arguments": {
                "modules": []
            }
        },
        "combine_registries": {
            "name": "combine_registries",
            "location": 121,
            "return": [
                "Any"
            ],
            "arguments": {
                "registries": []
            }
        },
        "Transformer.chord": {
            "name": "chord",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "arg": []
            }
        },
        "Transformer.key": {
            "name": "key",
            "location": 29,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "arg": []
            }
        }
    },
    "voca-master/src/voca/patching.py": {
        "skipping_finder": {
            "name": "skipping_finder",
            "location": 52,
            "return": [],
            "arguments": {
                "finder": []
            }
        },
        "skipping_module_in_sys_modules": {
            "name": "skipping_module_in_sys_modules",
            "location": 68,
            "return": [],
            "arguments": {
                "module_name": []
            }
        },
        "finder_patch": {
            "name": "finder_patch",
            "location": 88,
            "return": [],
            "arguments": {
                "finder": []
            }
        },
        "ancestors": {
            "name": "ancestors",
            "location": 131,
            "return": [
                "Generator[(T, List[T], None)]"
            ],
            "arguments": {
                "items": [
                    "List[T]"
                ]
            }
        },
        "get_package_map": {
            "name": "get_package_map",
            "location": 136,
            "return": [
                "Dict[(str, List[str])]"
            ],
            "arguments": {
                "strings": [
                    "List[str]"
                ]
            }
        },
        "make_finder": {
            "name": "make_finder",
            "location": 152,
            "return": [],
            "arguments": {
                "mapping": []
            }
        },
        "PathLoader.create_module": {
            "name": "create_module",
            "location": 39,
            "return": [
                "module"
            ],
            "arguments": {
                "self": [],
                "spec": [
                    "importlib.machinery.ModuleSpec"
                ]
            }
        },
        "PathLoader.exec_module": {
            "name": "exec_module",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "module": []
            }
        },
        "skipping_finder.placeholder_find_spec": {
            "name": "placeholder_find_spec",
            "location": 55,
            "return": [],
            "arguments": {
                "_fullname": [],
                "_path": [],
                "_target": []
            }
        },
        "PathFinder.find_spec": {
            "name": "find_spec",
            "location": 102,
            "return": [
                "Spec"
            ],
            "arguments": {
                "self": [],
                "fullname": [
                    "str"
                ],
                "path": [
                    "Optional[str]"
                ],
                "target": []
            }
        }
    },
    "voca-master/src/voca/platforms.py": {
        "implementation": {
            "name": "implementation",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "implementation.wrap": {
            "name": "wrap",
            "location": 48,
            "return": [],
            "arguments": {
                "func": []
            }
        }
    },
    "voca-master/src/voca/streaming.py": {
        "TerminatedFrameReceiver.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "stream": [],
                "terminator": [],
                "max_frame_length": []
            }
        },
        "TerminatedFrameReceiver.__aiter__": {
            "name": "__aiter__",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "voca-master/src/voca/utils.py": {
        "pronunciation_to_value": {
            "name": "pronunciation_to_value",
            "location": 61,
            "return": [],
            "arguments": {}
        },
        "value_to_pronunciation": {
            "name": "value_to_pronunciation",
            "location": 68,
            "return": [],
            "arguments": {}
        },
        "quote": {
            "name": "quote",
            "location": 124,
            "return": [],
            "arguments": {
                "word": []
            }
        },
        "regex": {
            "name": "regex",
            "location": 132,
            "return": [],
            "arguments": {
                "word": []
            }
        },
        "async_runner": {
            "name": "async_runner",
            "location": 219,
            "return": [],
            "arguments": {
                "async_function": []
            }
        },
        "replace": {
            "name": "replace",
            "location": 231,
            "return": [],
            "arguments": {
                "message": []
            }
        },
        "plugin_module_paths": {
            "name": "plugin_module_paths",
            "location": 239,
            "return": [],
            "arguments": {}
        },
        "get_module_names": {
            "name": "get_module_names",
            "location": 247,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "transform_module": {
            "name": "transform_module",
            "location": 259,
            "return": [],
            "arguments": {
                "module": []
            }
        },
        "Registry.register": {
            "name": "register",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "pattern": []
            }
        },
        "Registry.define": {
            "name": "define",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "patterns": []
            }
        },
        "async_runner.build": {
            "name": "build",
            "location": 220,
            "return": [],
            "arguments": {}
        },
        "ModuleLazyRaise.__getattr__": {
            "name": "__getattr__",
            "location": 273,
            "return": [],
            "arguments": {
                "self": [],
                "name": []
            }
        },
        "Registry.register._register": {
            "name": "_register",
            "location": 47,
            "return": [],
            "arguments": {
                "function": []
            }
        }
    },
    "voca-master/src/voca/worker.py": {
        "load_from_path": {
            "name": "load_from_path",
            "location": 64,
            "return": [],
            "arguments": {
                "import_path": [],
                "filename": []
            }
        },
        "get_backup_module": {
            "name": "get_backup_module",
            "location": 73,
            "return": [],
            "arguments": {
                "import_path": [],
                "backup_dir": []
            }
        },
        "save_backup_module": {
            "name": "save_backup_module",
            "location": 86,
            "return": [],
            "arguments": {
                "module": [],
                "import_path": [],
                "backup_dir": []
            }
        },
        "get_module": {
            "name": "get_module",
            "location": 96,
            "return": [],
            "arguments": {
                "import_path": [],
                "backup_dir": [],
                "use_backup_modules": []
            }
        },
        "collect_modules": {
            "name": "collect_modules",
            "location": 119,
            "return": [],
            "arguments": {
                "import_paths": [],
                "use_backup_modules": []
            }
        },
        "combine_registries": {
            "name": "combine_registries",
            "location": 134,
            "return": [
                "Any"
            ],
            "arguments": {
                "registries": []
            }
        },
        "main": {
            "name": "main",
            "location": 184,
            "return": [],
            "arguments": {
                "import_paths": [],
                "use_backup_modules": []
            }
        }
    },
    "voca-master/src/voca/__init__.py": {},
    "voca-master/src/voca/__main__.py": {},
    "voca-master/src/voca/plugins/basic.py": {
        "type_chord": {
            "name": "type_chord",
            "location": 51,
            "return": [],
            "arguments": {
                "chord": []
            }
        }
    },
    "voca-master/src/voca/plugins/math.py": {},
    "voca-master/src/voca/plugins/no.py": {},
    "voca-master/src/voca/plugins/python.py": {},
    "voca-master/src/voca/plugins/stopstart.py": {},
    "voca-master/src/voca/plugins/terminator.py": {},
    "voca-master/src/voca/plugins/turtle_context.py": {},
    "voca-master/src/voca/plugins/vscode.py": {
        "findNthToken": {
            "name": "findNthToken",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "text": [],
                "n": [],
                "direction": []
            }
        }
    },
    "voca-master/src/voca/plugins/yes.py": {},
    "voca-master/src/voca/plugins/__init__.py": {},
    "voca-master/tests/conftest.py": {
        "_virtual_display": {
            "name": "_virtual_display",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "_window_manager": {
            "name": "_window_manager",
            "location": 40,
            "return": [],
            "arguments": {
                "virtual_display": []
            }
        },
        "_turtle_window": {
            "name": "_turtle_window",
            "location": 50,
            "return": [],
            "arguments": {
                "window_manager": []
            }
        },
        "_idle_window": {
            "name": "_idle_window",
            "location": 60,
            "return": [],
            "arguments": {
                "window_manager": []
            }
        },
        "_hash_seed": {
            "name": "_hash_seed",
            "location": 70,
            "return": [],
            "arguments": {}
        },
        "_config_dir": {
            "name": "_config_dir",
            "location": 83,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        }
    },
    "voca-master/tests/helpers.py": {
        "run": {
            "name": "run",
            "location": 10,
            "return": [
                "Any"
            ],
            "arguments": {
                "args": []
            }
        },
        "capture_keypresses": {
            "name": "capture_keypresses",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "make_command": {
            "name": "make_command",
            "location": 43,
            "return": [
                "Dict[(str, Union[(int, str, Dict[(str, Union[(List[Dict[(str, _T0)]], _T1)])])])]"
            ],
            "arguments": {
                "utterance": [
                    "_T0"
                ],
                "final": [
                    "_T1"
                ]
            }
        },
        "capture_keypresses.capture": {
            "name": "capture",
            "location": 20,
            "return": [],
            "arguments": {
                "event": []
            }
        },
        "async_capture_keypresses.capture": {
            "name": "capture",
            "location": 33,
            "return": [],
            "arguments": {
                "event": []
            }
        }
    },
    "voca-master/tests/test_caster_adapter.py": {
        "test_convert_spec": {
            "name": "test_convert_spec",
            "location": 31,
            "return": [],
            "arguments": {
                "spec": [],
                "expected": []
            }
        },
        "test_simple_caster": {
            "name": "test_simple_caster",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_caster_extras": {
            "name": "test_caster_extras",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "test_patch_caster": {
            "name": "test_patch_caster",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "test_patch_dragonfly": {
            "name": "test_patch_dragonfly",
            "location": 101,
            "return": [],
            "arguments": {}
        },
        "test_f_keys": {
            "name": "test_f_keys",
            "location": 113,
            "return": [],
            "arguments": {}
        },
        "test_more_keys": {
            "name": "test_more_keys",
            "location": 134,
            "return": [],
            "arguments": {}
        },
        "test_using_castervoice_apps": {
            "name": "test_using_castervoice_apps",
            "location": 154,
            "return": [],
            "arguments": {}
        }
    },
    "voca-master/tests/test_context.py": {},
    "voca-master/tests/test_mic.py": {
        "test_mic_list": {
            "name": "test_mic_list",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "voca-master/tests/test_patching.py": {
        "test_patch": {
            "name": "test_patch",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_package_map": {
            "name": "test_get_package_map",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "voca-master/tests/test_performance.py": {
        "test_manager_time": {
            "name": "test_manager_time",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_manager_time.handler": {
            "name": "handler",
            "location": 19,
            "return": [],
            "arguments": {
                "_signum": [],
                "_frame": []
            }
        }
    },
    "voca-master/tests/test_platforms.py": {
        "get_platform": {
            "name": "get_platform",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_implementation": {
            "name": "test_implementation",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dict_accessible": {
            "name": "test_dict_accessible",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "voca-master/tests/test_voca.py": {
        "test_main": {
            "name": "test_main",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_strict": {
            "name": "test_strict",
            "location": 27,
            "return": [],
            "arguments": {}
        },
        "test_eager": {
            "name": "test_eager",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "test_context_always": {
            "name": "test_context_always",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "test_context_never": {
            "name": "test_context_never",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "test_app_context_matches": {
            "name": "test_app_context_matches",
            "location": 98,
            "return": [],
            "arguments": {}
        },
        "test_app_context_does_not_match": {
            "name": "test_app_context_does_not_match",
            "location": 117,
            "return": [],
            "arguments": {}
        },
        "test_config_module": {
            "name": "test_config_module",
            "location": 133,
            "return": [],
            "arguments": {
                "tmp_path": []
            }
        }
    },
    "voca-master/tests/__init__.py": {}
}
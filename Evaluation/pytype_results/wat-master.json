{
    "wat-master/examples/wat_examples.py": {
        "print_provenance": {
            "name": "print_provenance",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "trace": [],
                "provenance": [
                    "list"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "main.leq3": {
            "name": "leq3",
            "location": 82,
            "return": [],
            "arguments": {
                "t": []
            }
        },
        "main.f": {
            "name": "f",
            "location": 102,
            "return": [],
            "arguments": {
                "t": []
            }
        }
    },
    "wat-master/examples/white_box_examples.py": {
        "underline_print": {
            "name": "underline_print",
            "location": 6,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "print_provenance": {
            "name": "print_provenance",
            "location": 10,
            "return": [],
            "arguments": {
                "trace": [],
                "calculated_provenance": [],
                "provenance": []
            }
        },
        "main": {
            "name": "main",
            "location": 131,
            "return": [],
            "arguments": {}
        },
        "Kvs.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SelfJoin.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tours.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Tours.__init__.f": {
            "name": "f",
            "location": 110,
            "return": [],
            "arguments": {
                "t": []
            }
        }
    },
    "wat-master/paper/figures/redis_prov_spec.py": {},
    "wat-master/wat/bexpr.py": {
        "Expr.eval": {
            "name": "eval",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Dict[(str, bool)]"
                ]
            }
        },
        "Top.__str__": {
            "name": "__str__",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Top.__repr__": {
            "name": "__repr__",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Top.eval": {
            "name": "eval",
            "location": 16,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Dict[(str, bool)]"
                ]
            }
        },
        "Bot.__str__": {
            "name": "__str__",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bot.__repr__": {
            "name": "__repr__",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bot.eval": {
            "name": "eval",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Dict[(str, bool)]"
                ]
            }
        },
        "Var.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str"
                ]
            }
        },
        "Var.__str__": {
            "name": "__str__",
            "location": 33,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Var.__repr__": {
            "name": "__repr__",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Var.eval": {
            "name": "eval",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Dict[(str, bool)]"
                ]
            }
        },
        "And.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "List[Expr]"
                ]
            }
        },
        "And.__str__": {
            "name": "__str__",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "And.__repr__": {
            "name": "__repr__",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "And.eval": {
            "name": "eval",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Dict[(str, bool)]"
                ]
            }
        },
        "Or.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "children": [
                    "List[Expr]"
                ]
            }
        },
        "Or.__str__": {
            "name": "__str__",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Or.__repr__": {
            "name": "__repr__",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Or.eval": {
            "name": "eval",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Dict[(str, bool)]"
                ]
            }
        },
        "Not.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "Expr"
                ]
            }
        },
        "Not.__str__": {
            "name": "__str__",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Not.__repr__": {
            "name": "__repr__",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Not.eval": {
            "name": "eval",
            "location": 78,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "env": [
                    "Dict[(str, bool)]"
                ]
            }
        },
        "BexprEvalRequest.__str__": {
            "name": "__str__",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BexprEvalRequest.__repr__": {
            "name": "__repr__",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BexprEvalReply.__str__": {
            "name": "__str__",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BexprEvalReply.__repr__": {
            "name": "__repr__",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BexprSetRequest.__str__": {
            "name": "__str__",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BexprSetRequest.__repr__": {
            "name": "__repr__",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BexprSetReply.__str__": {
            "name": "__str__",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BexprSetReply.__repr__": {
            "name": "__repr__",
            "location": 112,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BexprUnsetRequest.__str__": {
            "name": "__str__",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BexprUnsetRequest.__repr__": {
            "name": "__repr__",
            "location": 121,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BexprUnsetReply.__str__": {
            "name": "__str__",
            "location": 125,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BexprUnsetReply.__repr__": {
            "name": "__repr__",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bexpr.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bexpr.eval": {
            "name": "eval",
            "location": 137,
            "return": [
                "BexprEvalRequest"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "Expr"
                ]
            }
        },
        "Bexpr.set": {
            "name": "set",
            "location": 140,
            "return": [
                "BexprSetRequest"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str"
                ]
            }
        },
        "Bexpr.unset": {
            "name": "unset",
            "location": 143,
            "return": [
                "BexprUnsetRequest"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str"
                ]
            }
        },
        "Bexpr.reset": {
            "name": "reset",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bexpr.transition": {
            "name": "transition",
            "location": 151,
            "return": [
                "Union[(BexprEvalReply, BexprSetReply, BexprUnsetReply)]"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "Union[(BexprEvalRequest, BexprSetRequest, BexprUnsetRequest)]"
                ]
            }
        }
    },
    "wat-master/wat/db.py": {
        "DbQuery.eval": {
            "name": "eval",
            "location": 12,
            "return": [
                "Set[Tuple[(str, ...)]]"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "Dict[(str, Set[Tuple[(str, ...)]])]"
                ]
            }
        },
        "DbRelation.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "str"
                ]
            }
        },
        "DbRelation.eval": {
            "name": "eval",
            "location": 19,
            "return": [
                "Set[Tuple[(str, ...)]]"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "Dict[(str, Set[Tuple[(str, ...)]])]"
                ]
            }
        },
        "DbRelation.__str__": {
            "name": "__str__",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbRelation.__repr__": {
            "name": "__repr__",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbSelect.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "DbQuery"
                ],
                "f": [
                    "Callable[([Tuple[(str, ...)]], bool)]"
                ]
            }
        },
        "DbSelect.eval": {
            "name": "eval",
            "location": 35,
            "return": [
                "Set[Tuple[(str, ...)]]"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "Dict[(str, Set[Tuple[(str, ...)]])]"
                ]
            }
        },
        "DbSelect.__str__": {
            "name": "__str__",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbSelect.__repr__": {
            "name": "__repr__",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbProject.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "DbQuery"
                ],
                "indexes": [
                    "List[int]"
                ]
            }
        },
        "DbProject.eval": {
            "name": "eval",
            "location": 49,
            "return": [
                "Set[Tuple[(str, ...)]]"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "Dict[(str, Set[Tuple[(str, ...)]])]"
                ]
            }
        },
        "DbProject.__str__": {
            "name": "__str__",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbProject.__repr__": {
            "name": "__repr__",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbCross.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "DbQuery"
                ],
                "rhs": [
                    "DbQuery"
                ]
            }
        },
        "DbCross.eval": {
            "name": "eval",
            "location": 63,
            "return": [
                "Set[Tuple[(str, ...)]]"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "Dict[(str, Set[Tuple[(str, ...)]])]"
                ]
            }
        },
        "DbCross.__str__": {
            "name": "__str__",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbCross.__repr__": {
            "name": "__repr__",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbCup.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "DbQuery"
                ],
                "rhs": [
                    "DbQuery"
                ]
            }
        },
        "DbCup.eval": {
            "name": "eval",
            "location": 79,
            "return": [
                "Set[Tuple[(str, ...)]]"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "Dict[(str, Set[Tuple[(str, ...)]])]"
                ]
            }
        },
        "DbCup.__str__": {
            "name": "__str__",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbCup.__repr__": {
            "name": "__repr__",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbDiff.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "DbQuery"
                ],
                "rhs": [
                    "DbQuery"
                ]
            }
        },
        "DbDiff.eval": {
            "name": "eval",
            "location": 93,
            "return": [
                "Set[Tuple[(str, ...)]]"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "Dict[(str, Set[Tuple[(str, ...)]])]"
                ]
            }
        },
        "DbDiff.__str__": {
            "name": "__str__",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbDiff.__repr__": {
            "name": "__repr__",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbCreateRequest.__str__": {
            "name": "__str__",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbCreateRequest.__repr__": {
            "name": "__repr__",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbCreateReply.__str__": {
            "name": "__str__",
            "location": 115,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbCreateReply.__repr__": {
            "name": "__repr__",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbInsertRequest.__str__": {
            "name": "__str__",
            "location": 125,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbInsertRequest.__repr__": {
            "name": "__repr__",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbInsertReply.__str__": {
            "name": "__str__",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbInsertReply.__repr__": {
            "name": "__repr__",
            "location": 137,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbDeleteRequest.__str__": {
            "name": "__str__",
            "location": 144,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbDeleteRequest.__repr__": {
            "name": "__repr__",
            "location": 147,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbDeleteReply.__str__": {
            "name": "__str__",
            "location": 153,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbDeleteReply.__repr__": {
            "name": "__repr__",
            "location": 156,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbQueryRequest.__str__": {
            "name": "__str__",
            "location": 162,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbQueryRequest.__repr__": {
            "name": "__repr__",
            "location": 165,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbQueryReply.__str__": {
            "name": "__str__",
            "location": 171,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DbQueryReply.__repr__": {
            "name": "__repr__",
            "location": 174,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Db.__init__": {
            "name": "__init__",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Db.create": {
            "name": "create",
            "location": 183,
            "return": [
                "DbCreateRequest"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "str"
                ],
                "arity": [
                    "int"
                ]
            }
        },
        "Db.insert": {
            "name": "insert",
            "location": 186,
            "return": [
                "DbInsertRequest"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "str"
                ],
                "t": [
                    "List[str]"
                ]
            }
        },
        "Db.delete": {
            "name": "delete",
            "location": 189,
            "return": [
                "DbDeleteRequest"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "str"
                ],
                "t": [
                    "List[str]"
                ]
            }
        },
        "Db.query": {
            "name": "query",
            "location": 192,
            "return": [
                "DbQueryRequest"
            ],
            "arguments": {
                "self": [],
                "q": [
                    "DbQuery"
                ]
            }
        },
        "Db.reset": {
            "name": "reset",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Db.transition": {
            "name": "transition",
            "location": 200,
            "return": [
                "Union[(DbCreateReply, DbDeleteReply, DbInsertReply, DbQueryReply)]"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "Union[(DbCreateRequest, DbDeleteRequest, DbInsertRequest, DbQueryRequest)]"
                ]
            }
        }
    },
    "wat-master/wat/kvs.py": {
        "KvsGetRequest.__str__": {
            "name": "__str__",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KvsGetRequest.__repr__": {
            "name": "__repr__",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KvsGetReply.__str__": {
            "name": "__str__",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KvsGetReply.__repr__": {
            "name": "__repr__",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KvsSetRequest.__str__": {
            "name": "__str__",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KvsSetRequest.__repr__": {
            "name": "__repr__",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KvsSetReply.__str__": {
            "name": "__str__",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KvsSetReply.__repr__": {
            "name": "__repr__",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KvsAddRequest.__str__": {
            "name": "__str__",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KvsAddRequest.__repr__": {
            "name": "__repr__",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KvsAddReply.__str__": {
            "name": "__str__",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KvsAddReply.__repr__": {
            "name": "__repr__",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Kvs.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Kvs.get": {
            "name": "get",
            "location": 68,
            "return": [
                "KvsGetRequest"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str"
                ]
            }
        },
        "Kvs.set": {
            "name": "set",
            "location": 71,
            "return": [
                "KvsSetRequest"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str"
                ],
                "v": [
                    "int"
                ]
            }
        },
        "Kvs.add": {
            "name": "add",
            "location": 74,
            "return": [
                "KvsAddRequest"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str"
                ],
                "x": [
                    "int"
                ]
            }
        },
        "Kvs.reset": {
            "name": "reset",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Kvs.transition": {
            "name": "transition",
            "location": 82,
            "return": [
                "Union[(KvsGetReply, KvsSetReply)]"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "Union[(KvsGetRequest, KvsSetRequest)]"
                ]
            }
        }
    },
    "wat-master/wat/lists.py": {
        "Lists.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lists.lpush": {
            "name": "lpush",
            "location": 59,
            "return": [
                "ListsLpushRequest"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str"
                ]
            }
        },
        "Lists.lpop": {
            "name": "lpop",
            "location": 62,
            "return": [
                "ListsLpopRequest"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lists.rpush": {
            "name": "rpush",
            "location": 65,
            "return": [
                "ListsRpushRequest"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str"
                ]
            }
        },
        "Lists.rpop": {
            "name": "rpop",
            "location": 68,
            "return": [
                "ListsRpopRequest"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lists.remove": {
            "name": "remove",
            "location": 71,
            "return": [
                "ListsRemoveRequest"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str"
                ]
            }
        },
        "Lists.set": {
            "name": "set",
            "location": 74,
            "return": [
                "ListsSetRequest"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str"
                ],
                "i": [
                    "int"
                ]
            }
        },
        "Lists.index": {
            "name": "index",
            "location": 77,
            "return": [
                "ListsIndexRequest"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int"
                ]
            }
        },
        "Lists.reset": {
            "name": "reset",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Lists.transition": {
            "name": "transition",
            "location": 85,
            "return": [
                "Union[(ListsIndexReply, ListsLpopReply, ListsLpushReply, ListsRemoveReply, ListsRpopReply, ListsRpushReply, ListsSetReply)]"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "Union[(ListsIndexRequest, ListsLpopRequest, ListsLpushRequest, ListsRemoveRequest, ListsRpopRequest, ListsRpushRequest, ListsSetRequest)]"
                ]
            }
        }
    },
    "wat-master/wat/state_machine.py": {
        "StateMachine.reset": {
            "name": "reset",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateMachine.transition": {
            "name": "transition",
            "location": 19,
            "return": [
                "Output"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "Input"
                ]
            }
        },
        "StateMachine.run": {
            "name": "run",
            "location": 23,
            "return": [
                "List[Tuple[(Input, Output)]]"
            ],
            "arguments": {
                "self": [],
                "inputs": [
                    "List[Input]"
                ]
            }
        }
    },
    "wat-master/wat/wat.py": {
        "_enumerate_trace": {
            "name": "_enumerate_trace",
            "location": 11,
            "return": [
                "List[Tuple[(int, Input, Output)]]"
            ],
            "arguments": {
                "trace": [
                    "List[Tuple[(Input, Output)]]"
                ]
            }
        },
        "_unenumerate_trace": {
            "name": "_unenumerate_trace",
            "location": 14,
            "return": [
                "List[Tuple[(Input, Output)]]"
            ],
            "arguments": {
                "enumerated_trace": [
                    "List[Tuple[(int, Input, Output)]]"
                ]
            }
        },
        "_powerset": {
            "name": "_powerset",
            "location": 19,
            "return": [
                "Generator[(List[T], None, None)]"
            ],
            "arguments": {
                "iterable": [
                    "Iterable[T]"
                ],
                "min_size": [
                    "int"
                ]
            }
        },
        "_subtraces": {
            "name": "_subtraces",
            "location": 28,
            "return": [
                "Generator[(List[Tuple[(int, Input, Output)]], None, None)]"
            ],
            "arguments": {
                "trace": [
                    "List[Tuple[(int, Input, Output)]]"
                ]
            }
        },
        "_supertraces": {
            "name": "_supertraces",
            "location": 34,
            "return": [
                "Generator[(List[Tuple[(int, Input, Output)]], None, None)]"
            ],
            "arguments": {
                "subtrace": [
                    "List[Tuple[(int, Input, Output)]]"
                ],
                "trace": [
                    "List[Tuple[(int, Input, Output)]]"
                ]
            }
        },
        "_trace_happens_before": {
            "name": "_trace_happens_before",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "a": [
                    "List[Tuple[(int, Input, Output)]]"
                ],
                "b": [
                    "List[Tuple[(int, Input, Output)]]"
                ]
            }
        },
        "_trace_satisfies_io": {
            "name": "_trace_satisfies_io",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "m": [
                    "wat.state_machine.StateMachine[(Input, Output)]"
                ],
                "trace": [
                    "List[Tuple[(int, Input, Output)]]"
                ],
                "io": [
                    "Tuple[(Input, Output)]"
                ]
            }
        },
        "_subtrace_closed_under_superset": {
            "name": "_subtrace_closed_under_superset",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "m": [
                    "wat.state_machine.StateMachine[(Input, Output)]"
                ],
                "subtrace": [
                    "List[Tuple[(int, Input, Output)]]"
                ],
                "trace": [
                    "List[Tuple[(int, Input, Output)]]"
                ],
                "io": [
                    "Tuple[(Input, Output)]"
                ]
            }
        },
        "_subtrace_is_witness": {
            "name": "_subtrace_is_witness",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "m": [
                    "wat.state_machine.StateMachine[(Input, Output)]"
                ],
                "subtrace": [
                    "List[Tuple[(int, Input, Output)]]"
                ],
                "trace": [
                    "List[Tuple[(int, Input, Output)]]"
                ],
                "io": [
                    "Tuple[(Input, Output)]"
                ]
            }
        },
        "_enumerated_wat": {
            "name": "_enumerated_wat",
            "location": 75,
            "return": [
                "List[List[Tuple[(int, Input, Output)]]]"
            ],
            "arguments": {
                "m": [
                    "wat.state_machine.StateMachine[(Input, Output)]"
                ],
                "trace": [
                    "List[Tuple[(int, Input, Output)]]"
                ],
                "io": [
                    "Tuple[(Input, Output)]"
                ]
            }
        },
        "wat": {
            "name": "wat",
            "location": 87,
            "return": [
                "List[List[Tuple[(int, Input, Output)]]]"
            ],
            "arguments": {
                "m": [
                    "wat.state_machine.StateMachine[(Input, Output)]"
                ],
                "trace": [
                    "List[Tuple[(Input, Output)]]"
                ],
                "j": [
                    "int"
                ]
            }
        }
    },
    "wat-master/wat/white_box.py": {
        "coerce": {
            "name": "coerce",
            "location": 42,
            "return": [
                "WbQuery"
            ],
            "arguments": {
                "coercible": [
                    "Union[(WbQuery, str, Tuple[(str, ...)])]"
                ]
            }
        },
        "Timestamp.increment_tick": {
            "name": "increment_tick",
            "location": 12,
            "return": [
                "_TTimestamp"
            ],
            "arguments": {
                "self": [
                    "_TTimestamp"
                ]
            }
        },
        "Timestamp.increment_step": {
            "name": "increment_step",
            "location": 15,
            "return": [
                "_TTimestamp"
            ],
            "arguments": {
                "self": [
                    "_TTimestamp"
                ]
            }
        },
        "WbQuery.eval": {
            "name": "eval",
            "location": 53,
            "return": [
                "Set[Tuple[(Tuple[(str, ...)], FrozenSet[RecordId])]]"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "Dict[(str, Set[TimestampedRecord])]"
                ]
            }
        },
        "WbQuery.__add__": {
            "name": "__add__",
            "location": 56,
            "return": [
                "WbCup"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(WbQuery, str, Tuple[(str, ...)])]"
                ]
            }
        },
        "WbQuery.__radd__": {
            "name": "__radd__",
            "location": 59,
            "return": [
                "WbCup"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(WbQuery, str, Tuple[(str, ...)])]"
                ]
            }
        },
        "WbQuery.__sub__": {
            "name": "__sub__",
            "location": 62,
            "return": [
                "WbDiff"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(WbQuery, str, Tuple[(str, ...)])]"
                ]
            }
        },
        "WbQuery.__rsub__": {
            "name": "__rsub__",
            "location": 65,
            "return": [
                "WbDiff"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(WbQuery, str, Tuple[(str, ...)])]"
                ]
            }
        },
        "WbQuery.__mul__": {
            "name": "__mul__",
            "location": 68,
            "return": [
                "WbCross"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(WbQuery, str, Tuple[(str, ...)])]"
                ]
            }
        },
        "WbQuery.__rmul__": {
            "name": "__rmul__",
            "location": 71,
            "return": [
                "WbCross"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[(WbQuery, str, Tuple[(str, ...)])]"
                ]
            }
        },
        "WbQuery.select": {
            "name": "select",
            "location": 74,
            "return": [
                "WbSelect"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[([Tuple[(str, ...)]], bool)]"
                ]
            }
        },
        "WbQuery.project": {
            "name": "project",
            "location": 77,
            "return": [
                "WbProject"
            ],
            "arguments": {
                "self": [],
                "indexes": [
                    "List[int]"
                ]
            }
        },
        "WbRecord.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "Tuple[(str, ...)]"
                ]
            }
        },
        "WbRecord.eval": {
            "name": "eval",
            "location": 84,
            "return": [
                "Set[Tuple[(Tuple[(str, ...)], FrozenSet[RecordId])]]"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "Dict[(str, Set[TimestampedRecord])]"
                ]
            }
        },
        "WbRecord.__str__": {
            "name": "__str__",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WbRecord.__repr__": {
            "name": "__repr__",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WbRelation.__init__": {
            "name": "__init__",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "R": [
                    "str"
                ]
            }
        },
        "WbRelation.eval": {
            "name": "eval",
            "location": 97,
            "return": [
                "Set[Tuple[(Tuple[(str, ...)], FrozenSet[RecordId])]]"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "Dict[(str, Set[TimestampedRecord])]"
                ]
            }
        },
        "WbRelation.__str__": {
            "name": "__str__",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WbRelation.__repr__": {
            "name": "__repr__",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WbSelect.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "Union[(WbQuery, str, Tuple[(str, ...)])]"
                ],
                "f": [
                    "Callable[([Tuple[(str, ...)]], bool)]"
                ]
            }
        },
        "WbSelect.eval": {
            "name": "eval",
            "location": 113,
            "return": [
                "Set[Tuple[(Tuple[(str, ...)], FrozenSet[RecordId])]]"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "Dict[(str, Set[TimestampedRecord])]"
                ]
            }
        },
        "WbSelect.__str__": {
            "name": "__str__",
            "location": 116,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WbSelect.__repr__": {
            "name": "__repr__",
            "location": 119,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WbProject.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "Union[(WbQuery, str, Tuple[(str, ...)])]"
                ],
                "indexes": [
                    "List[int]"
                ]
            }
        },
        "WbProject.eval": {
            "name": "eval",
            "location": 127,
            "return": [
                "Set[Tuple[(Tuple[(str, ...)], FrozenSet[RecordId])]]"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "Dict[(str, Set[TimestampedRecord])]"
                ]
            }
        },
        "WbProject.__str__": {
            "name": "__str__",
            "location": 131,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WbProject.__repr__": {
            "name": "__repr__",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WbCross.__init__": {
            "name": "__init__",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "Union[(WbQuery, str, Tuple[(str, ...)])]"
                ],
                "rhs": [
                    "Union[(WbQuery, str, Tuple[(str, ...)])]"
                ]
            }
        },
        "WbCross.eval": {
            "name": "eval",
            "location": 142,
            "return": [
                "Set[Tuple[(Tuple[(str, ...)], FrozenSet[RecordId])]]"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "Dict[(str, Set[TimestampedRecord])]"
                ]
            }
        },
        "WbCross.__str__": {
            "name": "__str__",
            "location": 147,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WbCross.__repr__": {
            "name": "__repr__",
            "location": 150,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WbCup.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "Union[(WbQuery, str, Tuple[(str, ...)])]"
                ],
                "rhs": [
                    "Union[(WbQuery, str, Tuple[(str, ...)])]"
                ]
            }
        },
        "WbCup.eval": {
            "name": "eval",
            "location": 158,
            "return": [
                "Set[Tuple[(Tuple[(str, ...)], FrozenSet[RecordId])]]"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "Dict[(str, Set[TimestampedRecord])]"
                ]
            }
        },
        "WbCup.__str__": {
            "name": "__str__",
            "location": 161,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WbCup.__repr__": {
            "name": "__repr__",
            "location": 164,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WbDiff.__init__": {
            "name": "__init__",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lhs": [
                    "Union[(WbQuery, str, Tuple[(str, ...)])]"
                ],
                "rhs": [
                    "Union[(WbQuery, str, Tuple[(str, ...)])]"
                ]
            }
        },
        "WbDiff.eval": {
            "name": "eval",
            "location": 172,
            "return": [
                "Set[Tuple[(Tuple[(str, ...)], FrozenSet[RecordId])]]"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "Dict[(str, Set[TimestampedRecord])]"
                ]
            }
        },
        "WbDiff.__str__": {
            "name": "__str__",
            "location": 178,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WbDiff.__repr__": {
            "name": "__repr__",
            "location": 181,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WhiteBox.__init__": {
            "name": "__init__",
            "location": 199,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WhiteBox.create_table": {
            "name": "create_table",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "arity": [
                    "int"
                ]
            }
        },
        "WhiteBox.register_rules": {
            "name": "register_rules",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "rules": [
                    "List[Rule]"
                ]
            }
        },
        "WhiteBox._flatten_lineage": {
            "name": "_flatten_lineage",
            "location": 219,
            "return": [
                "Set[RecordId]"
            ],
            "arguments": {
                "self": [],
                "lineage": [
                    "Set[FrozenSet[RecordId]]"
                ]
            }
        },
        "WhiteBox.get_output_lineage": {
            "name": "get_output_lineage",
            "location": 229,
            "return": [
                "Dict[(RecordId, List[Tuple[(int, Input, Output)]])]"
            ],
            "arguments": {
                "self": [],
                "j": [
                    "int"
                ]
            }
        },
        "WhiteBox.reset": {
            "name": "reset",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WhiteBox.transition": {
            "name": "transition",
            "location": 248,
            "return": [
                "Output"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "Input"
                ]
            }
        }
    },
    "wat-master/wat/__init__.py": {}
}
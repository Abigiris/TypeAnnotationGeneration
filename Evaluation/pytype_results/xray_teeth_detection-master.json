{
    "xray_teeth_detection-master/.vscode/.ropeproject/config.py": {
        "set_prefs": {
            "name": "set_prefs",
            "location": 5,
            "return": [],
            "arguments": {
                "prefs": []
            }
        },
        "project_opened": {
            "name": "project_opened",
            "location": 110,
            "return": [],
            "arguments": {
                "project": []
            }
        }
    },
    "xray_teeth_detection-master/src/active_shape_model.py": {
        "ActiveShapeModel.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mean_shape": [],
                "eigenvectors": [],
                "eigenvalues": [],
                "profiles": []
            }
        },
        "ActiveShapeModel.__len__": {
            "name": "__len__",
            "location": 43,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActiveShapeModel.match_target": {
            "name": "match_target",
            "location": 50,
            "return": [
                "Tuple[(shape.Shape, Any)]"
            ],
            "arguments": {
                "self": [],
                "target_shape": [],
                "shape_params": []
            }
        },
        "ActiveShapeModel.create_shape": {
            "name": "create_shape",
            "location": 77,
            "return": [
                "shape.Shape"
            ],
            "arguments": {
                "self": [],
                "shape_parameters": []
            }
        },
        "ActiveShapeModel.update_shape_parameters": {
            "name": "update_shape_parameters",
            "location": 90,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "target_shape": []
            }
        },
        "ActiveShapeModel.fit_to_image": {
            "name": "fit_to_image",
            "location": 100,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "initial_imgshp": []
            }
        },
        "ActiveShapeModel.check_convergence": {
            "name": "check_convergence",
            "location": 135,
            "return": [
                "Any"
            ],
            "arguments": {
                "array_1": [],
                "array_2": [],
                "max_delta": []
            }
        },
        "ActiveShapeModel.from_image_shapes": {
            "name": "from_image_shapes",
            "location": 144,
            "return": [
                "_TActiveShapeModel@@ActiveShapeModel@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TActiveShapeModel]"
                ],
                "image_shapes": [],
                "des_expvar_ratio": []
            }
        },
        "ActiveShapeModel.propose_shape": {
            "name": "propose_shape",
            "location": 170,
            "return": [
                "shape.Shape"
            ],
            "arguments": {
                "self": [],
                "image_shape": []
            }
        }
    },
    "xray_teeth_detection-master/src/active_shape_model_test.py": {
        "ActiveShapeModelTest.test_from_image_shapes": {
            "name": "test_from_image_shapes",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActiveShapeModelTest.test_align_shapes": {
            "name": "test_align_shapes",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActiveShapeModelTest.test_match_target": {
            "name": "test_match_target",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActiveShapeModelTest.test_propose_shape": {
            "name": "test_propose_shape",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActiveShapeModelTest.test_fit_to_image": {
            "name": "test_fit_to_image",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "xray_teeth_detection-master/src/auto_initializator.py": {
        "AutoInitializator.initialize": {
            "name": "initialize",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "xray_teeth_detection-master/src/data_preprocessing.py": {
        "Preprocessor.apply": {
            "name": "apply",
            "location": 17,
            "return": [
                "list"
            ],
            "arguments": {
                "pipeline": [],
                "images": []
            }
        },
        "Preprocessor.bilateral": {
            "name": "bilateral",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {
                "image": [],
                "diameter": [],
                "sigma_color": [],
                "sigma_space": [],
                "times": []
            }
        },
        "Preprocessor.median_filter": {
            "name": "median_filter",
            "location": 39,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "img": [],
                "ksize": [],
                "times": []
            }
        },
        "Preprocessor.errosion": {
            "name": "errosion",
            "location": 46,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "img": [],
                "ksize": []
            }
        },
        "Preprocessor.dilatation": {
            "name": "dilatation",
            "location": 50,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "img": [],
                "ksize": []
            }
        },
        "Preprocessor.top_hat_processing": {
            "name": "top_hat_processing",
            "location": 54,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "img": [],
                "ksize": []
            }
        },
        "Preprocessor.laplacian": {
            "name": "laplacian",
            "location": 59,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "img": []
            }
        },
        "Preprocessor.show_image": {
            "name": "show_image",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "img": []
            }
        },
        "Preprocessor.sobel": {
            "name": "sobel",
            "location": 68,
            "return": [
                "Any"
            ],
            "arguments": {
                "img": [],
                "scale": [],
                "delta": []
            }
        },
        "Preprocessor.apply_scharr": {
            "name": "apply_scharr",
            "location": 80,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "img": [],
                "scale": [],
                "delta": []
            }
        },
        "Preprocessor.apply.apply_fn": {
            "name": "apply_fn",
            "location": 22,
            "return": [],
            "arguments": {
                "obj": [],
                "fun": []
            }
        }
    },
    "xray_teeth_detection-master/src/evaluator.py": {
        "Evaluator.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial": [],
                "expected": [],
                "printable": []
            }
        },
        "Evaluator.quantitative_eval": {
            "name": "quantitative_eval",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Evaluator.root_mean_squared_error": {
            "name": "root_mean_squared_error",
            "location": 69,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "actual": [],
                "expected": []
            }
        },
        "Evaluator.qualitative_eval": {
            "name": "qualitative_eval",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Evaluator.save_image_shape": {
            "name": "save_image_shape",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image_shape": [],
                "filename": []
            }
        }
    },
    "xray_teeth_detection-master/src/gray_level_profile.py": {
        "GrayLevelProfile.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "mean_profile": [],
                "covariance": [],
                "half_sampling_size": []
            }
        },
        "GrayLevelProfile.mahalanobis_distance": {
            "name": "mahalanobis_distance",
            "location": 28,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "sample": []
            }
        },
        "GrayLevelProfile.point_pos_from_profiles_list": {
            "name": "point_pos_from_profiles_list",
            "location": 34,
            "return": [
                "Any"
            ],
            "arguments": {
                "profile_index": [],
                "profiles_count": [],
                "original_point": [],
                "direction_vector": []
            }
        },
        "GrayLevelProfile.point_pos_from_single_profile": {
            "name": "point_pos_from_single_profile",
            "location": 64,
            "return": [
                "Any"
            ],
            "arguments": {
                "elem_idx": [],
                "elem_count": [],
                "original_point": [],
                "direction_vector": []
            }
        },
        "GrayLevelProfile.from_image_shapes": {
            "name": "from_image_shapes",
            "location": 87,
            "return": [
                "List[GrayLevelProfile]"
            ],
            "arguments": {
                "cls": [],
                "images": [],
                "half_sampling_size": []
            }
        },
        "GrayLevelProfile.sliding_profiles": {
            "name": "sliding_profiles",
            "location": 113,
            "return": [
                "Any"
            ],
            "arguments": {
                "cls": [],
                "image": [],
                "center_point": [],
                "direction_vector": [],
                "half_sampling_size": [],
                "profile_count": [],
                "processing_fn": []
            }
        },
        "GrayLevelProfile.normalize": {
            "name": "normalize",
            "location": 154,
            "return": [
                "Any"
            ],
            "arguments": {
                "samples": []
            }
        },
        "GrayLevelProfile.rotate_and_center_image": {
            "name": "rotate_and_center_image",
            "location": 164,
            "return": [
                "Any"
            ],
            "arguments": {
                "image": [],
                "center_point": [],
                "direction_vector": []
            }
        }
    },
    "xray_teeth_detection-master/src/gray_level_profile_test.py": {
        "GrayLevelProfileTest.test_rotate_and_center_image": {
            "name": "test_rotate_and_center_image",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrayLevelProfileTest.test_all_from_image_shapes": {
            "name": "test_all_from_image_shapes",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrayLevelProfileTest.test_sliding_profiles": {
            "name": "test_sliding_profiles",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GrayLevelProfileTest.test_point_pos_from_profiles_list": {
            "name": "test_point_pos_from_profiles_list",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "xray_teeth_detection-master/src/image_shape.py": {},
    "xray_teeth_detection-master/src/imgutils.py": {
        "load_images": {
            "name": "load_images",
            "location": 9,
            "return": [
                "list"
            ],
            "arguments": {
                "indices": [],
                "extra_text": [],
                "flags": []
            }
        },
        "apply_median_blur": {
            "name": "apply_median_blur",
            "location": 21,
            "return": [
                "Union[(list, _T0)]"
            ],
            "arguments": {
                "images": [
                    "_T0@@"
                ],
                "kernel_size": [],
                "times": []
            }
        },
        "top_hat_processing": {
            "name": "top_hat_processing",
            "location": 28,
            "return": [
                "list"
            ],
            "arguments": {
                "images": [],
                "ksize": []
            }
        },
        "apply_sobel": {
            "name": "apply_sobel",
            "location": 33,
            "return": [
                "list"
            ],
            "arguments": {
                "images": [],
                "scale": [],
                "delta": []
            }
        },
        "_apply_sobel_single_img": {
            "name": "_apply_sobel_single_img",
            "location": 41,
            "return": [
                "Any"
            ],
            "arguments": {
                "image": [],
                "scale": [],
                "delta": []
            }
        }
    },
    "xray_teeth_detection-master/src/incisors.py": {
        "Incisors.active_shape_models": {
            "name": "active_shape_models",
            "location": 19,
            "return": [
                "Tuple[(Dict[(Any, active_shape_model.ActiveShapeModel)], Dict[(Any, list)])]"
            ],
            "arguments": {
                "cls": [],
                "images": [],
                "incisors": []
            }
        }
    },
    "xray_teeth_detection-master/src/main.py": {
        "preprocess": {
            "name": "preprocess",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "evaluate": {
            "name": "evaluate",
            "location": 46,
            "return": [],
            "arguments": {
                "auto": []
            }
        }
    },
    "xray_teeth_detection-master/src/manual_initializator.py": {
        "Initializator.initialize": {
            "name": "initialize",
            "location": 19,
            "return": [
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "asm_dict": [],
                "images": []
            }
        },
        "ManualInitializator.initialize": {
            "name": "initialize",
            "location": 160,
            "return": [
                "Dict[(incisors.Incisors, Any)]"
            ],
            "arguments": {
                "cls": [],
                "asm_dict": [],
                "images": []
            }
        },
        "ManualInitializator.find_image_shapes": {
            "name": "find_image_shapes",
            "location": 170,
            "return": [
                "list"
            ],
            "arguments": {
                "cls": [],
                "incisor": [],
                "asm_dict": [],
                "images": []
            }
        },
        "ManualInitializator._min_hardcoded_length": {
            "name": "_min_hardcoded_length",
            "location": 182,
            "return": [
                "int"
            ],
            "arguments": {
                "cls": []
            }
        }
    },
    "xray_teeth_detection-master/src/point.py": {
        "Point.add_noise": {
            "name": "add_noise",
            "location": 14,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Point.round": {
            "name": "round",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Point.__add__": {
            "name": "__add__",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Point.__sub__": {
            "name": "__sub__",
            "location": 30,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Point.__truediv__": {
            "name": "__truediv__",
            "location": 33,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "xray_teeth_detection-master/src/point_test.py": {
        "PointTest.test_add_noise": {
            "name": "test_add_noise",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "xray_teeth_detection-master/src/shape.py": {
        "Shape.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "points": [],
                "gray_level_profiles": []
            }
        },
        "Shape.__len__": {
            "name": "__len__",
            "location": 19,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shape.norm": {
            "name": "norm",
            "location": 22,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shape.as_vector": {
            "name": "as_vector",
            "location": 26,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shape.as_point_list": {
            "name": "as_point_list",
            "location": 31,
            "return": [
                "List[point.Point]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shape.x_vector": {
            "name": "x_vector",
            "location": 35,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shape.y_vector": {
            "name": "y_vector",
            "location": 39,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shape.align": {
            "name": "align",
            "location": 44,
            "return": [
                "Tuple[(Any, np.ndarray, Any)]"
            ],
            "arguments": {
                "self": [],
                "original_ref_shape": [],
                "modify": []
            }
        },
        "Shape.conform_to_rect": {
            "name": "conform_to_rect",
            "location": 99,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": [],
                "bottom_left": [],
                "top_right": []
            }
        },
        "Shape.axis_means": {
            "name": "axis_means",
            "location": 119,
            "return": [
                "Any"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shape.translate_to_origin": {
            "name": "translate_to_origin",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shape.translated_to_point": {
            "name": "translated_to_point",
            "location": 126,
            "return": [
                "_TShape@@Shape@@"
            ],
            "arguments": {
                "self": [
                    "_TShape@@Shape@@"
                ],
                "point": []
            }
        },
        "Shape.translated_to_origin": {
            "name": "translated_to_origin",
            "location": 130,
            "return": [
                "_TShape@@Shape@@"
            ],
            "arguments": {
                "self": [
                    "_TShape@@Shape@@"
                ]
            }
        },
        "Shape.get_orthogonal_vectors": {
            "name": "get_orthogonal_vectors",
            "location": 135,
            "return": [
                "Union[(List[point.Point], Tuple[(List[point.Point], Any)])]"
            ],
            "arguments": {
                "self": [],
                "with_tck": []
            }
        },
        "Shape.apply_procrustes": {
            "name": "apply_procrustes",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [],
                "shapes": []
            }
        },
        "Shape.mean_from_many": {
            "name": "mean_from_many",
            "location": 186,
            "return": [
                "_TShape@@Shape@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TShape]"
                ],
                "shapes": []
            }
        },
        "Shape.translate_all_to_origin": {
            "name": "translate_all_to_origin",
            "location": 192,
            "return": [
                "_T0@@"
            ],
            "arguments": {
                "cls": [],
                "shapes": [
                    "_T0@@"
                ]
            }
        },
        "Shape.align_many": {
            "name": "align_many",
            "location": 199,
            "return": [
                "_T1@@"
            ],
            "arguments": {
                "cls": [],
                "ref_shape": [],
                "shapes": [
                    "_T1@@"
                ]
            }
        },
        "Shape.from_vector": {
            "name": "from_vector",
            "location": 206,
            "return": [
                "_TShape@@Shape@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TShape]"
                ],
                "vector": []
            }
        },
        "Shape.copy": {
            "name": "copy",
            "location": 210,
            "return": [
                "_TShape@@Shape@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TShape]"
                ],
                "source": []
            }
        },
        "Shape.from_file": {
            "name": "from_file",
            "location": 215,
            "return": [
                "_TShape@@Shape@@"
            ],
            "arguments": {
                "cls": [
                    "Type[_TShape]"
                ],
                "image_index": [],
                "incisor_index": []
            }
        }
    },
    "xray_teeth_detection-master/src/shapeutils.py": {
        "plot_shape": {
            "name": "plot_shape",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "shapes": [],
                "overlay_image": [],
                "display": [],
                "dots": []
            }
        },
        "plot_point": {
            "name": "plot_point",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "points": [],
                "display": []
            }
        },
        "plot_vecs": {
            "name": "plot_vecs",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "vectors": [],
                "points": [],
                "display": []
            }
        },
        "plot_interpol": {
            "name": "plot_interpol",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "tck": [],
                "display": []
            }
        },
        "plot_rectangle": {
            "name": "plot_rectangle",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "bottom_left": [],
                "top_right": [],
                "display": []
            }
        },
        "plot_profile": {
            "name": "plot_profile",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "profiles": [],
                "display": []
            }
        },
        "plot_image_shape": {
            "name": "plot_image_shape",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "image_shapes": [],
                "display": [],
                "dots": [],
                "interpol": [],
                "vecs": []
            }
        }
    },
    "xray_teeth_detection-master/src/shapeutils_test.py": {
        "ShapeutilsTest.test_plot_vecs": {
            "name": "test_plot_vecs",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShapeutilsTest.test_interpol": {
            "name": "test_interpol",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShapeutilsTest.test_plot_image_shape": {
            "name": "test_plot_image_shape",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShapeutilsTest.test_plot_profile": {
            "name": "test_plot_profile",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "xray_teeth_detection-master/src/shape_test.py": {
        "ShapeTest.test_translate_all_to_origin": {
            "name": "test_translate_all_to_origin",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShapeTest.test_align_shapes": {
            "name": "test_align_shapes",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShapeTest.test_get_orthogonal_vectors": {
            "name": "test_get_orthogonal_vectors",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShapeTest.test_as_point_list": {
            "name": "test_as_point_list",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShapeTest.test_x_vector": {
            "name": "test_x_vector",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShapeTest.test_y_vector": {
            "name": "test_y_vector",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShapeTest.test_conform_to_rect": {
            "name": "test_conform_to_rect",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShapeTest.test_apply_procrustes": {
            "name": "test_apply_procrustes",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "xray_teeth_detection-master/src/testing.py": {},
    "xray_teeth_detection-master/src/testutils.py": {
        "create_diagonal_test_image": {
            "name": "create_diagonal_test_image",
            "location": 17,
            "return": [
                "Any"
            ],
            "arguments": {
                "l": []
            }
        },
        "create_circle_at_origin": {
            "name": "create_circle_at_origin",
            "location": 27,
            "return": [
                "Any"
            ],
            "arguments": {
                "l": [],
                "r": [],
                "m": []
            }
        },
        "load_incisor": {
            "name": "load_incisor",
            "location": 66,
            "return": [
                "Tuple[(Any, Any)]"
            ],
            "arguments": {
                "incisor": [],
                "extra_text": [],
                "blur": [],
                "sobel": []
            }
        },
        "image_shape_with_noise": {
            "name": "image_shape_with_noise",
            "location": 84,
            "return": [
                "Any"
            ],
            "arguments": {
                "image_shape": []
            }
        },
        "ShapeAssertions.assert_shape_equal": {
            "name": "assert_shape_equal",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "actual": [],
                "desired": []
            }
        },
        "ShapeAssertions.assert_shape_approx_equal": {
            "name": "assert_shape_approx_equal",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "actual": [],
                "desired": [],
                "significant": []
            }
        }
    },
    "xray_teeth_detection-master/src/ui.py": {}
}
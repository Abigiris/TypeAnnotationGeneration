{
    "AHKManager-master/setup.py": {},
    "AHKManager-master/scripts/post_process.py": {
        "get_all_unnecessary_files": {
            "name": "get_all_unnecessary_files",
            "location": 26,
            "return": [
                "str",
                "Dict[str, str]",
                "IO",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "delete_files": {
            "name": "delete_files",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "file_paths": [
                    "str",
                    "bool",
                    "List[str]",
                    "Set[str]"
                ]
            }
        },
        "cleanup_dist": {
            "name": "cleanup_dist",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "post_process": {
            "name": "post_process",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "AHKManager-master/src/ahk_manager.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "AHKManager-master/src/__init__.py": {},
    "AHKManager-master/src/app/console.py": {},
    "AHKManager-master/src/app/add_script_dialog/add_script_to_library_dialog.py": {},
    "AHKManager-master/src/app/add_script_dialog/add_script_to_profile_dialog.py": {
        "AddScriptToProfileDialog.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "dict",
                    "str",
                    "PyQt5.QtWidgets.QWidget",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "AddScriptToProfileDialog._init": {
            "name": "_init",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AddScriptToProfileDialog.get_selected_scripts": {
            "name": "get_selected_scripts",
            "location": 109,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddScriptToProfileDialog.on_ok_button_clicked": {
            "name": "on_ok_button_clicked",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AddScriptToProfileDialog.on_cancel_button_clicked": {
            "name": "on_cancel_button_clicked",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AddScriptToProfileDialog.on_add_button_clicked": {
            "name": "on_add_button_clicked",
            "location": 120,
            "return": [
                "app.models.Article"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddScriptToProfileDialog.on_add_all_button_clicked": {
            "name": "on_add_all_button_clicked",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AddScriptToProfileDialog.on_remove_all_button_clicked": {
            "name": "on_remove_all_button_clicked",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AddScriptToProfileDialog.on_remove_button_clicked": {
            "name": "on_remove_button_clicked",
            "location": 159,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddScriptToProfileDialog.on_available_script_table_item_double_clicked": {
            "name": "on_available_script_table_item_double_clicked",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict",
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "AddScriptToProfileDialog.on_selected_script_table_item_double_clicked": {
            "name": "on_selected_script_table_item_double_clicked",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict",
                    "int",
                    "str",
                    "T"
                ]
            }
        },
        "AddScriptToProfileDialog.closeEvent": {
            "name": "closeEvent",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": [
                    "bool",
                    "float"
                ]
            }
        },
        "AddScriptToProfileDialog._init_available_scripts": {
            "name": "_init_available_scripts",
            "location": 186,
            "return": [
                "Dict[str, Dict[str, int]]",
                "str",
                "Dict[str, Any]",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddScriptToProfileDialog._select_script": {
            "name": "_select_script",
            "location": 205,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "script_id": [
                    "int",
                    "busboy.model.StopId",
                    "bytes",
                    "dict"
                ]
            }
        },
        "AddScriptToProfileDialog._unselect_script": {
            "name": "_unselect_script",
            "location": 216,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "script_id": [
                    "int",
                    "busboy.model.StopId",
                    "bytes",
                    "dict"
                ]
            }
        }
    },
    "AHKManager-master/src/app/add_script_dialog/component/add_script_dialog_table_widget.py": {
        "AddScriptDialogTableWidget.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "dict",
                    "str",
                    "PyQt5.QtWidgets.QWidget",
                    "Sequence[str]",
                    "bool"
                ],
                "scripts": [
                    "Set[str]",
                    "int",
                    "Optional[Mapping]",
                    "Type['AbstractIntegrationConversation']",
                    "bool",
                    "str",
                    "Optional[List[Any]]"
                ]
            }
        },
        "AddScriptDialogTableWidget.get_scripts": {
            "name": "get_scripts",
            "location": 30,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddScriptDialogTableWidget.open_menu": {
            "name": "open_menu",
            "location": 40,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "Union[tuple, list]",
                "str"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "str",
                    "PyQt5.QtCore.QPoint",
                    "bytes",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "AHKManager-master/src/app/application/application.py": {
        "Application.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AHKManager-master/src/app/application/app_service.py": {
        "AppService.get_library_list": {
            "name": "get_library_list",
            "location": 23,
            "return": [
                "Callable",
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppService.get_profile_list": {
            "name": "get_profile_list",
            "location": 26,
            "return": [
                "Callable",
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppService.get_selected_library_scripts": {
            "name": "get_selected_library_scripts",
            "location": 29,
            "return": [
                "List[str]",
                "bytes",
                "Optional[str]",
                "List[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppService.get_selected_profile_scripts": {
            "name": "get_selected_profile_scripts",
            "location": 36,
            "return": [
                "str",
                "List[Tuple[str, int]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppService.refresh": {
            "name": "refresh",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AppService.save_configuration": {
            "name": "save_configuration",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AppService.on_profile_selected": {
            "name": "on_profile_selected",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "AppService.on_library_selected": {
            "name": "on_library_selected",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "AppService._exec_events": {
            "name": "_exec_events",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "events": [
                    "bool",
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "AHKManager-master/src/app/main_window/main_window.py": {
        "MainWindow.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow._init": {
            "name": "_init",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow.closeEvent": {
            "name": "closeEvent",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "bool",
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "MainWindow.changeEvent": {
            "name": "changeEvent",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "Dict[str, Any]",
                    "PyQt5.QtCore.QEvent"
                ]
            }
        },
        "MainWindow.refresh": {
            "name": "refresh",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow._load_configs": {
            "name": "_load_configs",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow._create_menus": {
            "name": "_create_menus",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindow._show_settings": {
            "name": "_show_settings",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AHKManager-master/src/app/main_window/component/error_dialog.py": {
        "ErrorDialog.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "blurr.core.schema_loader.SchemaLoader",
                    "pymatgen.core.composition.Composition"
                ],
                "action_result": [
                    "str",
                    "int",
                    "bool",
                    "List[List[int]]",
                    "Optional[str]",
                    "List[int]"
                ]
            }
        },
        "ErrorDialog._init": {
            "name": "_init",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AHKManager-master/src/app/main_window/component/library_list_widget.py": {
        "LibraryListWidget.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "dict",
                    "str",
                    "PyQt5.QtWidgets.QWidget",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "LibraryListWidget.on_selection_changed": {
            "name": "on_selection_changed",
            "location": 22,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibraryListWidget.get_containers": {
            "name": "get_containers",
            "location": 33,
            "return": [
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibraryListWidget.open_menu": {
            "name": "open_menu",
            "location": 36,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "Union[tuple, list]",
                "str"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "str",
                    "core.models.Grouping",
                    "core.models.Registration"
                ]
            }
        },
        "LibraryListWidget._add": {
            "name": "_add",
            "location": 80,
            "return": [
                "app.models.Article"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibraryListWidget._remove": {
            "name": "_remove",
            "location": 96,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "List[src.app.main_window.componenlist_widget_item.ListWidgetItem]",
                    "int",
                    "T",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "LibraryListWidget._start": {
            "name": "_start",
            "location": 111,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "List[src.app.main_window.componenlist_widget_item.ListWidgetItem]",
                    "bool",
                    "str",
                    "Iterable[T]"
                ]
            }
        },
        "LibraryListWidget._open_in_explorer": {
            "name": "_open_in_explorer",
            "location": 123,
            "return": [
                "Union[tuple, list]",
                "str",
                "Dict[str, Any]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "List[src.app.main_window.componenlist_widget_item.ListWidgetItem]",
                    "List[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "LibraryListWidget._stop": {
            "name": "_stop",
            "location": 134,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "List[src.app.main_window.componenlist_widget_item.ListWidgetItem]",
                    "int",
                    "T",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "LibraryListWidget._post_process": {
            "name": "_post_process",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "result": [
                    "bool",
                    "dict"
                ]
            }
        },
        "LibraryListWidget._show_error_dialog": {
            "name": "_show_error_dialog",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "result": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "kedro.io.core.AbstractDataSet"
                ]
            }
        }
    },
    "AHKManager-master/src/app/main_window/component/library_page.py": {
        "LibraryPage.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "dict",
                    "str",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "LibraryPage.refresh": {
            "name": "refresh",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AHKManager-master/src/app/main_window/component/library_table_widget.py": {
        "LibraryTableWidget.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "dict",
                    "str",
                    "PyQt5.QtWidgets.QWidget",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "LibraryTableWidget.on_selected_library_changed": {
            "name": "on_selected_library_changed",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LibraryTableWidget.get_scripts": {
            "name": "get_scripts",
            "location": 49,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibraryTableWidget.open_menu": {
            "name": "open_menu",
            "location": 52,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "Union[tuple, list]",
                "str"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "str",
                    "core.models.Grouping",
                    "core.models.Registration"
                ]
            }
        },
        "LibraryTableWidget._remove": {
            "name": "_remove",
            "location": 89,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "list",
                    "List[int]",
                    "List[str]"
                ]
            }
        },
        "LibraryTableWidget._start": {
            "name": "_start",
            "location": 103,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "list",
                    "List[int]",
                    "int"
                ]
            }
        },
        "LibraryTableWidget._stop": {
            "name": "_stop",
            "location": 115,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "list",
                    "List[int]",
                    "List[str]"
                ]
            }
        },
        "LibraryTableWidget._open_in_explorer": {
            "name": "_open_in_explorer",
            "location": 127,
            "return": [
                "Union[tuple, list]",
                "str",
                "Dict[str, Any]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "list",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "LibraryTableWidget._post_process": {
            "name": "_post_process",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "result": [
                    "bool",
                    "dict"
                ]
            }
        },
        "LibraryTableWidget._show_error_dialog": {
            "name": "_show_error_dialog",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "result": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "kedro.io.core.AbstractDataSet"
                ]
            }
        }
    },
    "AHKManager-master/src/app/main_window/component/list_widget.py": {
        "ListWidget.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "Optional[Union[int, float]]"
                ]
            }
        },
        "ListWidget._init": {
            "name": "_init",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ListWidget.get_containers": {
            "name": "get_containers",
            "location": 36,
            "return": [
                "typing.List"
            ],
            "arguments": {
                "self": []
            }
        },
        "ListWidget.open_menu": {
            "name": "open_menu",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "position": [
                    "str",
                    "PyQt5.QtCore.QPoint",
                    "bytes",
                    "bool",
                    "int"
                ]
            }
        },
        "ListWidget.on_selection_changed": {
            "name": "on_selection_changed",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ListWidget.refresh": {
            "name": "refresh",
            "location": 62,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AHKManager-master/src/app/main_window/component/list_widget_item.py": {
        "ListWidgetItem.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "Optional[str]",
                    "Optional[List]",
                    "bool"
                ],
                "display_text": [
                    "int",
                    "Optional[int]",
                    "bool",
                    "str"
                ],
                "identifier": [
                    "str",
                    "Callable[[str], str]",
                    "Optional[Any]",
                    "Optional[str]"
                ],
                "is_running": [
                    "bool",
                    "dict",
                    "Iterable[Tuple[Hashable, Any]]"
                ],
                "is_paused": [
                    "bool",
                    "dict",
                    "Iterable[Tuple[Hashable, Any]]"
                ]
            }
        }
    },
    "AHKManager-master/src/app/main_window/component/profile_list_widget.py": {
        "ProfileListWidget.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "dict",
                    "str",
                    "PyQt5.QtWidgets.QWidget",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "ProfileListWidget.on_selection_changed": {
            "name": "on_selection_changed",
            "location": 21,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileListWidget.get_containers": {
            "name": "get_containers",
            "location": 32,
            "return": [
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileListWidget.open_menu": {
            "name": "open_menu",
            "location": 35,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "Union[tuple, list]",
                "str"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "str",
                    "core.models.Grouping",
                    "core.models.Registration"
                ]
            }
        },
        "ProfileListWidget._add": {
            "name": "_add",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileListWidget._remove": {
            "name": "_remove",
            "location": 82,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "List[src.app.main_window.componenlist_widget_item.ListWidgetItem]",
                    "int",
                    "T",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "ProfileListWidget._start": {
            "name": "_start",
            "location": 93,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "List[src.app.main_window.componenlist_widget_item.ListWidgetItem]",
                    "bool",
                    "str",
                    "Iterable[T]"
                ]
            }
        },
        "ProfileListWidget._stop": {
            "name": "_stop",
            "location": 104,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "List[src.app.main_window.componenlist_widget_item.ListWidgetItem]",
                    "int",
                    "T",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "ProfileListWidget._post_process": {
            "name": "_post_process",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "result": [
                    "bool",
                    "dict"
                ]
            }
        },
        "ProfileListWidget._show_error_dialog": {
            "name": "_show_error_dialog",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "result": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "kedro.io.core.AbstractDataSet"
                ]
            }
        }
    },
    "AHKManager-master/src/app/main_window/component/profile_page.py": {
        "ProfilePage.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "dict",
                    "str",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "ProfilePage.refresh": {
            "name": "refresh",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AHKManager-master/src/app/main_window/component/profile_table_widget.py": {
        "ProfileTableWidget.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "dict",
                    "str",
                    "PyQt5.QtWidgets.QWidget",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "ProfileTableWidget.on_selected_profile_changed": {
            "name": "on_selected_profile_changed",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileTableWidget.get_scripts": {
            "name": "get_scripts",
            "location": 53,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileTableWidget.open_menu": {
            "name": "open_menu",
            "location": 56,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "Union[tuple, list]",
                "str"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "str",
                    "core.models.Grouping",
                    "core.models.Registration"
                ]
            }
        },
        "ProfileTableWidget._add": {
            "name": "_add",
            "location": 101,
            "return": [
                "app.models.Article",
                "Callable[[], Dict[str, object]]",
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileTableWidget._remove": {
            "name": "_remove",
            "location": 121,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "list",
                    "gluonts.model.common.Tensor",
                    "List[int]"
                ]
            }
        },
        "ProfileTableWidget._start": {
            "name": "_start",
            "location": 136,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "list",
                    "List[int]",
                    "int"
                ]
            }
        },
        "ProfileTableWidget._stop": {
            "name": "_stop",
            "location": 148,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "list",
                    "List[int]",
                    "List[str]"
                ]
            }
        },
        "ProfileTableWidget._open_in_explorer": {
            "name": "_open_in_explorer",
            "location": 160,
            "return": [
                "Union[tuple, list]",
                "str",
                "Dict[str, Any]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "list",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "ProfileTableWidget._post_process": {
            "name": "_post_process",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "result": [
                    "bool",
                    "dict"
                ]
            }
        },
        "ProfileTableWidget._show_error_dialog": {
            "name": "_show_error_dialog",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "result": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "kedro.io.core.AbstractDataSet"
                ]
            }
        }
    },
    "AHKManager-master/src/app/main_window/component/shared_component.py": {
        "get_search_box": {
            "name": "get_search_box",
            "location": 4,
            "return": [
                "str",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "parent": [
                    "str",
                    "Sequence[float]",
                    "dict",
                    "float",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "AHKManager-master/src/app/main_window/component/table_widget.py": {
        "TableWidget.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "Optional[str]",
                    "Tuple[type]"
                ]
            }
        },
        "TableWidget._init": {
            "name": "_init",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TableWidget.get_scripts": {
            "name": "get_scripts",
            "location": 68,
            "return": [
                "typing.List[src.core.model.script.Script]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableWidget.open_menu": {
            "name": "open_menu",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "position": [
                    "str",
                    "PyQt5.QtCore.QPoint",
                    "bytes",
                    "bool",
                    "int"
                ]
            }
        },
        "TableWidget.refresh": {
            "name": "refresh",
            "location": 78,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AHKManager-master/src/app/main_window/component/table_widget_item.py": {
        "TableWidgetItem.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "script_id": [
                    "Optional[str]",
                    "str",
                    "List[int]",
                    "int"
                ],
                "text": [
                    "int",
                    "str",
                    "bool",
                    "float"
                ],
                "is_running": [
                    "bool",
                    "Optional[str]",
                    "Iterable[object]",
                    "Optional[List[str]]"
                ],
                "is_paused": [
                    "bool",
                    "Optional[str]",
                    "Iterable[object]",
                    "Optional[List[str]]"
                ]
            }
        },
        "CheckBoxCellWidget.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "script_id": [
                    "int",
                    "str"
                ],
                "is_checked": [
                    "bytes",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "AHKManager-master/src/app/main_window/component/tab_page.py": {
        "TabPage.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "dict",
                    "str",
                    "PyQt5.QtWidgets.QWidget",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "TabPage.refresh": {
            "name": "refresh",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AHKManager-master/src/app/main_window/component/tab_widget.py": {
        "TabWidget.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "str",
                    "List[str]",
                    "bool",
                    "PyQt5.QtWidgets.QApplication",
                    "PyQt5.QtWidgets.QWidget",
                    "dict"
                ]
            }
        },
        "TabWidget.on_selected_tab_changed": {
            "name": "on_selected_tab_changed",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Sequence[int]",
                    "str"
                ]
            }
        },
        "TabWidget.refresh": {
            "name": "refresh",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AHKManager-master/src/app/main_window/component/tray_icon.py": {
        "TrayIcon.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Tuple[str]"
                ]
            }
        },
        "TrayIcon.on_activated": {
            "name": "on_activated",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TrayIcon.show_triggered": {
            "name": "show_triggered",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TrayIcon.on_exit_triggered": {
            "name": "on_exit_triggered",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TrayIcon.on_stop_triggered": {
            "name": "on_stop_triggered",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TrayIcon.on_pause_triggered": {
            "name": "on_pause_triggered",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TrayIcon.on_resume_triggered": {
            "name": "on_resume_triggered",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TrayIcon._show_message_box": {
            "name": "_show_message_box",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int",
                    "Tuple[str, str]"
                ]
            }
        },
        "TrayIcon._refresh_main_window": {
            "name": "_refresh_main_window",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AHKManager-master/src/app/setting_dialog/settings_dialog.py": {
        "SettingsDialog.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "dict",
                    "str",
                    "PyQt5.QtWidgets.QWidget",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "SettingsDialog._init": {
            "name": "_init",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingsDialog.on_save_button_clicked": {
            "name": "on_save_button_clicked",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingsDialog.on_cancel_button_clicked": {
            "name": "on_cancel_button_clicked",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingsDialog.on_browse_button_clicked": {
            "name": "on_browse_button_clicked",
            "location": 89,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingsDialog.closeEvent": {
            "name": "closeEvent",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "AHKManager-master/src/core/manager/library_manager.py": {
        "LibraryManager.init_library": {
            "name": "init_library",
            "location": 15,
            "return": [
                "bool",
                "int",
                "Optional[str]",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "LibraryManager.refresh": {
            "name": "refresh",
            "location": 56,
            "return": [
                "bool",
                "dict",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "library": [
                    "src.core.model.library.Library",
                    "str",
                    "Tuple[float]",
                    "List[str]"
                ]
            }
        },
        "LibraryManager.reload": {
            "name": "reload",
            "location": 90,
            "return": [
                "bool",
                "Optional[str]",
                "Union[int, None]",
                "type"
            ],
            "arguments": {
                "self": [],
                "library": [
                    "src.core.model.library.Library",
                    "List[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "LibraryManager.remove": {
            "name": "remove",
            "location": 127,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "library": [
                    "List[int]",
                    "str",
                    "list",
                    "src.core.model.library.Library"
                ]
            }
        },
        "LibraryManager.start": {
            "name": "start",
            "location": 166,
            "return": [
                "bool",
                "Dict[int, int]",
                "List[object]"
            ],
            "arguments": {
                "self": [],
                "library": [
                    "src.core.model.library.Library",
                    "Sequence[int]",
                    "str",
                    "List['cirq.Qid']",
                    "src.core.model.profile.Profile"
                ]
            }
        },
        "LibraryManager.stop": {
            "name": "stop",
            "location": 188,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "library": [
                    "src.core.model.library.Library",
                    "str",
                    "Sequence[int]",
                    "list"
                ]
            }
        },
        "LibraryManager.pause": {
            "name": "pause",
            "location": 210,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "library": [
                    "src.core.model.library.Library",
                    "List[str]"
                ]
            }
        },
        "LibraryManager.resume": {
            "name": "resume",
            "location": 232,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "library": [
                    "src.core.model.library.Library",
                    "src.core.model.profile.Profile",
                    "bool"
                ]
            }
        }
    },
    "AHKManager-master/src/core/manager/process_manager.py": {
        "ProcessManager.start": {
            "name": "start",
            "location": 18,
            "return": [
                "Optional[int]",
                "int",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "ProcessManager.open_explorer": {
            "name": "open_explorer",
            "location": 53,
            "return": [
                "str",
                "bool",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "Optional[Any]"
                ]
            }
        }
    },
    "AHKManager-master/src/core/manager/profile_manager.py": {
        "ProfileManager.init_profile": {
            "name": "init_profile",
            "location": 15,
            "return": [
                "dict",
                "set"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, 'LabwareDefinition']"
                ]
            }
        },
        "ProfileManager.start": {
            "name": "start",
            "location": 32,
            "return": [
                "bool",
                "Dict[int, int]",
                "List[object]"
            ],
            "arguments": {
                "self": [],
                "profile": [
                    "src.core.model.profile.Profile",
                    "int",
                    "list",
                    "List[int]",
                    "src.core.model.library.Library",
                    "List[float]"
                ]
            }
        },
        "ProfileManager.stop": {
            "name": "stop",
            "location": 53,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "profile": [
                    "src.core.model.profile.Profile",
                    "int",
                    "Deque",
                    "Callable[..., bool]"
                ]
            }
        },
        "ProfileManager.restart": {
            "name": "restart",
            "location": 74,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "profile": [
                    "src.core.model.profile.Profile",
                    "Callable[..., bool]",
                    "Deque",
                    "bytes",
                    "int"
                ]
            }
        },
        "ProfileManager.refresh": {
            "name": "refresh",
            "location": 96,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "profile": [
                    "src.core.model.profile.Profile",
                    "src.core.model.library.Library",
                    "Deque",
                    "int"
                ]
            }
        },
        "ProfileManager.add_script": {
            "name": "add_script",
            "location": 131,
            "return": [
                "Optional[int]",
                "type"
            ],
            "arguments": {
                "self": [],
                "profile": [
                    "src.core.model.profile.Profile",
                    "src.core.model.scripScript"
                ],
                "script": [
                    "src.core.model.scripScript",
                    "str",
                    "int"
                ]
            }
        }
    },
    "AHKManager-master/src/core/manager/script_manager.py": {
        "ScriptManager.init_script": {
            "name": "init_script",
            "location": 17,
            "return": [
                "Optional[str]",
                "Optional[float]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "ScriptManager.remove": {
            "name": "remove",
            "location": 44,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "script": [
                    "int",
                    "Coroutine",
                    "src.core.model.library.Library",
                    "bool"
                ]
            }
        },
        "ScriptManager.refresh": {
            "name": "refresh",
            "location": 67,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "script": [
                    "src.core.model.library.Library",
                    "str",
                    "List[str]",
                    "Tuple[float]"
                ]
            }
        },
        "ScriptManager.start": {
            "name": "start",
            "location": 92,
            "return": [
                "int",
                "bool",
                "str",
                "Generator",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "script": []
            }
        },
        "ScriptManager.stop": {
            "name": "stop",
            "location": 117,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "script": [
                    "str",
                    "int",
                    "model.Integration",
                    "bool"
                ]
            }
        },
        "ScriptManager.force_start": {
            "name": "force_start",
            "location": 151,
            "return": [
                "bool",
                "float",
                "list",
                "int"
            ],
            "arguments": {
                "self": [],
                "script": [
                    "dict",
                    "Optional[List[dict]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ScriptManager.restart": {
            "name": "restart",
            "location": 172,
            "return": [
                "Dict[str, Any]",
                "starfish.core.intensity_table.intensity_table.IntensityTable"
            ],
            "arguments": {
                "self": [],
                "script": [
                    "str",
                    "BaseException",
                    "int",
                    "bool"
                ]
            }
        },
        "ScriptManager.pause": {
            "name": "pause",
            "location": 198,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "script": [
                    "str",
                    "int",
                    "model.Integration",
                    "bool"
                ]
            }
        },
        "ScriptManager.resume": {
            "name": "resume",
            "location": 233,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "script": [
                    "dict",
                    "pymatgen.core.structure.Structure",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "ScriptManager._start_script": {
            "name": "_start_script",
            "location": 265,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "script": [
                    "int",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "ScriptManager._is_script_file": {
            "name": "_is_script_file",
            "location": 276,
            "return": [
                "Optional[str]",
                "Mapping[str, Any]",
                "Tuple[str]",
                "List[Dict[str, int]]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "AHKManager-master/src/core/model/action_result.py": {
        "ActionResult.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionResult.add": {
            "name": "add",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "code": [
                    "bytes",
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "dict"
                ],
                "message": [
                    "str",
                    "dict"
                ]
            }
        },
        "ActionResult.add_info": {
            "name": "add_info",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Dict[Any, Union[Any, Any]]",
                    "bool",
                    "Sequence[str]"
                ]
            }
        },
        "ActionResult.add_warning": {
            "name": "add_warning",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "dict",
                    "Iterable",
                    "Tuple[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ActionResult.add_error": {
            "name": "add_error",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict",
                    "Iterable",
                    "str",
                    "List[purplship.core.models.Message]"
                ]
            }
        },
        "ActionResult.merge": {
            "name": "merge",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "result": [
                    "Dict[str, Any]",
                    "starfish.core.types.SpotFindingResults",
                    "bool",
                    "float",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "ActionResult.success": {
            "name": "success",
            "location": 92,
            "return": [
                "str",
                "dict",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionResult.ignore_error": {
            "name": "ignore_error",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionResult.get_result_code": {
            "name": "get_result_code",
            "location": 116,
            "return": [
                "str",
                "Exception",
                "tartare.core.models.Job",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionResult._force_set_code": {
            "name": "_force_set_code",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "int"
                ]
            }
        },
        "ActionResult._set_code": {
            "name": "_set_code",
            "location": 149,
            "return": [
                "str",
                "bytes",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str"
                ]
            }
        }
    },
    "AHKManager-master/src/core/model/app_model.py": {
        "AppModel.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AHKManager-master/src/core/model/configuration_models.py": {
        "UtilityConfiguration.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilityConfiguration.to_json": {
            "name": "to_json",
            "location": 10,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilityConfiguration.from_json": {
            "name": "from_json",
            "location": 23,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "json_str": [
                    "str",
                    "dict",
                    "Optional[List[str]]"
                ]
            }
        },
        "MainWindowConfiguration.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindowConfiguration.to_json": {
            "name": "to_json",
            "location": 42,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainWindowConfiguration.from_json": {
            "name": "from_json",
            "location": 53,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "json_str": [
                    "str",
                    "type"
                ]
            }
        },
        "AddScriptDialogConfiguration.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AddScriptDialogConfiguration.to_json": {
            "name": "to_json",
            "location": 69,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "AddScriptDialogConfiguration.from_json": {
            "name": "from_json",
            "location": 79,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "json_str": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "SettingsDialogConfiguration.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingsDialogConfiguration.to_json": {
            "name": "to_json",
            "location": 94,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "SettingsDialogConfiguration.from_json": {
            "name": "from_json",
            "location": 104,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "json_str": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "AHKManager-master/src/core/model/error_messages.py": {},
    "AHKManager-master/src/core/model/library.py": {
        "Library.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Library.start": {
            "name": "start",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Library.stop": {
            "name": "stop",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Library.pause": {
            "name": "pause",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Library.is_paused": {
            "name": "is_paused",
            "location": 46,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Library.resume": {
            "name": "resume",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Library.add": {
            "name": "add",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "script": [
                    "T"
                ]
            }
        },
        "Library.remove": {
            "name": "remove",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "script": [
                    "str",
                    "float",
                    "src.core.model.library.Library",
                    "Sequence[str]",
                    "Optional[List[Dict]]"
                ]
            }
        },
        "Library.find": {
            "name": "find",
            "location": 74,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "Type['Frame']"
                ]
            }
        },
        "Library.find_running_scripts": {
            "name": "find_running_scripts",
            "location": 93,
            "return": [
                "List[str]",
                "str",
                "List[Dict]",
                "List[T]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Library.has_script": {
            "name": "has_script",
            "location": 103,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "Optional[float]",
                    "bool",
                    "int",
                    "Optional[\"Outcome\"]"
                ]
            }
        },
        "Library.has_id": {
            "name": "has_id",
            "location": 120,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "int"
                ]
            }
        },
        "Library.identifier": {
            "name": "identifier",
            "location": 134,
            "return": [
                "waterbutler.core.provider.BaseProvider",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Library.is_running": {
            "name": "is_running",
            "location": 144,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "Optional[static_frame.core.store_filter.StoreFilter]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Library.exists": {
            "name": "exists",
            "location": 156,
            "return": [
                "str",
                "Optional[int]",
                "Tuple[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Library.may_contains_script": {
            "name": "may_contains_script",
            "location": 168,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "int",
                    "bool",
                    "str",
                    "Iterable"
                ]
            }
        },
        "Library.to_json": {
            "name": "to_json",
            "location": 188,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Library.from_json": {
            "name": "from_json",
            "location": 204,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]",
                "busboy.model.Passage"
            ],
            "arguments": {
                "json_str": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "Optional[str]"
                ]
            }
        },
        "Library.__str__": {
            "name": "__str__",
            "location": 215,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Library.__repr__": {
            "name": "__repr__",
            "location": 227,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AHKManager-master/src/core/model/library_repository.py": {
        "LibraryRepository.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LibraryRepository.add": {
            "name": "add",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "library": [
                    "T"
                ]
            }
        },
        "LibraryRepository.find": {
            "name": "find",
            "location": 28,
            "return": [
                "Set[str]",
                "FrozenSet[str]",
                "Optional[dict]",
                "Tuple[int]",
                "Counter",
                "str"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "Mapping[str, str]",
                    "Dict[str, Any]",
                    "Type",
                    "bool"
                ]
            }
        },
        "LibraryRepository.find_script": {
            "name": "find_script",
            "location": 42,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "int",
                    "set",
                    "str"
                ]
            }
        },
        "LibraryRepository.remove": {
            "name": "remove",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "float",
                    "src.core.model.library.Library",
                    "Sequence[str]",
                    "Optional[List[Dict]]"
                ]
            }
        },
        "LibraryRepository.get_all_scripts": {
            "name": "get_all_scripts",
            "location": 71,
            "return": [
                "str",
                "int",
                "Tuple[bytes]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibraryRepository.clear": {
            "name": "clear",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LibraryRepository.to_json": {
            "name": "to_json",
            "location": 97,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibraryRepository.from_json": {
            "name": "from_json",
            "location": 109,
            "return": [
                "str",
                "supersemodels.core.Database",
                "Iterable[float]"
            ],
            "arguments": {
                "json_str": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "LibraryRepository.__str__": {
            "name": "__str__",
            "location": 117,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibraryRepository.__repr__": {
            "name": "__repr__",
            "location": 126,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AHKManager-master/src/core/model/message.py": {
        "Message.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg_type": [
                    "Type",
                    "str",
                    "Optional[type]"
                ],
                "message": [
                    "str",
                    "int"
                ]
            }
        },
        "Message.__str__": {
            "name": "__str__",
            "location": 16,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AHKManager-master/src/core/model/profile.py": {
        "Profile.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Profile.start": {
            "name": "start",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.stop": {
            "name": "stop",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.add": {
            "name": "add",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "script_id": [
                    "List[int]",
                    "int",
                    "list",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Profile.remove": {
            "name": "remove",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "script_id": [
                    "int",
                    "lib.model.album.album.AlbumID",
                    "lib.model.contenContentID",
                    "Dict[int, int]",
                    "str",
                    "list"
                ]
            }
        },
        "Profile.has_script": {
            "name": "has_script",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "int"
                ]
            }
        },
        "Profile.has_id": {
            "name": "has_id",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str"
                ]
            }
        },
        "Profile.identifier": {
            "name": "identifier",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.is_running": {
            "name": "is_running",
            "location": 100,
            "return": [
                "Mapping[str, str]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.is_paused": {
            "name": "is_paused",
            "location": 110,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.to_json": {
            "name": "to_json",
            "location": 117,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.from_json": {
            "name": "from_json",
            "location": 132,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]",
                "busboy.model.Passage"
            ],
            "arguments": {
                "json_str": [
                    "str"
                ]
            }
        },
        "Profile.__str__": {
            "name": "__str__",
            "location": 142,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.__repr__": {
            "name": "__repr__",
            "location": 153,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AHKManager-master/src/core/model/profile_repository.py": {
        "ProfileRepository.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileRepository.add": {
            "name": "add",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "profile": [
                    "T"
                ]
            }
        },
        "ProfileRepository.find": {
            "name": "find",
            "location": 27,
            "return": [
                "Set[str]",
                "FrozenSet[str]",
                "Optional[dict]",
                "Tuple[int]",
                "Counter",
                "str"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "Mapping[str, str]",
                    "Dict[str, Any]",
                    "Type",
                    "bool"
                ]
            }
        },
        "ProfileRepository.remove": {
            "name": "remove",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "float",
                    "src.core.model.library.Library",
                    "Sequence[str]",
                    "Optional[List[Dict]]"
                ]
            }
        },
        "ProfileRepository.to_json": {
            "name": "to_json",
            "location": 56,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileRepository.from_json": {
            "name": "from_json",
            "location": 65,
            "return": [
                "str",
                "supersemodels.core.Database",
                "Iterable[float]"
            ],
            "arguments": {
                "json_str": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ProfileRepository.__str__": {
            "name": "__str__",
            "location": 73,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileRepository.__repr__": {
            "name": "__repr__",
            "location": 82,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AHKManager-master/src/core/model/script.py": {
        "Script.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Script.start": {
            "name": "start",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "process": [
                    "int",
                    "Tuple[str, str]",
                    "str",
                    "list"
                ]
            }
        },
        "Script.stop": {
            "name": "stop",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Script.pause": {
            "name": "pause",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Script.is_paused": {
            "name": "is_paused",
            "location": 51,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Script.resume": {
            "name": "resume",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Script.identifier": {
            "name": "identifier",
            "location": 57,
            "return": [
                "waterbutler.core.provider.BaseProvider",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Script.has_id": {
            "name": "has_id",
            "location": 67,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "int"
                ]
            }
        },
        "Script.exists": {
            "name": "exists",
            "location": 81,
            "return": [
                "IO",
                "bytes",
                "str",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Script.allow_state_change": {
            "name": "allow_state_change",
            "location": 91,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Script.is_locked": {
            "name": "is_locked",
            "location": 103,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Script.lock": {
            "name": "lock",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Script.startup": {
            "name": "startup",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Script.is_running": {
            "name": "is_running",
            "location": 127,
            "return": [
                "str",
                "bool",
                "Optional[homeassistancore.State]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Script.to_json": {
            "name": "to_json",
            "location": 142,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Script.from_json": {
            "name": "from_json",
            "location": 152,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]",
                "busboy.model.Passage"
            ],
            "arguments": {
                "json_str": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "Optional[str]"
                ]
            }
        },
        "Script.__str__": {
            "name": "__str__",
            "location": 160,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Script.__repr__": {
            "name": "__repr__",
            "location": 169,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AHKManager-master/src/core/model/state.py": {
        "State.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "State.to_json": {
            "name": "to_json",
            "location": 11,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.from_json": {
            "name": "from_json",
            "location": 19,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "json_str": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "State.__str__": {
            "name": "__str__",
            "location": 27,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "State.__repr__": {
            "name": "__repr__",
            "location": 37,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "AHKManager-master/src/core/service/library_service.py": {
        "LibraryService.add": {
            "name": "add",
            "location": 24,
            "return": [
                "bool",
                "float",
                "Optional[Any]",
                "model.Integration",
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "LibraryService.find": {
            "name": "find",
            "location": 68,
            "return": [
                "int",
                "Union[str, int]",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "LibraryService.find_script": {
            "name": "find_script",
            "location": 82,
            "return": [
                "int",
                "Union[str, int]",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "Sequence[str]",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "LibraryService.find_library_contains_script": {
            "name": "find_library_contains_script",
            "location": 95,
            "return": [
                "FrozenSet[str]",
                "Set[str]",
                "str",
                "Counter",
                "List[Dict[str, Any]]",
                "frozenset",
                "list"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "Dict[str, Dict]",
                    "str"
                ]
            }
        },
        "LibraryService.remove": {
            "name": "remove",
            "location": 114,
            "return": [
                "bool",
                "List[str]",
                "Union[int, float, complex]",
                "model.Integration",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "bool"
                ]
            }
        },
        "LibraryService.remove_script": {
            "name": "remove_script",
            "location": 141,
            "return": [
                "bool",
                "List[str]",
                "Union[int, float, complex]",
                "model.Integration",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "identifier": []
            }
        },
        "LibraryService.remove_all": {
            "name": "remove_all",
            "location": 172,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "List[object]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibraryService.start": {
            "name": "start",
            "location": 191,
            "return": [
                "str",
                "bool",
                "float",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "LibraryService.start_script": {
            "name": "start_script",
            "location": 210,
            "return": [
                "str",
                "bool",
                "float",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "LibraryService.restart_script": {
            "name": "restart_script",
            "location": 228,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "bool"
                ]
            }
        },
        "LibraryService.stop": {
            "name": "stop",
            "location": 246,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "bool"
                ]
            }
        },
        "LibraryService.stop_script": {
            "name": "stop_script",
            "location": 264,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "bool"
                ]
            }
        },
        "LibraryService.stop_all": {
            "name": "stop_all",
            "location": 282,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "List[object]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibraryService.pause_all": {
            "name": "pause_all",
            "location": 299,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "List[object]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibraryService.resume_all": {
            "name": "resume_all",
            "location": 316,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "List[object]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibraryService.refresh": {
            "name": "refresh",
            "location": 337,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LibraryService.get_all_scripts": {
            "name": "get_all_scripts",
            "location": 360,
            "return": [
                "bool",
                "Sequence[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibraryService._check_library_exists": {
            "name": "_check_library_exists",
            "location": 374,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "LibraryService._check_script_exists": {
            "name": "_check_script_exists",
            "location": 385,
            "return": [
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "Mapping",
                    "dict"
                ]
            }
        },
        "LibraryService._init_library": {
            "name": "_init_library",
            "location": 397,
            "return": [
                "dict",
                "set"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "AHKManager-master/src/core/service/message_service.py": {
        "MessageService.add": {
            "name": "add",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "message": [
                    "discord.Message",
                    "bool",
                    "bytes",
                    "Callable"
                ]
            }
        }
    },
    "AHKManager-master/src/core/service/profile_service.py": {
        "ProfileService.add": {
            "name": "add",
            "location": 22,
            "return": [
                "Optional[int]",
                "type"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict"
                ]
            }
        },
        "ProfileService.add_script": {
            "name": "add_script",
            "location": 53,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "List[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "profile_id": [
                    "Optional[str]",
                    "str"
                ],
                "script_id": [
                    "int",
                    "str"
                ]
            }
        },
        "ProfileService.find": {
            "name": "find",
            "location": 96,
            "return": [
                "int",
                "Union[str, int]",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "int",
                    "set",
                    "str"
                ]
            }
        },
        "ProfileService.find_script": {
            "name": "find_script",
            "location": 109,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "ProfileService.find_profiles_contains_script": {
            "name": "find_profiles_contains_script",
            "location": 127,
            "return": [
                "str",
                "List[Dict]",
                "List[T]",
                "List[int]",
                "List[str]",
                "list",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "List[str]",
                    "int",
                    "Type[Any]",
                    "dict"
                ]
            }
        },
        "ProfileService.find_running_profiles_contains_script": {
            "name": "find_running_profiles_contains_script",
            "location": 141,
            "return": [
                "List[str]",
                "str",
                "List[Dict]",
                "List[T]",
                "list"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "int",
                    "bool",
                    "list",
                    "Sequence[T]"
                ]
            }
        },
        "ProfileService.get_profile_scripts": {
            "name": "get_profile_scripts",
            "location": 157,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "bool"
                ]
            }
        },
        "ProfileService.remove": {
            "name": "remove",
            "location": 184,
            "return": [
                "Optional[str]",
                "str",
                "float",
                "type",
                "Optional[bytes]"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "bool"
                ]
            }
        },
        "ProfileService.remove_script_from_profile": {
            "name": "remove_script_from_profile",
            "location": 231,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "profile_id": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "script_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "ProfileService.remove_script": {
            "name": "remove_script",
            "location": 273,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "slice"
                ]
            }
        },
        "ProfileService.start": {
            "name": "start",
            "location": 310,
            "return": [
                "str",
                "bool",
                "float",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "ProfileService.stop": {
            "name": "stop",
            "location": 329,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "bool"
                ]
            }
        },
        "ProfileService.stop_all": {
            "name": "stop_all",
            "location": 348,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "List[object]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileService.restart": {
            "name": "restart",
            "location": 365,
            "return": [
                "List[int]",
                "backend.src.sheets_commands.sheeGrid",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "bool"
                ]
            }
        },
        "ProfileService.refresh": {
            "name": "refresh",
            "location": 383,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileService._get_next_profile_name": {
            "name": "_get_next_profile_name",
            "location": 404,
            "return": [
                "str",
                "Dict[str, Iterable[Any]]",
                "Optional[Match]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileService._check_profile_exists": {
            "name": "_check_profile_exists",
            "location": 420,
            "return": [
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "AHKManager-master/src/core/utility/configuration.py": {
        "Configuration.save": {
            "name": "save",
            "location": 29,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "profile_repository": [
                    "str",
                    "list"
                ],
                "library_repository": [
                    "str",
                    "list"
                ]
            }
        },
        "Configuration.save_general_configs": {
            "name": "save_general_configs",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Configuration.load": {
            "name": "load",
            "location": 79,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.load_profiles": {
            "name": "load_profiles",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration.load_libraries": {
            "name": "load_libraries",
            "location": 116,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configuration._save_repository": {
            "name": "_save_repository",
            "location": 130,
            "return": [],
            "arguments": {
                "self": [],
                "repository": [
                    "str",
                    "List[List[str]]",
                    "List[Dict[str, str]]",
                    "dict"
                ],
                "path": [
                    "str",
                    "os.PathLike"
                ]
            }
        },
        "Configuration._load_repository": {
            "name": "_load_repository",
            "location": 140,
            "return": [
                "Union[str, IO]",
                "Dict[str, Any]",
                "Callable[[str], T]",
                "Callable",
                "dict",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Configuration._find_between": {
            "name": "_find_between",
            "location": 156,
            "return": [
                "bool",
                "int",
                "Optional[str]",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "in_str": [
                    "str",
                    "int",
                    "Iterable[int]",
                    "Optional[str]"
                ],
                "first": [
                    "str",
                    "List[int]"
                ],
                "last": [
                    "str",
                    "bytes",
                    "Union[str, List[Any]]",
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "Configuration._make_dirs": {
            "name": "_make_dirs",
            "location": 164,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        }
    },
    "AHKManager-master/src/core/utility/logger.py": {
        "Logger.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "module": [
                    "logging.Logger",
                    "Optional[logging.Logger]"
                ]
            }
        },
        "Logger.log": {
            "name": "log",
            "location": 18,
            "return": [
                "Generator[Tuple[int, Any], None, None]",
                "Iterator[Dict[str, Any]]",
                "Generator",
                "NoReturn"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "Logger.info": {
            "name": "info",
            "location": 31,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "str",
                "Sequence[str]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Logger.warning": {
            "name": "warning",
            "location": 44,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str"
                ]
            }
        },
        "Logger.error": {
            "name": "error",
            "location": 57,
            "return": [
                "int",
                "Union[tuple, list]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "Optional[str]",
                    "Iterable[str]",
                    "bytes"
                ]
            }
        },
        "Logger.critical": {
            "name": "critical",
            "location": 70,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "Tuple[str, str]"
                ]
            }
        },
        "Logger._format_message": {
            "name": "_format_message",
            "location": 83,
            "return": [
                "str",
                "float",
                "topicdb.core.store.retrievalmode.RetrievalMode"
            ],
            "arguments": {
                "self": [],
                "level": [
                    "datetime.datetime",
                    "str",
                    "float",
                    "datetime.date"
                ],
                "msg": [
                    "datetime.datetime",
                    "str",
                    "Optional[str]",
                    "datetime.date",
                    "datetime.timedelta"
                ]
            }
        }
    },
    "AHKManager-master/src/core/utility/utility.py": {
        "Utility.get_file_name": {
            "name": "get_file_name",
            "location": 7,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Utility.get_file_name_no_extension": {
            "name": "get_file_name_no_extension",
            "location": 23,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "BinaryIO",
                    "Callable[[str], None]"
                ]
            }
        },
        "Utility.get_file_extension": {
            "name": "get_file_extension",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Callable[[str], None]"
                ]
            }
        },
        "Utility.get_parent_directory": {
            "name": "get_parent_directory",
            "location": 65,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Utility.get_directories": {
            "name": "get_directories",
            "location": 81,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "dir_path": [
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "Utility.get_files_in_directory": {
            "name": "get_files_in_directory",
            "location": 117,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "dir_path": [
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "Utility.is_dir": {
            "name": "is_dir",
            "location": 150,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Utility.format_path": {
            "name": "format_path",
            "location": 176,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Utility.path_exists": {
            "name": "path_exists",
            "location": 192,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "\"NodePath\""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Utility.is_file": {
            "name": "is_file",
            "location": 208,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Utility.join_path": {
            "name": "join_path",
            "location": 232,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "p_1": [
                    "str"
                ],
                "p_2": [
                    "str"
                ]
            }
        },
        "Utility.make_dirs": {
            "name": "make_dirs",
            "location": 249,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Utility.remove_file": {
            "name": "remove_file",
            "location": 275,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Utility.remove_dir": {
            "name": "remove_dir",
            "location": 292,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Utility.copy_file": {
            "name": "copy_file",
            "location": 309,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str",
                    "list"
                ],
                "dst": [
                    "str",
                    "list"
                ]
            }
        }
    },
    "AHKManager-master/src/tests/integration_test/test.py": {
        "change_age": {
            "name": "change_age",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "s3": [
                    "int"
                ]
            }
        },
        "item.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "student.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ],
                "age": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "AHKManager-master/src/tests/integration_test/app/main_window/component/error_dialog_test.py": {},
    "AHKManager-master/src/tests/unit_test/core/service/library_manager_test.py": {
        "LibraryManagerTest.target": {
            "name": "target",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibraryManagerTest.library": {
            "name": "library",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibraryManagerTest.pause_test": {
            "name": "pause_test",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "library": [
                    "str",
                    "Dict[str, object]",
                    "Callable",
                    "core.job.BaseJob"
                ]
            }
        },
        "LibraryManagerTest.resume_test": {
            "name": "resume_test",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "unittesmock.MagicMock",
                    "str"
                ],
                "library": [
                    "src.core.manager.script_manager.ScriptManager",
                    "src.core.model.scripScript",
                    "Sequence[str]"
                ]
            }
        },
        "LibraryManagerTest.resume_test_has_error": {
            "name": "resume_test_has_error",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "unittesmock.MagicMock"
                ],
                "library": [
                    "src.core.manager.script_manager.ScriptManager",
                    "src.core.model.scripScript"
                ]
            }
        }
    },
    "AHKManager-master/src/tests/unit_test/core/service/library_service_test.py": {
        "LibraryServiceTest.target": {
            "name": "target",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibraryServiceTest.test_dir": {
            "name": "test_dir",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibraryServiceTest.sub_dirs": {
            "name": "sub_dirs",
            "location": 65,
            "return": [
                "waterbutler.core.provider.BaseProvider",
                "str",
                "TextIO"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibraryServiceTest.test_script": {
            "name": "test_script",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibraryServiceTest.scripts_count": {
            "name": "scripts_count",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibraryServiceTest._setup_data": {
            "name": "_setup_data",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LibraryServiceTest.add_test_new": {
            "name": "add_test_new",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "core.models.Grouping",
                    "str"
                ],
                "test_dir": [
                    "str"
                ],
                "sub_dirs": [
                    "Iterable"
                ]
            }
        },
        "LibraryServiceTest.add_test_reload": {
            "name": "add_test_reload",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "str"
                ],
                "test_dir": [
                    "str"
                ],
                "sub_dirs": [
                    "Iterable",
                    "unittesmock.MagicMock",
                    "src.status_tracker.Status.Change"
                ]
            }
        },
        "LibraryServiceTest.add_test_init_failed": {
            "name": "add_test_init_failed",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "str"
                ],
                "test_dir": [
                    "str"
                ],
                "sub_dirs": [
                    "Iterable",
                    "unittesmock.MagicMock",
                    "src.status_tracker.Status.Change"
                ]
            }
        },
        "LibraryServiceTest.add_test_invalid_directory_path": {
            "name": "add_test_invalid_directory_path",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "unittesmock.MagicMock",
                    "str"
                ]
            }
        },
        "LibraryServiceTest.find_test": {
            "name": "find_test",
            "location": 227,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [],
                "test_dir": []
            }
        },
        "LibraryServiceTest.find_test_library_not_found": {
            "name": "find_test_library_not_found",
            "location": 245,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Dict[str, Any]"
                ]
            }
        },
        "LibraryServiceTest.find_script_test": {
            "name": "find_script_test",
            "location": 264,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "dict",
                    "Optional[Iterable]",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "TextIO",
                    "List[str]"
                ],
                "test_script": [
                    "dict",
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "LibraryServiceTest.find_library_contains_script_test": {
            "name": "find_library_contains_script_test",
            "location": 276,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [],
                "test_script": []
            }
        },
        "LibraryServiceTest.find_library_contains_script_test_script_not_found": {
            "name": "find_library_contains_script_test_script_not_found",
            "location": 288,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": []
            }
        },
        "LibraryServiceTest.remove_test_library_not_exists": {
            "name": "remove_test_library_not_exists",
            "location": 304,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "str",
                    "core.models.Grouping"
                ],
                "test_dir": [
                    "int"
                ]
            }
        },
        "LibraryServiceTest.remove_test_failed": {
            "name": "remove_test_failed",
            "location": 325,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [],
                "test_dir": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "LibraryServiceTest.remove_test": {
            "name": "remove_test",
            "location": 349,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "str"
                ],
                "test_dir": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "LibraryServiceTest.remove_script_test_script_not_exists": {
            "name": "remove_script_test_script_not_exists",
            "location": 375,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "List[str]",
                    "unittesmock.MagicMock"
                ],
                "test_script": [
                    "str",
                    "int",
                    "Callable",
                    "Iterable",
                    "jgikbase.idmapping.core.user.AuthsourceID"
                ]
            }
        },
        "LibraryServiceTest.remove_script_test_failed": {
            "name": "remove_script_test_failed",
            "location": 396,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "List[str]",
                    "unittesmock.MagicMock"
                ],
                "test_script": [
                    "bool",
                    "List[str]",
                    "float"
                ]
            }
        },
        "LibraryServiceTest.remove_script_test": {
            "name": "remove_script_test",
            "location": 424,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "List[str]",
                    "unittesmock.MagicMock"
                ],
                "test_script": [
                    "bool",
                    "List[str]",
                    "float"
                ]
            }
        },
        "LibraryServiceTest.remove_all_test": {
            "name": "remove_all_test",
            "location": 446,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "bacprop.service.BacPropagator",
                    "unittesmock.MagicMock",
                    "str",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "LibraryServiceTest.remove_all_test_stop_all_failed": {
            "name": "remove_all_test_stop_all_failed",
            "location": 458,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "str",
                    "bacprop.service.BacPropagator",
                    "unittesmock.MagicMock",
                    "tests.async_mock.MagicMock"
                ]
            }
        },
        "LibraryServiceTest.start_test_library_not_exists": {
            "name": "start_test_library_not_exists",
            "location": 477,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "core.models.Grouping",
                    "str"
                ],
                "test_dir": [
                    "str"
                ]
            }
        },
        "LibraryServiceTest.start_test": {
            "name": "start_test",
            "location": 496,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "tests.async_mock.MagicMock"
                ],
                "test_dir": [
                    "str"
                ]
            }
        },
        "LibraryServiceTest.start_script_test_script_not_exists": {
            "name": "start_script_test_script_not_exists",
            "location": 521,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "str"
                ],
                "test_script": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "boucanpy.core.api_token.ApiTokenRepo"
                ]
            }
        },
        "LibraryServiceTest.start_script_test": {
            "name": "start_script_test",
            "location": 540,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "unittesmock.MagicMock"
                ],
                "test_script": [
                    "str",
                    "list"
                ]
            }
        },
        "LibraryServiceTest.restart_script_test_script_not_exists": {
            "name": "restart_script_test_script_not_exists",
            "location": 564,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "List[str]",
                    "unittesmock.MagicMock"
                ],
                "test_script": []
            }
        },
        "LibraryServiceTest.restart_script_test": {
            "name": "restart_script_test",
            "location": 583,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "List[str]"
                ],
                "test_script": [
                    "str",
                    "list"
                ]
            }
        },
        "LibraryServiceTest.stop_test_library_not_exists": {
            "name": "stop_test_library_not_exists",
            "location": 607,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "core.models.Grouping",
                    "str"
                ],
                "test_dir": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "LibraryServiceTest.stop_test": {
            "name": "stop_test",
            "location": 626,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "str"
                ],
                "test_dir": [
                    "str"
                ]
            }
        },
        "LibraryServiceTest.stop_script_test_script_not_exists": {
            "name": "stop_script_test_script_not_exists",
            "location": 651,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "List[str]",
                    "unittesmock.MagicMock"
                ],
                "test_script": []
            }
        },
        "LibraryServiceTest.stop_script_test": {
            "name": "stop_script_test",
            "location": 670,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "tests.async_mock.MagicMock",
                    "unittesmock.MagicMock"
                ],
                "test_script": [
                    "str",
                    "list"
                ]
            }
        },
        "LibraryServiceTest.stop_all_test_could_not_stop_some_script": {
            "name": "stop_all_test_could_not_stop_some_script",
            "location": 694,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "str"
                ],
                "test_dir": [
                    "str",
                    "Sequence[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "LibraryServiceTest.stop_all_test": {
            "name": "stop_all_test",
            "location": 718,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "bool"
                ],
                "test_dir": [
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "LibraryServiceTest.refresh_test_library_path_not_exists": {
            "name": "refresh_test_library_path_not_exists",
            "location": 744,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [],
                "test_dir": [
                    "Hashable"
                ]
            }
        },
        "LibraryServiceTest.refresh_test": {
            "name": "refresh_test",
            "location": 764,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "str",
                    "bool",
                    "Callable"
                ],
                "test_dir": [
                    "str",
                    "bool",
                    "Dict[str, Tuple[Any, Any]]",
                    "Set[str]"
                ]
            }
        },
        "LibraryServiceTest.get_all_scripts_test": {
            "name": "get_all_scripts_test",
            "location": 786,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [],
                "scripts_count": [
                    "str",
                    "Iterable[T]",
                    "bool"
                ]
            }
        },
        "LibraryServiceTest.pause_all_test": {
            "name": "pause_all_test",
            "location": 801,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Iterable",
                    "bacprop.service.BacPropagator",
                    "str",
                    "unittesmock.MagicMock"
                ],
                "scripts_count": [
                    "int",
                    "bool",
                    "bytes",
                    "Dict[str, int]"
                ]
            }
        },
        "LibraryServiceTest._pause_all_library_manager_pause": {
            "name": "_pause_all_library_manager_pause",
            "location": 823,
            "return": [
                "bool",
                "allennlp.models.model.Model",
                "Match",
                "Tuple[Tuple[int, int]]",
                "int",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "library": [
                    "int",
                    "str",
                    "Exception",
                    "List[graphx.core.entities.Edge]"
                ]
            }
        },
        "LibraryServiceTest.resume_all_test": {
            "name": "resume_all_test",
            "location": 831,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Iterable"
                ],
                "scripts_count": [
                    "int",
                    "bool",
                    "bytes",
                    "Dict[str, int]"
                ]
            }
        },
        "LibraryServiceTest.resume_all_test_has_error": {
            "name": "resume_all_test_has_error",
            "location": 845,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "unittesmock.MagicMock"
                ],
                "scripts_count": [
                    "int",
                    "core.models.Grouping",
                    "float",
                    "gluonts.model.common.Tensor"
                ]
            }
        }
    },
    "AHKManager-master/src/tests/unit_test/core/service/script_manager_test.py": {
        "ScriptProcessMock.kill": {
            "name": "kill",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ScriptManagerTest.target": {
            "name": "target",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScriptManagerTest.script": {
            "name": "script",
            "location": 23,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ScriptManagerTest.pause_test_script_not_running": {
            "name": "pause_test_script_not_running",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "src.core.manager.script_manager.ScriptManager",
                    "src.core.model.scripScript"
                ],
                "script": [
                    "src.core.manager.script_manager.ScriptManager",
                    "src.core.model.scripScript"
                ]
            }
        },
        "ScriptManagerTest.pause_test_not_allow_state_change": {
            "name": "pause_test_not_allow_state_change",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "src.core.manager.script_manager.ScriptManager",
                    "src.core.model.scripScript"
                ],
                "script": [
                    "src.core.model.scripScript",
                    "bool",
                    "blurr.core.schema_loader.SchemaLoader"
                ]
            }
        },
        "ScriptManagerTest.pause_test_could_not_kill_process": {
            "name": "pause_test_could_not_kill_process",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "src.core.manager.script_manager.ScriptManager",
                    "src.core.model.scripScript",
                    "Sequence[str]"
                ],
                "script": [
                    "src.core.model.scripScript"
                ]
            }
        },
        "ScriptManagerTest.pause_test": {
            "name": "pause_test",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "src.core.manager.script_manager.ScriptManager",
                    "src.core.model.scripScript",
                    "Sequence[str]"
                ],
                "script": [
                    "src.core.model.scripScript",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "ScriptManagerTest.resume_test_not_paused": {
            "name": "resume_test_not_paused",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "src.core.manager.script_manager.ScriptManager",
                    "src.core.model.scripScript",
                    "Sequence[str]"
                ],
                "script": [
                    "src.core.manager.script_manager.ScriptManager",
                    "src.core.model.scripScript",
                    "Sequence[str]"
                ]
            }
        },
        "ScriptManagerTest.resume_test_script_locked": {
            "name": "resume_test_script_locked",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "src.core.manager.script_manager.ScriptManager",
                    "src.core.model.scripScript",
                    "Sequence[str]"
                ],
                "script": [
                    "src.core.model.scripScript",
                    "Dict[str, Any]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ScriptManagerTest.resume_test": {
            "name": "resume_test",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "src.core.manager.script_manager.ScriptManager",
                    "src.core.model.scripScript",
                    "Iterable",
                    "unittesmock.MagicMock",
                    "int"
                ],
                "script": [
                    "src.core.model.scripScript",
                    "core.D.VersionedIdentifier",
                    "dict",
                    "str"
                ]
            }
        }
    },
    "AHKManager-master/src/tests/unit_test/core/utility/utility_test.py": {
        "UtilityTest.utility": {
            "name": "utility",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilityTest.get_file_name_no_extension_test": {
            "name": "get_file_name_no_extension_test",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "utility": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock",
                    "str"
                ]
            }
        },
        "UtilityTest.get_file_name_no_extension_test_invalid_path": {
            "name": "get_file_name_no_extension_test_invalid_path",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "utility": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock",
                    "Dict[str, Any]"
                ]
            }
        },
        "UtilityTest.get_file_extension_test": {
            "name": "get_file_extension_test",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "utility": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock",
                    "str",
                    "bool"
                ]
            }
        },
        "UtilityTest.get_file_extension_test_file_no_extension": {
            "name": "get_file_extension_test_file_no_extension",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "utility": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ]
            }
        }
    }
}
{
    "Blitz2019-main/__main__.py": {
        "connect_agent": {
            "name": "connect_agent",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "uri": [
                    "str",
                    "bool",
                    "List[Dict]",
                    "Optional[int]"
                ]
            }
        },
        "load_percepts": {
            "name": "load_percepts",
            "location": 22,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "csvfile": [
                    "Union[str, Iterable[str]]",
                    "Union[str, int]",
                    "str",
                    "Union[int, str]"
                ]
            }
        },
        "result_serialize": {
            "name": "result_serialize",
            "location": 47,
            "return": [
                "Dict[str, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "obj": [
                    "Dict[str, Set[str]]"
                ]
            }
        },
        "Result.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "team_name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "rank": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "posfloatarg": {
            "name": "posfloatarg",
            "location": 59,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "string": [
                    "str",
                    "AnyStr"
                ]
            }
        },
        "play": {
            "name": "play",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "Blitz2019-main/game/board.py": {
        "Board.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "percepts": [
                    "int",
                    "float",
                    "Optional[int]",
                    "str"
                ],
                "player_count": [
                    "int",
                    "Sequence[str]"
                ],
                "starting_walls": [
                    "int",
                    "List[int]",
                    "List[Tuple[int, int]]",
                    "Sequence",
                    "list"
                ]
            }
        },
        "Board.__str__": {
            "name": "__str__",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.add_wall": {
            "name": "add_wall",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "bool",
                    "Tuple[int, int]"
                ],
                "is_horiz": [
                    "bool",
                    "Tuple[int, int]"
                ],
                "player": [
                    "bool",
                    "List[int]",
                    "float",
                    "int"
                ]
            }
        },
        "Board.can_move_here": {
            "name": "can_move_here",
            "location": 130,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "bool"
                ],
                "j": [
                    "int",
                    "bool"
                ],
                "player": [
                    "int",
                    "bool"
                ]
            }
        },
        "Board.clone": {
            "name": "clone",
            "location": 137,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.get_actions": {
            "name": "get_actions",
            "location": 147,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "Optional[bool]",
                    "Optional[int]",
                    "List[int]",
                    "str",
                    "Iterable"
                ]
            }
        },
        "Board.get_min_steps_before_victory": {
            "name": "get_min_steps_before_victory",
            "location": 151,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "str"
                ]
            }
        },
        "Board.get_legal_pawn_moves": {
            "name": "get_legal_pawn_moves",
            "location": 157,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "str",
                    "int",
                    "bool",
                    "Sequence[float]"
                ]
            }
        },
        "Board.get_legal_wall_moves": {
            "name": "get_legal_wall_moves",
            "location": 169,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "str",
                    "bool"
                ]
            }
        },
        "Board.get_other_player_positions": {
            "name": "get_other_player_positions",
            "location": 187,
            "return": [
                "int",
                "List[Dict[str, str]]",
                "bool",
                "Dict[str, Tuple[str, str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "int",
                    "Optional[int]",
                    "Tuple[str]",
                    "str"
                ]
            }
        },
        "Board.get_score": {
            "name": "get_score",
            "location": 191,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "str",
                    "TextIO",
                    "bool"
                ]
            }
        },
        "Board.get_scores": {
            "name": "get_scores",
            "location": 200,
            "return": [
                "List[str]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.get_shortest_path": {
            "name": "get_shortest_path",
            "location": 207,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "Callable",
                    "int",
                    "str"
                ]
            }
        },
        "Board.is_action_valid": {
            "name": "is_action_valid",
            "location": 255,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "bytes"
                ],
                "player": [
                    "str"
                ]
            }
        },
        "Board.is_diagonal_move_legal": {
            "name": "is_diagonal_move_legal",
            "location": 274,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "former_pos": [
                    "bool",
                    "float"
                ],
                "new_pos": [
                    "bool",
                    "float"
                ],
                "opponent_pos": [
                    "bool",
                    "float"
                ]
            }
        },
        "Board.is_finished": {
            "name": "is_finished",
            "location": 304,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.is_legal_pawn_move": {
            "name": "is_legal_pawn_move",
            "location": 310,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "int",
                    "Dict[int, dict]",
                    "tuple",
                    "bool"
                ],
                "player_pos": [
                    "dict",
                    "float",
                    "int",
                    "Optional[float]",
                    "Union[int, str]",
                    "Optional[bool]"
                ],
                "new_position": [
                    "dict",
                    "float",
                    "int",
                    "Optional[float]",
                    "Union[int, str]",
                    "Optional[bool]"
                ]
            }
        },
        "Board.is_pawn_move_ok": {
            "name": "is_pawn_move_ok",
            "location": 317,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "former_pos": [
                    "str",
                    "Optional[Any]",
                    "bytes"
                ],
                "new_pos": [
                    "str",
                    "dict",
                    "int"
                ],
                "opponent_pos": [
                    "str",
                    "dict",
                    "list",
                    "Collection[int]"
                ]
            }
        },
        "Board.is_player_on_goal": {
            "name": "is_player_on_goal",
            "location": 336,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "str",
                    "int"
                ]
            }
        },
        "Board.is_simplified_pawn_move_ok": {
            "name": "is_simplified_pawn_move_ok",
            "location": 339,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "former_pos": [
                    "Optional[int]",
                    "int",
                    "Dict[str, Any]",
                    "str"
                ],
                "new_pos": []
            }
        },
        "Board.is_wall_possible_here": {
            "name": "is_wall_possible_here",
            "location": 370,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "bool",
                    "Iterable[int]"
                ],
                "is_horiz": [
                    "bool",
                    "Optional[int]",
                    "str",
                    "int"
                ]
            }
        },
        "Board.move_pawn": {
            "name": "move_pawn",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_pos": [
                    "int"
                ],
                "player": [
                    "int"
                ]
            }
        },
        "Board.play_action": {
            "name": "play_action",
            "location": 413,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "bool",
                    "float"
                ],
                "player": [
                    "int",
                    "str",
                    "Callable"
                ]
            }
        },
        "Board.players_on_goal": {
            "name": "players_on_goal",
            "location": 435,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.pretty_print": {
            "name": "pretty_print",
            "location": 438,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.paths_exist": {
            "name": "paths_exist",
            "location": 448,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.default_pawns_and_goals": {
            "name": "default_pawns_and_goals",
            "location": 460,
            "return": [
                "Callable[[Mapping], T]",
                "int",
                "float"
            ],
            "arguments": {
                "player_count": [
                    "int",
                    "str"
                ]
            }
        },
        "Board.is_on_goal": {
            "name": "is_on_goal",
            "location": 479,
            "return": [
                "bool"
            ],
            "arguments": {
                "position": [
                    "type",
                    "Optional[int]",
                    "bool",
                    "Optional[float]"
                ],
                "goal": [
                    "type",
                    "Optional[int]",
                    "bool",
                    "Optional[float]"
                ]
            }
        },
        "Board.get_shortest_path.get_pawn_moves": {
            "name": "get_pawn_moves",
            "location": 214,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "pos": [
                    "str",
                    "int"
                ]
            }
        },
        "Board.is_diagonal_move_legal.manhattan": {
            "name": "manhattan",
            "location": 284,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pos1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "pos2": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "Blitz2019-main/game/constants.py": {},
    "Blitz2019-main/game/exceptions.py": {
        "InvalidActionError.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "action": [
                    "int",
                    "bool",
                    "game.board.Board",
                    "float"
                ],
                "player": [
                    "int",
                    "bool",
                    "game.board.Board",
                    "float"
                ]
            }
        },
        "NoPathError.__repr__": {
            "name": "__repr__",
            "location": 20,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Blitz2019-main/game/game.py": {
        "Viewer.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Viewer.finished": {
            "name": "finished",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "steps": [],
                "winner": [],
                "reason": []
            }
        },
        "Viewer.playing": {
            "name": "playing",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "step": [],
                "player": []
            }
        },
        "Viewer.update": {
            "name": "update",
            "location": 71,
            "return": [],
            "arguments": {
                "self": [],
                "step": [],
                "action": [],
                "player": []
            }
        },
        "Viewer.init_viewer": {
            "name": "init_viewer",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "board": []
            }
        },
        "Viewer.replay": {
            "name": "replay",
            "location": 85,
            "return": [],
            "arguments": {
                "self": [],
                "trace": [],
                "speed": [],
                "show_end": []
            }
        },
        "Viewer.board": {
            "name": "board",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "HeadlessViewer.init_viewer": {
            "name": "init_viewer",
            "location": 110,
            "return": [],
            "arguments": {
                "self": [],
                "board": []
            }
        },
        "HeadlessViewer.playing": {
            "name": "playing",
            "location": 112,
            "return": [],
            "arguments": {
                "self": [],
                "step": [],
                "player": []
            }
        },
        "HeadlessViewer.update": {
            "name": "update",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "step": [],
                "action": [],
                "player": []
            }
        },
        "HeadlessViewer.finished": {
            "name": "finished",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "steps": [],
                "winner": [],
                "reason": []
            }
        },
        "HeadlessViewer.play": {
            "name": "play",
            "location": 118,
            "return": [],
            "arguments": {
                "self": [],
                "percepts": [],
                "player": [],
                "step": [],
                "time_left": []
            }
        },
        "ConsoleViewer.init_viewer": {
            "name": "init_viewer",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "board": []
            }
        },
        "ConsoleViewer.playing": {
            "name": "playing",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "step": [],
                "player": []
            }
        },
        "ConsoleViewer.update": {
            "name": "update",
            "location": 131,
            "return": [],
            "arguments": {
                "self": [],
                "step": [],
                "action": [],
                "player": []
            }
        },
        "ConsoleViewer.play": {
            "name": "play",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "percepts": [],
                "player": [],
                "step": [],
                "time_left": []
            }
        },
        "ConsoleViewer.finished": {
            "name": "finished",
            "location": 150,
            "return": [],
            "arguments": {
                "self": [],
                "steps": [],
                "winner": [],
                "reason": []
            }
        },
        "Game.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "agents": [],
                "board": [],
                "viewer": [],
                "time_credits": [],
                "trace": [],
                "player_names": []
            }
        },
        "Game.play": {
            "name": "play",
            "location": 186,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.timed_exec": {
            "name": "timed_exec",
            "location": 287,
            "return": [],
            "arguments": {
                "self": [],
                "fn_name": []
            }
        },
        "Game.partition": {
            "name": "partition",
            "location": 328,
            "return": [],
            "arguments": {
                "pred": [],
                "iterable": []
            }
        }
    },
    "Blitz2019-main/game/gui.py": {
        "TkViewer.get_tile_xy": {
            "name": "get_tile_xy",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "j": []
            }
        },
        "TkViewer.get_wall_xy": {
            "name": "get_wall_xy",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "i": [],
                "j": []
            }
        },
        "TkViewer.get_wall_scoreboard_xy": {
            "name": "get_wall_scoreboard_xy",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "player": [],
                "wall_num": []
            }
        },
        "TkViewer.get_object": {
            "name": "get_object",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "TkViewer.__init__": {
            "name": "__init__",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TkViewer.init_viewer": {
            "name": "init_viewer",
            "location": 206,
            "return": [],
            "arguments": {
                "self": [],
                "board": []
            }
        },
        "TkViewer.run": {
            "name": "run",
            "location": 210,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TkViewer.close": {
            "name": "close",
            "location": 316,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "TkViewer.set_status": {
            "name": "set_status",
            "location": 321,
            "return": [],
            "arguments": {
                "self": [],
                "new_status": []
            }
        },
        "TkViewer.set_substatus": {
            "name": "set_substatus",
            "location": 328,
            "return": [],
            "arguments": {
                "self": [],
                "new_substatus": []
            }
        },
        "TkViewer.playing": {
            "name": "playing",
            "location": 336,
            "return": [],
            "arguments": {
                "self": [],
                "step": [],
                "player": []
            }
        },
        "TkViewer._playing": {
            "name": "_playing",
            "location": 341,
            "return": [],
            "arguments": {
                "self": [],
                "step": [],
                "player": []
            }
        },
        "TkViewer.update": {
            "name": "update",
            "location": 346,
            "return": [],
            "arguments": {
                "self": [],
                "step": [],
                "action": [],
                "player": []
            }
        },
        "TkViewer.draw_board": {
            "name": "draw_board",
            "location": 351,
            "return": [],
            "arguments": {
                "self": [],
                "board": []
            }
        },
        "TkViewer.redraw_board": {
            "name": "redraw_board",
            "location": 438,
            "return": [],
            "arguments": {
                "self": [],
                "board": []
            }
        },
        "TkViewer.mark_object": {
            "name": "mark_object",
            "location": 489,
            "return": [],
            "arguments": {
                "self": [],
                "selection": [],
                "style": []
            }
        },
        "TkViewer.put_wall": {
            "name": "put_wall",
            "location": 524,
            "return": [],
            "arguments": {
                "self": [],
                "player": []
            }
        },
        "TkViewer.finished": {
            "name": "finished",
            "location": 529,
            "return": [],
            "arguments": {
                "self": [],
                "steps": [],
                "winner": [],
                "reason": []
            }
        },
        "TkViewer._finished": {
            "name": "_finished",
            "location": 534,
            "return": [],
            "arguments": {
                "self": [],
                "step": [],
                "winner": [],
                "reason": []
            }
        },
        "TkViewer.play": {
            "name": "play",
            "location": 553,
            "return": [],
            "arguments": {
                "self": [],
                "percepts": [],
                "player": [],
                "step": [],
                "time_left": []
            }
        },
        "TkViewer._play_start": {
            "name": "_play_start",
            "location": 562,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TkViewer._play_reset": {
            "name": "_play_reset",
            "location": 569,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "TkViewer._play_leave": {
            "name": "_play_leave",
            "location": 575,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "TkViewer._play_motion": {
            "name": "_play_motion",
            "location": 582,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "TkViewer._play_click": {
            "name": "_play_click",
            "location": 603,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "TkViewer.replay": {
            "name": "replay",
            "location": 627,
            "return": [],
            "arguments": {
                "self": [],
                "trace": [],
                "speed": [],
                "show_end": []
            }
        },
        "TkViewer._replay_gui": {
            "name": "_replay_gui",
            "location": 649,
            "return": [],
            "arguments": {
                "self": [],
                "show_end": []
            }
        },
        "TkViewer._replay_goto": {
            "name": "_replay_goto",
            "location": 670,
            "return": [],
            "arguments": {
                "self": [],
                "step": []
            }
        },
        "TkViewer._replay_next": {
            "name": "_replay_next",
            "location": 701,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "TkViewer._replay_prev": {
            "name": "_replay_prev",
            "location": 705,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "TkViewer._replay_first": {
            "name": "_replay_first",
            "location": 709,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "TkViewer._replay_last": {
            "name": "_replay_last",
            "location": 713,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        },
        "TkViewer._replay_play": {
            "name": "_replay_play",
            "location": 717,
            "return": [],
            "arguments": {
                "self": [],
                "event": []
            }
        }
    },
    "Blitz2019-main/game/quoridor.py": {
        "serve_agent": {
            "name": "serve_agent",
            "location": 60,
            "return": [],
            "arguments": {
                "agent": [],
                "address": [],
                "port": []
            }
        },
        "agent_main": {
            "name": "agent_main",
            "location": 71,
            "return": [],
            "arguments": {
                "agent": [],
                "args_cb": [],
                "setup_cb": []
            }
        },
        "Agent.initialize": {
            "name": "initialize",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "percepts": [],
                "players": [],
                "time_left": []
            }
        },
        "Agent.play": {
            "name": "play",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "percepts": [],
                "player": [],
                "step": [],
                "time_left": []
            }
        },
        "agent_main.portarg": {
            "name": "portarg",
            "location": 89,
            "return": [],
            "arguments": {
                "string": []
            }
        }
    },
    "Blitz2019-main/game/trace.py": {
        "load_trace": {
            "name": "load_trace",
            "location": 85,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "f": [
                    "str",
                    "float",
                    "Dict[str, Any]",
                    "List[bytes]"
                ]
            }
        },
        "Trace.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "board": [
                    "int",
                    "float",
                    "Dict[str, Any]",
                    "List[int]",
                    "Optional[Tuple[int, ...]]"
                ],
                "time_limits": [
                    "int",
                    "Callable",
                    "bool",
                    "Optional[dict]",
                    "Optional[int]"
                ],
                "player_names": [
                    "bool",
                    "str",
                    "Set[str]",
                    "Optional[str]"
                ]
            }
        },
        "Trace.add_action": {
            "name": "add_action",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "int",
                    "Callable",
                    "Tuple[int, int]",
                    "List[Tuple[int, int]]",
                    "list",
                    "bool"
                ],
                "action": [
                    "int",
                    "Callable",
                    "Tuple[int, int]",
                    "List[Tuple[int, int]]",
                    "list",
                    "bool"
                ],
                "t": [
                    "int",
                    "Callable",
                    "Tuple[int, int]",
                    "List[Tuple[int, int]]",
                    "list",
                    "bool"
                ]
            }
        },
        "Trace.set_winner": {
            "name": "set_winner",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "winner": [
                    "bool",
                    "float"
                ],
                "reason": [
                    "bool",
                    "float"
                ]
            }
        },
        "Trace.set_ranking": {
            "name": "set_ranking",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "players_ranking": [
                    "bool",
                    "float"
                ]
            }
        },
        "Trace.set_reasons": {
            "name": "set_reasons",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reasons": [
                    "bool",
                    "float"
                ]
            }
        },
        "Trace.get_initial_board": {
            "name": "get_initial_board",
            "location": 72,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trace.write": {
            "name": "write",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "memoryview",
                    "str",
                    "Dict[str, str]",
                    "int"
                ]
            }
        }
    },
    "Blitz2019-main/game/__init__.py": {},
    "Blitz2019-main/local_runner/bot_1/MyBot.py": {
        "RandomAgent.play": {
            "name": "play",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "percepts": [
                    "int",
                    "float"
                ],
                "player": [
                    "int",
                    "List[Dict[str, str]]",
                    "List[List[Any]]"
                ],
                "step": [
                    "int",
                    "bool",
                    "Sequence[Sequence[Any]]",
                    "str",
                    "Dict[str, Any]",
                    "float",
                    "Optional[Iterable]"
                ],
                "time_left": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "Blitz2019-main/local_runner/bot_1/utils.py": {
        "dict_to_board": {
            "name": "dict_to_board",
            "location": 51,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "dictio": [
                    "int",
                    "bool"
                ]
            }
        },
        "serve_agent": {
            "name": "serve_agent",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "agent": [
                    "List[str]",
                    "int",
                    "str"
                ],
                "address": [
                    "str",
                    "Optional[str]"
                ],
                "port": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "agent_main": {
            "name": "agent_main",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "agent": [
                    "argparse.Namespace"
                ],
                "args_cb": [
                    "List[str]",
                    "Optional[Dict]",
                    "dict",
                    "VT",
                    "Iterator[T]",
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "setup_cb": [
                    "dict",
                    "Sequence",
                    "List[str]",
                    "IO",
                    "type",
                    "str"
                ]
            }
        },
        "Board.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.can_move_here": {
            "name": "can_move_here",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "dict",
                    "str",
                    "Union[bool, List[bool]]"
                ]
            }
        },
        "Board.get_actions": {
            "name": "get_actions",
            "location": 45,
            "return": [
                "List[str]",
                "str",
                "List[Dict]",
                "list",
                "Union[str, List[Any]]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "str",
                    "int"
                ]
            }
        },
        "Agent.initialize": {
            "name": "initialize",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "percepts": [
                    "float",
                    "Callable[[], Any]",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "players": [
                    "float",
                    "Callable[[], Any]",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "time_left": [
                    "float",
                    "Callable[[], Any]",
                    "int",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "Agent.play": {
            "name": "play",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "percepts": [
                    "int",
                    "float",
                    "bool"
                ],
                "player": [
                    "int",
                    "float",
                    "bool"
                ],
                "step": [
                    "int",
                    "float",
                    "bool"
                ],
                "time_left": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "agent_main.portarg": {
            "name": "portarg",
            "location": 129,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        }
    },
    "Blitz2019-main/local_runner/bot_2/Direction.py": {},
    "Blitz2019-main/local_runner/bot_2/GameMove.py": {
        "GameMove.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type": [
                    "int",
                    "str",
                    "bool"
                ],
                "line": [
                    "str",
                    "Dict[str, Any]",
                    "bytes",
                    "List[int]"
                ],
                "column": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "GameMove.__str__": {
            "name": "__str__",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameMove.is_pawn_move": {
            "name": "is_pawn_move",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameMove.to_game_format": {
            "name": "to_game_format",
            "location": 19,
            "return": [
                "Callable[[KT], VT]",
                "int",
                "Optional[Dict[str, str]]",
                "bool",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameMoveEnd.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GameMovePawn.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "p": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "GameMoveWallVertical.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "p": [
                    "Position",
                    "int",
                    "bool"
                ]
            }
        },
        "GameMoveWallHorizontal.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "p": [
                    "Position",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "Blitz2019-main/local_runner/bot_2/MoveFinder.py": {
        "MoveFinder.is_position_valid": {
            "name": "is_position_valid",
            "location": 6,
            "return": [
                "bool",
                "str",
                "int",
                "type"
            ],
            "arguments": {
                "p": [
                    "str",
                    "int",
                    "Optional[Callable]"
                ]
            }
        },
        "MoveFinder.get_moves_sanitized": {
            "name": "get_moves_sanitized",
            "location": 10,
            "return": [
                "bool",
                "int",
                "Optional[dict]",
                "list",
                "Optional[T]",
                "Sequence[Any]"
            ],
            "arguments": {
                "positions": [
                    "str",
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "MoveFinder.get_positions_str": {
            "name": "get_positions_str",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {
                "positions": [
                    "str",
                    "int",
                    "Union[int, str]"
                ]
            }
        },
        "MoveFinder.get_moves_vertical_axis": {
            "name": "get_moves_vertical_axis",
            "location": 18,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "position_from": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Optional[Sequence[str]]"
                ],
                "walls": [
                    "str",
                    "float"
                ]
            }
        },
        "MoveFinder.get_moves_horizontal_axis": {
            "name": "get_moves_horizontal_axis",
            "location": 49,
            "return": [
                "int",
                "List[str]",
                "str",
                "tuple"
            ],
            "arguments": {
                "position_from": [
                    "int"
                ],
                "walls": [
                    "str",
                    "int"
                ]
            }
        },
        "MoveFinder.get_moves": {
            "name": "get_moves",
            "location": 82,
            "return": [
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "position_from": [
                    "int",
                    "Optional[float]",
                    "bool",
                    "Union[int, float]",
                    "Mapping"
                ],
                "walls": [
                    "int",
                    "Optional[float]",
                    "bool",
                    "Union[int, float]",
                    "Mapping"
                ]
            }
        }
    },
    "Blitz2019-main/local_runner/bot_2/MyBot.py": {
        "RandomAgent.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomAgent.init_strategies": {
            "name": "init_strategies",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomAgent.get_current_position": {
            "name": "get_current_position",
            "location": 32,
            "return": [
                "int",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "utils.Node",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomAgent.get_possible_pawn_positions": {
            "name": "get_possible_pawn_positions",
            "location": 36,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomAgent.get_position_goal": {
            "name": "get_position_goal",
            "location": 57,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomAgent.get_position_current": {
            "name": "get_position_current",
            "location": 60,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomAgent.get_previous_pawn_moves": {
            "name": "get_previous_pawn_moves",
            "location": 63,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomAgent.get_goal_direction": {
            "name": "get_goal_direction",
            "location": 66,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomAgent.find_goal": {
            "name": "find_goal",
            "location": 82,
            "return": [
                "bool",
                "str",
                "int",
                "Optional[int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "RandomAgent.play": {
            "name": "play",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "percepts": [
                    "int",
                    "float"
                ],
                "player": [
                    "bool",
                    "int"
                ],
                "step": [
                    "int",
                    "Sequence"
                ],
                "time_left": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "Blitz2019-main/local_runner/bot_2/Position.py": {
        "Position.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "Union[str, int]",
                    "int",
                    "List[str]"
                ],
                "column": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "Position.go_south": {
            "name": "go_south",
            "location": 14,
            "return": [
                "str",
                "List[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Position.go_north": {
            "name": "go_north",
            "location": 17,
            "return": [
                "str",
                "List[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Position.go_east": {
            "name": "go_east",
            "location": 20,
            "return": [
                "str",
                "List[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Position.go_west": {
            "name": "go_west",
            "location": 23,
            "return": [
                "str",
                "List[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Position.go": {
            "name": "go",
            "location": 26,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "int"
                ]
            }
        },
        "Position.__str__": {
            "name": "__str__",
            "location": 29,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Position.__sub__": {
            "name": "__sub__",
            "location": 32,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Match"
                ]
            }
        },
        "Position.to_game_format": {
            "name": "to_game_format",
            "location": 35,
            "return": [
                "bool",
                "str",
                "int",
                "Hashable",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Position.__eq__": {
            "name": "__eq__",
            "location": 38,
            "return": [
                "bool",
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "List[T]",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "Position.__hash__": {
            "name": "__hash__",
            "location": 41,
            "return": [
                "str",
                "MutableMapping[str, Any]",
                "List[str]",
                "BaseException",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        },
        "Position.is_left_of": {
            "name": "is_left_of",
            "location": 44,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Optional[Type[BaseException]]",
                "Type[BaseException]"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "int",
                    "Sequence[T]"
                ]
            }
        },
        "Position.is_right_of": {
            "name": "is_right_of",
            "location": 61,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Optional[Type[BaseException]]",
                "Type[BaseException]"
            ],
            "arguments": {
                "self": [],
                "p": [
                    "int",
                    "Sequence[T]"
                ]
            }
        }
    },
    "Blitz2019-main/local_runner/bot_2/utils.py": {
        "dict_to_board": {
            "name": "dict_to_board",
            "location": 85,
            "return": [],
            "arguments": {
                "dictio": []
            }
        },
        "serve_agent": {
            "name": "serve_agent",
            "location": 135,
            "return": [],
            "arguments": {
                "agent": [],
                "address": [],
                "port": []
            }
        },
        "agent_main": {
            "name": "agent_main",
            "location": 147,
            "return": [],
            "arguments": {
                "agent": [],
                "args_cb": [],
                "setup_cb": []
            }
        },
        "InvalidAction.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "action": [],
                "player": []
            }
        },
        "NoPath.__repr__": {
            "name": "__repr__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Board.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Board.clone": {
            "name": "clone",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Board.can_move_here": {
            "name": "can_move_here",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "action": []
            }
        },
        "Board.get_actions": {
            "name": "get_actions",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "player": []
            }
        },
        "Agent.initialize": {
            "name": "initialize",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "percepts": [],
                "players": [],
                "time_left": []
            }
        },
        "Agent.play": {
            "name": "play",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "percepts": [],
                "player": [],
                "step": [],
                "time_left": []
            }
        },
        "agent_main.portarg": {
            "name": "portarg",
            "location": 163,
            "return": [],
            "arguments": {
                "string": []
            }
        }
    },
    "Blitz2019-main/local_runner/bot_2/Strategies/Strategy.py": {
        "Strategy.get": {
            "name": "get",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bot": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        }
    },
    "Blitz2019-main/local_runner/bot_2/Strategies/StrategyAggregate.py": {
        "StrategyAggregate.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "strategies": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "StrategyAggregate.get": {
            "name": "get",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bot": [
                    "str"
                ]
            }
        }
    },
    "Blitz2019-main/local_runner/bot_2/Strategies/StrategyBeeLine.py": {
        "StrategyBeeLine.get_fn_cost": {
            "name": "get_fn_cost",
            "location": 6,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "bot": [
                    "str",
                    "bool"
                ]
            }
        },
        "StrategyBeeLine.get_fn_position_property": {
            "name": "get_fn_position_property",
            "location": 18,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "bot": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "StrategyBeeLine.get": {
            "name": "get",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bot": [
                    "str"
                ]
            }
        },
        "StrategyBeeLine.get_fn_position_property.get_line": {
            "name": "get_line",
            "location": 19,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "p": [
                    "Position",
                    "str",
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "StrategyBeeLine.get_fn_position_property.get_column": {
            "name": "get_column",
            "location": 22,
            "return": [
                "int",
                "str",
                "List[List[int]]",
                "bool"
            ],
            "arguments": {
                "p": [
                    "Position",
                    "Callable",
                    "str",
                    "List[List[int]]"
                ]
            }
        }
    },
    "Blitz2019-main/local_runner/bot_2/Strategies/StrategyBoxPlayer.py": {
        "StrategyBoxPlayer.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "StrategyBoxPlayer.get": {
            "name": "get",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bot": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        }
    },
    "Blitz2019-main/local_runner/bot_2/Strategies/StrategyPutSingleWall.py": {
        "StrategyPutSingleWall.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StrategyPutSingleWall.get": {
            "name": "get",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bot": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        }
    },
    "Blitz2019-main/local_runner/bot_2/Strategies/__init__.py": {},
    "Blitz2019-main/microchallenges/__main__.py": {},
    "Blitz2019-main/microchallenges/challenges/__init__.py": {},
    "Blitz2019-main/microchallenges/challenges/pathfinder/pathfinder.py": {
        "generate_inputs": {
            "name": "generate_inputs",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "list_of_problem_data": [
                    "Optional[bytes]",
                    "str",
                    "Callable[[Any], T]",
                    "int",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "generate_outputs": {
            "name": "generate_outputs",
            "location": 17,
            "return": [
                "str",
                "Optional[str]",
                "IO[str]",
                "List[int]"
            ],
            "arguments": {
                "list_of_problem_data": [
                    "bool",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "generate_board": {
            "name": "generate_board",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "width": [
                    "int",
                    "list",
                    "List[int]",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "height": [
                    "int",
                    "list",
                    "List[int]"
                ],
                "with_weight": [
                    "Optional[List[str]]",
                    "bool"
                ]
            }
        },
        "find_solution": {
            "name": "find_solution",
            "location": 39,
            "return": [
                "str",
                "int",
                "Optional[List[str]]",
                "list",
                "bytes"
            ],
            "arguments": {
                "board_original": [
                    "dict",
                    "int",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "generate_problem": {
            "name": "generate_problem",
            "location": 54,
            "return": [
                "int",
                "dict",
                "Optional[bool]"
            ],
            "arguments": {
                "nb_of_problems": [
                    "int"
                ]
            }
        }
    },
    "Blitz2019-main/microchallenges/challenges/pathfinder/__init__.py": {},
    "Blitz2019-main/microchallenges/challenges/pingpong/pingpong.py": {
        "generate_inputs": {
            "name": "generate_inputs",
            "location": 2,
            "return": [],
            "arguments": {
                "nb_of_problems": []
            }
        },
        "generate_outputs": {
            "name": "generate_outputs",
            "location": 9,
            "return": [],
            "arguments": {
                "nb_of_problems": []
            }
        },
        "generate_problem": {
            "name": "generate_problem",
            "location": 17,
            "return": [],
            "arguments": {
                "nb_of_problems": []
            }
        }
    },
    "Blitz2019-main/microchallenges/challenges/pingpong/__init__.py": {},
    "Blitz2019-main/microchallenges/challenges/subsetsum/subsetsum.py": {
        "generate_inputs": {
            "name": "generate_inputs",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "problem_data": [
                    "bool",
                    "str"
                ]
            }
        },
        "generate_problem_data": {
            "name": "generate_problem_data",
            "location": 15,
            "return": [
                "Optional[float]",
                "IO[bytes]",
                "bool",
                "dict",
                "Optional[Dict[str, Any]]",
                "str",
                "Dict[str, List[int]]"
            ],
            "arguments": {
                "number_of_problems": [
                    "str",
                    "List[float]",
                    "bool"
                ]
            }
        },
        "compute_answer_for_array": {
            "name": "compute_answer_for_array",
            "location": 24,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "data": [
                    "int",
                    "numpy.ndarray",
                    "Optional[Union[numpy.ndarray, numpy.void]]",
                    "List[int]"
                ],
                "test_candidate": [
                    "bool",
                    "Tuple[int, int]",
                    "Optional[List[Any]]",
                    "int",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "generate_outputs": {
            "name": "generate_outputs",
            "location": 56,
            "return": [
                "str",
                "Optional[str]",
                "IO[str]",
                "List[int]"
            ],
            "arguments": {
                "problem_data": [
                    "str",
                    "int",
                    "Optional[Any]",
                    "bool"
                ]
            }
        },
        "generate_problem": {
            "name": "generate_problem",
            "location": 69,
            "return": [
                "int",
                "dict",
                "Optional[bool]"
            ],
            "arguments": {
                "nb_of_problems": [
                    "int",
                    "str",
                    "Union[str, List[str]]",
                    "List[float]"
                ]
            }
        }
    },
    "Blitz2019-main/microchallenges/challenges/subsetsum/__init__.py": {},
    "Blitz2019-main/microchallenges/challenges/water/water.py": {
        "generate_inputs": {
            "name": "generate_inputs",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "list_of_problem_data": [
                    "Optional[bytes]",
                    "str",
                    "Callable[[Any], T]",
                    "int",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "generate_outputs": {
            "name": "generate_outputs",
            "location": 15,
            "return": [
                "str",
                "Optional[str]",
                "IO[str]",
                "List[int]"
            ],
            "arguments": {
                "list_of_problem_data": [
                    "bool",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "solve_water": {
            "name": "solve_water",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data": []
            }
        },
        "generate_problem": {
            "name": "generate_problem",
            "location": 44,
            "return": [
                "int",
                "dict",
                "Optional[bool]"
            ],
            "arguments": {
                "nb_of_problems": [
                    "int"
                ]
            }
        }
    },
    "Blitz2019-main/microchallenges/challenges/water/__init__.py": {},
    "Blitz2019-main/microchallenges/framework/framework.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [],
            "arguments": {
                "challenge_name": [],
                "replay_file": [],
                "results_json_file": [],
                "service_url": [],
                "team_name": [],
                "max_timeout": [],
                "connect_timeout": [],
                "duration": [],
                "rate": []
            }
        }
    },
    "Blitz2019-main/microchallenges/framework/score_calculator.py": {
        "serialize": {
            "name": "serialize",
            "location": 34,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Callable"
                ]
            }
        },
        "parse_timestamp": {
            "name": "parse_timestamp",
            "location": 47,
            "return": [
                "int",
                "list",
                "Dict[str, Any]",
                "Union[tuple, list]",
                "Sequence[str]",
                "List[List[int]]"
            ],
            "arguments": {
                "timestamp": [
                    "str",
                    "int",
                    "Callable",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "calculate_score": {
            "name": "calculate_score",
            "location": 78,
            "return": [
                "Iterable[T]",
                "Iterable[str]",
                "Callable",
                "int",
                "str"
            ],
            "arguments": {
                "results": [
                    "int",
                    "Optional[Callable[..., Any]]",
                    "str"
                ],
                "query_timeout": [
                    "int",
                    "float"
                ],
                "expected_responses": [
                    "int",
                    "dict",
                    "Optional[int]",
                    "Optional[bool]",
                    "str"
                ]
            }
        },
        "Score.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "timestamp": [
                    "bool",
                    "Optional[Mapping]",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "Exception",
                    "Dict[str, str]",
                    "Type[T]"
                ],
                "score": [
                    "bool",
                    "Optional[Mapping]",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "Exception",
                    "Dict[str, str]",
                    "Type[T]"
                ],
                "request_number": [
                    "bool",
                    "Callable"
                ],
                "request_timestamp": [
                    "bool",
                    "int",
                    "float",
                    "str",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]",
                    "list"
                ],
                "http_code": [
                    "int",
                    "str",
                    "float",
                    "Optional[str]"
                ],
                "problem": [
                    "bool",
                    "Optional[Mapping]",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "Exception",
                    "Dict[str, str]",
                    "Type[T]"
                ],
                "expected": [
                    "bool",
                    "Optional[Mapping]",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "Exception",
                    "Dict[str, str]",
                    "Type[T]"
                ],
                "answer": [
                    "bool",
                    "Optional[Mapping]",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "Exception",
                    "Dict[str, str]",
                    "Type[T]"
                ]
            }
        },
        "Results.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Blitz2019-main/microchallenges/framework/__init__.py": {},
    "Blitz2019-main/microchallenges/tests/test_basic_test_framework.py": {
        "TestBasicTestFrameworkTests.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasicTestFrameworkTests.tearDown": {
            "name": "tearDown",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasicTestFrameworkTests.test_does_not_crash": {
            "name": "test_does_not_crash",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasicTestFrameworkTests.test_does_produce_replay": {
            "name": "test_does_produce_replay",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBasicTestFrameworkTests.test_does_produce_score_file": {
            "name": "test_does_produce_score_file",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Blitz2019-main/microchallenges/tests/test_challenge_validation_test_framework.py": {
        "TestChallengeFrameworkTests.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChallengeFrameworkTests.tearDown": {
            "name": "tearDown",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestChallengeFrameworkTests.test_output_score": {
            "name": "test_output_score",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWrongChallengeFrameworkTests.setUp": {
            "name": "setUp",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWrongChallengeFrameworkTests.tearDown": {
            "name": "tearDown",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWrongChallengeFrameworkTests.test_output_score_should_not_count_wrong_answers": {
            "name": "test_output_score_should_not_count_wrong_answers",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAverageChallengeFrameworkTests.setUp": {
            "name": "setUp",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAverageChallengeFrameworkTests.tearDown": {
            "name": "tearDown",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAverageChallengeFrameworkTests.test_output_score_should_not_count_wrong_answers": {
            "name": "test_output_score_should_not_count_wrong_answers",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Blitz2019-main/microchallenges/tests/test_path_finder.py": {
        "TestPathFinderTests.test_multiple_path_same_weigth": {
            "name": "test_multiple_path_same_weigth",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPathFinderTests.test_multiple_path_same_weigth_2": {
            "name": "test_multiple_path_same_weigth_2",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPathFinderTests.test_verticalline_path": {
            "name": "test_verticalline_path",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPathFinderTests.test_line_path": {
            "name": "test_line_path",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPathFinderTests.test_problem_generation": {
            "name": "test_problem_generation",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Blitz2019-main/microchallenges/tests/test_sums.py": {
        "TestSumsChallengeTests.test_simple_problem": {
            "name": "test_simple_problem",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSumsChallengeTests.test_impossible_problem": {
            "name": "test_impossible_problem",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSumsChallengeTests.test_duplicate_number": {
            "name": "test_duplicate_number",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSumsChallengeTests.test_solution_with_self": {
            "name": "test_solution_with_self",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSumsChallengeTests.test_multiple_solution": {
            "name": "test_multiple_solution",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Blitz2019-main/microchallenges/tests/test_water.py": {
        "TestWaterChallengeTests.test_staircase_right": {
            "name": "test_staircase_right",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWaterChallengeTests.test_staircase_left": {
            "name": "test_staircase_left",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWaterChallengeTests.test_flat": {
            "name": "test_flat",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWaterChallengeTests.test_one_pond": {
            "name": "test_one_pond",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWaterChallengeTests.test_multiple_ponds": {
            "name": "test_multiple_ponds",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWaterChallengeTests.test_multiple_ponds_with_greater_left_max": {
            "name": "test_multiple_ponds_with_greater_left_max",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWaterChallengeTests.test_multiple_ponds_with_greater_right_max": {
            "name": "test_multiple_ponds_with_greater_right_max",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWaterChallengeTests.test_multiple_ponds_with_greater_middle_max": {
            "name": "test_multiple_ponds_with_greater_middle_max",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWaterChallengeTests.test_multiple_ponds_with_end_in_staircase": {
            "name": "test_multiple_ponds_with_end_in_staircase",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWaterChallengeTests.test_multiple_ponds_with_beginning_in_staircase": {
            "name": "test_multiple_ponds_with_beginning_in_staircase",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWaterChallengeTests.test_w_shape": {
            "name": "test_w_shape",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWaterChallengeTests.test_should_generate_expected_amount_of_problems": {
            "name": "test_should_generate_expected_amount_of_problems",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Blitz2019-main/microchallenges/tests/__init__.py": {
        "get_open_port": {
            "name": "get_open_port",
            "location": 6,
            "return": [
                "str",
                "List[List[int]]",
                "list",
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "Blitz2019-main/microchallenges/tests/scenario/flipping_pong.py": {
        "ping": {
            "name": "ping",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "Blitz2019-main/microchallenges/tests/scenario/perfect_pong.py": {
        "ping": {
            "name": "ping",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "Blitz2019-main/microchallenges/tests/scenario/wrongest_pong.py": {
        "ping": {
            "name": "ping",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "Blitz2019-main/starterpack/blitz2019/python/MyBot.py": {
        "RandomAgent.play": {
            "name": "play",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "percepts": [
                    "int",
                    "float"
                ],
                "player": [
                    "int",
                    "List[Dict[str, str]]",
                    "List[List[Any]]"
                ],
                "step": [
                    "int",
                    "bool",
                    "Sequence[Sequence[Any]]",
                    "str",
                    "Dict[str, Any]",
                    "float",
                    "Optional[Iterable]"
                ],
                "time_left": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "Blitz2019-main/starterpack/blitz2019/python/utils.py": {
        "dict_to_board": {
            "name": "dict_to_board",
            "location": 52,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "dictio": [
                    "int",
                    "bool"
                ]
            }
        },
        "serve_agent": {
            "name": "serve_agent",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "agent": [
                    "List[str]",
                    "int",
                    "str"
                ],
                "address": [
                    "str",
                    "Optional[str]"
                ],
                "port": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "agent_main": {
            "name": "agent_main",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "agent": [
                    "argparse.Namespace"
                ],
                "args_cb": [
                    "List[str]",
                    "Optional[Dict]",
                    "dict",
                    "VT",
                    "Iterator[T]",
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "setup_cb": [
                    "dict",
                    "Sequence",
                    "List[str]",
                    "IO",
                    "type",
                    "str"
                ]
            }
        },
        "Board.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Board.can_move_here": {
            "name": "can_move_here",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "dict",
                    "str",
                    "Union[bool, List[bool]]"
                ]
            }
        },
        "Board.get_actions": {
            "name": "get_actions",
            "location": 46,
            "return": [
                "List[str]",
                "str",
                "List[Dict]",
                "list",
                "Union[str, List[Any]]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "str",
                    "int"
                ]
            }
        },
        "Agent.initialize": {
            "name": "initialize",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "percepts": [
                    "float",
                    "Callable[[], Any]",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "players": [
                    "float",
                    "Callable[[], Any]",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "time_left": [
                    "float",
                    "Callable[[], Any]",
                    "int",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "Agent.play": {
            "name": "play",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "percepts": [
                    "int",
                    "float",
                    "bool"
                ],
                "player": [
                    "int",
                    "float",
                    "bool"
                ],
                "step": [
                    "int",
                    "float",
                    "bool"
                ],
                "time_left": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "agent_main.portarg": {
            "name": "portarg",
            "location": 130,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        }
    },
    "Blitz2019-main/starterpack/microchallenge/python/MyBot.py": {
        "microchallenge": {
            "name": "microchallenge",
            "location": 11,
            "return": [
                "str",
                "argparse.Namespace"
            ],
            "arguments": {}
        }
    },
    "Blitz2019-main/tests/test_board.py": {
        "TestBoard2Players.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard2Players.test_create_board_from_another_one": {
            "name": "test_create_board_from_another_one",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard2Players.test_create_board_from_another_one_with_custom_starting_walls": {
            "name": "test_create_board_from_another_one_with_custom_starting_walls",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard2Players.test_start_position": {
            "name": "test_start_position",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard2Players.test_should_not_allow_3_players": {
            "name": "test_should_not_allow_3_players",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard2Players.test_should_not_allow_more_than_4_players": {
            "name": "test_should_not_allow_more_than_4_players",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard2Players.test_can_move_here_works_for_all_players": {
            "name": "test_can_move_here_works_for_all_players",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard2Players.test_can_move_here_allow_moves_around": {
            "name": "test_can_move_here_allow_moves_around",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard2Players.test_can_move_here_disallow_move_on_yourself": {
            "name": "test_can_move_here_disallow_move_on_yourself",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard2Players.test_can_move_here_disallow_diagonal_move": {
            "name": "test_can_move_here_disallow_diagonal_move",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard2Players.test_get_legal_pawn_moves": {
            "name": "test_get_legal_pawn_moves",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard2Players.test_get_legal_pawn_moves_with_player2_close": {
            "name": "test_get_legal_pawn_moves_with_player2_close",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard2Players.test_get_legal_pawn_moves_with_player1_close": {
            "name": "test_get_legal_pawn_moves_with_player1_close",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard2Players.test_get_legal_pawn_moves_with_wall": {
            "name": "test_get_legal_pawn_moves_with_wall",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard2Players.test_is_finished_at_start": {
            "name": "test_is_finished_at_start",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard2Players.test_is_finished_at_mid_game": {
            "name": "test_is_finished_at_mid_game",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard2Players.test_is_finished_player_1": {
            "name": "test_is_finished_player_1",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard2Players.test_is_finished_player_2": {
            "name": "test_is_finished_player_2",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard2Players.test_wall_count_at_start": {
            "name": "test_wall_count_at_start",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard2Players.test_move_on_other_paws_disallowed": {
            "name": "test_move_on_other_paws_disallowed",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard2Players.test_min_steps_before_victory_at_victory_player_1": {
            "name": "test_min_steps_before_victory_at_victory_player_1",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard2Players.test_min_steps_before_victory_at_victory_player_2": {
            "name": "test_min_steps_before_victory_at_victory_player_2",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard2Players.test_min_steps_before_victory_at_start": {
            "name": "test_min_steps_before_victory_at_start",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard2Players.test_clone": {
            "name": "test_clone",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard2Players.test_paths_exist": {
            "name": "test_paths_exist",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard2Players.test_is_action_valid_isnt_when_stepping_on_someone_elses_toes": {
            "name": "test_is_action_valid_isnt_when_stepping_on_someone_elses_toes",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard2Players.test_is_action_valid_isnt_when_moving_somewhere_random": {
            "name": "test_is_action_valid_isnt_when_moving_somewhere_random",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard2Players.test_is_action_valid_is_when_moving_properly": {
            "name": "test_is_action_valid_is_when_moving_properly",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard2Players.test_get_score_player_1_win": {
            "name": "test_get_score_player_1_win",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard2Players.test_get_score_player_2_win": {
            "name": "test_get_score_player_2_win",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard2Players.test_get_score_player_both_same_distance": {
            "name": "test_get_score_player_both_same_distance",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard2Players.test_get_scores_should_order_player_by_score": {
            "name": "test_get_scores_should_order_player_by_score",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard2Players.test_get_scores_should_order_player_by_score_with_player_2_winning": {
            "name": "test_get_scores_should_order_player_by_score_with_player_2_winning",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard2Players.test_get_scores_walls_should_be_tiebreaker": {
            "name": "test_get_scores_walls_should_be_tiebreaker",
            "location": 216,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard2Players.test_get_scores_walls_should_not_be_considered_without_tie": {
            "name": "test_get_scores_walls_should_not_be_considered_without_tie",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard2Players.test_should_support_starting_wall_specification": {
            "name": "test_should_support_starting_wall_specification",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.setUp": {
            "name": "setUp",
            "location": 243,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_create_board_from_another_one": {
            "name": "test_create_board_from_another_one",
            "location": 246,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_create_board_from_another_one_with_custom_starting_walls": {
            "name": "test_create_board_from_another_one_with_custom_starting_walls",
            "location": 271,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_start_position": {
            "name": "test_start_position",
            "location": 285,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_can_move_here_works_for_all_players": {
            "name": "test_can_move_here_works_for_all_players",
            "location": 291,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_can_move_here_allow_moves_around": {
            "name": "test_can_move_here_allow_moves_around",
            "location": 297,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_can_move_here_disallow_move_on_yourself": {
            "name": "test_can_move_here_disallow_move_on_yourself",
            "location": 304,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_can_move_here_disallow_diagonal_move": {
            "name": "test_can_move_here_disallow_diagonal_move",
            "location": 307,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_get_legal_pawn_moves_with_wall": {
            "name": "test_get_legal_pawn_moves_with_wall",
            "location": 314,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_get_legal_pawn_moves_with_all_players_close": {
            "name": "test_get_legal_pawn_moves_with_all_players_close",
            "location": 321,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_get_legal_pawn_moves": {
            "name": "test_get_legal_pawn_moves",
            "location": 330,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_is_finished_at_start": {
            "name": "test_is_finished_at_start",
            "location": 336,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_is_finished_at_mid_game": {
            "name": "test_is_finished_at_mid_game",
            "location": 339,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_is_finished_player_1": {
            "name": "test_is_finished_player_1",
            "location": 346,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_is_finished_player_2": {
            "name": "test_is_finished_player_2",
            "location": 350,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_is_finished_player_3": {
            "name": "test_is_finished_player_3",
            "location": 354,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_is_finished_player_4": {
            "name": "test_is_finished_player_4",
            "location": 358,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_is_finished_half_of_the_players": {
            "name": "test_is_finished_half_of_the_players",
            "location": 362,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_is_finished_all_but_one_players": {
            "name": "test_is_finished_all_but_one_players",
            "location": 367,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_wall_count_at_start": {
            "name": "test_wall_count_at_start",
            "location": 373,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_move_on_other_paws_disallowed": {
            "name": "test_move_on_other_paws_disallowed",
            "location": 379,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_min_steps_before_victory_at_victory_player_1": {
            "name": "test_min_steps_before_victory_at_victory_player_1",
            "location": 386,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_min_steps_before_victory_at_victory_player_2": {
            "name": "test_min_steps_before_victory_at_victory_player_2",
            "location": 390,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_min_steps_before_victory_at_victory_player_3": {
            "name": "test_min_steps_before_victory_at_victory_player_3",
            "location": 394,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_min_steps_before_victory_at_victory_player_4": {
            "name": "test_min_steps_before_victory_at_victory_player_4",
            "location": 398,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_is_legal_pawn_move_move_on_the_side": {
            "name": "test_is_legal_pawn_move_move_on_the_side",
            "location": 402,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_min_steps_before_victory_at_start": {
            "name": "test_min_steps_before_victory_at_start",
            "location": 405,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_clone": {
            "name": "test_clone",
            "location": 410,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_paths_exist": {
            "name": "test_paths_exist",
            "location": 416,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_is_action_valid_isnt_when_stepping_on_someone_elses_toes": {
            "name": "test_is_action_valid_isnt_when_stepping_on_someone_elses_toes",
            "location": 430,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_is_action_valid_isnt_when_moving_somewhere_random": {
            "name": "test_is_action_valid_isnt_when_moving_somewhere_random",
            "location": 440,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_is_action_valid_is_when_moving_properly": {
            "name": "test_is_action_valid_is_when_moving_properly",
            "location": 450,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_get_score_player_1_win": {
            "name": "test_get_score_player_1_win",
            "location": 460,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_get_score_player_2_win": {
            "name": "test_get_score_player_2_win",
            "location": 470,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_get_score_player_3_win": {
            "name": "test_get_score_player_3_win",
            "location": 480,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_get_score_player_4_win": {
            "name": "test_get_score_player_4_win",
            "location": 490,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_get_score_player_all_same_distance": {
            "name": "test_get_score_player_all_same_distance",
            "location": 500,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_get_scores_should_order_player_by_score": {
            "name": "test_get_scores_should_order_player_by_score",
            "location": 510,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_get_scores_should_order_player_by_score_with_player_2_winning": {
            "name": "test_get_scores_should_order_player_by_score_with_player_2_winning",
            "location": 521,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_get_scores_should_order_player_by_score_with_player_3_winning": {
            "name": "test_get_scores_should_order_player_by_score_with_player_3_winning",
            "location": 532,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_get_scores_should_order_player_by_score_with_player_4_winning": {
            "name": "test_get_scores_should_order_player_by_score_with_player_4_winning",
            "location": 543,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_get_scores_walls_should_be_tiebreaker": {
            "name": "test_get_scores_walls_should_be_tiebreaker",
            "location": 554,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_get_scores_walls_should_be_tiebreaker_with_player_3_winning": {
            "name": "test_get_scores_walls_should_be_tiebreaker_with_player_3_winning",
            "location": 569,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_get_scores_walls_should_not_be_considered_without_tie": {
            "name": "test_get_scores_walls_should_not_be_considered_without_tie",
            "location": 584,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_get_scores_last_player_should_be_priorised_in_case_of_tie_with_points_and_walls": {
            "name": "test_get_scores_last_player_should_be_priorised_in_case_of_tie_with_points_and_walls",
            "location": 599,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoard4Players.test_should_support_starting_wall_specification": {
            "name": "test_should_support_starting_wall_specification",
            "location": 614,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoardRules.setUp": {
            "name": "setUp",
            "location": 627,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoardRules.test_is_action_valid_should_return_false_if_no_wall_left": {
            "name": "test_is_action_valid_should_return_false_if_no_wall_left",
            "location": 630,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoardBasics.setUp": {
            "name": "setUp",
            "location": 643,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBoardBasics.test_play_action_add_vertical_wall": {
            "name": "test_play_action_add_vertical_wall",
            "location": 646,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Blitz2019-main/tests/test_full_game.py": {
        "TestGame.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGame.tearDown": {
            "name": "tearDown",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGame.test_dumb_scenario": {
            "name": "test_dumb_scenario",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Blitz2019-main/tests/test_game.py": {
        "TestGameInit.test_should_support_being_sent_2_players": {
            "name": "test_should_support_being_sent_2_players",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameInit.test_should_support_being_sent_3_players": {
            "name": "test_should_support_being_sent_3_players",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameInit.test_should_support_being_sent_4_players": {
            "name": "test_should_support_being_sent_4_players",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameInit.test_should_create_trace_with_player_names_when_2_are_supplied": {
            "name": "test_should_create_trace_with_player_names_when_2_are_supplied",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameInit.test_should_create_trace_with_player_names_when_4_are_supplied": {
            "name": "test_should_create_trace_with_player_names_when_4_are_supplied",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGamePlay.setUp": {
            "name": "setUp",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGamePlay.test_play_with_2_players_should_call_initialize": {
            "name": "test_play_with_2_players_should_call_initialize",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGamePlay.test_play_with_2_players_should_play_while_not_finished": {
            "name": "test_play_with_2_players_should_play_while_not_finished",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGamePlay.test_play_with_4_players_should_call_initialize": {
            "name": "test_play_with_4_players_should_call_initialize",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGamePlay.test_play_with_4_players_should_play_while_not_finished": {
            "name": "test_play_with_4_players_should_play_while_not_finished",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGamePlay.test_play_with_2_players_should_correctly_set_the_winner": {
            "name": "test_play_with_2_players_should_correctly_set_the_winner",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGamePlay.test_play_with_4_players_should_correctly_set_the_winner": {
            "name": "test_play_with_4_players_should_correctly_set_the_winner",
            "location": 126,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGamePlay.test_play_should_reset_credits_every_turn": {
            "name": "test_play_should_reset_credits_every_turn",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGamePlay.test_should_return_ranking_with_all_2_players": {
            "name": "test_should_return_ranking_with_all_2_players",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGamePlay.test_should_return_ranking_based_on_order_of_arrival_for_2_players": {
            "name": "test_should_return_ranking_based_on_order_of_arrival_for_2_players",
            "location": 158,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGamePlay.test_should_return_ranking_based_on_order_of_arrival_for_2_players_with_disconnect": {
            "name": "test_should_return_ranking_based_on_order_of_arrival_for_2_players_with_disconnect",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGamePlay.test_should_return_ranking_based_on_order_of_arrival_for_4_players": {
            "name": "test_should_return_ranking_based_on_order_of_arrival_for_4_players",
            "location": 194,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGamePlay.test_should_return_ranking_based_on_order_of_arrival_for_4_players_nonobstant_the_score_order": {
            "name": "test_should_return_ranking_based_on_order_of_arrival_for_4_players_nonobstant_the_score_order",
            "location": 220,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGamePlay.test_should_return_ranking_based_on_order_of_arrival_for_4_players_player_3_wins": {
            "name": "test_should_return_ranking_based_on_order_of_arrival_for_4_players_player_3_wins",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGamePlay.test_should_return_ranking_based_on_order_of_arrival_for_4_players_with_disconnections": {
            "name": "test_should_return_ranking_based_on_order_of_arrival_for_4_players_with_disconnections",
            "location": 275,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGamePlay.test_should_not_poke_player_who_won": {
            "name": "test_should_not_poke_player_who_won",
            "location": 305,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGamePlay.test_should_not_infinite_loop_when_2_player_disconnect_and_2_players_are_done": {
            "name": "test_should_not_infinite_loop_when_2_player_disconnect_and_2_players_are_done",
            "location": 340,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameDisconnect2Players.setUp": {
            "name": "setUp",
            "location": 365,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameDisconnect2Players.test_play_should_call_initialize_and_make_player2_win_on_player1_disconnect": {
            "name": "test_play_should_call_initialize_and_make_player2_win_on_player1_disconnect",
            "location": 382,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameDisconnect2Players.test_play_should_call_initialize_and_make_player1_win_on_player2_disconnect": {
            "name": "test_play_should_call_initialize_and_make_player1_win_on_player2_disconnect",
            "location": 388,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameDisconnect2Players.test_play_should_call_play_and_make_player1_win_on_player2_disconnect": {
            "name": "test_play_should_call_play_and_make_player1_win_on_player2_disconnect",
            "location": 395,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameDisconnect2Players.test_play_should_call_play_and_make_player2_win_on_player1_disconnect": {
            "name": "test_play_should_call_play_and_make_player2_win_on_player1_disconnect",
            "location": 406,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameDisconnect2Players.test_should_return_ranking_with_player_2_when_player_1_disconnect": {
            "name": "test_should_return_ranking_with_player_2_when_player_1_disconnect",
            "location": 415,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameDisconnect2Players.test_should_return_ranking_with_player_1_when_player_2_disconnect": {
            "name": "test_should_return_ranking_with_player_1_when_player_2_disconnect",
            "location": 424,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameDisconnect2Players.test_play_should_call_initialize_and_not_declare_a_winner_if_none_can_connect": {
            "name": "test_play_should_call_initialize_and_not_declare_a_winner_if_none_can_connect",
            "location": 434,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameDisconnect4Players.setUp": {
            "name": "setUp",
            "location": 445,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameDisconnect4Players.test_play_should_call_initialize_and_not_leave_the_game_if_one_player_disconnect": {
            "name": "test_play_should_call_initialize_and_not_leave_the_game_if_one_player_disconnect",
            "location": 463,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameDisconnect4Players.test_play_should_call_initialize_and_not_declare_a_winner_if_none_can_connect": {
            "name": "test_play_should_call_initialize_and_not_declare_a_winner_if_none_can_connect",
            "location": 472,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameDisconnect4Players.test_play_should_call_initialize_and_not_make_player_play_if_disconnected": {
            "name": "test_play_should_call_initialize_and_not_make_player_play_if_disconnected",
            "location": 485,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameDisconnect4Players.test_play_should_call_play_while_there_are_connected_players": {
            "name": "test_play_should_call_play_while_there_are_connected_players",
            "location": 502,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameDisconnect4Players.test_play_should_not_show_all_player_to_ranking_even_if_disconnected": {
            "name": "test_play_should_not_show_all_player_to_ranking_even_if_disconnected",
            "location": 540,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameMetaInformation.setUp": {
            "name": "setUp",
            "location": 556,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGameMetaInformation.test_should_add_information_about_disconnection": {
            "name": "test_should_add_information_about_disconnection",
            "location": 575,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Blitz2019-main/tests/test_trace.py": {
        "TestTrace.setUp": {
            "name": "setUp",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTrace.tearDown": {
            "name": "tearDown",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTrace.test_export_json": {
            "name": "test_export_json",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTrace.test_export_and_load": {
            "name": "test_export_and_load",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTrace.test_replay_without_winner": {
            "name": "test_replay_without_winner",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTrace.test_replay_with_player1_winner": {
            "name": "test_replay_with_player1_winner",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTrace.test_replay_with_player2_winner": {
            "name": "test_replay_with_player2_winner",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Blitz2019-main/tests/__init__.py": {}
}
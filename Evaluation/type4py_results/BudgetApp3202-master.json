{
    "BudgetApp3202-master/webapi/webapi/app.py": {
        "create_middleware": {
            "name": "create_middleware",
            "location": 17,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "create_app": {
            "name": "create_app",
            "location": 25,
            "return": [],
            "arguments": {
                "middleware": [
                    "str"
                ]
            }
        }
    },
    "BudgetApp3202-master/webapi/webapi/config.py": {},
    "BudgetApp3202-master/webapi/webapi/database.py": {
        "init_database": {
            "name": "init_database",
            "location": 9,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "db_name": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "BudgetApp3202-master/webapi/webapi/error_handlers.py": {
        "register_error_handlers": {
            "name": "register_error_handlers",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "app": []
            }
        },
        "CatchAllHandler.handle": {
            "name": "handle",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "ex": [
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ],
                "request": [
                    "dict",
                    "Dict[str, Any]",
                    "Tuple[bytes]",
                    "float"
                ],
                "response": [
                    "dict",
                    "Dict[str, Any]",
                    "Tuple[bytes]",
                    "float"
                ],
                "params": [
                    "dict",
                    "Dict[str, Any]",
                    "Tuple[bytes]",
                    "float"
                ]
            }
        },
        "DoesNotExistHandler.handle": {
            "name": "handle",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "ex": [
                    "dict",
                    "Dict[str, Any]",
                    "Tuple[bytes]",
                    "float"
                ],
                "request": [
                    "dict",
                    "Dict[str, Any]",
                    "Tuple[bytes]",
                    "float"
                ],
                "response": [
                    "dict",
                    "Dict[str, Any]",
                    "Tuple[bytes]",
                    "float"
                ],
                "params": [
                    "dict",
                    "Dict[str, Any]",
                    "Tuple[bytes]",
                    "float"
                ]
            }
        }
    },
    "BudgetApp3202-master/webapi/webapi/media_handlers.py": {
        "register_media_handlers": {
            "name": "register_media_handlers",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "app": []
            }
        },
        "SnakeCaseJsonHandler.deserialize": {
            "name": "deserialize",
            "location": 9,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "int",
                    "bytearray",
                    "str",
                    "List[List[int]]",
                    "List[float]"
                ]
            }
        },
        "SnakeCaseJsonHandler.serialize": {
            "name": "serialize",
            "location": 17,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "media": [
                    "str",
                    "bytes",
                    "allennlp.common.util.JsonDict",
                    "bytearray"
                ]
            }
        }
    },
    "BudgetApp3202-master/webapi/webapi/models.py": {},
    "BudgetApp3202-master/webapi/webapi/routes.py": {
        "register_routes": {
            "name": "register_routes",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "str"
                ]
            }
        },
        "RootResource.on_get": {
            "name": "on_get",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str"
                ],
                "response": [
                    "str",
                    "dict",
                    "Mapping[str, str]"
                ]
            }
        }
    },
    "BudgetApp3202-master/webapi/webapi/util.py": {
        "change_keys": {
            "name": "change_keys",
            "location": 1,
            "return": [
                "str",
                "Set[str]",
                "list",
                "float",
                "bool"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "List['Photo']",
                    "List[int]",
                    "Set[Tuple[int, int]]"
                ],
                "convert": [
                    "bool",
                    "dict",
                    "str"
                ]
            }
        }
    },
    "BudgetApp3202-master/webapi/webapi/__init__.py": {},
    "BudgetApp3202-master/webapi/webapi/middleware/authentication.py": {
        "AuthenticationMiddleware.process_resource": {
            "name": "process_resource",
            "location": 7,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Callable[..., Awaitable[dict]]"
                ],
                "response": [],
                "resource": [],
                "params": []
            }
        }
    },
    "BudgetApp3202-master/webapi/webapi/middleware/cors.py": {
        "CorsMiddleware.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CorsMiddleware.process_resource": {
            "name": "process_resource",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [],
                "response": [],
                "resource": [],
                "params": []
            }
        }
    },
    "BudgetApp3202-master/webapi/webapi/middleware/database_connection.py": {
        "DatabaseConnectionMiddleware.process_resource": {
            "name": "process_resource",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [],
                "response": [],
                "resource": [],
                "params": []
            }
        },
        "DatabaseConnectionMiddleware.process_response": {
            "name": "process_response",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [],
                "response": [],
                "resource": [],
                "req_succeeded": []
            }
        }
    },
    "BudgetApp3202-master/webapi/webapi/middleware/empty_resource.py": {
        "EmptyResponseMiddleware.process_response": {
            "name": "process_response",
            "location": 9,
            "return": [
                "Iterator[Dict[str, str]]",
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "Mapping[str, Any]",
                "str",
                "Iterator[Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "List[Dict[str, Any]]"
                ],
                "response": [],
                "resource": [],
                "req_succeeded": []
            }
        }
    },
    "BudgetApp3202-master/webapi/webapi/middleware/__init__.py": {},
    "BudgetApp3202-master/webapi/webapi/resources/analytics.py": {
        "AnalyticsRepository.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "income_model": [
                    "str",
                    "Union[Callable, str]",
                    "Optional[List[str]]",
                    "int"
                ],
                "expense_model": [
                    "str",
                    "Union[Callable, str]",
                    "Optional[List[str]]",
                    "int"
                ],
                "transaction_model": [
                    "str",
                    "Union[Callable, str]",
                    "Optional[List[str]]",
                    "int"
                ]
            }
        },
        "AnalyticsRepository._serialise": {
            "name": "_serialise",
            "location": 12,
            "return": [
                "str",
                "Iterable[int]",
                "Optional[str]",
                "Mapping"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool"
                ]
            }
        },
        "AnalyticsRepository.get_weight_adjusted_incomes": {
            "name": "get_weight_adjusted_incomes",
            "location": 29,
            "return": [
                "bool",
                "int",
                "List[Tuple[int, str, str]]",
                "List[Dict[str, Any]]",
                "frozenset"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Sequence[int]"
                ]
            }
        },
        "AnalyticsRepository.get_weight_adjusted_expenses": {
            "name": "get_weight_adjusted_expenses",
            "location": 33,
            "return": [
                "bool",
                "int",
                "List[Tuple[int, str, str]]",
                "List[Dict[str, Any]]",
                "frozenset"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Sequence[int]"
                ]
            }
        },
        "AnalyticsRepository.get_weight_adjusted_transactions": {
            "name": "get_weight_adjusted_transactions",
            "location": 37,
            "return": [
                "List[int]",
                "Optional[dict]",
                "list",
                "Tuple[int, int]",
                "List[zerver.models.Message]",
                "Dict[str, Any]",
                "Sequence[Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "List[int]"
                ],
                "incoming": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "AnalyticsCollection.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "analytics_repo": [
                    "str",
                    "bool"
                ]
            }
        },
        "AnalyticsCollection.on_get": {
            "name": "on_get",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "str"
                ],
                "response": [
                    "dict",
                    "Callable[[str], bool]",
                    "Dict[str, str]",
                    "Dict[str, Dict[str, Any]]",
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "id": [
                    "int",
                    "Union[bool, Tuple[float, float]]"
                ]
            }
        }
    },
    "BudgetApp3202-master/webapi/webapi/resources/budget.py": {
        "BudgetRepository.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user_repo": [
                    "Optional[int]",
                    "User",
                    "zerver.models.UserProfile",
                    "List[domain.models.User]",
                    "str",
                    "int",
                    "bool",
                    "models.characters.character_base.Character"
                ],
                "budget_model": [
                    "str",
                    "int",
                    "database.User",
                    "users.models.JustfixUser",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "BudgetRepository._serialise_tx": {
            "name": "_serialise_tx",
            "location": 13,
            "return": [
                "dict",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, float]",
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "tx": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "BudgetRepository._serialise_budget": {
            "name": "_serialise_budget",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "budget": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "BudgetRepository.get_budget": {
            "name": "get_budget",
            "location": 28,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "BudgetRepository.get_budgets": {
            "name": "get_budgets",
            "location": 32,
            "return": [
                "str",
                "List[int]",
                "List[List[int]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Sequence[int]"
                ]
            }
        },
        "BudgetRepository.create_budget": {
            "name": "create_budget",
            "location": 36,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "Sequence[int]"
                ],
                "budget": [
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "BudgetRepository.update_budget": {
            "name": "update_budget",
            "location": 48,
            "return": [
                "float",
                "zam_repondeur.models.Amendement",
                "str",
                "datetime.timedelta",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "media": [
                    "str",
                    "dict",
                    "lib.model.user.user.UserID",
                    "int"
                ],
                "id": [
                    "int",
                    "Union[int, str]",
                    "Iterable[str]",
                    "Iterable[int]",
                    "dict",
                    "str"
                ]
            }
        },
        "BudgetRepository.delete_budget": {
            "name": "delete_budget",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "budget_id": [
                    "int",
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "BudgetCollection.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "budget_repo": [
                    "str",
                    "bool"
                ]
            }
        },
        "BudgetCollection.on_get": {
            "name": "on_get",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str, Any]",
                    "dict",
                    "Callable"
                ],
                "response": [
                    "Dict[str, Any]",
                    "Tuple[dict, bool]",
                    "Optional[Dict[str, str]]",
                    "Type[T]"
                ]
            }
        },
        "BudgetCollection.on_put": {
            "name": "on_put",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "response": [
                    "Dict[str, Any]",
                    "Dict[str, List[Any]]",
                    "dict"
                ]
            }
        },
        "BudgetCollection.on_post": {
            "name": "on_post",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str"
                ],
                "response": [
                    "str",
                    "bool",
                    "Mapping[str, str]",
                    "Optional[MutableMapping]",
                    "dict"
                ]
            }
        },
        "BudgetResource.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "budget_repo": [
                    "str",
                    "bool"
                ]
            }
        },
        "BudgetResource.on_get": {
            "name": "on_get",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "Union[bool, Tuple[float, float]]"
                ],
                "response": [
                    "int",
                    "str",
                    "Optional[str]",
                    "dict",
                    "List[Dict[str, str]]"
                ],
                "id": [
                    "int",
                    "str",
                    "Optional[str]",
                    "dict",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "BudgetResource.on_post": {
            "name": "on_post",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "List[int]",
                    "Tuple[str, List[str]]",
                    "Optional[Dict]",
                    "bool"
                ],
                "response": [
                    "List[int]",
                    "Tuple[str, List[str]]",
                    "Optional[Dict]",
                    "bool"
                ],
                "id": [
                    "List[int]",
                    "Tuple[str, List[str]]",
                    "Optional[Dict]",
                    "bool"
                ]
            }
        },
        "BudgetResource.on_delete": {
            "name": "on_delete",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "Union[bool, Tuple[float, float]]"
                ],
                "response": [
                    "str",
                    "dict",
                    "models.Dashboard",
                    "int",
                    "Optional[int]"
                ],
                "id": [
                    "int",
                    "contests.models.User",
                    "str",
                    "Set[int]"
                ]
            }
        }
    },
    "BudgetApp3202-master/webapi/webapi/resources/comparison.py": {
        "ComparisonRepository.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "income_model": [
                    "bool",
                    "Optional[int]",
                    "Exception",
                    "Iterable['adi.Instance']",
                    "str"
                ],
                "expense_model": [
                    "bool",
                    "Optional[int]",
                    "Exception",
                    "Iterable['adi.Instance']",
                    "str"
                ],
                "budget_model": [
                    "bool",
                    "Optional[int]",
                    "Exception",
                    "Iterable['adi.Instance']",
                    "str"
                ],
                "profile_model": [
                    "str",
                    "bool",
                    "Optional[Iterable[str]]",
                    "Optional[str]",
                    "int"
                ],
                "user_settings_model": [
                    "str",
                    "int",
                    "Tuple[str]",
                    "bool",
                    "List[int]"
                ],
                "user_model": [
                    "bool",
                    "int",
                    "Callable",
                    "zerver.models.UserProfile"
                ],
                "analytics_repo": [
                    "bool",
                    "Optional[int]",
                    "Exception",
                    "Iterable['adi.Instance']",
                    "str"
                ]
            }
        },
        "ComparisonRepository.get_data": {
            "name": "get_data",
            "location": 21,
            "return": [
                "bool",
                "str",
                "Dict[str, Union[int, str]]",
                "Dict[str, Any]",
                "salon.models.Stylist",
                "Optional[Tuple[str]]"
            ],
            "arguments": {
                "self": [],
                "media": [
                    "dict",
                    "str",
                    "List[Dict[str, str]]"
                ],
                "user_id": [
                    "int",
                    "datetime.datetime",
                    "str",
                    "models.User"
                ]
            }
        },
        "ComparisonCollection.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "comparison_repo": [
                    "str",
                    "bool"
                ]
            }
        },
        "ComparisonCollection.on_post": {
            "name": "on_post",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str, Any]",
                    "Exception"
                ],
                "response": [
                    "app.models.dto.LoginResponse",
                    "Dict[str, Dict[str, Any]]",
                    "bool",
                    "dict",
                    "models.posting.PostingList"
                ]
            }
        }
    },
    "BudgetApp3202-master/webapi/webapi/resources/expense.py": {
        "ExpenseRepository.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user_repo": [
                    "Optional[int]",
                    "User",
                    "zerver.models.UserProfile",
                    "List[domain.models.User]",
                    "str",
                    "int",
                    "bool",
                    "models.characters.character_base.Character"
                ],
                "expense_model": [
                    "str",
                    "int",
                    "database.User",
                    "users.models.JustfixUser",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "ExpenseRepository._serialise_expense": {
            "name": "_serialise_expense",
            "location": 14,
            "return": [
                "dict",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, float]",
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "expense": [
                    "int"
                ]
            }
        },
        "ExpenseRepository.get_expenses": {
            "name": "get_expenses",
            "location": 26,
            "return": [
                "bool",
                "list",
                "List[Dict[str, Any]]",
                "frozenset",
                "str"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Sequence[int]"
                ]
            }
        },
        "ExpenseRepository.get_expense": {
            "name": "get_expense",
            "location": 30,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "ExpenseRepository.create_expense": {
            "name": "create_expense",
            "location": 34,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "media": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "user_id": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "ExpenseRepository.update_expense": {
            "name": "update_expense",
            "location": 47,
            "return": [
                "float",
                "zam_repondeur.models.Amendement",
                "str",
                "datetime.timedelta",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "media": [
                    "dict",
                    "str"
                ],
                "id": [
                    "int",
                    "Union[int, str]",
                    "Iterable[str]",
                    "Iterable[int]",
                    "dict",
                    "str"
                ]
            }
        },
        "ExpenseRepository.delete_expense": {
            "name": "delete_expense",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "ExpenseCollection.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "expense_repo": [
                    "str",
                    "bool"
                ]
            }
        },
        "ExpenseCollection.on_get": {
            "name": "on_get",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str, Any]",
                    "dict",
                    "Callable"
                ],
                "response": [
                    "dict"
                ]
            }
        },
        "ExpenseCollection.on_put": {
            "name": "on_put",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str, Any]",
                    "bytes"
                ],
                "response": [
                    "app.models.dto.LoginResponse",
                    "bytes",
                    "Dict[str, Any]",
                    "dict",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "ExpenseResource.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "expense_repo": [
                    "str",
                    "bool"
                ]
            }
        },
        "ExpenseResource.on_get": {
            "name": "on_get",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "Union[bool, Tuple[float, float]]"
                ],
                "response": [
                    "int",
                    "str",
                    "Optional[str]",
                    "dict",
                    "List[Dict[str, str]]"
                ],
                "id": [
                    "int",
                    "str",
                    "Optional[str]",
                    "dict",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "ExpenseResource.on_post": {
            "name": "on_post",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "List[int]",
                    "Tuple[str, List[str]]",
                    "Optional[Dict]",
                    "bool"
                ],
                "response": [
                    "List[int]",
                    "Tuple[str, List[str]]",
                    "Optional[Dict]",
                    "bool"
                ],
                "id": [
                    "List[int]",
                    "Tuple[str, List[str]]",
                    "Optional[Dict]",
                    "bool"
                ]
            }
        },
        "ExpenseResource.on_delete": {
            "name": "on_delete",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "Union[bool, Tuple[float, float]]"
                ],
                "response": [
                    "str",
                    "dict",
                    "models.Dashboard",
                    "int",
                    "Optional[int]"
                ],
                "id": [
                    "int",
                    "contests.models.User",
                    "str",
                    "Set[int]"
                ]
            }
        }
    },
    "BudgetApp3202-master/webapi/webapi/resources/income.py": {
        "IncomeRepository.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user_repo": [
                    "Optional[int]",
                    "User",
                    "zerver.models.UserProfile",
                    "List[domain.models.User]",
                    "str",
                    "int",
                    "bool",
                    "models.characters.character_base.Character"
                ],
                "income_model": [
                    "str",
                    "int",
                    "database.User",
                    "users.models.JustfixUser",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "IncomeRepository._serialise_income": {
            "name": "_serialise_income",
            "location": 14,
            "return": [
                "dict",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, float]",
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "income": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "IncomeRepository.get_incomes": {
            "name": "get_incomes",
            "location": 26,
            "return": [
                "bool",
                "list",
                "List[Dict[str, Any]]",
                "frozenset",
                "str"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Sequence[int]"
                ]
            }
        },
        "IncomeRepository.get_income": {
            "name": "get_income",
            "location": 30,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "IncomeRepository.create_income": {
            "name": "create_income",
            "location": 34,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "media": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "user_id": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "IncomeRepository.update_income": {
            "name": "update_income",
            "location": 47,
            "return": [
                "float",
                "zam_repondeur.models.Amendement",
                "str",
                "datetime.timedelta",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "media": [
                    "str",
                    "dict",
                    "lib.model.user.user.UserID",
                    "int"
                ],
                "id": [
                    "int",
                    "Union[int, str]",
                    "Iterable[str]",
                    "Iterable[int]",
                    "dict",
                    "str"
                ]
            }
        },
        "IncomeRepository.delete_income": {
            "name": "delete_income",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "IncomeCollection.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "income_repo": [
                    "str",
                    "bool"
                ]
            }
        },
        "IncomeCollection.on_get": {
            "name": "on_get",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str, Any]",
                    "dict",
                    "Callable"
                ],
                "response": [
                    "dict"
                ]
            }
        },
        "IncomeCollection.on_put": {
            "name": "on_put",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str, Any]",
                    "bytes"
                ],
                "response": [
                    "app.models.dto.LoginResponse",
                    "bytes",
                    "Dict[str, Any]",
                    "dict",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "IncomeResource.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "income_repo": [
                    "str",
                    "bool"
                ]
            }
        },
        "IncomeResource.on_get": {
            "name": "on_get",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "Union[bool, Tuple[float, float]]"
                ],
                "response": [
                    "int",
                    "str",
                    "Optional[str]",
                    "dict",
                    "List[Dict[str, str]]"
                ],
                "id": [
                    "int",
                    "str",
                    "Optional[str]",
                    "dict",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "IncomeResource.on_post": {
            "name": "on_post",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "List[int]",
                    "Tuple[str, List[str]]",
                    "Optional[Dict]",
                    "bool"
                ],
                "response": [
                    "List[int]",
                    "Tuple[str, List[str]]",
                    "Optional[Dict]",
                    "bool"
                ],
                "id": [
                    "List[int]",
                    "Tuple[str, List[str]]",
                    "Optional[Dict]",
                    "bool"
                ]
            }
        },
        "IncomeResource.on_delete": {
            "name": "on_delete",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "Union[bool, Tuple[float, float]]"
                ],
                "response": [
                    "str",
                    "dict",
                    "models.Dashboard",
                    "int",
                    "Optional[int]"
                ],
                "id": [
                    "int",
                    "contests.models.User",
                    "str",
                    "Set[int]"
                ]
            }
        }
    },
    "BudgetApp3202-master/webapi/webapi/resources/profile.py": {
        "ProfileRepository.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "personal_info_model": [
                    "Dict[str, Any]",
                    "bool",
                    "dict"
                ]
            }
        },
        "ProfileRepository._serialise_personal_info": {
            "name": "_serialise_personal_info",
            "location": 9,
            "return": [
                "str",
                "bool",
                "Dict[str, Union[str, Any]]",
                "Dict[str, List[str]]",
                "Union[type, Tuple[type, ...]]"
            ],
            "arguments": {
                "self": [],
                "personal_info": []
            }
        },
        "ProfileRepository.update_personal_info": {
            "name": "update_personal_info",
            "location": 21,
            "return": [
                "str",
                "Exception",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "media": [
                    "dict",
                    "str",
                    "List[str]",
                    "Pattern[str]"
                ],
                "user_id": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "ProfileRepository.get_personal_info": {
            "name": "get_personal_info",
            "location": 35,
            "return": [
                "str",
                "dict",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str"
                ]
            }
        },
        "ProfileCollection.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "profile_repo": [
                    "str",
                    "bool"
                ]
            }
        },
        "ProfileCollection.on_get": {
            "name": "on_get",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str, Any]",
                    "dict",
                    "Callable"
                ],
                "response": [
                    "Optional[dict]",
                    "str",
                    "Exception"
                ]
            }
        },
        "ProfileCollection.on_put": {
            "name": "on_put",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str, Any]",
                    "bytes"
                ],
                "response": [
                    "Dict[str, Dict[str, Any]]",
                    "zerver.models.UserProfile",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "BudgetApp3202-master/webapi/webapi/resources/settings.py": {
        "SettingsRepository.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user_settings_model": [
                    "models.characters.character_base.Character",
                    "List[zerver.models.UserProfile]",
                    "Iterable[str]",
                    "str",
                    "Optional[zerver.models.UserProfile]",
                    "server.models.Bike",
                    "server.models.User"
                ]
            }
        },
        "SettingsRepository._serialise_settings": {
            "name": "_serialise_settings",
            "location": 10,
            "return": [
                "str",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "str",
                    "bytes"
                ]
            }
        },
        "SettingsRepository.update_settings": {
            "name": "update_settings",
            "location": 17,
            "return": [
                "float",
                "zam_repondeur.models.Amendement",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "media": [
                    "dict",
                    "str",
                    "[str]"
                ],
                "user_id": [
                    "int",
                    "str"
                ]
            }
        },
        "SettingsRepository.get_settings": {
            "name": "get_settings",
            "location": 27,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str"
                ]
            }
        },
        "SettingsCollection.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "settings_repo": [
                    "str",
                    "bool"
                ]
            }
        },
        "SettingsCollection.on_get": {
            "name": "on_get",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str, Any]",
                    "dict",
                    "Callable"
                ],
                "response": [
                    "dict"
                ]
            }
        },
        "SettingsCollection.on_post": {
            "name": "on_post",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str, Any]",
                    "bytes",
                    "Exception"
                ],
                "response": [
                    "app.models.dto.LoginResponse",
                    "zerver.models.UserProfile",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]",
                    "bool"
                ]
            }
        }
    },
    "BudgetApp3202-master/webapi/webapi/resources/transaction.py": {
        "TransactionRepository.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "transaction_model": [
                    "Optional[int]",
                    "Type[T]",
                    "bool",
                    "List[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "personal_information_model": [
                    "Optional[int]",
                    "Type[T]",
                    "bool",
                    "List[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "income_model": [
                    "Optional[int]",
                    "Type[T]",
                    "bool",
                    "List[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "expense_model": [
                    "Optional[int]",
                    "Type[T]",
                    "bool",
                    "List[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "budget_model": [
                    "Optional[int]",
                    "Type[T]",
                    "bool",
                    "List[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "user_repo": [
                    "int",
                    "bool",
                    "List[str]",
                    "Tuple[str]",
                    "Optional[Mapping[str, Any]]"
                ],
                "msg_client": [
                    "str"
                ]
            }
        },
        "TransactionRepository._serialise_tx": {
            "name": "_serialise_tx",
            "location": 23,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": [],
                "tx": [
                    "str",
                    "tonga.models.structs.positioning.BasePositioning"
                ]
            }
        },
        "TransactionRepository.get_transactions": {
            "name": "get_transactions",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "List[int]",
                    "Sequence[int]",
                    "List[str]"
                ]
            }
        },
        "TransactionRepository.get_transaction": {
            "name": "get_transaction",
            "location": 36,
            "return": [
                "Optional[str]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str",
                    "transfer.models.ItemID"
                ]
            }
        },
        "TransactionRepository.create_transaction": {
            "name": "create_transaction",
            "location": 40,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[str]",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "media": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "float",
                    "Optional[List[str]]",
                    "Optional[Callable[..., Any]]"
                ],
                "user_id": [
                    "int",
                    "str",
                    "Set[int]"
                ]
            }
        },
        "TransactionRepository.update_transaction": {
            "name": "update_transaction",
            "location": 52,
            "return": [
                "int",
                "Tuple[int, int, int, int]",
                "dict",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "media": [
                    "dict",
                    "str",
                    "transfer.models.SiteID"
                ],
                "id": [
                    "str",
                    "int",
                    "Sequence[Optional[str]]",
                    "List[str]"
                ]
            }
        },
        "TransactionRepository.delete_transaction": {
            "name": "delete_transaction",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int"
                ]
            }
        },
        "TransactionRepository._weekly_val": {
            "name": "_weekly_val",
            "location": 67,
            "return": [
                "int",
                "bytes",
                "bytearray",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "TransactionRepository._weekly_saving_goal": {
            "name": "_weekly_saving_goal",
            "location": 77,
            "return": [
                "float",
                "str",
                "models.characters.mods_base.SlotTypes"
            ],
            "arguments": {
                "self": [],
                "budget": [
                    "datetime.datetime"
                ]
            }
        },
        "TransactionRepository._do_we_sms": {
            "name": "_do_we_sms",
            "location": 88,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "TransactionRepository._send_warning_sms": {
            "name": "_send_warning_sms",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "str",
                    "excars.models.locations.Location",
                    "bool"
                ],
                "description": [
                    "str",
                    "int"
                ]
            }
        },
        "TransactionCollection.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tx_repo": [
                    "str",
                    "bool"
                ]
            }
        },
        "TransactionCollection.on_get": {
            "name": "on_get",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str, Any]",
                    "dict",
                    "Callable"
                ],
                "response": [
                    "dict"
                ]
            }
        },
        "TransactionCollection.on_put": {
            "name": "on_put",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "bytes",
                    "Dict[str, Any]"
                ],
                "response": [
                    "app.models.dto.LoginResponse",
                    "Dict[str, Any]",
                    "bytes",
                    "user.User",
                    "dict"
                ]
            }
        },
        "TransactionResource.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tx_repo": [
                    "str",
                    "bool"
                ]
            }
        },
        "TransactionResource.on_get": {
            "name": "on_get",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "Union[bool, Tuple[float, float]]"
                ],
                "response": [
                    "str",
                    "int",
                    "Optional[str]",
                    "dict"
                ],
                "id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "TransactionResource.on_post": {
            "name": "on_post",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "List[int]",
                    "Tuple[str, List[str]]",
                    "bool",
                    "Optional[Dict]",
                    "int"
                ],
                "response": [
                    "List[int]",
                    "Tuple[str, List[str]]",
                    "bool",
                    "Optional[Dict]",
                    "int"
                ],
                "id": [
                    "List[int]",
                    "Tuple[str, List[str]]",
                    "bool",
                    "Optional[Dict]",
                    "int"
                ]
            }
        },
        "TransactionResource.on_delete": {
            "name": "on_delete",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "Union[bool, Tuple[float, float]]"
                ],
                "response": [
                    "str",
                    "dict",
                    "models.Dashboard",
                    "int",
                    "Optional[int]"
                ],
                "id": [
                    "str",
                    "Optional[int]",
                    "int",
                    "List[Dict[str, Any]]",
                    "bool"
                ]
            }
        }
    },
    "BudgetApp3202-master/webapi/webapi/resources/user.py": {
        "UserRepository.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user_model": [
                    "str",
                    "int",
                    "bool",
                    "zerver.models.UserProfile",
                    "asgard.models.accounAccount"
                ],
                "personal_info_model": [
                    "str",
                    "bool",
                    "zerver.models.UserProfile",
                    "Optional[str]"
                ],
                "user_settings": [
                    "str",
                    "int",
                    "List[domain.models.User]"
                ]
            }
        },
        "UserRepository.register_user": {
            "name": "register_user",
            "location": 12,
            "return": [
                "models.User",
                "app.models.GameMember",
                "app.models.course.Course",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "self": [],
                "first_name": [
                    "str",
                    "int"
                ],
                "last_name": [
                    "str",
                    "int"
                ],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "UserRepository.validate_credentials": {
            "name": "validate_credentials",
            "location": 33,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "Dict[str, str]"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "UserRepository.get_user": {
            "name": "get_user",
            "location": 40,
            "return": [
                "zerver.models.Realm",
                "bool",
                "models.User",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "UserRepository._serialise_user": {
            "name": "_serialise_user",
            "location": 44,
            "return": [
                "dict",
                "Dict[str, int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Optional[zerver.models.UserProfile]",
                    "Optional[str]",
                    "str",
                    "asgard.models.user.User",
                    "app.models.models.User",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "UserResource.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user_repo": [
                    "Optional[int]",
                    "User",
                    "zerver.models.UserProfile",
                    "List[domain.models.User]",
                    "models.characters.character_base.Character",
                    "excars.models.user.User",
                    "int"
                ]
            }
        },
        "UserResource.on_get": {
            "name": "on_get",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Callable[..., Awaitable[dict]]"
                ],
                "response": [
                    "str"
                ]
            }
        },
        "UserResource.on_put": {
            "name": "on_put",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str, Any]",
                    "app.models.dto.LoginResponse"
                ],
                "response": [
                    "Dict[str, Any]"
                ]
            }
        },
        "UserResource.on_post": {
            "name": "on_post",
            "location": 77,
            "return": [
                "app.models.Article",
                "T",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "dict",
                    "Callable[..., Awaitable[dict]]"
                ],
                "response": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "AuthResource.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user_repo": [
                    "Optional[int]",
                    "User",
                    "zerver.models.UserProfile",
                    "List[domain.models.User]",
                    "models.characters.character_base.Character",
                    "excars.models.user.User",
                    "int"
                ]
            }
        },
        "AuthResource.on_get": {
            "name": "on_get",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Union[dict, list]"
                ],
                "response": [
                    "Dict[str, Any]",
                    "requests.models.Response",
                    "dict"
                ]
            }
        },
        "AuthResource.on_post": {
            "name": "on_post",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str"
                ],
                "response": [
                    "tracim.models.data.Workspace",
                    "List[Dict[str, Any]]"
                ]
            }
        }
    },
    "BudgetApp3202-master/webapi/webapi/resources/__init__.py": {},
    "BudgetApp3202-master/webapi/webapi/services/sms.py": {
        "MessageClient.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageClient.send_sms": {
            "name": "send_sms",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "body": [
                    "str"
                ],
                "to": [
                    "str"
                ]
            }
        },
        "MessageClient._load_twilio_config": {
            "name": "_load_twilio_config",
            "location": 14,
            "return": [
                "str",
                "discord.Client"
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
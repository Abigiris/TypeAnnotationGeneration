{
    "ChessBot-master/chessbot/config.py": {},
    "ChessBot-master/chessbot/__init__.py": {
        "main": {
            "name": "main",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ChessBot-master/chessbot/__main__.py": {},
    "ChessBot-master/chessbot/cogs/chess.py": {
        "Chess.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bot": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "ChessBot-master/chessbot/cogs/help.py": {
        "Help.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "bot": []
            }
        }
    },
    "ChessBot-master/chessbot/cogs/misc.py": {
        "Misc.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bot": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "ChessBot-master/chessbot/cogs/__init__.py": {},
    "ChessBot-master/chessbot/cogs/utils/action_utils.py": {
        "handle_action_offer": {
            "name": "handle_action_offer",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "int",
                    "database.Game",
                    "database.User",
                    "str"
                ],
                "game": [
                    "database.Game",
                    "bool"
                ],
                "action": [
                    "int",
                    "database.Game",
                    "database.User",
                    "str"
                ]
            }
        },
        "handle_action_accept": {
            "name": "handle_action_accept",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "int",
                    "database.Game",
                    "database.User",
                    "str"
                ],
                "game": [
                    "int",
                    "database.Game",
                    "database.User",
                    "str"
                ]
            }
        }
    },
    "ChessBot-master/chessbot/cogs/utils/chess_utils.py": {
        "load_from_pgn": {
            "name": "load_from_pgn",
            "location": 14,
            "return": [
                "str",
                "list",
                "int",
                "List[str]"
            ],
            "arguments": {
                "pgn_str": [
                    "str",
                    "io.StringIO"
                ]
            }
        },
        "save_to_pgn": {
            "name": "save_to_pgn",
            "location": 23,
            "return": [
                "str",
                "list",
                "int"
            ],
            "arguments": {
                "board": [
                    "int",
                    "str",
                    "IO[Any]",
                    "bytes",
                    "float"
                ]
            }
        },
        "move": {
            "name": "move",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "board": [
                    "str",
                    "int",
                    "AbstractSet[str]",
                    "bytes",
                    "bool"
                ],
                "san_move": [
                    "str",
                    "bool"
                ]
            }
        },
        "undo": {
            "name": "undo",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "board": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "to_png": {
            "name": "to_png",
            "location": 46,
            "return": [
                "str",
                "bytes",
                "bool",
                "IO[str]",
                "list"
            ],
            "arguments": {
                "board": [
                    "int",
                    "float",
                    "List[float]"
                ],
                "size": [
                    "int",
                    "List[str]",
                    "Optional[List[str]]",
                    "Optional[dict]",
                    "str",
                    "Callable"
                ]
            }
        },
        "get_winner": {
            "name": "get_winner",
            "location": 65,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "board": [
                    "dict",
                    "Optional[str]"
                ],
                "claim_draw": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "both_agreed": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_game_over_reason": {
            "name": "get_game_over_reason",
            "location": 82,
            "return": [
                "str",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "board": [
                    "str",
                    "List[str]"
                ],
                "claim_draw": [
                    "str",
                    "List[str]"
                ],
                "both_agreed": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "get_turn": {
            "name": "get_turn",
            "location": 120,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "board": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "ChessBot-master/chessbot/cogs/utils/context_utils.py": {},
    "ChessBot-master/chessbot/cogs/utils/elo_utils.py": {
        "recalculate_elo": {
            "name": "recalculate_elo",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "game": [
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "ChessBot-master/chessbot/cogs/utils/game_utils.py": {
        "get_game": {
            "name": "get_game",
            "location": 18,
            "return": [
                "str",
                "Optional[Dict[str, Any]]",
                "List[str]"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "List[str]"
                ],
                "game_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "has_game_expired": {
            "name": "has_game_expired",
            "location": 32,
            "return": [
                "Optional[str]",
                "datetime.datetime",
                "datetime.date",
                "str"
            ],
            "arguments": {
                "game": [
                    "str",
                    "int"
                ]
            }
        },
        "update_game": {
            "name": "update_game",
            "location": 38,
            "return": [],
            "arguments": {
                "game": [
                    "Union[List, Dict, None]",
                    "bool",
                    "Optional[Iterable[str]]"
                ],
                "recalculate_expiration_date": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "reset_action": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "concede_side": [
                    "str",
                    "Optional[str]"
                ],
                "only_check_expiration": [
                    "bool",
                    "List[str]",
                    "str"
                ]
            }
        },
        "update_ongoing_games": {
            "name": "update_ongoing_games",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "who_offered_action": {
            "name": "who_offered_action",
            "location": 134,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "game": [
                    "str"
                ]
            }
        },
        "is_player": {
            "name": "is_player",
            "location": 146,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "game": [
                    "int",
                    "database.Game",
                    "database.User",
                    "str"
                ],
                "user": [
                    "int",
                    "database.Game",
                    "database.User",
                    "str"
                ]
            }
        },
        "which_player": {
            "name": "which_player",
            "location": 150,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "game": [
                    "Callable"
                ],
                "user": [
                    "Callable"
                ]
            }
        }
    },
    "ChessBot-master/chessbot/cogs/utils/move_utils.py": {
        "handle_turn_check": {
            "name": "handle_turn_check",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "database.User",
                    "database.Game"
                ],
                "game": [
                    "database.Game",
                    "database.User",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "handle_move": {
            "name": "handle_move",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "game": [
                    "database.Game",
                    "Iterable[str]"
                ],
                "san_move": [
                    "str"
                ]
            }
        }
    },
    "ChessBot-master/chessbot/cogs/utils/status_utils.py": {
        "_get_status_mentions": {
            "name": "_get_status_mentions",
            "location": 11,
            "return": [
                "str",
                "bool",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "white": [
                    "discord.User",
                    "Optional[str]"
                ],
                "black": [
                    "discord.User",
                    "Optional[str]"
                ],
                "game": [
                    "database.Game",
                    "bool"
                ]
            }
        },
        "get_vs_line": {
            "name": "get_vs_line",
            "location": 27,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "bot": [
                    "discord.excommands.Bot",
                    "database.Game",
                    "int"
                ],
                "game": [
                    "database.Game",
                    "discord.excommands.Bot"
                ]
            }
        },
        "get_game_status": {
            "name": "get_game_status",
            "location": 33,
            "return": [
                "Dict[str, str]",
                "Dict[str, Union[str, int]]",
                "Exception",
                "dict"
            ],
            "arguments": {
                "bot": [
                    "str"
                ],
                "game": []
            }
        }
    },
    "ChessBot-master/chessbot/cogs/utils/user_utils.py": {
        "get_database_user": {
            "name": "get_database_user",
            "location": 7,
            "return": [
                "Iterable[str]",
                "metaswitch_tinder.database.models.User",
                "set"
            ],
            "arguments": {
                "user_id": [
                    "int"
                ]
            }
        },
        "get_full_username": {
            "name": "get_full_username",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "user": [
                    "discord.User",
                    "str",
                    "Callable"
                ]
            }
        },
        "get_discord_user": {
            "name": "get_discord_user",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "bot": [
                    "database.User",
                    "discord.excommands.Bot",
                    "str",
                    "int"
                ],
                "user": [
                    "database.User",
                    "discord.excommands.Bot",
                    "str",
                    "int"
                ]
            }
        },
        "create_database_user": {
            "name": "create_database_user",
            "location": 23,
            "return": [
                "discord.abc.GuildChannel",
                "discord.User"
            ],
            "arguments": {
                "discord_user": [
                    "discord.User"
                ]
            }
        }
    },
    "ChessBot-master/chessbot/cogs/utils/__init__.py": {},
    "ChessBot-master/chessbot/constants/__init__.py": {
        "turn_to_str": {
            "name": "turn_to_str",
            "location": 6,
            "return": [
                "int",
                "str",
                "Union[int, float]",
                "List[int]"
            ],
            "arguments": {
                "turn": [
                    "int",
                    "str",
                    "Union[int, float]",
                    "List[int]"
                ]
            }
        },
        "result_to_int": {
            "name": "result_to_int",
            "location": 13,
            "return": [
                "bool",
                "int",
                "Dict[str, bool]",
                "str",
                "IO[Any]",
                "float"
            ],
            "arguments": {
                "result": [
                    "int",
                    "list",
                    "Optional[Dict[str, Any]]",
                    "List[str]",
                    "bool"
                ]
            }
        }
    },
    "ChessBot-master/chessbot/database/add_to_database.py": {
        "add_to_database": {
            "name": "add_to_database",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "T",
                    "VT",
                    "int",
                    "str"
                ]
            }
        }
    },
    "ChessBot-master/chessbot/database/game.py": {
        "Game.__repr__": {
            "name": "__repr__",
            "location": 41,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ChessBot-master/chessbot/database/user.py": {
        "User.games": {
            "name": "games",
            "location": 23,
            "return": [
                "str",
                "List[str]",
                "Iterable[T]",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.ongoing_games": {
            "name": "ongoing_games",
            "location": 27,
            "return": [
                "List[str]",
                "List[game.Game]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.finished_games": {
            "name": "finished_games",
            "location": 31,
            "return": [
                "List[str]",
                "List[game.Game]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.__repr__": {
            "name": "__repr__",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ChessBot-master/chessbot/database/__init__.py": {}
}
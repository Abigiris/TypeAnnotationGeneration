{
    "ConjugateGradients-master/scripts/ConjugateGradients/demo.py": {
        "main": {
            "name": "main",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "ConjugateGradients-master/scripts/ConjugateGradients/test_matrices.py": {
        "TestMatrices.get_diagonal_matrix": {
            "name": "get_diagonal_matrix",
            "location": 16,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "str",
                    "float"
                ],
                "size": [
                    "int",
                    "numpy.ndarray",
                    "float",
                    "bool"
                ]
            }
        },
        "TestMatrices.get_diagonal_matrix_csr": {
            "name": "get_diagonal_matrix_csr",
            "location": 22,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "float",
                    "Callable"
                ],
                "size": [
                    "bool",
                    "float",
                    "Callable"
                ]
            }
        },
        "TestMatrices.get_matrix_three_diagonal": {
            "name": "get_matrix_three_diagonal",
            "location": 27,
            "return": [
                "bool",
                "str",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "str",
                    "float"
                ],
                "size": [
                    "int",
                    "bool",
                    "Collection[int]",
                    "list",
                    "str",
                    "float"
                ]
            }
        },
        "TestMatrices.get_matrix_three_diagonal_csr": {
            "name": "get_matrix_three_diagonal_csr",
            "location": 35,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "int"
                ],
                "size": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "TestMatrices._curve_mask": {
            "name": "_curve_mask",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "size": [
                    "int"
                ]
            }
        },
        "TestMatrices._get_arrow_mask": {
            "name": "_get_arrow_mask",
            "location": 64,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "size": [
                    "int",
                    "bytes",
                    "List[int]",
                    "float"
                ]
            }
        },
        "TestMatrices._get_noise_mask": {
            "name": "_get_noise_mask",
            "location": 77,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "size": [
                    "int",
                    "bytes"
                ]
            }
        },
        "TestMatrices._get_quadratic_mask": {
            "name": "_get_quadratic_mask",
            "location": 93,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "size": [
                    "int",
                    "Iterable[int]"
                ]
            }
        },
        "TestMatrices._get_rectangle_mask": {
            "name": "_get_rectangle_mask",
            "location": 130,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "size": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "TestMatrices.get_random_test_matrix": {
            "name": "get_random_test_matrix",
            "location": 175,
            "return": [
                "list",
                "str",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "size": [
                    "int",
                    "bool",
                    "str"
                ],
                "pattern": [
                    "str",
                    "bytes",
                    "Match[Any]"
                ]
            }
        },
        "TestMatrices.get_random_test_matrix_csr": {
            "name": "get_random_test_matrix_csr",
            "location": 207,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "float"
                ],
                "size": [
                    "int",
                    "bool",
                    "float"
                ],
                "pattern": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "ConjugateGradients-master/scripts/ConjugateGradients/utils.py": {
        "get_solver": {
            "name": "get_solver",
            "location": 45,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "view_matrix": {
            "name": "view_matrix",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "mat": [
                    "BaseException"
                ]
            }
        },
        "save_csr_matrix_to_file": {
            "name": "save_csr_matrix_to_file",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "matrix": [
                    "numpy.matrix",
                    "bool",
                    "str",
                    "float",
                    "int",
                    "List[str]"
                ],
                "filename": [
                    "str"
                ]
            }
        },
        "CSRMatrix.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m_matrix": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "CSRMatrix.shape": {
            "name": "shape",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSRMatrix.rows_i": {
            "name": "rows_i",
            "location": 25,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSRMatrix.column_j": {
            "name": "column_j",
            "location": 30,
            "return": [
                "int",
                "deque",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSRMatrix.values": {
            "name": "values",
            "location": 35,
            "return": [
                "List[str]",
                "Optional[List[str]]",
                "Union[List, Tuple]",
                "numpy.array",
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSRMatrix.nnz": {
            "name": "nnz",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ConjugateGradients-master/scripts/ConjugateGradients/__init__.py": {},
    "ConjugateGradients-master/scripts/ConjugateGradients/Solvers/common.py": {
        "IterativeSolver.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a_matrix": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "Optional[bool]",
                    "Union[Callable, str]",
                    "float"
                ],
                "b_vec": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "Optional[bool]",
                    "Union[Callable, str]",
                    "float"
                ],
                "x_vec": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "Optional[bool]",
                    "Union[Callable, str]",
                    "float"
                ],
                "max_iter": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "IterativeSolver.finished_iter": {
            "name": "finished_iter",
            "location": 34,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "IterativeSolver._register_residual": {
            "name": "_register_residual",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conv": [
                    "dict"
                ]
            }
        },
        "IterativeSolver._is_pos_def": {
            "name": "_is_pos_def",
            "location": 42,
            "return": [
                "Iterable[str]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IterativeSolver.get_convergence_profile": {
            "name": "get_convergence_profile",
            "location": 46,
            "return": [
                "str",
                "Type[T]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "IterativeSolver.show_convergence_profile": {
            "name": "show_convergence_profile",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "IterativeSolver.compare_convergence_profiles": {
            "name": "compare_convergence_profiles",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "IterativeSolver.solve": {
            "name": "solve",
            "location": 85,
            "return": [
                "typing.Tuple[numpy.matrix, builtins.int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ConjugateGradients-master/scripts/ConjugateGradients/Solvers/CG/cg_solver.py": {
        "ConjugateGradientSolver.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConjugateGradientSolver.solve": {
            "name": "solve",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ConjugateGradients-master/scripts/ConjugateGradients/Solvers/PCG/pcg_solver.py": {
        "PreConditionedConjugateGradientSolver.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PreConditionedConjugateGradientSolver.solve": {
            "name": "solve",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ConjugateGradients-master/scripts/ConjugateGradients/Solvers/PCG/preconditioners.py": {
        "get_preconditioner": {
            "name": "get_preconditioner",
            "location": 7,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "float"
                ]
            }
        },
        "jacobi": {
            "name": "jacobi",
            "location": 14,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "a_matrix": [
                    "Callable[[T], T]",
                    "int"
                ],
                "residual": [
                    "Callable[[T], T]",
                    "int"
                ]
            }
        }
    },
    "ConjugateGradients-master/scripts/tests/Solvers/test_solvers.py": {
        "test_matrix": {
            "name": "test_matrix",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "test_cg": {
            "name": "test_cg",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "test_matrix": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "test_pcg_jacobi": {
            "name": "test_pcg_jacobi",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "test_matrix": [
                    "List[str]",
                    "str"
                ]
            }
        }
    }
}
{
    "Data-Processing-master/conftest.py": {},
    "Data-Processing-master/CalibrationCode/amsCalibration.py": {
        "calibrateTemp": {
            "name": "calibrateTemp",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rawTemp": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "calibratePressure": {
            "name": "calibratePressure",
            "location": 13,
            "return": [
                "str",
                "bytes",
                "dict",
                "bool"
            ],
            "arguments": {
                "rawPressure": [
                    "bool",
                    "float",
                    "int",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ],
                "digiOutPMin": [
                    "bool",
                    "int"
                ],
                "digiOutPMax": [
                    "bytes",
                    "bool"
                ],
                "pMin": [
                    "bool",
                    "int"
                ],
                "pMax": [
                    "bytes",
                    "bool"
                ]
            }
        }
    },
    "Data-Processing-master/CalibrationCode/bmeCalibration.py": {
        "CompensateBME280.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coefs": [
                    "int",
                    "float",
                    "str",
                    "Union[int, float]"
                ],
                "uTemp": [
                    "int",
                    "bool",
                    "float"
                ],
                "uPres": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "uHumid": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "CompensateBME280.compensateTemp": {
            "name": "compensateTemp",
            "location": 47,
            "return": [
                "str",
                "int",
                "Iterable[Any]"
            ],
            "arguments": {
                "uTemp": [
                    "int",
                    "CalibrationCode.typeAliases.HumidityCoefsType",
                    "CalibrationCode.typeAliases.TempCoefsType",
                    "str",
                    "float"
                ],
                "tCoefs": [
                    "int",
                    "CalibrationCode.typeAliases.TempCoefsType",
                    "CalibrationCode.typeAliases.HumidityCoefsType"
                ]
            }
        },
        "CompensateBME280.compensatePres": {
            "name": "compensatePres",
            "location": 79,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "uPres": [
                    "int",
                    "numpy.int32"
                ],
                "pCoefs": [
                    "CalibrationCode.typeAliases.PresCoefsType",
                    "int",
                    "bytes",
                    "bool"
                ],
                "tFine": [
                    "int",
                    "numpy.int32"
                ]
            }
        },
        "CompensateBME280.compensateHumid": {
            "name": "compensateHumid",
            "location": 122,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "uHumid": [
                    "int",
                    "numpy.int32"
                ],
                "hCoefs": [
                    "CalibrationCode.typeAliases.HumidityCoefsType",
                    "int",
                    "numpy.int32"
                ],
                "tFine": [
                    "int",
                    "numpy.int32"
                ]
            }
        },
        "CompensateBME280Native.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "coefs": [
                    "float",
                    "int",
                    "str"
                ],
                "uTemp": [
                    "int",
                    "bool",
                    "float"
                ],
                "uPres": [
                    "float",
                    "str"
                ],
                "uHumid": [
                    "float",
                    "str"
                ]
            }
        },
        "CompensateBME280Native.compensateTemp": {
            "name": "compensateTemp",
            "location": 186,
            "return": [
                "str"
            ],
            "arguments": {
                "uTemp": [
                    "int",
                    "CalibrationCode.typeAliases.TempCoefsType",
                    "float",
                    "Union[float, int]"
                ],
                "tCoefs": [
                    "int",
                    "CalibrationCode.typeAliases.TempCoefsType",
                    "float",
                    "Union[float, int]"
                ]
            }
        },
        "CompensateBME280Native.compensatePres": {
            "name": "compensatePres",
            "location": 215,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "uPres": [
                    "int",
                    "Union[float, int]",
                    "float"
                ],
                "pCoefs": [
                    "CalibrationCode.typeAliases.PresCoefsType",
                    "float",
                    "Union[int, float]",
                    "numpy.ndarray"
                ],
                "tFine": [
                    "int",
                    "Union[float, int]",
                    "float"
                ]
            }
        },
        "CompensateBME280Native.compensateHumid": {
            "name": "compensateHumid",
            "location": 256,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "uHumid": [
                    "int",
                    "Union[float, int]",
                    "float"
                ],
                "hCoefs": [
                    "CalibrationCode.typeAliases.HumidityCoefsType",
                    "float",
                    "int",
                    "CalibrationCode.typeAliases.PresCoefsType",
                    "Union[float, int]"
                ],
                "tFine": [
                    "int",
                    "Union[float, int]",
                    "float"
                ]
            }
        }
    },
    "Data-Processing-master/CalibrationCode/customObjs.py": {
        "_BME280TemperatureCoefficents.toInt32": {
            "name": "toInt32",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_BME280PressureCoefficents.toInt64": {
            "name": "toInt64",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_BME280HumidityCoefficents.toInt32": {
            "name": "toInt32",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Data-Processing-master/CalibrationCode/dataExtraction.py": {
        "openFileInteractive": {
            "name": "openFileInteractive",
            "location": 25,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {}
        },
        "openFileNonInteractive": {
            "name": "openFileNonInteractive",
            "location": 48,
            "return": [
                "str",
                "bool",
                "List[int]",
                "Dict[str, Dict[str, str]]",
                "dict",
                "bytes"
            ],
            "arguments": {
                "filePath": [
                    "str"
                ]
            }
        },
        "splitBytesFile": {
            "name": "splitBytesFile",
            "location": 64,
            "return": [
                "dict",
                "Mapping[str, Any]",
                "Dict[str, Union[str, int]]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "bytesFile": [
                    "str",
                    "Iterable[str]",
                    "List[str]",
                    "Tuple[List[str], int]",
                    "dict"
                ]
            }
        },
        "extractPresCalCoefs": {
            "name": "extractPresCalCoefs",
            "location": 83,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "header": [
                    "Union[dict, list]",
                    "Mapping"
                ]
            }
        },
        "splitSensorData": {
            "name": "splitSensorData",
            "location": 124,
            "return": [
                "Union[Dict, List]",
                "dict",
                "Sequence",
                "str",
                "Exception"
            ],
            "arguments": {
                "dataStream": [
                    "dict",
                    "List[List[Any]]",
                    "int",
                    "str"
                ]
            }
        },
        "processPackets": {
            "name": "processPackets",
            "location": 142,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "packets": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "Data-Processing-master/CalibrationCode/typeAliases.py": {},
    "Data-Processing-master/CalibrationCode/__init__.py": {},
    "Data-Processing-master/docs/conf.py": {},
    "Data-Processing-master/tests/test_dataextraction.py": {
        "test_fileSplitWorks": {
            "name": "test_fileSplitWorks",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_extractPresCalCoefsWorks": {
            "name": "test_extractPresCalCoefsWorks",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_splitDataWorks": {
            "name": "test_splitDataWorks",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_extractPacketDataWorks": {
            "name": "test_extractPacketDataWorks",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Data-Processing-master/tests/__init__.py": {}
}
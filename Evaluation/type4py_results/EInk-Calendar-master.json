{
    "EInk-Calendar-master/controller.py": {
        "Controller.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]"
                ],
                "logger": [
                    "logging.Logger",
                    "Callable",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Controller.update_calendar": {
            "name": "update_calendar",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.update_weather": {
            "name": "update_weather",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.update_events": {
            "name": "update_events",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller._update_all": {
            "name": "_update_all",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller._render_and_display": {
            "name": "_render_and_display",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.update_and_redraw": {
            "name": "update_and_redraw",
            "location": 74,
            "return": [
                "str",
                "Set[str]",
                "DefaultDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Controller.run": {
            "name": "run",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "EInk-Calendar-master/main.py": {},
    "EInk-Calendar-master/__init__.py": {},
    "EInk-Calendar-master/model/calendar.py": {
        "get_month_str": {
            "name": "get_month_str",
            "location": 6,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "get_calendar_days": {
            "name": "get_calendar_days",
            "location": 10,
            "return": [
                "int",
                "Tuple[Sequence]",
                "str"
            ],
            "arguments": {}
        }
    },
    "EInk-Calendar-master/model/events.py": {
        "GoogleCalendarEvents.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "credentials": [
                    "str",
                    "dict",
                    "List[Dict]",
                    "bool",
                    "Iterable[float]"
                ]
            }
        },
        "GoogleCalendarEvents.credentials": {
            "name": "credentials",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleCalendarEvents.selected_calendars": {
            "name": "selected_calendars",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoogleCalendarEvents.select_calendar": {
            "name": "select_calendar",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "calendar_id": [
                    "Iterable[str]",
                    "Iterable[int]",
                    "int",
                    "bool",
                    "str",
                    "mypy.build.Graph"
                ]
            }
        },
        "GoogleCalendarEvents.list_calendars": {
            "name": "list_calendars",
            "location": 31,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "max_result": [
                    "int",
                    "Dict[int, str]"
                ]
            }
        },
        "GoogleCalendarEvents.get_sorted_events": {
            "name": "get_sorted_events",
            "location": 53,
            "return": [
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "max_results": [
                    "bool",
                    "int",
                    "Union[float, str]",
                    "float",
                    "str"
                ]
            }
        }
    },
    "EInk-Calendar-master/model/weather.py": {
        "OpenWeatherMapModel.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "api_key": [
                    "str",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "city_id": [
                    "str",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "OpenWeatherMapModel.city_id": {
            "name": "city_id",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "city_id": [
                    "str",
                    "int"
                ]
            }
        },
        "OpenWeatherMapModel.temperature_unit": {
            "name": "temperature_unit",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "unit": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "OpenWeatherMapModel._parse_weather": {
            "name": "_parse_weather",
            "location": 33,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "weather": [
                    "str",
                    "bytearray",
                    "bool",
                    "dict"
                ]
            }
        },
        "OpenWeatherMapModel.get_current_weather": {
            "name": "get_current_weather",
            "location": 43,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OpenWeatherMapModel.get_daily_forecast": {
            "name": "get_daily_forecast",
            "location": 57,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "int",
                    "str"
                ],
                "include_today": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        }
    },
    "EInk-Calendar-master/model/__init__.py": {},
    "EInk-Calendar-master/test/test_config.py": {
        "config_no_debug": {
            "name": "config_no_debug",
            "location": 9,
            "return": [
                "dict",
                "Optional[dict]",
                "Dict[str, Any]",
                "Optional[Dict]"
            ],
            "arguments": {}
        },
        "test_config_no_debug": {
            "name": "test_config_no_debug",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "config_no_debug": [
                    "bool",
                    "bytes"
                ]
            }
        }
    },
    "EInk-Calendar-master/test/__init__.py": {},
    "EInk-Calendar-master/utils/config_generator.py": {
        "load_or_create_config": {
            "name": "load_or_create_config",
            "location": 154,
            "return": [
                "str",
                "Optional[dict]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "Configurations.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "Exception"
                ]
            }
        },
        "Configurations.units": {
            "name": "units",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "units": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Configurations.owm_token": {
            "name": "owm_token",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owm_token": [
                    "str",
                    "Dict[str, int]"
                ]
            }
        },
        "Configurations.google_credentials": {
            "name": "google_credentials",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Configurations.google_token": {
            "name": "google_token",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "google_token": [
                    "str",
                    "Dict[str, int]"
                ]
            }
        },
        "Configurations.google_refresh_token": {
            "name": "google_refresh_token",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "google_refresh_token": [
                    "str",
                    "dict",
                    "List[int]"
                ]
            }
        },
        "Configurations.google_client_id": {
            "name": "google_client_id",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "google_client_id": [
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Configurations.google_client_secrete": {
            "name": "google_client_secrete",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "google_client_secrete": [
                    "Callable"
                ]
            }
        },
        "Configurations.selected_calendars": {
            "name": "selected_calendars",
            "location": 99,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configurations.city_id": {
            "name": "city_id",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "city_id": [
                    "str",
                    "int"
                ]
            }
        },
        "Configurations.is_debug": {
            "name": "is_debug",
            "location": 111,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Configurations.debug_save_path": {
            "name": "debug_save_path",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "Configurations.show_borders": {
            "name": "show_borders",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "show_borders": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Configurations.add_selected_calendars": {
            "name": "add_selected_calendars",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "calendar_id": [
                    "int",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "Configurations.save": {
            "name": "save",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_path": [
                    "str"
                ]
            }
        }
    },
    "EInk-Calendar-master/utils/__init__.py": {},
    "EInk-Calendar-master/view/window.py": {
        "Window7in5.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource_dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "Window7in5.render": {
            "name": "render",
            "location": 60,
            "return": [
                "str",
                "int",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window7in5.events": {
            "name": "events",
            "location": 67,
            "return": [
                "Mapping[str, Any]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window7in5.calender": {
            "name": "calender",
            "location": 71,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window7in5.weather": {
            "name": "weather",
            "location": 75,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Window7in5.show_widget_border": {
            "name": "show_widget_border",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "show_border": [
                    "int",
                    "bool",
                    "str",
                    "Optional[float]",
                    "float",
                    "Optional[int]"
                ]
            }
        }
    },
    "EInk-Calendar-master/view/__init__.py": {},
    "EInk-Calendar-master/view/hardware/button_and_led.py": {
        "ButtonAndLed.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "controller": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ],
                "button_gpio": [
                    "int",
                    "str",
                    "List[Dict]",
                    "Union[str, Callable]"
                ],
                "led_gpio": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "ButtonAndLed.exit": {
            "name": "exit",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ButtonAndLed.led_on": {
            "name": "led_on",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ButtonAndLed.led_off": {
            "name": "led_off",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ButtonAndLed.__init__.call_back": {
            "name": "call_back",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "channel": [
                    "int",
                    "str",
                    "Callable",
                    "dict",
                    "bool"
                ]
            }
        },
        "ButtonAndLed.__init__.call_back.new_thread": {
            "name": "new_thread",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "EInk-Calendar-master/view/hardware/epd7in5.py": {
        "EPD.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "EPD.reset": {
            "name": "reset",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EPD.send_command": {
            "name": "send_command",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "command": [
                    "list",
                    "defx.view.View",
                    "str"
                ]
            }
        },
        "EPD.send_data": {
            "name": "send_data",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "bytes"
                ]
            }
        },
        "EPD.wait_until_idle": {
            "name": "wait_until_idle",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EPD.init": {
            "name": "init",
            "location": 127,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "EPD.get_buffer": {
            "name": "get_buffer",
            "location": 166,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "Tuple[int, int]",
                    "int"
                ]
            }
        },
        "EPD.display": {
            "name": "display",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "image": [
                    "Sequence[Hashable]"
                ]
            }
        },
        "EPD.clear": {
            "name": "clear",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "color": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "EPD.sleep": {
            "name": "sleep",
            "location": 239,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "EInk-Calendar-master/view/hardware/epdconfig.py": {
        "digital_write": {
            "name": "digital_write",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "pin": [
                    "str",
                    "float",
                    "Sequence[Any]"
                ],
                "value": [
                    "str",
                    "float",
                    "Sequence[Any]"
                ]
            }
        },
        "digital_read": {
            "name": "digital_read",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pin": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "delay_ms": {
            "name": "delay_ms",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "delay_time": [
                    "int",
                    "float"
                ]
            }
        },
        "spi_writebyte": {
            "name": "spi_writebyte",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "module_init": {
            "name": "module_init",
            "location": 67,
            "return": [
                "int",
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "EInk-Calendar-master/view/hardware/mock.py": {
        "ButtonAndLed.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "controller": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "ButtonAndLed.exit": {
            "name": "exit",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ButtonAndLed.led_on": {
            "name": "led_on",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ButtonAndLed.led_off": {
            "name": "led_off",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EPD.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "utils.config_generator.Configurations",
                    "Optional[List[str]]"
                ]
            }
        },
        "EPD.reset": {
            "name": "reset",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EPD.send_command": {
            "name": "send_command",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "str",
                    "List[str]",
                    "Callable",
                    "bool",
                    "dict",
                    "int"
                ]
            }
        },
        "EPD.send_data": {
            "name": "send_data",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "List[List[Any]]",
                    "bool"
                ]
            }
        },
        "EPD.wait_until_idle": {
            "name": "wait_until_idle",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EPD.init": {
            "name": "init",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EPD.get_buffer": {
            "name": "get_buffer",
            "location": 41,
            "return": [
                "str",
                "int",
                "Optional[List[str]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "PIL.Image",
                    "int",
                    "PIL.Image.Image",
                    "str",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "EPD.display": {
            "name": "display",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "str",
                    "MutableMapping[str, Any]"
                ]
            }
        },
        "EPD.clear": {
            "name": "clear",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "EPD.sleep": {
            "name": "sleep",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "EInk-Calendar-master/view/hardware/__init__.py": {},
    "EInk-Calendar-master/view/widgets/alignments.py": {},
    "EInk-Calendar-master/view/widgets/calendar.py": {
        "CalendarWidget.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "height": [
                    "int",
                    "float",
                    "bool",
                    "Callable"
                ],
                "width": [
                    "int",
                    "float"
                ],
                "font": [
                    "int",
                    "list"
                ]
            }
        },
        "CalendarWidget.set_dates": {
            "name": "set_dates",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dates": [
                    "List[int]"
                ]
            }
        },
        "CalendarWidget.set_month": {
            "name": "set_month",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "month": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "CalendarWidget.set_select_date": {
            "name": "set_select_date",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "str"
                ],
                "col": [
                    "str"
                ],
                "selected": [
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "CalendarWidget.clear_selection": {
            "name": "clear_selection",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "EInk-Calendar-master/view/widgets/event.py": {
        "EventWidget.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "height": [
                    "int",
                    "Callable"
                ],
                "width": [
                    "int",
                    "Callable"
                ],
                "event_font": [
                    "str"
                ]
            }
        },
        "EventWidget.show": {
            "name": "show",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "show": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "EventWidget.set_date": {
            "name": "set_date",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "date": [
                    "str",
                    "datetime.datetime",
                    "Optional[datetime.datetime]",
                    "datetime.date"
                ]
            }
        },
        "EventWidget.set_event": {
            "name": "set_event",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str"
                ]
            }
        },
        "EventWidget.draw": {
            "name": "draw",
            "location": 33,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "draw": [
                    "str",
                    "float",
                    "bool",
                    "int"
                ]
            }
        },
        "EventsWidget.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "height": [
                    "int",
                    "str",
                    "bool"
                ],
                "width": [
                    "int",
                    "str",
                    "bool"
                ],
                "header_font": [
                    "int",
                    "List[str]",
                    "str",
                    "List[bool]"
                ],
                "event_font": [
                    "int",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "EventsWidget.set_events": {
            "name": "set_events",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "events": [
                    "list",
                    "dict",
                    "str"
                ]
            }
        }
    },
    "EInk-Calendar-master/view/widgets/panel.py": {
        "PanelWidget.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "height": [
                    "int",
                    "float",
                    "bool"
                ],
                "width": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "PanelWidget.draw": {
            "name": "draw",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "draw": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "EInk-Calendar-master/view/widgets/text.py": {
        "TextWidget.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "height": [
                    "int",
                    "float",
                    "bool"
                ],
                "width": [
                    "int",
                    "float",
                    "bool"
                ],
                "font": [
                    "int",
                    "float",
                    "tuple",
                    "List[List[int]]"
                ]
            }
        },
        "TextWidget.text": {
            "name": "text",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "TextWidget.vertical_alignment": {
            "name": "vertical_alignment",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vertical_alignment": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TextWidget.horizontal_alignment": {
            "name": "horizontal_alignment",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "horizontal_alignment": [
                    "int",
                    "float"
                ]
            }
        },
        "TextWidget.draw": {
            "name": "draw",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "draw": [
                    "float",
                    "Optional[str]"
                ]
            }
        }
    },
    "EInk-Calendar-master/view/widgets/weather.py": {
        "ForecastWidget.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "height": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "width": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "icon_font": [
                    "int",
                    "Callable",
                    "Union[None, int]",
                    "Optional[int]",
                    "float"
                ],
                "text_font": [
                    "int",
                    "PIL.ImageFont",
                    "bool",
                    "str"
                ],
                "icon_lookup": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "ForecastWidget.set_weather": {
            "name": "set_weather",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str",
                    "list",
                    "float"
                ]
            }
        },
        "ForecastWidget.set_temp_range": {
            "name": "set_temp_range",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "low": [
                    "str",
                    "dict",
                    "bool"
                ],
                "high": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "WeatherWidget.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "height": [
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "width": [
                    "int",
                    "Optional[int]",
                    "float",
                    "bool"
                ],
                "icon_font": [
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "small_icon_font": [
                    "int",
                    "PIL.ImageFont",
                    "bool"
                ],
                "text_font": [
                    "int",
                    "PIL.ImageFont",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "icon_lookup": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "WeatherWidget.set_weather": {
            "name": "set_weather",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str",
                    "list",
                    "float"
                ]
            }
        },
        "WeatherWidget.set_curr_temp": {
            "name": "set_curr_temp",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "temp": [
                    "str",
                    "bool",
                    "MutableMapping"
                ]
            }
        },
        "WeatherWidget.set_humidity": {
            "name": "set_humidity",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "humidity": [
                    "str",
                    "bool",
                    "MutableMapping"
                ]
            }
        },
        "WeatherWidget.set_forecast": {
            "name": "set_forecast",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "forecasts": [
                    "str",
                    "bool",
                    "Optional[list]",
                    "Iterable[T]"
                ]
            }
        }
    },
    "EInk-Calendar-master/view/widgets/weather_icon_lookup.py": {
        "WeatherIconLookup.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value_path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "WeatherIconLookup.look_up_with_name": {
            "name": "look_up_with_name",
            "location": 15,
            "return": [
                "Optional[BaseException]",
                "Optional[Callable]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "WeatherIconLookup.look_up_with_owm_id": {
            "name": "look_up_with_owm_id",
            "location": 19,
            "return": [
                "str",
                "int",
                "type",
                "AsyncGenerator"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ]
            }
        }
    },
    "EInk-Calendar-master/view/widgets/widget_base.py": {
        "WidgetBase.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "height": [
                    "int",
                    "float",
                    "tuple",
                    "List[List[int]]"
                ],
                "width": [
                    "int",
                    "float",
                    "tuple",
                    "List[List[int]]"
                ]
            }
        },
        "WidgetBase.height": {
            "name": "height",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WidgetBase.width": {
            "name": "width",
            "location": 25,
            "return": [
                "int",
                "bool",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WidgetBase.row": {
            "name": "row",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "row": [
                    "List[int]",
                    "bool",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "WidgetBase.col": {
            "name": "col",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "col": [
                    "str",
                    "int"
                ]
            }
        },
        "WidgetBase.abs_row": {
            "name": "abs_row",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "abs_row": [
                    "List[List]",
                    "int",
                    "list"
                ]
            }
        },
        "WidgetBase.abs_col": {
            "name": "abs_col",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "abs_col": [
                    "bool",
                    "str",
                    "List[int]",
                    "int"
                ]
            }
        },
        "WidgetBase.background": {
            "name": "background",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "background": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "WidgetBase.foreground": {
            "name": "foreground",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "foreground": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "WidgetBase.is_draw_border": {
            "name": "is_draw_border",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "draw_border": [
                    "str",
                    "int"
                ]
            }
        },
        "WidgetBase.is_children_draw_border": {
            "name": "is_children_draw_border",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "children_draw_border": [
                    "str",
                    "int"
                ]
            }
        },
        "WidgetBase.draw": {
            "name": "draw",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "draw": [
                    "int",
                    "bool",
                    "float",
                    "List[int]"
                ]
            }
        },
        "WidgetBase.add_child": {
            "name": "add_child",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "float",
                    "Sequence['cirq.Qid']",
                    "T"
                ]
            }
        }
    },
    "EInk-Calendar-master/view/widgets/__init__.py": {}
}
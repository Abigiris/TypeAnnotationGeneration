{
    "EthDKG-master/setup.py": {},
    "EthDKG-master/ethdkg/adversary.py": {
        "Adversary_SendInvalidShares.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "str"
                ],
                "contract": [
                    "int",
                    "str"
                ],
                "logger": [
                    "int",
                    "str"
                ],
                "targets": [
                    "int",
                    "bool"
                ]
            }
        },
        "Adversary_SendInvalidShares.distribute_shares": {
            "name": "distribute_shares",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "sync": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Adversary_AbortOnKeyShareSubmission.submit_key_share": {
            "name": "submit_key_share",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "recovered_node_idx": [
                    "Optional[int]",
                    "List[str]",
                    "str",
                    "List[int]"
                ],
                "sync": [
                    "Optional[int]",
                    "List[str]",
                    "str",
                    "List[int]"
                ]
            }
        },
        "Adversary_AbortAfterRegistration.setup": {
            "name": "setup",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "EthDKG-master/ethdkg/computation_costs_testing.py": {
        "T": {
            "name": "T",
            "location": 11,
            "return": [
                "dict",
                "int",
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "operation": [
                    "dict",
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "TS": {
            "name": "TS",
            "location": 23,
            "return": [
                "str",
                "bool",
                "List[Dict[str, str]]",
                "list",
                "Type"
            ],
            "arguments": {
                "operation": [
                    "Type[object]",
                    "Type",
                    "Mapping[str, Any]"
                ]
            }
        },
        "keygen": {
            "name": "keygen",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "i": [
                    "int",
                    "slice",
                    "T",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "derive_shared_keys": {
            "name": "derive_shared_keys",
            "location": 37,
            "return": [
                "int",
                "List[int]",
                "List[str]",
                "Tuple[int]",
                "list"
            ],
            "arguments": {
                "i": [
                    "int",
                    "bytes",
                    "Optional[Callable]",
                    "str"
                ],
                "keys": [
                    "int",
                    "bytes",
                    "Optional[Callable]",
                    "str"
                ]
            }
        },
        "bench_keys": {
            "name": "bench_keys",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "bench_sharing": {
            "name": "bench_sharing",
            "location": 86,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "EthDKG-master/ethdkg/crypto.py": {
        "random_scalar": {
            "name": "random_scalar",
            "location": 45,
            "return": [
                "str",
                "int",
                "Union[bytes, bytearray]",
                "bytearray"
            ],
            "arguments": {}
        },
        "keygen": {
            "name": "keygen",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "share_secret": {
            "name": "share_secret",
            "location": 62,
            "return": [
                "List[str]",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "secret": [
                    "int",
                    "str",
                    "bytes",
                    "List[str]",
                    "bool"
                ],
                "indices": [
                    "List[int]",
                    "int",
                    "List[float]",
                    "List[Dict[str, Any]]",
                    "OrderedDict",
                    "Callable"
                ],
                "threshold": [
                    "int",
                    "str",
                    "bytes",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "_share_secret_int_indices": {
            "name": "_share_secret_int_indices",
            "location": 83,
            "return": [
                "List[str]",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "s_i": [
                    "int",
                    "Optional[int]"
                ],
                "n": [
                    "int"
                ],
                "t": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "evaluate_public_polynomial": {
            "name": "evaluate_public_polynomial",
            "location": 107,
            "return": [
                "bool",
                "List[pydantic.fields.ModelField]",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "x": [
                    "Optional[Tuple]",
                    "Optional[str]",
                    "T"
                ],
                "commitments": []
            }
        },
        "verify_share": {
            "name": "verify_share",
            "location": 114,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "j": [
                    "dict",
                    "str"
                ],
                "s_ij": [
                    "int",
                    "Type[\"SerializationDialect\"]",
                    "str",
                    "Type",
                    "list",
                    "callable",
                    "Union[int, float]"
                ],
                "Cik": [
                    "int",
                    "str"
                ]
            }
        },
        "recover_secret": {
            "name": "recover_secret",
            "location": 123,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "shares": [
                    "Dict[int, int]",
                    "int",
                    "float"
                ]
            }
        },
        "shared_key": {
            "name": "shared_key",
            "location": 138,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "sk_i": [
                    "int",
                    "bool",
                    "str"
                ],
                "pk_j": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "encrypt_share": {
            "name": "encrypt_share",
            "location": 143,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s_ij": [
                    "int",
                    "bytes"
                ],
                "k_ij": [
                    "int",
                    "Type",
                    "bytes",
                    "str"
                ],
                "j": [
                    "Pattern",
                    "str",
                    "int"
                ]
            }
        },
        "dleq": {
            "name": "dleq",
            "location": 157,
            "return": [
                "list",
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "x1": [
                    "int",
                    "Union[bytes, bytearray, memoryview]"
                ],
                "y1": [
                    "Iterable[List[T]]"
                ],
                "x2": [
                    "int",
                    "Union[bytes, bytearray, memoryview]"
                ],
                "y2": [
                    "Iterable[List[T]]"
                ],
                "alpha": [
                    "int",
                    "float"
                ]
            }
        },
        "dleq_verify": {
            "name": "dleq_verify",
            "location": 182,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str",
                "Optional[int]",
                "set"
            ],
            "arguments": {
                "x1": [
                    "int"
                ],
                "y1": [
                    "int"
                ],
                "x2": [
                    "int"
                ],
                "y2": [
                    "int"
                ],
                "challenge": [
                    "bool",
                    "bytes",
                    "List['Product']",
                    "Union[int, float]",
                    "slice",
                    "List[Dict[str, Any]]"
                ],
                "response": [
                    "bool",
                    "bytes",
                    "List['Product']",
                    "Union[int, float]"
                ]
            }
        },
        "sum_scalars": {
            "name": "sum_scalars",
            "location": 203,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "scalars": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "sum_points": {
            "name": "sum_points",
            "location": 207,
            "return": [
                "bool",
                "List[pydantic.fields.ModelField]",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "points": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "share_secret.f": {
            "name": "f",
            "location": 71,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "_share_secret_int_indices.f": {
            "name": "f",
            "location": 95,
            "return": [
                "float",
                "T",
                "List[int]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "recover_secret.lagrange_coefficient": {
            "name": "lagrange_coefficient",
            "location": 127,
            "return": [
                "bool",
                "List[pydantic.fields.ModelField]",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "i": [
                    "int",
                    "List[float]",
                    "float"
                ]
            }
        }
    },
    "EthDKG-master/ethdkg/ethnode.py": {
        "point_to_eth": {
            "name": "point_to_eth",
            "location": 14,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "cmk.utils.type_defs.HostAddress",
                "str"
            ],
            "arguments": {
                "p": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "cmk.utils.type_defs.HostAddress",
                    "str"
                ]
            }
        },
        "point_from_eth": {
            "name": "point_from_eth",
            "location": 19,
            "return": [
                "int",
                "bool",
                "List[int]",
                "str"
            ],
            "arguments": {
                "p": [
                    "int",
                    "str",
                    "float",
                    "Optional[str]"
                ]
            }
        },
        "point_G2_to_eth": {
            "name": "point_G2_to_eth",
            "location": 24,
            "return": [
                "bytearray",
                "bytes",
                "torch.nn.utils.rnn.PackedSequence",
                "str",
                "float",
                "Union[int, float]"
            ],
            "arguments": {
                "p": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "point_G2_from_eth": {
            "name": "point_G2_from_eth",
            "location": 31,
            "return": [
                "bool",
                "bytearray",
                "bytes",
                "torch.nn.utils.rnn.PackedSequence",
                "int"
            ],
            "arguments": {
                "p": [
                    "str",
                    "int",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "EthNode.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "bool"
                ],
                "contract": [
                    "float",
                    "bytes",
                    "str"
                ],
                "logger": [
                    "str",
                    "logging.Logger",
                    "List[str]",
                    "Tuple[Tuple[str, ...]]"
                ]
            }
        },
        "EthNode.tx_registration_receipt": {
            "name": "tx_registration_receipt",
            "location": 50,
            "return": [
                "int",
                "bool",
                "str",
                "mode.utils.Counter[faustypes.TP]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthNode.register": {
            "name": "register",
            "location": 55,
            "return": [
                "Optional[int]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "sync": [
                    "str",
                    "bool"
                ]
            }
        },
        "EthNode.setup": {
            "name": "setup",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EthNode.distribute_shares": {
            "name": "distribute_shares",
            "location": 79,
            "return": [
                "Optional[int]",
                "Optional[bool]",
                "trezor.utils.Writer"
            ],
            "arguments": {
                "self": [],
                "encrypted_shares": [
                    "Optional[\"Outcome\"]",
                    "Optional[bytes]"
                ],
                "commitments": [
                    "str",
                    "int",
                    "bytes",
                    "List[T]"
                ],
                "sync": [
                    "float",
                    "int",
                    "bool"
                ]
            }
        },
        "EthNode.load_shares": {
            "name": "load_shares",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EthNode.submit_disputes": {
            "name": "submit_disputes",
            "location": 103,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "disputes": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[Tuple[Any, Any]]",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[float]"
                ],
                "sync": [
                    "int",
                    "Dict[str, float]"
                ]
            }
        },
        "EthNode.load_disputes": {
            "name": "load_disputes",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EthNode.submit_key_share": {
            "name": "submit_key_share",
            "location": 159,
            "return": [
                "str",
                "Optional[str]",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": [],
                "recovered_node_idx": [
                    "str",
                    "Union[str, int]",
                    "int",
                    "Optional[ChainMap[str, Any]]",
                    "Optional[str]"
                ],
                "sync": [
                    "int",
                    "Node",
                    "Dict[str, Any]",
                    "trezor.crypto.bip32.HDNode",
                    "bytes"
                ]
            }
        },
        "EthNode.load_key_shares": {
            "name": "load_key_shares",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EthNode.recover_key_shares": {
            "name": "recover_key_shares",
            "location": 221,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "sync": [
                    "bytes",
                    "int",
                    "str"
                ]
            }
        },
        "EthNode.load_recovered_key_shares": {
            "name": "load_recovered_key_shares",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "poll_timeout": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "EthNode.submit_recovered_key_shares": {
            "name": "submit_recovered_key_shares",
            "location": 297,
            "return": [
                "bytes",
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "sync": [
                    "dict",
                    "list",
                    "Dict[str, float]",
                    "IO[bytes]",
                    "List[Tuple[Any, Dict]]"
                ]
            }
        },
        "EthNode.submit_master_public_key": {
            "name": "submit_master_public_key",
            "location": 305,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "sync": [
                    "bytes",
                    "Optional[Exception]",
                    "str"
                ]
            }
        }
    },
    "EthDKG-master/ethdkg/ethutils.py": {
        "set_polling_interval": {
            "name": "set_polling_interval",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "interval": [
                    "bool",
                    "float"
                ]
            }
        },
        "get_polling_interval": {
            "name": "get_polling_interval",
            "location": 35,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "connect": {
            "name": "connect",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "port": [
                    "Optional[int]",
                    "Optional[str]",
                    "int",
                    "Union[str, int]"
                ],
                "dev": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "poa": [
                    "str",
                    "int",
                    "float",
                    "Iterable[Optional[Any]]",
                    "subprocess.Popen"
                ]
            }
        },
        "get_account_address": {
            "name": "get_account_address",
            "location": 71,
            "return": [
                "str",
                "int",
                "Dict[str, str]",
                "Exception",
                "dict",
                "Dict[str, bool]"
            ],
            "arguments": {
                "account_idx": [
                    "str"
                ]
            }
        },
        "compile_contract": {
            "name": "compile_contract",
            "location": 79,
            "return": [
                "str",
                "types.ServiceT",
                "bytes",
                "int",
                "Dict[str, Callable]"
            ],
            "arguments": {
                "contract_name": [
                    "str",
                    "Dict[str, str]",
                    "Sequence[utils.types.A]"
                ]
            }
        },
        "load_contract": {
            "name": "load_contract",
            "location": 94,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "contract_name": [
                    "str"
                ],
                "str": [
                    "str",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "deploy_contract": {
            "name": "deploy_contract",
            "location": 102,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "contract_name": [
                    "str",
                    "Optional[str]"
                ],
                "deploying_account_address": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "Union[int, str]",
                    "Optional[int]"
                ],
                "gas": [
                    "str",
                    "bool"
                ],
                "should_add_simplified_call_interfaces": [
                    "str",
                    "Optional[str]",
                    "float",
                    "int",
                    "Optional[Dict[str, str]]"
                ],
                "return_tx_receipt": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "get_contract": {
            "name": "get_contract",
            "location": 129,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "contract_name": [
                    "str",
                    "Optional[str]"
                ],
                "contract_address": [
                    "float"
                ],
                "should_add_simplified_call_interfaces": [
                    "float",
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "wait_for_tx_receipt": {
            "name": "wait_for_tx_receipt",
            "location": 143,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "tx_hash": [
                    "str",
                    "List[Dict]",
                    "T",
                    "list"
                ]
            }
        },
        "get_tx_receipt": {
            "name": "get_tx_receipt",
            "location": 151,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "tx_hash": [
                    "bool",
                    "int"
                ]
            }
        },
        "wait_for_block": {
            "name": "wait_for_block",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "target_block_number": [
                    "str"
                ]
            }
        },
        "add_simplified_call_interfaces": {
            "name": "add_simplified_call_interfaces",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {
                "contract": []
            }
        },
        "mine_block": {
            "name": "mine_block",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "mine_blocks": {
            "name": "mine_blocks",
            "location": 226,
            "return": [
                ""
            ],
            "arguments": {
                "num_blocks": [
                    "int"
                ]
            }
        },
        "mine_blocks_until": {
            "name": "mine_blocks_until",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "predicate": [
                    "List[\"Block\"]",
                    "int",
                    "str",
                    "types.CategoryType"
                ]
            }
        },
        "block_number": {
            "name": "block_number",
            "location": 238,
            "return": [
                "str",
                "Type",
                "Iterable[int]",
                "starlette.types.Scope"
            ],
            "arguments": {}
        },
        "set_gas_price_strategy": {
            "name": "set_gas_price_strategy",
            "location": 243,
            "return": [
                ""
            ],
            "arguments": {
                "strategy_or_price_in_gwei": [
                    "FrozenSet",
                    "int",
                    "str",
                    "Optional[Tuple[float, float]]"
                ]
            }
        },
        "FailedTxReceipt.__init__": {
            "name": "__init__",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SimplifiedCallInterface.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "str",
                    "Optional[bytes]",
                    "bool",
                    "List[str]",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "fn_name": [
                    "str",
                    "Optional[bytes]",
                    "bool",
                    "List[str]",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "SimplifiedCallInterface.__call__": {
            "name": "__call__",
            "location": 170,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SimplifiedCallInterfaceCall.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_func": [
                    "int",
                    "float",
                    "List[List[T]]"
                ]
            }
        },
        "SimplifiedCallInterfaceCall.call_sync": {
            "name": "call_sync",
            "location": 180,
            "return": [
                "Type",
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "caller_account_address": []
            }
        },
        "SimplifiedCallInterfaceCall.call_async": {
            "name": "call_async",
            "location": 192,
            "return": [
                "str",
                "List[types.ServiceT]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "caller_account_address": [
                    "str",
                    "Union[str, Dict[str, Any]]"
                ]
            }
        },
        "SimplifiedCallInterfaceCall.call": {
            "name": "call",
            "location": 198,
            "return": [
                "mypy.types.Type"
            ],
            "arguments": {
                "self": [],
                "caller_account_address": [
                    "bool",
                    "Mapping[str, Any]",
                    "str"
                ],
                "sync": [
                    "List[int]",
                    "bool"
                ]
            }
        },
        "set_gas_price_strategy.fixed_strategy": {
            "name": "fixed_strategy",
            "location": 247,
            "return": [
                "str",
                "List[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "web3": [
                    "int",
                    "Callable",
                    "str"
                ],
                "params": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "EthDKG-master/ethdkg/eval_gas_costs.py": {
        "print_stats": {
            "name": "print_stats",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "Callable"
                ],
                "label": [
                    "bool",
                    "List[str]",
                    "dict",
                    "Union[List[str], List[int]]"
                ],
                "txs": [
                    "bool",
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "min_for_duplicate": [
                    "bool",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "str"
                ]
            }
        },
        "init": {
            "name": "init",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int",
                    "list"
                ]
            }
        },
        "print_replace": {
            "name": "print_replace",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "registration": {
            "name": "registration",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "batch_size": [
                    "int",
                    "List[int]",
                    "Sized",
                    "List[str]",
                    "str"
                ]
            }
        },
        "setup": {
            "name": "setup",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "share_distribution": {
            "name": "share_distribution",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "disputes": {
            "name": "disputes",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "batch_size": [
                    "int",
                    "Optional[Callable]",
                    "bool",
                    "Optional[int]",
                    "Union[int, Tuple[int, int]]"
                ]
            }
        },
        "key_derivation": {
            "name": "key_derivation",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "stop_max": [
                    "str",
                    "bool",
                    "int",
                    "T",
                    "List[int]"
                ]
            }
        },
        "key_derivation_recovery": {
            "name": "key_derivation_recovery",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 249,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int",
                    "Optional[int]"
                ],
                "stop_max": [
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "run_all": {
            "name": "run_all",
            "location": 271,
            "return": [
                ""
            ],
            "arguments": {
                "N": [
                    "int",
                    "float",
                    "str"
                ],
                "stop_max": [
                    "int"
                ]
            }
        }
    },
    "EthDKG-master/ethdkg/eval_gas_costs_offchain.py": {},
    "EthDKG-master/ethdkg/logging.py": {
        "create_logger": {
            "name": "create_logger",
            "location": 38,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "filename": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "cli_linewidth": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "log_timestamps": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[int]"
                ]
            }
        },
        "CustomCLIFormatter.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fmt": [
                    "str",
                    "Optional[str]"
                ],
                "datefmt": [
                    "str",
                    "Optional[str]"
                ],
                "style": [
                    "str",
                    "Optional[str]"
                ],
                "line_length": [
                    "bool",
                    "float",
                    "Optional[str]",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "CustomCLIFormatter.format": {
            "name": "format",
            "location": 27,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str",
                "set"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "float",
                    "str",
                    "Tuple[int, int]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "create_logger.newline": {
            "name": "newline",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [
                    "str",
                    "int"
                ],
                "how_many_lines": [
                    "int",
                    "str",
                    "Iterable[str]",
                    "bool",
                    "List[Dict]"
                ]
            }
        },
        "_NullLogger.info": {
            "name": "info",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "EthDKG-master/ethdkg/node.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.setup": {
            "name": "setup",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n": [
                    "bytes",
                    "bool",
                    "str",
                    "Optional[dict]",
                    "float"
                ],
                "t": [
                    "int",
                    "bool",
                    "str"
                ],
                "assigned_idx_for_this_node": [
                    "str",
                    "bool",
                    "bytes",
                    "Optional[dict]"
                ],
                "public_keys": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[bytes]"
                ]
            }
        },
        "Node.compute_shares": {
            "name": "compute_shares",
            "location": 70,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.load_shares": {
            "name": "load_shares",
            "location": 87,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "issuer_idx": [
                    "int",
                    "str",
                    "List[str]",
                    "Sequence[float]"
                ],
                "encrypted_shares": [
                    "str"
                ],
                "commitments": [
                    "str",
                    "int",
                    "bytearray",
                    "Optional[str]",
                    "dict",
                    "bool"
                ]
            }
        },
        "Node.compute_disputes": {
            "name": "compute_disputes",
            "location": 108,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.load_dispute": {
            "name": "load_dispute",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "issuer_idx": [
                    "str",
                    "Dict[Any, list]",
                    "bool",
                    "Optional[str]",
                    "int",
                    "type"
                ],
                "disputer_idx": [
                    "bytes",
                    "str",
                    "int",
                    "Union[bytes, str, None]"
                ],
                "shared_key": [
                    "bytes",
                    "str",
                    "int",
                    "Union[bytes, str, None]"
                ],
                "shared_key_correctness_proof": [
                    "Tuple[int, int]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Node.compute_qualified_nodes": {
            "name": "compute_qualified_nodes",
            "location": 149,
            "return": [
                "int",
                "str",
                "float",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.compute_key_share": {
            "name": "compute_key_share",
            "location": 153,
            "return": [
                "int",
                "str",
                "Tuple[str, int]"
            ],
            "arguments": {
                "self": [],
                "recovered_node_idx": [
                    "Optional[int]",
                    "List[str]",
                    "str",
                    "List[int]"
                ]
            }
        },
        "Node.load_key_share": {
            "name": "load_key_share",
            "location": 160,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "issuer_idx": [
                    "bool",
                    "int"
                ],
                "h1": [
                    "int",
                    "str",
                    "bool",
                    "Iterable[T]"
                ],
                "h1_proof": [
                    "Tuple[int, int]",
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[Dict]",
                    "Dict[str, Any]"
                ],
                "h2": [
                    "int",
                    "dict",
                    "Iterator[Any]"
                ]
            }
        },
        "Node.initiate_key_share_recovery": {
            "name": "initiate_key_share_recovery",
            "location": 176,
            "return": [
                "str",
                "Dict[str, List[Any]]"
            ],
            "arguments": {
                "self": [],
                "node_idx": [
                    "Iterable[bytes]",
                    "dict",
                    "Dict[str, Any]",
                    "tuple",
                    "bytes"
                ]
            }
        },
        "Node.load_recovered_key_share": {
            "name": "load_recovered_key_share",
            "location": 185,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node_idx": [
                    "bytes",
                    "Tuple[int, int]",
                    "str"
                ],
                "recoverer_idx": [
                    "bytes",
                    "Tuple[int, int]",
                    "str"
                ],
                "shared_key": [
                    "bytes",
                    "Tuple[int, int]",
                    "str"
                ],
                "shared_key_correctness_proof": [
                    "Tuple[int, int]",
                    "str",
                    "dict",
                    "Union[str, int]",
                    "bytes"
                ]
            }
        },
        "Node.recover_key_share": {
            "name": "recover_key_share",
            "location": 207,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node_idx": [
                    "int",
                    "str"
                ]
            }
        },
        "Node.derive_master_public_key": {
            "name": "derive_master_public_key",
            "location": 222,
            "return": [
                "bytes",
                "str",
                "Sequence[Sequence[Any]]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.derive_group_keys": {
            "name": "derive_group_keys",
            "location": 226,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.verify_group_public_key": {
            "name": "verify_group_public_key",
            "location": 234,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node_idx": [
                    "Dict[str, Union[str, int, bool]]",
                    "bool",
                    "str",
                    "int"
                ],
                "group_public_key": [
                    "crypto.PointG2",
                    "bytes",
                    "str"
                ],
                "gpk_h": [
                    "crypto.PointG1",
                    "bytes",
                    "Optional[List[Any]]",
                    "int"
                ],
                "proof": [
                    "Tuple[int, int]",
                    "bytes",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]",
                    "dict",
                    "List[str]"
                ]
            }
        }
    },
    "EthDKG-master/ethdkg/state_updates.py": {
        "enable_state_updates": {
            "name": "enable_state_updates",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "StateUpdate.__call__": {
            "name": "__call__",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StateUpdate.set_logger": {
            "name": "set_logger",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Dict[str, Any]",
                    "str"
                ],
                "logger": [
                    "int",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "EthDKG-master/ethdkg/testutils.py": {
        "mine_until_registrations_confirmed": {
            "name": "mine_until_registrations_confirmed",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "contract": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "mine_until_share_distribution_confirmed": {
            "name": "mine_until_share_distribution_confirmed",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "contract": [
                    "str",
                    "type",
                    "float",
                    "bool"
                ]
            }
        },
        "mine_until_disputes_confirmed": {
            "name": "mine_until_disputes_confirmed",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "contract": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "mine_until_key_share_submission_confirmed": {
            "name": "mine_until_key_share_submission_confirmed",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "contract": [
                    "str",
                    "bool",
                    "cmk.utils.type_defs.HostName",
                    "cmk.utils.type_defs.ConfigSerial",
                    "BaseException"
                ]
            }
        }
    },
    "EthDKG-master/ethdkg/test_contract_ethdkg.py": {
        "compile_contract": {
            "name": "compile_contract",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "request": []
            }
        },
        "contract": {
            "name": "contract",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "init_scenario": {
            "name": "init_scenario",
            "location": 33,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "contract": [
                    "int"
                ],
                "n": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "t": [
                    "int",
                    "List[List[int]]"
                ]
            }
        },
        "test_compilation": {
            "name": "test_compilation",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_deployment": {
            "name": "test_deployment",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "contract": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_bn128_check_pairing": {
            "name": "test_bn128_check_pairing",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "contract": [
                    "str",
                    "float"
                ]
            }
        },
        "test_register": {
            "name": "test_register",
            "location": 58,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "contract": [
                    "str",
                    "float"
                ]
            }
        },
        "test_register__too_late": {
            "name": "test_register__too_late",
            "location": 64,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "contract": []
            }
        },
        "test_register__twice": {
            "name": "test_register__twice",
            "location": 71,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "contract": [
                    "str",
                    "float"
                ]
            }
        },
        "test_register__invalid_pk": {
            "name": "test_register__invalid_pk",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "contract": [
                    "str",
                    "float"
                ]
            }
        },
        "test_setup": {
            "name": "test_setup",
            "location": 86,
            "return": [],
            "arguments": {
                "contract": [
                    "Optional[Exception]",
                    "str"
                ]
            }
        },
        "test_share_distribution": {
            "name": "test_share_distribution",
            "location": 101,
            "return": [],
            "arguments": {
                "contract": [
                    "Tuple[int]",
                    "Optional[Exception]"
                ]
            }
        },
        "distribute_invalid_shares": {
            "name": "distribute_invalid_shares",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "issuer": [],
                "receiver": [
                    "List[int]",
                    "str",
                    "int"
                ]
            }
        },
        "distribute_invalid_commitment": {
            "name": "distribute_invalid_commitment",
            "location": 128,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "issuer": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_share_distribution__invalid_commitment": {
            "name": "test_share_distribution__invalid_commitment",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "contract": [
                    "Tuple[int]",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_dispute__invalid_share": {
            "name": "test_dispute__invalid_share",
            "location": 149,
            "return": [],
            "arguments": {
                "contract": [
                    "Tuple[int]",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_dispute__valid_share": {
            "name": "test_dispute__valid_share",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "contract": [
                    "Tuple[int]",
                    "int",
                    "Callable"
                ]
            }
        },
        "test_submit_key_share": {
            "name": "test_submit_key_share",
            "location": 208,
            "return": [
                "str"
            ],
            "arguments": {
                "contract": [
                    "Tuple[int]",
                    "str",
                    "Optional[Exception]"
                ]
            }
        },
        "test_submit_key_share__recovery": {
            "name": "test_submit_key_share__recovery",
            "location": 239,
            "return": [
                "str"
            ],
            "arguments": {
                "contract": [
                    "Tuple[int]",
                    "str",
                    "Optional[Exception]"
                ]
            }
        },
        "test_key_derivation": {
            "name": "test_key_derivation",
            "location": 284,
            "return": [
                ""
            ],
            "arguments": {
                "contract": [
                    "str",
                    "Callable[[List], None]"
                ]
            }
        }
    },
    "EthDKG-master/ethdkg/test_contract_greeter.py": {
        "test_compilation": {
            "name": "test_compilation",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_deployment": {
            "name": "test_deployment",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_getter": {
            "name": "test_getter",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "EthDKG-master/ethdkg/test_contract_testing.py": {
        "test_addr_cast": {
            "name": "test_addr_cast",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_points": {
            "name": "test_points",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_list_assignment": {
            "name": "test_list_assignment",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_event_filters": {
            "name": "test_event_filters",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "EthDKG-master/ethdkg/test_crypto.py": {
        "test_keygen": {
            "name": "test_keygen",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_share_secret": {
            "name": "test_share_secret",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_share_verification": {
            "name": "test_share_verification",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_share_verification_invalid_commitments": {
            "name": "test_share_verification_invalid_commitments",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_recover_secret": {
            "name": "test_recover_secret",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_shared_key_derivation": {
            "name": "test_shared_key_derivation",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_encryption_of_share": {
            "name": "test_encryption_of_share",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_dleq": {
            "name": "test_dleq",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sum_points": {
            "name": "test_sum_points",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_full_protocol_all_honest": {
            "name": "test_full_protocol_all_honest",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_pairing": {
            "name": "test_pairing",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_evaluate_public_polynomial": {
            "name": "test_evaluate_public_polynomial",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "EthDKG-master/ethdkg/test_node.py": {
        "init_scenario": {
            "name": "init_scenario",
            "location": 11,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "List[str]",
                    "list",
                    "Union[int, Sequence[int]]"
                ],
                "t": [
                    "int",
                    "List[int]",
                    "T",
                    "bool"
                ],
                "use_random_indices": [
                    "bool",
                    "int",
                    "List[float]"
                ]
            }
        },
        "compute_and_distribute_shares": {
            "name": "compute_and_distribute_shares",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "nodes": [
                    "bool",
                    "Iterable[Any]",
                    "Mapping[str, Any]",
                    "int"
                ],
                "invalid_shares_from_to": [
                    "Set[VT]",
                    "object",
                    "int",
                    "float",
                    "Set[int]",
                    "Mapping[Any, Any]",
                    "List[int]"
                ],
                "invalid_commitments_from": [
                    "Set[VT]",
                    "object",
                    "int",
                    "float",
                    "Set[int]",
                    "Mapping[Any, Any]",
                    "List[int]"
                ],
                "do_not_distribute_from": [
                    "str",
                    "Dict[str, bytes]",
                    "\"ImmutableSet[T]\""
                ]
            }
        },
        "test_shared_keys": {
            "name": "test_shared_keys",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_share_distribution_all_fine_case": {
            "name": "test_share_distribution_all_fine_case",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_share_distribution_node_invalid_shares_should_be_detected": {
            "name": "test_share_distribution_node_invalid_shares_should_be_detected",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_share_distribution_node_invalid_commitments_should_be_detected": {
            "name": "test_share_distribution_node_invalid_commitments_should_be_detected",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "compute_and_distribute_disputes": {
            "name": "compute_and_distribute_disputes",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "nodes": [
                    "Optional[mypy.nodes.Node]",
                    "str"
                ]
            }
        },
        "test_valid_dispute_accepted": {
            "name": "test_valid_dispute_accepted",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_invalid_dispute_rejected__invalid_key": {
            "name": "test_invalid_dispute_rejected__invalid_key",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_invalid_dispute_rejected__invalid_key_proof": {
            "name": "test_invalid_dispute_rejected__invalid_key_proof",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_invalid_dispute_rejected__share_valid": {
            "name": "test_invalid_dispute_rejected__share_valid",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_qualified_nodes__all": {
            "name": "test_qualified_nodes__all",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_qualified_nodes__exclude_disputed": {
            "name": "test_qualified_nodes__exclude_disputed",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_qualified_nodes__exclude_undistributed": {
            "name": "test_qualified_nodes__exclude_undistributed",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "compute_and_distribute_key_shares": {
            "name": "compute_and_distribute_key_shares",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "nodes": [
                    "Node",
                    "Optional[Node]"
                ]
            }
        },
        "test_key_shares_verification__all_correct": {
            "name": "test_key_shares_verification__all_correct",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_key_shares_verification__invalid": {
            "name": "test_key_shares_verification__invalid",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_key_shares_recovery": {
            "name": "test_key_shares_recovery",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_master_key_derivation": {
            "name": "test_master_key_derivation",
            "location": 257,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_group_key_derivation": {
            "name": "test_group_key_derivation",
            "location": 272,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "EthDKG-master/ethdkg/utils.py": {},
    "EthDKG-master/ethdkg/__init__.py": {},
    "EthDKG-master/ethdkg/__main__.py": {
        "main": {
            "name": "main",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "parse_cli_arguments": {
            "name": "parse_cli_arguments",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "deploy": {
            "name": "deploy",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "init": {
            "name": "init",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "registration": {
            "name": "registration",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "share_distribution": {
            "name": "share_distribution",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "share_verification": {
            "name": "share_verification",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "dispute_submission": {
            "name": "dispute_submission",
            "location": 266,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "dispute_verification": {
            "name": "dispute_verification",
            "location": 302,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "key_derivation_submission": {
            "name": "key_derivation_submission",
            "location": 317,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "key_derivation_verification": {
            "name": "key_derivation_verification",
            "location": 356,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "key_derivation_recovery": {
            "name": "key_derivation_recovery",
            "location": 369,
            "return": [
                "int",
                "Union[tuple, list]"
            ],
            "arguments": {}
        },
        "key_derivation_result": {
            "name": "key_derivation_result",
            "location": 399,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "log_tx": {
            "name": "log_tx",
            "location": 420,
            "return": [
                ""
            ],
            "arguments": {
                "tx_hash": [
                    "str",
                    "bool",
                    "int"
                ],
                "state_update": [
                    "str",
                    "Optional[Any]",
                    "dict",
                    "bool",
                    "bytes",
                    "int"
                ],
                "may_fail": [
                    "str",
                    "Optional[Any]",
                    "dict",
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        },
        "log_tx_receipt": {
            "name": "log_tx_receipt",
            "location": 430,
            "return": [
                ""
            ],
            "arguments": {
                "receipt": [
                    "bytes",
                    "Tuple[float, float]",
                    "Tuple[int, int]",
                    "List[str]"
                ],
                "state_update": [
                    "List[int]",
                    "Tuple[bool, str]",
                    "T",
                    "Dict[str, Any]",
                    "bool",
                    "Callable"
                ],
                "may_fail": [
                    "List[Dict[str, str]]",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "wait_until": {
            "name": "wait_until",
            "location": 449,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "block_number": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "EthDKG-master/fc19/client/bls.py": {
        "keygen": {
            "name": "keygen",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "seed": [
                    "Any",
                    "str",
                    "Optional[float]",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "Optional[Any]"
                ]
            }
        },
        "sign": {
            "name": "sign",
            "location": 33,
            "return": [
                "Callable",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "sk": [
                    "int",
                    "bytes",
                    "str"
                ],
                "message": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "verify": {
            "name": "verify",
            "location": 37,
            "return": [
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "bls_pk": [
                    "crypto.PointG2",
                    "crypto.PointG1",
                    "bool",
                    "Optional[Sequence[str]]",
                    "str",
                    "bytes"
                ],
                "message": [
                    "crypto.PointG2",
                    "crypto.PointG1",
                    "bool",
                    "Optional[Sequence[str]]",
                    "str",
                    "bytes"
                ],
                "signature": [
                    "crypto.PointG2",
                    "crypto.PointG1",
                    "bool",
                    "Optional[Sequence[str]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "aggregate": {
            "name": "aggregate",
            "location": 44,
            "return": [
                "Optional[bytes]",
                "bool"
            ],
            "arguments": {
                "id_and_signature_list": [
                    "str",
                    "int",
                    "tuple"
                ]
            }
        }
    },
    "EthDKG-master/fc19/client/constants.py": {},
    "EthDKG-master/fc19/client/crypto.py": {
        "neg": {
            "name": "neg",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "point": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "add": {
            "name": "add",
            "location": 25,
            "return": [
                "str",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "pointA": [
                    "T",
                    "Set[str]",
                    "tuple",
                    "str"
                ],
                "pointB": [
                    "T",
                    "Set[str]",
                    "tuple",
                    "str"
                ]
            }
        },
        "sum_points": {
            "name": "sum_points",
            "location": 30,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "points": [
                    "str",
                    "bool"
                ]
            }
        },
        "multiply": {
            "name": "multiply",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "point": [
                    "int",
                    "Callable",
                    "str"
                ],
                "scalar": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "is_on_curve": {
            "name": "is_on_curve",
            "location": 42,
            "return": [
                "bool"
            ],
            "arguments": {
                "point": [
                    "float",
                    "List[int]",
                    "str"
                ]
            }
        },
        "check_pairing": {
            "name": "check_pairing",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "P1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "Q1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "P2": [
                    "int",
                    "Callable",
                    "str"
                ],
                "Q2": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "check_pairing_equality": {
            "name": "check_pairing_equality",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "P1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "Q1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "P2": [
                    "int",
                    "Callable",
                    "str"
                ],
                "Q2": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "hash_to_scalar": {
            "name": "hash_to_scalar",
            "location": 80,
            "return": [
                "bool",
                "OrderedDict",
                "str"
            ],
            "arguments": {
                "msg": [
                    "bytes",
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "hash_to_G1_old": {
            "name": "hash_to_G1_old",
            "location": 87,
            "return": [
                "List[str]",
                "int",
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "msg": [
                    "T",
                    "bytes"
                ]
            }
        },
        "hash_to_G1": {
            "name": "hash_to_G1",
            "location": 99,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "msg": [
                    "int",
                    "bytes",
                    "float"
                ]
            }
        },
        "map_to_G1": {
            "name": "map_to_G1",
            "location": 111,
            "return": [
                "int",
                "List[int]",
                "tuple",
                "bool",
                "float",
                "str"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "bytearray",
                    "int",
                    "dict"
                ]
            }
        },
        "random_scalar": {
            "name": "random_scalar",
            "location": 145,
            "return": [
                "List[dict]",
                "bytes",
                "str",
                "bytearray"
            ],
            "arguments": {
                "seed": [
                    "bytes",
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "random_point_from_G1": {
            "name": "random_point_from_G1",
            "location": 151,
            "return": [
                "Set[str]",
                "Tuple[str]",
                "Dict[str, Any]",
                "int",
                "Sequence[float]"
            ],
            "arguments": {
                "seed": [
                    "bool",
                    "str"
                ]
            }
        },
        "_wrap": {
            "name": "_wrap",
            "location": 161,
            "return": [
                "bool"
            ],
            "arguments": {
                "point": [
                    "bytes",
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "_unwrap": {
            "name": "_unwrap",
            "location": 173,
            "return": [
                "str",
                "int",
                "List[Tuple[int, str]]"
            ],
            "arguments": {
                "point": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "EthDKG-master/fc19/client/dkg.py": {
        "main": {
            "name": "main",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "parse_cli_arguments": {
            "name": "parse_cli_arguments",
            "location": 53,
            "return": [
                "argparse.Namespace"
            ],
            "arguments": {}
        },
        "default_logging_info": {
            "name": "default_logging_info",
            "location": 107,
            "return": [
                "bool",
                "float",
                "raiden.constants.Environment"
            ],
            "arguments": {
                "msg": [
                    "str",
                    "recidiviz.ingesscrape.constants.ScrapeType",
                    "Tuple[Tuple[int, ...]]"
                ]
            }
        },
        "trimmed_logging_info": {
            "name": "trimmed_logging_info",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "msg": [
                    "str",
                    "Sequence[str]",
                    "bool",
                    "Union"
                ]
            }
        },
        "deploy": {
            "name": "deploy",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 126,
            "return": [
                "Awaitable"
            ],
            "arguments": {}
        },
        "register": {
            "name": "register",
            "location": 168,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "share_key": {
            "name": "share_key",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "key_sharing_stats": {
            "name": "key_sharing_stats",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "dispute": {
            "name": "dispute",
            "location": 261,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "wait_for": {
            "name": "wait_for",
            "location": 281,
            "return": [
                ""
            ],
            "arguments": {
                "event_type": [
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "target_block_number": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ],
                "target_description": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "final_stats": {
            "name": "final_stats",
            "location": 312,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "derive_keys": {
            "name": "derive_keys",
            "location": 334,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "upload_master_key": {
            "name": "upload_master_key",
            "location": 343,
            "return": [
                "int",
                "Iterable[str]",
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "log_tx": {
            "name": "log_tx",
            "location": 358,
            "return": [
                ""
            ],
            "arguments": {
                "tx": [
                    "str",
                    "bool",
                    "logging.Logger",
                    "Optional[float]"
                ],
                "info": [
                    "str",
                    "logging.Logger",
                    "bool",
                    "T"
                ]
            }
        },
        "log_events": {
            "name": "log_events",
            "location": 366,
            "return": [
                ""
            ],
            "arguments": {
                "events": [
                    "dict",
                    "list",
                    "str"
                ]
            }
        },
        "log_event": {
            "name": "log_event",
            "location": 371,
            "return": [
                ""
            ],
            "arguments": {
                "e": [
                    "Dict[str, Any]",
                    "str",
                    "list"
                ]
            }
        }
    },
    "EthDKG-master/fc19/client/ethnode.py": {
        "EthNode.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "List[str]",
                    "Sized",
                    "list"
                ]
            }
        },
        "EthNode.connect": {
            "name": "connect",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "EthNode.register": {
            "name": "register",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "check_contract_phase": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "EthNode.init_secret_sharing": {
            "name": "init_secret_sharing",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "check_contract_phase": [
                    "str",
                    "dict",
                    "bool",
                    "int",
                    "Match[Any]"
                ]
            }
        },
        "EthNode.share_key": {
            "name": "share_key",
            "location": 58,
            "return": [
                "str",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "check_contract_phase": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "purplship.providers.ups.utils.Settings",
                    "dict",
                    "List[Dict[str, Any]]",
                    "Optional[int]"
                ]
            }
        },
        "EthNode.load_shares": {
            "name": "load_shares",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "check_contract_phase": [
                    "bool",
                    "str",
                    "list",
                    "IO[str]"
                ]
            }
        },
        "EthNode.dispute": {
            "name": "dispute",
            "location": 100,
            "return": [
                "Union[tuple, list]",
                "bytes",
                "Iterable[Hashable]",
                "List[Dict]"
            ],
            "arguments": {
                "self": [],
                "issuer_id": [
                    "str"
                ],
                "check_contract_phase": [
                    "int",
                    "str",
                    "Optional[float]",
                    "list",
                    "bytes"
                ]
            }
        },
        "EthNode.verify_nodes": {
            "name": "verify_nodes",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "check_contract_phase": [
                    "bool",
                    "Mapping",
                    "str"
                ]
            }
        },
        "EthNode.upload_group_key": {
            "name": "upload_group_key",
            "location": 148,
            "return": [
                "str",
                "int",
                "Sequence[Sequence[Any]]",
                "bytes",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "check_contract_phase": [
                    "List[str]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "EthDKG-master/fc19/client/gas_evaluation.py": {
        "manipulate_share": {
            "name": "manipulate_share",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "node": [
                    "Optional[Any]",
                    "str"
                ],
                "sid": [
                    "raiden.utils.Address"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "num_nodes": [
                    "int",
                    "float",
                    "Union[int, float]",
                    "bool"
                ]
            }
        }
    },
    "EthDKG-master/fc19/client/node.py": {
        "Node.idx": {
            "name": "idx",
            "location": 27,
            "return": [
                "int",
                "str",
                "Union[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "Optional[int]",
                    "Optional[Iterable[str]]",
                    "str",
                    "Mapping",
                    "Optional[List[str]]"
                ],
                "sk_seed": [
                    "Optional[int]",
                    "bool",
                    "Callable[[int], None]",
                    "int",
                    "Optional[Union[Any, Any]]"
                ],
                "pk": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[Sequence[int]]",
                    "Optional[Union[Any, Any]]",
                    "int"
                ],
                "bls_pk": [
                    "Optional[int]",
                    "str",
                    "Optional[bool]",
                    "Optional[float]",
                    "int"
                ],
                "account": [
                    "Optional[str]",
                    "bool",
                    "List[Tuple[str, int]]",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 92,
            "return": [
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.registration_info": {
            "name": "registration_info",
            "location": 101,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.keygen": {
            "name": "keygen",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "seed": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Node.init_secret_sharing": {
            "name": "init_secret_sharing",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "nodes": [
                    "int",
                    "str",
                    "List['Node']",
                    "Tuple[int, int]",
                    "bytes"
                ],
                "id": [
                    "int",
                    "Optional[int]",
                    "List[Optional['Cell']]"
                ],
                "threshold": [
                    "str",
                    "Optional[bool]"
                ]
            }
        },
        "Node.load_shares": {
            "name": "load_shares",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "issuer_id": [
                    "str",
                    "Optional[int]"
                ],
                "encrypted_shares": [
                    "int",
                    "str"
                ],
                "public_coefficients": [
                    "int",
                    "List[crypto.PointG1]",
                    "List[Dict[str, float]]",
                    "List[str]",
                    "List[None]"
                ]
            }
        },
        "Node.load_dispute_infos": {
            "name": "load_dispute_infos",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "disputed_node_ids": [
                    "Set[int]",
                    "int",
                    "dict",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "Node.derive_group_keys": {
            "name": "derive_group_keys",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.sign": {
            "name": "sign",
            "location": 217,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "float"
                ]
            }
        }
    },
    "EthDKG-master/fc19/client/test_bls.py": {
        "test_signing": {
            "name": "test_signing",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_signature_aggregation": {
            "name": "test_signature_aggregation",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_all_to_all_signature_aggregation": {
            "name": "test_all_to_all_signature_aggregation",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "EthDKG-master/fc19/client/test_contract_primitives.py": {
        "test_add": {
            "name": "test_add",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_multiply": {
            "name": "test_multiply",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_check_pairing": {
            "name": "test_check_pairing",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_verify_decryption_key": {
            "name": "test_verify_decryption_key",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_verify_sk_knowledge": {
            "name": "test_verify_sk_knowledge",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "EthDKG-master/fc19/client/test_crypto.py": {
        "test_wrapping": {
            "name": "test_wrapping",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_pairing_check_pyecc": {
            "name": "test_pairing_check_pyecc",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_pairing_check": {
            "name": "test_pairing_check",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "EthDKG-master/fc19/client/test_greeter.py": {
        "test_initial": {
            "name": "test_initial",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_update": {
            "name": "test_update",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_array_parameter": {
            "name": "test_array_parameter",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_revert": {
            "name": "test_revert",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "EthDKG-master/fc19/client/test_interaction.py": {
        "setup_single": {
            "name": "setup_single",
            "location": 15,
            "return": [
                "int",
                "blib2to3.pytree.Node",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {}
        },
        "setup_multiple": {
            "name": "setup_multiple",
            "location": 23,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "num_nodes": [
                    "int",
                    "Sequence[T]"
                ],
                "register": [
                    "Union[pyisy.nodes.Group, pyisy.nodes.Node]",
                    "List[\"Block\"]"
                ]
            }
        },
        "test_registration": {
            "name": "test_registration",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_registration_prohibt_multiple_attemps": {
            "name": "test_registration_prohibt_multiple_attemps",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_registration_prohibt_late_submission": {
            "name": "test_registration_prohibt_late_submission",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_registration_invalid_pk": {
            "name": "test_registration_invalid_pk",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_registration_invalid_bls_pk": {
            "name": "test_registration_invalid_bls_pk",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_registration_invalid_sk_knowledge_proof": {
            "name": "test_registration_invalid_sk_knowledge_proof",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_init_secret_sharing": {
            "name": "test_init_secret_sharing",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sharing": {
            "name": "test_sharing",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sharing_early": {
            "name": "test_sharing_early",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sharing_late": {
            "name": "test_sharing_late",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sharing_non_registered": {
            "name": "test_sharing_non_registered",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_verification_of_valid_shares": {
            "name": "test_verification_of_valid_shares",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "test_dispute": []
            }
        },
        "test_verification_of_invalid_shares": {
            "name": "test_verification_of_invalid_shares",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "test_dispute": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_verification_invalid_encryption_key": {
            "name": "test_verification_invalid_encryption_key",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "test_dispute": [
                    "str",
                    "Iterable[str]",
                    "bool",
                    "Dict[str, Any]",
                    "List[int]"
                ]
            }
        },
        "test_verification_invalid_public_coefficients": {
            "name": "test_verification_invalid_public_coefficients",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {
                "test_dispute": [
                    "str",
                    "List[int]",
                    "bool",
                    "Iterable[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_upload_group_key": {
            "name": "test_upload_group_key",
            "location": 253,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "EthDKG-master/fc19/client/test_node.py": {
        "setup_and_register": {
            "name": "setup_and_register",
            "location": 11,
            "return": [
                "int",
                "blib2to3.pytree.Node",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "test_load_valid_shares": {
            "name": "test_load_valid_shares",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_load_invalid_shares": {
            "name": "test_load_invalid_shares",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_load_invalid_shares_wrong_encryption_key_used": {
            "name": "test_load_invalid_shares_wrong_encryption_key_used",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_load_invalid_shares_public_coefficients_wrong": {
            "name": "test_load_invalid_shares_public_coefficients_wrong",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_load_valid_shares_pk_wrong": {
            "name": "test_load_valid_shares_pk_wrong",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_derive_group_key": {
            "name": "test_derive_group_key",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_derive_group_key_with_dispute": {
            "name": "test_derive_group_key_with_dispute",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_group_signature": {
            "name": "test_group_signature",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "EthDKG-master/fc19/client/test_pairing_lib.py": {
        "test_pairing_python": {
            "name": "test_pairing_python",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test_pairing_python_neg": {
            "name": "test_pairing_python_neg",
            "location": 8,
            "return": [],
            "arguments": {}
        }
    },
    "EthDKG-master/fc19/client/test_testnet_sig.py": {
        "test_verification_of_aggregate_signature": {
            "name": "test_verification_of_aggregate_signature",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "EthDKG-master/fc19/client/test_vss.py": {
        "test_sharing": {
            "name": "test_sharing",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_verification": {
            "name": "test_verification",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_dleq": {
            "name": "test_dleq",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sk_knowledge": {
            "name": "test_sk_knowledge",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sk_knowledge_with_account": {
            "name": "test_sk_knowledge_with_account",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sk_knowledge_invalid_pk": {
            "name": "test_sk_knowledge_invalid_pk",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sk_knowledge_invalid_response": {
            "name": "test_sk_knowledge_invalid_response",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "EthDKG-master/fc19/client/utils.py": {
        "connect": {
            "name": "connect",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "filehash": {
            "name": "filehash",
            "location": 21,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "compile_contract": {
            "name": "compile_contract",
            "location": 26,
            "return": [
                "Mapping",
                "int"
            ],
            "arguments": {
                "contract_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "get_contract": {
            "name": "get_contract",
            "location": 53,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "contract_name": [
                    "bool",
                    "str"
                ],
                "contract_address": [
                    "str",
                    "int",
                    "bool"
                ],
                "patch_api": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "_tx_executor": {
            "name": "_tx_executor",
            "location": 77,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "contract_function": [
                    "Callable"
                ]
            }
        },
        "deploy_contract": {
            "name": "deploy_contract",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "contract_name": [
                    "str"
                ],
                "account": [
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "Optional[List[str]]"
                ],
                "patch_api": [
                    "str",
                    "int"
                ],
                "return_tx_receipt": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "flatten": {
            "name": "flatten",
            "location": 119,
            "return": [
                "List[str]",
                "Optional[dict]",
                "list",
                "Iterable",
                "Tuple[int, int]"
            ],
            "arguments": {
                "list_of_lists": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "get_events": {
            "name": "get_events",
            "location": 123,
            "return": [
                "List[str]",
                "Set[str]",
                "int"
            ],
            "arguments": {
                "contract_instance": [
                    "Callable",
                    "web3.contracContract"
                ],
                "event_name": [
                    "int"
                ],
                "from_block": [
                    "int"
                ],
                "to_block": [
                    "int"
                ]
            }
        },
        "wait_for": {
            "name": "wait_for",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "predicate": [
                    "str",
                    "bool",
                    "int",
                    "List[str]",
                    "Union[int, Tuple[int, int]]",
                    "Optional[int]"
                ],
                "check_interval": [
                    "str",
                    "int",
                    "Dict[str, Callable]"
                ]
            }
        },
        "mine_block": {
            "name": "mine_block",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "mine_blocks": {
            "name": "mine_blocks",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "num_blocks": [
                    "int"
                ]
            }
        },
        "mine_blocks_until": {
            "name": "mine_blocks_until",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "predicate": [
                    "List[\"Block\"]",
                    "int",
                    "str"
                ]
            }
        },
        "blockNumber": {
            "name": "blockNumber",
            "location": 154,
            "return": [
                "str",
                "Type",
                "Iterable[int]"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "func_or_funcs": [
                    "float"
                ],
                "args": []
            }
        },
        "_tx_executor.f": {
            "name": "f",
            "location": 83,
            "return": [
                "str",
                "Dict[str, int]"
            ],
            "arguments": {}
        }
    },
    "EthDKG-master/fc19/client/vss.py": {
        "share": {
            "name": "share",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "secret": [
                    "int",
                    "str",
                    "float",
                    "Type[Exception]"
                ],
                "n": [
                    "int",
                    "Optional[int]",
                    "Sequence[int]"
                ],
                "t": [
                    "int",
                    "str",
                    "float",
                    "Type[Exception]"
                ]
            }
        },
        "verify": {
            "name": "verify",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "share_id": [
                    "int",
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "share": [
                    "int",
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "public_coefficients": [
                    "int",
                    "str",
                    "Optional[float]",
                    "list",
                    "bytes"
                ]
            }
        },
        "recover": {
            "name": "recover",
            "location": 48,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "id_and_share_list": [
                    "int",
                    "float",
                    "bytes",
                    "List[bytes]",
                    "Optional[float]"
                ]
            }
        },
        "recover_point": {
            "name": "recover_point",
            "location": 53,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "id_and_point_list": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "lagrange_coefficient": {
            "name": "lagrange_coefficient",
            "location": 63,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "i": [
                    "int",
                    "str"
                ],
                "ids": [
                    "List[int]",
                    "str",
                    "int"
                ]
            }
        },
        "encrypt_share": {
            "name": "encrypt_share",
            "location": 72,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "share": [
                    "int",
                    "bytes",
                    "Union[int, str]",
                    "str",
                    "Optional[str]"
                ],
                "receiver_id": [
                    "int",
                    "str",
                    "rchain.crypto.PrivateKey"
                ],
                "shared_key": [
                    "str",
                    "bytes",
                    "crypto.PointG1",
                    "List[Tuple[str, int]]"
                ]
            }
        },
        "shared_key": {
            "name": "shared_key",
            "location": 85,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "sk": [
                    "crypto.PointG1",
                    "str",
                    "float",
                    "Optional[int]",
                    "Optional[Dict]"
                ],
                "other_pk": [
                    "crypto.PointG1",
                    "str",
                    "float",
                    "Optional[int]",
                    "Optional[Dict]"
                ]
            }
        },
        "shared_key_proof": {
            "name": "shared_key_proof",
            "location": 92,
            "return": [
                "str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "sk": [
                    "str"
                ],
                "other_pk": [
                    "str",
                    "dict",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "prove_sk_knowledge": {
            "name": "prove_sk_knowledge",
            "location": 101,
            "return": [
                "list",
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "sk": [
                    "int",
                    "float"
                ],
                "pk": [
                    "List[\"Syllable\"]",
                    "List[\"Word\"]"
                ],
                "account": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "List[str]"
                ]
            }
        },
        "verify_sk_knowledge": {
            "name": "verify_sk_knowledge",
            "location": 121,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str",
                "Optional[int]",
                "set"
            ],
            "arguments": {
                "pk": [
                    "Dict[str, Any]",
                    "bytes",
                    "dict"
                ],
                "challenge": [
                    "bytes",
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ],
                "response": [
                    "Dict[str, Any]",
                    "Optional[\"TrackingData\"]",
                    "bytes",
                    "str"
                ],
                "account": [
                    "str",
                    "Optional[str]",
                    "Optional[T]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Any]"
                ]
            }
        },
        "dleq": {
            "name": "dleq",
            "location": 142,
            "return": [
                "list",
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "g1": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable[str]",
                    "T",
                    "int"
                ],
                "h1": [
                    "crypto.PointG1",
                    "Union[int, float]",
                    "Optional[float]",
                    "float",
                    "List['cirq.Qid']"
                ],
                "g2": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable[str]",
                    "T",
                    "int"
                ],
                "h2": [
                    "crypto.PointG1",
                    "Union[int, float]",
                    "Optional[float]",
                    "float",
                    "List['cirq.Qid']"
                ],
                "alpha": [
                    "float",
                    "List[float]",
                    "int"
                ]
            }
        },
        "dleq_verify": {
            "name": "dleq_verify",
            "location": 172,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str",
                "Optional[int]",
                "set"
            ],
            "arguments": {
                "g1": [
                    "bool",
                    "Tuple['cirq.Qid']",
                    "List[Dict[str, Any]]",
                    "Callable",
                    "\"ImageStack\""
                ],
                "h1": [
                    "bool",
                    "Tuple['cirq.Qid']",
                    "List[Dict[str, Any]]",
                    "Callable",
                    "\"ImageStack\""
                ],
                "g2": [
                    "bool",
                    "Tuple['cirq.Qid']",
                    "List[Dict[str, Any]]",
                    "Callable",
                    "\"ImageStack\""
                ],
                "h2": [
                    "bool",
                    "Tuple['cirq.Qid']",
                    "List[Dict[str, Any]]",
                    "Callable",
                    "\"ImageStack\""
                ],
                "challenge": [
                    "str",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "response": [
                    "str",
                    "Dict[str, Any]",
                    "List[dict]"
                ]
            }
        },
        "share.f": {
            "name": "f",
            "location": 23,
            "return": [
                "float",
                "T",
                "List[int]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ]
            }
        },
        "verify.F": {
            "name": "F",
            "location": 37,
            "return": [
                "Tuple[int, Dict[str, Any]]",
                "int",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "x": []
            }
        }
    },
    "EthDKG-master/scripts/kill-ethdkg-processes.py": {},
    "EthDKG-master/scripts/large-scale-launcher.py": {
        "print_stdout": {
            "name": "print_stdout",
            "location": 36,
            "return": [
                "str",
                "list",
                "Sequence[str]",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "bytes",
                    "str"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "Optional[int]",
                    "int",
                    "Optional[bool]",
                    "float",
                    "Optional[float]"
                ]
            }
        },
        "wait_for": {
            "name": "wait_for",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "state": [
                    "int",
                    "bool",
                    "Optional[utils.types.Vec3D]",
                    "List[str]"
                ],
                "batch_size": [
                    "int",
                    "bool"
                ],
                "step": [
                    "List[str]",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "step": {
            "name": "step",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "wait_for.print_progress": {
            "name": "print_progress",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "first_time": [
                    "int",
                    "Sequence[str]",
                    "float",
                    "str",
                    "Callable[[], Any]"
                ]
            }
        }
    }
}
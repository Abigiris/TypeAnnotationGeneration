{
    "Finetooth-master/concerned_testrunner.py": {},
    "Finetooth-master/manage.py": {},
    "Finetooth-master/monkeytype_config.py": {},
    "Finetooth-master/settings.py": {},
    "Finetooth-master/urls.py": {},
    "Finetooth-master/wsgi.py": {},
    "Finetooth-master/__init__.py": {},
    "Finetooth-master/core/colorize.py": {
        "diffract": {
            "name": "diffract",
            "location": 5,
            "return": [
                "bool",
                "int",
                "Tuple[int, int]",
                "tuple",
                "List[str]",
                "Union[List[str], str]"
            ],
            "arguments": {
                "hex_encoding": [
                    "list"
                ]
            }
        },
        "undiffract": {
            "name": "undiffract",
            "location": 8,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "rgb": [
                    "str",
                    "float",
                    "bool",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "interpolate": {
            "name": "interpolate",
            "location": 11,
            "return": [
                "List[str]",
                "str",
                "List[int]",
                "List[Dict]"
            ],
            "arguments": {
                "rgb1": [
                    "bool",
                    "str",
                    "tuple",
                    "float"
                ],
                "rgb2": [
                    "bool",
                    "str",
                    "tuple",
                    "float"
                ],
                "weighting": [
                    "bool",
                    "str",
                    "tuple",
                    "float"
                ]
            }
        },
        "interpolate_stop": {
            "name": "interpolate_stop",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "color_stops": [
                    "List[Tuple[Any, Any]]",
                    "List[tuple]",
                    "Iterable[int]"
                ],
                "x": [
                    "int"
                ]
            }
        },
        "populate_stops": {
            "name": "populate_stops",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "color_stops": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "T",
                    "int"
                ]
            }
        },
        "style_block": {
            "name": "style_block",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "data_attribute": [
                    "str",
                    "List[Tuple[int, str]]",
                    "bytes",
                    "float"
                ],
                "style_property": [
                    "str",
                    "List[Tuple[int, str]]",
                    "bytes",
                    "float"
                ],
                "state": [
                    "str",
                    "List[Tuple[int, str]]",
                    "bytes",
                    "float"
                ],
                "color": [
                    "str",
                    "List[Tuple[int, str]]",
                    "bytes",
                    "float"
                ]
            }
        },
        "value_style_block": {
            "name": "value_style_block",
            "location": 44,
            "return": [
                "str",
                "int",
                "Exception"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "color": [
                    "bool",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "mark_style_block": {
            "name": "mark_style_block",
            "location": 47,
            "return": [
                "Sequence['cirq.Qid']",
                "int"
            ],
            "arguments": {
                "mark": [
                    "IO"
                ],
                "color": [
                    "IO"
                ]
            }
        },
        "stylesheet": {
            "name": "stylesheet",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "low_score": [
                    "dict",
                    "bytes",
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "low_color": [
                    "dict",
                    "bytes",
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "high_score": [
                    "dict",
                    "bytes",
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "high_color": [
                    "dict",
                    "bytes",
                    "str",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        }
    },
    "Finetooth-master/core/context_processors.py": {
        "tag_cloud_context_processor": {
            "name": "tag_cloud_context_processor",
            "location": 15,
            "return": [
                "bytes",
                "int",
                "bool",
                "Optional[str]",
                "models.Project",
                "list",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.db.models.Model",
                    "django.http.requesHttpRequest",
                    "django.http.HttpRequest"
                ]
            }
        },
        "sidebar_login_form_context_processor": {
            "name": "sidebar_login_form_context_processor",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "monthly_archives_context_processor": {
            "name": "monthly_archives_context_processor",
            "location": 21,
            "return": [
                "str",
                "Iterable[int]",
                "List[str]",
                "Callable"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "contextual_static_serving_context_processor": {
            "name": "contextual_static_serving_context_processor",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        }
    },
    "Finetooth-master/core/feeds.py": {
        "LatestAbstractContentFeed.items": {
            "name": "items",
            "location": 8,
            "return": [
                "str",
                "float",
                "core.audio.audio_backend.AudioBackend",
                "bool",
                "Callable",
                "zerver.models.Realm",
                "core.models.Ingredient"
            ],
            "arguments": {
                "self": []
            }
        },
        "LatestAbstractContentFeed.item_title": {
            "name": "item_title",
            "location": 11,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "List[tracim.models.data.Content]",
                    "bytearray",
                    "Iterable[str]"
                ]
            }
        },
        "LatestAbstractContentFeed.item_description": {
            "name": "item_description",
            "location": 14,
            "return": [
                "str",
                "List[str]",
                "Mapping[str, Any]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "List[tracim.models.data.Content]",
                    "Dict[str, str]",
                    "bytes",
                    "dict"
                ]
            }
        },
        "LatestAbstractContentFeed.item_pubdate": {
            "name": "item_pubdate",
            "location": 17,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "List[tracim.models.data.Content]",
                    "bytearray",
                    "Iterable[str]"
                ]
            }
        },
        "AbstractUserContentFeed.get_object": {
            "name": "get_object",
            "location": 28,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "Dict[str, str]",
                    "dict"
                ],
                "username": [
                    "Iterable[boyleworkflow.core.Comp]"
                ]
            }
        },
        "AbstractUserContentFeed.title": {
            "name": "title",
            "location": 31,
            "return": [
                "str",
                "audiopyle.lib.models.file_meta.CompressedAudioFileMeta",
                "Set[str]",
                "Tuple[str]",
                "topicdb.core.models.language.Language"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Dict[str, Any]",
                    "models.User",
                    "dict",
                    "tracim.models.auth.User"
                ]
            }
        },
        "AbstractUserContentFeed.link": {
            "name": "link",
            "location": 35,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Dict[str, Dict[str, Any]]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "AbstractUserContentFeed.description": {
            "name": "description",
            "location": 39,
            "return": [
                "str",
                "Optional[str]",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Dict[str, Any]",
                    "medtagger.database.models.Task",
                    "users.models.JustfixUser",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "AbstractUserContentFeed.items": {
            "name": "items",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "accounts.models.Account"
                ]
            }
        },
        "TagFeed.get_object": {
            "name": "get_object",
            "location": 60,
            "return": [
                "str",
                "int",
                "bool",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "str",
                    "List[Tuple[str, str]]"
                ],
                "label": [
                    "deeplearning.ml4pl.models.log_database.Database",
                    "dict",
                    "django.contrib.auth.models.AbstractUser"
                ]
            }
        },
        "TagFeed.title": {
            "name": "title",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "bytes",
                    "bool",
                    "Tuple[str]"
                ]
            }
        },
        "TagFeed.link": {
            "name": "link",
            "location": 66,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "TagFeed.description": {
            "name": "description",
            "location": 69,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "TagFeed.items": {
            "name": "items",
            "location": 72,
            "return": [
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Union[str, Callable]",
                    "types.core.OpenHeadersArg"
                ]
            }
        }
    },
    "Finetooth-master/core/forms.py": {
        "CommentForm.clean_content": {
            "name": "clean_content",
            "location": 12,
            "return": [
                "str",
                "Optional[Callable[..., Any]]",
                "tartare.core.models.Contributor"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignupForm.clean_confirm_password": {
            "name": "clean_confirm_password",
            "location": 24,
            "return": [
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Finetooth-master/core/middleware.py": {
        "FinetoothEnvironmentMiddleware.process_request": {
            "name": "process_request",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        }
    },
    "Finetooth-master/core/models.py": {
        "FinetoothUser.post_karma": {
            "name": "post_karma",
            "location": 13,
            "return": [
                "List[Dict[str, Any]]",
                "zerver.models.Realm",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FinetoothUser.comment_karma": {
            "name": "comment_karma",
            "location": 16,
            "return": [
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FinetoothUser.karma": {
            "name": "karma",
            "location": 19,
            "return": [
                "str",
                "int",
                "core.models.Ingredient",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 35,
            "return": [
                "str",
                "Dict[str, str]",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.__str__": {
            "name": "__str__",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.month": {
            "name": "month",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.year": {
            "name": "year",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.vote_set": {
            "name": "vote_set",
            "location": 50,
            "return": [
                "str",
                "Set[str]",
                "int",
                "Callable[[str, str], float]",
                "Optional[str]",
                "MutableSequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comment.__str__": {
            "name": "__str__",
            "location": 64,
            "return": [
                "str",
                "daylighdb.models.Profile",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comment.get_absolute_url": {
            "name": "get_absolute_url",
            "location": 67,
            "return": [
                "str",
                "socialhome.users.models.Profile",
                "int",
                "dict",
                "Optional[int]",
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comment.title": {
            "name": "title",
            "location": 75,
            "return": [
                "Callable",
                "Tuple[Any, Any, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Comment.vote_set": {
            "name": "vote_set",
            "location": 81,
            "return": [
                "str",
                "Set[str]",
                "int",
                "Callable[[str, str], float]",
                "Optional[str]",
                "MutableSequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PostVote.__str__": {
            "name": "__str__",
            "location": 97,
            "return": [
                "str",
                "int",
                "List[django.db.models.query.QuerySet]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "CommentVote.__str__": {
            "name": "__str__",
            "location": 103,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tag.__str__": {
            "name": "__str__",
            "location": 111,
            "return": [
                "str",
                "int",
                "List[List[str]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Finetooth-master/core/signals.py": {
        "log_failed_login": {
            "name": "log_failed_login",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "sender": [
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "Finetooth-master/core/votable.py": {
        "Tagnostic.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Tagnostic.handle_starttag": {
            "name": "handle_starttag",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "List[str]",
                    "Set[str]",
                    "str",
                    "int",
                    "list",
                    "dict"
                ],
                "attrs": [
                    "List[str]",
                    "Set[str]",
                    "str",
                    "int",
                    "list",
                    "dict"
                ]
            }
        },
        "Tagnostic.handle_endtag": {
            "name": "handle_endtag",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ]
            }
        },
        "Tagnostic.handle_data": {
            "name": "handle_data",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "float",
                    "raiden.utils.List[str]",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "str",
                    "list"
                ]
            }
        },
        "Tagnostic.plaintext": {
            "name": "plaintext",
            "location": 30,
            "return": [
                "list",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "VotableMixin.score": {
            "name": "score",
            "location": 43,
            "return": [
                "Optional[dict]",
                "int",
                "str",
                "List[str]",
                "Sequence[int]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "VotableMixin.plaintext": {
            "name": "plaintext",
            "location": 47,
            "return": [
                "str",
                "bytes",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VotableMixin.scored_plaintext": {
            "name": "scored_plaintext",
            "location": 50,
            "return": [
                "dict",
                "Set[cmk.utils.type_defs.HostName]",
                "int",
                "Optional[float]",
                "Sequence['cirq.Qid']",
                "Union[shap.utils._legacy.Data, pandas.DataFrame, numpy.ndarray, scipy.sparse.spmatrix]"
            ],
            "arguments": {
                "self": [],
                "for_voter": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "VotableMixin._render_scored_substring": {
            "name": "_render_scored_substring",
            "location": 65,
            "return": [
                "int",
                "str",
                "ajapaik.ajapaik.models.Album"
            ],
            "arguments": {
                "scored_characters": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "VotableMixin.render": {
            "name": "render",
            "location": 88,
            "return": [
                "int",
                "str",
                "ajapaik.ajapaik.models.Album"
            ],
            "arguments": {
                "self": []
            }
        },
        "VotableMixin.low_score": {
            "name": "low_score",
            "location": 118,
            "return": [
                "int",
                "Optional[dict]",
                "Sequence[int]",
                "Counter",
                "str",
                "raiden.utils.List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VotableMixin.high_score": {
            "name": "high_score",
            "location": 121,
            "return": [
                "int",
                "Optional[dict]",
                "Sequence[int]",
                "Counter",
                "str",
                "raiden.utils.List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VotableMixin.vote_in_range_for_user": {
            "name": "vote_in_range_for_user",
            "location": 124,
            "return": [
                "str",
                "bool",
                "int",
                "Type",
                "float"
            ],
            "arguments": {
                "self": [],
                "voter": [
                    "int",
                    "str"
                ],
                "ballot_start_index": [
                    "int",
                    "str"
                ],
                "ballot_end_index": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "Finetooth-master/core/__init__.py": {
        "FinetoothConfig.ready": {
            "name": "ready",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Finetooth-master/core/management/commands/download_statics.py": {
        "Command.handle": {
            "name": "handle",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Finetooth-master/core/migrations/0001_initial.py": {},
    "Finetooth-master/core/migrations/__init__.py": {},
    "Finetooth-master/core/tests/color_tests.py": {
        "ColorTestCase.concerning_diffraction": {
            "name": "concerning_diffraction",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColorTestCase.concerning_undiffraction": {
            "name": "concerning_undiffraction",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColorTestCase.concerning_interpolation": {
            "name": "concerning_interpolation",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ColorTestCase.concerning_stop_interpolation": {
            "name": "concerning_stop_interpolation",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StyleTestCase.concerning_stop_population": {
            "name": "concerning_stop_population",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Finetooth-master/core/tests/factories.py": {
        "romanize": {
            "name": "romanize",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "Finetooth-master/core/tests/test.py": {},
    "Finetooth-master/core/tests/view_tests.py": {
        "SignupTestCase.concerning_signup": {
            "name": "concerning_signup",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignupTestCase.concerning_the_inability_to_claim_extant_usernames": {
            "name": "concerning_the_inability_to_claim_extant_usernames",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignupTestCase.concerning_confirm_passwords_needing_to_match": {
            "name": "concerning_confirm_passwords_needing_to_match",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignupTestCase.concerning_required_fields": {
            "name": "concerning_required_fields",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TaggingTestCase.setUpTestData": {
            "name": "setUpTestData",
            "location": 71,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "TaggingTestCase.setUp": {
            "name": "setUp",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TaggingTestCase.concerning_users_tagging_their_own_posts": {
            "name": "concerning_users_tagging_their_own_posts",
            "location": 84,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TaggingTestCase.concerning_users_inability_to_tag_posts_of_others": {
            "name": "concerning_users_inability_to_tag_posts_of_others",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TaggingTestCase.concerning_prohibition_of_double_tagging": {
            "name": "concerning_prohibition_of_double_tagging",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommentingTestCase.setUpTestData": {
            "name": "setUpTestData",
            "location": 114,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "CommentingTestCase.concerning_comment_submission": {
            "name": "concerning_comment_submission",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommentingTestCase.concerning_html_injection": {
            "name": "concerning_html_injection",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CommentingTestCase.concerning_blank_comment_submissions": {
            "name": "concerning_blank_comment_submissions",
            "location": 149,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BallotBoxTestCase.setUpTestData": {
            "name": "setUpTestData",
            "location": 163,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "BallotBoxTestCase.concerning_suffrage": {
            "name": "concerning_suffrage",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BallotBoxTestCase.concerning_suffrage_of_undocumented_immigrants": {
            "name": "concerning_suffrage_of_undocumented_immigrants",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BallotBoxTestCase.concerning_hanging_chads": {
            "name": "concerning_hanging_chads",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BallotBoxTestCase.concerning_the_principle_of_one_user_one_vote": {
            "name": "concerning_the_principle_of_one_user_one_vote",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProfileTestCase.setUpTestData": {
            "name": "setUpTestData",
            "location": 218,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "ProfileTestCase.concerning_nonexistent_users": {
            "name": "concerning_nonexistent_users",
            "location": 226,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProfileTestCase.concerning_profile_editing": {
            "name": "concerning_profile_editing",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ProfileTestCase.concerning_editing_the_profiles_of_others": {
            "name": "concerning_editing_the_profiles_of_others",
            "location": 247,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PostTestCase.setUpTestData": {
            "name": "setUpTestData",
            "location": 260,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "PostTestCase.setUp": {
            "name": "setUp",
            "location": 265,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PostTestCase.concerning_new_posts": {
            "name": "concerning_new_posts",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PaginationTestCase.setUpTestData": {
            "name": "setUpTestData",
            "location": 287,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "PaginationTestCase.concerning_pagination": {
            "name": "concerning_pagination",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Finetooth-master/core/tests/votable_tests.py": {
        "TagnosticismTestCase.setUpTestData": {
            "name": "setUpTestData",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TagnosticismTestCase.concerning_feeding": {
            "name": "concerning_feeding",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TagnosticismTestCase.concerning_plaintext": {
            "name": "concerning_plaintext",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ScoringTestCase.setUpTestData": {
            "name": "setUpTestData",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ScoringTestCase.concerning_scored_plaintext": {
            "name": "concerning_scored_plaintext",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RenderingTestCase.setUpTestData": {
            "name": "setUpTestData",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RenderingTestCase.concerning_rendering": {
            "name": "concerning_rendering",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Finetooth-master/core/tests/__init__.py": {},
    "Finetooth-master/core/views/service.py": {
        "serve_stylesheet": {
            "name": "serve_stylesheet",
            "location": 17,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, dict]",
                "str",
                "bool"
            ],
            "arguments": {
                "request": [
                    "bool"
                ],
                "low_score": [
                    "django.http.HttpRequest",
                    "int",
                    "django.db.models.query.QuerySet",
                    "preacher.core.verification.ResponseDescription",
                    "preacher.core.requesRequest",
                    "str"
                ],
                "low_color": [
                    "django.http.HttpRequest",
                    "int",
                    "django.db.models.query.QuerySet",
                    "preacher.core.verification.ResponseDescription",
                    "preacher.core.requesRequest",
                    "str"
                ],
                "high_score": [
                    "django.http.HttpRequest",
                    "int",
                    "django.db.models.query.QuerySet",
                    "preacher.core.verification.ResponseDescription",
                    "preacher.core.requesRequest",
                    "str"
                ],
                "high_color": [
                    "django.http.HttpRequest",
                    "int",
                    "django.db.models.query.QuerySet",
                    "preacher.core.verification.ResponseDescription",
                    "preacher.core.requesRequest",
                    "str"
                ]
            }
        },
        "tag": {
            "name": "tag",
            "location": 25,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ],
                "post_pk": [
                    "str",
                    "Optional[str]",
                    "int",
                    "django.http.HttpRequest"
                ]
            }
        },
        "ballot_box": {
            "name": "ballot_box",
            "location": 44,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]",
                "Tuple[str, Optional[int]]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ],
                "kind": [
                    "int",
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "Dict[int, zam_repondeur.models.Amendement]",
                    "requests_mock.response._Context"
                ],
                "pk": [
                    "int",
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "Dict[int, zam_repondeur.models.Amendement]",
                    "requests_mock.response._Context"
                ]
            }
        },
        "check_slug": {
            "name": "check_slug",
            "location": 63,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "guillotina.response.Response",
                "Iterable[Tuple[str, int]]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "Finetooth-master/core/views/views.py": {
        "home": {
            "name": "home",
            "location": 36,
            "return": [
                "str",
                "dict",
                "trezor.messages.MoneroTransactionRsigData.MoneroTransactionRsigData"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ],
                "page_number": [
                    "bool"
                ]
            }
        },
        "sign_up": {
            "name": "sign_up",
            "location": 47,
            "return": [
                "str",
                "bool",
                "int",
                "Dict[str, Any]",
                "zerver.models.Realm"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "logout_view": {
            "name": "logout_view",
            "location": 70,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Union[str, Dict]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "Callable"
                ]
            }
        },
        "show_post": {
            "name": "show_post",
            "location": 77,
            "return": [
                "zerver.models.Realm",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ],
                "year": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "month": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "slug": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "new_post": {
            "name": "new_post",
            "location": 117,
            "return": [
                "core.models.Recipe",
                "zerver.models.UserProfile",
                "str"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "tagged": {
            "name": "tagged",
            "location": 147,
            "return": [
                "str",
                "int",
                "Optional[bytes]",
                "Optional[str]",
                "Optional[Any]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "request": [
                    "str",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile"
                ],
                "label": [
                    "dict",
                    "Optional[str]",
                    "Optional[Mapping[str, Any]]",
                    "Callable[..., Awaitable[dict]]",
                    "str",
                    "Optional[django.http.HttpRequest]"
                ],
                "page_number": [
                    "str",
                    "list"
                ]
            }
        },
        "add_comment": {
            "name": "add_comment",
            "location": 157,
            "return": [
                "str",
                "bool",
                "models.transaction.EndorsedTX",
                "dict"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "zam_repondeur.models.Lecture"
                ],
                "post_pk": [
                    "django.http.HttpRequest",
                    "django.db.models.query.QuerySet",
                    "zam_repondeur.models.Amendement",
                    "asgard.models.job.ScheduledJob",
                    "asgard.models.user.User",
                    "asgard.models.accounAccount",
                    "zam_repondeur.models.Team"
                ]
            }
        },
        "show_profile": {
            "name": "show_profile",
            "location": 175,
            "return": [
                "str",
                "bool",
                "int",
                "Dict[str, Any]",
                "zerver.models.Realm"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ],
                "username": [
                    "django.db.models.query.QuerySet",
                    "zerver.models.UserProfile",
                    "str",
                    "django.db.models.QuerySet",
                    "bool"
                ]
            }
        },
        "edit_profile": {
            "name": "edit_profile",
            "location": 188,
            "return": [
                "str",
                "List[str]",
                "Union[str, Dict]",
                "salon.models.Stylist"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ],
                "username": [
                    "int",
                    "django.http.HttpRequest",
                    "googleapiclienhttp.HttpRequest",
                    "Dict[str, Any]"
                ]
            }
        },
        "MonthlyArchive.get_queryset": {
            "name": "get_queryset",
            "location": 97,
            "return": [
                "str",
                "Callable",
                "Iterable[int]",
                "models.Route",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MonthlyArchive.get_context_data": {
            "name": "get_context_data",
            "location": 110,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Finetooth-master/core/views/view_utils.py": {
        "score_bound_context_supplement": {
            "name": "score_bound_context_supplement",
            "location": 18,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "scorables": [
                    "float",
                    "List[List[int]]",
                    "int"
                ]
            }
        },
        "scored_view": {
            "name": "scored_view",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "scorable_key": [
                    "str",
                    "core.models.GroupingKey",
                    "Callable"
                ]
            }
        },
        "paginated_view": {
            "name": "paginated_view",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "pageable_name": [
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Iterable[float]",
                    "Any",
                    "Optional[Callable]",
                    "int"
                ]
            }
        },
        "thread_sorting_view": {
            "name": "thread_sorting_view",
            "location": 88,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "view": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "tag_cloud_context": {
            "name": "tag_cloud_context",
            "location": 114,
            "return": [
                "Dict[str, Any]",
                "Mapping[str, Any]",
                "dict",
                "Dict[int, str]",
                "Mapping[int, str]",
                "Mapping[str, str]",
                "str"
            ],
            "arguments": {
                "tags": [
                    "django.db.models.query.QuerySet",
                    "Iterable[str]",
                    "str",
                    "Set[str]",
                    "Optional[str]"
                ]
            }
        },
        "scored_view.derived_decorator": {
            "name": "derived_decorator",
            "location": 31,
            "return": [],
            "arguments": {
                "view": []
            }
        },
        "paginated_view.derived_decorator": {
            "name": "derived_decorator",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "view": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "thread_sorting_view.derived_view": {
            "name": "derived_view",
            "location": 90,
            "return": [
                "Optional[str]",
                "float",
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {}
        },
        "tag_cloud_context.font_size": {
            "name": "font_size",
            "location": 122,
            "return": [
                "float",
                "Callable",
                "models.characters.states.AttributeType",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "count": [
                    "int",
                    "str",
                    "List[int]",
                    "Tuple[int]",
                    "List[Tuple[int, ...]]"
                ]
            }
        },
        "scored_view.derived_decorator.derived_view": {
            "name": "derived_view",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "paginated_view.derived_decorator.derived_view": {
            "name": "derived_view",
            "location": 47,
            "return": [],
            "arguments": {}
        }
    },
    "Finetooth-master/core/views/__init__.py": {}
}
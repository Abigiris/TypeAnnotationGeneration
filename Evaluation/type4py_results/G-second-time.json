{
    "G-second-time/bot_vs_bot.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "G-second-time/eval_pg_bot.py": {
        "avg": {
            "name": "avg",
            "location": 21,
            "return": [
                "int",
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "items": [
                    "list",
                    "List[int]",
                    "List[str]",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "print_board": {
            "name": "print_board",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "board": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "name": {
            "name": "name",
            "location": 41,
            "return": [
                "Callable[[str, T], None]",
                "bytes",
                "str",
                "int"
            ],
            "arguments": {
                "player": [
                    "Dict[str, Any]",
                    "str",
                    "int",
                    "Iterator",
                    "Container[str]"
                ]
            }
        },
        "simulate_game": {
            "name": "simulate_game",
            "location": 47,
            "return": [
                "str",
                "list",
                "List[Dict[str, Any]]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "black_player": [
                    "int",
                    "type"
                ],
                "white_player": [
                    "int",
                    "type"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "G-second-time/generate_mcts_games.py": {
        "generate_game": {
            "name": "generate_game",
            "location": 10,
            "return": [
                "int",
                "type"
            ],
            "arguments": {
                "board_size": [
                    "int",
                    "List[List[int]]"
                ],
                "rounds": [
                    "Tuple[int, int]",
                    "int",
                    "float"
                ],
                "max_moves": [
                    "int"
                ],
                "temperature": [
                    "Tuple[int, int]",
                    "int",
                    "float"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "G-second-time/generate_zobrist.py": {
        "to_python": {
            "name": "to_python",
            "location": 6,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "player_state": []
            }
        }
    },
    "G-second-time/gtp.py": {},
    "G-second-time/init_ac_agent.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "G-second-time/init_agent.py": {},
    "G-second-time/init_q_agent.py": {
        "main": {
            "name": "main",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "G-second-time/kerasutils.py": {
        "save_model_to_hdf5_group": {
            "name": "save_model_to_hdf5_group",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "model": [
                    "str",
                    "int"
                ],
                "f": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Union[Callable, str]"
                ]
            }
        },
        "load_model_from_hdf5_group": {
            "name": "load_model_from_hdf5_group",
            "location": 25,
            "return": [
                "Union[int, float, complex]",
                "Optional[str]",
                "Dict[str, zam_repondeur.models.Amendement]",
                "List[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "f": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "List[str]",
                    "int",
                    "Dict[str, Any]"
                ],
                "custom_objects": [
                    "abilian.services.security.models.Permission",
                    "abilian.services.security.models.Role",
                    "zerver.models.UserProfile",
                    "str"
                ]
            }
        },
        "set_gpu_memory_target": {
            "name": "set_gpu_memory_target",
            "location": 43,
            "return": [
                "tensorflow.Tensor",
                "Union[tuple, list]",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "frac": [
                    "bool",
                    "int",
                    "str",
                    "dict"
                ]
            }
        }
    },
    "G-second-time/load.py": {},
    "G-second-time/model_from_checkpoint.py": {},
    "G-second-time/parralel_self_play.py": {
        "avg": {
            "name": "avg",
            "location": 27,
            "return": [
                "int",
                "numpy.ndarray",
                "str",
                "bool",
                "float",
                "Optional[numpy.ndarray]"
            ],
            "arguments": {
                "items": [
                    "list",
                    "List[int]",
                    "List[str]",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "print_board": {
            "name": "print_board",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "board": [
                    "int",
                    "bytes",
                    "List[str]",
                    "random.Random"
                ]
            }
        },
        "name": {
            "name": "name",
            "location": 47,
            "return": [
                "Callable[[str, T], None]",
                "bytes",
                "str",
                "int"
            ],
            "arguments": {
                "player": [
                    "Dict[str, Any]",
                    "str",
                    "int",
                    "Iterator",
                    "Container[str]"
                ]
            }
        },
        "simulate_game": {
            "name": "simulate_game",
            "location": 53,
            "return": [
                "str",
                "list",
                "List[Dict[str, Any]]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "black_player": [
                    "float",
                    "Tuple[numpy.dtype]"
                ],
                "white_player": [
                    "float",
                    "Tuple[numpy.dtype]"
                ],
                "board_size": [
                    "bool",
                    "int"
                ]
            }
        },
        "get_temp_file": {
            "name": "get_temp_file",
            "location": 76,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "do_self_play": {
            "name": "do_self_play",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "board_size": [
                    "bool",
                    "int"
                ],
                "agent_filename": [
                    "str",
                    "Tuple[int, int]"
                ],
                "num_games": [
                    "int",
                    "bool",
                    "Tuple[int, int]"
                ],
                "temperature": [
                    "str",
                    "numpy.ndarray",
                    "Final",
                    "bool",
                    "int"
                ],
                "experience_filename": [
                    "str",
                    "Union[str, os.PathLike]",
                    "Optional[float]",
                    "Dict[str, str]",
                    "bool",
                    "int"
                ],
                "gpu_frac": [
                    "str",
                    "int",
                    "bool",
                    "FrozenSet"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "G-second-time/play_local.py": {},
    "G-second-time/play_train_ac.py": {
        "load_agent": {
            "name": "load_agent",
            "location": 21,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "avg": {
            "name": "avg",
            "location": 35,
            "return": [
                "int",
                "numpy.ndarray",
                "str",
                "bool",
                "float",
                "Optional[numpy.ndarray]"
            ],
            "arguments": {
                "items": [
                    "list",
                    "List[int]",
                    "List[str]",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "print_board": {
            "name": "print_board",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "board": [
                    "int",
                    "bytes",
                    "List[str]",
                    "random.Random"
                ]
            }
        },
        "name": {
            "name": "name",
            "location": 55,
            "return": [
                "Callable[[str, T], None]",
                "bytes",
                "str",
                "int"
            ],
            "arguments": {
                "player": [
                    "Dict[str, Any]",
                    "str",
                    "int",
                    "Iterator",
                    "Container[str]"
                ]
            }
        },
        "simulate_game": {
            "name": "simulate_game",
            "location": 61,
            "return": [
                "str",
                "list",
                "List[Dict[str, Any]]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "black_player": [
                    "float",
                    "Tuple[numpy.dtype]"
                ],
                "white_player": [
                    "float",
                    "Tuple[numpy.dtype]"
                ],
                "board_size": [
                    "bool",
                    "int"
                ]
            }
        },
        "get_temp_file": {
            "name": "get_temp_file",
            "location": 92,
            "return": [
                "str",
                "datetime.datetime",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "do_self_play": {
            "name": "do_self_play",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "board_size": [
                    "bool",
                    "int",
                    "float",
                    "Optional[str]",
                    "str",
                    "Set[str]"
                ],
                "agent1_filename": [
                    "int",
                    "float",
                    "Iterable[Iterable]",
                    "Iterable",
                    "bool"
                ],
                "agent2_filename": [
                    "int",
                    "float",
                    "Iterable[Iterable]",
                    "Iterable",
                    "bool"
                ],
                "num_games": [
                    "int",
                    "bool",
                    "Tuple[int, int]"
                ],
                "experience_filename": [
                    "str",
                    "Union[str, os.PathLike]",
                    "bool",
                    "Dict[str, str]"
                ],
                "gpu_frac": [
                    "str",
                    "int",
                    "bool",
                    "FrozenSet"
                ]
            }
        },
        "generate_experience": {
            "name": "generate_experience",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "learning_agent": [
                    "bool",
                    "int",
                    "bytes",
                    "str",
                    "numpy.ndarray"
                ],
                "reference_agent": [
                    "bool",
                    "int",
                    "bytes",
                    "str",
                    "numpy.ndarray"
                ],
                "exp_file": [
                    "str",
                    "List[str]",
                    "bool",
                    "Callable[[float], None]",
                    "int"
                ],
                "num_games": [
                    "int",
                    "Dict[str, str]",
                    "Optional[float]"
                ],
                "board_size": [
                    "bool",
                    "int",
                    "bytes",
                    "str",
                    "numpy.ndarray"
                ],
                "num_workers": [
                    "int",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "train_worker": {
            "name": "train_worker",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "learning_agent": [
                    "int",
                    "float",
                    "bool"
                ],
                "output_file": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "experience_file": [
                    "str",
                    "Union[str, bytes, int]",
                    "Union[str, os.PathLike]",
                    "bool",
                    "List[str]",
                    "List[Tuple[str, str, str]]"
                ],
                "lr": [
                    "int",
                    "bool",
                    "str"
                ],
                "batch_size": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "train_on_experience": {
            "name": "train_on_experience",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "learning_agent": [
                    "str",
                    "bool",
                    "Callable[[str], str]",
                    "List[str]",
                    "Dict[str, str]",
                    "Optional[int]"
                ],
                "output_file": [
                    "str",
                    "bool",
                    "Callable[[str], str]",
                    "List[str]",
                    "Dict[str, str]",
                    "Optional[int]"
                ],
                "experience_file": [
                    "str",
                    "bool",
                    "Callable[[str], str]",
                    "List[str]",
                    "Dict[str, str]",
                    "Optional[int]"
                ],
                "lr": [
                    "str",
                    "bool",
                    "Callable[[str], str]",
                    "List[str]",
                    "Dict[str, str]",
                    "Optional[int]"
                ],
                "batch_size": [
                    "str",
                    "bool",
                    "Callable[[str], str]",
                    "List[str]",
                    "Dict[str, str]",
                    "Optional[int]"
                ]
            }
        },
        "play_games": {
            "name": "play_games",
            "location": 214,
            "return": [
                "str",
                "int",
                "List[str]",
                "datetime.timedelta"
            ],
            "arguments": {
                "args": []
            }
        },
        "evaluate": {
            "name": "evaluate",
            "location": 245,
            "return": [
                "bool",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "learning_agent": [
                    "int",
                    "float",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray"
                ],
                "reference_agent": [
                    "int",
                    "float",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray"
                ],
                "num_games": [
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "num_workers": [
                    "int",
                    "str",
                    "numpy.ndarray"
                ],
                "board_size": [
                    "int",
                    "float",
                    "Optional[numpy.ndarray]",
                    "numpy.ndarray"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 271,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "G-second-time/self_play.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "G-second-time/test_samples.py": {},
    "G-second-time/train_generator.py": {},
    "G-second-time/train_generator_plus.py": {},
    "G-second-time/train_pg.py": {
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "G-second-time/train_plus.py": {},
    "G-second-time/web.py": {},
    "G-second-time/dlgo/goboard.py": {
        "Move.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "point": [
                    "Optional[Tuple[float, float]]",
                    "bool",
                    "Optional[Union[float, Any]]",
                    "Optional[dlgo.gotypes.Point]",
                    "Optional[bool]",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "is_pass": [
                    "bool",
                    "Optional[Tuple[float, float]]",
                    "Optional[bool]",
                    "Optional[Type[Any]]",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "is_resign": [
                    "bool",
                    "Optional[Tuple[float, float]]",
                    "Optional[bool]",
                    "Optional[Type[Any]]",
                    "Optional[int]",
                    "Optional[float]"
                ]
            }
        },
        "Move.play": {
            "name": "play",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "point": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        },
        "Move.pass_turn": {
            "name": "pass_turn",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Move.resign": {
            "name": "resign",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "GoString.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "color": [
                    "int",
                    "bool",
                    "float"
                ],
                "stones": [
                    "int",
                    "bool",
                    "float"
                ],
                "liberties": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "GoString.without_liberty": {
            "name": "without_liberty",
            "location": 34,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "list",
                    "List[int]",
                    "str",
                    "float"
                ]
            }
        },
        "GoString.with_liberty": {
            "name": "with_liberty",
            "location": 38,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "list",
                    "List[int]",
                    "str",
                    "float"
                ]
            }
        },
        "GoString.merged_with": {
            "name": "merged_with",
            "location": 42,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "go_string": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "GoString.num_liberties": {
            "name": "num_liberties",
            "location": 49,
            "return": [
                "int",
                "str",
                "deque"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoString.__eq__": {
            "name": "__eq__",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T"
                ]
            }
        },
        "GoString.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 57,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "memodict": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Board.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "num_rows": [
                    "int"
                ],
                "nums_cols": [
                    "int",
                    "float",
                    "Iterable[Iterable]",
                    "Iterable"
                ]
            }
        },
        "Board.place_stone": {
            "name": "place_stone",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "player": [
                    "dlgo.gotypes.Player",
                    "int"
                ],
                "point": [
                    "bool",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "Board._replace_string": {
            "name": "_replace_string",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "new_string": [
                    "str",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "Board._remove_string": {
            "name": "_remove_string",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ]
            }
        },
        "Board.is_on_grid": {
            "name": "is_on_grid",
            "location": 119,
            "return": [
                "int",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "int",
                    "List[int]",
                    "float",
                    "str",
                    "List[float]"
                ]
            }
        },
        "Board.get": {
            "name": "get",
            "location": 122,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "int",
                    "Dict[str, bool]",
                    "str"
                ]
            }
        },
        "Board.get_go_string": {
            "name": "get_go_string",
            "location": 128,
            "return": [
                "Optional[int]",
                "bool",
                "str",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "int",
                    "Exception",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, bool]"
                ]
            }
        },
        "Board.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 134,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "memodict": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Board.zobrist_hash": {
            "name": "zobrist_hash",
            "location": 142,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.__init__": {
            "name": "__init__",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "board": [
                    "int"
                ],
                "next_player": [
                    "int"
                ],
                "previous_state": [],
                "move": [
                    "str",
                    "Tuple[int, int]",
                    "int",
                    "Optional[str]",
                    "float",
                    "list"
                ]
            }
        },
        "GameState.situation": {
            "name": "situation",
            "location": 160,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.apply_move": {
            "name": "apply_move",
            "location": 163,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "move": [
                    "int"
                ]
            }
        },
        "GameState.new_game": {
            "name": "new_game",
            "location": 172,
            "return": [
                "bool",
                "str",
                "Tuple[int, int]",
                "int",
                "Optional[List[str]]"
            ],
            "arguments": {
                "cls": [
                    "bool"
                ],
                "board_size": [
                    "int",
                    "float",
                    "Tuple[float, float]",
                    "list"
                ]
            }
        },
        "GameState.is_over": {
            "name": "is_over",
            "location": 178,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.is_move_self_capture": {
            "name": "is_move_self_capture",
            "location": 190,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "str",
                    "dlgo.gotypes.Player",
                    "int"
                ],
                "move": []
            }
        },
        "GameState.does_move_violate_ko": {
            "name": "does_move_violate_ko",
            "location": 200,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "Optional[List[str]]"
                ],
                "move": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "GameState.is_valid_move": {
            "name": "is_valid_move",
            "location": 208,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "move": [
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "G-second-time/dlgo/goboard_fast.py": {
        "init_neighbor_table": {
            "name": "init_neighbor_table",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "dim": [
                    "Tuple[int, int]",
                    "float"
                ]
            }
        },
        "init_corner_table": {
            "name": "init_corner_table",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "dim": [
                    "Tuple[int, int]",
                    "float"
                ]
            }
        },
        "GoString.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "color": [
                    "int",
                    "bool",
                    "float"
                ],
                "stones": [
                    "int",
                    "bool",
                    "float"
                ],
                "liberties": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "GoString.without_liberty": {
            "name": "without_liberty",
            "location": 62,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "GoString.with_liberty": {
            "name": "with_liberty",
            "location": 66,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "GoString.merged_with": {
            "name": "merged_with",
            "location": 70,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str",
                    "int",
                    "List[int]",
                    "Dict[str, object]"
                ]
            }
        },
        "GoString.num_liberties": {
            "name": "num_liberties",
            "location": 77,
            "return": [
                "int",
                "str",
                "deque"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoString.__eq__": {
            "name": "__eq__",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T"
                ]
            }
        },
        "GoString.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 86,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "memodict": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Board.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "num_rows": [
                    "int"
                ],
                "num_cols": [
                    "int"
                ]
            }
        },
        "Board.neighbors": {
            "name": "neighbors",
            "location": 107,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "float",
                    "T",
                    "bytes"
                ]
            }
        },
        "Board.corners": {
            "name": "corners",
            "location": 110,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "float",
                    "T",
                    "bytes"
                ]
            }
        },
        "Board.place_stone": {
            "name": "place_stone",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "player": [
                    "dlgo.gotypes.Player",
                    "int",
                    "str"
                ],
                "point": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "Board._replace_string": {
            "name": "_replace_string",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "new_string": [
                    "str",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "Board._remove_string": {
            "name": "_remove_string",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "string": [
                    "str"
                ]
            }
        },
        "Board.is_self_capture": {
            "name": "is_self_capture",
            "location": 172,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "dlgo.gotypes.Player"
                ],
                "point": []
            }
        },
        "Board.will_capture": {
            "name": "will_capture",
            "location": 190,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "dlgo.gotypes.Player"
                ],
                "point": [
                    "float",
                    "T",
                    "bytes"
                ]
            }
        },
        "Board.is_on_grid": {
            "name": "is_on_grid",
            "location": 203,
            "return": [
                "int",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "int",
                    "List[int]",
                    "float",
                    "str",
                    "List[float]"
                ]
            }
        },
        "Board.get": {
            "name": "get",
            "location": 207,
            "return": [
                "bool",
                "int",
                "Optional[int]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "int",
                    "Dict[str, bool]",
                    "str"
                ]
            }
        },
        "Board.get_go_string": {
            "name": "get_go_string",
            "location": 217,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "int",
                    "Exception",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, bool]"
                ]
            }
        },
        "Board.__eq__": {
            "name": "__eq__",
            "location": 227,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int"
                ]
            }
        },
        "Board.__deepcopy__": {
            "name": "__deepcopy__",
            "location": 233,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "memodict": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Board.zobrist_hash": {
            "name": "zobrist_hash",
            "location": 241,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Move.__init__": {
            "name": "__init__",
            "location": 253,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "point": [
                    "Optional[Tuple[float, float]]",
                    "bool",
                    "Optional[Union[float, Any]]",
                    "Optional[dlgo.gotypes.Point]",
                    "Optional[bool]",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "is_pass": [
                    "bool",
                    "Optional[Tuple[float, float]]",
                    "Optional[bool]",
                    "Optional[Type[Any]]",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "is_resign": [
                    "bool",
                    "Optional[Tuple[float, float]]",
                    "Optional[bool]",
                    "Optional[Type[Any]]",
                    "Optional[int]",
                    "Optional[float]"
                ]
            }
        },
        "Move.play": {
            "name": "play",
            "location": 261,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "point": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        },
        "Move.pass_turn": {
            "name": "pass_turn",
            "location": 266,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Move.resign": {
            "name": "resign",
            "location": 270,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Move.__str__": {
            "name": "__str__",
            "location": 273,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Move.__hash__": {
            "name": "__hash__",
            "location": 282,
            "return": [
                "float",
                "bool",
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Move.__eq__": {
            "name": "__eq__",
            "location": 285,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "GameState.__init__": {
            "name": "__init__",
            "location": 291,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "board": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "next_player": [
                    "Optional[int]",
                    "List[int]",
                    "dlgo.gotypes.Player",
                    "Tuple[int, int, int]",
                    "\"FrameManager\""
                ],
                "previous": [
                    "dlgo.gotypes.Player",
                    "str",
                    "Union[int, float]"
                ],
                "move": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "GameState.apply_move": {
            "name": "apply_move",
            "location": 303,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "move": [
                    "int"
                ]
            }
        },
        "GameState.new_game": {
            "name": "new_game",
            "location": 313,
            "return": [
                "bool",
                "str",
                "Tuple[int, int]",
                "int",
                "Optional[List[str]]"
            ],
            "arguments": {
                "cls": [
                    "bool"
                ],
                "board_size": [
                    "int",
                    "float",
                    "Tuple[float, float]",
                    "list"
                ]
            }
        },
        "GameState.is_move_self_capture": {
            "name": "is_move_self_capture",
            "location": 319,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "str",
                    "dlgo.gotypes.Player",
                    "int"
                ],
                "move": [
                    "str",
                    "dlgo.gotypes.Player",
                    "int"
                ]
            }
        },
        "GameState.situation": {
            "name": "situation",
            "location": 325,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.does_move_violate_ko": {
            "name": "does_move_violate_ko",
            "location": 328,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "List['cirq.Qid']",
                    "float"
                ],
                "move": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "GameState.is_valid_move": {
            "name": "is_valid_move",
            "location": 338,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "move": [
                    "dict",
                    "bool"
                ]
            }
        },
        "GameState.is_over": {
            "name": "is_over",
            "location": 346,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.legal_moves": {
            "name": "legal_moves",
            "location": 356,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.winner": {
            "name": "winner",
            "location": 371,
            "return": [
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/dlgo/goboard_slow.py": {
        "Move.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "point": [
                    "Optional[Tuple[float, float]]",
                    "bool",
                    "Optional[Union[float, Any]]",
                    "Optional[dlgo.gotypes.Point]",
                    "Optional[bool]",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "is_pass": [
                    "bool",
                    "Optional[Tuple[float, float]]",
                    "Optional[bool]",
                    "Optional[Type[Any]]",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "is_resign": [
                    "bool",
                    "Optional[Tuple[float, float]]",
                    "Optional[bool]",
                    "Optional[Type[Any]]",
                    "Optional[int]",
                    "Optional[float]"
                ]
            }
        },
        "Move.play": {
            "name": "play",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "point": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        },
        "Move.pass_turn": {
            "name": "pass_turn",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Move.resign": {
            "name": "resign",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "GoString.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "color": [
                    "int",
                    "bool",
                    "float"
                ],
                "stones": [
                    "List[int]",
                    "dict",
                    "list",
                    "Iterable['cirq.Qid']",
                    "int"
                ],
                "liberties": [
                    "List[int]",
                    "dict",
                    "list",
                    "Iterable['cirq.Qid']",
                    "int"
                ]
            }
        },
        "GoString.remvove_liberty": {
            "name": "remvove_liberty",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "point": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "GoString.add_liberty": {
            "name": "add_liberty",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "point": [
                    "int",
                    "VT",
                    "T"
                ]
            }
        },
        "GoString.merged_with": {
            "name": "merged_with",
            "location": 39,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "go_string": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "GoString.num_liberties": {
            "name": "num_liberties",
            "location": 46,
            "return": [
                "int",
                "str",
                "deque"
            ],
            "arguments": {
                "self": []
            }
        },
        "GoString.__eq__": {
            "name": "__eq__",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T"
                ]
            }
        },
        "Board.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "num_rows": [
                    "int"
                ],
                "nums_cols": [
                    "int",
                    "float",
                    "Iterable[Iterable]",
                    "Iterable"
                ]
            }
        },
        "Board.place_stone": {
            "name": "place_stone",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "player": [
                    "dlgo.gotypes.Player",
                    "int",
                    "str"
                ],
                "point": [
                    "List[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "bool",
                    "str",
                    "dict",
                    "OrderedDict"
                ]
            }
        },
        "Board.is_on_grid": {
            "name": "is_on_grid",
            "location": 93,
            "return": [
                "int",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "int",
                    "List[int]",
                    "float",
                    "str",
                    "List[float]"
                ]
            }
        },
        "Board.get": {
            "name": "get",
            "location": 96,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "int",
                    "Dict[str, bool]",
                    "str"
                ]
            }
        },
        "Board.get_go_string": {
            "name": "get_go_string",
            "location": 102,
            "return": [
                "Optional[int]",
                "bool",
                "str",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "int",
                    "Exception",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, bool]"
                ]
            }
        },
        "Board._remove_string": {
            "name": "_remove_string",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "gostring": [
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        },
        "GameState.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "board": [
                    "str",
                    "Tuple[int, int]",
                    "int",
                    "Optional[str]",
                    "float",
                    "list"
                ],
                "next_player": [
                    "str",
                    "Tuple[int, int]",
                    "int",
                    "Optional[str]",
                    "float",
                    "list"
                ],
                "previous_state": [
                    "int",
                    "bool",
                    "list",
                    "Callable"
                ],
                "move": [
                    "str",
                    "Tuple[int, int]",
                    "int",
                    "Optional[str]",
                    "float",
                    "list"
                ]
            }
        },
        "GameState.situation": {
            "name": "situation",
            "location": 127,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.apply_move": {
            "name": "apply_move",
            "location": 130,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "move": [
                    "int"
                ]
            }
        },
        "GameState.new_game": {
            "name": "new_game",
            "location": 139,
            "return": [
                "bool",
                "str",
                "Tuple[int, int]",
                "int",
                "Optional[List[str]]"
            ],
            "arguments": {
                "cls": [
                    "bool"
                ],
                "board_size": [
                    "int",
                    "float",
                    "Tuple[float, float]",
                    "list"
                ]
            }
        },
        "GameState.is_over": {
            "name": "is_over",
            "location": 145,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameState.is_move_self_capture": {
            "name": "is_move_self_capture",
            "location": 157,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "str",
                    "dlgo.gotypes.Player",
                    "int"
                ],
                "move": []
            }
        },
        "GameState.does_move_violate_ko": {
            "name": "does_move_violate_ko",
            "location": 167,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "Optional[List[str]]"
                ],
                "move": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "GameState.is_valid_move": {
            "name": "is_valid_move",
            "location": 180,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "move": [
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "G-second-time/dlgo/gotypes.py": {
        "Player.other": {
            "name": "other",
            "location": 10,
            "return": [
                "str",
                "deque",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Point.neighbors": {
            "name": "neighbors",
            "location": 18,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/dlgo/scoring.py": {
        "evaluate_territory": {
            "name": "evaluate_territory",
            "location": 48,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "List[str]"
            ],
            "arguments": {
                "board": [
                    "int",
                    "List[str]",
                    "float",
                    "list"
                ]
            }
        },
        "_collect_region": {
            "name": "_collect_region",
            "location": 71,
            "return": [
                "Callable",
                "bool",
                "Type",
                "str"
            ],
            "arguments": {
                "start_pos": [
                    "bool",
                    "str"
                ],
                "board": [
                    "str",
                    "float",
                    "int",
                    "Dict[int, int]"
                ],
                "visited": [
                    "Callable[[float], float]",
                    "int",
                    "float"
                ]
            }
        },
        "compute_game_result": {
            "name": "compute_game_result",
            "location": 95,
            "return": [
                "dict",
                "str",
                "bool"
            ],
            "arguments": {
                "game_state": [
                    "int",
                    "simulation.core.player.Player"
                ]
            }
        },
        "Territory.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "territory_map": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "GameResult.winner": {
            "name": "winner",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameResult.winning_margin": {
            "name": "winning_margin",
            "location": 37,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameResult.__str__": {
            "name": "__str__",
            "location": 41,
            "return": [
                "bool",
                "str",
                "int",
                "Union[bytes, bytearray]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/dlgo/utils.py": {
        "print_move": {
            "name": "print_move",
            "location": 14,
            "return": [],
            "arguments": {
                "player": [],
                "move": []
            }
        },
        "print_board": {
            "name": "print_board",
            "location": 18,
            "return": [],
            "arguments": {
                "board": []
            }
        },
        "point_from_coords": {
            "name": "point_from_coords",
            "location": 29,
            "return": [],
            "arguments": {
                "coords": []
            }
        },
        "coords_from_point": {
            "name": "coords_from_point",
            "location": 35,
            "return": [],
            "arguments": {
                "point": []
            }
        }
    },
    "G-second-time/dlgo/zobrist.py": {},
    "G-second-time/dlgo/__init__.py": {},
    "G-second-time/dlgo/agent/ac_agent.py": {
        "load_ac_agent": {
            "name": "load_ac_agent",
            "location": 106,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "h5file": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "ACAgent.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "encoder": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "ACAgent.set_temperature": {
            "name": "set_temperature",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "temperature": [
                    "bool",
                    "float"
                ]
            }
        },
        "ACAgent.set_collector": {
            "name": "set_collector",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "collector": [
                    "bool",
                    "float"
                ]
            }
        },
        "ACAgent.select_move": {
            "name": "select_move",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "bytes",
                    "zero_play.game_state.GameState",
                    "Dict[str, Any]",
                    "memoryview",
                    "str",
                    "dict"
                ]
            }
        },
        "ACAgent.train": {
            "name": "train",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "int"
                ],
                "lr": [
                    "float",
                    "int",
                    "numpy.ndarray"
                ],
                "batch_size": [
                    "int",
                    "numpy.ndarray",
                    "Tuple[int, int]"
                ]
            }
        },
        "ACAgent.serialize": {
            "name": "serialize",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "h5file": [
                    "IO[str]",
                    "Optional[int]"
                ]
            }
        },
        "ACAgent.diagnostics": {
            "name": "diagnostics",
            "location": 102,
            "return": [
                "str",
                "bool",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/dlgo/agent/base.py": {
        "Agent.select_move": {
            "name": "select_move",
            "location": 5,
            "return": [
                "dlgo.goboard_fast.Move"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "float",
                    "Iterable[int]",
                    "list",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "Agent.diagnostics": {
            "name": "diagnostics",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/dlgo/agent/helpers.py": {
        "is_point_an_eye": {
            "name": "is_point_an_eye",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {
                "board": [
                    "dict",
                    "int",
                    "str"
                ],
                "point": [
                    "dict",
                    "Mapping[Tuple[str, str], Any]"
                ],
                "color": [
                    "dlgo.gotypes.Player",
                    "board.Board",
                    "Optional[int]"
                ]
            }
        }
    },
    "G-second-time/dlgo/agent/mcts.py": {
        "uct_score": {
            "name": "uct_score",
            "location": 11,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "parent_rollouts": [
                    "bool",
                    "Tuple[float, float]",
                    "int",
                    "Tuple[int]",
                    "Union[int, float]",
                    "Callable"
                ],
                "child_rollouts": [
                    "bool",
                    "Tuple[float, float]",
                    "int",
                    "Tuple[int]",
                    "Union[int, float]",
                    "Callable"
                ],
                "win_pct": [
                    "str",
                    "Optional[List[str]]",
                    "bool",
                    "List[List]",
                    "List[str]"
                ],
                "temperature": [
                    "str",
                    "Optional[List[str]]",
                    "bool",
                    "List[List]",
                    "List[str]"
                ]
            }
        },
        "MCTSAgent.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "num_rounds": [
                    "int",
                    "Optional[int]"
                ],
                "temperature": [
                    "int",
                    "Union[str, float]",
                    "float"
                ]
            }
        },
        "MCTSAgent.select_move": {
            "name": "select_move",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "dlgo.goboard_fasGameState",
                    "zero_play.game_state.GameState"
                ]
            }
        },
        "MCTSAgent.select_child": {
            "name": "select_child",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "list"
                ]
            }
        },
        "MCTSAgent.simulate_random_game": {
            "name": "simulate_random_game",
            "location": 73,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "game": [
                    "str",
                    "List[Tuple[Any, Any]]",
                    "int"
                ]
            }
        }
    },
    "G-second-time/dlgo/agent/naive.py": {
        "RandomBot.select_move": {
            "name": "select_move",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "dlgo.goboard_fasGameState",
                    "zero_play.game_state.GameState"
                ]
            }
        }
    },
    "G-second-time/dlgo/agent/pg.py": {
        "load_policy_agent": {
            "name": "load_policy_agent",
            "location": 79,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "h5file": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "PolicyAgent.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "encoder": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "PolicyAgent.set_collector": {
            "name": "set_collector",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "collector": [
                    "bool",
                    "float"
                ]
            }
        },
        "PolicyAgent.select_move": {
            "name": "select_move",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "bytes",
                    "dlgo.goboard_fasGameState",
                    "memoryview"
                ]
            }
        },
        "PolicyAgent.serialize": {
            "name": "serialize",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "h5file": [
                    "IO[str]",
                    "Optional[int]"
                ]
            }
        },
        "PolicyAgent.train": {
            "name": "train",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "int",
                    "float",
                    "str"
                ],
                "lr": [
                    "numpy.ndarray",
                    "float",
                    "List[int]"
                ],
                "clipnorm": [
                    "numpy.ndarray",
                    "float",
                    "List[int]"
                ],
                "batch_size": [
                    "int",
                    "float",
                    "Tuple[int, int]"
                ]
            }
        }
    },
    "G-second-time/dlgo/agent/predict.py": {
        "load_prediction_agent": {
            "name": "load_prediction_agent",
            "location": 60,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "h5file": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "DeepLearningAgent.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "encoder": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "DeepLearningAgent.predict": {
            "name": "predict",
            "location": 21,
            "return": [
                "numpy.ndarray",
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "numpy.ndarray",
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "DeepLearningAgent.select_move": {
            "name": "select_move",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "dlgo.goboard_fasGameState",
                    "zero_play.game_state.GameState"
                ]
            }
        },
        "DeepLearningAgent.serialize": {
            "name": "serialize",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "h5file": [
                    "File",
                    "IO[str]",
                    "Optional[int]"
                ]
            }
        }
    },
    "G-second-time/dlgo/agent/q_agent.py": {
        "load_q_agent": {
            "name": "load_q_agent",
            "location": 131,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "h5file": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "QAgent.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "encoder": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "policy": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "QAgent.set_temperature": {
            "name": "set_temperature",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "temperature": [
                    "bool",
                    "float"
                ]
            }
        },
        "QAgent.set_collector": {
            "name": "set_collector",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "collector": [
                    "bool",
                    "float"
                ]
            }
        },
        "QAgent.set_policy": {
            "name": "set_policy",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "policy": [
                    "str",
                    "int",
                    "Union[int, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "QAgent.select_move": {
            "name": "select_move",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "bytes",
                    "dlgo.goboard_fasGameState",
                    "memoryview",
                    "str"
                ]
            }
        },
        "QAgent.rank_moves_eps_greedy": {
            "name": "rank_moves_eps_greedy",
            "location": 82,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "str",
                    "bool",
                    "numpy.ndarray",
                    "float"
                ]
            }
        },
        "QAgent.rank_moves_weighted": {
            "name": "rank_moves_weighted",
            "location": 90,
            "return": [
                "Optional[int]",
                "int",
                "float",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "numpy.ndarray",
                    "int",
                    "List[str]",
                    "Sequence[Any]",
                    "list",
                    "float"
                ]
            }
        },
        "QAgent.train": {
            "name": "train",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "experience": [
                    "int",
                    "float",
                    "str"
                ],
                "lr": [
                    "float",
                    "int",
                    "numpy.ndarray"
                ],
                "batch_size": [
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "QAgent.serialize": {
            "name": "serialize",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "h5file": [
                    "IO[str]",
                    "Optional[int]"
                ]
            }
        },
        "QAgent.diagnostics": {
            "name": "diagnostics",
            "location": 127,
            "return": [
                "bool",
                "int",
                "list",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/dlgo/agent/termination.py": {
        "get": {
            "name": "get",
            "location": 42,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "termination": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "TerminationStrategy.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TerminationStrategy.should_pass": {
            "name": "should_pass",
            "location": 11,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "float",
                    "Iterable[int]",
                    "list",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "TerminationStrategy.should_resign": {
            "name": "should_resign",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "float",
                    "Iterable[int]",
                    "list",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "PassWhenOpponentPasses.should_pass": {
            "name": "should_pass",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "int"
                ]
            }
        },
        "TerminationAgent.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "agent": [
                    "int",
                    "bool",
                    "float"
                ],
                "strategy": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[base.MinimizationAttack]"
                ]
            }
        },
        "TerminationAgent.select_move": {
            "name": "select_move",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "dlgo.goboard_fasGameState",
                    "Dict[str, int]",
                    "int"
                ]
            }
        }
    },
    "G-second-time/dlgo/agent/__init__.py": {},
    "G-second-time/dlgo/data/generator.py": {
        "DataGenerator.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data_directory": [
                    "List[str]",
                    "str",
                    "bool"
                ],
                "samples": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, str]]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "DataGenerator.get_num_samples": {
            "name": "get_num_samples",
            "location": 13,
            "return": [
                "bool",
                "Tuple[int]",
                "Optional[str]",
                "list",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "int",
                    "bool",
                    "Iterable[int]",
                    "Union[int, float]"
                ],
                "num_classes": [
                    "int",
                    "bool",
                    "Iterable[int]",
                    "Union[int, float]"
                ]
            }
        },
        "DataGenerator._generate": {
            "name": "_generate",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "numpy.ndarray",
                    "int"
                ],
                "num_classes": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "DataGenerator.generate": {
            "name": "generate",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "numpy.ndarray",
                    "str",
                    "float"
                ],
                "num_classes": [
                    "numpy.ndarray",
                    "str",
                    "float"
                ]
            }
        }
    },
    "G-second-time/dlgo/data/index_processor.py": {
        "worker": {
            "name": "worker",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "url_and_target": [
                    "str",
                    "bool"
                ]
            }
        },
        "KGSIndex.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "kgs_url": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "bool"
                ],
                "index_page": [
                    "str",
                    "bytes",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "int",
                    "Optional[str]"
                ],
                "data_directory": [
                    "str",
                    "bytes",
                    "Optional[Dict[str, Any]]",
                    "Optional[int]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "KGSIndex.download_files": {
            "name": "download_files",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "KGSIndex.create_index_page": {
            "name": "create_index_page",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "KGSIndex.load_index": {
            "name": "load_index",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/dlgo/data/parallel_processor.py": {
        "worker": {
            "name": "worker",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "jobinfo": [
                    "bytes",
                    "Union[str, bytes]",
                    "Optional[Iterable[Any]]",
                    "str"
                ]
            }
        },
        "GoDataProcessor.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "encoder": [
                    "dict",
                    "bytes",
                    "Dict[str, Any]",
                    "str"
                ],
                "data_directory": [
                    "Tuple[str, str]"
                ]
            }
        },
        "GoDataProcessor.load_go_data": {
            "name": "load_go_data",
            "location": 37,
            "return": [
                "dict",
                "str",
                "Iterable[str]",
                "IO[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "data_type": [
                    "creatures.players.Player",
                    "str",
                    "int",
                    "Dict[str, float]"
                ],
                "num_samples": [
                    "int",
                    "str",
                    "dict"
                ],
                "use_generator": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "GoDataProcessor.unzip_data": {
            "name": "unzip_data",
            "location": 53,
            "return": [
                "str",
                "List[List[str]]",
                "Iterable[bytes]",
                "set",
                "bool"
            ],
            "arguments": {
                "self": [],
                "zip_file_name": [
                    "str",
                    "int"
                ]
            }
        },
        "GoDataProcessor.process_zip": {
            "name": "process_zip",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "zip_file_name": [
                    "str"
                ],
                "data_file_name": [
                    "str",
                    "Optional[str]"
                ],
                "game_list": [
                    "int",
                    "str",
                    "List[str]",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "GoDataProcessor.consolidate_games": {
            "name": "consolidate_games",
            "location": 115,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "IO[Any]",
                    "Dict[str, Any]"
                ],
                "samples": [
                    "str",
                    "Union[List[str], str]"
                ]
            }
        },
        "GoDataProcessor.get_handicap": {
            "name": "get_handicap",
            "location": 148,
            "return": [
                "Optional[str]",
                "str",
                "list"
            ],
            "arguments": {
                "sgf": [
                    "str",
                    "Iterable[T]",
                    "T",
                    "Optional[str]"
                ]
            }
        },
        "GoDataProcessor.map_to_workers": {
            "name": "map_to_workers",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data_type": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "samples": [
                    "str",
                    "bool"
                ]
            }
        },
        "GoDataProcessor.num_total_examples": {
            "name": "num_total_examples",
            "location": 189,
            "return": [
                "int",
                "numpy.ndarray",
                "str",
                "deque"
            ],
            "arguments": {
                "self": [],
                "zip_file": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ],
                "game_list": [
                    "str",
                    "bool",
                    "Optional[Iterable[str]]"
                ],
                "name_list": [
                    "str",
                    "List[type]",
                    "Set[Type[Any]]",
                    "bool",
                    "Sequence[str]",
                    "Dict[str, Any]",
                    "Set[str]"
                ]
            }
        }
    },
    "G-second-time/dlgo/data/processor.py": {
        "GoDataProcessor.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "encoder": [
                    "dict",
                    "Union[utils.CWLObjectType, MutableSequence[utils.CWLObjectType], None]",
                    "Optional[int]",
                    "bytes"
                ],
                "data_directory": [
                    "Tuple[str, str]"
                ]
            }
        },
        "GoDataProcessor.load_go_data": {
            "name": "load_go_data",
            "location": 26,
            "return": [
                "Iterable[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "data_type": [
                    "str",
                    "bool"
                ],
                "num_samples": [
                    "int",
                    "str"
                ]
            }
        },
        "GoDataProcessor.unzip_data": {
            "name": "unzip_data",
            "location": 49,
            "return": [
                "str",
                "List[List[str]]",
                "Iterable[bytes]",
                "set",
                "bool"
            ],
            "arguments": {
                "self": [],
                "zip_file_name": [
                    "str",
                    "int"
                ]
            }
        },
        "GoDataProcessor.process_zip": {
            "name": "process_zip",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "zip_file_name": [
                    "str"
                ],
                "data_file_name": [
                    "str",
                    "Optional[str]"
                ],
                "game_list": [
                    "int",
                    "str",
                    "List[str]",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "GoDataProcessor.consolidate_games": {
            "name": "consolidate_games",
            "location": 111,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "data_type": [
                    "str",
                    "Dict[str, Any]",
                    "utils.types.Fun[[int], str]",
                    "List[str]"
                ],
                "samples": [
                    "str",
                    "Set[str]",
                    "Optional[str]"
                ]
            }
        },
        "GoDataProcessor.get_handicap": {
            "name": "get_handicap",
            "location": 139,
            "return": [
                "Optional[str]",
                "str",
                "list"
            ],
            "arguments": {
                "sgf": [
                    "str",
                    "Iterable[T]",
                    "T",
                    "Optional[str]"
                ]
            }
        },
        "GoDataProcessor.num_total_examples": {
            "name": "num_total_examples",
            "location": 153,
            "return": [
                "int",
                "numpy.ndarray",
                "str",
                "deque"
            ],
            "arguments": {
                "self": [],
                "zip_file": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ],
                "game_list": [
                    "str",
                    "bool",
                    "Optional[Iterable[str]]"
                ],
                "name_list": [
                    "str",
                    "List[type]",
                    "Set[Type[Any]]",
                    "bool",
                    "Sequence[str]",
                    "Dict[str, Any]",
                    "Set[str]"
                ]
            }
        }
    },
    "G-second-time/dlgo/data/sampling.py": {
        "Sampler.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data_dir": [
                    "str",
                    "bool"
                ],
                "num_test_games": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "cap_year": [
                    "List[str]",
                    "str",
                    "type",
                    "int",
                    "Dict[str, Any]",
                    "bool"
                ],
                "seed": [
                    "List[str]",
                    "str",
                    "type",
                    "int",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "Sampler.draw_data": {
            "name": "draw_data",
            "location": 25,
            "return": [
                "bool",
                "dict",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "data_type": [
                    "Optional[int]",
                    "int",
                    "str",
                    "Type",
                    "Optional[float]"
                ],
                "num_samples": [
                    "Optional[int]",
                    "int",
                    "float",
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "Sampler.draw_samples": {
            "name": "draw_samples",
            "location": 35,
            "return": [
                "str",
                "List[allennlp.data.dataset_readers.dataset_utils.span_utils.TypedStringSpan]",
                "List[str]",
                "List[Dict]",
                "Union[List, Tuple]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "num_sample_games": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Union[str, int]",
                    "Optional[List[Any]]",
                    "List[str]"
                ]
            }
        },
        "Sampler.draw_training_games": {
            "name": "draw_training_games",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Sampler.compute_test_samples": {
            "name": "compute_test_samples",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Sampler.draw_training_samples": {
            "name": "draw_training_samples",
            "location": 92,
            "return": [
                "str",
                "List[allennlp.data.dataset_readers.dataset_utils.span_utils.TypedStringSpan]",
                "List[str]",
                "List[Dict]",
                "Union[List, Tuple]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": [],
                "num_sample_games": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Union[str, int]",
                    "Optional[List[Any]]",
                    "List[str]"
                ]
            }
        },
        "Sampler.draw_all_training": {
            "name": "draw_all_training",
            "location": 114,
            "return": [
                "List[str]",
                "str",
                "List[allennlp.data.dataset_readers.dataset_utils.span_utils.TypedStringSpan]",
                "List[Dict]",
                "Union[List, Tuple]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/dlgo/encoders/base.py": {
        "get_encoder_by_name": {
            "name": "get_encoder_by_name",
            "location": 32,
            "return": [
                "str",
                "bool",
                "int",
                "bytes"
            ],
            "arguments": {
                "name": [
                    "str",
                    "tuple"
                ],
                "board_size": [
                    "Union[float, int]",
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "Encoder.name": {
            "name": "name",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Encoder.encode": {
            "name": "encode",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "float",
                    "Iterable[int]",
                    "list",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "Encoder.encode_point": {
            "name": "encode_point",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "point": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Encoder.decode_point_index": {
            "name": "decode_point_index",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Encoder.num_points": {
            "name": "num_points",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Encoder.shape": {
            "name": "shape",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/dlgo/encoders/oneplane.py": {
        "create": {
            "name": "create",
            "location": 45,
            "return": [
                "Callable",
                "Dict[str, Any]",
                "int",
                "str"
            ],
            "arguments": {
                "board_size": [
                    "int",
                    "bool"
                ]
            }
        },
        "OnePlaneEncoder.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "board_size": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "OnePlaneEncoder.name": {
            "name": "name",
            "location": 12,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "Iterator",
                "Container[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OnePlaneEncoder.encode": {
            "name": "encode",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "dlgo.goboard_fasGameState"
                ]
            }
        },
        "OnePlaneEncoder.encode_point": {
            "name": "encode_point",
            "location": 30,
            "return": [
                "bool",
                "Optional[int]",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "int",
                    "str",
                    "numpy.random.RandomState",
                    "Union[int, float]"
                ]
            }
        },
        "OnePlaneEncoder.decode_point_index": {
            "name": "decode_point_index",
            "location": 33,
            "return": [
                "BaseException",
                "dict",
                "int",
                "bytes",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "List[Tuple[int, int]]",
                    "List[int]"
                ]
            }
        },
        "OnePlaneEncoder.num_points": {
            "name": "num_points",
            "location": 38,
            "return": [
                "int",
                "bool",
                "float",
                "str",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "OnePlaneEncoder.shape": {
            "name": "shape",
            "location": 41,
            "return": [
                "List[int]",
                "int",
                "Optional[Dict[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/dlgo/encoders/sevenplane.py": {
        "create": {
            "name": "create",
            "location": 48,
            "return": [
                "Callable",
                "Dict[str, Any]",
                "int",
                "str"
            ],
            "arguments": {
                "board_size": [
                    "int",
                    "bool"
                ]
            }
        },
        "SevenPlaneEncoder.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "board_size": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SevenPlaneEncoder.name": {
            "name": "name",
            "location": 12,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "Iterator",
                "Container[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SevenPlaneEncoder.encode": {
            "name": "encode",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "dlgo.goboard_fasGameState"
                ]
            }
        },
        "SevenPlaneEncoder.encode_point": {
            "name": "encode_point",
            "location": 33,
            "return": [
                "bool",
                "Optional[int]",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "int",
                    "str",
                    "numpy.random.RandomState",
                    "Union[int, float]"
                ]
            }
        },
        "SevenPlaneEncoder.decode_point_index": {
            "name": "decode_point_index",
            "location": 36,
            "return": [
                "BaseException",
                "dict",
                "int",
                "bytes",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "List[Tuple[int, int]]",
                    "List[int]"
                ]
            }
        },
        "SevenPlaneEncoder.num_points": {
            "name": "num_points",
            "location": 41,
            "return": [
                "int",
                "bool",
                "float",
                "str",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "SevenPlaneEncoder.shape": {
            "name": "shape",
            "location": 44,
            "return": [
                "List[int]",
                "int",
                "Optional[Dict[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/dlgo/encoders/simple.py": {
        "create": {
            "name": "create",
            "location": 62,
            "return": [
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "board_size": [
                    "int",
                    "bool"
                ]
            }
        },
        "SimpleEncoder.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "board_size": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SimpleEncoder.name": {
            "name": "name",
            "location": 18,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "Iterator",
                "Container[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleEncoder.encode": {
            "name": "encode",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "dlgo.goboard_fasGameState"
                ]
            }
        },
        "SimpleEncoder.encode_point": {
            "name": "encode_point",
            "location": 44,
            "return": [
                "bool",
                "Optional[int]",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "point": [
                    "int",
                    "str",
                    "numpy.random.RandomState",
                    "Union[int, float]"
                ]
            }
        },
        "SimpleEncoder.decode_point_index": {
            "name": "decode_point_index",
            "location": 49,
            "return": [
                "BaseException",
                "dict",
                "int",
                "bytes",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "str",
                    "List[Tuple[int, int]]",
                    "List[int]"
                ]
            }
        },
        "SimpleEncoder.num_points": {
            "name": "num_points",
            "location": 55,
            "return": [
                "int",
                "bool",
                "float",
                "str",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleEncoder.shape": {
            "name": "shape",
            "location": 58,
            "return": [
                "List[int]",
                "int",
                "Optional[Dict[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/dlgo/encoders/__init__.py": {},
    "G-second-time/dlgo/gosgf/sgf.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "property_map": [
                    "List[str]",
                    "int",
                    "str",
                    "dict",
                    "type"
                ],
                "presenter": [
                    "bool",
                    "Optional[Dict]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "Node.get_size": {
            "name": "get_size",
            "location": 40,
            "return": [
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.get_encoding": {
            "name": "get_encoding",
            "location": 44,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.get_presenter": {
            "name": "get_presenter",
            "location": 52,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.has_property": {
            "name": "has_property",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "bool",
                    "List[str]",
                    "Union[str, List[str]]",
                    "Iterable"
                ]
            }
        },
        "Node.properties": {
            "name": "properties",
            "location": 60,
            "return": [
                "List[str]",
                "List[Tuple[Any, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.get_raw_list": {
            "name": "get_raw_list",
            "location": 68,
            "return": [
                "Optional[List[str]]",
                "type",
                "dict",
                "Optional[dict]",
                "Mapping[str, str]"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "Callable",
                    "List[str]",
                    "list"
                ]
            }
        },
        "Node.get_raw": {
            "name": "get_raw",
            "location": 84,
            "return": [
                "type",
                "Optional[dict]",
                "str"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "bool"
                ]
            }
        },
        "Node.get_raw_property_map": {
            "name": "get_raw_property_map",
            "location": 100,
            "return": [
                "Optional[List[str]]",
                "type",
                "dict",
                "Optional[dict]",
                "Mapping[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node._set_raw_list": {
            "name": "_set_raw_list",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "Sequence[str]"
                ],
                "values": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "Node.unset": {
            "name": "unset",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "List[str]",
                    "bytes",
                    "Callable"
                ]
            }
        },
        "Node.set_raw_list": {
            "name": "set_raw_list",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "bool",
                    "int",
                    "str"
                ],
                "values": [
                    "Callable",
                    "str",
                    "Optional[List[float]]",
                    "bool",
                    "Union[int, float]",
                    "Optional[dict]"
                ]
            }
        },
        "Node.set_raw": {
            "name": "set_raw",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "bool",
                    "float",
                    "dict",
                    "Optional[int]",
                    "Callable[[str], str]"
                ],
                "value": [
                    "int",
                    "str",
                    "float",
                    "bool",
                    "Union[float, int]",
                    "Callable"
                ]
            }
        },
        "Node.get": {
            "name": "get",
            "location": 171,
            "return": [
                "Callable[[T], List[T]]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "bool"
                ]
            }
        },
        "Node.set": {
            "name": "set",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "datetime.datetime",
                    "Optional[float]",
                    "bool"
                ],
                "value": [
                    "str",
                    "datetime.datetime",
                    "Optional[float]",
                    "bool"
                ]
            }
        },
        "Node.get_raw_move": {
            "name": "get_raw_move",
            "location": 203,
            "return": [
                "Optional[str]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "Optional[bool]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.get_move": {
            "name": "get_move",
            "location": 224,
            "return": [
                "Optional[int]",
                "bool",
                "Optional[str]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.get_setup_stones": {
            "name": "get_setup_stones",
            "location": 242,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.has_setup_stones": {
            "name": "has_setup_stones",
            "location": 264,
            "return": [
                "Union[bytes, bytearray]",
                "str",
                "bool",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.set_move": {
            "name": "set_move",
            "location": 269,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "colour": [
                    "str"
                ],
                "move": [
                    "str"
                ]
            }
        },
        "Node.set_setup_stones": {
            "name": "set_setup_stones",
            "location": 286,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "black": [
                    "bool",
                    "float"
                ],
                "white": [
                    "bool",
                    "float"
                ],
                "empty": [
                    "bool",
                    "float"
                ]
            }
        },
        "Node.add_comment_text": {
            "name": "add_comment_text",
            "location": 307,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "dict"
                ]
            }
        },
        "Node.__str__": {
            "name": "__str__",
            "location": 322,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tree_node.__init__": {
            "name": "__init__",
            "location": 352,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "Optional[Exception]",
                    "int",
                    "List[str]"
                ],
                "properties": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Tree_node._add_child": {
            "name": "_add_child",
            "location": 358,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[str]",
                    "int",
                    "str"
                ]
            }
        },
        "Tree_node.__len__": {
            "name": "__len__",
            "location": 361,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tree_node.__getitem__": {
            "name": "__getitem__",
            "location": 364,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Optional[str]",
                    "str",
                    "tuple",
                    "Dict[str, str]",
                    "int",
                    "Callable[[KT], VT]",
                    "Type[RuntimeError]"
                ]
            }
        },
        "Tree_node.index": {
            "name": "index",
            "location": 367,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "int",
                    "Sequence[int]",
                    "str"
                ]
            }
        },
        "Tree_node.new_child": {
            "name": "new_child",
            "location": 370,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "Optional[int]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "Tree_node.delete": {
            "name": "delete",
            "location": 386,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Tree_node.reparent": {
            "name": "reparent",
            "location": 392,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "new_parent": [
                    "int",
                    "Type",
                    "float"
                ],
                "index": [
                    "Optional[T]",
                    "str",
                    "Optional[str]",
                    "Tuple[List[str], Optional[str]]",
                    "Optional[int]"
                ]
            }
        },
        "Tree_node.find": {
            "name": "find",
            "location": 422,
            "return": [
                "bool",
                "Optional[int]",
                "str",
                "Optional[Sequence]"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "Optional[int]",
                    "bool",
                    "List[str]",
                    "type"
                ]
            }
        },
        "Tree_node.find_property": {
            "name": "find_property",
            "location": 435,
            "return": [
                "str",
                "float",
                "type"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "_Root_tree_node.__init__": {
            "name": "__init__",
            "location": 457,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "property_map": [
                    "bool",
                    "Optional[Callable[..., Any]]",
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "owner": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "_Unexpanded_root_tree_node.__init__": {
            "name": "__init__",
            "location": 467,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "owner": [],
                "coarse_tree": [
                    "list",
                    "List[Callable]"
                ]
            }
        },
        "_Unexpanded_root_tree_node._expand": {
            "name": "_expand",
            "location": 471,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_Unexpanded_root_tree_node.__len__": {
            "name": "__len__",
            "location": 477,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Unexpanded_root_tree_node.__getitem__": {
            "name": "__getitem__",
            "location": 481,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Optional[str]",
                    "str",
                    "tuple",
                    "Dict[str, str]",
                    "int",
                    "Callable[[KT], VT]",
                    "Type[RuntimeError]"
                ]
            }
        },
        "_Unexpanded_root_tree_node.index": {
            "name": "index",
            "location": 485,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "child": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_Unexpanded_root_tree_node.new_child": {
            "name": "new_child",
            "location": 489,
            "return": [
                "int",
                "Sequence[str]",
                "Iterable[str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "int"
                ]
            }
        },
        "_Unexpanded_root_tree_node._main_sequence_iter": {
            "name": "_main_sequence_iter",
            "location": 493,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Sgf_game.__new__": {
            "name": "__new__",
            "location": 524,
            "return": [
                "str",
                "Iterable[T]",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type[T]",
                    "bool"
                ],
                "size": [
                    "int"
                ],
                "encoding": [
                    "int",
                    "bool",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "Sgf_game.__init__": {
            "name": "__init__",
            "location": 533,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Sgf_game.from_coarse_game_tree": {
            "name": "from_coarse_game_tree",
            "location": 542,
            "return": [
                "list",
                "int",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "coarse_game": [
                    "str",
                    "dict"
                ],
                "override_encoding": [
                    "str",
                    "Optional['Directory']",
                    "Optional[IO[bytes]]",
                    "Optional[str]",
                    "List[str]",
                    "Sequence[str]"
                ]
            }
        },
        "Sgf_game.from_string": {
            "name": "from_string",
            "location": 583,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "s": [
                    "str",
                    "dict",
                    "bool"
                ],
                "override_encoding": [
                    "str"
                ]
            }
        },
        "Sgf_game.serialise": {
            "name": "serialise",
            "location": 597,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "wrap": [
                    "str",
                    "int"
                ]
            }
        },
        "Sgf_game.get_property_presenter": {
            "name": "get_property_presenter",
            "location": 634,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sgf_game.get_root": {
            "name": "get_root",
            "location": 645,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Sgf_game.get_last_node": {
            "name": "get_last_node",
            "location": 649,
            "return": [
                "int",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sgf_game.get_main_sequence": {
            "name": "get_main_sequence",
            "location": 656,
            "return": [
                "str",
                "bytes",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sgf_game.get_main_sequence_below": {
            "name": "get_main_sequence_below",
            "location": 669,
            "return": [
                "str",
                "bytes",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Callable[..., T]",
                    "int",
                    "dict",
                    "str"
                ]
            }
        },
        "Sgf_game.get_sequence_above": {
            "name": "get_sequence_above",
            "location": 685,
            "return": [
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str"
                ]
            }
        },
        "Sgf_game.main_sequence_iter": {
            "name": "main_sequence_iter",
            "location": 702,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sgf_game.extend_main_sequence": {
            "name": "extend_main_sequence",
            "location": 722,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sgf_game.get_size": {
            "name": "get_size",
            "location": 730,
            "return": [
                "int",
                "str",
                "Union[int, str]",
                "List[str]",
                "Sequence[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sgf_game.get_charset": {
            "name": "get_charset",
            "location": 734,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sgf_game.get_komi": {
            "name": "get_komi",
            "location": 751,
            "return": [
                "str",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sgf_game.get_handicap": {
            "name": "get_handicap",
            "location": 764,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sgf_game.get_player_name": {
            "name": "get_player_name",
            "location": 783,
            "return": [
                "str",
                "Dict[str, float]",
                "bytes",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "colour": [
                    "str",
                    "MutableMapping[str, Any]"
                ]
            }
        },
        "Sgf_game.get_winner": {
            "name": "get_winner",
            "location": 795,
            "return": [
                "Optional[int]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "bool",
                "Optional[str]",
                "dict",
                "Optional[Any]",
                "Optional[List[Any]]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Sgf_game.set_date": {
            "name": "set_date",
            "location": 809,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "date": [
                    "datetime.date",
                    "datetime.datetime",
                    "str",
                    "Optional[datetime.datetime]"
                ]
            }
        },
        "Node.__str__.format_property": {
            "name": "format_property",
            "location": 325,
            "return": [
                "str"
            ],
            "arguments": {
                "ident": [
                    "str",
                    "\"ks.Series[str]\""
                ],
                "values": [
                    "str",
                    "\"ks.Series[str]\""
                ]
            }
        }
    },
    "G-second-time/dlgo/gosgf/sgf_grammar.py": {
        "is_valid_property_identifier": {
            "name": "is_valid_property_identifier",
            "location": 46,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "is_valid_property_value": {
            "name": "is_valid_property_value",
            "location": 63,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "tokenise": {
            "name": "tokenise",
            "location": 75,
            "return": [
                "str",
                "int",
                "List[Mapping[str, Any]]",
                "Tuple[List[str], int]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Pattern[str]",
                    "Pattern[bytes]"
                ],
                "start_position": [
                    "int",
                    "str",
                    "Dict[str, int]",
                    "List[List[int]]"
                ]
            }
        },
        "_parse_sgf_game": {
            "name": "_parse_sgf_game",
            "location": 141,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[float]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "s": [
                    "int",
                    "str",
                    "float"
                ],
                "start_position": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "parse_sgf_game": {
            "name": "parse_sgf_game",
            "location": 206,
            "return": [
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Union[str, bytes]",
                    "TextIO"
                ]
            }
        },
        "parse_sgf_collection": {
            "name": "parse_sgf_collection",
            "location": 232,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "block_format": {
            "name": "block_format",
            "location": 265,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "pieces": [
                    "bool",
                    "Optional[int]",
                    "Container[\"Taxon\"]",
                    "dict"
                ],
                "width": [
                    "str"
                ]
            }
        },
        "serialise_game_tree": {
            "name": "serialise_game_tree",
            "location": 291,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "game_tree": [
                    "str",
                    "Union[str, Dict]"
                ],
                "wrap": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "make_tree": {
            "name": "make_tree",
            "location": 333,
            "return": [
                ""
            ],
            "arguments": {
                "game_tree": [
                    "str",
                    "Dict[str, Any]"
                ],
                "root": [],
                "node_builder": [
                    "bool",
                    "str"
                ],
                "node_adder": [
                    "bool",
                    "int"
                ]
            }
        },
        "make_coarse_game_tree": {
            "name": "make_coarse_game_tree",
            "location": 364,
            "return": [
                "bool",
                "Iterable",
                "str"
            ],
            "arguments": {
                "root": [
                    "str",
                    "list",
                    "Iterable[Iterable[str]]",
                    "bool",
                    "MutableMapping[str, str]"
                ],
                "get_children": [
                    "Callable",
                    "Callable[[], T]",
                    "Optional[str]",
                    "Optional[bool]"
                ],
                "get_properties": [
                    "str",
                    "dict",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "main_sequence_iter": {
            "name": "main_sequence_iter",
            "location": 398,
            "return": [
                ""
            ],
            "arguments": {
                "game_tree": [
                    "str",
                    "list",
                    "Tuple[int, int]"
                ]
            }
        },
        "parse_compose": {
            "name": "parse_compose",
            "location": 422,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Union[int, slice]",
                    "AbstractSet[Any]"
                ]
            }
        },
        "compose": {
            "name": "compose",
            "location": 440,
            "return": [
                "str"
            ],
            "arguments": {
                "s1": [
                    "str",
                    "int"
                ],
                "s2": [
                    "str",
                    "int"
                ]
            }
        },
        "simpletext_value": {
            "name": "simpletext_value",
            "location": 460,
            "return": [
                "int",
                "str",
                "Union[bytes, bytearray]"
            ],
            "arguments": {
                "s": [
                    "Union[str, List]",
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "text_value": {
            "name": "text_value",
            "location": 491,
            "return": [
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "s": [
                    "bool",
                    "int"
                ]
            }
        },
        "escape_text": {
            "name": "escape_text",
            "location": 520,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "Coarse_game_tree.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/dlgo/gosgf/sgf_properties.py": {
        "normalise_charset_name": {
            "name": "normalise_charset_name",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "int",
                    "str",
                    "Union[str, List[Any]]"
                ]
            }
        },
        "interpret_go_point": {
            "name": "interpret_go_point",
            "location": 45,
            "return": [
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "s": [
                    "str",
                    "list"
                ],
                "size": [
                    "str",
                    "list",
                    "List[str]",
                    "List[Tuple[str]]",
                    "int"
                ]
            }
        },
        "serialise_go_point": {
            "name": "serialise_go_point",
            "location": 73,
            "return": [
                "str",
                "bytes",
                "bytearray",
                "int"
            ],
            "arguments": {
                "move": [
                    "int",
                    "Optional[str]"
                ],
                "size": [
                    "int",
                    "float"
                ]
            }
        },
        "interpret_none": {
            "name": "interpret_none",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "s": [
                    "AnyStr",
                    "Union[bytes, bytearray]",
                    "Iterable[T]",
                    "bool",
                    "str"
                ],
                "context": [
                    "AnyStr",
                    "Union[bytes, bytearray]",
                    "Iterable[T]",
                    "bool",
                    "str"
                ]
            }
        },
        "serialise_none": {
            "name": "serialise_none",
            "location": 117,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "b": [
                    "bool",
                    "Optional[bool]",
                    "bytes"
                ],
                "context": [
                    "bool",
                    "Optional[bool]",
                    "bytes"
                ]
            }
        },
        "interpret_number": {
            "name": "interpret_number",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "context": [
                    "AnyStr",
                    "Union[bytes, bytearray]",
                    "Iterable[T]",
                    "bool",
                    "str"
                ]
            }
        },
        "serialise_number": {
            "name": "serialise_number",
            "location": 136,
            "return": [
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "i": [
                    "int"
                ],
                "context": [
                    "int",
                    "slice",
                    "T",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "interpret_real": {
            "name": "interpret_real",
            "location": 145,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "context": [
                    "AnyStr",
                    "Union[bytes, bytearray]",
                    "Iterable[T]",
                    "bool",
                    "str"
                ]
            }
        },
        "serialise_real": {
            "name": "serialise_real",
            "location": 160,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "f": [
                    "int"
                ],
                "context": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "interpret_double": {
            "name": "interpret_double",
            "location": 184,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "context": [
                    "AnyStr",
                    "Union[bytes, bytearray]",
                    "Iterable[T]",
                    "bool",
                    "str"
                ]
            }
        },
        "serialise_double": {
            "name": "serialise_double",
            "location": 196,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "i": [
                    "int",
                    "slice",
                    "T",
                    "Optional[bool]",
                    "bool"
                ],
                "context": [
                    "int",
                    "slice",
                    "T",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "interpret_colour": {
            "name": "interpret_colour",
            "location": 209,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Optional[str]"
                ],
                "context": [
                    "AnyStr",
                    "Union[bytes, bytearray]",
                    "Iterable[T]",
                    "bool",
                    "str"
                ]
            }
        },
        "serialise_colour": {
            "name": "serialise_colour",
            "location": 221,
            "return": [
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "colour": [
                    "str",
                    "List[str]",
                    "float",
                    "List[Tuple[str, str]]"
                ],
                "context": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_transcode": {
            "name": "_transcode",
            "location": 232,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Optional[str]"
                ],
                "encoding": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "interpret_simpletext": {
            "name": "interpret_simpletext",
            "location": 243,
            "return": [
                "str",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "s": [],
                "context": []
            }
        },
        "serialise_simpletext": {
            "name": "serialise_simpletext",
            "location": 256,
            "return": [
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        },
        "interpret_text": {
            "name": "interpret_text",
            "location": 269,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "s": [
                    "int",
                    "str",
                    "bool"
                ],
                "context": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "serialise_text": {
            "name": "serialise_text",
            "location": 282,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        },
        "interpret_point": {
            "name": "interpret_point",
            "location": 295,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        },
        "serialise_point": {
            "name": "serialise_point",
            "location": 309,
            "return": [
                "Callable",
                "str",
                "Tuple[Any, Any, Any]",
                "list"
            ],
            "arguments": {
                "point": [
                    "float",
                    "Optional[float]",
                    "Optional[int]",
                    "str"
                ],
                "context": [
                    "Dict[str, Any]",
                    "int",
                    "bool"
                ]
            }
        },
        "interpret_move": {
            "name": "interpret_move",
            "location": 322,
            "return": [
                "str",
                "Callable",
                "bool"
            ],
            "arguments": {
                "s": [
                    "bool",
                    "str",
                    "int"
                ],
                "context": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "serialise_move": {
            "name": "serialise_move",
            "location": 333,
            "return": [
                "Callable",
                "str",
                "Tuple[Any, Any, Any]",
                "list"
            ],
            "arguments": {
                "move": [
                    "Dict[str, Any]",
                    "int",
                    "bool"
                ],
                "context": [
                    "Dict[str, Any]",
                    "int",
                    "bool"
                ]
            }
        },
        "interpret_point_list": {
            "name": "interpret_point_list",
            "location": 344,
            "return": [
                "int",
                "bool",
                "\"Parameter\"",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "values": [
                    "T",
                    "bool",
                    "str",
                    "float"
                ],
                "context": [
                    "int",
                    "List[List[str]]",
                    "Callable",
                    "str"
                ]
            }
        },
        "serialise_point_list": {
            "name": "serialise_point_list",
            "location": 379,
            "return": [
                "int",
                "bool",
                "\"Parameter\"",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "points": [
                    "str",
                    "int",
                    "float"
                ],
                "context": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "interpret_AP": {
            "name": "interpret_AP",
            "location": 396,
            "return": [
                "str",
                "bytearray",
                "List[int]"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "context": [
                    "str",
                    "bytes"
                ]
            }
        },
        "serialise_AP": {
            "name": "serialise_AP",
            "location": 412,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ],
                "context": [
                    "float",
                    "int"
                ]
            }
        },
        "interpret_ARLN_list": {
            "name": "interpret_ARLN_list",
            "location": 427,
            "return": [
                "int",
                "bool",
                "\"Parameter\"",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "values": [
                    "T",
                    "bool",
                    "str",
                    "float"
                ],
                "context": [
                    "str",
                    "Union[bytes, bytearray, str]",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "serialise_ARLN_list": {
            "name": "serialise_ARLN_list",
            "location": 441,
            "return": [
                "bool",
                "str",
                "bytes",
                "Type",
                "int"
            ],
            "arguments": {
                "values": [
                    "dict",
                    "Dict[str, Any]",
                    "Callable",
                    "Dict[str, Union[str, int, bool]]",
                    "Dict[str, List[str]]",
                    "str"
                ],
                "context": [
                    "dict",
                    "Dict[str, Any]",
                    "Callable",
                    "Dict[str, Union[str, int, bool]]",
                    "Dict[str, List[str]]",
                    "str"
                ]
            }
        },
        "interpret_FG": {
            "name": "interpret_FG",
            "location": 451,
            "return": [
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "context": [
                    "str",
                    "int"
                ]
            }
        },
        "serialise_FG": {
            "name": "serialise_FG",
            "location": 465,
            "return": [
                "str",
                "int",
                "Union[bytes, bytearray]",
                "Dict[str, Any]",
                "bytearray"
            ],
            "arguments": {
                "value": [
                    "T",
                    "Optional[Union[str, Any]]",
                    "Union[None, int, float]",
                    "Optional[str]",
                    "Optional[bytes]",
                    "Union[None, float, int, str]"
                ],
                "context": [
                    "str",
                    "type",
                    "Union[bytes, bytearray, str]"
                ]
            }
        },
        "interpret_LB_list": {
            "name": "interpret_LB_list",
            "location": 481,
            "return": [
                "int",
                "bool",
                "\"Parameter\"",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "values": [
                    "T",
                    "bool",
                    "str",
                    "float"
                ],
                "context": [
                    "str",
                    "float",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "serialise_LB_list": {
            "name": "serialise_LB_list",
            "location": 495,
            "return": [
                "bool",
                "str",
                "bytes",
                "Type",
                "int"
            ],
            "arguments": {
                "values": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        },
        "_make_property_type": {
            "name": "_make_property_type",
            "location": 515,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "type_name": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "allows_empty_list": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "identity": {
            "name": "identity",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "_Context.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "bytes"
                ],
                "encoding": [
                    "int",
                    "bytes"
                ]
            }
        },
        "Property_type.__init__": {
            "name": "__init__",
            "location": 507,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "interpreter": [
                    "bool",
                    "float",
                    "int",
                    "Union[float, Tuple[float, float]]"
                ],
                "serialiser": [
                    "bool",
                    "float",
                    "int",
                    "Union[float, Tuple[float, float]]"
                ],
                "uses_list": [
                    "int",
                    "Sequence[int]",
                    "bool"
                ],
                "allows_empty_list": [
                    "Callable[[Type, str], bool]",
                    "List['Entity']",
                    "int",
                    "Sequence[Sequence[float]]",
                    "str"
                ]
            }
        },
        "Presenter.__init__": {
            "name": "__init__",
            "location": 636,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "bool"
                ],
                "encoding": [
                    "str",
                    "bytes",
                    "int",
                    "bool"
                ]
            }
        },
        "Presenter.get_property_type": {
            "name": "get_property_type",
            "location": 645,
            "return": [
                "Mapping",
                "str"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "Callable[[T], T]"
                ]
            }
        },
        "Presenter.register_property": {
            "name": "register_property",
            "location": 653,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "Type[T]",
                    "Type"
                ],
                "property_type": [
                    "Type[T]",
                    "Type"
                ]
            }
        },
        "Presenter.deregister_property": {
            "name": "deregister_property",
            "location": 657,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str"
                ]
            }
        },
        "Presenter.set_private_property_type": {
            "name": "set_private_property_type",
            "location": 661,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "property_type": [
                    "str",
                    "bool",
                    "List[str]",
                    "Type"
                ]
            }
        },
        "Presenter._get_effective_property_type": {
            "name": "_get_effective_property_type",
            "location": 669,
            "return": [
                "str",
                "Tuple[Type]"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str"
                ]
            }
        },
        "Presenter.interpret_as_type": {
            "name": "interpret_as_type",
            "location": 678,
            "return": [
                "str",
                "Tuple[Type]",
                "dict",
                "Mapping",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "property_type": [
                    "bool",
                    "BinaryIO"
                ],
                "raw_values": [
                    "bool",
                    "list",
                    "List[str]",
                    "Sequence['cirq.Qid']",
                    "dict",
                    "int",
                    "Tuple[str, str]",
                    "Iterable[str]"
                ]
            }
        },
        "Presenter.interpret": {
            "name": "interpret",
            "location": 697,
            "return": [
                "Callable[..., None]",
                "Tuple[type]"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "list",
                    "List[str]",
                    "Type",
                    "Optional[str]"
                ],
                "raw_values": [
                    "str",
                    "list",
                    "List[str]",
                    "Type",
                    "Optional[str]"
                ]
            }
        },
        "Presenter.serialise_as_type": {
            "name": "serialise_as_type",
            "location": 722,
            "return": [
                "Callable[[str, T], None]",
                "int",
                "str",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "property_type": [
                    "bool",
                    "int"
                ],
                "value": [
                    "str",
                    "Type[Any]",
                    "Type"
                ]
            }
        },
        "Presenter.serialise": {
            "name": "serialise",
            "location": 739,
            "return": [
                "Callable[..., None]",
                "Tuple[type]"
            ],
            "arguments": {
                "self": [],
                "identifier": [
                    "str",
                    "list",
                    "Union[str, int, float]",
                    "T"
                ],
                "value": [
                    "str",
                    "list",
                    "Union[str, int, float]",
                    "T"
                ]
            }
        }
    },
    "G-second-time/dlgo/gosgf/__init__.py": {},
    "G-second-time/dlgo/gtp/board.py": {
        "coords_to_gtp_position": {
            "name": "coords_to_gtp_position",
            "location": 12,
            "return": [
                "int",
                "bool",
                "Callable",
                "Optional[float]",
                "float"
            ],
            "arguments": {
                "move": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "gtp_position_to_coords": {
            "name": "gtp_position_to_coords",
            "location": 17,
            "return": [
                "float",
                "int",
                "Union[bool, None]",
                "str"
            ],
            "arguments": {
                "gtp_position": [
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "G-second-time/dlgo/gtp/command.py": {
        "parse": {
            "name": "parse",
            "location": 24,
            "return": [
                "str",
                "Callable",
                "bool",
                "dict",
                "list"
            ],
            "arguments": {
                "command_string": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Command.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sequence": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "List[str]",
                    "str",
                    "dict"
                ],
                "args": []
            }
        },
        "Command.__eq__": {
            "name": "__eq__",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "str",
                    "Type"
                ]
            }
        },
        "Command.__repr__": {
            "name": "__repr__",
            "location": 17,
            "return": [
                "Callable",
                "type",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.__str__": {
            "name": "__str__",
            "location": 20,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/dlgo/gtp/frontend.py": {
        "GTPFrontend.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "termination_agent": [
                    "int",
                    "bool",
                    "game.board.Board",
                    "float"
                ],
                "termination": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "GTPFrontend.run": {
            "name": "run",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GTPFrontend.process": {
            "name": "process",
            "location": 62,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "GTPFrontend.handle_play": {
            "name": "handle_play",
            "location": 68,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "move": [
                    "int",
                    "bytes",
                    "BinaryIO",
                    "Callable[..., Awaitable]",
                    "bool"
                ]
            }
        },
        "GTPFrontend.handle_genmove": {
            "name": "handle_genmove",
            "location": 77,
            "return": [
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "Dict[str, dict]",
                "Tuple[str, Optional[int]]"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "GTPFrontend.handle_fixed_handicap": {
            "name": "handle_fixed_handicap",
            "location": 86,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "nstones": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "GTPFrontend.handle_quit": {
            "name": "handle_quit",
            "location": 93,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "GTPFrontend.handle_clear_board": {
            "name": "handle_clear_board",
            "location": 97,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "GTPFrontend.handle_known_command": {
            "name": "handle_known_command",
            "location": 101,
            "return": [
                "bool",
                "int",
                "Optional[str]",
                "str",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "command_name": [
                    "str",
                    "List[str]",
                    "Iterable[Any]"
                ]
            }
        },
        "GTPFrontend.handle_boardsize": {
            "name": "handle_boardsize",
            "location": 104,
            "return": [
                "dict",
                "str",
                "Dict[str, str]",
                "Exception",
                "int"
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "GTPFrontend.handle_showboard": {
            "name": "handle_showboard",
            "location": 109,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "GTPFrontend.handle_time_left": {
            "name": "handle_time_left",
            "location": 113,
            "return": [
                "Union[str, List[str]]",
                "bool",
                "dict",
                "Union[None, str, int, float]"
            ],
            "arguments": {
                "self": [],
                "color": [
                    "float",
                    "T",
                    "Callable[[], Any]",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "time": [
                    "float",
                    "T",
                    "Callable[[], Any]",
                    "int",
                    "List[int]",
                    "bool"
                ],
                "stones": [
                    "float",
                    "T",
                    "Callable[[], Any]",
                    "int",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "GTPFrontend.handle_time_settings": {
            "name": "handle_time_settings",
            "location": 117,
            "return": [
                "Union[str, List[str]]",
                "bool",
                "dict",
                "Union[None, str, int, float]"
            ],
            "arguments": {
                "self": [],
                "main_time": [
                    "bool",
                    "Iterable[T]",
                    "int",
                    "bytes",
                    "T",
                    "str",
                    "Dict[str, Any]"
                ],
                "byo_yomi_time": [
                    "bool",
                    "Iterable[T]",
                    "int",
                    "bytes",
                    "T",
                    "str",
                    "Dict[str, Any]"
                ],
                "byo_yomi_stones": [
                    "bool",
                    "Iterable[T]",
                    "int",
                    "bytes",
                    "T",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "GTPFrontend.handle_unknown": {
            "name": "handle_unknown",
            "location": 121,
            "return": [
                "str",
                "Optional[str]",
                "float",
                "dict",
                "List[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GTPFrontend.ignore": {
            "name": "ignore",
            "location": 124,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "GTPFrontend.handle_protocol_version": {
            "name": "handle_protocol_version",
            "location": 127,
            "return": [
                "dict",
                "int",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/dlgo/gtp/local.py": {
        "LocalGtpBot.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "go_bot": [
                    "int",
                    "bool",
                    "Optional[Set[str]]",
                    "str",
                    "Optional[int]",
                    "Tuple[int, int]",
                    "Tuple[int, int, int]"
                ],
                "termination": [
                    "int",
                    "bool",
                    "Optional[Set[str]]",
                    "str",
                    "Optional[int]",
                    "Tuple[int, int]",
                    "Tuple[int, int, int]"
                ],
                "handicap": [
                    "int",
                    "bool",
                    "Optional[Set[str]]",
                    "str",
                    "Optional[int]",
                    "Tuple[int, int]",
                    "Tuple[int, int, int]"
                ],
                "opponent": [
                    "str",
                    "int",
                    "bool",
                    "List[str]"
                ],
                "output_sgf": [
                    "Iterable[Iterable[float]]",
                    "Iterable[float]",
                    "int",
                    "str",
                    "slice"
                ],
                "our_color": [
                    "int",
                    "bool",
                    "Tuple[int]"
                ]
            }
        },
        "LocalGtpBot.send_command": {
            "name": "send_command",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "LocalGtpBot.get_response": {
            "name": "get_response",
            "location": 36,
            "return": [
                "Dict[str, Any]",
                "dict",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalGtpBot.command_and_response": {
            "name": "command_and_response",
            "location": 47,
            "return": [
                "bytes",
                "dict",
                "Union[Dict, Tuple]",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "cmd": [
                    "str",
                    "List[str]",
                    "List[Dict[str, str]]",
                    "List[Tuple[bool, str]]",
                    "bool",
                    "list"
                ]
            }
        },
        "LocalGtpBot.run": {
            "name": "run",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalGtpBot.set_handicap": {
            "name": "set_handicap",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalGtpBot.play": {
            "name": "play",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalGtpBot.play_our_move": {
            "name": "play_our_move",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalGtpBot.play_their_move": {
            "name": "play_their_move",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/dlgo/gtp/response.py": {
        "success": {
            "name": "success",
            "location": 15,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "body": [
                    "str"
                ]
            }
        },
        "error": {
            "name": "error",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "body": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "bool_response": {
            "name": "bool_response",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "boolean": [
                    "list",
                    "bool",
                    "dict",
                    "List[Dict[str, str]]",
                    "T"
                ]
            }
        },
        "serialize": {
            "name": "serialize",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {
                "gtp_command": [
                    "str",
                    "List[bytes]",
                    "Optional[str]",
                    "dict"
                ],
                "gtp_response": [
                    "str",
                    "List[bytes]",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "Response.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "status": [
                    "int",
                    "List[int]",
                    "str",
                    "float"
                ],
                "body": [
                    "int",
                    "List[int]",
                    "str",
                    "float"
                ]
            }
        }
    },
    "G-second-time/dlgo/gtp/utils.py": {
        "SGFWriter.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "output_sgf": [
                    "int",
                    "bool",
                    "Iterable[int]",
                    "Union[Dict[str, Any], List[Any]]",
                    "bytes",
                    "str"
                ]
            }
        },
        "SGFWriter.append": {
            "name": "append",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "SGFWriter.write_sgf": {
            "name": "write_sgf",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SGFWriter.coordinates": {
            "name": "coordinates",
            "location": 16,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "move": [
                    "deque",
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "G-second-time/dlgo/gtp/__init__.py": {},
    "G-second-time/dlgo/http/server.py": {
        "get_web_app": {
            "name": "get_web_app",
            "location": 16,
            "return": [
                "flask.Flask",
                "dict"
            ],
            "arguments": {
                "bot_map": [
                    "bool",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "get_web_app.select_move": {
            "name": "select_move",
            "location": 22,
            "return": [
                "str",
                "trezor.utils.Writer",
                "int"
            ],
            "arguments": {
                "bot_name": [
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "bool",
                    "Iterator[bytes]"
                ]
            }
        }
    },
    "G-second-time/dlgo/http/__init__.py": {},
    "G-second-time/dlgo/mcts/mcts.py": {
        "MCTSNode.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game_state": [
                    "zero_play.game_state.GameState",
                    "dlgo.goboard_fasGameState"
                ],
                "parent": [
                    "Dict[str, Union[str, Any]]",
                    "str",
                    "Tuple[List[str], Optional[Any]]"
                ],
                "move": [
                    "Tuple[int, int]",
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "Tuple[str, str]"
                ]
            }
        },
        "MCTSNode.add_random_child": {
            "name": "add_random_child",
            "location": 21,
            "return": [
                "Callable[[str], T]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MCTSNode.record_win": {
            "name": "record_win",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "winner": [
                    "int"
                ]
            }
        },
        "MCTSNode.can_add_child": {
            "name": "can_add_child",
            "location": 33,
            "return": [
                "float",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MCTSNode.is_terminal": {
            "name": "is_terminal",
            "location": 36,
            "return": [
                "Optional[int]",
                "Optional[Iterable[int]]",
                "dict",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MCTSNode.winning_pct": {
            "name": "winning_pct",
            "location": 39,
            "return": [
                "int",
                "float",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "int"
                ]
            }
        }
    },
    "G-second-time/dlgo/mcts/__init__.py": {},
    "G-second-time/dlgo/networks/large.py": {
        "layers": {
            "name": "layers",
            "location": 6,
            "return": [
                "str"
            ],
            "arguments": {
                "input_shape": [
                    "str"
                ]
            }
        }
    },
    "G-second-time/dlgo/networks/small.py": {
        "layers": {
            "name": "layers",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "input_shape": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "G-second-time/dlgo/networks/two_inputs.py": {
        "build_model": {
            "name": "build_model",
            "location": 8,
            "return": [
                "int",
                "float",
                "str",
                "server.models.bike.Bike"
            ],
            "arguments": {
                "encoder": [
                    "Sequence[int]"
                ]
            }
        }
    },
    "G-second-time/dlgo/networks/__init__.py": {},
    "G-second-time/dlgo/rl/experience.py": {
        "combine_experience": {
            "name": "combine_experience",
            "location": 59,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "collectors": [
                    "int",
                    "numpy.ndarray",
                    "list"
                ]
            }
        },
        "load_experience": {
            "name": "load_experience",
            "location": 73,
            "return": [
                "str",
                "bool",
                "Union[str, Sequence[str]]"
            ],
            "arguments": {
                "h5file": [
                    "TextIO",
                    "IO"
                ]
            }
        },
        "ExperienceCollector.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ExperienceCollector.begin_episode": {
            "name": "begin_episode",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ExperienceCollector.record_decision": {
            "name": "record_decision",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Optional[str]",
                    "List[Dict[str, Any]]",
                    "str",
                    "bool"
                ],
                "action": [
                    "str",
                    "list",
                    "List[Union[int, float]]",
                    "List[List[object]]",
                    "bool"
                ],
                "estimated_value": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str",
                    "List[List[object]]",
                    "list"
                ]
            }
        },
        "ExperienceCollector.complete_episode": {
            "name": "complete_episode",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "reward": [
                    "int"
                ]
            }
        },
        "ExperienceCollector.to_buffer": {
            "name": "to_buffer",
            "location": 37,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ExperienceBuffer.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "states": [
                    "str",
                    "numpy.array",
                    "State[np.ndarray]"
                ],
                "actions": [
                    "str",
                    "numpy.array",
                    "State[np.ndarray]"
                ],
                "rewards": [
                    "str",
                    "numpy.array",
                    "State[np.ndarray]"
                ],
                "advantages": [
                    "str",
                    "numpy.array",
                    "State[np.ndarray]"
                ]
            }
        },
        "ExperienceBuffer.serialize": {
            "name": "serialize",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "h5file": [
                    "TextIO",
                    "BinaryIO"
                ]
            }
        }
    },
    "G-second-time/dlgo/rl/simulate.py": {
        "simulate_game": {
            "name": "simulate_game",
            "location": 13,
            "return": [
                "str",
                "list",
                "List[Dict[str, Any]]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "black_player": [
                    "int",
                    "type"
                ],
                "white_player": [
                    "int",
                    "type"
                ]
            }
        },
        "experience_simulation": {
            "name": "experience_simulation",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "num_games": [
                    "float",
                    "int",
                    "Optional[int]",
                    "Set[Player]"
                ],
                "agent1": [
                    "bool",
                    "str"
                ],
                "agent2": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "G-second-time/dlgo/rl/__init__.py": {},
    "G-second-time/dlgo/scratches/keras_01.py": {},
    "G-second-time/dlgo/scratches/keras_02.py": {},
    "G-second-time/dlgo/scratches/__init__.py": {},
    "G-second-time/mnist/average_digits.py": {
        "average_digit": {
            "name": "average_digit",
            "location": 7,
            "return": [
                "Dict[str, int]",
                "str",
                "int",
                "List[int]"
            ],
            "arguments": {
                "data": [
                    "bool",
                    "bytes",
                    "bytearray"
                ],
                "digit": [
                    "bool",
                    "bytes",
                    "bytearray"
                ]
            }
        },
        "predict": {
            "name": "predict",
            "location": 32,
            "return": [
                "numpy.ndarray",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "x": [
                    "Tuple[float, float]",
                    "float",
                    "numpy.ndarray",
                    "int"
                ],
                "W": [
                    "Tuple[float, float]",
                    "float",
                    "numpy.ndarray",
                    "int"
                ],
                "b": [
                    "Tuple[float, float]",
                    "float",
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "evaluate": {
            "name": "evaluate",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data": [
                    "int",
                    "bool",
                    "numpy.ndarray",
                    "Sequence[T]",
                    "List[int]"
                ],
                "digit": [
                    "int",
                    "numpy.ndarray",
                    "float"
                ],
                "threshold": [
                    "int",
                    "numpy.ndarray",
                    "float"
                ],
                "W": [
                    "int",
                    "numpy.ndarray",
                    "float"
                ],
                "b": [
                    "int",
                    "numpy.ndarray",
                    "float"
                ]
            }
        }
    },
    "G-second-time/mnist/layers.py": {
        "sigmoid_double": {
            "name": "sigmoid_double",
            "location": 5,
            "return": [
                "bool",
                "numpy.ndarray"
            ],
            "arguments": {
                "x": [
                    "numpy.ndarray",
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "sigmoid": {
            "name": "sigmoid",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "z": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "sigmoid_prime_double": {
            "name": "sigmoid_prime_double",
            "location": 13,
            "return": [
                "str",
                "numpy.ndarray",
                "Optional[int]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int",
                    "numpy.ndarray",
                    "bytes"
                ]
            }
        },
        "sigmoid_prime": {
            "name": "sigmoid_prime",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "z": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Layer.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.connect": {
            "name": "connect",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "layer": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Layer.forward": {
            "name": "forward",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.get_forward_input": {
            "name": "get_forward_input",
            "location": 41,
            "return": [
                "str",
                "bytes",
                "bytearray",
                "Union[bytes, bytearray]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.backward": {
            "name": "backward",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.get_backward_input": {
            "name": "get_backward_input",
            "location": 50,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.clear_deltas": {
            "name": "clear_deltas",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Layer.update_params": {
            "name": "update_params",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "learning_rate": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "Layer.describe": {
            "name": "describe",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ActivationLayer.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_dim": [
                    "int",
                    "float"
                ]
            }
        },
        "ActivationLayer.forward": {
            "name": "forward",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ActivationLayer.backward": {
            "name": "backward",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ActivationLayer.describe": {
            "name": "describe",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DenseLayer.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_dim": [
                    "int",
                    "str"
                ],
                "output_dim": [
                    "int",
                    "List[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "DenseLayer.forward": {
            "name": "forward",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DenseLayer.backward": {
            "name": "backward",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DenseLayer.update_params": {
            "name": "update_params",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rate": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "DenseLayer.clear_deltas": {
            "name": "clear_deltas",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DenseLayer.describe": {
            "name": "describe",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/mnist/load_mnist.py": {
        "encode_label": {
            "name": "encode_label",
            "location": 6,
            "return": [
                "str",
                "dict",
                "Optional[Type[Exception]]",
                "List[str]"
            ],
            "arguments": {
                "j": [
                    "int",
                    "Sequence[Tuple[float, float]]",
                    "Dict[str, str]",
                    "bytes",
                    "Callable[[str], bool]"
                ]
            }
        },
        "shape_data": {
            "name": "shape_data",
            "location": 12,
            "return": [
                "List[str]",
                "bool",
                "int",
                "Hashable"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "str",
                    "Dict[str, float]"
                ]
            }
        },
        "load_data": {
            "name": "load_data",
            "location": 20,
            "return": [
                "int",
                "bytes"
            ],
            "arguments": {}
        }
    },
    "G-second-time/mnist/network.py": {
        "MSE.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MSE.loss_function": {
            "name": "loss_function",
            "location": 12,
            "return": [
                "int",
                "bool",
                "Iterator"
            ],
            "arguments": {
                "predictions": [
                    "str",
                    "list"
                ],
                "labels": [
                    "str",
                    "list"
                ]
            }
        },
        "MSE.loss_derivative": {
            "name": "loss_derivative",
            "location": 17,
            "return": [
                "str",
                "bool",
                "List[Dict]",
                "int"
            ],
            "arguments": {
                "predictions": [
                    "numpy.ndarray",
                    "float",
                    "List[str]",
                    "Sequence[str]"
                ],
                "labels": [
                    "numpy.ndarray",
                    "float",
                    "List[str]",
                    "Sequence[str]"
                ]
            }
        },
        "SequentialNetwork.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "loss": [
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Callable]",
                    "Optional[Hashable]",
                    "int"
                ]
            }
        },
        "SequentialNetwork.add": {
            "name": "add",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "layer": [
                    "float",
                    "int"
                ]
            }
        },
        "SequentialNetwork.train": {
            "name": "train",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "training_data": [
                    "int",
                    "dict",
                    "List[Dict[str, float]]",
                    "Dict[T, int]",
                    "numpy.ndarray"
                ],
                "epochs": [
                    "int",
                    "List[int]",
                    "str"
                ],
                "mini_batch_size": [
                    "int",
                    "Tuple[int, int]",
                    "bytes",
                    "Optional[int]"
                ],
                "learning_rate": [
                    "int",
                    "List[int]",
                    "str"
                ],
                "test_data": [
                    "int",
                    "list",
                    "dict"
                ]
            }
        },
        "SequentialNetwork.train_batch": {
            "name": "train_batch",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mini_batch": [
                    "List[str]",
                    "bool",
                    "int",
                    "List[Dict[str, Any]]",
                    "Dict[str, List[str]]"
                ],
                "learning_rate": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SequentialNetwork.update": {
            "name": "update",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mini_batch": [
                    "str",
                    "int",
                    "List[int]",
                    "list",
                    "bool"
                ],
                "learning_rate": [
                    "list",
                    "int",
                    "Dict[str, List[str]]",
                    "List[int]",
                    "Sequence['cirq.Qid']",
                    "bool"
                ]
            }
        },
        "SequentialNetwork.forward_backward": {
            "name": "forward_backward",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mini_batch": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "SequentialNetwork.single_forward": {
            "name": "single_forward",
            "location": 74,
            "return": [
                "bytes",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "numpy.ndarray",
                    "bool",
                    "int"
                ]
            }
        },
        "SequentialNetwork.evaluate": {
            "name": "evaluate",
            "location": 80,
            "return": [
                "list",
                "numpy.array",
                "List[T]",
                "List[float]",
                "Tuple[int]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "test_data": [
                    "dict",
                    "numpy.ndarray",
                    "List[T]"
                ]
            }
        }
    },
    "G-second-time/mnist/run_network.py": {},
    "G-second-time/mnist/__init__.py": {},
    "G-second-time/mnist/keras/mnist.py": {},
    "G-second-time/tests/test_gotypes.py": {
        "TestPlayer.test_other_correct": {
            "name": "test_other_correct",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPlayer.test_other_error": {
            "name": "test_other_error",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPoint.test_point_correct": {
            "name": "test_point_correct",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPoint.test_point_error": {
            "name": "test_point_error",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPoint.test_neighbor": {
            "name": "test_neighbor",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "G-second-time/tests/__init__.py": {}
}
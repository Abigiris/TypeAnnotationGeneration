{
    "GitkoinNuCypherHackathon-master/setup.py": {
        "VerifyVersionCommand.run": {
            "name": "run",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "GitkoinNuCypherHackathon-master/deploy/ansible/inventory/ec2.py": {
        "Ec2Inventory._empty_inventory": {
            "name": "_empty_inventory",
            "location": 242,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.__init__": {
            "name": "__init__",
            "location": 245,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.is_cache_valid": {
            "name": "is_cache_valid",
            "location": 292,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.read_settings": {
            "name": "read_settings",
            "location": 304,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.parse_cli_args": {
            "name": "parse_cli_args",
            "location": 523,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.do_api_calls_update_cache": {
            "name": "do_api_calls_update_cache",
            "location": 537,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.connect": {
            "name": "connect",
            "location": 556,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "region": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "Ec2Inventory.boto_fix_security_token_in_profile": {
            "name": "boto_fix_security_token_in_profile",
            "location": 565,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "connect_args": [
                    "str",
                    "Exception"
                ]
            }
        },
        "Ec2Inventory.connect_to_aws": {
            "name": "connect_to_aws",
            "location": 572,
            "return": [
                "str",
                "int",
                "Generator"
            ],
            "arguments": {
                "self": [],
                "module": [
                    "int",
                    "bool",
                    "float"
                ],
                "region": [
                    "Optional[float]",
                    "bool",
                    "float",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Ec2Inventory.get_instances_by_region": {
            "name": "get_instances_by_region",
            "location": 593,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "region": [
                    "List[str]"
                ]
            }
        },
        "Ec2Inventory.tags_match_filters": {
            "name": "tags_match_filters",
            "location": 644,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "str",
                    "dict"
                ]
            }
        },
        "Ec2Inventory.get_rds_instances_by_region": {
            "name": "get_rds_instances_by_region",
            "location": 671,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "region": [
                    "int",
                    "Optional[Iterable[T]]",
                    "bool"
                ]
            }
        },
        "Ec2Inventory.include_rds_clusters_by_region": {
            "name": "include_rds_clusters_by_region",
            "location": 713,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "region": [
                    "bytearray"
                ]
            }
        },
        "Ec2Inventory.get_elasticache_clusters_by_region": {
            "name": "get_elasticache_clusters_by_region",
            "location": 776,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "region": [
                    "str",
                    "int"
                ]
            }
        },
        "Ec2Inventory.get_elasticache_replication_groups_by_region": {
            "name": "get_elasticache_replication_groups_by_region",
            "location": 819,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "region": [
                    "str",
                    "int"
                ]
            }
        },
        "Ec2Inventory.get_auth_error_message": {
            "name": "get_auth_error_message",
            "location": 853,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.fail_with_error": {
            "name": "fail_with_error",
            "location": 870,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "err_msg": [
                    "str",
                    "float",
                    "int",
                    "Optional[str]"
                ],
                "err_operation": [
                    "str",
                    "Tuple['cirq.Qid']",
                    "float"
                ]
            }
        },
        "Ec2Inventory.get_instance": {
            "name": "get_instance",
            "location": 878,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "region": [
                    "bytes",
                    "List[int]",
                    "str"
                ],
                "instance_id": [
                    "str",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "Ec2Inventory.add_instance": {
            "name": "add_instance",
            "location": 886,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "dict"
                ],
                "region": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "Ec2Inventory.add_rds_instance": {
            "name": "add_rds_instance",
            "location": 1081,
            "return": [
                "Callable[[], Dict[str, object]]",
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Union[int, str]"
                ],
                "region": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "Ec2Inventory.add_elasticache_cluster": {
            "name": "add_elasticache_cluster",
            "location": 1202,
            "return": [
                "Callable[[], Dict[str, object]]",
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "cluster": [],
                "region": [
                    "int"
                ]
            }
        },
        "Ec2Inventory.add_elasticache_node": {
            "name": "add_elasticache_node",
            "location": 1301,
            "return": [
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "node": [],
                "cluster": [
                    "dict",
                    "type"
                ],
                "region": [
                    "bytes",
                    "int"
                ]
            }
        },
        "Ec2Inventory.add_elasticache_replication_group": {
            "name": "add_elasticache_replication_group",
            "location": 1388,
            "return": [
                "Callable[[], Dict[str, object]]",
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "replication_group": [
                    "int",
                    "Type"
                ],
                "region": [
                    "str",
                    "List[List[Any]]",
                    "List[str]"
                ]
            }
        },
        "Ec2Inventory.get_route53_records": {
            "name": "get_route53_records",
            "location": 1441,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.get_instance_route53_names": {
            "name": "get_instance_route53_names",
            "location": 1468,
            "return": [
                "str",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "Iterable[Dict[str, Any]]",
                    "Union[Sequence[str], Sequence[int]]",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "Ec2Inventory.get_host_info_dict_from_instance": {
            "name": "get_host_info_dict_from_instance",
            "location": 1489,
            "return": [
                "str",
                "bool",
                "Type[T]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Ec2Inventory.get_host_info_dict_from_describe_dict": {
            "name": "get_host_info_dict_from_describe_dict",
            "location": 1542,
            "return": [
                "str",
                "dict",
                "Optional[str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "describe_dict": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, List[Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "Ec2Inventory.get_host_info": {
            "name": "get_host_info",
            "location": 1627,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.push": {
            "name": "push",
            "location": 1646,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "my_dict": [
                    "dict",
                    "str",
                    "Callable"
                ],
                "key": [
                    "dict",
                    "str",
                    "Callable"
                ],
                "element": [
                    "List[str]",
                    "int",
                    "dict",
                    "Optional[Callable]"
                ]
            }
        },
        "Ec2Inventory.push_group": {
            "name": "push_group",
            "location": 1656,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "my_dict": [
                    "dict",
                    "Dict[str, List[Any]]",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "key": [
                    "dict",
                    "Dict[str, List[Any]]",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "element": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "Ec2Inventory.get_inventory_from_cache": {
            "name": "get_inventory_from_cache",
            "location": 1665,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.load_index_from_cache": {
            "name": "load_index_from_cache",
            "location": 1673,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Ec2Inventory.write_to_cache": {
            "name": "write_to_cache",
            "location": 1679,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict",
                    "Dict[str, float]",
                    "bytes",
                    "List[str]",
                    "Mapping[str, Any]"
                ],
                "filename": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Ec2Inventory.uncammelize": {
            "name": "uncammelize",
            "location": 1686,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "T",
                    "KT",
                    "Union[int, slice]",
                    "bytes"
                ]
            }
        },
        "Ec2Inventory.to_safe": {
            "name": "to_safe",
            "location": 1690,
            "return": [
                "bool",
                "List[Dict[str, str]]",
                "list",
                "Tuple[Sequence]",
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str",
                    "int",
                    "List[str]",
                    "Tuple[float, float]"
                ]
            }
        },
        "Ec2Inventory.json_format_dict": {
            "name": "json_format_dict",
            "location": 1697,
            "return": [
                "bool",
                "Dict[str, Any]",
                "int",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, str]"
                ],
                "pretty": [
                    "bool",
                    "Optional[bool]",
                    "list",
                    "memoryview",
                    "Iterable[bytes]",
                    "List[Dict]"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/examples/finnegans_wake_demo/api.py": {
        "json_updt": {
            "name": "json_updt",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "section": [
                    "int",
                    "bytes"
                ],
                "new_data": [
                    "int",
                    "bytes"
                ]
            }
        },
        "read_in": {
            "name": "read_in",
            "location": 66,
            "return": [
                "str",
                "Iterator[T]"
            ],
            "arguments": {}
        },
        "getAlice": {
            "name": "getAlice",
            "location": 70,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "getBob": {
            "name": "getBob",
            "location": 78,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "GitkoinNuCypherHackathon-master/examples/finnegans_wake_demo/finnegans-wake-verbose-demo.py": {
        "simpleObserver": {
            "name": "simpleObserver",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "event": [
                    "str",
                    "config.Config",
                    "float",
                    "List[Dict[str, Any]]",
                    "int",
                    "dict"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/examples/finnegans_wake_demo/lastpass.py": {
        "json_updt": {
            "name": "json_updt",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "section": [
                    "int",
                    "bytes"
                ],
                "new_data": [
                    "int",
                    "bytes"
                ]
            }
        },
        "read_in": {
            "name": "read_in",
            "location": 66,
            "return": [
                "str",
                "Iterator[T]"
            ],
            "arguments": {}
        },
        "getAlice": {
            "name": "getAlice",
            "location": 70,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "getBob": {
            "name": "getBob",
            "location": 78,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "GitkoinNuCypherHackathon-master/examples/finnegans_wake_demo/run_federated_ursula.py": {
        "spin_up_ursula": {
            "name": "spin_up_ursula",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "rest_port": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "db_name": [
                    "str"
                ],
                "teachers": [
                    "str"
                ],
                "certificate_dir": [
                    "str"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/examples/finnegans_wake_demo/examples-runtime-cruft/finnegans-wake-demo/api.py": {
        "json_updt": {
            "name": "json_updt",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "section": [
                    "int",
                    "bytes"
                ],
                "new_data": [
                    "int",
                    "bytes"
                ]
            }
        },
        "read_in": {
            "name": "read_in",
            "location": 66,
            "return": [
                "str",
                "Iterator[T]"
            ],
            "arguments": {}
        },
        "getAlice": {
            "name": "getAlice",
            "location": 70,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "getBob": {
            "name": "getBob",
            "location": 78,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/cli.py": {
        "echo_version": {
            "name": "echo_version",
            "location": 322,
            "return": [
                "Set[str]"
            ],
            "arguments": {
                "ctx": [
                    "click.Context",
                    "Dict[str, Any]"
                ],
                "param": [
                    "bool",
                    "click.Parameter",
                    "Union[click.Option, click.Parameter]",
                    "Tuple[str]",
                    "click.Context"
                ],
                "value": [
                    "click.Context",
                    "Dict[str, Any]"
                ]
            }
        },
        "cli": {
            "name": "cli",
            "location": 383,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Optional[pyramid.config.Configurator]"
                ],
                "verbose": [
                    "bool",
                    "str"
                ],
                "dev": [
                    "Dict[str, str]",
                    "bool"
                ],
                "federated_only": [
                    "Optional[Dict]",
                    "Dict[str, str]",
                    "config.Config"
                ],
                "config_root": [
                    "str",
                    "baseplate.lib.config.RawConfig"
                ],
                "config_file": [
                    "str",
                    "Optional[str]",
                    "Set[str]",
                    "Dict[str, Any]",
                    "neuromation.api.config._AuthConfig",
                    "Callable"
                ],
                "metadata_dir": [
                    "str",
                    "Optional[str]",
                    "neuromation.api.config._AuthConfig"
                ],
                "provider_uri": [
                    "Optional[Dict]",
                    "Dict[str, str]",
                    "config.Config"
                ],
                "registry_filepath": [
                    "Optional[Dict]",
                    "Dict[str, str]",
                    "config.Config"
                ],
                "deployer": [
                    "Optional[Dict]",
                    "Dict[str, str]",
                    "config.Config"
                ],
                "compile": [
                    "str",
                    "Dict[str, Any]"
                ],
                "poa": [
                    "Optional[Dict]",
                    "Dict[str, str]",
                    "config.Config"
                ]
            }
        },
        "configure": {
            "name": "configure",
            "location": 427,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "sphinx.config.Config",
                    "str",
                    "cerise.config.Config",
                    "dict"
                ],
                "action": [
                    "str",
                    "Dict[str, Any]"
                ],
                "rest_host": [
                    "sphinx.config.Config",
                    "dict",
                    "str",
                    "cerise.config.Config",
                    "NamedTuple"
                ],
                "no_registry": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "Optional[List[Any]]",
                    "dict",
                    "config.Config"
                ],
                "force": [
                    "str",
                    "Optional[Dict[str, str]]",
                    "Optional[List[Any]]",
                    "dict",
                    "config.Config"
                ]
            }
        },
        "accounts": {
            "name": "accounts",
            "location": 466,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "str",
                    "Optional[str]"
                ],
                "action": [
                    "Callable",
                    "str",
                    "bool"
                ],
                "checksum_address": [
                    "str"
                ]
            }
        },
        "stake": {
            "name": "stake",
            "location": 562,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "str",
                    "Dict[str, Any]",
                    "Mapping[str, str]",
                    "Mapping"
                ],
                "action": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "List[Dict]"
                ],
                "checksum_address": [
                    "Dict[str, Any]"
                ],
                "index": [
                    "str",
                    "Optional[List[str]]",
                    "dict"
                ],
                "value": [
                    "str",
                    "Optional[int]",
                    "bool",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "int"
                ],
                "duration": [
                    "Optional[str]",
                    "dict",
                    "float"
                ]
            }
        },
        "deploy": {
            "name": "deploy",
            "location": 724,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "str",
                    "bool",
                    "list"
                ],
                "action": [
                    "str",
                    "bool",
                    "list"
                ],
                "deployer_address": [
                    "str",
                    "bool",
                    "list"
                ],
                "contract_name": [
                    "str",
                    "Dict[str, Any]",
                    "Type[config.Config]",
                    "Union[int, str]",
                    "bool",
                    "Optional[str]"
                ],
                "registry_outfile": [
                    "str",
                    "bool",
                    "list"
                ],
                "force": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "status": {
            "name": "status",
            "location": 872,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "dict",
                    "pyramid.config.Configurator"
                ]
            }
        },
        "ursula": {
            "name": "ursula",
            "location": 970,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "dict",
                    "opentrons.config.robot_configs.robot_config",
                    "str",
                    "\"Step\"",
                    "bool"
                ],
                "action": [
                    "str",
                    "bool",
                    "dict"
                ],
                "rest_port": [
                    "str",
                    "bool",
                    "dict"
                ],
                "rest_host": [
                    "str",
                    "bool",
                    "dict"
                ],
                "db_name": [
                    "str",
                    "bool",
                    "dict"
                ],
                "checksum_address": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Set[str]",
                    "Dict[str, Dict[str, Any]]"
                ],
                "debug": [
                    "str",
                    "bool",
                    "dict"
                ],
                "teacher_uri": [
                    "str",
                    "bool"
                ],
                "min_stake": [
                    "Tuple[Optional[float], Optional[float]]",
                    "dcos_e2e.node.Output",
                    "Dict[str, Any]"
                ]
            }
        },
        "NucypherClickConfig.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherClickConfig.get_node_configuration": {
            "name": "get_node_configuration",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "configuration_class": [
                    "int",
                    "Optional[\"PNSqlCursor\"]"
                ]
            }
        },
        "NucypherClickConfig.connect_to_blockchain": {
            "name": "connect_to_blockchain",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherClickConfig.connect_to_contracts": {
            "name": "connect_to_contracts",
            "location": 165,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherClickConfig.create_account": {
            "name": "create_account",
            "location": 172,
            "return": [
                "set",
                "Sequence[str]",
                "list",
                "type"
            ],
            "arguments": {
                "self": [],
                "passphrase": [
                    "str",
                    "dict"
                ]
            }
        },
        "NucypherClickConfig._collect_pending_configuration_details": {
            "name": "_collect_pending_configuration_details",
            "location": 196,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "force": [
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ],
                "rest_host": [
                    "Mapping[str, Any]",
                    "constants.Rank"
                ]
            }
        },
        "NucypherClickConfig.create_new_configuration": {
            "name": "create_new_configuration",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "str",
                    "dict",
                    "int",
                    "float"
                ],
                "force": [
                    "str",
                    "dict",
                    "int",
                    "float"
                ],
                "rest_host": [
                    "dict",
                    "int",
                    "bool",
                    "Optional[float]"
                ],
                "no_registry": [
                    "Optional[Dict[str, Any]]",
                    "MutableMapping",
                    "dict"
                ]
            }
        },
        "NucypherClickConfig.forget_nodes": {
            "name": "forget_nodes",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherClickConfig.destroy_configuration": {
            "name": "destroy_configuration",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChecksumAddress.convert": {
            "name": "convert",
            "location": 336,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int"
                ],
                "param": [
                    "str",
                    "int"
                ],
                "ctx": [
                    "str",
                    "int"
                ]
            }
        },
        "IPv4Address.convert": {
            "name": "convert",
            "location": 345,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[str]"
                ],
                "param": [
                    "Optional[click.Parameter]",
                    "Optional[click.Context]",
                    "str"
                ],
                "ctx": [
                    "Optional[click.Parameter]",
                    "Optional[click.Context]",
                    "str"
                ]
            }
        },
        "accounts.__collect_transfer_details": {
            "name": "__collect_transfer_details",
            "location": 483,
            "return": [
                "float",
                "str",
                "models.characters.mods_base.SlotTypes"
            ],
            "arguments": {
                "denomination": [
                    "str",
                    "List[str]",
                    "MutableMapping[str, Any]"
                ]
            }
        },
        "deploy.__get_deployers": {
            "name": "__get_deployers",
            "location": 736,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {}
        },
        "ursula.__make_ursula": {
            "name": "__make_ursula",
            "location": 998,
            "return": [
                "str",
                "Optional[Any]",
                "Iterable",
                "Dict[str, Any]",
                "bool",
                "Callable[..., None]"
            ],
            "arguments": {}
        },
        "NucypherClickConfig.forget_nodes.__destroy_dir_contents": {
            "name": "__destroy_dir_contents",
            "location": 284,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "deploy.__deploy_contract": {
            "name": "__deploy_contract",
            "location": 778,
            "return": [
                "int",
                "Sequence[str]"
            ],
            "arguments": {
                "deployer_class": [
                    "Type[Any]",
                    "Optional[bytes]",
                    "bool",
                    "Optional[str]"
                ],
                "upgradeable": [
                    "bool",
                    "type",
                    "str",
                    "Callable[[int], None]"
                ],
                "agent_name": [
                    "str",
                    "List[str]",
                    "bool",
                    "type"
                ],
                "dependant": [
                    "str",
                    "Optional[bool]",
                    "Optional[Union['AbstractSetIntStr', 'MappingIntStrAny']]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "int"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/data_sources.py": {
        "DataSource.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "policy_pubkey_enc": [
                    "float",
                    "int"
                ],
                "signing_keypair": [
                    "float",
                    "int"
                ],
                "label": [
                    "float",
                    "int"
                ]
            }
        },
        "DataSource.encapsulate_single_message": {
            "name": "encapsulate_single_message",
            "location": 35,
            "return": [
                "list",
                "str",
                "bytes",
                "Tuple[nucypher.crypto.kits.UmbralMessageKit, umbral.signing.Signature]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "int"
                ]
            }
        },
        "DataSource.from_public_keys": {
            "name": "from_public_keys",
            "location": 43,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "Optional[str]",
                    "bytes",
                    "keys.GlobalKeys",
                    "Optional[Union[str, int]]",
                    "str"
                ],
                "policy_public_key": [
                    "Optional[str]",
                    "bytes",
                    "keys.GlobalKeys",
                    "Optional[Union[str, int]]",
                    "str"
                ],
                "datasource_public_key": [
                    "bytes",
                    "Optional[bytes]",
                    "Union[Mapping, str]",
                    "keys.NamespaceKeys",
                    "str"
                ],
                "label": [
                    "Optional[str]",
                    "bytes",
                    "keys.GlobalKeys",
                    "Optional[Union[str, int]]",
                    "str"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/__about__.py": {},
    "GitkoinNuCypherHackathon-master/nucypher/__init__.py": {},
    "GitkoinNuCypherHackathon-master/nucypher/blockchain/economics.py": {
        "Economics.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "initial_supply": [
                    "bool",
                    "Dict[str, Any]",
                    "dict"
                ],
                "initial_inflation": [
                    "bool",
                    "Dict[str, Any]",
                    "dict"
                ],
                "T_half": [
                    "bool",
                    "Dict[str, Any]",
                    "dict"
                ],
                "T_sat": [
                    "bool",
                    "Dict[str, Any]",
                    "dict"
                ],
                "small_staker_multiplier": [
                    "bool",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/blockchain/__init__.py": {},
    "GitkoinNuCypherHackathon-master/nucypher/blockchain/eth/actors.py": {
        "only_me": {
            "name": "only_me",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "only_me.wrapped": {
            "name": "wrapped",
            "location": 43,
            "return": [
                "int",
                "str",
                "eth.vm.computation.BaseComputation"
            ],
            "arguments": {
                "actor": [
                    "str",
                    "int"
                ]
            }
        },
        "NucypherTokenActor.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "blockchain": [
                    "Optional[int]",
                    "Optional[str]",
                    "List[\"InlineContent\"]",
                    "Callable",
                    "Optional[List[Any]]"
                ]
            }
        },
        "NucypherTokenActor.__repr__": {
            "name": "__repr__",
            "location": 84,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherTokenActor.eth_balance": {
            "name": "eth_balance",
            "location": 91,
            "return": [
                "Sequence[int]",
                "int",
                "List[List[int]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherTokenActor.token_balance": {
            "name": "token_balance",
            "location": 97,
            "return": [
                "Sequence[int]",
                "int",
                "List[List[int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deployer.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blockchain": [
                    "dict",
                    "Dict[str, Any]",
                    "trezor.utils.Writer",
                    "str"
                ],
                "deployer_address": [
                    "bool",
                    "str",
                    "int",
                    "List[str]"
                ],
                "allocation_registry": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ],
                "bare": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "Deployer.from_blockchain": {
            "name": "from_blockchain",
            "location": 128,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "cls": [
                    "Sequence[str]",
                    "Exception",
                    "Optional[BaseException]",
                    "Dict[str, Any]"
                ],
                "provider_uri": [
                    "str",
                    "Callable",
                    "utils.types.Box3D"
                ],
                "registry": [
                    "str",
                    "Callable",
                    "utils.types.Box3D"
                ]
            }
        },
        "Deployer.deployer_address": {
            "name": "deployer_address",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Deployer.token_balance": {
            "name": "token_balance",
            "location": 143,
            "return": [
                "str",
                "List[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deployer.deploy_token_contract": {
            "name": "deploy_token_contract",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Deployer.deploy_miner_contract": {
            "name": "deploy_miner_contract",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "secret": [
                    "int",
                    "List[bool]",
                    "Optional[int]",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "Deployer.deploy_policy_contract": {
            "name": "deploy_policy_contract",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "secret": [
                    "int",
                    "List[bool]",
                    "Optional[int]",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "Deployer.deploy_escrow_proxy": {
            "name": "deploy_escrow_proxy",
            "location": 171,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "secret": [
                    "str",
                    "Callable",
                    "bool"
                ]
            }
        },
        "Deployer.deploy_user_escrow": {
            "name": "deploy_user_escrow",
            "location": 179,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Deployer.deploy_network_contracts": {
            "name": "deploy_network_contracts",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "miner_secret": [
                    "str",
                    "raiden.utils.List[raiden.transfer.mediated_transfer.state.MediationPairState]",
                    "bytes",
                    "int",
                    "bool"
                ],
                "policy_secret": [
                    "str",
                    "raiden.utils.List[raiden.transfer.mediated_transfer.state.MediationPairState]",
                    "bytes",
                    "int",
                    "bool"
                ]
            }
        },
        "Deployer.deploy_beneficiary_contracts": {
            "name": "deploy_beneficiary_contracts",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "allocations": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Deployer.__read_allocation_data": {
            "name": "__read_allocation_data",
            "location": 212,
            "return": [
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "IO[bytes]",
                "bool",
                "dict",
                "Optional[Dict[str, Any]]",
                "str",
                "Dict[str, List[int]]"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "int",
                    "bytes",
                    "Generator"
                ]
            }
        },
        "Deployer.deploy_beneficiaries_from_file": {
            "name": "deploy_beneficiaries_from_file",
            "location": 221,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "allocation_data_filepath": [
                    "str",
                    "bytes",
                    "dict",
                    "Dict[str, List[Any]]"
                ]
            }
        },
        "Miner.__init__": {
            "name": "__init__",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_me": [
                    "bool",
                    "int",
                    "float"
                ]
            }
        },
        "Miner.stake": {
            "name": "stake",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "confirm_now": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "resume": [
                    "bool",
                    "str",
                    "registry.CollectorRegistry",
                    "dict",
                    "Dict[str, Any]",
                    "int"
                ],
                "expiration": [
                    "str",
                    "float"
                ],
                "lock_periods": [
                    "bool",
                    "str",
                    "float",
                    "List['cirq.Qid']"
                ]
            }
        },
        "Miner._confirm_period": {
            "name": "_confirm_period",
            "location": 297,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Miner._crash_gracefully": {
            "name": "_crash_gracefully",
            "location": 315,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "failure": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Miner.handle_staking_errors": {
            "name": "handle_staking_errors",
            "location": 324,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Miner.start_staking_loop": {
            "name": "start_staking_loop",
            "location": 333,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "now": [
                    "bool",
                    "Optional[Callable]",
                    "str"
                ]
            }
        },
        "Miner.is_staking": {
            "name": "is_staking",
            "location": 343,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Miner.locked_tokens": {
            "name": "locked_tokens",
            "location": 348,
            "return": [
                "str",
                "bool",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Miner.stakes": {
            "name": "stakes",
            "location": 353,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Miner.deposit": {
            "name": "deposit",
            "location": 359,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "str",
                    "float"
                ],
                "lock_periods": [
                    "int",
                    "nucypher.blockchain.eth.token.NU",
                    "Optional[float]",
                    "datetime.datetime",
                    "str"
                ]
            }
        },
        "Miner.divide_stake": {
            "name": "divide_stake",
            "location": 373,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "stake_index": [
                    "dict",
                    "Optional[int]",
                    "int",
                    "Optional[bool]",
                    "List[str]",
                    "str",
                    "raiden.utils.Address"
                ],
                "target_value": [
                    "int",
                    "str",
                    "bool",
                    "float"
                ],
                "additional_periods": [
                    "datetime.datetime",
                    "int",
                    "Optional[datetime.datetime]",
                    "maya.MayaDT",
                    "str",
                    "datetime.date.time"
                ],
                "expiration": [
                    "int",
                    "datetime.datetime",
                    "Optional[datetime.datetime]",
                    "maya.MayaDT",
                    "datetime.timedelta",
                    "str"
                ]
            }
        },
        "Miner.__validate_stake": {
            "name": "__validate_stake",
            "location": 417,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "Union[str, float]",
                    "nucypher.blockchain.eth.token.NU",
                    "float"
                ],
                "lock_periods": [
                    "int",
                    "str"
                ]
            }
        },
        "Miner.initialize_stake": {
            "name": "initialize_stake",
            "location": 428,
            "return": [
                "str",
                "Dict[str, Any]",
                "Pattern"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "nucypher.types.Period.Delta",
                    "nucypher.types.NuNits",
                    "int",
                    "nucypher.blockchain.eth.token.NU",
                    "str"
                ],
                "lock_periods": [
                    "int",
                    "str",
                    "raiden.utils.PaymentWithFeeAmount",
                    "raiden.utils.Balance"
                ],
                "expiration": [
                    "int",
                    "str",
                    "float"
                ],
                "entire_balance": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "Miner.confirm_activity": {
            "name": "confirm_activity",
            "location": 470,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Miner.mint": {
            "name": "mint",
            "location": 479,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Miner.collect_policy_reward": {
            "name": "collect_policy_reward",
            "location": 488,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "policy_manager": [
                    "eth.abc.MessageAPI",
                    "bytes",
                    "maya.MayaDT"
                ]
            }
        },
        "Miner.collect_staking_reward": {
            "name": "collect_staking_reward",
            "location": 497,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "collector_address": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "PolicyAuthor.__init__": {
            "name": "__init__",
            "location": 509,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "PolicyAuthor.recruit": {
            "name": "recruit",
            "location": 522,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "quantity": [
                    "Dict[str, Dict]",
                    "bool"
                ]
            }
        },
        "PolicyAuthor.create_policy": {
            "name": "create_policy",
            "location": 534,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/blockchain/eth/agents.py": {
        "EthereumContractAgent.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blockchain": [
                    "Optional[int]"
                ],
                "contract": [
                    "Optional[int]"
                ]
            }
        },
        "EthereumContractAgent.__repr__": {
            "name": "__repr__",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumContractAgent.__eq__": {
            "name": "__eq__",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "Callable[[dict], None]",
                    "str"
                ]
            }
        },
        "EthereumContractAgent.contract": {
            "name": "contract",
            "location": 70,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumContractAgent.contract_address": {
            "name": "contract_address",
            "location": 74,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumContractAgent.contract_name": {
            "name": "contract_name",
            "location": 78,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherTokenAgent.get_balance": {
            "name": "get_balance",
            "location": 86,
            "return": [
                "List['mypy.types.Type']",
                "Type",
                "Type[T]"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "Optional[str]",
                    "Dict[str, Any]",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "NucypherTokenAgent.approve_transfer": {
            "name": "approve_transfer",
            "location": 91,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "dict",
                    "Callable",
                    "Sequence[Any]",
                    "Optional[int]",
                    "str"
                ],
                "target_address": [
                    "int",
                    "dict",
                    "Callable",
                    "Sequence[Any]",
                    "Optional[int]",
                    "str"
                ],
                "sender_address": [
                    "int",
                    "dict",
                    "Callable",
                    "Sequence[Any]",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "NucypherTokenAgent.transfer": {
            "name": "transfer",
            "location": 100,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "str",
                    "constants.SeekBehavior",
                    "List[tuple]"
                ],
                "target_address": [
                    "int",
                    "str",
                    "constants.SeekBehavior",
                    "List[tuple]"
                ],
                "sender_address": [
                    "int",
                    "str",
                    "constants.SeekBehavior",
                    "List[tuple]"
                ]
            }
        },
        "MinerAgent.get_miner_population": {
            "name": "get_miner_population",
            "location": 122,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinerAgent.get_current_period": {
            "name": "get_current_period",
            "location": 126,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinerAgent.get_locked_tokens": {
            "name": "get_locked_tokens",
            "location": 134,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "miner_address": [
                    "int",
                    "float",
                    "Dict[int, dict]"
                ],
                "periods": [
                    "int",
                    "float",
                    "Dict[int, dict]"
                ]
            }
        },
        "MinerAgent.owned_tokens": {
            "name": "owned_tokens",
            "location": 142,
            "return": [
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "constants.TransactionType",
                    "int"
                ]
            }
        },
        "MinerAgent.get_stake_info": {
            "name": "get_stake_info",
            "location": 145,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "miner_address": [
                    "dict",
                    "str"
                ],
                "stake_index": [
                    "dict",
                    "str"
                ]
            }
        },
        "MinerAgent.get_all_stakes": {
            "name": "get_all_stakes",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "miner_address": [
                    "int",
                    "bytes"
                ]
            }
        },
        "MinerAgent.deposit_tokens": {
            "name": "deposit_tokens",
            "location": 155,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "Dict[str, Any]",
                    "T",
                    "str"
                ],
                "lock_periods": [
                    "int",
                    "Dict[str, Any]",
                    "T",
                    "str"
                ],
                "sender_address": [
                    "int",
                    "Dict[str, Any]",
                    "T",
                    "str"
                ]
            }
        },
        "MinerAgent.divide_stake": {
            "name": "divide_stake",
            "location": 162,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "miner_address": [
                    "Dict[str, Any]"
                ],
                "stake_index": [
                    "Dict[str, Any]"
                ],
                "target_value": [
                    "Dict[str, Any]"
                ],
                "periods": [
                    "Dict[str, Any]"
                ]
            }
        },
        "MinerAgent.confirm_activity": {
            "name": "confirm_activity",
            "location": 170,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "node_address": []
            }
        },
        "MinerAgent.mint": {
            "name": "mint",
            "location": 177,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "node_address": [
                    "str",
                    "dict"
                ]
            }
        },
        "MinerAgent.collect_staking_reward": {
            "name": "collect_staking_reward",
            "location": 188,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "collector_address": [
                    "str",
                    "slice",
                    "web3.contracContract"
                ]
            }
        },
        "MinerAgent.swarm": {
            "name": "swarm",
            "location": 204,
            "return": [
                "typing.Union[typing.Generator[builtins.str, None, None], typing.Generator[builtins.str, None, None]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinerAgent.sample": {
            "name": "sample",
            "location": 216,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "quantity": [
                    "List['cirq.Qid']",
                    "float"
                ],
                "duration": [
                    "int",
                    "Union[int, slice]"
                ],
                "additional_ursulas": [
                    "int",
                    "Callable",
                    "str"
                ],
                "attempts": [
                    "str",
                    "int"
                ]
            }
        },
        "PolicyAgent.create_policy": {
            "name": "create_policy",
            "location": 256,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "policy_id": [
                    "int",
                    "Optional[\"UserProvidedIdentifiers\"]",
                    "str",
                    "bool"
                ],
                "author_address": [
                    "int",
                    "Optional[\"UserProvidedIdentifiers\"]",
                    "str",
                    "bool"
                ],
                "value": [
                    "int",
                    "Optional[\"UserProvidedIdentifiers\"]",
                    "str",
                    "bool"
                ],
                "periods": [
                    "int",
                    "Optional[\"UserProvidedIdentifiers\"]",
                    "str",
                    "bool"
                ],
                "initial_reward": [
                    "int",
                    "Optional[\"UserProvidedIdentifiers\"]",
                    "str",
                    "bool"
                ],
                "node_addresses": [
                    "int",
                    "Optional[\"UserProvidedIdentifiers\"]",
                    "str",
                    "bool"
                ]
            }
        },
        "PolicyAgent.fetch_policy": {
            "name": "fetch_policy",
            "location": 272,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "policy_id": [
                    "Optional[bool]",
                    "str"
                ]
            }
        },
        "PolicyAgent.revoke_policy": {
            "name": "revoke_policy",
            "location": 277,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "policy_id": [
                    "str",
                    "int"
                ],
                "author_address": [
                    "str",
                    "int"
                ]
            }
        },
        "PolicyAgent.collect_policy_reward": {
            "name": "collect_policy_reward",
            "location": 283,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "collector_address": [
                    "int",
                    "bool",
                    "web3.contracContract",
                    "str"
                ]
            }
        },
        "PolicyAgent.fetch_policy_arrangements": {
            "name": "fetch_policy_arrangements",
            "location": 289,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "policy_id": [
                    "int",
                    "str"
                ]
            }
        },
        "PolicyAgent.revoke_arrangement": {
            "name": "revoke_arrangement",
            "location": 295,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "policy_id": [
                    "str",
                    "int"
                ],
                "node_address": [
                    "str",
                    "int"
                ],
                "author_address": [
                    "str",
                    "int"
                ]
            }
        },
        "PolicyAgent.calculate_refund": {
            "name": "calculate_refund",
            "location": 300,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "policy_id": [
                    "int",
                    "str"
                ],
                "author_address": [
                    "int",
                    "str"
                ]
            }
        },
        "PolicyAgent.collect_refund": {
            "name": "collect_refund",
            "location": 305,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "policy_id": [
                    "str",
                    "int"
                ],
                "author_address": [
                    "str",
                    "int"
                ]
            }
        },
        "UserEscrowAgent.__init__": {
            "name": "__init__",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "beneficiary": [
                    "int",
                    "bool",
                    "float"
                ],
                "blockchain": [
                    "dict"
                ],
                "allocation_registry": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "UserEscrowAgent.__read_proxy": {
            "name": "__read_proxy",
            "location": 345,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowAgent.__fetch_principal_contract": {
            "name": "__fetch_principal_contract",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract_address": [
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "UserEscrowAgent.__set_owner": {
            "name": "__set_owner",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowAgent.__read_principal": {
            "name": "__read_principal",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "contract_address": [
                    "int",
                    "List[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "UserEscrowAgent.owner": {
            "name": "owner",
            "location": 371,
            "return": [
                "bytes",
                "str",
                "Sequence[Sequence[str]]",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowAgent.beneficiary": {
            "name": "beneficiary",
            "location": 376,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowAgent.proxy_contract": {
            "name": "proxy_contract",
            "location": 380,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowAgent.principal_contract": {
            "name": "principal_contract",
            "location": 386,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowAgent.unvested_tokens": {
            "name": "unvested_tokens",
            "location": 393,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowAgent.end_timestamp": {
            "name": "end_timestamp",
            "location": 397,
            "return": [
                "Optional[int]",
                "eth.vm.computation.BaseComputation",
                "int",
                "str",
                "bool",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowAgent.lock": {
            "name": "lock",
            "location": 400,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "bool",
                    "nucypher.types.Period.Delta",
                    "nucypher.types.NuNits",
                    "Callable"
                ],
                "periods": [
                    "int",
                    "bool",
                    "nucypher.types.Period.Delta",
                    "nucypher.types.NuNits",
                    "Callable"
                ]
            }
        },
        "UserEscrowAgent.withdraw_tokens": {
            "name": "withdraw_tokens",
            "location": 405,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "UserEscrowAgent.withdraw_eth": {
            "name": "withdraw_eth",
            "location": 410,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowAgent.deposit_as_miner": {
            "name": "deposit_as_miner",
            "location": 415,
            "return": [
                "tuple",
                "Tuple[str, str, str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "T",
                    "int"
                ],
                "periods": [
                    "str",
                    "T",
                    "int"
                ]
            }
        },
        "UserEscrowAgent.withdraw_as_miner": {
            "name": "withdraw_as_miner",
            "location": 420,
            "return": [
                "tuple",
                "Tuple[str, str, str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "UserEscrowAgent.confirm_activity": {
            "name": "confirm_activity",
            "location": 425,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowAgent.mint": {
            "name": "mint",
            "location": 430,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowAgent.collect_policy_reward": {
            "name": "collect_policy_reward",
            "location": 435,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowAgent.set_min_reward_rate": {
            "name": "set_min_reward_rate",
            "location": 440,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "rate": [
                    "str",
                    "tuple"
                ]
            }
        },
        "UserEscrowAgent.UserEscrowProxyAgent._generate_beneficiary_agency": {
            "name": "_generate_beneficiary_agency",
            "location": 323,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "principal_address": [
                    "str",
                    "bool",
                    "int",
                    "nucypher.types.Period"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/blockchain/eth/chains.py": {
        "Blockchain.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "interface": [
                    "Optional[float]",
                    "Optional[bool]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Blockchain.__repr__": {
            "name": "__repr__",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blockchain.interface": {
            "name": "interface",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blockchain.connect": {
            "name": "connect",
            "location": 62,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Union[int, float]"
                ],
                "provider_uri": [
                    "float",
                    "Type"
                ],
                "registry": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[..., Awaitable]",
                    "str"
                ],
                "deployer": [
                    "int",
                    "Dict[str, Tuple[str, str, Any]]",
                    "bool",
                    "Dict[str, Tuple[str, int, int]]",
                    "str",
                    "Dict[int, str]"
                ],
                "compile": [
                    "bool",
                    "Mapping[Any, Any]",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "Blockchain.get_contract": {
            "name": "get_contract",
            "location": 83,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Blockchain.wait_for_receipt": {
            "name": "wait_for_receipt",
            "location": 90,
            "return": [
                "int",
                "bool",
                "Dict[str, int]",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "txhash": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "float",
                    "str"
                ],
                "timeout": [
                    "Optional[float]",
                    "Optional[Any]"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/blockchain/eth/constants.py": {},
    "GitkoinNuCypherHackathon-master/nucypher/blockchain/eth/deployers.py": {
        "ContractDeployer.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deployer_address": [
                    "bool",
                    "str",
                    "int",
                    "List[str]"
                ],
                "blockchain": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ]
            }
        },
        "ContractDeployer.contract_address": {
            "name": "contract_address",
            "location": 60,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractDeployer.deployer_address": {
            "name": "deployer_address",
            "location": 67,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractDeployer.contract": {
            "name": "contract",
            "location": 71,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractDeployer.dispatcher": {
            "name": "dispatcher",
            "location": 75,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractDeployer.is_deployed": {
            "name": "is_deployed",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractDeployer.ready_to_deploy": {
            "name": "ready_to_deploy",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractDeployer.check_deployment_readiness": {
            "name": "check_deployment_readiness",
            "location": 86,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "fail": [
                    "bool"
                ]
            }
        },
        "ContractDeployer._ensure_contract_deployment": {
            "name": "_ensure_contract_deployment",
            "location": 119,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractDeployer.deploy": {
            "name": "deploy",
            "location": 128,
            "return": [
                "builtins.dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContractDeployer.make_agent": {
            "name": "make_agent",
            "location": 135,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherTokenDeployer.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deployer_address": [
                    "str"
                ]
            }
        },
        "NucypherTokenDeployer.deploy": {
            "name": "deploy",
            "location": 150,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DispatcherDeployer.__init__": {
            "name": "__init__",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target_contract": [
                    "str",
                    "int",
                    "Dict[int, List[int]]",
                    "float",
                    "Dict[str, int]"
                ],
                "secret_hash": [
                    "str",
                    "Optional[str]",
                    "Dict[Any, bool]"
                ]
            }
        },
        "DispatcherDeployer.deploy": {
            "name": "deploy",
            "location": 181,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinerEscrowDeployer.__init__": {
            "name": "__init__",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "secret_hash": [
                    "str",
                    "nucypher.characters.control.emitters.StdoutEmitter",
                    "int",
                    "bool",
                    "dict"
                ]
            }
        },
        "MinerEscrowDeployer.__check_policy_manager": {
            "name": "__check_policy_manager",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MinerEscrowDeployer.deploy": {
            "name": "deploy",
            "location": 208,
            "return": [
                "str",
                "Dict[str, Any]",
                "Pattern"
            ],
            "arguments": {
                "self": []
            }
        },
        "MinerEscrowDeployer.make_agent": {
            "name": "make_agent",
            "location": 276,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolicyManagerDeployer.make_agent": {
            "name": "make_agent",
            "location": 292,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolicyManagerDeployer.__init__": {
            "name": "__init__",
            "location": 296,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "secret_hash": [
                    "str",
                    "nucypher.characters.control.emitters.StdoutEmitter",
                    "int",
                    "bool",
                    "dict"
                ]
            }
        },
        "PolicyManagerDeployer.deploy": {
            "name": "deploy",
            "location": 302,
            "return": [
                "str",
                "Dict[str, Any]",
                "Pattern"
            ],
            "arguments": {
                "self": []
            }
        },
        "LibraryLinkerDeployer.__init__": {
            "name": "__init__",
            "location": 348,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target_contract": [
                    "str",
                    "int",
                    "Dict[int, List[int]]",
                    "float",
                    "Dict[str, int]"
                ],
                "secret_hash": [
                    "str",
                    "Optional[str]",
                    "Dict[Any, bool]"
                ]
            }
        },
        "LibraryLinkerDeployer.deploy": {
            "name": "deploy",
            "location": 353,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowProxyDeployer.__init__": {
            "name": "__init__",
            "location": 365,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "secret_hash": [
                    "str",
                    "nucypher.characters.control.emitters.StdoutEmitter",
                    "int",
                    "bool",
                    "dict"
                ]
            }
        },
        "UserEscrowProxyDeployer.__get_state_contract": {
            "name": "__get_state_contract",
            "location": 372,
            "return": [
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowProxyDeployer.deploy": {
            "name": "deploy",
            "location": 375,
            "return": [
                "str",
                "Dict[str, Any]",
                "Pattern"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowProxyDeployer.get_latest_version": {
            "name": "get_latest_version",
            "location": 399,
            "return": [
                "list",
                "Callable",
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "int"
                ],
                "blockchain": [
                    "bool",
                    "int"
                ]
            }
        },
        "UserEscrowDeployer.__init__": {
            "name": "__init__",
            "location": 412,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "allocation_registry": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ]
            }
        },
        "UserEscrowDeployer.make_agent": {
            "name": "make_agent",
            "location": 420,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowDeployer.allocation_registry": {
            "name": "allocation_registry",
            "location": 429,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowDeployer.assign_beneficiary": {
            "name": "assign_beneficiary",
            "location": 432,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "beneficiary_address": [
                    "str",
                    "Optional[str]",
                    "Callable[[dict], None]"
                ]
            }
        },
        "UserEscrowDeployer.initial_deposit": {
            "name": "initial_deposit",
            "location": 441,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[float]"
                ],
                "duration": [
                    "T",
                    "list",
                    "float",
                    "str"
                ]
            }
        },
        "UserEscrowDeployer.enroll_principal_contract": {
            "name": "enroll_principal_contract",
            "location": 457,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UserEscrowDeployer.deliver": {
            "name": "deliver",
            "location": 464,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, int]",
                "str",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "float",
                    "bool"
                ],
                "duration": [
                    "int",
                    "float",
                    "bool"
                ],
                "beneficiary_address": [
                    "str",
                    "Union[bytes, str]",
                    "dict"
                ]
            }
        },
        "UserEscrowDeployer.deploy": {
            "name": "deploy",
            "location": 480,
            "return": [
                "str",
                "Dict[str, Any]",
                "Pattern"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/blockchain/eth/interfaces.py": {
        "BlockchainInterface.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "provider_uri": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ],
                "providers": [
                    "str",
                    "Union[str, Iterable[str]]",
                    "bool",
                    "int"
                ],
                "auto_connect": [
                    "bool"
                ],
                "timeout": [
                    "Optional[Iterable['cirq.Qid']]",
                    "Union[int, float]",
                    "int",
                    "Union[bool, List[bool]]",
                    "bool"
                ],
                "registry": [
                    "Optional[str]",
                    "List[str]",
                    "str",
                    "int"
                ],
                "compiler": [
                    "bool",
                    "list"
                ]
            }
        },
        "BlockchainInterface.connect": {
            "name": "connect",
            "location": 174,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainInterface.providers": {
            "name": "providers",
            "location": 195,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainInterface.is_connected": {
            "name": "is_connected",
            "location": 199,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainInterface.node_version": {
            "name": "node_version",
            "location": 206,
            "return": [
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainInterface.add_provider": {
            "name": "add_provider",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "Union[web3.IPCProvider, web3.WebsocketProvider, web3.HTTPProvider]",
                    "int",
                    "float"
                ],
                "provider_uri": [
                    "str",
                    "int",
                    "float",
                    "Dict[str, Any]"
                ],
                "timeout": [
                    "int",
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "BlockchainInterface.get_contract_factory": {
            "name": "get_contract_factory",
            "location": 263,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "contract_name": [
                    "str",
                    "Optional[Exception]"
                ]
            }
        },
        "BlockchainInterface._wrap_contract": {
            "name": "_wrap_contract",
            "location": 279,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "wrapper_contract": [
                    "dict",
                    "bool",
                    "str"
                ],
                "target_contract": [
                    "dict",
                    "bool",
                    "str"
                ],
                "factory": [
                    "dict",
                    "bool",
                    "str"
                ]
            }
        },
        "BlockchainInterface.get_contract_by_address": {
            "name": "get_contract_by_address",
            "location": 292,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "bool",
                    "int"
                ]
            }
        },
        "BlockchainInterface.get_contract_by_name": {
            "name": "get_contract_by_name",
            "location": 303,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ],
                "proxy_name": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "IO"
                ],
                "use_proxy_address": [
                    "bool",
                    "str",
                    "list"
                ],
                "factory": [
                    "bool",
                    "List[str]",
                    "str"
                ]
            }
        },
        "BlockchainInterface.call_backend_sign": {
            "name": "call_backend_sign",
            "location": 364,
            "return": [
                "float",
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "account": [],
                "message": [
                    "bool",
                    "int",
                    "List[src.main.core.models.state.State]",
                    "eth.abc.BlockHeaderAPI"
                ]
            }
        },
        "BlockchainInterface.call_backend_verify": {
            "name": "call_backend_verify",
            "location": 379,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "pubkey": [
                    "str",
                    "int",
                    "bool"
                ],
                "signature": [
                    "str",
                    "bool",
                    "int",
                    "bytes"
                ],
                "msg_hash": [
                    "str",
                    "bool",
                    "int",
                    "bytes"
                ]
            }
        },
        "BlockchainInterface.unlock_account": {
            "name": "unlock_account",
            "location": 389,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str"
                ],
                "password": [
                    "str"
                ],
                "duration": [
                    "str"
                ]
            }
        },
        "BlockchainDeployerInterface.__init__": {
            "name": "__init__",
            "location": 400,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deployer_address": [
                    "Optional[str]",
                    "Optional[bool]",
                    "str"
                ]
            }
        },
        "BlockchainDeployerInterface.deployer_address": {
            "name": "deployer_address",
            "location": 409,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "BlockchainDeployerInterface.deploy_contract": {
            "name": "deploy_contract",
            "location": 414,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "contract_name": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/blockchain/eth/policies.py": {
        "BlockchainArrangement.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "author": [
                    "int",
                    "List[str]",
                    "Sequence[str]",
                    "float"
                ],
                "miner": [
                    "int",
                    "List[str]",
                    "Sequence[str]",
                    "float"
                ],
                "value": [
                    "Optional[Union[str, Any]]",
                    "int",
                    "float"
                ],
                "expiration": [
                    "List[List[int]]",
                    "str",
                    "Optional[List[int]]",
                    "float",
                    "Iterable[T]"
                ]
            }
        },
        "BlockchainArrangement.__repr__": {
            "name": "__repr__",
            "location": 72,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainArrangement.publish": {
            "name": "publish",
            "location": 78,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainArrangement.revoke": {
            "name": "revoke",
            "location": 91,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BlockchainPolicy.__init__": {
            "name": "__init__",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "author": [
                    "bool",
                    "Dict[str, object]",
                    "str",
                    "Callable"
                ]
            }
        },
        "BlockchainPolicy.get_arrangement": {
            "name": "get_arrangement",
            "location": 120,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arrangement_id": [
                    "str",
                    "excars.models.locations.Location",
                    "int"
                ]
            }
        },
        "BlockchainPolicy.__find_ursulas": {
            "name": "__find_ursulas",
            "location": 138,
            "return": [
                "str",
                "bool",
                "Tuple[str, Optional[str]]",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "ether_addresses": [
                    "List[str]",
                    "str",
                    "Optional[List[\"Address\"]]"
                ],
                "target_quantity": [
                    "int",
                    "str",
                    "float",
                    "Iterable[List[str]]",
                    "Iterable[List[Any]]",
                    "tuple",
                    "bool",
                    "List[List[int]]"
                ],
                "timeout": [
                    "int",
                    "Union[None, int]"
                ]
            }
        },
        "BlockchainPolicy.make_arrangements": {
            "name": "make_arrangements",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "network_middleware": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ],
                "deposit": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ],
                "expiration": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "handpicked_ursulas": [
                    "List[int]",
                    "Set[int]",
                    "Optional[int]",
                    "List[dict]",
                    "tuple"
                ]
            }
        },
        "BlockchainPolicy.publish": {
            "name": "publish",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "network_middleware": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/blockchain/eth/registry.py": {
        "EthereumContractRegistry.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry_filepath": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "EthereumContractRegistry.filepath": {
            "name": "filepath",
            "location": 65,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumContractRegistry._swap_registry": {
            "name": "_swap_registry",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "EthereumContractRegistry.write": {
            "name": "write",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry_data": [
                    "list",
                    "dict",
                    "\"Project\""
                ]
            }
        },
        "EthereumContractRegistry.read": {
            "name": "read",
            "location": 83,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "EthereumContractRegistry.enroll": {
            "name": "enroll",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "contract_name": [
                    "str",
                    "Optional[str]",
                    "Optional[Union[Any, Any]]",
                    "int",
                    "Optional[int]"
                ],
                "contract_address": [
                    "str",
                    "Optional[str]",
                    "Optional[Union[Any, Any]]",
                    "int",
                    "Optional[int]"
                ],
                "contract_abi": [
                    "str"
                ]
            }
        },
        "EthereumContractRegistry.search": {
            "name": "search",
            "location": 129,
            "return": [
                "str",
                "bool",
                "tuple",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "contract_name": [
                    "str",
                    "Dict[str, str]"
                ],
                "contract_address": [
                    "str",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "TemporaryEthereumContractRegistry.__init__": {
            "name": "__init__",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryEthereumContractRegistry.clear": {
            "name": "clear",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryEthereumContractRegistry.cleanup": {
            "name": "cleanup",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryEthereumContractRegistry.commit": {
            "name": "commit",
            "location": 174,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str"
                ]
            }
        },
        "InMemoryEthereumContractRegistry.__init__": {
            "name": "__init__",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryEthereumContractRegistry.clear": {
            "name": "clear",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryEthereumContractRegistry._swap_registry": {
            "name": "_swap_registry",
            "location": 198,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "InMemoryEthereumContractRegistry.write": {
            "name": "write",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry_data": [
                    "dict",
                    "Dict[str, Any]",
                    "bytes",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "InMemoryEthereumContractRegistry.read": {
            "name": "read",
            "location": 204,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AllocationRegistry.search": {
            "name": "search",
            "location": 231,
            "return": [
                "int",
                "bytes",
                "Dict[str, Any]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "beneficiary_address": [
                    "str",
                    "List[Dict]",
                    "int"
                ],
                "contract_address": [
                    "str",
                    "int"
                ]
            }
        },
        "AllocationRegistry.enroll": {
            "name": "enroll",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "beneficiary_address": [
                    "str",
                    "bytes"
                ],
                "contract_address": [
                    "List[int]",
                    "Dict[str, Any]"
                ],
                "contract_abi": [
                    "bool",
                    "dict",
                    "str"
                ]
            }
        },
        "InMemoryAllocationRegistry.__init__": {
            "name": "__init__",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryAllocationRegistry.clear": {
            "name": "clear",
            "location": 283,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryAllocationRegistry._swap_registry": {
            "name": "_swap_registry",
            "location": 286,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "InMemoryAllocationRegistry.write": {
            "name": "write",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "registry_data": [
                    "dict",
                    "Dict[str, Any]",
                    "bytes",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "InMemoryAllocationRegistry.read": {
            "name": "read",
            "location": 292,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/blockchain/eth/utils.py": {
        "__validate": {
            "name": "__validate",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "rulebook": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "validate_stake_amount": {
            "name": "validate_stake_amount",
            "location": 32,
            "return": [
                "Dict[str, Dict[str, int]]",
                "set",
                "float",
                "int"
            ],
            "arguments": {
                "amount": [
                    "float",
                    "int",
                    "str"
                ],
                "raise_on_fail": [
                    "bool",
                    "int"
                ]
            }
        },
        "validate_locktime": {
            "name": "validate_locktime",
            "location": 50,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "set",
                "str"
            ],
            "arguments": {
                "lock_periods": [
                    "int",
                    "str",
                    "float"
                ],
                "raise_on_fail": [
                    "bool",
                    "Optional[bool]",
                    "str"
                ]
            }
        },
        "datetime_to_period": {
            "name": "datetime_to_period",
            "location": 68,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "datetime": []
            }
        },
        "calculate_period_duration": {
            "name": "calculate_period_duration",
            "location": 75,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "future_time": [
                    "maya.MayaDT",
                    "str"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/blockchain/eth/__init__.py": {},
    "GitkoinNuCypherHackathon-master/nucypher/blockchain/eth/scripts/estimate_gas_tester.py": {
        "estimate_gas": {
            "name": "estimate_gas",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/blockchain/eth/sol/compile.py": {
        "SolidityCompiler.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "solc_binary_path": [
                    "Optional[str]",
                    "str",
                    "Optional[TextIO]"
                ],
                "configuration_path": [
                    "Optional[str]",
                    "str",
                    "Optional[TextIO]"
                ],
                "chain_name": [
                    "str",
                    "Optional[str]",
                    "Set[str]",
                    "bool",
                    "Dict[str, str]"
                ],
                "source_dir": [
                    "str",
                    "Optional[str]",
                    "Optional[TextIO]",
                    "int"
                ],
                "test_contract_dir": [
                    "str"
                ]
            }
        },
        "SolidityCompiler.install_compiler": {
            "name": "install_compiler",
            "location": 63,
            "return": [
                "str",
                "Optional[float]",
                "float",
                "Exception",
                "Optional[str]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[int]"
                ]
            }
        },
        "SolidityCompiler.compile": {
            "name": "compile",
            "location": 71,
            "return": [
                "Mapping",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/blockchain/eth/sol/__init__.py": {},
    "GitkoinNuCypherHackathon-master/nucypher/characters/base.py": {
        "Character.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "is_me": [],
                "federated_only": [],
                "blockchain": [],
                "checksum_address": [],
                "network_middleware": [],
                "keyring_dir": [],
                "crypto_power": [],
                "crypto_power_ups": []
            }
        },
        "Character.__eq__": {
            "name": "__eq__",
            "location": 172,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Character.__hash__": {
            "name": "__hash__",
            "location": 175,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Character.__repr__": {
            "name": "__repr__",
            "location": 178,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Character.name": {
            "name": "name",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Character.rest_interface": {
            "name": "rest_interface",
            "location": 188,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Character.stamp": {
            "name": "stamp",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Character.canonical_public_address": {
            "name": "canonical_public_address",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "address_bytes": []
            }
        },
        "Character.checksum_public_address": {
            "name": "checksum_public_address",
            "location": 209,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Character.from_config": {
            "name": "from_config",
            "location": 215,
            "return": [],
            "arguments": {
                "cls": [],
                "config": []
            }
        },
        "Character.from_public_keys": {
            "name": "from_public_keys",
            "location": 219,
            "return": [],
            "arguments": {
                "cls": [],
                "powers_and_material": [],
                "federated_only": []
            }
        },
        "Character.encrypt_for": {
            "name": "encrypt_for",
            "location": 246,
            "return": [],
            "arguments": {
                "self": [],
                "recipient": [],
                "plaintext": [],
                "sign": [],
                "sign_plaintext": []
            }
        },
        "Character.verify_from": {
            "name": "verify_from",
            "location": 274,
            "return": [],
            "arguments": {
                "self": [],
                "stranger": [],
                "message_kit": [],
                "signature": [],
                "decrypt": [],
                "delegator_verifying_key": []
            }
        },
        "Character.decrypt": {
            "name": "decrypt",
            "location": 349,
            "return": [],
            "arguments": {
                "self": [],
                "message_kit": [],
                "verifying_key": []
            }
        },
        "Character.sign": {
            "name": "sign",
            "location": 352,
            "return": [],
            "arguments": {
                "self": [],
                "message": []
            }
        },
        "Character.public_keys": {
            "name": "public_keys",
            "location": 355,
            "return": [],
            "arguments": {
                "self": [],
                "power_up_class": []
            }
        },
        "Character._set_checksum_address": {
            "name": "_set_checksum_address",
            "location": 366,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/characters/lawful.py": {
        "Alice.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "is_me": [
                    "List[Type]",
                    "Callable",
                    "Dict[str, float]",
                    "bool",
                    "str"
                ],
                "federated_only": [
                    "List[Type]",
                    "Callable",
                    "Dict[str, float]",
                    "bool",
                    "str"
                ],
                "network_middleware": [
                    "List[Type]",
                    "Callable",
                    "Dict[str, float]",
                    "str"
                ]
            }
        },
        "Alice.generate_kfrags": {
            "name": "generate_kfrags",
            "location": 68,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "bob": [
                    "int",
                    "str",
                    "bytes",
                    "List[int]",
                    "bytearray",
                    "Signature"
                ],
                "label": [
                    "int",
                    "bytes"
                ],
                "m": [
                    "int",
                    "bytes"
                ],
                "n": [
                    "int",
                    "bytes"
                ]
            }
        },
        "Alice.create_policy": {
            "name": "create_policy",
            "location": 84,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "bob": [
                    "int",
                    "crypto.PointG1",
                    "Union[int, float]",
                    "dict",
                    "Iterable[T_co]"
                ],
                "label": [
                    "int",
                    "crypto.PointG1",
                    "Union[int, float]",
                    "dict",
                    "Iterable[T_co]"
                ],
                "m": [
                    "int",
                    "crypto.PointG1",
                    "Union[int, float]",
                    "dict",
                    "Iterable[T_co]"
                ],
                "n": [
                    "int",
                    "bool"
                ],
                "federated": [
                    "bool",
                    "int",
                    "float",
                    "List[str]"
                ]
            }
        },
        "Alice.grant": {
            "name": "grant",
            "location": 108,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "bob": [
                    "int",
                    "str",
                    "bool"
                ],
                "label": [
                    "int",
                    "str",
                    "bool"
                ],
                "m": [
                    "int",
                    "str",
                    "bool"
                ],
                "n": [
                    "int",
                    "Sequence[Any]"
                ],
                "expiration": [
                    "int",
                    "list",
                    "str",
                    "Iterable[List[str]]",
                    "Tuple[int]"
                ],
                "deposit": [
                    "str",
                    "int",
                    "list",
                    "Optional[int]"
                ],
                "handpicked_ursulas": [
                    "int",
                    "List[int]",
                    "bytes"
                ]
            }
        },
        "Alice.get_policy_pubkey_from_label": {
            "name": "get_policy_pubkey_from_label",
            "location": 161,
            "return": [
                "bool",
                "str",
                "Tuple[int, int, int]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Bob.__init__": {
            "name": "__init__",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bob.peek_at_treasure_map": {
            "name": "peek_at_treasure_map",
            "location": 176,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "treasure_map": [
                    "str",
                    "int",
                    "zerver.models.Realm",
                    "Dict[str, Any]"
                ],
                "map_id": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "Bob.follow_treasure_map": {
            "name": "follow_treasure_map",
            "location": 203,
            "return": [
                "str",
                "fonduer.candidates.models.temporary_contexTemporaryContext",
                "dict"
            ],
            "arguments": {
                "self": [],
                "treasure_map": [
                    "bool",
                    "int",
                    "List[int]",
                    "str",
                    "Mapping[Any, str]"
                ],
                "map_id": [
                    "int",
                    "str",
                    "bool",
                    "contests.models.User"
                ],
                "block": [
                    "bool",
                    "int",
                    "models.order_action.Parameters",
                    "article.transfer.models.ArticleNumber",
                    "Callable[[str], None]",
                    "Callable[..., None]",
                    "str"
                ],
                "new_thread": [
                    "bool",
                    "int",
                    "models.order_action.Parameters",
                    "article.transfer.models.ArticleNumber",
                    "Callable[[str], None]",
                    "Callable[..., None]",
                    "str"
                ],
                "timeout": [
                    "Optional[List[int]]",
                    "bool",
                    "int",
                    "type",
                    "str",
                    "float"
                ],
                "allow_missing": [
                    "Optional[List[int]]",
                    "bool",
                    "int",
                    "type",
                    "str",
                    "float"
                ]
            }
        },
        "Bob.get_treasure_map": {
            "name": "get_treasure_map",
            "location": 254,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": [],
                "alice_verifying_key": [
                    "str",
                    "Optional[List[Dict]]",
                    "dict",
                    "int",
                    "Optional[Exception]"
                ],
                "label": [
                    "str",
                    "int",
                    "Optional[List[Dict]]",
                    "dict",
                    "Iterable[models.Entry]"
                ]
            }
        },
        "Bob.make_compass_for_alice": {
            "name": "make_compass_for_alice",
            "location": 276,
            "return": [
                "bool",
                "golem_messages.cryptography.ECCx",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "alice": [
                    "Callable",
                    "bytes",
                    "List[int]",
                    "dict"
                ]
            }
        },
        "Bob.construct_policy_hrac": {
            "name": "construct_policy_hrac",
            "location": 279,
            "return": [
                "str",
                "int",
                "Callable[[Dict], Any]",
                "Union[str, Iterable[str]]"
            ],
            "arguments": {
                "self": [],
                "verifying_key": [
                    "str",
                    "bytes",
                    "Union[bytes, umbral.keys.UmbralPublicKey]"
                ],
                "label": [
                    "str",
                    "bytes",
                    "Union[bytes, umbral.keys.UmbralPublicKey]"
                ]
            }
        },
        "Bob.construct_hrac_and_map_id": {
            "name": "construct_hrac_and_map_id",
            "location": 282,
            "return": [
                "str",
                "list",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "verifying_key": [
                    "core.models.GroupingKey",
                    "core.models.User.Key",
                    "umbral.keys.UmbralPrivateKey",
                    "crypto.PointG2",
                    "List[str]"
                ],
                "label": [
                    "bytes",
                    "str",
                    "crypto.PointG1",
                    "int"
                ]
            }
        },
        "Bob.get_treasure_map_from_known_ursulas": {
            "name": "get_treasure_map_from_known_ursulas",
            "location": 287,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "networky_stuff": [
                    "str",
                    "int",
                    "megatron.models.MegatronChannel"
                ],
                "map_id": [
                    "str",
                    "int",
                    "megatron.models.MegatronChannel"
                ]
            }
        },
        "Bob.generate_work_orders": {
            "name": "generate_work_orders",
            "location": 308,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "map_id": [
                    "str"
                ]
            }
        },
        "Bob.get_reencrypted_cfrags": {
            "name": "get_reencrypted_cfrags",
            "location": 344,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": [],
                "work_order": [
                    "str"
                ]
            }
        },
        "Bob.get_ursula": {
            "name": "get_ursula",
            "location": 352,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "ursula_id": [
                    "str",
                    "int"
                ]
            }
        },
        "Bob.join_policy": {
            "name": "join_policy",
            "location": 355,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "label": [
                    "int",
                    "tuple",
                    "Dict[int, dict]",
                    "bytes",
                    "opentrons.protocols.execution.types.LoadedLabware",
                    "List[List[Any]]",
                    "transfer.models.Order"
                ],
                "alice_pubkey_sig": [
                    "int",
                    "tuple",
                    "Dict[int, dict]",
                    "bytes",
                    "opentrons.protocols.execution.types.LoadedLabware",
                    "List[List[Any]]",
                    "transfer.models.Order"
                ],
                "node_list": [
                    "int",
                    "bool",
                    "str",
                    "Dict[str, int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Bob.retrieve": {
            "name": "retrieve",
            "location": 361,
            "return": [
                "str",
                "zam_repondeur.models.Lecture",
                "deque",
                "services.email.transfer.models.Message",
                "int",
                "list"
            ],
            "arguments": {
                "self": [],
                "message_kit": [
                    "str",
                    "Tuple[str, int]",
                    "bytes",
                    "Optional[Union[str, bytes]]",
                    "Optional[Union[str, int]]"
                ],
                "data_source": [
                    "bytes",
                    "str",
                    "keys.MailboxKeys",
                    "keys.NamespaceKeys",
                    "Union[bytes, str]"
                ],
                "alice_verifying_key": [
                    "bytes",
                    "str",
                    "keys.MailboxKeys",
                    "keys.NamespaceKeys",
                    "Union[bytes, str]"
                ]
            }
        },
        "Ursula.__init__": {
            "name": "__init__",
            "location": 420,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rest_host": [
                    "str",
                    "cryptography.x509.Certificate",
                    "cryptography.hazmaprimitives.asymmetric.ec.EllipticCurve"
                ],
                "rest_port": [
                    "str",
                    "config.Config",
                    "int",
                    "bool"
                ],
                "certificate": [
                    "str",
                    "cryptography.x509.Certificate",
                    "cryptography.hazmaprimitives.asymmetric.ec.EllipticCurve",
                    "int"
                ],
                "certificate_filepath": [
                    "str",
                    "cryptography.x509.Certificate",
                    "cryptography.hazmaprimitives.asymmetric.ec.EllipticCurve",
                    "int"
                ],
                "db_name": [
                    "Optional[List[Any]]",
                    "int",
                    "nucypher.blockchain.eth.registry.BaseContractRegistry",
                    "Optional[bool]"
                ],
                "db_filepath": [
                    "Optional[List[Any]]",
                    "int",
                    "nucypher.blockchain.eth.registry.BaseContractRegistry",
                    "Optional[bool]"
                ],
                "is_me": [
                    "bool",
                    "str",
                    "Iterable",
                    "set"
                ],
                "interface_signature": [
                    "str",
                    "raiden.constants.Environment",
                    "bool",
                    "Optional[str]"
                ],
                "timestamp": [
                    "str",
                    "raiden.constants.Environment",
                    "bool",
                    "Optional[str]"
                ],
                "checksum_address": [
                    "bool",
                    "str",
                    "Iterable",
                    "set"
                ],
                "passphrase": [
                    "bool",
                    "str",
                    "int"
                ],
                "abort_on_learning_error": [
                    "bool",
                    "str",
                    "Iterable",
                    "set"
                ],
                "federated_only": [
                    "bool",
                    "str",
                    "Iterable",
                    "set"
                ],
                "start_learning_now": [
                    "bool",
                    "str",
                    "Iterable",
                    "set"
                ],
                "crypto_power": [
                    "bool",
                    "str",
                    "Iterable",
                    "set"
                ],
                "tls_curve": [
                    "cryptography.hazmaprimitives.asymmetric.ec.EllipticCurve",
                    "str",
                    "cryptography.x509.Certificate",
                    "Tuple[int, int]"
                ],
                "known_nodes": [
                    "bool",
                    "str",
                    "Iterable",
                    "set"
                ]
            }
        },
        "Ursula.rest_information": {
            "name": "rest_information",
            "location": 569,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ursula.get_deployer": {
            "name": "get_deployer",
            "location": 578,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ursula.rest_server_certificate": {
            "name": "rest_server_certificate",
            "location": 583,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ursula.__bytes__": {
            "name": "__bytes__",
            "location": 586,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ursula.from_bytes": {
            "name": "from_bytes",
            "location": 610,
            "return": [
                "str",
                "Iterable[str]",
                "Dict[str, Any]",
                "List[List[str]]",
                "Dict[str, str]",
                "bool",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "float",
                    "Dict[str, models.DeviceRow]"
                ],
                "ursula_as_bytes": [
                    "bytes",
                    "Dict[str, models.DeviceRow]"
                ],
                "federated_only": [
                    "bytes",
                    "bool"
                ]
            }
        },
        "Ursula.batch_from_bytes": {
            "name": "batch_from_bytes",
            "location": 639,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "cls": [
                    "Tuple[int, int]",
                    "Optional[str]",
                    "List[List[fonduer.candidates.models.Candidate]]",
                    "List[int]"
                ],
                "ursulas_as_bytes": [
                    "bool",
                    "int",
                    "Hashable"
                ],
                "federated_only": [
                    "bytes",
                    "bool"
                ]
            }
        },
        "Ursula.from_storage": {
            "name": "from_storage",
            "location": 677,
            "return": [
                "Optional[int]",
                "Mapping[str, Any]",
                "Optional[Dict]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "dbadapters.base.relation.BaseRelation",
                    "List[\"libkol.Item\"]"
                ],
                "node_storage": [
                    "bool",
                    "str",
                    "nucypher.config.storages.NodeStorage"
                ],
                "checksum_adress": [
                    "bool",
                    "str",
                    "nucypher.config.storages.NodeStorage"
                ],
                "federated_only": [
                    "bool",
                    "str",
                    "nucypher.config.storages.NodeStorage"
                ]
            }
        },
        "Ursula.datastore": {
            "name": "datastore",
            "location": 688,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ursula.rest_url": {
            "name": "rest_url",
            "location": 695,
            "return": [
                "str",
                "Optional[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ursula.rest_app": {
            "name": "rest_app",
            "location": 702,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ursula.interface_info_with_metadata": {
            "name": "interface_info_with_metadata",
            "location": 711,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Ursula.work_orders": {
            "name": "work_orders",
            "location": 719,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "bob": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/characters/unlawful.py": {
        "Vladimir.from_target_ursula": {
            "name": "from_target_ursula",
            "location": 36,
            "return": [
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bytes",
                    "Optional[float]",
                    "float"
                ],
                "target_ursula": [
                    "str",
                    "int",
                    "dict",
                    "Tuple[int, int]"
                ],
                "claim_signing_key": [
                    "bool",
                    "Optional[Sequence['cirq.Qid']]",
                    "Optional[str]",
                    "dict",
                    "int"
                ],
                "attach_transacting_key": [
                    "bool",
                    "int"
                ]
            }
        },
        "Vladimir.attach_transacting_key": {
            "name": "attach_transacting_key",
            "location": 74,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "int"
                ],
                "blockchain": [
                    "dict",
                    "int"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/characters/__init__.py": {},
    "GitkoinNuCypherHackathon-master/nucypher/config/characters.py": {
        "UrsulaConfiguration.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rest_host": [
                    "bool",
                    "str",
                    "tuple",
                    "Optional[List[str]]",
                    "dict"
                ],
                "rest_port": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "list"
                ],
                "tls_curve": [
                    "float",
                    "bool",
                    "int",
                    "Callable",
                    "Sequence[Sequence[float]]"
                ],
                "certificate": [
                    "float",
                    "bool",
                    "int",
                    "Callable",
                    "Sequence[Sequence[float]]"
                ],
                "certificate_filepath": [
                    "float",
                    "bool",
                    "int",
                    "Callable",
                    "Sequence[Sequence[float]]"
                ],
                "db_name": [
                    "str",
                    "bool"
                ],
                "db_filepath": [
                    "float",
                    "bool",
                    "int",
                    "Callable",
                    "Sequence[Sequence[float]]"
                ],
                "interface_signature": [
                    "float",
                    "bool",
                    "int",
                    "Callable",
                    "Sequence[Sequence[float]]"
                ],
                "crypto_power": [
                    "float",
                    "bool",
                    "int",
                    "Callable",
                    "Sequence[Sequence[float]]"
                ],
                "poa": [
                    "float",
                    "bool",
                    "int",
                    "Callable",
                    "Sequence[Sequence[float]]"
                ],
                "provider_uri": [
                    "float",
                    "bool",
                    "int",
                    "Callable",
                    "Sequence[Sequence[float]]"
                ]
            }
        },
        "UrsulaConfiguration.generate_runtime_filepaths": {
            "name": "generate_runtime_filepaths",
            "location": 94,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "config_root": [
                    "dict",
                    "IO",
                    "Union[Dict, List]",
                    "monkq.config.Setting",
                    "str"
                ]
            }
        },
        "UrsulaConfiguration.initialize": {
            "name": "initialize",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tls": [
                    "int",
                    "bool",
                    "List[str]",
                    "float"
                ],
                "host": [
                    "int",
                    "bool",
                    "List[str]",
                    "float"
                ]
            }
        },
        "UrsulaConfiguration.static_payload": {
            "name": "static_payload",
            "location": 108,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaConfiguration.dynamic_payload": {
            "name": "dynamic_payload",
            "location": 121,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaConfiguration.produce": {
            "name": "produce",
            "location": 131,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "passphrase": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "UrsulaConfiguration.produce.MockDatastoreThreadPool.callInThread": {
            "name": "callInThread",
            "location": 156,
            "return": [
                "str",
                "dss.config.Replica"
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Callable[..., T]",
                    "Callable"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/config/constants.py": {},
    "GitkoinNuCypherHackathon-master/nucypher/config/keyring.py": {
        "unlock_required": {
            "name": "unlock_required",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "_assemble_key_data": {
            "name": "_assemble_key_data",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "key_data": [
                    "dict",
                    "raiden.network.proxies.secret_registry.SecretRegistry",
                    "Dict[str, str]",
                    "int",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "master_salt": [
                    "dict",
                    "raiden.network.proxies.secret_registry.SecretRegistry",
                    "Dict[str, str]",
                    "int",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "wrap_salt": [
                    "dict",
                    "raiden.network.proxies.secret_registry.SecretRegistry",
                    "Dict[str, str]",
                    "int",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "_read_keyfile": {
            "name": "_read_keyfile",
            "location": 86,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "keypath": [
                    "int",
                    "Callable",
                    "str"
                ],
                "deserializer": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "_write_private_keyfile": {
            "name": "_write_private_keyfile",
            "location": 99,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "keypath": [
                    "bytes",
                    "Optional[str]",
                    "str"
                ],
                "key_data": [
                    "bytes",
                    "dict",
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "Optional[Dict]",
                    "Optional[str]"
                ],
                "serializer": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict]"
                ]
            }
        },
        "_write_public_keyfile": {
            "name": "_write_public_keyfile",
            "location": 132,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "keypath": [
                    "str",
                    "Optional[int]"
                ],
                "key_data": [
                    "bytes",
                    "str",
                    "Optional[Union[Dict, str, int, bytes]]"
                ]
            }
        },
        "_write_tls_certificate": {
            "name": "_write_tls_certificate",
            "location": 161,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "certificate": [
                    "float",
                    "List[List[int]]",
                    "int"
                ],
                "full_filepath": [
                    "str",
                    "Union[str, float]"
                ],
                "force": [
                    "bool",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "_read_tls_public_certificate": {
            "name": "_read_tls_public_certificate",
            "location": 176,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "_derive_key_material_from_passphrase": {
            "name": "_derive_key_material_from_passphrase",
            "location": 190,
            "return": [
                "str",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "salt": [
                    "server.models.Bike",
                    "bytes"
                ],
                "passphrase": [
                    "server.models.Bike",
                    "bytes"
                ]
            }
        },
        "_derive_wrapping_key_from_key_material": {
            "name": "_derive_wrapping_key_from_key_material",
            "location": 209,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "salt": [
                    "str",
                    "Union[str, List[str]]",
                    "int",
                    "Dict[str, int]"
                ],
                "key_material": [
                    "str",
                    "Union[str, List[str]]",
                    "int",
                    "Dict[str, int]"
                ]
            }
        },
        "_encrypt_umbral_key": {
            "name": "_encrypt_umbral_key",
            "location": 226,
            "return": [
                "str"
            ],
            "arguments": {
                "wrapping_key": [
                    "List[bytes]",
                    "keys.NamespaceKeys",
                    "Optional[bytes]",
                    "str",
                    "int",
                    "umbral.params.UmbralParameters",
                    "umbral.keys.UmbralPrivateKey"
                ],
                "umbral_key": [
                    "List[bytes]",
                    "keys.NamespaceKeys",
                    "Optional[bytes]",
                    "str",
                    "int",
                    "umbral.params.UmbralParameters",
                    "umbral.keys.UmbralPrivateKey"
                ]
            }
        },
        "_decrypt_umbral_key": {
            "name": "_decrypt_umbral_key",
            "location": 237,
            "return": [
                "str",
                "bool",
                "Sequence[Sequence[Any]]",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "wrapping_key": [
                    "bytes",
                    "float",
                    "MutableMapping",
                    "str",
                    "bool"
                ],
                "encrypted_key_material": [
                    "bytes",
                    "float",
                    "MutableMapping",
                    "str",
                    "bool"
                ]
            }
        },
        "_generate_encryption_keys": {
            "name": "_generate_encryption_keys",
            "location": 256,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Type[Any]",
                "cryptography.x509.Certificate"
            ],
            "arguments": {}
        },
        "_generate_signing_keys": {
            "name": "_generate_signing_keys",
            "location": 263,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Type[Any]",
                "cryptography.x509.Certificate"
            ],
            "arguments": {}
        },
        "_generate_wallet": {
            "name": "_generate_wallet",
            "location": 272,
            "return": [
                "int",
                "str",
                "Union[str, Dict]"
            ],
            "arguments": {
                "passphrase": [
                    "str",
                    "Dict[str, Any]",
                    "bytes",
                    "int"
                ]
            }
        },
        "_generate_tls_keys": {
            "name": "_generate_tls_keys",
            "location": 279,
            "return": [
                "str",
                "bool",
                "Sequence[Sequence[Any]]",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "host": [
                    "str",
                    "Iterable[int]",
                    "int",
                    "Callable[[bytes], None]"
                ],
                "curve": [
                    "str",
                    "Iterable[int]",
                    "int",
                    "Callable[[bytes], None]"
                ]
            }
        },
        "unlock_required.wrapped": {
            "name": "wrapped",
            "location": 68,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "keyring": [
                    "int",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "_PrivateKeySerializer.__serialize": {
            "name": "__serialize",
            "location": 286,
            "return": [
                "str",
                "bytearray",
                "bytes",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key_metadata": [
                    "Dict[str, bytes]",
                    "bool",
                    "Optional[int]",
                    "Optional[Type[Any]]"
                ],
                "encoding": [
                    "str"
                ],
                "nested_serializer": [
                    "Callable",
                    "bytes",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "_PrivateKeySerializer.__deserialize": {
            "name": "__deserialize",
            "location": 304,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "key_metadata": [
                    "bytes",
                    "str",
                    "Optional[bytes]",
                    "cryptography.hazmaprimitives.asymmetric.ec.EllipticCurvePrivateKeyWithSerialization",
                    "libqtile.config.Key"
                ],
                "encoding": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "float"
                ],
                "nested_deserializer": [
                    "str",
                    "int"
                ]
            }
        },
        "_PrivateKeySerializer.__call__": {
            "name": "__call__",
            "location": 320,
            "return": [
                "str",
                "dict",
                "IO[bytes]",
                "bool",
                "List[str]",
                "Tuple[int, List[str]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "Match[bytes]",
                    "Union[bytes, str]",
                    "List[int]",
                    "str"
                ]
            }
        },
        "NucypherKeyring.__init__": {
            "name": "__init__",
            "location": 362,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "account": [
                    "str",
                    "int"
                ],
                "keyring_root": [
                    "str"
                ],
                "root_key_path": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "pub_root_key_path": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "List[Tuple[int, int]]"
                ],
                "signing_key_path": [
                    "str",
                    "List[Tuple[int, int]]",
                    "int",
                    "BinaryIO",
                    "List[str]"
                ],
                "pub_signing_key_path": [
                    "str",
                    "Optional[str]"
                ],
                "delegating_key_path": [
                    "str",
                    "List[Tuple[int, int]]",
                    "int",
                    "BinaryIO",
                    "List[str]"
                ],
                "wallet_path": [
                    "str",
                    "bytes"
                ],
                "tls_key_path": [
                    "str",
                    "List[Tuple[int, int]]",
                    "int",
                    "BinaryIO",
                    "List[str]"
                ],
                "tls_certificate_path": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "NucypherKeyring.__del__": {
            "name": "__del__",
            "location": 407,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherKeyring.checksum_address": {
            "name": "checksum_address",
            "location": 414,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherKeyring.federated_address": {
            "name": "federated_address",
            "location": 421,
            "return": [
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherKeyring.signing_public_key": {
            "name": "signing_public_key",
            "location": 430,
            "return": [
                "List[str]",
                "Set[str]",
                "set",
                "str",
                "bool",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherKeyring.encrypting_public_key": {
            "name": "encrypting_public_key",
            "location": 436,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Type[Any]",
                "cryptography.x509.Certificate"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherKeyring.certificate_filepath": {
            "name": "certificate_filepath",
            "location": 442,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherKeyring._generate_base_filepaths": {
            "name": "_generate_base_filepaths",
            "location": 449,
            "return": [
                "str"
            ],
            "arguments": {
                "keyring_root": [
                    "str",
                    "bytes"
                ]
            }
        },
        "NucypherKeyring._generate_key_filepaths": {
            "name": "_generate_key_filepaths",
            "location": 455,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "public_key_dir": [
                    "str",
                    "List[str]"
                ],
                "private_key_dir": [
                    "str",
                    "List[str]"
                ],
                "account": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "NucypherKeyring._export_wallet_to_node": {
            "name": "_export_wallet_to_node",
            "location": 471,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "blockchain": [
                    "str",
                    "float",
                    "List[str]"
                ],
                "passphrase": [
                    "str"
                ]
            }
        },
        "NucypherKeyring.__decrypt_keyfile": {
            "name": "__decrypt_keyfile",
            "location": 479,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key_path": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "NucypherKeyring.account": {
            "name": "account",
            "location": 492,
            "return": [
                "dict",
                "Exception",
                "Dict[str, Any]",
                "Dict[str, Union[str, Set]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherKeyring.is_unlocked": {
            "name": "is_unlocked",
            "location": 496,
            "return": [
                "bool",
                "Mapping",
                "Tuple[bool, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherKeyring.lock": {
            "name": "lock",
            "location": 499,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NucypherKeyring.unlock": {
            "name": "unlock",
            "location": 504,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "passphrase": [
                    "str",
                    "bytes",
                    "dict",
                    "Dict[str, Set[str]]",
                    "int"
                ]
            }
        },
        "NucypherKeyring.derive_crypto_power": {
            "name": "derive_crypto_power",
            "location": 517,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "power_class": [
                    "Type",
                    "bytes"
                ]
            }
        },
        "NucypherKeyring.generate": {
            "name": "generate",
            "location": 561,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "bool"
                ],
                "passphrase": [
                    "bool",
                    "Union[int, float]",
                    "str",
                    "Callable",
                    "dict"
                ],
                "encrypting": [
                    "bool",
                    "Union[int, float]",
                    "str",
                    "Callable",
                    "dict"
                ],
                "wallet": [
                    "bool",
                    "Union[int, float]",
                    "str",
                    "Callable",
                    "dict"
                ],
                "tls": [
                    "bool",
                    "Union[int, float]",
                    "str",
                    "Callable",
                    "dict"
                ],
                "host": [
                    "bool",
                    "Union[int, float]",
                    "str",
                    "Callable",
                    "dict"
                ],
                "curve": [
                    "bool",
                    "Union[int, float]",
                    "str",
                    "Callable",
                    "dict"
                ],
                "keyring_root": [
                    "bool",
                    "Union[int, float]",
                    "str",
                    "Callable",
                    "dict"
                ]
            }
        },
        "NucypherKeyring.validate_passphrase": {
            "name": "validate_passphrase",
            "location": 698,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "passphrase": [
                    "bool",
                    "List[\"SqlFile\"]",
                    "Tuple[int, int]",
                    "List[float]",
                    "tuple",
                    "list",
                    "str",
                    "Collection[int]"
                ]
            }
        },
        "NucypherKeyring.generate.__serialize_pem": {
            "name": "__serialize_pem",
            "location": 683,
            "return": [
                "MutableMapping[str, Any]",
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "pk": [
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/config/node.py": {
        "NodeConfiguration.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "temp": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "config.Config"
                ],
                "config_root": [
                    "str",
                    "trinity.config.ChainConfig",
                    "baseplate.lib.config.RawConfig"
                ],
                "passphrase": [
                    "bool",
                    "int",
                    "str",
                    "Dict[str, Any]"
                ],
                "auto_initialize": [
                    "bool",
                    "Iterable[str]",
                    "str",
                    "List[str]"
                ],
                "auto_generate_keys": [
                    "bool",
                    "int",
                    "str",
                    "Dict[str, Any]"
                ],
                "config_file_location": [
                    "Tuple[str, str]",
                    "dict"
                ],
                "keyring_dir": [
                    "str",
                    "List[str]",
                    "dict"
                ],
                "checksum_address": [
                    "Optional[dict]",
                    "Optional[str]"
                ],
                "is_me": [
                    "bool",
                    "int",
                    "Dict[int, Any]",
                    "Callable"
                ],
                "federated_only": [
                    "Optional[str]",
                    "bytearray",
                    "bool",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "network_middleware": [
                    "int",
                    "bool",
                    "str"
                ],
                "registry_source": [
                    "Dict[str, Any]",
                    "dict",
                    "pyramid.config.Configurator"
                ],
                "registry_filepath": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "config.Config"
                ],
                "import_seed_registry": [
                    "bool",
                    "int",
                    "str",
                    "Dict[str, Any]"
                ],
                "learn_on_same_thread": [
                    "bool",
                    "Iterable[str]"
                ],
                "abort_on_learning_error": [
                    "TextIO",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "start_learning_now": [
                    "int",
                    "Optional[float]",
                    "str"
                ],
                "known_certificates_dir": [
                    "str",
                    "kedro.config.ConfigLoader"
                ],
                "known_nodes": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "config.Config"
                ],
                "node_storage": [
                    "Optional[str]",
                    "bytearray",
                    "bool",
                    "str",
                    "dict",
                    "Dict[str, str]"
                ],
                "load_metadata": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "config.Config"
                ],
                "save_metadata": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "config.Config"
                ]
            }
        },
        "NodeConfiguration.__call__": {
            "name": "__call__",
            "location": 172,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeConfiguration.cleanup": {
            "name": "cleanup",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeConfiguration.temp": {
            "name": "temp",
            "location": 180,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeConfiguration.produce": {
            "name": "produce",
            "location": 183,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "passphrase": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "NodeConfiguration._read_configuration_file": {
            "name": "_read_configuration_file",
            "location": 192,
            "return": [
                "bool",
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "NodeConfiguration.from_configuration_file": {
            "name": "from_configuration_file",
            "location": 198,
            "return": [
                "Mapping[str, Any]",
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "int"
                ],
                "filepath": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "NodeConfiguration.to_configuration_file": {
            "name": "to_configuration_file",
            "location": 218,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "NodeConfiguration.validate": {
            "name": "validate",
            "location": 233,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "config_root": [
                    "str"
                ],
                "no_registry": [
                    "list",
                    "bool",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "NodeConfiguration.static_payload": {
            "name": "static_payload",
            "location": 250,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeConfiguration.dynamic_payload": {
            "name": "dynamic_payload",
            "location": 269,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeConfiguration.runtime_filepaths": {
            "name": "runtime_filepaths",
            "location": 283,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeConfiguration.generate_runtime_filepaths": {
            "name": "generate_runtime_filepaths",
            "location": 291,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "config_root": [
                    "str",
                    "type",
                    "dict",
                    "List[str]",
                    "Optional[Dict]"
                ]
            }
        },
        "NodeConfiguration.__cache_runtime_filepaths": {
            "name": "__cache_runtime_filepaths",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeConfiguration.derive_node_power_ups": {
            "name": "derive_node_power_ups",
            "location": 308,
            "return": [
                "str",
                "int",
                "float",
                "Sequence"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeConfiguration.initialize": {
            "name": "initialize",
            "location": 316,
            "return": [
                "Callable",
                "Dict[str, Dict[str, Any]]",
                "Callable[[str], None]",
                "str"
            ],
            "arguments": {
                "self": [],
                "passphrase": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "no_registry": [
                    "bool",
                    "str",
                    "models.characters.mods_base.Mod"
                ],
                "wallet": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "encrypting": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "tls": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "host": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "curve": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "no_keys": [
                    "bool",
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ]
            }
        },
        "NodeConfiguration.read_known_nodes": {
            "name": "read_known_nodes",
            "location": 382,
            "return": [
                "int",
                "str",
                "float",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeConfiguration.read_keyring": {
            "name": "read_keyring",
            "location": 386,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeConfiguration.write_keyring": {
            "name": "write_keyring",
            "location": 393,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "passphrase": [
                    "str"
                ],
                "encrypting": [
                    "str"
                ],
                "wallet": [
                    "str",
                    "recidiviz.common.constants.enum_overrides.EnumOverrides"
                ],
                "tls": [
                    "str"
                ],
                "host": [
                    "str"
                ],
                "tls_curve": [
                    "str"
                ]
            }
        },
        "NodeConfiguration.write_registry": {
            "name": "write_registry",
            "location": 420,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "output_filepath": [
                    "bool",
                    "str",
                    "Optional[tuple]",
                    "dict"
                ],
                "source": [
                    "str",
                    "bool",
                    "os.PathLike"
                ],
                "force": [
                    "bool",
                    "str",
                    "Callable[[str, str], None]",
                    "Optional[int]"
                ],
                "blank": [
                    "List[str]",
                    "bool",
                    "list",
                    "int",
                    "bytes",
                    "Optional[dict]"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/config/storages.py": {
        "NodeStorage.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "character_class": [
                    "bool",
                    "Optional[str]",
                    "Optional[int]",
                    "str"
                ],
                "federated_only": [
                    "bool",
                    "str",
                    "int"
                ],
                "serializer": [
                    "bool",
                    "str",
                    "int"
                ],
                "deserializer": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "NodeStorage.__getitem__": {
            "name": "__getitem__",
            "location": 58,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "dict",
                    "list",
                    "int",
                    "bool"
                ]
            }
        },
        "NodeStorage.__setitem__": {
            "name": "__setitem__",
            "location": 61,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "slice",
                    "bool"
                ],
                "value": [
                    "str",
                    "dict",
                    "Sequence[str]",
                    "Union[Callable[[Dict], Hashable], str]"
                ]
            }
        },
        "NodeStorage.__delitem__": {
            "name": "__delitem__",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT"
                ]
            }
        },
        "NodeStorage.__iter__": {
            "name": "__iter__",
            "location": 67,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeStorage.all": {
            "name": "all",
            "location": 71,
            "return": [
                "builtins.set"
            ],
            "arguments": {
                "self": [],
                "federated_only": [
                    "bool",
                    "Union[int, str]",
                    "float",
                    "int"
                ]
            }
        },
        "NodeStorage.get": {
            "name": "get",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "bool",
                    "int",
                    "List[str]"
                ],
                "federated_only": [
                    "str",
                    "bool",
                    "int",
                    "List[str]"
                ]
            }
        },
        "NodeStorage.save": {
            "name": "save",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "List[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "NodeStorage.remove": {
            "name": "remove",
            "location": 86,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "Optional[float]",
                    "int"
                ]
            }
        },
        "NodeStorage.clear": {
            "name": "clear",
            "location": 91,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeStorage.payload": {
            "name": "payload",
            "location": 96,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NodeStorage.from_payload": {
            "name": "from_payload",
            "location": 101,
            "return": [
                "'NodeStorage'"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "bytes"
                ]
            }
        },
        "NodeStorage.initialize": {
            "name": "initialize",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryNodeStorage.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryNodeStorage.all": {
            "name": "all",
            "location": 119,
            "return": [
                "Set[str]",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "federated_only": [
                    "bool",
                    "Union[int, str]",
                    "float",
                    "int"
                ]
            }
        },
        "InMemoryNodeStorage.get": {
            "name": "get",
            "location": 122,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "int"
                ],
                "federated_only": [
                    "str",
                    "bool",
                    "int",
                    "List[str]"
                ]
            }
        },
        "InMemoryNodeStorage.save": {
            "name": "save",
            "location": 128,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "InMemoryNodeStorage.remove": {
            "name": "remove",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "int"
                ]
            }
        },
        "InMemoryNodeStorage.clear": {
            "name": "clear",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryNodeStorage.payload": {
            "name": "payload",
            "location": 139,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InMemoryNodeStorage.from_payload": {
            "name": "from_payload",
            "location": 144,
            "return": [
                "Callable[..., None]",
                "SendCh[trio.abc.Stream]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "payload": [
                    "dict"
                ]
            }
        },
        "InMemoryNodeStorage.initialize": {
            "name": "initialize",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalFileBasedNodeStorage.__init__": {
            "name": "__init__",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "known_metadata_dir": [
                    "Optional[str]"
                ]
            }
        },
        "LocalFileBasedNodeStorage.__generate_filepath": {
            "name": "__generate_filepath",
            "location": 171,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str"
                ]
            }
        },
        "LocalFileBasedNodeStorage.__read": {
            "name": "__read",
            "location": 175,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "int",
                    "Callable",
                    "str"
                ],
                "federated_only": [
                    "Union[bytes, bytearray]",
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "LocalFileBasedNodeStorage.__write": {
            "name": "__write",
            "location": 186,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "node": [
                    "str",
                    "Union[int, str]"
                ]
            }
        },
        "LocalFileBasedNodeStorage.all": {
            "name": "all",
            "location": 192,
            "return": [
                "str",
                "float",
                "int",
                "list"
            ],
            "arguments": {
                "self": [],
                "federated_only": [
                    "Dict[str, str]",
                    "str",
                    "Tuple[Any, Any]"
                ]
            }
        },
        "LocalFileBasedNodeStorage.get": {
            "name": "get",
            "location": 202,
            "return": [
                "Tuple[str]",
                "Sequence[str]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str"
                ],
                "federated_only": [
                    "str",
                    "int",
                    "List[str]",
                    "List[Tuple[int, int]]",
                    "BinaryIO"
                ]
            }
        },
        "LocalFileBasedNodeStorage.save": {
            "name": "save",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "Optional[int]",
                    "int",
                    "str",
                    "list",
                    "bytes"
                ]
            }
        },
        "LocalFileBasedNodeStorage.remove": {
            "name": "remove",
            "location": 214,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "int"
                ]
            }
        },
        "LocalFileBasedNodeStorage.clear": {
            "name": "clear",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalFileBasedNodeStorage.payload": {
            "name": "payload",
            "location": 222,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LocalFileBasedNodeStorage.from_payload": {
            "name": "from_payload",
            "location": 230,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str"
                ],
                "payload": [
                    "Dict[str, Any]"
                ]
            }
        },
        "LocalFileBasedNodeStorage.initialize": {
            "name": "initialize",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryFileBasedNodeStorage.__init__": {
            "name": "__init__",
            "location": 249,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryFileBasedNodeStorage.__del__": {
            "name": "__del__",
            "location": 253,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TemporaryFileBasedNodeStorage.initialize": {
            "name": "initialize",
            "location": 257,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "S3NodeStorage.__init__": {
            "name": "__init__",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bucket_name": [
                    "str",
                    "Optional[str]"
                ],
                "s3_resource": [
                    "Sequence[Dict[str, str]]",
                    "T",
                    "Set[str]",
                    "list"
                ]
            }
        },
        "S3NodeStorage.bucket": {
            "name": "bucket",
            "location": 277,
            "return": [
                "List[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3NodeStorage.bucket_name": {
            "name": "bucket_name",
            "location": 281,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3NodeStorage.__read": {
            "name": "__read",
            "location": 284,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "node_obj": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "S3NodeStorage.generate_presigned_url": {
            "name": "generate_presigned_url",
            "location": 293,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str"
                ]
            }
        },
        "S3NodeStorage.all": {
            "name": "all",
            "location": 298,
            "return": [
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "federated_only": [
                    "bool",
                    "Union[int, str]",
                    "float",
                    "int"
                ]
            }
        },
        "S3NodeStorage.get": {
            "name": "get",
            "location": 306,
            "return": [
                "Tuple[str]",
                "Sequence[str]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "Dict[str, dict]",
                    "Optional[dict]"
                ],
                "federated_only": [
                    "str",
                    "bool",
                    "int",
                    "List[str]"
                ]
            }
        },
        "S3NodeStorage.save": {
            "name": "save",
            "location": 311,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "Type"
                ]
            }
        },
        "S3NodeStorage.remove": {
            "name": "remove",
            "location": 317,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "checksum_address": [
                    "str",
                    "int",
                    "Optional[List[str]]"
                ]
            }
        },
        "S3NodeStorage.payload": {
            "name": "payload",
            "location": 324,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3NodeStorage.from_payload": {
            "name": "from_payload",
            "location": 332,
            "return": [
                "IO",
                "str",
                "dict",
                "type",
                "Dict[str, List[str]]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Dict[str, Any]",
                    "Iterable['adi.Instance']"
                ],
                "payload": [
                    "dict",
                    "Dict[str, Any]",
                    "Iterable['adi.Instance']"
                ]
            }
        },
        "S3NodeStorage.initialize": {
            "name": "initialize",
            "location": 335,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/config/__init__.py": {},
    "GitkoinNuCypherHackathon-master/nucypher/crypto/api.py": {
        "secure_random": {
            "name": "secure_random",
            "location": 42,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "num_bytes": [
                    "int",
                    "Optional[int]",
                    "Callable"
                ]
            }
        },
        "secure_random_range": {
            "name": "secure_random_range",
            "location": 57,
            "return": [
                "int",
                "Dict[str, str]",
                "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionPeriodTerminationReason]",
                "float"
            ],
            "arguments": {
                "min": [
                    "int",
                    "Dict[str, str]",
                    "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionPeriodTerminationReason]",
                    "float"
                ],
                "max": [
                    "int",
                    "Dict[str, str]",
                    "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionPeriodTerminationReason]",
                    "float"
                ]
            }
        },
        "keccak_digest": {
            "name": "keccak_digest",
            "location": 70,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool",
                "List[int]",
                "Dict[str, int]"
            ],
            "arguments": {}
        },
        "ecdsa_sign": {
            "name": "ecdsa_sign",
            "location": 89,
            "return": [
                "List[int]",
                "int"
            ],
            "arguments": {
                "message": [
                    "str",
                    "int",
                    "BinaryIO"
                ],
                "privkey": [
                    "str",
                    "List[int]"
                ]
            }
        },
        "ecdsa_verify": {
            "name": "ecdsa_verify",
            "location": 105,
            "return": [
                "bool"
            ],
            "arguments": {
                "message": [
                    "bytes",
                    "int",
                    "Dict[str, Dict[str, str]]",
                    "str"
                ],
                "signature": [
                    "bytes",
                    "int",
                    "Dict[str, Dict[str, str]]",
                    "str"
                ],
                "pubkey": [
                    "bytes",
                    "str",
                    "bytearray"
                ]
            }
        },
        "generate_self_signed_certificate": {
            "name": "generate_self_signed_certificate",
            "location": 132,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "host": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[str]"
                ],
                "curve": [
                    "str",
                    "Callable",
                    "keys.GlobalKeys",
                    "Optional[str]",
                    "bool"
                ],
                "private_key": [
                    "int",
                    "Union[str, bytes]",
                    "str",
                    "bytes",
                    "keys.MailboxKeys",
                    "keys.NamespaceKeys"
                ],
                "days_valid": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "encrypt_and_sign": {
            "name": "encrypt_and_sign",
            "location": 159,
            "return": [
                "list",
                "str",
                "bytes",
                "Tuple[nucypher.crypto.kits.UmbralMessageKit, umbral.signing.Signature]"
            ],
            "arguments": {
                "recipient_pubkey_enc": [
                    "int",
                    "Callable",
                    "str"
                ],
                "plaintext": [
                    "int",
                    "Callable",
                    "str"
                ],
                "signer": [
                    "int",
                    "Callable",
                    "str"
                ],
                "sign_plaintext": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/crypto/constants.py": {},
    "GitkoinNuCypherHackathon-master/nucypher/crypto/kits.py": {
        "CryptoKit.split_bytes": {
            "name": "split_bytes",
            "location": 26,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Sequence[str]"
                ],
                "some_bytes": [
                    "str",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "CryptoKit.from_bytes": {
            "name": "from_bytes",
            "location": 34,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "str",
                    "AnyStr",
                    "int"
                ],
                "some_bytes": [
                    "bytes",
                    "int",
                    "dict",
                    "str"
                ]
            }
        },
        "MessageKit.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "capsule": [
                    "bool",
                    "float",
                    "Union[float, Tuple[float, float]]",
                    "str",
                    "bytes"
                ],
                "sender_pubkey_sig": [
                    "bool",
                    "float",
                    "Union[float, Tuple[float, float]]",
                    "str",
                    "bytes"
                ],
                "ciphertext": [
                    "bool",
                    "float",
                    "Union[float, Tuple[float, float]]",
                    "str",
                    "bytes"
                ],
                "signature": [
                    "bool",
                    "float",
                    "Union[float, Tuple[float, float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "MessageKit.to_bytes": {
            "name": "to_bytes",
            "location": 47,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "include_alice_pubkey": [
                    "str",
                    "float",
                    "dict"
                ]
            }
        },
        "MessageKit.signature": {
            "name": "signature",
            "location": 60,
            "return": [
                "int",
                "Set[str]",
                "str",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "MessageKit.__bytes__": {
            "name": "__bytes__",
            "location": 63,
            "return": [
                "str",
                "int",
                "bytearray",
                "Tuple[float, float]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "UmbralMessageKit.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UmbralMessageKit.from_bytes": {
            "name": "from_bytes",
            "location": 76,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "int",
                    "bool",
                    "list",
                    "str"
                ],
                "some_bytes": [
                    "int",
                    "float",
                    "List[float]",
                    "str",
                    "Union[Tuple[int, int], int]"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/crypto/powers.py": {
        "CryptoPower.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "power_ups": [
                    "Optional[str]",
                    "list",
                    "str",
                    "T",
                    "Iterable[T]"
                ]
            }
        },
        "CryptoPower.consume_power_up": {
            "name": "consume_power_up",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "power_up": [
                    "bool",
                    "bytes"
                ]
            }
        },
        "CryptoPower.power_ups": {
            "name": "power_ups",
            "location": 73,
            "return": [
                "Sequence[Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "power_up_class": [
                    "bool",
                    "Hashable",
                    "Set[str]",
                    "Type[T]",
                    "Dict[str, Type]"
                ]
            }
        },
        "BlockchainPower.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blockchain": [
                    "str",
                    "int",
                    "Sized",
                    "List[str]"
                ],
                "account": [
                    "str",
                    "int",
                    "Sized",
                    "List[str]"
                ]
            }
        },
        "BlockchainPower.unlock_account": {
            "name": "unlock_account",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ],
                "duration": [
                    "str"
                ]
            }
        },
        "BlockchainPower.sign_message": {
            "name": "sign_message",
            "location": 111,
            "return": [
                "str",
                "List[int]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "dict",
                    "list",
                    "myaku.datatypes.ArticleTextPosition",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "BlockchainPower.verify_message": {
            "name": "verify_message",
            "location": 121,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Union[float, str]"
                ],
                "pubkey": [
                    "str"
                ],
                "message": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]",
                    "float",
                    "Sequence[int]"
                ],
                "signature_bytes": [
                    "int",
                    "str",
                    "bytes",
                    "bytearray"
                ]
            }
        },
        "BlockchainPower.__del__": {
            "name": "__del__",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "KeyPairBasedPower.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pubkey": [
                    "umbral.keys.UmbralPublicKey",
                    "bytes",
                    "int",
                    "umbral.keys.UmbralPrivateKey"
                ],
                "keypair": [
                    "str",
                    "IO",
                    "dict",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "KeyPairBasedPower.__getattr__": {
            "name": "__getattr__",
            "location": 177,
            "return": [
                "bytes",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        },
        "KeyPairBasedPower.public_key": {
            "name": "public_key",
            "location": 189,
            "return": [
                "int",
                "str",
                "Tuple[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DelegatingPower.__init__": {
            "name": "__init__",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keying_material": [
                    "Union[bytes, str, None]",
                    "Optional[bytes]",
                    "bytes",
                    "Optional[Union[str, int]]"
                ],
                "password": [
                    "Optional[bytes]",
                    "bytes",
                    "Optional[str]",
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "DelegatingPower._get_privkey_from_label": {
            "name": "_get_privkey_from_label",
            "location": 223,
            "return": [
                "str",
                "bytes",
                "dict",
                "Optional[T]"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "Awaitable[Any]",
                    "Optional[Sequence[str]]",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "DelegatingPower.get_pubkey_from_label": {
            "name": "get_pubkey_from_label",
            "location": 226,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[str]",
                "bool",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "DelegatingPower.generate_kfrags": {
            "name": "generate_kfrags",
            "location": 229,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Tuple[bool, bool, bool]"
            ],
            "arguments": {
                "self": [],
                "bob_pubkey_enc": [
                    "int",
                    "bytes",
                    "bool",
                    "Tuple[int, int]",
                    "str"
                ],
                "signer": [
                    "int",
                    "bytes",
                    "bool",
                    "Tuple[int, int]",
                    "str"
                ],
                "label": [
                    "Tuple[int]",
                    "Sequence[Sequence[float]]",
                    "Dict[int, str]",
                    "List[str]",
                    "str"
                ],
                "m": [
                    "int",
                    "bytes",
                    "bool",
                    "Tuple[int, int]",
                    "str"
                ],
                "n": [
                    "int",
                    "bytes",
                    "bool",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/crypto/signing.py": {
        "SignatureStamp.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verifying_key": [
                    "bytes",
                    "Union[bytes, umbral.keys.UmbralPublicKey]",
                    "str"
                ],
                "signer": [
                    "Mapping[str, Any]",
                    "int",
                    "str"
                ]
            }
        },
        "SignatureStamp.__bytes__": {
            "name": "__bytes__",
            "location": 36,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignatureStamp.__call__": {
            "name": "__call__",
            "location": 39,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "Iterable[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignatureStamp.__hash__": {
            "name": "__hash__",
            "location": 42,
            "return": [
                "bytes",
                "dict",
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignatureStamp.__eq__": {
            "name": "__eq__",
            "location": 45,
            "return": [
                "str",
                "bool",
                "Union[int, float, complex]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[\"Cell\"]"
                ]
            }
        },
        "SignatureStamp.__add__": {
            "name": "__add__",
            "location": 48,
            "return": [
                "str",
                "Tuple[float, float]",
                "List[str]",
                "bytearray",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "List[str]",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "str",
                    "umbral.curvebn.CurveBN"
                ]
            }
        },
        "SignatureStamp.__radd__": {
            "name": "__radd__",
            "location": 51,
            "return": [
                "str",
                "bool",
                "Union[int, float, complex]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[\"Cell\"]"
                ]
            }
        },
        "SignatureStamp.__len__": {
            "name": "__len__",
            "location": 54,
            "return": [
                "str",
                "bytearray",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignatureStamp.__bool__": {
            "name": "__bool__",
            "location": 57,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignatureStamp.as_umbral_pubkey": {
            "name": "as_umbral_pubkey",
            "location": 60,
            "return": [
                "Tuple[int, int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignatureStamp.fingerprint": {
            "name": "fingerprint",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StrangerStamp.__call__": {
            "name": "__call__",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/crypto/splitters.py": {},
    "GitkoinNuCypherHackathon-master/nucypher/crypto/utils.py": {
        "fingerprint_from_key": {
            "name": "fingerprint_from_key",
            "location": 22,
            "return": [
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "public_key": [
                    "str"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/crypto/__init__.py": {},
    "GitkoinNuCypherHackathon-master/nucypher/keystore/keypairs.py": {
        "Keypair.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "private_key": [
                    "bytes",
                    "str",
                    "keys.NamespaceKeys"
                ],
                "public_key": [
                    "bytes",
                    "Tuple[int, int]",
                    "keys.MailboxKeys",
                    "keys.NamespaceKeys",
                    "int"
                ],
                "generate_keys_if_needed": [
                    "bool",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "Keypair.serialize_pubkey": {
            "name": "serialize_pubkey",
            "location": 68,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "as_b64": [
                    "list",
                    "bytes",
                    "Tuple[int, int, bytearray]",
                    "bool",
                    "int"
                ]
            }
        },
        "Keypair.fingerprint": {
            "name": "fingerprint",
            "location": 79,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncryptingKeypair.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EncryptingKeypair.decrypt": {
            "name": "decrypt",
            "location": 96,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "message_kit": [
                    "str",
                    "bool",
                    "int"
                ],
                "verifying_key": [
                    "bool",
                    "str",
                    "Iterable[Any]",
                    "bytes"
                ]
            }
        },
        "SigningKeypair.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SigningKeypair.sign": {
            "name": "sign",
            "location": 118,
            "return": [
                "bool",
                "str",
                "int",
                "Optional[recidiviz.common.constants.state.state_supervision_period.StateSupervisionPeriodSupervisionType]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bytes",
                    "Callable[[bytes], bytes]",
                    "IO"
                ]
            }
        },
        "SigningKeypair.get_signature_stamp": {
            "name": "get_signature_stamp",
            "location": 129,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "HostingKeypair.__init__": {
            "name": "__init__",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int",
                    "bytes"
                ],
                "private_key": [
                    "str",
                    "bytes"
                ],
                "curve": [
                    "str",
                    "argonautica.config.Backend",
                    "int",
                    "Optional[bytes]"
                ],
                "certificate": [
                    "bytes",
                    "keys.ContentKeys",
                    "str",
                    "umbral.params.UmbralParameters",
                    "int"
                ],
                "certificate_filepath": [
                    "str",
                    "int",
                    "bytes",
                    "Union[bytes, str]",
                    "Union[argonautica.config.Backend, argonautica.utils.Void]"
                ],
                "generate_certificate": [
                    "str",
                    "bool",
                    "Iterable[Any]",
                    "float",
                    "Iterable[str]"
                ]
            }
        },
        "HostingKeypair.generate_self_signed_cert": {
            "name": "generate_self_signed_cert",
            "location": 189,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "common_name": [
                    "str",
                    "int"
                ]
            }
        },
        "HostingKeypair.get_deployer": {
            "name": "get_deployer",
            "location": 196,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "rest_app": [
                    "dict",
                    "bool",
                    "Dict[Any, int]",
                    "str",
                    "int"
                ],
                "port": [
                    "dict",
                    "bool",
                    "Dict[Any, int]",
                    "str",
                    "int"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/keystore/keystore.py": {
        "KeyStore.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sqlalchemy_engine": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "KeyStore.add_key": {
            "name": "add_key",
            "location": 55,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "umbral.keys.UmbralPublicKey",
                    "umbral.keys.UmbralPrivateKey"
                ],
                "is_signing": [
                    "str",
                    "umbral.keys.UmbralPublicKey",
                    "List[int]"
                ],
                "session": [
                    "str",
                    "dict",
                    "Optional[Mapping]",
                    "Optional[core.models.User]",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "KeyStore.get_key": {
            "name": "get_key",
            "location": 71,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "fingerprint": [
                    "zerver.models.UserProfile",
                    "sqlalchemy.orm.session.Session",
                    "models.Queue",
                    "str"
                ],
                "session": [
                    "zerver.models.UserProfile",
                    "grouper.models.base.session.Session",
                    "str"
                ]
            }
        },
        "KeyStore.del_key": {
            "name": "del_key",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fingerprint": [
                    "bytes",
                    "sqlalchemy.orm.session.Session",
                    "Dict[str, Any]",
                    "T",
                    "tracim.models.auth.User",
                    "dict"
                ],
                "session": [
                    "grouper.models.user.User",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "KeyStore.add_policy_arrangement": {
            "name": "add_policy_arrangement",
            "location": 101,
            "return": [
                "int",
                "Iterable[str]",
                "List[django.db.models.query.QuerySet]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "expiration": [
                    "bool",
                    "Optional[List[Any]]",
                    "int",
                    "core.models.DepositAccount",
                    "str"
                ],
                "id": [
                    "bool",
                    "Optional[List[Any]]",
                    "int",
                    "core.models.DepositAccount",
                    "str"
                ],
                "kfrag": [
                    "bool",
                    "Optional[List[Any]]",
                    "int",
                    "core.models.DepositAccount",
                    "str"
                ],
                "alice_pubkey_sig": [
                    "bytes",
                    "bool",
                    "Union[Mapping, str]",
                    "str",
                    "Union[bytes, str, None]"
                ],
                "alice_signature": [
                    "bool",
                    "Optional[List[Any]]",
                    "int",
                    "core.models.DepositAccount",
                    "str"
                ],
                "session": [
                    "Optional[str]",
                    "Dict[int, dict]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict]",
                    "sqlalchemy.orm.Session",
                    "Callable"
                ]
            }
        },
        "KeyStore.get_policy_arrangement": {
            "name": "get_policy_arrangement",
            "location": 126,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arrangement_id": [
                    "bytes",
                    "int",
                    "sqlalchemy.orm.Session",
                    "grouper.models.base.session.Session",
                    "transfer.models.ArticleID"
                ],
                "session": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session",
                    "List[int]"
                ]
            }
        },
        "KeyStore.del_policy_arrangement": {
            "name": "del_policy_arrangement",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "arrangement_id": [
                    "bytes",
                    "int",
                    "sqlalchemy.orm.Session",
                    "metrics_backend.utils.ChannelIdentifier",
                    "transfer.models.ChannelID"
                ],
                "session": [
                    "sqlalchemy.orm.Session",
                    "int",
                    "sqlalchemy.orm.scoping.scoped_session"
                ]
            }
        },
        "KeyStore.attach_kfrag_to_saved_arrangement": {
            "name": "attach_kfrag_to_saved_arrangement",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "alice": [
                    "str",
                    "Optional[bool]",
                    "bool"
                ],
                "id_as_hex": [
                    "int",
                    "Optional[int]",
                    "order.transfer.models.OrderNumberSequenceID"
                ],
                "kfrag": [
                    "int",
                    "str",
                    "bool",
                    "rchain.crypto.PrivateKey",
                    "bytes"
                ],
                "session": [
                    "str",
                    "Type[T]",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "KeyStore.add_workorder": {
            "name": "add_workorder",
            "location": 163,
            "return": [
                "int",
                "Iterable[str]",
                "List[django.db.models.query.QuerySet]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "bob_pubkey_sig": [
                    "T",
                    "int",
                    "magic.models.Deck",
                    "bytes",
                    "Tuple[List[Any], List[Any]]",
                    "str",
                    "Optional[dict]",
                    "dict"
                ],
                "bob_signature": [
                    "Optional[str]",
                    "Optional[bool]",
                    "List[int]",
                    "Optional[int]",
                    "Optional[bytes]",
                    "Dict[str, Any]",
                    "bool"
                ],
                "arrangement_id": [
                    "Optional[str]",
                    "Optional[bool]",
                    "List[int]",
                    "Optional[int]",
                    "Optional[bytes]",
                    "Dict[str, Any]",
                    "bool"
                ],
                "session": [
                    "int",
                    "app.models.User"
                ]
            }
        },
        "KeyStore.get_workorders": {
            "name": "get_workorders",
            "location": 176,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arrangement_id": [
                    "int",
                    "bytes",
                    "Optional[int]",
                    "str"
                ],
                "session": [
                    "int",
                    "str",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "KeyStore.del_workorders": {
            "name": "del_workorders",
            "location": 188,
            "return": [
                "int",
                "Sequence[int]",
                "List[List[int]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "arrangement_id": [
                    "int",
                    "Optional[int]",
                    "bytes",
                    "str",
                    "Optional[str]"
                ],
                "session": [
                    "int",
                    "sqlalchemy.orm.Session",
                    "Optional[int]",
                    "sqlalchemy.orm.scoping.scoped_session"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/keystore/threading.py": {
        "ThreadedSession.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sqlalchemy_engine": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "ThreadedSession.__enter__": {
            "name": "__enter__",
            "location": 25,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThreadedSession.__exit__": {
            "name": "__exit__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/keystore/__init__.py": {},
    "GitkoinNuCypherHackathon-master/nucypher/keystore/db/models.py": {
        "Key.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "fingerprint": [
                    "str",
                    "bytes",
                    "List[Callable]",
                    "list",
                    "int"
                ],
                "key_data": [
                    "dict",
                    "int"
                ],
                "is_signing": [
                    "str",
                    "bytes",
                    "List[Callable]",
                    "list",
                    "int"
                ]
            }
        },
        "Key.from_umbral_key": {
            "name": "from_umbral_key",
            "location": 42,
            "return": [
                "str",
                "dict",
                "Dict[rchain.crypto.PrivateKey, int]",
                "Dict[str, str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "Set[str]",
                    "List[str]"
                ],
                "umbral_key": [
                    "bytes",
                    "str",
                    "raiden_contracts.utils.type_aliases.PrivateKey",
                    "List[str]"
                ],
                "is_signing": [
                    "str",
                    "bytes",
                    "Set[str]",
                    "List[str]"
                ]
            }
        },
        "PolicyArrangement.__init__": {
            "name": "__init__",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expiration": [
                    "bool",
                    "int",
                    "str"
                ],
                "id": [
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "kfrag": [
                    "bool",
                    "int",
                    "str"
                ],
                "alice_pubkey_sig": [
                    "bool",
                    "int",
                    "str"
                ],
                "alice_signature": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "Workorder.__init__": {
            "name": "__init__",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bob_pubkey_sig_id": [
                    "int",
                    "Optional[int]",
                    "Set[int]",
                    "List[str]"
                ],
                "bob_signature": [
                    "bool",
                    "str",
                    "int",
                    "raiden.utils.Address",
                    "Optional[str]"
                ],
                "arrangement_id": [
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/keystore/db/__init__.py": {
        "set_secure_delete_pragma": {
            "name": "set_secure_delete_pragma",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "dbapi_connection": [
                    "str",
                    "int"
                ],
                "connection_record": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/network/middleware.py": {
        "RestMiddleware.consider_arrangement": {
            "name": "consider_arrangement",
            "location": 33,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "arrangement": [
                    "bytes",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "RestMiddleware.get_certificate": {
            "name": "get_certificate",
            "location": 43,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int"
                ],
                "port": [
                    "str",
                    "int"
                ],
                "timeout": [
                    "str",
                    "int"
                ],
                "retry_attempts": [
                    "int",
                    "str"
                ],
                "retry_rate": [
                    "int",
                    "str"
                ],
                "current_attempt": [
                    "int",
                    "str"
                ]
            }
        },
        "RestMiddleware.enact_policy": {
            "name": "enact_policy",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "int",
                    "float",
                    "Optional[Any]",
                    "str"
                ],
                "id": [
                    "str",
                    "float",
                    "int",
                    "Optional[str]"
                ],
                "payload": [
                    "str",
                    "float",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "RestMiddleware.reencrypt": {
            "name": "reencrypt",
            "location": 72,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "work_order": [
                    "bytes",
                    "Optional[Exception]"
                ]
            }
        },
        "RestMiddleware.get_competitive_rate": {
            "name": "get_competitive_rate",
            "location": 80,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestMiddleware.get_treasure_map_from_node": {
            "name": "get_treasure_map_from_node",
            "location": 83,
            "return": [
                "Dict[str, Any]",
                "int",
                "List[str]",
                "Optional[str]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "str"
                ],
                "map_id": [
                    "str",
                    "int"
                ]
            }
        },
        "RestMiddleware.put_treasure_map_on_node": {
            "name": "put_treasure_map_on_node",
            "location": 88,
            "return": [
                "bytes",
                "dict",
                "str",
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "map_id": [
                    "str"
                ],
                "map_payload": [
                    "str",
                    "bytes"
                ]
            }
        },
        "RestMiddleware.send_work_order_payload_to_ursula": {
            "name": "send_work_order_payload_to_ursula",
            "location": 93,
            "return": [
                "Dict[str, str]",
                "str",
                "Iterable['Event']",
                "Dict[str, List[str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "work_order": [
                    "int",
                    "Callable[[Mapping], Awaitable]",
                    "Callable[[], Awaitable[Mapping]]"
                ]
            }
        },
        "RestMiddleware.node_information": {
            "name": "node_information",
            "location": 99,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Dict[int, dict]"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "port": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "certificate_filepath": [
                    "str",
                    "bool",
                    "Tuple[str]"
                ]
            }
        },
        "RestMiddleware.get_nodes_via_rest": {
            "name": "get_nodes_via_rest",
            "location": 103,
            "return": [
                "int",
                "List[str]",
                "Optional[str]",
                "Dict[str, str]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Dict[str, str]",
                    "Optional[Mapping[str, str]]"
                ],
                "certificate_filepath": [
                    "str",
                    "Dict[str, str]",
                    "Optional[Mapping[str, str]]"
                ],
                "announce_nodes": [
                    "str",
                    "bytes",
                    "BinaryIO"
                ],
                "nodes_i_need": [
                    "str",
                    "List[str]",
                    "Union[str, int]",
                    "float",
                    "bool",
                    "Optional[bool]"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/network/nodes.py": {
        "get_sysdate": {
            "name": "get_sysdate",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "encodeMessage": {
            "name": "encodeMessage",
            "location": 60,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "messageContent": [
                    "str",
                    "IO[bytes]",
                    "bytes"
                ]
            }
        },
        "sendMessage": {
            "name": "sendMessage",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "encodedMessage": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "FleetState.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FleetState.checksum": {
            "name": "checksum",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "checksum_value": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "FleetState.nickname": {
            "name": "nickname",
            "location": 94,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FleetState.nickname_metadata": {
            "name": "nickname_metadata",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FleetState.icon": {
            "name": "icon",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Learner.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "network_middleware": [
                    "int",
                    "Union[str, float]",
                    "str"
                ],
                "start_learning_now": [
                    "int",
                    "bool",
                    "float"
                ],
                "learn_on_same_thread": [
                    "int",
                    "Optional[str]",
                    "dict",
                    "float"
                ],
                "known_nodes": [
                    "int",
                    "Union[str, float]",
                    "str"
                ],
                "seed_nodes": [
                    "int",
                    "Union[str, float]",
                    "str"
                ],
                "known_certificates_dir": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "node_storage": [
                    "Optional[int]",
                    "int",
                    "Union[int, None]",
                    "Optional[float]"
                ],
                "save_metadata": [
                    "int",
                    "str",
                    "bool",
                    "float"
                ],
                "abort_on_learning_error": [
                    "str",
                    "bytes",
                    "List[str]",
                    "Union[str, int]",
                    "float",
                    "IO[str]"
                ]
            }
        },
        "Learner.known_nodes": {
            "name": "known_nodes",
            "location": 198,
            "return": [
                "str",
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Learner.load_seednodes": {
            "name": "load_seednodes",
            "location": 201,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "read_storages": [
                    "bool"
                ],
                "retry_attempts": [
                    "int",
                    "bool",
                    "Union[int, str]",
                    "BoundMethod[Callable(logging.Logger.debug)[Any, Any], logging.Logger]",
                    "List[str]",
                    "List[Tuple[int, int]]",
                    "str"
                ],
                "retry_rate": [
                    "int",
                    "bool",
                    "Optional[bool]",
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "timeout": [
                    "int",
                    "bool",
                    "Optional[bool]",
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "Learner.read_nodes_from_storage": {
            "name": "read_nodes_from_storage",
            "location": 249,
            "return": [
                "builtins.set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Learner.sorted_nodes": {
            "name": "sorted_nodes",
            "location": 254,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "twisted.python.failure.Failure"
            ],
            "arguments": {
                "self": []
            }
        },
        "Learner.remember_node": {
            "name": "remember_node",
            "location": 258,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int",
                    "List[List[bool]]",
                    "List[str]",
                    "Dict[int, Set[int]]"
                ],
                "force_verification_check": [
                    "int",
                    "str",
                    "slice",
                    "bool"
                ],
                "update_fleet_state": [
                    "bool",
                    "list",
                    "List[str]",
                    "List[Dict]",
                    "Iterable[str]"
                ]
            }
        },
        "Learner.update_fleet_state": {
            "name": "update_fleet_state",
            "location": 305,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Learner.start_learning_loop": {
            "name": "start_learning_loop",
            "location": 310,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "now": [
                    "bool",
                    "list",
                    "myaku.datatypes.ArticleTextPosition",
                    "List[int]",
                    "T"
                ]
            }
        },
        "Learner.stop_learning_loop": {
            "name": "stop_learning_loop",
            "location": 327,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Learner.handle_learning_errors": {
            "name": "handle_learning_errors",
            "location": 332,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Learner._crash_gracefully": {
            "name": "_crash_gracefully",
            "location": 344,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "failure": [
                    "Exception",
                    "Callable",
                    "bool",
                    "Mapping[str, Any]",
                    "nucypher.characters.control.emitters.StdoutEmitter"
                ]
            }
        },
        "Learner.shuffled_known_nodes": {
            "name": "shuffled_known_nodes",
            "location": 355,
            "return": [
                "int",
                "Union",
                "Union[Sequence, 'SweepFixedValues']"
            ],
            "arguments": {
                "self": []
            }
        },
        "Learner.select_teacher_nodes": {
            "name": "select_teacher_nodes",
            "location": 363,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Learner.cycle_teacher_node": {
            "name": "cycle_teacher_node",
            "location": 371,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Learner.current_teacher_node": {
            "name": "current_teacher_node",
            "location": 389,
            "return": [
                "str",
                "tuple",
                "Tuple[str, str, str]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "cycle": [
                    "str",
                    "bool"
                ]
            }
        },
        "Learner.learn_about_nodes_now": {
            "name": "learn_about_nodes_now",
            "location": 400,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "force": [
                    "str",
                    "bool"
                ]
            }
        },
        "Learner.keep_learning_about_nodes": {
            "name": "keep_learning_about_nodes",
            "location": 413,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Learner.learn_about_specific_nodes": {
            "name": "learn_about_specific_nodes",
            "location": 419,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "canonical_addresses": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Learner.block_until_number_of_known_nodes_is": {
            "name": "block_until_number_of_known_nodes_is",
            "location": 425,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "number_of_nodes_to_know": [
                    "Optional[List[Any]]",
                    "int",
                    "Optional[bool]",
                    "str"
                ],
                "timeout": [
                    "int",
                    "float",
                    "Optional[float]",
                    "bool",
                    "Optional[int]",
                    "datetime.datetime",
                    "str"
                ],
                "learn_on_this_thread": [
                    "bool",
                    "list"
                ]
            }
        },
        "Learner.block_until_specific_nodes_are_known": {
            "name": "block_until_specific_nodes_are_known",
            "location": 461,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "canonical_addresses": [
                    "bool",
                    "Callable",
                    "str"
                ],
                "timeout": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ],
                "allow_missing": [
                    "int",
                    "bool",
                    "str",
                    "Optional[List[str]]"
                ],
                "learn_on_this_thread": [
                    "str",
                    "float"
                ]
            }
        },
        "Learner._adjust_learning": {
            "name": "_adjust_learning",
            "location": 501,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node_list": [
                    "list",
                    "str",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "Learner._push_certain_newly_discovered_nodes_here": {
            "name": "_push_certain_newly_discovered_nodes_here",
            "location": 520,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "queue_to_push": [
                    "str",
                    "List[str]"
                ],
                "node_addresses": [
                    "str",
                    "Sequence[str]",
                    "tentaclio.protocols.Reader",
                    "TextIO",
                    "Optional[int]",
                    "bool",
                    "Optional[str]",
                    "Iterable[Any]",
                    "Iterable[float]"
                ]
            }
        },
        "Learner.network_bootstrap": {
            "name": "network_bootstrap",
            "location": 529,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "node_list": [
                    "list",
                    "str",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "Learner.get_nodes_by_ids": {
            "name": "get_nodes_by_ids",
            "location": 534,
            "return": [
                "int",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "node_ids": [
                    "int",
                    "str"
                ]
            }
        },
        "Learner.write_node_metadata": {
            "name": "write_node_metadata",
            "location": 546,
            "return": [
                "str",
                "Literal",
                "int",
                "Dict[str, Any]",
                "Type[Exception]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "Optional[str]"
                ],
                "serializer": [
                    "List[str]",
                    "str",
                    "int"
                ]
            }
        },
        "Learner.learn_from_teacher_node": {
            "name": "learn_from_teacher_node",
            "location": 549,
            "return": [
                "str",
                "int",
                "Type",
                "bool"
            ],
            "arguments": {
                "self": [],
                "eager": [
                    "Type",
                    "str",
                    "List[str]",
                    "bool",
                    "Signature"
                ]
            }
        },
        "VerifiableNode.__init__": {
            "name": "__init__",
            "location": 650,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "certificate": [
                    "bool",
                    "float",
                    "int",
                    "Union[float, Tuple[float, float]]"
                ],
                "certificate_filepath": [
                    "bool",
                    "float",
                    "int",
                    "Union[float, Tuple[float, float]]"
                ],
                "interface_signature": [
                    "str",
                    "bytes",
                    "Callable[[dict], None]",
                    "dict",
                    "Dict[str, int]"
                ],
                "timestamp": [
                    "bool",
                    "float",
                    "int",
                    "Union[float, Tuple[float, float]]"
                ]
            }
        },
        "VerifiableNode.seed_node_metadata": {
            "name": "seed_node_metadata",
            "location": 673,
            "return": [
                "str",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerifiableNode.from_tls_hosting_power": {
            "name": "from_tls_hosting_power",
            "location": 679,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "str"
                ],
                "tls_hosting_power": [
                    "str",
                    "Callable"
                ]
            }
        },
        "VerifiableNode.sorted_nodes": {
            "name": "sorted_nodes",
            "location": 684,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "twisted.python.failure.Failure"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerifiableNode._stamp_has_valid_wallet_signature": {
            "name": "_stamp_has_valid_wallet_signature",
            "location": 688,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerifiableNode.stamp_is_valid": {
            "name": "stamp_is_valid",
            "location": 698,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerifiableNode.interface_is_valid": {
            "name": "interface_is_valid",
            "location": 714,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerifiableNode.verify_id": {
            "name": "verify_id",
            "location": 727,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ursula_id": [
                    "int",
                    "str"
                ],
                "digest_factory": [
                    "int",
                    "str"
                ]
            }
        },
        "VerifiableNode.validate_metadata": {
            "name": "validate_metadata",
            "location": 732,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "accept_federated_only": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "VerifiableNode.verify_node": {
            "name": "verify_node",
            "location": 742,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "network_middleware": [
                    "str",
                    "bytes",
                    "List[str]",
                    "dict"
                ],
                "certificate_filepath": [
                    "str",
                    "bytes",
                    "List[str]",
                    "dict"
                ],
                "accept_federated_only": [
                    "str",
                    "int",
                    "float",
                    "Sequence"
                ],
                "force": [
                    "bool",
                    "Mapping",
                    "str"
                ]
            }
        },
        "VerifiableNode.substantiate_stamp": {
            "name": "substantiate_stamp",
            "location": 789,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "passphrase": [
                    "str",
                    "int",
                    "Union[str, dict]"
                ]
            }
        },
        "VerifiableNode._signable_interface_info_message": {
            "name": "_signable_interface_info_message",
            "location": 795,
            "return": [
                "Iterable[Any]",
                "bool",
                "str",
                "int",
                "Dict[str, bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerifiableNode._sign_and_date_interface_info": {
            "name": "_sign_and_date_interface_info",
            "location": 799,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VerifiableNode._interface_signature": {
            "name": "_interface_signature",
            "location": 805,
            "return": [
                "bool",
                "Signature",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerifiableNode.timestamp": {
            "name": "timestamp",
            "location": 814,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerifiableNode.timestamp_bytes": {
            "name": "timestamp_bytes",
            "location": 822,
            "return": [
                "int",
                "eth_keys.datatypes.PublicKey"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerifiableNode.common_name": {
            "name": "common_name",
            "location": 826,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerifiableNode.certificate_filename": {
            "name": "certificate_filename",
            "location": 834,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "VerifiableNode.get_certificate_filepath": {
            "name": "get_certificate_filepath",
            "location": 837,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "certificates_dir": [
                    "str",
                    "bool"
                ]
            }
        },
        "VerifiableNode.save_certificate_to_disk": {
            "name": "save_certificate_to_disk",
            "location": 840,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "float",
                    "str",
                    "int",
                    "List[Dict]"
                ],
                "force": [
                    "str",
                    "Tuple[int, int, int]",
                    "int",
                    "float"
                ]
            }
        },
        "VerifiableNode.from_seednode_metadata": {
            "name": "from_seednode_metadata",
            "location": 858,
            "return": [
                "dict",
                "Dict[str, str]",
                "Dict[str, bool]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "requests.cookies.RequestsCookieJar",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "seednode_metadata": [
                    "requests.cookies.RequestsCookieJar",
                    "int",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "VerifiableNode.from_seed_and_stake_info": {
            "name": "from_seed_and_stake_info",
            "location": 873,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "int"
                ],
                "host": [
                    "str",
                    "bytes",
                    "float",
                    "int",
                    "bool"
                ],
                "certificates_directory": [
                    "str",
                    "Callable",
                    "Optional[str]"
                ],
                "federated_only": [
                    "str",
                    "dict",
                    "int"
                ],
                "port": [
                    "str",
                    "bytes",
                    "float",
                    "int",
                    "bool"
                ],
                "checksum_address": [
                    "str"
                ],
                "minimum_stake": [
                    "int",
                    "float",
                    "bool",
                    "str",
                    "set"
                ],
                "network_middleware": [
                    "Optional[str]",
                    "Optional[float]",
                    "str"
                ]
            }
        },
        "VerifiableNode.from_rest_url": {
            "name": "from_rest_url",
            "location": 925,
            "return": [
                "str",
                "Union[str, bytes]",
                "Iterable[str]",
                "List[Dict[str, Any]]",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "\"ks.Series[str]\"",
                    "\"ks.Series[int]\"",
                    "bytes",
                    "requests.Response"
                ],
                "network_middleware": [
                    "str",
                    "Optional[str]",
                    "List[dict]",
                    "Union[str, bytes]",
                    "int"
                ],
                "host": [
                    "str",
                    "Optional[str]",
                    "List[dict]",
                    "Union[str, bytes]",
                    "int"
                ],
                "port": [
                    "str",
                    "Optional[str]",
                    "List[dict]",
                    "Union[str, bytes]",
                    "int"
                ],
                "certificate_filepath": [
                    "str",
                    "Optional[str]",
                    "List[dict]",
                    "Union[str, bytes]",
                    "int"
                ],
                "federated_only": [
                    "str",
                    "\"ks.Series[str]\"",
                    "\"ks.Series[int]\"",
                    "bytes",
                    "requests.Response"
                ]
            }
        },
        "VerifiableNode.nickname_icon": {
            "name": "nickname_icon",
            "location": 941,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Learner.load_seednodes.__attempt_seednode_learning": {
            "name": "__attempt_seednode_learning",
            "location": 214,
            "return": [
                ""
            ],
            "arguments": {
                "seednode_metadata": [
                    "dict",
                    "int"
                ],
                "current_attempt": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/network/protocols.py": {
        "InterfaceInfo.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int",
                    "bool"
                ],
                "port": [
                    "int",
                    "float",
                    "bool",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "InterfaceInfo.from_bytes": {
            "name": "from_bytes",
            "location": 33,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "url_string": [
                    "str",
                    "bytes",
                    "List[int]",
                    "AnyStr"
                ]
            }
        },
        "InterfaceInfo.uri": {
            "name": "uri",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterfaceInfo.formal_uri": {
            "name": "formal_uri",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterfaceInfo.__bytes__": {
            "name": "__bytes__",
            "location": 47,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "InterfaceInfo.__add__": {
            "name": "__add__",
            "location": 50,
            "return": [
                "str",
                "bytearray",
                "Union[str, bytes]",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bytes",
                    "dict",
                    "int",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "InterfaceInfo.__radd__": {
            "name": "__radd__",
            "location": 53,
            "return": [
                "bool",
                "type",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/network/server.py": {
        "ProxyRESTServer.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rest_host": [
                    "str",
                    "bytes",
                    "django.contrib.auth.models.User",
                    "protocols.Bible"
                ],
                "rest_port": [
                    "str",
                    "bytes",
                    "django.contrib.auth.models.User",
                    "protocols.Bible"
                ],
                "hosting_power": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ],
                "routes": [
                    "str",
                    "tuple",
                    "os.PathLike",
                    "bokeh.models.ColumnDataSource"
                ]
            }
        },
        "ProxyRESTServer.rest_url": {
            "name": "rest_url",
            "location": 63,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProxyRESTRoutes.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db_name": [
                    "str",
                    "List[str]",
                    "sqlalchemy.MetaData",
                    "Dict[str, Any]"
                ],
                "db_filepath": [
                    "str",
                    "Optional[str]"
                ],
                "network_middleware": [
                    "models.FileOwner",
                    "sqlalchemy.Table",
                    "Sequence[Dict[str, str]]",
                    "float",
                    "neuromation.api.login.AuthCode"
                ],
                "federated_only": [
                    "models.FileOwner",
                    "sqlalchemy.Table",
                    "Sequence[Dict[str, str]]",
                    "float",
                    "neuromation.api.login.AuthCode"
                ],
                "treasure_map_tracker": [
                    "models.FileOwner",
                    "sqlalchemy.Table",
                    "Sequence[Dict[str, str]]",
                    "float",
                    "neuromation.api.login.AuthCode"
                ],
                "node_tracker": [
                    "Optional[str]",
                    "bool",
                    "dict",
                    "str",
                    "Optional[int]"
                ],
                "node_bytes_caster": [
                    "str",
                    "Optional[str]",
                    "float",
                    "Dict[str, Any]",
                    "accounts.models.AccountPermissionType"
                ],
                "work_order_tracker": [
                    "str",
                    "trinity.db.base.AsyncBaseDB",
                    "bool",
                    "List[str]"
                ],
                "node_recorder": [
                    "Optional[str]",
                    "bool",
                    "dict",
                    "str",
                    "Optional[int]"
                ],
                "stamp": [
                    "models.FileOwner",
                    "sqlalchemy.Table",
                    "Sequence[Dict[str, str]]",
                    "float",
                    "neuromation.api.login.AuthCode"
                ],
                "verifier": [
                    "models.FileOwner",
                    "sqlalchemy.Table",
                    "Sequence[Dict[str, str]]",
                    "float",
                    "neuromation.api.login.AuthCode"
                ],
                "suspicious_activity_tracker": [
                    "models.FileOwner",
                    "sqlalchemy.Table",
                    "Sequence[Dict[str, str]]",
                    "float",
                    "neuromation.api.login.AuthCode"
                ],
                "certificate_dir": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "ProxyRESTRoutes.public_information": {
            "name": "public_information",
            "location": 149,
            "return": [
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProxyRESTRoutes.all_known_nodes": {
            "name": "all_known_nodes",
            "location": 160,
            "return": [
                "dict",
                "str",
                "bytes",
                "Tuple[int, Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "apistar.http.Request",
                    "aiohttp.web.Request",
                    "django.db.models.query.QuerySet",
                    "dict",
                    "flask.Request"
                ]
            }
        },
        "ProxyRESTRoutes.node_metadata_exchange": {
            "name": "node_metadata_exchange",
            "location": 167,
            "return": [
                "int",
                "zerver.models.Realm",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "django.http.HttpRequest"
                ],
                "query_params": [
                    "apistar.http.QueryParams",
                    "django.http.HttpRequest",
                    "List[Tuple[str, str]]",
                    "aiohttp.web.Request"
                ]
            }
        },
        "ProxyRESTRoutes.consider_arrangement": {
            "name": "consider_arrangement",
            "location": 201,
            "return": [
                "int",
                "twisted.python.failure.Failure",
                "List[str]",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "aiohttp.web.Request",
                    "apistar.http.Request"
                ]
            }
        },
        "ProxyRESTRoutes.set_policy": {
            "name": "set_policy",
            "location": 219,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "id_as_hex": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "request": [
                    "str",
                    "Optional[int]",
                    "dict"
                ]
            }
        },
        "ProxyRESTRoutes.reencrypt_via_rest": {
            "name": "reencrypt_via_rest",
            "location": 253,
            "return": [
                "List[str]",
                "Optional[str]",
                "int",
                "models.Base",
                "str",
                "Dict[str, Any]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "id_as_hex": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[uuid.UUID, mtg_ssm.scryfall.models.ScryCard]",
                    "float"
                ],
                "request": [
                    "Optional[str]",
                    "dict",
                    "Optional[int]",
                    "Optional[bytes]",
                    "int",
                    "Request"
                ]
            }
        },
        "ProxyRESTRoutes.provide_treasure_map": {
            "name": "provide_treasure_map",
            "location": 289,
            "return": [
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {
                "self": [],
                "treasure_map_id": [
                    "int",
                    "str"
                ]
            }
        },
        "ProxyRESTRoutes.receive_treasure_map": {
            "name": "receive_treasure_map",
            "location": 304,
            "return": [
                "dict",
                "str",
                "Dict[str, Any]",
                "models.Base"
            ],
            "arguments": {
                "self": [],
                "treasure_map_id": [
                    "str",
                    "int",
                    "List[int]",
                    "Optional[int]",
                    "bool"
                ],
                "request": [
                    "str"
                ]
            }
        },
        "ProxyRESTRoutes.status": {
            "name": "status",
            "location": 333,
            "return": [
                "Optional[str]",
                "bool",
                "str",
                "Dict[str, Any]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "apistar.http.Request",
                    "django.http.HttpRequest",
                    "aiohttp.web.Request",
                    "Dict[str, str]",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "TLSHostingPower.__init__": {
            "name": "__init__",
            "location": 350,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int"
                ],
                "public_certificate": [
                    "int",
                    "str",
                    "float"
                ],
                "public_certificate_filepath": [
                    "int",
                    "float",
                    "pathpy.core.network.Network",
                    "str"
                ]
            }
        },
        "ProxyRESTRoutes.node_metadata_exchange.learn_about_announced_nodes": {
            "name": "learn_about_announced_nodes",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/network/__init__.py": {},
    "GitkoinNuCypherHackathon-master/nucypher/network/nicknames/__init__.py": {
        "nicename": {
            "name": "nicename",
            "location": 37,
            "return": [],
            "arguments": {
                "symbol": []
            }
        },
        "nickname_from_seed": {
            "name": "nickname_from_seed",
            "location": 45,
            "return": [],
            "arguments": {
                "seed": [],
                "number_of_pairs": []
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/policy/models.py": {
        "Arrangement.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alice": [
                    "str",
                    "bool",
                    "list",
                    "List[int]"
                ],
                "expiration": [
                    "str",
                    "bool",
                    "list",
                    "List[int]"
                ],
                "ursula": [
                    "str",
                    "bool",
                    "list",
                    "List[int]"
                ],
                "id": [
                    "bool",
                    "Optional[str]",
                    "Optional[Tuple[str]]",
                    "Optional[int]",
                    "Optional[List[str]]",
                    "Optional[float]"
                ],
                "kfrag": [
                    "str",
                    "bool",
                    "list",
                    "List[int]"
                ],
                "value": [
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                    "bool"
                ],
                "alices_signature": [
                    "bool",
                    "str"
                ]
            }
        },
        "Arrangement.__bytes__": {
            "name": "__bytes__",
            "location": 76,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arrangement.from_bytes": {
            "name": "from_bytes",
            "location": 80,
            "return": [
                "OrderedDict",
                "Optional[str]",
                "SendCh[trio.abc.Stream]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "Optional[int]",
                    "Dict[int, Dict[str, str]]"
                ],
                "arrangement_as_bytes": [
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "Arrangement.encrypt_payload_for_ursula": {
            "name": "encrypt_payload_for_ursula",
            "location": 87,
            "return": [
                "bool",
                "str",
                "Union[str, Pattern]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arrangement.payload": {
            "name": "payload",
            "location": 92,
            "return": [
                "str",
                "bytearray",
                "bytes",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Arrangement.publish": {
            "name": "publish",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Arrangement.revoke": {
            "name": "revoke",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Policy.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "alice": [
                    "str",
                    "Sequence[str]",
                    "List[List[Any]]"
                ],
                "label": [
                    "str",
                    "Sequence[str]",
                    "List[List[Any]]"
                ],
                "bob": [
                    "str",
                    "Sequence[str]",
                    "List[List[Any]]"
                ],
                "kfrags": [
                    "str",
                    "Sequence[str]",
                    "List[List[Any]]"
                ],
                "public_key": [
                    "List[int]",
                    "Tuple[dict, int]",
                    "bool",
                    "Dict[str, Any]",
                    "List[float]",
                    "bytes",
                    "List[str]"
                ],
                "m": [
                    "List[List[str]]",
                    "float"
                ],
                "alices_signature": [
                    "str",
                    "Sequence[str]",
                    "List[List[Any]]"
                ]
            }
        },
        "Policy.n": {
            "name": "n",
            "location": 162,
            "return": [
                "float",
                "str",
                "T",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Policy.hrac": {
            "name": "hrac",
            "location": 165,
            "return": [
                "str",
                "dict",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Policy.publish_treasure_map": {
            "name": "publish_treasure_map",
            "location": 181,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "network_middleware": [
                    "bytes",
                    "bool",
                    "int"
                ]
            }
        },
        "Policy.publish": {
            "name": "publish",
            "location": 207,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "network_middleware": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Policy.__assign_kfrags": {
            "name": "__assign_kfrags",
            "location": 211,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Policy.enact": {
            "name": "enact",
            "location": 232,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "network_middleware": [
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "publish": [
                    "bool",
                    "str",
                    "list",
                    "Dict[str, str]",
                    "List[str]",
                    "Iterable[float]"
                ]
            }
        },
        "Policy.consider_arrangement": {
            "name": "consider_arrangement",
            "location": 254,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "network_middleware": [
                    "umbral.kfrags.KFrag",
                    "bool"
                ],
                "ursula": [
                    "str",
                    "SendCh[trio.abc.Stream]"
                ],
                "arrangement": [
                    "umbral.kfrags.KFrag",
                    "bool"
                ]
            }
        },
        "Policy.make_arrangements": {
            "name": "make_arrangements",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "network_middleware": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "deposit": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "expiration": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "ursulas": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Policy._consider_arrangements": {
            "name": "_consider_arrangements",
            "location": 289,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "network_middleware": [
                    "bool",
                    "List[str]",
                    "Union[int, Tuple[int, int]]",
                    "List[Tuple[int, int]]",
                    "int"
                ],
                "candidate_ursulas": [
                    "Set[nucypher.characters.lawful.Ursula]",
                    "bool",
                    "str"
                ],
                "deposit": [
                    "Optional[Sequence[str]]",
                    "int",
                    "float",
                    "str"
                ],
                "expiration": [
                    "Optional[Sequence[str]]",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "FederatedPolicy.__init__": {
            "name": "__init__",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ursulas": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "FederatedPolicy.make_arrangements": {
            "name": "make_arrangements",
            "location": 314,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "network_middleware": [
                    "int",
                    "Callable",
                    "str"
                ],
                "deposit": [
                    "int",
                    "Callable",
                    "str"
                ],
                "expiration": [
                    "int",
                    "Callable",
                    "str"
                ],
                "handpicked_ursulas": [
                    "int",
                    "float",
                    "Set[nucypher.characters.lawful.Ursula]",
                    "Iterable[Optional[Any]]",
                    "Optional[int]"
                ]
            }
        },
        "TreasureMap.__init__": {
            "name": "__init__",
            "location": 353,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "m": [
                    "int",
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[List[float]]",
                    "Optional[List[str]]",
                    "Optional[str]"
                ],
                "destinations": [
                    "bool",
                    "float",
                    "Union[float, Tuple[float, float]]",
                    "str",
                    "bytes"
                ],
                "message_kit": [
                    "bool",
                    "float",
                    "Union[float, Tuple[float, float]]",
                    "str",
                    "bytes"
                ],
                "public_signature": [
                    "bool",
                    "float",
                    "Union[float, Tuple[float, float]]",
                    "str",
                    "bytes"
                ],
                "hrac": [
                    "bool",
                    "float",
                    "Union[float, Tuple[float, float]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "TreasureMap.prepare_for_publication": {
            "name": "prepare_for_publication",
            "location": 376,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "bob_encrypting_key": [
                    "bytes",
                    "str"
                ],
                "bob_verifying_key": [
                    "bytes",
                    "Optional[str]",
                    "str"
                ],
                "alice_stamp": [
                    "bytes",
                    "int",
                    "str"
                ],
                "label": [
                    "bytes",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "TreasureMap._set_payload": {
            "name": "_set_payload",
            "location": 405,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TreasureMap.__bytes__": {
            "name": "__bytes__",
            "location": 409,
            "return": [
                "bool",
                "Dict[str, List[str]]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreasureMap._verifying_key": {
            "name": "_verifying_key",
            "location": 416,
            "return": [
                "int",
                "str",
                "Tuple[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreasureMap.nodes_as_bytes": {
            "name": "nodes_as_bytes",
            "location": 419,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreasureMap.add_arrangement": {
            "name": "add_arrangement",
            "location": 425,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "arrangement": [
                    "bytes"
                ]
            }
        },
        "TreasureMap.public_id": {
            "name": "public_id",
            "location": 430,
            "return": [
                "str",
                "int",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreasureMap.from_bytes": {
            "name": "from_bytes",
            "location": 439,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "T"
                ],
                "bytes_representation": [
                    "str",
                    "umbral.params.UmbralParameters",
                    "int",
                    "Dict[str, Union[str, int, bool]]"
                ],
                "verify": [
                    "int",
                    "Deque[int]"
                ]
            }
        },
        "TreasureMap.public_verify": {
            "name": "public_verify",
            "location": 454,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreasureMap.orient": {
            "name": "orient",
            "location": 463,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "compass": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TreasureMap.__eq__": {
            "name": "__eq__",
            "location": 477,
            "return": [
                "str",
                "bytearray",
                "int",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "bytes",
                    "bool",
                    "eth_keys.datatypes.Signature",
                    "bytearray",
                    "str"
                ]
            }
        },
        "TreasureMap.__iter__": {
            "name": "__iter__",
            "location": 480,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreasureMap.__len__": {
            "name": "__len__",
            "location": 483,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkOrder.__init__": {
            "name": "__init__",
            "location": 488,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bob": [
                    "bool",
                    "str",
                    "list",
                    "Optional[Callable[[], bool]]",
                    "int"
                ],
                "arrangement_id": [
                    "int",
                    "str"
                ],
                "capsules": [
                    "bool",
                    "str",
                    "list",
                    "Optional[Callable[[], bool]]",
                    "int"
                ],
                "capsule_signatures": [
                    "bool",
                    "str",
                    "list",
                    "Optional[Callable[[], bool]]",
                    "int"
                ],
                "receipt_bytes": [
                    "int",
                    "str",
                    "float"
                ],
                "receipt_signature": [
                    "bool",
                    "str",
                    "list",
                    "Optional[Callable[[], bool]]",
                    "int"
                ],
                "ursula": [
                    "bool",
                    "str",
                    "list",
                    "Optional[Callable[[], bool]]",
                    "int"
                ]
            }
        },
        "WorkOrder.__repr__": {
            "name": "__repr__",
            "location": 506,
            "return": [
                "bool",
                "str",
                "Union[str, Pattern]",
                "int",
                "Optional[int]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkOrder.__eq__": {
            "name": "__eq__",
            "location": 512,
            "return": [
                "int",
                "str",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "int"
                ]
            }
        },
        "WorkOrder.__len__": {
            "name": "__len__",
            "location": 516,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkOrder.construct_by_bob": {
            "name": "construct_by_bob",
            "location": 520,
            "return": [
                "str",
                "bool",
                "Iterable[str]",
                "List[int]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str"
                ],
                "arrangement_id": [
                    "int",
                    "str"
                ],
                "capsules": [
                    "bytes",
                    "int",
                    "Optional[bytes]",
                    "str"
                ],
                "ursula": [
                    "bytes",
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "bob": [
                    "int",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "WorkOrder.from_rest_payload": {
            "name": "from_rest_payload",
            "location": 530,
            "return": [
                "str",
                "dict",
                "Iterable[str]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "int"
                ],
                "arrangement_id": [
                    "int"
                ],
                "rest_payload": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ]
            }
        },
        "WorkOrder.payload": {
            "name": "payload",
            "location": 549,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkOrder.complete": {
            "name": "complete",
            "location": 556,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "cfrags_and_signatures": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[str]",
                    "List[str]",
                    "bool",
                    "list"
                ]
            }
        },
        "WorkOrderHistory.__init__": {
            "name": "__init__",
            "location": 573,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkOrderHistory.__contains__": {
            "name": "__contains__",
            "location": 576,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "T",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "WorkOrderHistory.__getitem__": {
            "name": "__getitem__",
            "location": 579,
            "return": [
                "str",
                "DefaultDict[int, List[Any]]",
                "OrderedDict"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "os.DirEntry",
                    "Callable",
                    "list"
                ]
            }
        },
        "WorkOrderHistory.__setitem__": {
            "name": "__setitem__",
            "location": 582,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "slice",
                    "bool"
                ],
                "value": [
                    "str",
                    "slice",
                    "bool"
                ]
            }
        },
        "WorkOrderHistory.__len__": {
            "name": "__len__",
            "location": 585,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkOrderHistory.ursulas": {
            "name": "ursulas",
            "location": 589,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WorkOrderHistory.by_capsule": {
            "name": "by_capsule",
            "location": 592,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "capsule": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/policy/__init__.py": {},
    "GitkoinNuCypherHackathon-master/nucypher/utilities/logging.py": {
        "formatUrsulaLogEvent": {
            "name": "formatUrsulaLogEvent",
            "location": 28,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "event": [
                    "str",
                    "int"
                ]
            }
        },
        "_get_or_create_user_log_dir": {
            "name": "_get_or_create_user_log_dir",
            "location": 41,
            "return": [
                "pathlib.Path",
                "Callable"
            ],
            "arguments": {}
        },
        "getJsonFileObserver": {
            "name": "getJsonFileObserver",
            "location": 45,
            "return": [
                "str",
                "pathlib.Path",
                "datetime.datetime",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "getTextFileObserver": {
            "name": "getTextFileObserver",
            "location": 52,
            "return": [
                "str",
                "pathlib.Path",
                "datetime.datetime"
            ],
            "arguments": {}
        },
        "simpleObserver": {
            "name": "simpleObserver",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "event": [
                    "Dict[str, Any]",
                    "str",
                    "config.ConfigStorage"
                ]
            }
        },
        "logToSentry": {
            "name": "logToSentry",
            "location": 68,
            "return": [
                "Union[tuple, list]",
                "Iterable[Hashable]",
                "str"
            ],
            "arguments": {
                "event": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/utilities/logging_.py": {
        "simpleObserver": {
            "name": "simpleObserver",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "event": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "logToSentry": {
            "name": "logToSentry",
            "location": 32,
            "return": [
                "Union[tuple, list]",
                "Iterable[Hashable]",
                "str"
            ],
            "arguments": {
                "event": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/utilities/__init__.py": {},
    "GitkoinNuCypherHackathon-master/nucypher/utilities/sandbox/blockchain.py": {
        "token_airdrop": {
            "name": "token_airdrop",
            "location": 31,
            "return": [
                "int",
                "Sequence[Tuple[float, float]]",
                "Dict[str, str]",
                "bytes",
                "str"
            ],
            "arguments": {
                "token_agent": [
                    "int",
                    "List[List[int]]",
                    "List[str]",
                    "float"
                ],
                "amount": [
                    "List[str]",
                    "int",
                    "str",
                    "Sequence[int]"
                ],
                "origin": [
                    "List[str]",
                    "int",
                    "str",
                    "Sequence[int]"
                ],
                "addresses": [
                    "List[str]",
                    "int",
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "token_airdrop.txs": {
            "name": "txs",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TesterBlockchain.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "test_accounts": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]"
                ],
                "poa": [
                    "bool",
                    "tuple",
                    "dict"
                ],
                "airdrop": [
                    "bool",
                    "tuple",
                    "dict"
                ]
            }
        },
        "TesterBlockchain.sever_connection": {
            "name": "sever_connection",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "float",
                    "type"
                ]
            }
        },
        "TesterBlockchain.__generate_insecure_unlocked_accounts": {
            "name": "__generate_insecure_unlocked_accounts",
            "location": 82,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "quantity": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "TesterBlockchain.ether_airdrop": {
            "name": "ether_airdrop",
            "location": 101,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "float"
                ]
            }
        },
        "TesterBlockchain.time_travel": {
            "name": "time_travel",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hours": [
                    "int",
                    "bool",
                    "Iterable['cirq.Qid']"
                ],
                "seconds": [
                    "int",
                    "bool",
                    "Iterable['cirq.Qid']"
                ],
                "periods": [
                    "int",
                    "bool",
                    "Iterable['cirq.Qid']"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/utilities/sandbox/constants.py": {},
    "GitkoinNuCypherHackathon-master/nucypher/utilities/sandbox/middleware.py": {
        "MockRestMiddleware._get_mock_client_by_ursula": {
            "name": "_get_mock_client_by_ursula",
            "location": 30,
            "return": [
                "str",
                "Optional[str]",
                "Union[Sequence[str], Sequence[int]]"
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "MockRestMiddleware._get_mock_client_by_url": {
            "name": "_get_mock_client_by_url",
            "location": 34,
            "return": [
                "str",
                "Optional[str]",
                "Union[Sequence[str], Sequence[int]]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "MockRestMiddleware._get_mock_client_by_port": {
            "name": "_get_mock_client_by_port",
            "location": 38,
            "return": [
                "Optional[str]",
                "str",
                "float",
                "dict"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "str"
                ]
            }
        },
        "MockRestMiddleware._get_ursula_by_port": {
            "name": "_get_ursula_by_port",
            "location": 44,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "bool",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "port": [
                    "str",
                    "int",
                    "models.characters.subroutines_base.Subroutine"
                ]
            }
        },
        "MockRestMiddleware.get_certificate": {
            "name": "get_certificate",
            "location": 51,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "bool"
                ],
                "port": [
                    "str",
                    "Optional[str]"
                ],
                "timeout": [
                    "int",
                    "bool"
                ],
                "retry_attempts": [
                    "int",
                    "bool"
                ],
                "retry_rate": [
                    "int",
                    "bool"
                ]
            }
        },
        "MockRestMiddleware.consider_arrangement": {
            "name": "consider_arrangement",
            "location": 56,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "arrangement": [
                    "bool",
                    "str",
                    "Optional[bool]",
                    "List[str]"
                ]
            }
        },
        "MockRestMiddleware.enact_policy": {
            "name": "enact_policy",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "id": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[float]"
                ],
                "payload": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "MockRestMiddleware.send_work_order_payload_to_ursula": {
            "name": "send_work_order_payload_to_ursula",
            "location": 68,
            "return": [
                "str",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "work_order": [
                    "int",
                    "str"
                ]
            }
        },
        "MockRestMiddleware.get_treasure_map_from_node": {
            "name": "get_treasure_map_from_node",
            "location": 74,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "Optional[int]",
                    "Optional[str]",
                    "int",
                    "Optional[bytes]"
                ],
                "map_id": [
                    "str",
                    "int"
                ]
            }
        },
        "MockRestMiddleware.node_information": {
            "name": "node_information",
            "location": 78,
            "return": [
                "bytes",
                "dict",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "port": [
                    "str",
                    "List[str]"
                ],
                "certificate_filepath": [
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "MockRestMiddleware.get_nodes_via_rest": {
            "name": "get_nodes_via_rest",
            "location": 83,
            "return": [
                "int",
                "List[str]",
                "Optional[str]",
                "Dict[str, str]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Optional[bytes]",
                    "Optional[str]",
                    "bool",
                    "dict",
                    "Dict[str, object]"
                ],
                "certificate_filepath": [
                    "str",
                    "bool",
                    "IO",
                    "dict",
                    "float"
                ],
                "announce_nodes": [
                    "bool",
                    "float",
                    "bytes",
                    "str",
                    "int"
                ],
                "nodes_i_need": [
                    "str",
                    "List[str]",
                    "Union[str, int]",
                    "float",
                    "bool",
                    "Optional[bool]"
                ]
            }
        },
        "MockRestMiddleware.put_treasure_map_on_node": {
            "name": "put_treasure_map_on_node",
            "location": 102,
            "return": [
                "bytes",
                "dict",
                "str",
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "str",
                    "int",
                    "bool"
                ],
                "map_id": [
                    "int",
                    "float",
                    "str",
                    "Tuple[Optional[str], str]",
                    "Union[int,str]"
                ],
                "map_payload": [
                    "int",
                    "float",
                    "str",
                    "Tuple[Optional[str], str]",
                    "Union[int,str]"
                ]
            }
        },
        "EvilMiddleWare.propagate_shitty_interface_id": {
            "name": "propagate_shitty_interface_id",
            "location": 116,
            "return": [
                "bytes",
                "dict",
                "Optional[Dict[str, Any]]",
                "str",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "Optional[str]",
                    "Callable",
                    "str"
                ],
                "shitty_interface_id": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/utilities/sandbox/policy.py": {
        "MockArrangement.publish": {
            "name": "publish",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockArrangement.revoke": {
            "name": "revoke",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MockPolicy.make_arrangements": {
            "name": "make_arrangements",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "network_middleware": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ],
                "deposit": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "expiration": [
                    "maya.MayaDT",
                    "List[str]",
                    "dict",
                    "str"
                ],
                "ursulas": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "MockPolicyCreation.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MockPolicyCreation.transact": {
            "name": "transact",
            "location": 69,
            "return": [
                "str",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": [],
                "alice": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ],
                "payload": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "MockPolicyCreation.wait_for_receipt": {
            "name": "wait_for_receipt",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "dict",
                    "models.User",
                    "bool",
                    "models.Course",
                    "str"
                ],
                "tx_hash": [
                    "int",
                    "dict",
                    "flask_appbuilder.models.sqla.Model"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/utilities/sandbox/ursula.py": {
        "make_federated_ursulas": {
            "name": "make_federated_ursulas",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ursula_config": [
                    "bool",
                    "Callable[..., None]",
                    "float"
                ],
                "quantity": [
                    "int",
                    "float",
                    "Optional[Set[str]]",
                    "List[Dict[str, str]]"
                ],
                "know_each_other": [
                    "bool",
                    "float"
                ]
            }
        },
        "make_decentralized_ursulas": {
            "name": "make_decentralized_ursulas",
            "location": 75,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ursula_config": [
                    "nucypher.cli.config.GroupGeneralConfig",
                    "str",
                    "list",
                    "int"
                ],
                "ether_addresses": [
                    "int",
                    "str"
                ],
                "stake": [
                    "bool",
                    "Optional[bool]"
                ],
                "know_each_other": [
                    "bool",
                    "float"
                ]
            }
        },
        "UrsulaCommandProtocol.__init__": {
            "name": "__init__",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "UrsulaCommandProtocol._paint_known_nodes": {
            "name": "_paint_known_nodes",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCommandProtocol.paintStatus": {
            "name": "paintStatus",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCommandProtocol.connectionMade": {
            "name": "connectionMade",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UrsulaCommandProtocol.lineReceived": {
            "name": "lineReceived",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        },
        "UrsulaCommandProtocol.terminalSize": {
            "name": "terminalSize",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "width": [
                    "int",
                    "float",
                    "Union[str, float]"
                ],
                "height": [
                    "int",
                    "float",
                    "Union[str, float]"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/nucypher/utilities/sandbox/__init__.py": {},
    "GitkoinNuCypherHackathon-master/tests/conftest.py": {
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "dict"
                ]
            }
        },
        "pytest_collection_modifyitems": {
            "name": "pytest_collection_modifyitems",
            "location": 43,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]"
                ],
                "items": [
                    "list",
                    "dict",
                    "str"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/fixtures.py": {
        "cleanup": {
            "name": "cleanup",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "tempfile_path": {
            "name": "tempfile_path",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "temp_dir_path": {
            "name": "temp_dir_path",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "temp_config_root": {
            "name": "temp_config_root",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "temp_dir_path": [
                    "str",
                    "Optional[str]",
                    "virgene.config.Config"
                ]
            }
        },
        "test_keystore": {
            "name": "test_keystore",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "certificates_tempdir": {
            "name": "certificates_tempdir",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "ursula_federated_test_config": {
            "name": "ursula_federated_test_config",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "ursula_decentralized_test_config": {
            "name": "ursula_decentralized_test_config",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "three_agents": [
                    "str",
                    "int",
                    "float",
                    "datetime.date",
                    "Dict[str, int]"
                ]
            }
        },
        "alice_federated_test_config": {
            "name": "alice_federated_test_config",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "federated_ursulas": [
                    "str",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "alice_blockchain_test_config": {
            "name": "alice_blockchain_test_config",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "str",
                    "List[str]"
                ],
                "three_agents": [
                    "str",
                    "int",
                    "float",
                    "datetime.date",
                    "Dict[str, int]"
                ]
            }
        },
        "bob_federated_test_config": {
            "name": "bob_federated_test_config",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "bob_blockchain_test_config": {
            "name": "bob_blockchain_test_config",
            "location": 214,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "dict",
                    "Optional[str]",
                    "cmk.base.config.HostConfig"
                ],
                "three_agents": [
                    "str",
                    "int",
                    "float",
                    "datetime.date",
                    "Dict[str, int]"
                ]
            }
        },
        "idle_federated_policy": {
            "name": "idle_federated_policy",
            "location": 240,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "federated_alice": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "federated_bob": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "enacted_federated_policy": {
            "name": "enacted_federated_policy",
            "location": 251,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "idle_federated_policy": [
                    "str",
                    "float"
                ],
                "federated_ursulas": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "idle_blockchain_policy": {
            "name": "idle_blockchain_policy",
            "location": 268,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "blockchain_alice": [
                    "str",
                    "models.characters.mods_base.Mod",
                    "Iterable[T]"
                ],
                "blockchain_bob": [
                    "str",
                    "models.characters.mods_base.Mod",
                    "Iterable[T]"
                ]
            }
        },
        "enacted_blockchain_policy": {
            "name": "enacted_blockchain_policy",
            "location": 278,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "idle_blockchain_policy": [
                    "bool",
                    "float"
                ],
                "blockchain_ursulas": [
                    "bool",
                    "float"
                ]
            }
        },
        "capsule_side_channel": {
            "name": "capsule_side_channel",
            "location": 294,
            "return": [
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "enacted_federated_policy": [
                    "str",
                    "eth.abc.ComputationAPI",
                    "eth.vm.computation.BaseComputation",
                    "dict"
                ]
            }
        },
        "federated_alice": {
            "name": "federated_alice",
            "location": 308,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "alice_federated_test_config": [
                    "dict",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "blockchain_alice": {
            "name": "blockchain_alice",
            "location": 314,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "alice_blockchain_test_config": [
                    "dict",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "federated_bob": {
            "name": "federated_bob",
            "location": 320,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "bob_federated_test_config": [
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "blockchain_bob": {
            "name": "blockchain_bob",
            "location": 326,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "bob_blockchain_test_config": [
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "federated_ursulas": {
            "name": "federated_ursulas",
            "location": 332,
            "return": [
                ""
            ],
            "arguments": {
                "ursula_federated_test_config": [
                    "Optional[int]",
                    "dict",
                    "bool",
                    "Sequence[int]"
                ]
            }
        },
        "blockchain_ursulas": {
            "name": "blockchain_ursulas",
            "location": 339,
            "return": [
                ""
            ],
            "arguments": {
                "three_agents": [
                    "bool",
                    "str",
                    "Callable",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "ursula_decentralized_test_config": [
                    "nucypher.cli.config.GroupGeneralConfig",
                    "bool",
                    "Sequence[int]"
                ]
            }
        },
        "solidity_compiler": {
            "name": "solidity_compiler",
            "location": 364,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "testerchain": {
            "name": "testerchain",
            "location": 371,
            "return": [
                ""
            ],
            "arguments": {
                "solidity_compiler": [
                    "str",
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "three_agents": {
            "name": "three_agents",
            "location": 397,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "str",
                "datetime.datetime"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/__init__.py": {},
    "GitkoinNuCypherHackathon-master/tests/blockchain/eth/contracts/base/test_dispatcher.py": {
        "test_dispatcher": {
            "name": "test_dispatcher",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "web3.contracContract"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/blockchain/eth/contracts/base/test_issuer.py": {
        "token": {
            "name": "token",
            "location": 27,
            "return": [
                "int",
                "bool",
                "str",
                "Iterable[str]",
                "List[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "int",
                    "Tuple[bytes, bytes]",
                    "bytes",
                    "Match"
                ]
            }
        },
        "test_issuer": {
            "name": "test_issuer",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "web3.contracContract",
                    "int"
                ],
                "token": [
                    "Callable",
                    "str",
                    "web3.contracContract",
                    "Iterable"
                ]
            }
        },
        "test_inflation_rate": {
            "name": "test_inflation_rate",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "web3.contracContract",
                    "int"
                ],
                "token": [
                    "web3.contracContract",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_upgrading": {
            "name": "test_upgrading",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Tuple[str, dict]"
                ],
                "token": [
                    "web3.Web3",
                    "web3.contracContract",
                    "str",
                    "Set[str]"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/blockchain/eth/contracts/main/test_intercontract_integration.py": {
        "token": {
            "name": "token",
            "location": 53,
            "return": [
                "int",
                "Sequence[Tuple[float, float]]",
                "Dict[str, str]",
                "bytes",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "int",
                    "Tuple[bytes, bytes]",
                    "bytes",
                    "Match"
                ]
            }
        },
        "escrow": {
            "name": "escrow",
            "location": 60,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "dict",
                    "List[str]"
                ],
                "token": [
                    "str",
                    "int",
                    "bytes",
                    "Union[List[str], List[Any]]"
                ]
            }
        },
        "policy_manager": {
            "name": "policy_manager",
            "location": 85,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "slice",
                    "Optional[int]",
                    "int"
                ],
                "escrow": [
                    "int",
                    "bool"
                ]
            }
        },
        "user_escrow_proxy": {
            "name": "user_escrow_proxy",
            "location": 108,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "testerchain": [
                    "web3.contracContract",
                    "Callable",
                    "int"
                ],
                "token": [
                    "web3.contracContract",
                    "web3.Web3",
                    "str"
                ],
                "escrow": [
                    "int",
                    "str"
                ],
                "policy_manager": [
                    "int"
                ]
            }
        },
        "test_all": {
            "name": "test_all",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "bool"
                ],
                "token": [
                    "bytes",
                    "str",
                    "int"
                ],
                "escrow": [
                    "str"
                ],
                "policy_manager": [],
                "user_escrow_proxy": [
                    "web3.contracContract",
                    "Callable",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/blockchain/eth/contracts/main/test_seeder.py": {
        "test_seeder": {
            "name": "test_seeder",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": []
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/blockchain/eth/contracts/main/miners_escrow/conftest.py": {
        "token": {
            "name": "token",
            "location": 31,
            "return": [
                "int",
                "bool",
                "str",
                "Iterable[str]",
                "List[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "int",
                    "Tuple[bytes, bytes]",
                    "bytes",
                    "Match"
                ]
            }
        },
        "escrow_contract": {
            "name": "escrow_contract",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "Callable",
                    "Optional[Any]",
                    "bool"
                ],
                "token": [
                    "Callable",
                    "Optional[Any]",
                    "bool"
                ],
                "request": [
                    "Callable",
                    "Optional[Any]",
                    "bool"
                ]
            }
        },
        "escrow_contract.make_escrow": {
            "name": "make_escrow",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "max_allowed_locked_tokens": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/blockchain/eth/contracts/main/miners_escrow/test_miners_escrow.py": {
        "test_staking": {
            "name": "test_staking",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "Tuple[str, dict]"
                ],
                "token": [
                    "Callable",
                    "str"
                ],
                "escrow_contract": [
                    "bytes"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/blockchain/eth/contracts/main/miners_escrow/test_miners_escrow_operations.py": {
        "test_upgrading": {
            "name": "test_upgrading",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "web3.contracContract"
                ],
                "token": [
                    "str",
                    "web3.contracContract"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/blockchain/eth/contracts/main/miners_escrow/test_mining.py": {
        "test_mining": {
            "name": "test_mining",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "token": [
                    "str",
                    "Optional[str]",
                    "web3.Web3"
                ],
                "escrow_contract": [
                    "bytes"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/blockchain/eth/contracts/main/miners_escrow/test_tracking.py": {
        "test_sampling": {
            "name": "test_sampling",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "web3.contracContract",
                    "Tuple[str, dict]",
                    "int",
                    "Sequence[str]"
                ],
                "token": [
                    "web3.contracContract",
                    "str",
                    "Callable",
                    "web3.Web3"
                ],
                "escrow_contract": [
                    "bytes"
                ]
            }
        },
        "test_pre_deposit": {
            "name": "test_pre_deposit",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "token": [
                    "str",
                    "web3.contracContract",
                    "Optional[Mapping[str, Any]]"
                ],
                "escrow_contract": [
                    "bytes"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/blockchain/eth/contracts/main/policy_manager/conftest.py": {
        "escrow": {
            "name": "escrow",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "Optional[int]",
                    "float",
                    "str"
                ]
            }
        },
        "policy_manager": {
            "name": "policy_manager",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [],
                "escrow": [
                    "Callable[[str], bool]",
                    "float"
                ],
                "request": [
                    "str"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/blockchain/eth/contracts/main/policy_manager/test_policy_manager.py": {
        "test_create_revoke": {
            "name": "test_create_revoke",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "escrow": [],
                "policy_manager": []
            }
        },
        "test_upgrading": {
            "name": "test_upgrading",
            "location": 338,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/blockchain/eth/contracts/main/policy_manager/test_policy_manager_operations.py": {
        "test_reward": {
            "name": "test_reward",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "escrow": [],
                "policy_manager": []
            }
        },
        "test_refund": {
            "name": "test_refund",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "dict"
                ],
                "escrow": [],
                "policy_manager": []
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/blockchain/eth/contracts/main/token/test_token.py": {
        "test_create_token": {
            "name": "test_create_token",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": []
            }
        },
        "test_approve_and_call": {
            "name": "test_approve_and_call",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": []
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/blockchain/eth/contracts/main/user_escrow/conftest.py": {
        "token": {
            "name": "token",
            "location": 25,
            "return": [
                "int",
                "bool",
                "str",
                "Iterable[str]",
                "List[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "int",
                    "Tuple[bytes, bytes]",
                    "bytes",
                    "Match"
                ]
            }
        },
        "escrow": {
            "name": "escrow",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [],
                "token": []
            }
        },
        "policy_manager": {
            "name": "policy_manager",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "Optional[int]",
                    "float",
                    "str"
                ]
            }
        },
        "proxy": {
            "name": "proxy",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "float"
                ],
                "token": [
                    "str",
                    "float"
                ],
                "escrow": [
                    "str",
                    "float"
                ],
                "policy_manager": [
                    "str",
                    "float"
                ]
            }
        },
        "linker": {
            "name": "linker",
            "location": 59,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "bool",
                    "slice",
                    "float"
                ],
                "proxy": [
                    "int",
                    "str"
                ]
            }
        },
        "user_escrow": {
            "name": "user_escrow",
            "location": 66,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "web3.contracContract",
                    "int"
                ],
                "token": [
                    "int",
                    "str",
                    "List[Dict[str, float]]",
                    "List[str]",
                    "Union[str, int]"
                ],
                "linker": [
                    "int",
                    "str",
                    "List[Dict[str, float]]",
                    "List[str]",
                    "Union[str, int]"
                ]
            }
        },
        "user_escrow_proxy": {
            "name": "user_escrow_proxy",
            "location": 79,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "testerchain": [
                    "float"
                ],
                "proxy": [
                    "float"
                ],
                "user_escrow": [
                    "float"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/blockchain/eth/contracts/main/user_escrow/test_user_escrow.py": {
        "test_escrow": {
            "name": "test_escrow",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Callable"
                ],
                "token": [
                    "int",
                    "str",
                    "Dict[str, Any]"
                ],
                "user_escrow": [
                    "float"
                ]
            }
        },
        "test_miner": {
            "name": "test_miner",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "dict",
                    "bool",
                    "Dict[str, Union[str, Any]]"
                ],
                "token": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "dict"
                ],
                "escrow": [
                    "web3.contracContract"
                ],
                "user_escrow": [
                    "int"
                ],
                "user_escrow_proxy": [
                    "float",
                    "web3.contracContract",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_policy": {
            "name": "test_policy",
            "location": 270,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "web3.contracContract"
                ],
                "policy_manager": [
                    "web3.contracContract",
                    "bool"
                ],
                "user_escrow": [
                    "web3.Web3",
                    "web3.contracContract"
                ],
                "user_escrow_proxy": [
                    "Callable[[List, bool], None]",
                    "web3.Web3"
                ]
            }
        },
        "test_proxy": {
            "name": "test_proxy",
            "location": 337,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "web3.contracContract"
                ],
                "policy_manager": [],
                "user_escrow": []
            }
        },
        "test_upgrading": {
            "name": "test_upgrading",
            "location": 365,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "web3.contracContract",
                    "str"
                ],
                "token": [
                    "bytes",
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/blockchain/eth/entities/actors/test_deployer.py": {
        "test_rapid_deployment": {
            "name": "test_rapid_deployment",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "GitkoinNuCypherHackathon-master/tests/blockchain/eth/entities/actors/test_miner.py": {
        "miner": {
            "name": "miner",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "float",
                    "Callable",
                    "bool"
                ],
                "three_agents": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_miner_locking_tokens": {
            "name": "test_miner_locking_tokens",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "three_agents": [],
                "miner": []
            }
        },
        "test_miner_divides_stake": {
            "name": "test_miner_divides_stake",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "miner": [
                    "str"
                ]
            }
        },
        "test_miner_collects_staking_reward": {
            "name": "test_miner_collects_staking_reward",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "List[int]",
                    "float",
                    "str"
                ],
                "miner": [],
                "three_agents": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/blockchain/eth/entities/actors/test_policy_author.py": {
        "author": {
            "name": "author",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "float"
                ],
                "three_agents": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_create_policy_author": {
            "name": "test_create_policy_author",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "str"
                ],
                "three_agents": [
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/blockchain/eth/entities/agents/test_miner_escrow_agent.py": {
        "test_deposit_tokens": {
            "name": "test_deposit_tokens",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "int"
                ],
                "three_agents": []
            }
        },
        "test_get_miner_population": {
            "name": "test_get_miner_population",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "three_agents": [
                    "bool",
                    "str",
                    "Dict[str, float]"
                ],
                "blockchain_ursulas": [
                    "float"
                ]
            }
        },
        "test_get_swarm": {
            "name": "test_get_swarm",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "three_agents": [
                    "bool",
                    "str",
                    "Dict[str, float]"
                ],
                "blockchain_ursulas": [
                    "str"
                ]
            }
        },
        "test_locked_tokens": {
            "name": "test_locked_tokens",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "three_agents": [],
                "blockchain_ursulas": []
            }
        },
        "test_get_all_stakes": {
            "name": "test_get_all_stakes",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "three_agents": [
                    "str",
                    "Dict[str, float]",
                    "int",
                    "bool"
                ],
                "blockchain_ursulas": [
                    "str",
                    "Dict[str, float]",
                    "int",
                    "bool"
                ]
            }
        },
        "get_stake_info": {
            "name": "get_stake_info",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "three_agents": [
                    "Dict[str, Any]",
                    "bool",
                    "int"
                ]
            }
        },
        "test_sample_miners": {
            "name": "test_sample_miners",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "three_agents": [
                    "str",
                    "float"
                ]
            }
        },
        "test_get_current_period": {
            "name": "test_get_current_period",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "three_agents": [
                    "bool",
                    "str",
                    "Dict[str, float]"
                ]
            }
        },
        "test_confirm_activity": {
            "name": "test_confirm_activity",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "three_agents": [
                    "str",
                    "float"
                ]
            }
        },
        "test_divide_stake": {
            "name": "test_divide_stake",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "three_agents": [
                    "str",
                    "float"
                ]
            }
        },
        "test_collect_staking_reward": {
            "name": "test_collect_staking_reward",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "three_agents": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/blockchain/eth/entities/agents/test_policy_manager_agent.py": {
        "policy_meta": {
            "name": "policy_meta",
            "location": 30,
            "return": [
                "Dict[str, Dict[str, int]]",
                "bool",
                "int",
                "List[List[str]]"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "dict",
                    "list",
                    "int",
                    "bool"
                ],
                "three_agents": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_create_policy": {
            "name": "test_create_policy",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "int"
                ],
                "three_agents": [
                    "int",
                    "Tuple[float, float, float, float, float]",
                    "float"
                ]
            }
        },
        "test_fetch_policy_arrangements": {
            "name": "test_fetch_policy_arrangements",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "three_agents": [
                    "str",
                    "float"
                ],
                "policy_meta": []
            }
        },
        "test_revoke_arrangement": {
            "name": "test_revoke_arrangement",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "three_agents": [
                    "str",
                    "float"
                ],
                "policy_meta": []
            }
        },
        "test_revoke_policy": {
            "name": "test_revoke_policy",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "three_agents": [
                    "str",
                    "float"
                ],
                "policy_meta": []
            }
        },
        "test_calculate_refund": {
            "name": "test_calculate_refund",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "float"
                ],
                "three_agents": [
                    "str",
                    "float"
                ],
                "policy_meta": [
                    "int"
                ]
            }
        },
        "test_collect_refund": {
            "name": "test_collect_refund",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "float"
                ],
                "three_agents": [
                    "str",
                    "float"
                ],
                "policy_meta": []
            }
        },
        "test_collect_policy_reward": {
            "name": "test_collect_policy_reward",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "List[int]",
                    "float",
                    "str"
                ],
                "three_agents": [
                    "str",
                    "float"
                ],
                "policy_meta": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/blockchain/eth/entities/agents/test_token_agent.py": {
        "agent": {
            "name": "agent",
            "location": 26,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "str"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_token_properties": {
            "name": "test_token_properties",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "agent": []
            }
        },
        "test_get_balance": {
            "name": "test_get_balance",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "agent": [
                    "int"
                ]
            }
        },
        "test_approve_transfer": {
            "name": "test_approve_transfer",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "agent": []
            }
        },
        "test_transfer": {
            "name": "test_transfer",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "agent": []
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/blockchain/eth/entities/agents/test_user_escrow_agent.py": {
        "proxy_deployer": {
            "name": "proxy_deployer",
            "location": 37,
            "return": [
                "nucypher.blockchain.eth.agents.UserEscrowAgent"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Optional[\"PNSqlCursor\"]"
                ]
            }
        },
        "agent": {
            "name": "agent",
            "location": 51,
            "return": [
                "nucypher.blockchain.eth.agents.UserEscrowAgent"
            ],
            "arguments": {
                "testerchain": [
                    "str",
                    "Sequence[str]"
                ],
                "proxy_deployer": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_user_escrow_agent_represents_beneficiary": {
            "name": "test_user_escrow_agent_represents_beneficiary",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "agent": [],
                "three_agents": [
                    "str"
                ]
            }
        },
        "test_read_beneficiary": {
            "name": "test_read_beneficiary",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "agent": [
                    "str",
                    "float"
                ]
            }
        },
        "test_read_allocation": {
            "name": "test_read_allocation",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "agent": [],
                "three_agents": [
                    "str",
                    "float"
                ]
            }
        },
        "test_read_timestamp": {
            "name": "test_read_timestamp",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "agent": [
                    "Callable[[str], None]",
                    "Optional[str]"
                ]
            }
        },
        "test_deposit_and_withdraw_as_miner": {
            "name": "test_deposit_and_withdraw_as_miner",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "int",
                    "float",
                    "Callable[[str], None]",
                    "List[int]"
                ],
                "agent": [],
                "three_agents": []
            }
        },
        "test_collect_policy_reward": {
            "name": "test_collect_policy_reward",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "agent": [
                    "blockchain.Blockchain"
                ],
                "three_agents": [
                    "str",
                    "float"
                ]
            }
        },
        "test_withdraw_tokens": {
            "name": "test_withdraw_tokens",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [],
                "agent": [
                    "int",
                    "Awaitable[None]"
                ],
                "three_agents": []
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/blockchain/eth/entities/deployers/test_deploy_preallocations.py": {
        "user_escrow_proxy": {
            "name": "user_escrow_proxy",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "three_agents": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "test_deploy_and_allocate": {
            "name": "test_deploy_and_allocate",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "three_agents": [
                    "slice",
                    "str"
                ],
                "user_escrow_proxy": []
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/blockchain/eth/entities/deployers/test_economics.py": {
        "test_economics": {
            "name": "test_economics",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "GitkoinNuCypherHackathon-master/tests/blockchain/eth/entities/deployers/test_interdeployer_integration.py": {
        "test_deploy_ethereum_contracts": {
            "name": "test_deploy_ethereum_contracts",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": []
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/blockchain/eth/entities/deployers/test_miner_escrow_deployer.py": {
        "test_token_deployer_and_agent": {
            "name": "test_token_deployer_and_agent",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": []
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/blockchain/eth/entities/deployers/test_policy_manager_deployer.py": {
        "test_policy_manager_deployer": {
            "name": "test_policy_manager_deployer",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": []
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/blockchain/eth/entities/deployers/test_token_deployer.py": {
        "test_token_deployer_and_agent": {
            "name": "test_token_deployer_and_agent",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/blockchain/eth/entities/deployers/test_user_escrow_deployer.py": {
        "user_escrow_proxy": {
            "name": "user_escrow_proxy",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "three_agents": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "test_user_escrow_deployer": {
            "name": "test_user_escrow_deployer",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "three_agents": [],
                "testerchain": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "test_deploy_multiple": {
            "name": "test_deploy_multiple",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": []
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/blockchain/eth/interfaces/test_chains.py": {
        "test_testerchain_creation": {
            "name": "test_testerchain_creation",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "Callable"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/blockchain/eth/interfaces/test_registry.py": {
        "test_contract_registry": {
            "name": "test_contract_registry",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "tempfile_path": [
                    "str",
                    "Optional[Callable[[Any], None]]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/blockchain/eth/interfaces/test_solidity_compiler.py": {
        "test_nucypher_contract_compiled": {
            "name": "test_nucypher_contract_compiled",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/characters/test_alice_can_grant_and_revoke.py": {
        "test_mocked_decentralized_grant": {
            "name": "test_mocked_decentralized_grant",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_alice": [
                    "Union[int, float]",
                    "bool",
                    "float",
                    "Union[Tuple[int], Tuple[int, int]]"
                ],
                "blockchain_bob": [
                    "Union[int, float]",
                    "bool",
                    "float",
                    "Union[Tuple[int], Tuple[int, int]]"
                ],
                "three_agents": [
                    "str"
                ]
            }
        },
        "test_federated_grant": {
            "name": "test_federated_grant",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [
                    "Union[int, float]",
                    "Union[Tuple[int], Tuple[int, int]]",
                    "float"
                ],
                "federated_bob": [
                    "Union[int, float]",
                    "Union[Tuple[int], Tuple[int, int]]",
                    "float"
                ]
            }
        },
        "test_alices_powers_are_persistent": {
            "name": "test_alices_powers_are_persistent",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "federated_ursulas": [
                    "str",
                    "List[str]",
                    "bytes"
                ],
                "tmpdir": [
                    "Dict[str, Sequence[str]]"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/characters/test_bob_handles_frags.py": {
        "test_bob_cannot_follow_the_treasure_map_in_isolation": {
            "name": "test_bob_cannot_follow_the_treasure_map_in_isolation",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [
                    "Type",
                    "dict"
                ],
                "federated_bob": []
            }
        },
        "test_bob_already_knows_all_nodes_in_treasure_map": {
            "name": "test_bob_already_knows_all_nodes_in_treasure_map",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [
                    "str"
                ],
                "federated_ursulas": [],
                "federated_bob": [
                    "str"
                ],
                "federated_alice": [
                    "str"
                ]
            }
        },
        "test_bob_can_follow_treasure_map_even_if_he_only_knows_of_one_node": {
            "name": "test_bob_can_follow_treasure_map_even_if_he_only_knows_of_one_node",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [
                    "str",
                    "float"
                ],
                "federated_ursulas": [
                    "bool"
                ],
                "certificates_tempdir": [
                    "Type[lightbus.utilities.testing.BusQueueMockerContext]"
                ]
            }
        },
        "test_bob_can_issue_a_work_order_to_a_specific_ursula": {
            "name": "test_bob_can_issue_a_work_order_to_a_specific_ursula",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [
                    "str"
                ],
                "federated_bob": [
                    "int"
                ],
                "federated_alice": [
                    "List[Dict[str, Any]]"
                ],
                "federated_ursulas": [],
                "capsule_side_channel": [
                    "int"
                ]
            }
        },
        "test_bob_remembers_that_he_has_cfrags_for_a_particular_capsule": {
            "name": "test_bob_remembers_that_he_has_cfrags_for_a_particular_capsule",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [
                    "bool"
                ],
                "federated_bob": [
                    "bool"
                ],
                "federated_ursulas": [
                    "List[str]",
                    "bool"
                ],
                "capsule_side_channel": [
                    "bool"
                ]
            }
        },
        "test_bob_gathers_and_combines": {
            "name": "test_bob_gathers_and_combines",
            "location": 253,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [
                    "float",
                    "Union[int, float]",
                    "bool",
                    "Union[Tuple[int], Tuple[int, int]]"
                ],
                "federated_bob": [
                    "float",
                    "bool",
                    "int"
                ],
                "federated_alice": [],
                "capsule_side_channel": []
            }
        },
        "test_federated_bob_retrieves": {
            "name": "test_federated_bob_retrieves",
            "location": 287,
            "return": [
                ""
            ],
            "arguments": {
                "federated_bob": [
                    "str"
                ],
                "federated_alice": [],
                "capsule_side_channel": [
                    "bool"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/characters/test_bob_joins_policy_and_retrieves.py": {
        "test_federated_bob_retrieves": {
            "name": "test_federated_bob_retrieves",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "federated_ursulas": [
                    "bool"
                ],
                "federated_bob": [
                    "Optional[bool]",
                    "List[str]"
                ],
                "federated_alice": [
                    "int",
                    "str"
                ],
                "capsule_side_channel": [],
                "enacted_federated_policy": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "test_bob_joins_policy_and_retrieves": {
            "name": "test_bob_joins_policy_and_retrieves",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [
                    "bool",
                    "Union[int, float]",
                    "float",
                    "Union[Tuple[int], Tuple[int, int]]"
                ],
                "federated_ursulas": [],
                "certificates_tempdir": []
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/characters/test_character_serialization.py": {
        "test_serialize_ursula": {
            "name": "test_serialize_ursula",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "federated_ursulas": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/characters/test_crypto_characters_and_their_powers.py": {
        "test_actor_without_signing_power_cannot_sign": {
            "name": "test_actor_without_signing_power_cannot_sign",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_actor_with_signing_power_can_sign": {
            "name": "test_actor_with_signing_power_can_sign",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_anybody_can_verify": {
            "name": "test_anybody_can_verify",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_character_blockchain_power": {
            "name": "test_character_blockchain_power",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_anybody_can_encrypt": {
            "name": "test_anybody_can_encrypt",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_node_deployer": {
            "name": "test_node_deployer",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "federated_ursulas": []
            }
        },
        "test_sign_cleartext_and_encrypt": {
            "name": "test_sign_cleartext_and_encrypt",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [],
                "federated_bob": []
            }
        },
        "test_encrypt_and_sign_the_ciphertext": {
            "name": "test_encrypt_and_sign_the_ciphertext",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [],
                "federated_bob": []
            }
        },
        "test_encrypt_and_sign_including_signature_in_both_places": {
            "name": "test_encrypt_and_sign_including_signature_in_both_places",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [],
                "federated_bob": []
            }
        },
        "test_encrypt_but_do_not_sign": {
            "name": "test_encrypt_but_do_not_sign",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [],
                "federated_bob": []
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/characters/test_ursula_prepares_to_act_as_mining_node.py": {
        "test_federated_ursula_substantiates_stamp": {
            "name": "test_federated_ursula_substantiates_stamp",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_new_federated_ursula_announces_herself": {
            "name": "test_new_federated_ursula_announces_herself",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "ursula_federated_test_config": []
            }
        },
        "test_blockchain_ursula_substantiates_stamp": {
            "name": "test_blockchain_ursula_substantiates_stamp",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_ursulas": []
            }
        },
        "test_blockchain_ursula_verifies_stamp": {
            "name": "test_blockchain_ursula_verifies_stamp",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_ursulas": []
            }
        },
        "test_vladimir_cannot_verify_interface_with_ursulas_signing_key": {
            "name": "test_vladimir_cannot_verify_interface_with_ursulas_signing_key",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_ursulas": []
            }
        },
        "test_vladimir_uses_his_own_signing_key": {
            "name": "test_vladimir_uses_his_own_signing_key",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_alice": [
                    "bool"
                ],
                "blockchain_ursulas": []
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/cli/test_accounts.py": {
        "test_list": {
            "name": "test_list",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "Callable",
                    "str"
                ]
            }
        },
        "test_balance": {
            "name": "test_balance",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": []
            }
        },
        "test_transfer_eth": {
            "name": "test_transfer_eth",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "dict",
                    "int"
                ]
            }
        },
        "test_transfer_tokens": {
            "name": "test_transfer_tokens",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "testerchain": [
                    "dict"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/cli/test_config.py": {
        "custom_filepath": {
            "name": "custom_filepath",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_initialize_configuration_files_and_directories": {
            "name": "test_initialize_configuration_files_and_directories",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "custom_filepath": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_validate_runtime_filepaths": {
            "name": "test_validate_runtime_filepaths",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "custom_filepath": [
                    "str"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/cli/test_main.py": {
        "test_help_message": {
            "name": "test_help_message",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "GitkoinNuCypherHackathon-master/tests/cli/test_run_ursula.py": {
        "test_run_lone_federated_default_ursula": {
            "name": "test_run_lone_federated_default_ursula",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "GitkoinNuCypherHackathon-master/tests/cli/test_stake.py": {
        "test_stake_init": {
            "name": "test_stake_init",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_stake_info": {
            "name": "test_stake_info",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_stake_confirm": {
            "name": "test_stake_confirm",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "GitkoinNuCypherHackathon-master/tests/config/test_firstula_circumstances.py": {
        "test_proper_seed_node_instantiation": {
            "name": "test_proper_seed_node_instantiation",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "ursula_federated_test_config": []
            }
        },
        "test_get_cert_from_running_seed_node": {
            "name": "test_get_cert_from_running_seed_node",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "ursula_federated_test_config": [
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_get_cert_from_running_seed_node.start_lonely_learning_loop": {
            "name": "start_lonely_learning_loop",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "GitkoinNuCypherHackathon-master/tests/config/test_keyring.py": {
        "test_validate_passphrase": {
            "name": "test_validate_passphrase",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_generate_alice_keyring": {
            "name": "test_generate_alice_keyring",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "tmpdir": [
                    "bool"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/config/test_storages.py": {
        "light_ursula": {
            "name": "light_ursula",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "temp_dir_path": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "memory_node_storage": {
            "name": "memory_node_storage",
            "location": 47,
            "return": [
                "int",
                "Dict[str, Any]",
                "Iterable[str]"
            ],
            "arguments": {}
        },
        "local_node_storage": {
            "name": "local_node_storage",
            "location": 54,
            "return": [
                "int",
                "Dict[str, Any]",
                "Iterable[str]"
            ],
            "arguments": {}
        },
        "TestNodeStorageBackends._read_and_write_to_storage": {
            "name": "_read_and_write_to_storage",
            "location": 62,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ursula": [
                    "type",
                    "str"
                ],
                "node_storage": [
                    "type",
                    "str"
                ]
            }
        },
        "TestNodeStorageBackends._write_and_delete_nodes_in_storage": {
            "name": "_write_and_delete_nodes_in_storage",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "ursula": [],
                "node_storage": []
            }
        },
        "TestNodeStorageBackends.test_delete_node_in_storage": {
            "name": "test_delete_node_in_storage",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "light_ursula": [],
                "storage_factory": []
            }
        },
        "TestNodeStorageBackends.test_read_and_write_to_storage": {
            "name": "test_read_and_write_to_storage",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "light_ursula": [],
                "storage_factory": []
            }
        },
        "TestS3NodeStorageDirect.s3_node_storage_factory": {
            "name": "s3_node_storage_factory",
            "location": 133,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestS3NodeStorageDirect.test_generate_presigned_url": {
            "name": "test_generate_presigned_url",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "light_ursula": []
            }
        },
        "TestS3NodeStorageDirect.test_read_and_write_to_storage": {
            "name": "test_read_and_write_to_storage",
            "location": 158,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "light_ursula": []
            }
        },
        "TestS3NodeStorageDirect.test_write_and_delete_nodes_in_storage": {
            "name": "test_write_and_delete_nodes_in_storage",
            "location": 192,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "light_ursula": [
                    "int"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/crypto/test_api.py": {
        "TestCrypto.test_secure_random": {
            "name": "test_secure_random",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_secure_random_range": {
            "name": "test_secure_random_range",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrypto.test_keccak_digest": {
            "name": "test_keccak_digest",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/crypto/test_bytestring_types.py": {
        "test_split_two_signatures": {
            "name": "test_split_two_signatures",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_split_signature_from_arbitrary_bytes": {
            "name": "test_split_signature_from_arbitrary_bytes",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_trying_to_extract_too_many_bytes_raises_typeerror": {
            "name": "test_trying_to_extract_too_many_bytes_raises_typeerror",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "GitkoinNuCypherHackathon-master/tests/crypto/test_signature.py": {
        "test_signature_can_verify": {
            "name": "test_signature_can_verify",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_signature_rs_serialization": {
            "name": "test_signature_rs_serialization",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "GitkoinNuCypherHackathon-master/tests/keystore/test_keypairs.py": {
        "test_gen_keypair_if_needed": {
            "name": "test_gen_keypair_if_needed",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_keypair_with_umbral_keys": {
            "name": "test_keypair_with_umbral_keys",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_keypair_serialization": {
            "name": "test_keypair_serialization",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_keypair_fingerprint": {
            "name": "test_keypair_fingerprint",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_signing": {
            "name": "test_signing",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "GitkoinNuCypherHackathon-master/tests/keystore/test_keystore.py": {
        "test_key_sqlite_keystore": {
            "name": "test_key_sqlite_keystore",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "test_keystore": [
                    "str",
                    "dict",
                    "Optional[Dict[str, Any]]"
                ],
                "federated_bob": [
                    "str",
                    "bytes",
                    "bool",
                    "Optional[dict]"
                ]
            }
        },
        "test_policy_arrangement_sqlite_keystore": {
            "name": "test_policy_arrangement_sqlite_keystore",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "test_keystore": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_workorder_sqlite_keystore": {
            "name": "test_workorder_sqlite_keystore",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "test_keystore": []
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/learning/test_fleet_state.py": {
        "test_all_nodes_have_same_fleet_state": {
            "name": "test_all_nodes_have_same_fleet_state",
            "location": 1,
            "return": [
                ""
            ],
            "arguments": {
                "federated_ursulas": []
            }
        },
        "test_teacher_nodes_cycle": {
            "name": "test_teacher_nodes_cycle",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "federated_ursulas": []
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/learning/test_learning_from_teachers.py": {
        "teat_learn_but_nodes_are_already_run": {
            "name": "teat_learn_but_nodes_are_already_run",
            "location": 1,
            "return": [
                ""
            ],
            "arguments": {
                "federated_ursulas": [
                    "float",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/learning/__init__.py": {},
    "GitkoinNuCypherHackathon-master/tests/network/test_network_actors.py": {
        "test_all_blockchain_ursulas_know_about_all_other_ursulas": {
            "name": "test_all_blockchain_ursulas_know_about_all_other_ursulas",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_ursulas": [
                    "str",
                    "bool"
                ],
                "three_agents": [
                    "Dict[str, float]",
                    "str",
                    "int"
                ]
            }
        },
        "test_blockchain_alice_finds_ursula_via_rest": {
            "name": "test_blockchain_alice_finds_ursula_via_rest",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_alice": [],
                "blockchain_ursulas": [
                    "str",
                    "cmk.utils.type_defs.UserId"
                ]
            }
        },
        "test_alice_creates_policy_with_correct_hrac": {
            "name": "test_alice_creates_policy_with_correct_hrac",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "idle_federated_policy": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "test_alice_sets_treasure_map": {
            "name": "test_alice_sets_treasure_map",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [],
                "federated_ursulas": [
                    "int"
                ]
            }
        },
        "test_treasure_map_stored_by_ursula_is_the_correct_one_for_bob": {
            "name": "test_treasure_map_stored_by_ursula_is_the_correct_one_for_bob",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [
                    "str"
                ],
                "federated_bob": [
                    "str"
                ],
                "federated_ursulas": [
                    "int"
                ],
                "enacted_federated_policy": [
                    "int",
                    "dict"
                ]
            }
        },
        "test_bob_can_retreive_the_treasure_map_and_decrypt_it": {
            "name": "test_bob_can_retreive_the_treasure_map_and_decrypt_it",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": [],
                "federated_ursulas": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "test_treasure_map_is_legit": {
            "name": "test_treasure_map_is_legit",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": []
            }
        },
        "test_vladimir_illegal_interface_key_does_not_propagate": {
            "name": "test_vladimir_illegal_interface_key_does_not_propagate",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_ursulas": []
            }
        },
        "test_alice_refuses_to_make_arrangement_unless_ursula_is_valid": {
            "name": "test_alice_refuses_to_make_arrangement_unless_ursula_is_valid",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "blockchain_alice": [
                    "Type"
                ],
                "idle_blockchain_policy": [
                    "Type"
                ],
                "blockchain_ursulas": []
            }
        },
        "test_alice_does_not_update_with_old_ursula_info": {
            "name": "test_alice_does_not_update_with_old_ursula_info",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {
                "federated_alice": [],
                "federated_ursulas": []
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/network/test_network_upgrade.py": {
        "test_alice_enacts_policies_in_policy_group_via_rest": {
            "name": "test_alice_enacts_policies_in_policy_group_via_rest",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "enacted_federated_policy": []
            }
        },
        "test_federated_nodes_connect_via_tls_and_verify": {
            "name": "test_federated_nodes_connect_via_tls_and_verify",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "ursula_federated_test_config": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_federated_nodes_connect_via_tls_and_verify.check_node_with_cert": {
            "name": "check_node_with_cert",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "node": [
                    "str",
                    "Tuple[int, int]",
                    "Dict[str, Any]"
                ],
                "cert_file": [
                    "str",
                    "dict",
                    "List[List[str]]",
                    "Dict[str, str]",
                    "int"
                ]
            }
        }
    },
    "GitkoinNuCypherHackathon-master/tests/network/test_node_storage.py": {
        "test_one_node_stores_a_bunch_of_others": {
            "name": "test_one_node_stores_a_bunch_of_others",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "federated_ursulas": [
                    "Dict[str, Any]"
                ],
                "ursula_federated_test_config": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_one_node_stores_a_bunch_of_others.start_lonely_learning_loop": {
            "name": "start_lonely_learning_loop",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        }
    }
}
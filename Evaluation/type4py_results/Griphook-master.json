{
    "Griphook-master/gunicorn_config.py": {},
    "Griphook-master/manage.py": {
        "create_db": {
            "name": "create_db",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "drop_db": {
            "name": "drop_db",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "create_data": {
            "name": "create_data",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "flake": {
            "name": "flake",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "admin": {
            "name": "admin",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "create": {
            "name": "create",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "set_password": {
            "name": "set_password",
            "location": 83,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "Sequence[str]",
                "str",
                "Set[str]"
            ],
            "arguments": {}
        }
    },
    "Griphook-master/griphook/__init__.py": {},
    "Griphook-master/griphook/api/data_source.py": {
        "DataSource.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataSource.read": {
            "name": "read",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Griphook-master/griphook/api/exceptions.py": {},
    "Griphook-master/griphook/api/parsers.py": {
        "GenericParser.fetch": {
            "name": "fetch",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "APIParser.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "base_url": []
            }
        },
        "APIParser.request": {
            "name": "request",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "method": [],
                "params": [],
                "timeout": []
            }
        }
    },
    "Griphook-master/griphook/api/__init__.py": {},
    "Griphook-master/griphook/api/graphite/formatters.py": {
        "validate_input_cantal_data": {
            "name": "validate_input_cantal_data",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "decoded_input_data": [
                    "dict",
                    "Dict[str, List[Any]]",
                    "Optional[List[Any]]",
                    "bytes"
                ]
            }
        },
        "format_cantal_data": {
            "name": "format_cantal_data",
            "location": 70,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[bool]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "input_data": [
                    "dict",
                    "Dict[int, Dict]",
                    "bytes",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "DataSeries.validate": {
            "name": "validate",
            "location": 34,
            "return": [
                "bool",
                "Optional[bool]",
                "Optional[float]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "T",
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "value": [
                    "Union[str]",
                    "T",
                    "str",
                    "bool"
                ]
            }
        },
        "DataSeries.target_validate": {
            "name": "target_validate",
            "location": 43,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "T",
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "value": [
                    "float",
                    "int",
                    "Iterable[object]"
                ]
            }
        }
    },
    "Griphook-master/griphook/api/graphite/functions.py": {
        "Argument.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "Argument.type_": {
            "name": "type_",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "Union[str, 'Type']",
                    "str",
                    "BinaryIO",
                    "Type"
                ]
            }
        },
        "Argument.value": {
            "name": "value",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "list"
                ]
            }
        },
        "Argument.__str__": {
            "name": "__str__",
            "location": 72,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Function.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Callable[[Any], str]",
                    "Optional[str]",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "Function._type_to_argument": {
            "name": "_type_to_argument",
            "location": 125,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "type_": [
                    "str",
                    "Tuple[type]"
                ]
            }
        },
        "Function.__call__": {
            "name": "__call__",
            "location": 130,
            "return": [
                "str",
                "Exception",
                "api.GroupJSON"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Griphook-master/griphook/api/graphite/parser.py": {
        "GraphiteAPIParser.fetch": {
            "name": "fetch",
            "location": 24,
            "return": [
                "int",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "GraphiteAPIParser.construct_target": {
            "name": "construct_target",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, str]",
                    "list"
                ],
                "path": [
                    "Optional[str]",
                    "Optional[\"Source\"]",
                    "list",
                    "bool"
                ],
                "metrics": [
                    "str",
                    "Union[str, bytes]"
                ],
                "function": [
                    "str"
                ],
                "func_args": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        }
    },
    "Griphook-master/griphook/api/graphite/target.py": {
        "DotPath.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DotPath.__str__": {
            "name": "__str__",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DotPath.__add__": {
            "name": "__add__",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "MultipleValues.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultipleValues.__str__": {
            "name": "__str__",
            "location": 62,
            "return": [
                "str",
                "Optional[str]",
                "bytes",
                "Optional[float]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Griphook-master/griphook/api/graphite/__init__.py": {},
    "Griphook-master/griphook/api/graphite/tests/test_formatters.py": {
        "get_test_data": {
            "name": "get_test_data",
            "location": 56,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "TestCantalFormatter.test_validate_input_cantal_data": {
            "name": "test_validate_input_cantal_data",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCantalFormatter.test_format_cantal_data": {
            "name": "test_format_cantal_data",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Griphook-master/griphook/api/graphite/tests/test_functions.py": {
        "test_less_arguments_than_specified": {
            "name": "test_less_arguments_than_specified",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_path_in_function": {
            "name": "test_path_in_function",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestArgument.test_string_type": {
            "name": "test_string_type",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArgument.test_bool_type": {
            "name": "test_bool_type",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArgument.test_non_string": {
            "name": "test_non_string",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArgument.test_arg_is_not_set": {
            "name": "test_arg_is_not_set",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArgument.test_integer_zero": {
            "name": "test_integer_zero",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestArgument.test_empty_string": {
            "name": "test_empty_string",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFunction.test_without_args": {
            "name": "test_without_args",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFunction.test_one_arg": {
            "name": "test_one_arg",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFunction.test_several_args": {
            "name": "test_several_args",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFunction.test_nested_calls": {
            "name": "test_nested_calls",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Griphook-master/griphook/api/graphite/tests/test_graphite_parser.py": {
        "url": {
            "name": "url",
            "location": 10,
            "return": [
                "str",
                "Callable[[str], bool]",
                "List[object]",
                "Optional[str]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "parser": {
            "name": "parser",
            "location": 15,
            "return": [
                "Callable[[Optional, Optional, str], None]",
                "List[str]"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_request": {
            "name": "test_request",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "test_request.fetch_mock": {
            "name": "fetch_mock",
            "location": 34,
            "return": [
                "str",
                "Set[str]"
            ],
            "arguments": {
                "url": [
                    "int",
                    "Dict[str, Any]"
                ],
                "request": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "Griphook-master/griphook/api/graphite/tests/test_multiple_values.py": {
        "test_multiple_value_works": {
            "name": "test_multiple_value_works",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_empty_values": {
            "name": "test_empty_values",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "Griphook-master/griphook/api/graphite/tests/test_path.py": {
        "path": {
            "name": "path",
            "location": 7,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {}
        },
        "empty_path": {
            "name": "empty_path",
            "location": 12,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {}
        },
        "desired_path_str": {
            "name": "desired_path_str",
            "location": 17,
            "return": [
                "str",
                "int",
                "Type[Any]"
            ],
            "arguments": {}
        },
        "test_path": {
            "name": "test_path",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "desired_path_str": [
                    "str",
                    "List[str]",
                    "Union[str, TextIO]"
                ]
            }
        },
        "test_empty_path": {
            "name": "test_empty_path",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "empty_path": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "test_add_string": {
            "name": "test_add_string",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "desired_path_str": [
                    "str"
                ]
            }
        },
        "test_add_path": {
            "name": "test_add_path",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "desired_path_str": [
                    "str",
                    "int",
                    "Optional[List[str]]"
                ]
            }
        },
        "test_empty_add": {
            "name": "test_empty_add",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "empty_path": [
                    "str"
                ]
            }
        },
        "test_iadd": {
            "name": "test_iadd",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "desired_path_str": [
                    "str"
                ]
            }
        }
    },
    "Griphook-master/griphook/config/config.py": {
        "Config.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "Type['GenericList']",
                    "bool",
                    "int"
                ],
                "prefix": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Config.read_options_from_config_file": {
            "name": "read_options_from_config_file",
            "location": 34,
            "return": [
                "float",
                "pathlib.Path",
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.options": {
            "name": "options",
            "location": 51,
            "return": [
                "bool",
                "str",
                "float",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.override_options_from_environ": {
            "name": "override_options_from_environ",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "option_dict": [
                    "dict",
                    "int"
                ]
            }
        },
        "Config.validate_options": {
            "name": "validate_options",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "options": [
                    "bool",
                    "float",
                    "str"
                ]
            }
        }
    },
    "Griphook-master/griphook/config/template.py": {},
    "Griphook-master/griphook/config/test_config.py": {
        "TestConfig.setUpClass": {
            "name": "setUpClass",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[str]",
                    "Match[str]",
                    "ImportError"
                ]
            }
        },
        "TestConfig.tearDownClass": {
            "name": "tearDownClass",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "type"
                ]
            }
        },
        "TestConfig.setUp": {
            "name": "setUp",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.write_yml_config": {
            "name": "write_yml_config",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "bytes"
                ]
            }
        },
        "TestConfig.test_correct_config": {
            "name": "test_correct_config",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_wrong_config_data": {
            "name": "test_wrong_config_data",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_current_config": {
            "name": "test_current_config",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_overwriting_options_from_env_of_current_template": {
            "name": "test_overwriting_options_from_env_of_current_template",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_overwriting_by_env_variable_with_wrong_type": {
            "name": "test_overwriting_by_env_variable_with_wrong_type",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestConfig.test_override_options_from_environ_method_with_nested_dict": {
            "name": "test_override_options_from_environ_method_with_nested_dict",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Griphook-master/griphook/config/__init__.py": {},
    "Griphook-master/griphook/server/config.py": {},
    "Griphook-master/griphook/server/models.py": {
        "get_or_create": {
            "name": "get_or_create",
            "location": 231,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session"
                ],
                "model": [
                    "sqlalchemy.orm.session.Session",
                    "src.db.Model",
                    "Optional[str]",
                    "sqlalchemy.orm.Session",
                    "Type[tikki.db.tables.Base]",
                    "Dict[str, Any]"
                ],
                "defaults": [
                    "Dict[str, object]",
                    "dict",
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "Dict[str, Any]"
                ]
            }
        },
        "Admin.__init__": {
            "name": "__init__",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "int"
                ]
            }
        },
        "Admin.password": {
            "name": "password",
            "location": 216,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "new_password": [
                    "str"
                ]
            }
        },
        "Admin.check_password": {
            "name": "check_password",
            "location": 220,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ]
            }
        },
        "Admin.validate_password": {
            "name": "validate_password",
            "location": 223,
            "return": [
                "str",
                "Set[str]",
                "datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/__init__.py": {
        "init_db": {
            "name": "init_db",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "set_up_extensions": {
            "name": "set_up_extensions",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "List[str]",
                    "flask.Flask"
                ]
            }
        },
        "create_app": {
            "name": "create_app",
            "location": 27,
            "return": [
                "flask.Flask"
            ],
            "arguments": {
                "script_info": [
                    "bool",
                    "List[str]",
                    "Sequence[str]",
                    "List[Tuple[str, str]]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "create_app.ctx": {
            "name": "ctx",
            "location": 91,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        }
    },
    "Griphook-master/griphook/server/auth/exceptions.py": {},
    "Griphook-master/griphook/server/auth/route.py": {},
    "Griphook-master/griphook/server/auth/utils.py": {
        "create_admin": {
            "name": "create_admin",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "password": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "get_admin": {
            "name": "get_admin",
            "location": 15,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict",
                "Optional[str]",
                "int"
            ],
            "arguments": {}
        }
    },
    "Griphook-master/griphook/server/auth/views.py": {
        "LoginView.post": {
            "name": "post",
            "location": 26,
            "return": [
                "Dict[str, str]",
                "cmk.utils.type_defs.UserId",
                "flask.blueprints.BlueprintSetupState",
                "Exception"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Griphook-master/griphook/server/auth/__init__.py": {},
    "Griphook-master/griphook/server/auth/tests/conftest.py": {
        "admin_password": {
            "name": "admin_password",
            "location": 8,
            "return": [
                "str",
                "audiopyle.lib.models.file_meta.CompressedAudioFileMeta",
                "type",
                "Set[str]"
            ],
            "arguments": {}
        },
        "default_admin": {
            "name": "default_admin",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "admin_password": [
                    "str"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/auth/tests/test_views.py": {
        "get_admin_returns_default": {
            "name": "get_admin_returns_default",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "admin_password": [
                    "str",
                    "Dict[str, Any]"
                ],
                "mocker": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestLoginView.request": {
            "name": "request",
            "location": 19,
            "return": [
                "bytes",
                "solo.server.runtime.dependencies.Runtime"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "str",
                    "List[List[str]]",
                    "dict",
                    "int",
                    "Dict[str, Any]"
                ],
                "method": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "TestLoginView.test_returns_token": {
            "name": "test_returns_token",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "admin_password": [
                    "str",
                    "IO[bytes]",
                    "bytes"
                ]
            }
        },
        "TestLoginView.test_wrong_password": {
            "name": "test_wrong_password",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "admin_password": [
                    "str"
                ]
            }
        },
        "TestLoginView.test_get_request": {
            "name": "test_get_request",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "admin_password": [
                    "str"
                ]
            }
        },
        "TestLoginView.test_no_password": {
            "name": "test_no_password",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Griphook-master/griphook/server/auth/tests/__init__.py": {},
    "Griphook-master/griphook/server/average_load/chart_data_util.py": {
        "ChartDataUtil.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "strategy": [
                    "str",
                    "int",
                    "bool"
                ],
                "metric_type": [
                    "str",
                    "Optional[bool]",
                    "bool"
                ],
                "time_from": [
                    "str",
                    "int",
                    "bool"
                ],
                "time_until": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "ChartDataUtil.get_root_metric_average_value": {
            "name": "get_root_metric_average_value",
            "location": 15,
            "return": [
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChartDataUtil.get_children_metric_average_values": {
            "name": "get_children_metric_average_values",
            "location": 22,
            "return": [
                "int",
                "Optional[str]",
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChartDataUtil.get_joined_services_subquery": {
            "name": "get_joined_services_subquery",
            "location": 35,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "for_root": [
                    "str",
                    "List[Dict[str, str]]"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/average_load/queries.py": {
        "get_joined_services_batch_story_metrics_query": {
            "name": "get_joined_services_batch_story_metrics_query",
            "location": 6,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str",
                "OrderedDict",
                "Dict[str, str]",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "services_subquery": [
                    "List[Dict]",
                    "dict",
                    "List[int]",
                    "float",
                    "list",
                    "str"
                ],
                "batch_story_subquery": [
                    "List[Dict]",
                    "dict",
                    "List[int]",
                    "float",
                    "list",
                    "str"
                ],
                "metric_subquery": [
                    "List[Dict]",
                    "dict",
                    "List[int]",
                    "float",
                    "list",
                    "str"
                ]
            }
        },
        "get_metric_billing_query": {
            "name": "get_metric_billing_query",
            "location": 17,
            "return": [
                "Dict[str, Any]",
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "metric_type": [
                    "str",
                    "fal.models.Season",
                    "grouper.models.group.Group"
                ]
            }
        },
        "get_filtered_batch_story_query": {
            "name": "get_filtered_batch_story_query",
            "location": 31,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "time_from": [
                    "bool"
                ],
                "time_until": [
                    "bool"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/average_load/router.py": {},
    "Griphook-master/griphook/server/average_load/utils.py": {
        "get_strategy_for_target": {
            "name": "get_strategy_for_target",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "target_type": [
                    "str",
                    "type",
                    "Type",
                    "Optional[type]"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/average_load/views.py": {
        "AverageLoadChartDataView.post": {
            "name": "post",
            "location": 35,
            "return": [
                "int",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AverageLoadChartDataView.is_request_data_invalid": {
            "name": "is_request_data_invalid",
            "location": 83,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "T"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/average_load/__init__.py": {},
    "Griphook-master/griphook/server/average_load/strategy/abstract.py": {
        "AbstractStrategy.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Set[int]"
                ]
            }
        },
        "AbstractStrategy.get_children_services_query": {
            "name": "get_children_services_query",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractStrategy.get_root_services_query": {
            "name": "get_root_services_query",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractStrategy.get_children_average_metric_values": {
            "name": "get_children_average_metric_values",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "joined_subquery": [
                    "List[str]",
                    "int",
                    "List[Dict[str, Any]]",
                    "str",
                    "bool"
                ]
            }
        },
        "AbstractStrategy.get_root_average_metric_value": {
            "name": "get_root_average_metric_value",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "joined_subquery": [
                    "bool",
                    "Sequence[int]",
                    "str",
                    "List[str]",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/average_load/strategy/cluster.py": {
        "ClusterStrategy.get_children_services_query": {
            "name": "get_children_services_query",
            "location": 9,
            "return": [
                "dict",
                "sqlalchemy.engine.Engine",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Dict[int, str]",
                "Mapping[str, Any]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusterStrategy.get_children_average_metric_values": {
            "name": "get_children_average_metric_values",
            "location": 24,
            "return": [
                "str",
                "float",
                "List[int]",
                "int",
                "app.models.move.Coordinate"
            ],
            "arguments": {
                "joined_subquery": [
                    "str",
                    "dict"
                ]
            }
        },
        "ClusterStrategy.get_root_services_query": {
            "name": "get_root_services_query",
            "location": 34,
            "return": [
                "dict",
                "sqlalchemy.engine.Engine",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusterStrategy.get_root_average_metric_value": {
            "name": "get_root_average_metric_value",
            "location": 45,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "joined_subquery": [
                    "viewer.models.Gallery",
                    "sqlalchemy.orm.query.Query",
                    "app.models.Journey",
                    "app.models.Stage",
                    "app.models.GameMember",
                    "django.contrib.auth.models.AbstractBaseUser",
                    "app.models.Tweet",
                    "app.models.Position"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/average_load/strategy/group.py": {
        "GroupStrategy.get_children_services_query": {
            "name": "get_children_services_query",
            "location": 9,
            "return": [
                "dict",
                "sqlalchemy.engine.Engine",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Dict[int, str]",
                "Mapping[str, Any]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupStrategy.get_root_services_query": {
            "name": "get_root_services_query",
            "location": 22,
            "return": [
                "dict",
                "sqlalchemy.engine.Engine",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupStrategy.get_children_average_metric_values": {
            "name": "get_children_average_metric_values",
            "location": 34,
            "return": [
                "str",
                "float",
                "List[int]",
                "int",
                "app.models.move.Coordinate"
            ],
            "arguments": {
                "joined_subquery": [
                    "bool",
                    "str",
                    "models.Name",
                    "float",
                    "List[str]"
                ]
            }
        },
        "GroupStrategy.get_root_average_metric_value": {
            "name": "get_root_average_metric_value",
            "location": 46,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "joined_subquery": [
                    "viewer.models.Gallery",
                    "str"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/average_load/strategy/server.py": {
        "ServerStrategy.get_children_services_query": {
            "name": "get_children_services_query",
            "location": 9,
            "return": [
                "dict",
                "sqlalchemy.engine.Engine",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Dict[int, str]",
                "Mapping[str, Any]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerStrategy.get_children_average_metric_values": {
            "name": "get_children_average_metric_values",
            "location": 29,
            "return": [
                "str",
                "float",
                "List[int]",
                "int",
                "app.models.move.Coordinate"
            ],
            "arguments": {
                "joined_subquery": [
                    "bool",
                    "str",
                    "models.Name",
                    "float",
                    "List[str]"
                ]
            }
        },
        "ServerStrategy.get_root_services_query": {
            "name": "get_root_services_query",
            "location": 40,
            "return": [
                "dict",
                "sqlalchemy.engine.Engine",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerStrategy.get_root_average_metric_value": {
            "name": "get_root_average_metric_value",
            "location": 50,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "joined_subquery": [
                    "viewer.models.Gallery",
                    "sqlalchemy.orm.query.Query",
                    "app.models.Journey",
                    "app.models.Stage",
                    "app.models.GameMember",
                    "django.contrib.auth.models.AbstractBaseUser",
                    "app.models.Tweet",
                    "app.models.Position"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/average_load/strategy/service.py": {
        "ServiceStrategy.get_children_services_query": {
            "name": "get_children_services_query",
            "location": 9,
            "return": [
                "dict",
                "sqlalchemy.engine.Engine",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Dict[int, str]",
                "Mapping[str, Any]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceStrategy.get_children_average_metric_values": {
            "name": "get_children_average_metric_values",
            "location": 27,
            "return": [
                "str",
                "float",
                "List[int]",
                "int",
                "app.models.move.Coordinate"
            ],
            "arguments": {
                "joined_subquery": [
                    "models.characters.states.Stateful",
                    "zam_repondeur.models.Lecture",
                    "List[int]"
                ]
            }
        },
        "ServiceStrategy.get_root_services_query": {
            "name": "get_root_services_query",
            "location": 40,
            "return": [
                "dict",
                "sqlalchemy.engine.Engine",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServiceStrategy.get_root_average_metric_value": {
            "name": "get_root_average_metric_value",
            "location": 47,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "joined_subquery": [
                    "viewer.models.Gallery",
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/average_load/strategy/__init__.py": {},
    "Griphook-master/griphook/server/average_load/tests/conftest.py": {
        "clusters": {
            "name": "clusters",
            "location": 9,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "servers": {
            "name": "servers",
            "location": 23,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "grouper.models.base.session.Session"
                ],
                "clusters": [
                    "int",
                    "str",
                    "bool",
                    "models.User",
                    "List[str]"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/average_load/tests/test_views.py": {
        "request_data": {
            "name": "request_data",
            "location": 9,
            "return": [
                "bytes",
                "str",
                "dict"
            ],
            "arguments": {}
        },
        "TestAverageLoadChartDataView.test_view_return_200_status_code": {
            "name": "test_view_return_200_status_code",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "BinaryIO",
                    "List[List[int]]"
                ],
                "request_data": [
                    "str"
                ]
            }
        },
        "TestAverageLoadChartDataView.test_400_status_code_when_not_enough_request_arguments": {
            "name": "test_400_status_code_when_not_enough_request_arguments",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request_data": [
                    "flask.Response"
                ],
                "session": [
                    "dict",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "TestAverageLoadChartDataView.test_wrong_target_type": {
            "name": "test_wrong_target_type",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "BinaryIO",
                    "List[str]",
                    "List[List[int]]"
                ],
                "request_data": [
                    "str",
                    "dict"
                ]
            }
        },
        "TestAverageLoadChartDataView.test_correct_target_type": {
            "name": "test_correct_target_type",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request_data": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "flask.wrappers.Response"
                ],
                "session": [
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "TestAverageLoadChartDataView.test_404_status_code_when_target_not_founded": {
            "name": "test_404_status_code_when_target_not_founded",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "dict"
                ],
                "request_data": [
                    "dict",
                    "flask.wrappers.Response",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/average_load/tests/__init__.py": {},
    "Griphook-master/griphook/server/average_load/tests/strategy/test_cluster_strategy.py": {},
    "Griphook-master/griphook/server/average_load/tests/strategy/test_group_strategy.py": {},
    "Griphook-master/griphook/server/average_load/tests/strategy/test_server_strategy.py": {},
    "Griphook-master/griphook/server/average_load/tests/strategy/test_service_strategy.py": {},
    "Griphook-master/griphook/server/average_load/tests/strategy/__init__.py": {},
    "Griphook-master/griphook/server/billing/constants.py": {},
    "Griphook-master/griphook/server/billing/formatter.py": {
        "string_to_date_time": {
            "name": "string_to_date_time",
            "location": 9,
            "return": [
                "Optional[str]",
                "datetime.datetime",
                "datetime.date",
                "List[List[Any]]",
                "str"
            ],
            "arguments": {
                "time_in_string": [
                    "str"
                ]
            }
        },
        "format_row_for_billing_table": {
            "name": "format_row_for_billing_table",
            "location": 13,
            "return": [
                "int",
                "Optional[int]",
                "List[str]"
            ],
            "arguments": {
                "row": [
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, int]",
                    "dict",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "format_metrics_list_for_general_table": {
            "name": "format_metrics_list_for_general_table",
            "location": 24,
            "return": [
                "dict",
                "str",
                "list"
            ],
            "arguments": {
                "metrics": [
                    "dict",
                    "str",
                    "Exception",
                    "List[str]",
                    "List[Tuple[str, str]]",
                    "Type[T]"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/billing/pie_chart_views.py": {
        "get_price_coefficients": {
            "name": "get_price_coefficients",
            "location": 20,
            "return": [
                "str",
                "Union[tuple, list]",
                "List[str]"
            ],
            "arguments": {
                "time_from": [
                    "str",
                    "Optional[float]",
                    "int",
                    "float",
                    "List[str]"
                ],
                "time_until": [
                    "str",
                    "Optional[float]",
                    "int",
                    "float",
                    "List[str]"
                ]
            }
        },
        "get_average_metric_sum_func_with_cases": {
            "name": "get_average_metric_sum_func_with_cases",
            "location": 32,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "cpu_price_coef": [
                    "Callable[..., Awaitable]",
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "memory_price_coef": [
                    "Callable[..., Awaitable]",
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "GetPieChartAbsoluteDataView.dispatch_request": {
            "name": "dispatch_request",
            "location": 75,
            "return": [
                "Optional[str]",
                "Dict[str, Union[int, str]]",
                "dict",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetPieChartAbsoluteDataView.get_query_metric_sum": {
            "name": "get_query_metric_sum",
            "location": 141,
            "return": [
                "Tuple[bytes]",
                "Dict[str, Any]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "initial_query": [
                    "str",
                    "bool",
                    "Dict[Tuple[int, int], str]",
                    "dict",
                    "Sequence[str]"
                ],
                "request_data": [
                    "str",
                    "bool",
                    "Dict[Tuple[int, int], str]",
                    "dict",
                    "Sequence[str]"
                ]
            }
        },
        "GetPieChartRelativeDataView.dispatch_request": {
            "name": "dispatch_request",
            "location": 183,
            "return": [
                "Optional[str]",
                "Dict[str, Union[int, str]]",
                "dict",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GetPieChartRelativeDataView.get_metric_sum_for_each_group": {
            "name": "get_metric_sum_for_each_group",
            "location": 245,
            "return": [
                "Mapping[str, Any]",
                "str",
                "List[Dict]",
                "Dict[str, Any]",
                "bool",
                "Tuple[int, int, int]",
                "Dict[int, Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "initial_query": [
                    "Optional[str]",
                    "List[str]",
                    "Callable[[], Any]",
                    "bytes",
                    "dict",
                    "str"
                ],
                "request_data": [
                    "Optional[str]",
                    "List[str]",
                    "Callable[[], Any]",
                    "bytes",
                    "dict",
                    "str"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/billing/route.py": {},
    "Griphook-master/griphook/server/billing/sql_queries.py": {
        "case_builder": {
            "name": "case_builder",
            "location": 25,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "metrics_type": [
                    "str"
                ],
                "coef": [
                    "tildes.models.topic.Topic",
                    "int",
                    "List[int]"
                ]
            }
        },
        "get_time_coef": {
            "name": "get_time_coef",
            "location": 30,
            "return": [
                "datetime.datetime",
                "datetime.timedelta",
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "time_from": [
                    "str",
                    "viewer.models.Archive",
                    "Type",
                    "dict",
                    "List[fonduer.candidates.models.Candidate]",
                    "int"
                ],
                "time_until": [
                    "str",
                    "viewer.models.Archive",
                    "Type",
                    "dict",
                    "List[fonduer.candidates.models.Candidate]",
                    "int"
                ]
            }
        },
        "get_billing_table_data": {
            "name": "get_billing_table_data",
            "location": 34,
            "return": [
                "Optional[str]",
                "Dict[str, Type[Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "filters": [
                    "dict",
                    "django.contrib.auth.models.User",
                    "Dict[str, Any]",
                    "tildes.models.scraper.ScraperResult",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "get_services_group_data_group_by_services": {
            "name": "get_services_group_data_group_by_services",
            "location": 75,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str",
                "int",
                "Dict[str, Union[str, int]]"
            ],
            "arguments": {
                "services_group_id": [
                    "str",
                    "IO",
                    "zerver.models.UserProfile",
                    "Optional[Container[str]]"
                ],
                "time_from": [
                    "str",
                    "IO",
                    "zerver.models.UserProfile",
                    "Optional[Container[str]]"
                ],
                "time_until": [
                    "str",
                    "IO",
                    "zerver.models.UserProfile",
                    "Optional[Container[str]]"
                ]
            }
        },
        "get_services_group_data_chart": {
            "name": "get_services_group_data_chart",
            "location": 106,
            "return": [
                "str",
                "List[Tuple[str, str]]",
                "Set[str]",
                "list",
                "bytes"
            ],
            "arguments": {
                "services_group_id": [
                    "bytes",
                    "Optional[int]",
                    "Optional[datetime.date]",
                    "Optional[Iterable[str]]",
                    "bool"
                ],
                "time_from": [
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[Callable]",
                    "Type[T]",
                    "bool"
                ],
                "time_until": [
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[Callable]",
                    "Type[T]",
                    "bool"
                ],
                "metric_type": [
                    "bytes",
                    "Optional[int]",
                    "Optional[datetime.date]",
                    "Optional[Iterable[str]]",
                    "bool"
                ]
            }
        },
        "get_services_groups_resources": {
            "name": "get_services_groups_resources",
            "location": 153,
            "return": [
                "str",
                "bool",
                "pyspark.sql.SparkSession"
            ],
            "arguments": {
                "metric_type": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "Dict[str,str]",
                    "dict",
                    "django.db.models.Model"
                ],
                "time_from": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "Dict[str,str]",
                    "dict",
                    "django.db.models.Model"
                ],
                "time_until": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "Dict[str,str]",
                    "dict",
                    "django.db.models.Model"
                ],
                "coefficient": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "target_type": [
                    "bool",
                    "str"
                ],
                "target_ids": [
                    "int",
                    "str",
                    "float"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/billing/views.py": {
        "get_filtered_billing_table_data": {
            "name": "get_filtered_billing_table_data",
            "location": 16,
            "return": [
                "dict",
                "Optional[str]",
                "List[str]",
                "Dict[str, Any]",
                "int",
                "List[dict]"
            ],
            "arguments": {}
        },
        "get_billing_metric_values_by_services_group": {
            "name": "get_billing_metric_values_by_services_group",
            "location": 77,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Optional[str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {}
        },
        "get_metric_chart_for_services_group": {
            "name": "get_metric_chart_for_services_group",
            "location": 118,
            "return": [
                "dict",
                "Dict[str, Union[int, str]]",
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {}
        }
    },
    "Griphook-master/griphook/server/billing/__init__.py": {},
    "Griphook-master/griphook/server/billing/tests/conftest.py": {
        "clusters": {
            "name": "clusters",
            "location": 24,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "teams": {
            "name": "teams",
            "location": 32,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "projects": {
            "name": "projects",
            "location": 40,
            "return": [
                "str",
                "type",
                "models.Name",
                "dict"
            ],
            "arguments": {
                "session": [
                    "Set[str]",
                    "set",
                    "Dict[str, Any]",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "servers": {
            "name": "servers",
            "location": 48,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "grouper.models.base.session.Session"
                ],
                "clusters": [
                    "session.DatabaseSession",
                    "str",
                    "bool",
                    "Tuple[float, float]"
                ]
            }
        },
        "services_groups": {
            "name": "services_groups",
            "location": 58,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "session": [
                    "str",
                    "Callable",
                    "salon.models.ServiceTemplateSet",
                    "Optional[str]",
                    "Tuple[int, str]"
                ],
                "teams": [
                    "int",
                    "str"
                ],
                "projects": [
                    "int",
                    "str"
                ]
            }
        },
        "services": {
            "name": "services",
            "location": 76,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "session": [
                    "grouper.models.base.session.Session",
                    "recidiviz.persistence.database.session.Session",
                    "bytes",
                    "str"
                ],
                "servers": [
                    "dict",
                    "Optional[Mapping[str, Any]]",
                    "str"
                ],
                "services_groups": [
                    "dict",
                    "Optional[Mapping[str, Any]]",
                    "str"
                ]
            }
        },
        "billing_batch_stories": {
            "name": "billing_batch_stories",
            "location": 93,
            "return": [
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "metrics": {
            "name": "metrics",
            "location": 106,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "grouper.models.base.session.Session"
                ],
                "services": [
                    "float",
                    "str"
                ],
                "services_groups": [
                    "float",
                    "str"
                ],
                "billing_batch_stories": [
                    "session.DatabaseSession",
                    "str",
                    "bool",
                    "Tuple[float, float]"
                ]
            }
        },
        "billing_table_endpoint_request_data": {
            "name": "billing_table_endpoint_request_data",
            "location": 140,
            "return": [
                "str",
                "bytes",
                "Optional[Dict[str, Any]]",
                "float"
            ],
            "arguments": {
                "billing_batch_stories": [
                    "str",
                    "bool",
                    "bytes",
                    "int",
                    "type",
                    "Mapping[str, Any]"
                ],
                "servers": [
                    "bool",
                    "django.db.backends.postgresql_psycopg2.schema.DatabaseSchemaEditor",
                    "int",
                    "List[Tuple[str, str]]",
                    "str",
                    "list",
                    "List[str]"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/billing/tests/test_billing_table.py": {
        "request_without_required_field": {
            "name": "request_without_required_field",
            "location": 6,
            "return": [
                "dict",
                "Dict[str, Union[int, str]]",
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "client": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Exception"
                ],
                "url": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Exception"
                ],
                "data": [
                    "dict"
                ],
                "field": [
                    "Dict[str, str]",
                    "int",
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "test_validation_request_data": {
            "name": "test_validation_request_data",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ],
                "billing_table_endpoint_request_data": [
                    "int"
                ]
            }
        },
        "test_billing_table_endpoint_response_data": {
            "name": "test_billing_table_endpoint_response_data",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "Dict[str, Sequence[str]]",
                    "str"
                ],
                "client": [
                    "flask.testing.FlaskClient"
                ],
                "clusters": [
                    "Dict[str, Sequence[str]]",
                    "str"
                ],
                "teams": [
                    "Dict[str, Sequence[str]]",
                    "str"
                ],
                "projects": [
                    "Dict[str, Sequence[str]]",
                    "str"
                ],
                "servers": [
                    "Dict[str, Sequence[str]]",
                    "str"
                ],
                "services_groups": [
                    "Dict[str, Sequence[str]]",
                    "str"
                ],
                "services": [
                    "Dict[str, Sequence[str]]",
                    "str"
                ],
                "billing_batch_stories": [
                    "Dict[str, Sequence[str]]",
                    "str"
                ],
                "metrics": [
                    "Dict[str, Sequence[str]]",
                    "str"
                ],
                "billing_table_endpoint_request_data": [
                    "flask.testing.FlaskClient"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/billing/tests/test_views.py": {},
    "Griphook-master/griphook/server/billing/tests/__init__.py": {},
    "Griphook-master/griphook/server/billing/validation/schemas.py": {},
    "Griphook-master/griphook/server/billing/validation/validators.py": {
        "validate_request_json": {
            "name": "validate_request_json",
            "location": 4,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, Any]",
                "Dict[str, List[Callable]]",
                "List[str]"
            ],
            "arguments": {
                "schema": [
                    "str",
                    "float",
                    "List[Dict[str, Any]]",
                    "dict"
                ],
                "request_json": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "List[str]",
                    "Optional[Dict]"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/billing/validation/__init__.py": {},
    "Griphook-master/griphook/server/filters/billing_queries.py": {
        "get_teams_hierarchy_part": {
            "name": "get_teams_hierarchy_part",
            "location": 4,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {}
        },
        "get_projects_hierarchy_part": {
            "name": "get_projects_hierarchy_part",
            "location": 12,
            "return": [
                "bool",
                "str",
                "Project",
                "List[annofabapi.models.ProjectMember]",
                "django.db.models.QuerySet",
                "config.Project"
            ],
            "arguments": {}
        }
    },
    "Griphook-master/griphook/server/filters/peaks_queries.py": {
        "get_clusters_hierarchy_part": {
            "name": "get_clusters_hierarchy_part",
            "location": 6,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {}
        },
        "get_servers_hierarchy_part": {
            "name": "get_servers_hierarchy_part",
            "location": 14,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {}
        },
        "get_services_groups_hierarchy_part": {
            "name": "get_services_groups_hierarchy_part",
            "location": 25,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "get_services_hierarchy_part": {
            "name": "get_services_hierarchy_part",
            "location": 64,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {}
        }
    },
    "Griphook-master/griphook/server/filters/route.py": {},
    "Griphook-master/griphook/server/filters/views.py": {
        "get_peaks_filters_hierarchy": {
            "name": "get_peaks_filters_hierarchy",
            "location": 16,
            "return": [
                "int",
                "Dict[str, str]",
                "Optional[str]",
                "List[str]",
                "bool",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "get_billing_filters_hierarchy": {
            "name": "get_billing_filters_hierarchy",
            "location": 68,
            "return": [
                "int",
                "Dict[str, str]",
                "Optional[str]",
                "List[str]",
                "bool",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        }
    },
    "Griphook-master/griphook/server/filters/__init__.py": {},
    "Griphook-master/griphook/server/filters/tests/conftest.py": {
        "clusters": {
            "name": "clusters",
            "location": 16,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "servers": {
            "name": "servers",
            "location": 30,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "grouper.models.base.session.Session"
                ],
                "clusters": [
                    "int",
                    "bool",
                    "models.User",
                    "Optional[\"libkol.Item\"]",
                    "dict"
                ]
            }
        },
        "projects": {
            "name": "projects",
            "location": 50,
            "return": [
                "str",
                "type",
                "models.Name",
                "dict"
            ],
            "arguments": {
                "session": [
                    "Set[str]",
                    "set",
                    "Dict[str, Any]",
                    "Union[str, Iterable[str]]"
                ]
            }
        },
        "teams": {
            "name": "teams",
            "location": 63,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "services_groups_with_servers_and_clusters": {
            "name": "services_groups_with_servers_and_clusters",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "int"
                ],
                "servers": [
                    "int",
                    "bool",
                    "models.User",
                    "Optional[\"libkol.Item\"]",
                    "dict"
                ],
                "clusters": [
                    "str",
                    "Optional[sqlalchemy.orm.session.Session]",
                    "list",
                    "Iterable"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/filters/tests/test_billing_helper.py": {
        "test_get_all_projects_converted_to_dict": {
            "name": "test_get_all_projects_converted_to_dict",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "projects": [
                    "bob_emploi.frontend.server.scoring_base.ScoringProject"
                ]
            }
        },
        "test_get_all_teams_converted_to_dict": {
            "name": "test_get_all_teams_converted_to_dict",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "teams": []
            }
        }
    },
    "Griphook-master/griphook/server/filters/tests/test_peaks_helper.py": {
        "test_get_clusters_hierarchy_part": {
            "name": "test_get_clusters_hierarchy_part",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "clusters": [
                    "dict"
                ]
            }
        },
        "test_get_servers_hierarchy_part": {
            "name": "test_get_servers_hierarchy_part",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "servers": [
                    "bob_emploi.frontend.server.scoring_base.ScoringProject"
                ]
            }
        },
        "test_get_services_groups_hierarchy_part": {
            "name": "test_get_services_groups_hierarchy_part",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "services_groups_with_servers_and_clusters": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "test_get_services_hierarchy_part": {
            "name": "test_get_services_hierarchy_part",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "services_groups_with_servers_and_clusters": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/filters/tests/test_views.py": {
        "services_hierarchy_part": {
            "name": "services_hierarchy_part",
            "location": 7,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "servers_hierarchy_part": {
            "name": "servers_hierarchy_part",
            "location": 22,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "clusters_hierarchy_part": {
            "name": "clusters_hierarchy_part",
            "location": 28,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "groups_hierarchy_part": {
            "name": "groups_hierarchy_part",
            "location": 43,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "teams_hierarchy_part": {
            "name": "teams_hierarchy_part",
            "location": 56,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "projects_hierarchy_part": {
            "name": "projects_hierarchy_part",
            "location": 62,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "TestGetPeaksFiltersHierarchyView.test_view_return_correct_response": {
            "name": "test_view_return_correct_response",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "services_hierarchy_part": [],
                "servers_hierarchy_part": [],
                "clusters_hierarchy_part": [],
                "groups_hierarchy_part": []
            }
        },
        "TestGetPeaksFiltersHierarchyView.test_405_status_code_on_post": {
            "name": "test_405_status_code_on_post",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetBillingFiltersHierarchyView.test_view_return_correct_response": {
            "name": "test_view_return_correct_response",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [],
                "services_hierarchy_part": [],
                "servers_hierarchy_part": [],
                "clusters_hierarchy_part": [],
                "groups_hierarchy_part": [],
                "projects_hierarchy_part": [],
                "teams_hierarchy_part": []
            }
        },
        "TestGetBillingFiltersHierarchyView.test_405_status_code_on_post": {
            "name": "test_405_status_code_on_post",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Griphook-master/griphook/server/filters/tests/__init__.py": {},
    "Griphook-master/griphook/server/managers/base_manager.py": {
        "BaseManager.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "List[str]",
                    "Sequence[str]",
                    "bool"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/managers/cluster_manager.py": {
        "ClusterManager.set_cpu_price": {
            "name": "set_cpu_price",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cluster_id": [
                    "Optional[str]",
                    "int",
                    "str",
                    "Mapping[str, Any]",
                    "Tuple[int, str]"
                ],
                "new_cpu_price": [
                    "Optional[str]",
                    "int",
                    "str",
                    "Mapping[str, Any]",
                    "Tuple[int, str]"
                ]
            }
        },
        "ClusterManager.set_memory_price": {
            "name": "set_memory_price",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cluster_id": [
                    "Optional[str]",
                    "int",
                    "str",
                    "Mapping[str, Any]",
                    "Tuple[int, str]"
                ],
                "new_memory_price": [
                    "Optional[str]",
                    "int",
                    "str",
                    "Mapping[str, Any]",
                    "Tuple[int, str]"
                ]
            }
        },
        "ClusterManager._set_value": {
            "name": "_set_value",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cluster_id": [
                    "int",
                    "str",
                    "list",
                    "List[str]"
                ],
                "new_value": [
                    "int",
                    "str",
                    "Optional[List[str]]"
                ],
                "attribute_name": [
                    "str"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/managers/constants.py": {},
    "Griphook-master/griphook/server/managers/exceptions.py": {
        "ManagerException.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "error_text": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/managers/project_manager.py": {
        "ProjectManager.create": {
            "name": "create",
            "location": 19,
            "return": [
                "bob_emploi.frontend.server.scoring_base.ScoringProject",
                "bob_emploi.frontend.server.scoring.ScoringProject",
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "ProjectManager.update": {
            "name": "update",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str",
                    "Dict[str, Any]",
                    "zerver.models.UserProfile",
                    "int"
                ],
                "new_title": [
                    "str",
                    "bool",
                    "int",
                    "List[Callable]",
                    "Sequence[str]",
                    "Callable[[Any], bool]"
                ]
            }
        },
        "ProjectManager.delete": {
            "name": "delete",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ProjectManager.attach_to_services_group": {
            "name": "attach_to_services_group",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "int",
                    "Set[int]",
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "services_group_id": [
                    "int",
                    "Set[int]",
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "ProjectManager.detach_from_services_group": {
            "name": "detach_from_services_group",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "services_group_id": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "ProjectManager._update_relationship": {
            "name": "_update_relationship",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "services_group_id": [
                    "int",
                    "ajapaik.ajapaik_object_recognition.models.ObjectDetectionAnnotation",
                    "str"
                ],
                "project_id": [
                    "str",
                    "int"
                ]
            }
        },
        "ProjectManager._check_exists_project": {
            "name": "_check_exists_project",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str",
                    "int"
                ]
            }
        },
        "ProjectManager._get_services_group": {
            "name": "_get_services_group",
            "location": 103,
            "return": [
                "str",
                "bool",
                "pyspark.sql.SparkSession"
            ],
            "arguments": {
                "self": [],
                "services_group_id": [
                    "int",
                    "List[int]",
                    "Optional[int]"
                ]
            }
        },
        "ProjectManager._update_metrics_peaks_relationship": {
            "name": "_update_metrics_peaks_relationship",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str",
                    "Union[int,str]",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "services_group_id": [
                    "int",
                    "transfer.models.ItemID",
                    "ticketing.transfer.models.TicketCategoryID",
                    "bool",
                    "shop.transfer.models.ShopID",
                    "transfer.models.StorefronID",
                    "order.transfer.models.OrderNumberSequenceID",
                    "Optional[int]"
                ]
            }
        },
        "ProjectManager._update_metrics_billing_relationship": {
            "name": "_update_metrics_billing_relationship",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "project_id": [
                    "str",
                    "Union[int,str]",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "services_group_id": [
                    "int",
                    "transfer.models.ItemID",
                    "ticketing.transfer.models.TicketCategoryID",
                    "bool",
                    "shop.transfer.models.ShopID",
                    "transfer.models.StorefronID",
                    "order.transfer.models.OrderNumberSequenceID",
                    "Optional[int]"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/managers/server_manager.py": {
        "ServerManager.set_cpu_price": {
            "name": "set_cpu_price",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_id": [
                    "Optional[str]",
                    "int",
                    "str",
                    "Mapping[str, Any]",
                    "Tuple[int, str]"
                ],
                "new_cpu_price": [
                    "Optional[str]",
                    "int",
                    "str",
                    "Mapping[str, Any]",
                    "Tuple[int, str]"
                ]
            }
        },
        "ServerManager.set_memory_price": {
            "name": "set_memory_price",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_id": [
                    "Optional[str]",
                    "int",
                    "str",
                    "Mapping[str, Any]",
                    "Tuple[int, str]"
                ],
                "new_memory_price": [
                    "Optional[str]",
                    "int",
                    "str",
                    "Mapping[str, Any]",
                    "Tuple[int, str]"
                ]
            }
        },
        "ServerManager._set_value": {
            "name": "_set_value",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "server_id": [
                    "str",
                    "int",
                    "list",
                    "List[str]"
                ],
                "new_value": [
                    "str",
                    "list",
                    "int",
                    "Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]",
                    "abilian.services.security.models.Role"
                ],
                "attribute_name": [
                    "str"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/managers/team_manager.py": {
        "TeamManager.create": {
            "name": "create",
            "location": 19,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "title": [
                    "str"
                ]
            }
        },
        "TeamManager.update": {
            "name": "update",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "team_id": [
                    "int",
                    "bytes",
                    "transfer.models.ChannelID"
                ],
                "new_title": [
                    "int",
                    "bool",
                    "Callable",
                    "bytes"
                ]
            }
        },
        "TeamManager.delete": {
            "name": "delete",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "team_id": [
                    "int",
                    "transfer.models.StorefronID",
                    "transfer.models.ShopID",
                    "transfer.models.Badge.ID",
                    "transfer.models.ArticleID",
                    "str",
                    "transfer.models.Member.shipID",
                    "transfer.models.OrgaTeamID"
                ]
            }
        },
        "TeamManager.attach_to_services_group": {
            "name": "attach_to_services_group",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "team_id": [
                    "int",
                    "Set[int]",
                    "str",
                    "float"
                ],
                "services_group_id": [
                    "int",
                    "Set[int]",
                    "str",
                    "float"
                ]
            }
        },
        "TeamManager.detach_from_services_group": {
            "name": "detach_from_services_group",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "services_group_id": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "TeamManager._update_relationship": {
            "name": "_update_relationship",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "services_group_id": [
                    "int",
                    "str",
                    "ajapaik.ajapaik_object_recognition.models.ObjectDetectionAnnotation"
                ],
                "team_id": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "TeamManager._check_exists_team": {
            "name": "_check_exists_team",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "team_id": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "TeamManager._get_services_group": {
            "name": "_get_services_group",
            "location": 93,
            "return": [
                "str",
                "bool",
                "pyspark.sql.SparkSession"
            ],
            "arguments": {
                "self": [],
                "services_group_id": [
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "TeamManager._update_metrics_peaks_relationship": {
            "name": "_update_metrics_peaks_relationship",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "team_id": [
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "services_group_id": [
                    "int",
                    "shop.transfer.models.ShopID",
                    "transfer.models.OrderID"
                ]
            }
        },
        "TeamManager._update_metrics_billing_relationship": {
            "name": "_update_metrics_billing_relationship",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "team_id": [
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "services_group_id": [
                    "int",
                    "shop.transfer.models.ShopID",
                    "transfer.models.OrderID"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/managers/__init__.py": {},
    "Griphook-master/griphook/server/managers/tests/conftest.py": {
        "create_project_team_test_data": {
            "name": "create_project_team_test_data",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "grouper.models.user.User",
                    "sqlalchemy.orm.session.Session",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "create_server_cluster_test_data": {
            "name": "create_server_cluster_test_data",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "grouper.models.base.session.Session",
                    "grouper.models.permission.Permission"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/managers/tests/test_cluster_manager.py": {
        "TestSetCPUPrice.test_set_cpu_price": {
            "name": "test_set_cpu_price",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "Optional[str]",
                    "asgard.models.job.ScheduledJob",
                    "lunch_buddies.models.polls.Poll",
                    "dict",
                    "int"
                ],
                "create_server_cluster_test_data": [
                    "bool",
                    "Sequence[str]",
                    "str",
                    "Literal"
                ]
            }
        },
        "TestSetCPUPrice.test_set_cpu_price_when_cluster_doesnt_exists": {
            "name": "test_set_cpu_price_when_cluster_doesnt_exists",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str"
                ]
            }
        },
        "TestSetCPUPrice.test_set_cpu_price_when_price_was_set": {
            "name": "test_set_cpu_price_when_price_was_set",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "int",
                    "str",
                    "zerver.models.UserProfile"
                ],
                "create_server_cluster_test_data": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "Literal"
                ]
            }
        },
        "TestSetMemoryPrice.test_set_memory_price": {
            "name": "test_set_memory_price",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "Optional[str]",
                    "asgard.models.job.ScheduledJob",
                    "lunch_buddies.models.polls.Poll",
                    "dict",
                    "int"
                ],
                "create_server_cluster_test_data": [
                    "bool",
                    "Sequence[str]",
                    "str",
                    "Literal"
                ]
            }
        },
        "TestSetMemoryPrice.test_set_memory_price_when_cluster_doesnt_exists": {
            "name": "test_set_memory_price_when_cluster_doesnt_exists",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str"
                ]
            }
        },
        "TestSetMemoryPrice.test_set_memory_price_when_price_was_set": {
            "name": "test_set_memory_price_when_price_was_set",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "int",
                    "str",
                    "zerver.models.UserProfile"
                ],
                "create_server_cluster_test_data": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "Literal"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/managers/tests/test_project_manager.py": {
        "TestCreateProject.test_create_project": {
            "name": "test_create_project",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "instark.application.managers.SessionManager",
                    "zerver.models.UserProfile",
                    "List[List[int]]",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "TestCreateProject.test_create_project_with_exists_title": {
            "name": "test_create_project_with_exists_title",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "Callable",
                    "List[str]",
                    "Mapping[str, Any]",
                    "bool"
                ],
                "create_project_team_test_data": [
                    "bool",
                    "List[List[int]]"
                ]
            }
        },
        "TestUpdateProject.test_update_project": {
            "name": "test_update_project",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "app.models.dto.ClientInfo",
                    "List[List[int]]",
                    "int",
                    "dict",
                    "Optional[str]"
                ],
                "create_project_team_test_data": [
                    "bool",
                    "List[List[int]]"
                ]
            }
        },
        "TestUpdateProject.test_update_project_when_it_doesnt_exists": {
            "name": "test_update_project_when_it_doesnt_exists",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "models.posting.PostingList",
                    "list",
                    "bool",
                    "app.models.dto.ClientInfo"
                ]
            }
        },
        "TestDeleteProject.test_delete_project": {
            "name": "test_delete_project",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "TextIO",
                    "dict",
                    "List[str]",
                    "bool",
                    "bob_emploi.frontend.server.scoring.ScoringProject"
                ],
                "create_project_team_test_data": [
                    "bool",
                    "List[List[int]]"
                ]
            }
        },
        "TestDeleteProject.test_delete_project_when_it_doesnt_exists": {
            "name": "test_delete_project_when_it_doesnt_exists",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "int",
                    "models.characters.character_base.Character",
                    "deeplearning.ml4pl.models.logger.Logger"
                ]
            }
        },
        "TestAttachProject.test_attach_project": {
            "name": "test_attach_project",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "Optional[str]",
                    "asgard.models.job.ScheduledJob",
                    "dict",
                    "Optional[List[str]]",
                    "bool"
                ],
                "create_project_team_test_data": [
                    "bool",
                    "List[List[int]]",
                    "int"
                ]
            }
        },
        "TestAttachProject.test_attach_project_when_it_doesnt_exists": {
            "name": "test_attach_project_when_it_doesnt_exists",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "zerver.models.UserProfile",
                    "asgard.models.accounAccount"
                ]
            }
        },
        "TestAttachProject.test_attach_project_when_services_group_doesnt_exists": {
            "name": "test_attach_project_when_services_group_doesnt_exists",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "Optional[str]",
                    "asgard.models.job.ScheduledJob",
                    "Optional[List[str]]",
                    "bool",
                    "sqlalchemy.orm.Session",
                    "str"
                ],
                "create_project_team_test_data": [
                    "bool",
                    "List[List[int]]",
                    "int"
                ]
            }
        },
        "TestAttachProject.test_attach_project_without_match_to_metric": {
            "name": "test_attach_project_without_match_to_metric",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "Optional[str]",
                    "asgard.models.job.ScheduledJob",
                    "dict",
                    "str",
                    "Optional[List[str]]",
                    "bool"
                ],
                "create_project_team_test_data": [
                    "bool",
                    "int",
                    "List[List[int]]"
                ]
            }
        },
        "TestDetachProject.test_detach_project": {
            "name": "test_detach_project",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "deeplearning.ml4pl.models.log_database.Database",
                    "str",
                    "Optional[str]"
                ],
                "create_project_team_test_data": [
                    "bool",
                    "List[List[int]]",
                    "int"
                ]
            }
        },
        "TestDetachProject.test_detach_project_when_service_group_doesnt_exists": {
            "name": "test_detach_project_when_service_group_doesnt_exists",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "deeplearning.ml4pl.models.log_database.Database",
                    "instark.application.managers.SessionManager"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/managers/tests/test_server_manager.py": {
        "TestSetCPUPrice.test_set_cpu_price": {
            "name": "test_set_cpu_price",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "Optional[str]",
                    "asgard.models.job.ScheduledJob",
                    "lunch_buddies.models.polls.Poll",
                    "dict",
                    "int"
                ],
                "create_server_cluster_test_data": [
                    "bool",
                    "Sequence[str]",
                    "str",
                    "Literal"
                ]
            }
        },
        "TestSetCPUPrice.test_set_cpu_price_when_server_doesnt_exists": {
            "name": "test_set_cpu_price_when_server_doesnt_exists",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str"
                ]
            }
        },
        "TestSetCPUPrice.test_set_cpu_price_when_price_was_set": {
            "name": "test_set_cpu_price_when_price_was_set",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "int",
                    "models.Book",
                    "str",
                    "Optional[str]"
                ],
                "create_server_cluster_test_data": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "Literal"
                ]
            }
        },
        "TestSetMemoryPrice.test_set_memory_price": {
            "name": "test_set_memory_price",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "Optional[str]",
                    "asgard.models.job.ScheduledJob",
                    "lunch_buddies.models.polls.Poll",
                    "dict",
                    "int"
                ],
                "create_server_cluster_test_data": [
                    "bool",
                    "Sequence[str]",
                    "str",
                    "Literal"
                ]
            }
        },
        "TestSetMemoryPrice.test_set_memory_price_when_server_doesnt_exists": {
            "name": "test_set_memory_price_when_server_doesnt_exists",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str"
                ]
            }
        },
        "TestSetMemoryPrice.test_set_memory_price_when_price_was_set": {
            "name": "test_set_memory_price_when_price_was_set",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "int",
                    "models.Book",
                    "str",
                    "Optional[str]"
                ],
                "create_server_cluster_test_data": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "Literal"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/managers/tests/test_team_manager.py": {
        "TestCreateTeam.test_create_team": {
            "name": "test_create_team",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session",
                    "instark.application.managers.SessionManager"
                ]
            }
        },
        "TestCreateTeam.test_create_team_with_exists_title": {
            "name": "test_create_team_with_exists_title",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "instark.application.managers.SessionManager",
                    "app.models.User",
                    "app.models.user.User",
                    "ultron8.api.models.trigger.TriggerCreate"
                ],
                "create_project_team_test_data": [
                    "bool",
                    "str",
                    "List[Tuple[str, Any]]",
                    "Literal"
                ]
            }
        },
        "TestUpdateTeam.test_update_team": {
            "name": "test_update_team",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "core_lib.core.models.Event",
                    "asgard.models.user.User",
                    "asgard.models.accounAccount",
                    "zam_repondeur.models.Lecture",
                    "dict"
                ],
                "create_project_team_test_data": [
                    "bool",
                    "str"
                ]
            }
        },
        "TestUpdateTeam.test_update_team_when_it_doesnt_exists": {
            "name": "test_update_team_when_it_doesnt_exists",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "dict",
                    "List[lunch_buddies.models.polls.Poll]"
                ]
            }
        },
        "TestDeleteTeam.test_delete_team": {
            "name": "test_delete_team",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "Optional[str]",
                    "sqlalchemy.orm.session.Session"
                ],
                "create_project_team_test_data": [
                    "bool",
                    "str",
                    "Literal",
                    "List[Tuple[str, Any]]",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "TestDeleteTeam.test_delete_team_when_it_doesnt_exists": {
            "name": "test_delete_team_when_it_doesnt_exists",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "deeplearning.ml4pl.models.logger.Logger"
                ]
            }
        },
        "TestAttachTeam.test_attach_team": {
            "name": "test_attach_team",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "sqlalchemy.orm.Session",
                    "str",
                    "asgard.models.job.ScheduledJob",
                    "sqlalchemy.orm.session.Session",
                    "Optional[Dict[str, Any]]",
                    "zerver.models.UserProfile"
                ],
                "create_project_team_test_data": [
                    "bool",
                    "int"
                ]
            }
        },
        "TestAttachTeam.test_attach_team_when_it_doesnt_exists": {
            "name": "test_attach_team_when_it_doesnt_exists",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "zerver.models.UserProfile",
                    "str",
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "TestAttachTeam.test_attach_team_when_services_group_doesnt_exists": {
            "name": "test_attach_team_when_services_group_doesnt_exists",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "sqlalchemy.orm.Session",
                    "str",
                    "zerver.models.UserProfile",
                    "asgard.models.job.ScheduledJob",
                    "sqlalchemy.orm.session.Session"
                ],
                "create_project_team_test_data": [
                    "bool",
                    "int"
                ]
            }
        },
        "TestAttachTeam.test_attach_team_without_match_to_metric": {
            "name": "test_attach_team_without_match_to_metric",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "zerver.models.UserProfile",
                    "int",
                    "bool"
                ],
                "create_project_team_test_data": [
                    "bool",
                    "str",
                    "int",
                    "List[List[int]]",
                    "List[Tuple[str, Any]]"
                ]
            }
        },
        "TestDetachTeam.test_detach_team": {
            "name": "test_detach_team",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str"
                ],
                "create_project_team_test_data": [
                    "bool",
                    "int"
                ]
            }
        },
        "TestDetachTeam.test_detach_team_when_services_group_doesnt_exists": {
            "name": "test_detach_team_when_services_group_doesnt_exists",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "instark.application.managers.SessionManager",
                    "sqlalchemy.orm.Session"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/peaks/constants.py": {},
    "Griphook-master/griphook/server/peaks/peaks_filter.py": {
        "MetricPeakGroupFilter.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "grouper.models.base.session.Session",
                    "sqlalchemy.orm.Session"
                ],
                "query": [
                    "sqlalchemy.orm.session.Session",
                    "grouper.models.base.session.Session",
                    "sqlalchemy.orm.Session",
                    "Optional[str]"
                ]
            }
        },
        "MetricPeakGroupFilter.__join_cluster": {
            "name": "__join_cluster",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricPeakGroupFilter.__join_server": {
            "name": "__join_server",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricPeakGroupFilter.__join_service": {
            "name": "__join_service",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricPeakGroupFilter.__join_service_group": {
            "name": "__join_service_group",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricPeakGroupFilter.__join_batch_story": {
            "name": "__join_batch_story",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricPeakGroupFilter.filter_by_cluster_id": {
            "name": "filter_by_cluster_id",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricPeakGroupFilter.filter_by_server_id": {
            "name": "filter_by_server_id",
            "location": 61,
            "return": [
                "int",
                "str",
                "IO[Any]",
                "bool",
                "Dict[str, bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricPeakGroupFilter.filter_by_service_group_id": {
            "name": "filter_by_service_group_id",
            "location": 66,
            "return": [
                "int",
                "Optional[BaseException]",
                "Optional[str]",
                "str",
                "IO[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricPeakGroupFilter.filter_by_service_id": {
            "name": "filter_by_service_id",
            "location": 71,
            "return": [
                "int",
                "str",
                "IO[Any]",
                "bool",
                "Dict[str, bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricPeakGroupFilter.filter_by_time_period": {
            "name": "filter_by_time_period",
            "location": 76,
            "return": [
                "int",
                "str",
                "Union[int, float]"
            ],
            "arguments": {
                "self": [],
                "time_from": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ],
                "time_until": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "MetricPeakGroupFilter.filter_by_metric_type": {
            "name": "filter_by_metric_type",
            "location": 83,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricPeakGroupFilter.set_query_entities": {
            "name": "set_query_entities",
            "location": 87,
            "return": [
                "str",
                "bool",
                "List[Dict]",
                "Mapping[str, Any]",
                "Dict[int, Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricPeakGroupFilter.group_by": {
            "name": "group_by",
            "location": 91,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricPeakGroupFilter.order_by": {
            "name": "order_by",
            "location": 95,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "core.models.User.Key"
                ]
            }
        },
        "MetricPeakGroupFilter.get_items": {
            "name": "get_items",
            "location": 99,
            "return": [
                "dict",
                "int",
                "Dict[str, float]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Griphook-master/griphook/server/peaks/route.py": {},
    "Griphook-master/griphook/server/peaks/utils.py": {
        "round_time": {
            "name": "round_time",
            "location": 14,
            "return": [
                "float",
                "int",
                "datetime.datetime",
                "str"
            ],
            "arguments": {
                "since": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "until": [
                    "int",
                    "bool",
                    "Union[str, list]"
                ],
                "step": [
                    "str",
                    "float",
                    "datetime.timedelta",
                    "datetime.datetime",
                    "int",
                    "Optional[datetime.tzinfo]"
                ]
            }
        },
        "get_shift": {
            "name": "get_shift",
            "location": 28,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "since": [
                    "str",
                    "ddionrails.base.models.News",
                    "datetime.datetime",
                    "guillotina.db.orm.interfaces.IBaseObject",
                    "int",
                    "float"
                ],
                "step": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Optional[Iterable[Any]]"
                ]
            }
        },
        "get_peaks_query_group_by_time_step": {
            "name": "get_peaks_query_group_by_time_step",
            "location": 36,
            "return": [
                "OrderedDict",
                "Dict[str, str]",
                "Union[int, float, complex]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "target_type": [
                    "str",
                    "bool",
                    "dict"
                ],
                "target_id": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[float]",
                    "int",
                    "grouper.models.group.Group"
                ],
                "step": [
                    "str",
                    "float",
                    "int",
                    "bool",
                    "Iterable[int]"
                ],
                "metric_type": [
                    "str",
                    "Optional[List[str]]",
                    "type"
                ],
                "time_from": [
                    "str",
                    "int",
                    "float",
                    "Iterable[int]"
                ],
                "time_until": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "Set[str]",
                    "bool"
                ]
            }
        },
        "peak_formatter": {
            "name": "peak_formatter",
            "location": 68,
            "return": [
                "datetime.date",
                "str",
                "datetime.datetime"
            ],
            "arguments": {
                "peak": [
                    "str",
                    "datetime.timedelta",
                    "float",
                    "Dict[str, str]",
                    "int"
                ]
            }
        },
        "validate_peaks_query": {
            "name": "validate_peaks_query",
            "location": 74,
            "return": [
                "bool",
                "str",
                "Optional[zerver.models.Realm]"
            ],
            "arguments": {
                "validation_data": [
                    "dict",
                    "int",
                    "str",
                    "daylighdb.models.User",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/peaks/views.py": {
        "index": {
            "name": "index",
            "location": 10,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {}
        },
        "get_peaks_for_chart": {
            "name": "get_peaks_for_chart",
            "location": 14,
            "return": [
                "int",
                "Optional[str]",
                "dict",
                "List[str]",
                "Dict[str, str]",
                "List[dict]",
                "bool"
            ],
            "arguments": {}
        }
    },
    "Griphook-master/griphook/server/peaks/__init__.py": {},
    "Griphook-master/griphook/server/peaks/tests/conftest.py": {
        "clusters": {
            "name": "clusters",
            "location": 19,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "servers": {
            "name": "servers",
            "location": 27,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "grouper.models.base.session.Session"
                ],
                "clusters": [
                    "str",
                    "Type[object]"
                ]
            }
        },
        "services_groups": {
            "name": "services_groups",
            "location": 37,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "services": {
            "name": "services",
            "location": 48,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "session": [
                    "grouper.models.base.session.Session",
                    "sqlalchemy.orm.session.Session",
                    "dict",
                    "str",
                    "recidiviz.persistence.database.session.Session"
                ],
                "servers": [
                    "accounts.models.Account",
                    "bool"
                ],
                "services_groups": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "batch_stories": {
            "name": "batch_stories",
            "location": 75,
            "return": [
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "metrics": {
            "name": "metrics",
            "location": 88,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session"
                ],
                "services": [
                    "Optional[Any]",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]"
                ],
                "services_groups": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "batch_stories": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "peaks_endpoint_request_data": {
            "name": "peaks_endpoint_request_data",
            "location": 127,
            "return": [
                "bytes",
                "str",
                "Union[Dict, Tuple]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "batch_stories": [
                    "str",
                    "bool",
                    "Mapping[str, Any]"
                ],
                "servers": [
                    "str",
                    "bool",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/peaks/tests/test_peaks.py": {
        "test_get_clusters_hierarchy_part": {
            "name": "test_get_clusters_hierarchy_part",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "dict",
                    "flask.testing.FlaskClient",
                    "str"
                ],
                "servers": [
                    "Iterable[Any]",
                    "bool"
                ],
                "metrics": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "List[List[int]]",
                    "int",
                    "bool"
                ],
                "peaks_endpoint_request_data": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "request_without_required_field": {
            "name": "request_without_required_field",
            "location": 27,
            "return": [
                "dict",
                "Dict[str, Union[int, str]]",
                "Optional[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "client": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Exception"
                ],
                "url": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Exception"
                ],
                "data": [
                    "dict"
                ],
                "field": [
                    "Dict[str, str]",
                    "int",
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "test_validation_request_data": {
            "name": "test_validation_request_data",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "flask.testing.FlaskClient",
                    "dict"
                ],
                "peaks_endpoint_request_data": []
            }
        },
        "test_endpoint_response_data": {
            "name": "test_endpoint_response_data",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "client": [
                    "dict",
                    "Optional[dict]",
                    "str",
                    "flask.testing.FlaskClient"
                ],
                "metrics": [
                    "raiden.utils.List[raiden.raiden_service.RaidenService]",
                    "List[List[int]]",
                    "int"
                ],
                "batch_stories": [
                    "str",
                    "Iterable[Any]",
                    "bool"
                ],
                "peaks_endpoint_request_data": [
                    "axion.utils.types.AnyCallable",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_invalid_step_data_in_validation_function": {
            "name": "test_invalid_step_data_in_validation_function",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "peaks_endpoint_request_data": [
                    "bool"
                ]
            }
        },
        "test_invalid_time_from_data_in_validation_function": {
            "name": "test_invalid_time_from_data_in_validation_function",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "peaks_endpoint_request_data": []
            }
        },
        "test_invalid_time_until_data_in_validation_function": {
            "name": "test_invalid_time_until_data_in_validation_function",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "peaks_endpoint_request_data": [
                    "int",
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "test_invalid_metric_type_data_in_validation_function": {
            "name": "test_invalid_metric_type_data_in_validation_function",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "peaks_endpoint_request_data": [
                    "bool",
                    "int",
                    "Optional[float]",
                    "str"
                ]
            }
        },
        "test_invalid_target_type_data_in_validation_function": {
            "name": "test_invalid_target_type_data_in_validation_function",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "peaks_endpoint_request_data": [
                    "bool",
                    "Optional[float]",
                    "str"
                ]
            }
        },
        "test_invalid_target_id_data_in_validation_function": {
            "name": "test_invalid_target_id_data_in_validation_function",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "peaks_endpoint_request_data": [
                    "Dict[str, str]"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/settings/constants.py": {},
    "Griphook-master/griphook/server/settings/db.py": {
        "DataBase.get_projects": {
            "name": "get_projects",
            "location": 13,
            "return": [
                "Set[str]",
                "Dict[str, str]",
                "str",
                "Optional[str]",
                "salon.models.ServiceTemplateSet"
            ],
            "arguments": {
                "session": [
                    "str",
                    "Dict[Hashable, Any]"
                ]
            }
        },
        "DataBase.get_teams": {
            "name": "get_teams",
            "location": 22,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "session": [
                    "Dict[str, Any]",
                    "Callable",
                    "authentication.session.models.current_user.CurrentUser"
                ]
            }
        },
        "DataBase.get_servers": {
            "name": "get_servers",
            "location": 29,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "session": [
                    "Dict[str, Any]"
                ]
            }
        },
        "DataBase.get_cluster": {
            "name": "get_cluster",
            "location": 44,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "session": [
                    "int",
                    "str"
                ],
                "cluster_id": [
                    "int",
                    "str"
                ]
            }
        },
        "DataBase.get_clusters": {
            "name": "get_clusters",
            "location": 49,
            "return": [
                "Dict[str, Any]",
                "str",
                "dict",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "session": [
                    "Dict[str, Any]"
                ]
            }
        },
        "DataBase.get_services_group": {
            "name": "get_services_group",
            "location": 63,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "session": [
                    "int",
                    "models.Book"
                ]
            }
        },
        "DataBase.get_services_for_services_group": {
            "name": "get_services_for_services_group",
            "location": 77,
            "return": [
                "dict",
                "str",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "session": [
                    "int"
                ],
                "services_group_id": [
                    "int"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/settings/route.py": {},
    "Griphook-master/griphook/server/settings/validators.py": {
        "UpdateProjectTeamModel.check_title_length": {
            "name": "check_title_length",
            "location": 13,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "T",
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "value": [
                    "List[str]",
                    "int",
                    "List[float]",
                    "list",
                    "str",
                    "Set[str]"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/settings/views.py": {
        "GetServicesGroupsProjectsTeams.dispatch_request": {
            "name": "dispatch_request",
            "location": 11,
            "return": [
                "Optional[Callable]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Griphook-master/griphook/server/settings/__init__.py": {},
    "Griphook-master/griphook/server/settings/cluster/route.py": {},
    "Griphook-master/griphook/server/settings/cluster/views.py": {
        "GetClusters.dispatch_request": {
            "name": "dispatch_request",
            "location": 34,
            "return": [
                "Dict[str, Any]",
                "dict",
                "List[Dict]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusterUpdateCPUPrice.dispatch_request": {
            "name": "dispatch_request",
            "location": 73,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClusterUpdateMemoryPrice.dispatch_request": {
            "name": "dispatch_request",
            "location": 117,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Griphook-master/griphook/server/settings/cluster/__init__.py": {},
    "Griphook-master/griphook/server/settings/project/route.py": {},
    "Griphook-master/griphook/server/settings/project/views.py": {
        "GetProjects.dispatch_request": {
            "name": "dispatch_request",
            "location": 30,
            "return": [
                "Union[str, IO]",
                "str",
                "bool",
                "IO[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectCreate.dispatch_request": {
            "name": "dispatch_request",
            "location": 61,
            "return": [
                "dict",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectUpdateTitle.dispatch_request": {
            "name": "dispatch_request",
            "location": 108,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectDelete.dispatch_request": {
            "name": "dispatch_request",
            "location": 151,
            "return": [
                "dict",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectAttachToServicesGroup.dispatch_request": {
            "name": "dispatch_request",
            "location": 192,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectDetachFromServicesGroup.dispatch_request": {
            "name": "dispatch_request",
            "location": 237,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Griphook-master/griphook/server/settings/project/__init__.py": {},
    "Griphook-master/griphook/server/settings/server/route.py": {},
    "Griphook-master/griphook/server/settings/server/views.py": {
        "GetServers.dispatch_request": {
            "name": "dispatch_request",
            "location": 35,
            "return": [
                "Dict[str, Any]",
                "dict",
                "List[Dict]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerUpdateCPUPrice.dispatch_request": {
            "name": "dispatch_request",
            "location": 79,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ServerUpdateMemoryPrice.dispatch_request": {
            "name": "dispatch_request",
            "location": 123,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Griphook-master/griphook/server/settings/server/__init__.py": {},
    "Griphook-master/griphook/server/settings/team/route.py": {},
    "Griphook-master/griphook/server/settings/team/views.py": {
        "GetTeams.dispatch_request": {
            "name": "dispatch_request",
            "location": 31,
            "return": [
                "Dict[str, Any]",
                "dict",
                "List[Dict]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamCreate.dispatch_request": {
            "name": "dispatch_request",
            "location": 62,
            "return": [
                "dict",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamUpdateTitle.dispatch_request": {
            "name": "dispatch_request",
            "location": 105,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamDelete.dispatch_request": {
            "name": "dispatch_request",
            "location": 148,
            "return": [
                "dict",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamAttachToServicesGroup.dispatch_request": {
            "name": "dispatch_request",
            "location": 187,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamDetachFromServicesGroup.dispatch_request": {
            "name": "dispatch_request",
            "location": 232,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Griphook-master/griphook/server/settings/team/__init__.py": {},
    "Griphook-master/griphook/server/settings/tests/conftest.py": {
        "create_project_settings_test_data": {
            "name": "create_project_settings_test_data",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "Callable[[Type, str], bool]",
                    "bool"
                ]
            }
        },
        "create_team_settings_test_data": {
            "name": "create_team_settings_test_data",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str"
                ]
            }
        },
        "create_server_settings_test_data": {
            "name": "create_server_settings_test_data",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "zerver.models.Stream",
                    "zerver.models.UserProfile",
                    "str",
                    "Type[T]",
                    "int"
                ],
                "create_cluster_settings_test_data": [
                    "str",
                    "bool",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "create_cluster_settings_test_data": {
            "name": "create_cluster_settings_test_data",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "dict",
                    "Type[tikki.db.tables.Base]",
                    "Dict[str, Any]",
                    "app.models.User"
                ]
            }
        },
        "create_services_group_test_data": {
            "name": "create_services_group_test_data",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "str",
                    "Type[tikki.db.tables.Base]",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "create_project_services_group_test_data": {
            "name": "create_project_services_group_test_data",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "serverwamp.session.WAMPSession"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/settings/tests/test_cluster_settings.py": {
        "TestGetClusterSettingsAPI.test_get_clusters": {
            "name": "test_get_clusters",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "flask.testing.FlaskClient",
                    "dict"
                ],
                "create_cluster_settings_test_data": [
                    "int",
                    "List[List[int]]",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "bool"
                ]
            }
        },
        "TestClusterUpdateCPUPriceSettingsAPI.test_update_cpu_price": {
            "name": "test_update_cpu_price",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str"
                ],
                "create_cluster_settings_test_data": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "TestClusterUpdateCPUPriceSettingsAPI.test_update_cpu_price_when_cluster_doesnt_exists": {
            "name": "test_update_cpu_price_when_cluster_doesnt_exists",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "TestClusterUpdateCPUPriceSettingsAPI.test_update_cpu_price_with_wrong_parameters": {
            "name": "test_update_cpu_price_with_wrong_parameters",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "TestClusterUpdateCPUPriceSettingsAPI.test_update_cpu_price_with_not_valid_parameters": {
            "name": "test_update_cpu_price_with_not_valid_parameters",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "TestClusterUpdateMemoryPriceSettingsAPI.test_update_memory_price": {
            "name": "test_update_memory_price",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str"
                ],
                "create_cluster_settings_test_data": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "TestClusterUpdateMemoryPriceSettingsAPI.test_update_memory_price_when_cluster_doesnt_exists": {
            "name": "test_update_memory_price_when_cluster_doesnt_exists",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "TestClusterUpdateMemoryPriceSettingsAPI.test_update_memory_price_with_wrong_parameters": {
            "name": "test_update_memory_price_with_wrong_parameters",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "TestClusterUpdateMemoryPriceSettingsAPI.test_update_memory_price_with_not_valid_parameters": {
            "name": "test_update_memory_price_with_not_valid_parameters",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "flask.testing.FlaskClient"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/settings/tests/test_project_settings.py": {
        "TestProjectCreateSettingsAPI.test_create_project": {
            "name": "test_create_project",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "session": []
            }
        },
        "TestProjectCreateSettingsAPI.test_create_project_with_exists_title": {
            "name": "test_create_project_with_exists_title",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "create_project_settings_test_data": []
            }
        },
        "TestProjectCreateSettingsAPI.test_create_project_with_wrong_parameters": {
            "name": "test_create_project_with_wrong_parameters",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestProjectCreateSettingsAPI.test_create_project_with_not_valid_parameters": {
            "name": "test_create_project_with_not_valid_parameters",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestProjectUpdateTitleSettingsAPI.test_update_project": {
            "name": "test_update_project",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "session": [],
                "create_project_settings_test_data": []
            }
        },
        "TestProjectUpdateTitleSettingsAPI.test_update_project_when_it_doesnt_exists": {
            "name": "test_update_project_when_it_doesnt_exists",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestProjectUpdateTitleSettingsAPI.test_update_project_with_wrong_parameters": {
            "name": "test_update_project_with_wrong_parameters",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestProjectUpdateTitleSettingsAPI.test_update_project_with_not_valid_parameters": {
            "name": "test_update_project_with_not_valid_parameters",
            "location": 113,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestProjectDeleteSettingsAPI.test_delete_project": {
            "name": "test_delete_project",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "create_project_settings_test_data": []
            }
        },
        "TestProjectDeleteSettingsAPI.test_delete_project_when_it_doesnt_exists": {
            "name": "test_delete_project_when_it_doesnt_exists",
            "location": 142,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestProjectDeleteSettingsAPI.test_delete_project_with_wrong_parameters": {
            "name": "test_delete_project_with_wrong_parameters",
            "location": 153,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestProjectDeleteSettingsAPI.test_delete_project_with_not_valid_parameters": {
            "name": "test_delete_project_with_not_valid_parameters",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestProjectAttachToServicesGroupSettingsAPI.test_attach_project": {
            "name": "test_attach_project",
            "location": 180,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "create_project_settings_test_data": [],
                "create_services_group_test_data": []
            }
        },
        "TestProjectAttachToServicesGroupSettingsAPI.test_attach_project_when_it_doesnt_exists": {
            "name": "test_attach_project_when_it_doesnt_exists",
            "location": 199,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "create_services_group_test_data": []
            }
        },
        "TestProjectAttachToServicesGroupSettingsAPI.test_attach_project_when_services_group_doesnt_exists": {
            "name": "test_attach_project_when_services_group_doesnt_exists",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "create_project_settings_test_data": []
            }
        },
        "TestProjectAttachToServicesGroupSettingsAPI.test_attach_project_with_wrong_parameters": {
            "name": "test_attach_project_with_wrong_parameters",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestProjectAttachToServicesGroupSettingsAPI.test_attach_project_with_not_valid_parameters": {
            "name": "test_attach_project_with_not_valid_parameters",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestProjectDetachFromServicesGroupSettingsAPI.test_detach_project": {
            "name": "test_detach_project",
            "location": 276,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "create_project_services_group_test_data": []
            }
        },
        "TestProjectDetachFromServicesGroupSettingsAPI.test_detach_project_when_services_group_doesnt_exists": {
            "name": "test_detach_project_when_services_group_doesnt_exists",
            "location": 288,
            "return": [],
            "arguments": {
                "self": [],
                "client": [],
                "create_project_settings_test_data": []
            }
        },
        "TestProjectDetachFromServicesGroupSettingsAPI.test_detach_project_with_wrong_parameters": {
            "name": "test_detach_project_with_wrong_parameters",
            "location": 304,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestProjectDetachFromServicesGroupSettingsAPI.test_detach_project_with_not_valid_parameters": {
            "name": "test_detach_project_with_not_valid_parameters",
            "location": 316,
            "return": [],
            "arguments": {
                "self": [],
                "client": []
            }
        }
    },
    "Griphook-master/griphook/server/settings/tests/test_server_settings.py": {
        "TestGetServerSettingsAPI.test_get_servers": {
            "name": "test_get_servers",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "flask.testing.FlaskClient",
                    "dict"
                ],
                "create_server_settings_test_data": [
                    "int",
                    "List[List[int]]",
                    "django.conf.settings.AUTH_USER_MODEL",
                    "bool"
                ]
            }
        },
        "TestServerUpdateCPUPriceSettingsAPI.test_update_cpu_price": {
            "name": "test_update_cpu_price",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str"
                ],
                "create_server_settings_test_data": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "TestServerUpdateCPUPriceSettingsAPI.test_update_cpu_price_when_server_doesnt_exists": {
            "name": "test_update_cpu_price_when_server_doesnt_exists",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "TestServerUpdateCPUPriceSettingsAPI.test_update_cpu_price_with_wrong_parameters": {
            "name": "test_update_cpu_price_with_wrong_parameters",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "TestServerUpdateCPUPriceSettingsAPI.test_update_cpu_price_with_not_valid_parameters": {
            "name": "test_update_cpu_price_with_not_valid_parameters",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "TestServerUpdateMemoryPriceSettingsAPI.test_update_memory_price": {
            "name": "test_update_memory_price",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str"
                ],
                "create_server_settings_test_data": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "TestServerUpdateMemoryPriceSettingsAPI.test_update_memory_price_when_server_doesnt_exists": {
            "name": "test_update_memory_price_when_server_doesnt_exists",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "TestServerUpdateMemoryPriceSettingsAPI.test_update_memory_price_with_wrong_parameters": {
            "name": "test_update_memory_price_with_wrong_parameters",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "TestServerUpdateMemoryPriceSettingsAPI.test_update_memory_price_with_not_valid_parameters": {
            "name": "test_update_memory_price_with_not_valid_parameters",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "flask.testing.FlaskClient"
                ]
            }
        }
    },
    "Griphook-master/griphook/server/settings/tests/test_team_settings.py": {
        "TestTeamCreateSettingsAPI.test_create_team": {
            "name": "test_create_team",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "dict",
                    "Optional[dict]",
                    "flask.testing.FlaskClient"
                ],
                "session": [
                    "models.characters.character_base.Character"
                ]
            }
        },
        "TestTeamCreateSettingsAPI.test_create_team_with_exists_title": {
            "name": "test_create_team_with_exists_title",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "dict",
                    "str"
                ],
                "create_team_settings_test_data": [
                    "django.conf.settings.AUTH_USER_MODEL",
                    "str"
                ]
            }
        },
        "TestTeamCreateSettingsAPI.test_create_team_with_wrong_parameters": {
            "name": "test_create_team_with_wrong_parameters",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "TestTeamCreateSettingsAPI.test_create_team_with_not_valid_parameters": {
            "name": "test_create_team_with_not_valid_parameters",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "TestTeamUpdateTitleSettingsAPI.test_update_team": {
            "name": "test_update_team",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "dict"
                ],
                "session": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ],
                "create_team_settings_test_data": [
                    "django.conf.settings.AUTH_USER_MODEL"
                ]
            }
        },
        "TestTeamUpdateTitleSettingsAPI.test_update_team_when_it_doesnt_exists": {
            "name": "test_update_team_when_it_doesnt_exists",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "TestTeamUpdateTitleSettingsAPI.test_update_team_with_wrong_parameters": {
            "name": "test_update_team_with_wrong_parameters",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "TestTeamUpdateTitleSettingsAPI.test_update_team_with_not_valid_parameters": {
            "name": "test_update_team_with_not_valid_parameters",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "flask.testing.FlaskClient"
                ]
            }
        },
        "TestTeamDeleteSettingsAPI.test_delete_team": {
            "name": "test_delete_team",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "dict"
                ],
                "create_team_settings_test_data": [
                    "django.conf.settings.AUTH_USER_MODEL",
                    "str"
                ]
            }
        },
        "TestTeamDeleteSettingsAPI.test_delete_team_when_it_doesnt_exists": {
            "name": "test_delete_team_when_it_doesnt_exists",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestTeamDeleteSettingsAPI.test_delete_team_with_wrong_parameters": {
            "name": "test_delete_team_with_wrong_parameters",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        },
        "TestTeamDeleteSettingsAPI.test_delete_team_with_not_valid_parameters": {
            "name": "test_delete_team_with_not_valid_parameters",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": []
            }
        }
    },
    "Griphook-master/griphook/tasks/tasks.py": {
        "base_parse_metrics": {
            "name": "base_parse_metrics",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "batch_model": [
                    "str",
                    "int",
                    "excars.models.user.User",
                    "bool",
                    "Optional[dict]"
                ],
                "batch_id": [
                    "str",
                    "int",
                    "excars.models.user.User",
                    "bool",
                    "Optional[dict]"
                ],
                "parser": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "Type[str]",
                    "bytes"
                ],
                "target": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "Type[str]",
                    "bytes"
                ],
                "format_func": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "Type[str]",
                    "bytes"
                ],
                "metric_model": [
                    "zerver.models.UserProfile",
                    "str",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "parse_peak_metrics": {
            "name": "parse_peak_metrics",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "batch_id": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "parse_average_metrics": {
            "name": "parse_average_metrics",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "batch_id": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "save_metric_to_db": {
            "name": "save_metric_to_db",
            "location": 141,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "session": [
                    "str",
                    "zerver.models.Stream",
                    "zerver.models.Recipient",
                    "models.User",
                    "sqlalchemy.orm.Session"
                ],
                "metrics": [
                    "schema_salad.utils.CacheType",
                    "str"
                ],
                "batch": [
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session",
                    "int",
                    "Optional[bool]",
                    "Tuple[int]",
                    "Optional[str]",
                    "Optional[\"libkol.Item\"]"
                ],
                "metric_model": [
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session",
                    "int",
                    "Optional[bool]",
                    "Tuple[int]",
                    "Optional[str]",
                    "Optional[\"libkol.Item\"]"
                ]
            }
        }
    },
    "Griphook-master/griphook/tasks/task_scheduler.py": {
        "main": {
            "name": "main",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TaskScheduler.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "batch_model": [
                    "str",
                    "int"
                ],
                "task": [
                    "str",
                    "Dict[str, Any]",
                    "Callable[[Dict], None]",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "TaskScheduler.create_batches_until_now": {
            "name": "create_batches_until_now",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskScheduler.requeue_expired_batches": {
            "name": "requeue_expired_batches",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskScheduler._push_batches_into_queue": {
            "name": "_push_batches_into_queue",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "batches": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TaskScheduler.fill_task_queue": {
            "name": "fill_task_queue",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TaskScheduler.fill_schedule": {
            "name": "fill_schedule",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "schedule": [
                    "int",
                    "raiden.utils.TokenAmount"
                ],
                "start_now": [
                    "zam_repondeur.models.Lecture",
                    "bool",
                    "AsyncIterator[T]",
                    "Optional[datetime.datetime]",
                    "AsyncIterable[T]"
                ]
            }
        }
    },
    "Griphook-master/griphook/tasks/utils.py": {
        "datetime_range": {
            "name": "datetime_range",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "start": [
                    "datetime.datetime",
                    "int",
                    "float"
                ],
                "end": [
                    "datetime.datetime",
                    "int",
                    "str"
                ],
                "step": [
                    "datetime.datetime",
                    "int",
                    "str"
                ]
            }
        },
        "concurrent_get_or_create": {
            "name": "concurrent_get_or_create",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session"
                ],
                "model": [
                    "sqlalchemy.orm.session.Session",
                    "Union[sqlalchemy.orm.session.Session, abilian.core.models.blob.Blob]",
                    "Optional[List[str]]",
                    "Dict[str, Any]"
                ],
                "defaults": [
                    "Dict[str, object]",
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "Griphook-master/griphook/tasks/__init__.py": {},
    "Griphook-master/griphook/tests/base_fixtures.py": {
        "app": {
            "name": "app",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "client": {
            "name": "client",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "client_class": {
            "name": "client_class",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "str",
                    "int"
                ],
                "client": [
                    "str",
                    "bool"
                ]
            }
        },
        "session": {
            "name": "session",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "app": []
            }
        },
        "clusters": {
            "name": "clusters",
            "location": 40,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "session": [
                    "grouper.models.base.session.Session"
                ]
            }
        }
    },
    "Griphook-master/griphook/tests/test__config.py": {
        "TestDevelopmentConfig.create_app": {
            "name": "create_app",
            "location": 16,
            "return": [
                "flask.Flask"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDevelopmentConfig.test_app_is_development": {
            "name": "test_app_is_development",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTestingConfig.create_app": {
            "name": "create_app",
            "location": 28,
            "return": [
                "flask.Flask"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTestingConfig.test_app_is_testing": {
            "name": "test_app_is_testing",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProductionConfig.create_app": {
            "name": "create_app",
            "location": 39,
            "return": [
                "flask.Flask"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProductionConfig.test_app_is_production": {
            "name": "test_app_is_production",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProductionConfig.test_secret_key_has_been_set": {
            "name": "test_secret_key_has_been_set",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Griphook-master/griphook/tests/__init__.py": {},
    "Griphook-master/migrations/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run_migrations_online.process_revision_directives": {
            "name": "process_revision_directives",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "context": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "revision": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "directives": [
                    "Callable[[Mapping], T]",
                    "list",
                    "List[List[str]]",
                    "int",
                    "str",
                    "tuple"
                ]
            }
        }
    },
    "Griphook-master/migrations/versions/408041f63149_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "Griphook-master/migrations/versions/cee172c05d7a_initial_migration.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {}
        }
    }
}
{
    "Hanna-master/main.py": {},
    "Hanna-master/onboard.py": {
        "ask_user_input": {
            "name": "ask_user_input",
            "location": 13,
            "return": [
                "int",
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "prompt": [
                    "int",
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "ask_security": {
            "name": "ask_security",
            "location": 20,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "Callable"
            ],
            "arguments": {
                "ac_name": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "ask_confirm_security": {
            "name": "ask_confirm_security",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "sec_name": [
                    "str",
                    "float"
                ]
            }
        },
        "ask_allow_purchase": {
            "name": "ask_allow_purchase",
            "location": 43,
            "return": [
                "bool",
                "str",
                "Iterable[T]",
                "int"
            ],
            "arguments": {}
        },
        "ask_asset_class_name": {
            "name": "ask_asset_class_name",
            "location": 52,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "first": [
                    "bool",
                    "str",
                    "Match[str]",
                    "dict"
                ]
            }
        },
        "ask_target_pct": {
            "name": "ask_target_pct",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ac_name": [
                    "str",
                    "float"
                ],
                "pct_left": [
                    "str",
                    "float"
                ]
            }
        },
        "setup_security": {
            "name": "setup_security",
            "location": 88,
            "return": [
                "str",
                "Callable",
                "OrderedDict"
            ],
            "arguments": {
                "ac_name": [
                    "str",
                    "bool",
                    "Tuple[str, Optional[str]]",
                    "List[str]"
                ]
            }
        },
        "setup_asset_class": {
            "name": "setup_asset_class",
            "location": 102,
            "return": [
                "str",
                "Callable[..., T]",
                "Exception",
                "Dict[str, Any]"
            ],
            "arguments": {
                "first": [
                    "bool",
                    "str",
                    "type",
                    "dict",
                    "Match[str]"
                ],
                "existing_total_pct": [
                    "float",
                    "int",
                    "Callable[[int, int], int]",
                    "Callable[[List], float]"
                ]
            }
        }
    },
    "Hanna-master/__init__.py": {},
    "Hanna-master/src/api.py": {
        "load_credentials": {
            "name": "load_credentials",
            "location": 119,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "load_account_profile": {
            "name": "load_account_profile",
            "location": 130,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "Callable[[], Any]"
            ],
            "arguments": {
                "t": [
                    "str",
                    "tuple",
                    "int"
                ],
                "online": [
                    "list",
                    "List[Tuple[str, str]]",
                    "List[Dict[str, Any]]"
                ],
                "log": [
                    "list",
                    "List[Tuple[str, str]]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "load_holdings": {
            "name": "load_holdings",
            "location": 182,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "t": [
                    "str",
                    "bytes",
                    "tuple"
                ],
                "online": [
                    "List[Tuple[str, str]]",
                    "int",
                    "list",
                    "List[str]"
                ],
                "log": [
                    "List[Tuple[str, str]]",
                    "int",
                    "list",
                    "List[str]"
                ]
            }
        },
        "load_securities": {
            "name": "load_securities",
            "location": 242,
            "return": [
                "str",
                "Optional[str]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "security_ids": [
                    "list",
                    "int",
                    "str",
                    "Optional[List[str]]"
                ],
                "t": [
                    "str"
                ],
                "online": [
                    "list",
                    "int",
                    "str",
                    "Optional[List[str]]"
                ],
                "log": [
                    "list",
                    "int",
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "load_dividends": {
            "name": "load_dividends",
            "location": 306,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "security_ids": [
                    "str",
                    "List[dict]",
                    "int",
                    "bool"
                ],
                "t": [
                    "str"
                ],
                "online": [
                    "list",
                    "int",
                    "str",
                    "Optional[List[str]]"
                ],
                "log": [
                    "list",
                    "int",
                    "str",
                    "Optional[List[str]]"
                ]
            }
        },
        "Credentials.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "Credentials.get_username": {
            "name": "get_username",
            "location": 25,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Credentials.get_password": {
            "name": "get_password",
            "location": 28,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountProfile.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "buying_power": [
                    "float",
                    "str"
                ]
            }
        },
        "AccountProfile.get_buying_power": {
            "name": "get_buying_power",
            "location": 36,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HoldingInfo.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "security_id": [
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "Callable[[], str]",
                    "util.app_names.NAUTAAppNames",
                    "Sequence[str]",
                    "Optional[str]"
                ],
                "price": [
                    "float",
                    "Tuple[int, int, int]",
                    "int",
                    "List[str]"
                ],
                "quantity": [
                    "int",
                    "datetime.datetime",
                    "Optional[List[float]]",
                    "Optional[str]",
                    "bool",
                    "Optional[bytes]"
                ],
                "average_buy_price": [
                    "float",
                    "Tuple[int, int, int]",
                    "int"
                ],
                "equity": [
                    "float",
                    "Tuple[int, int, int]",
                    "int",
                    "List[str]"
                ],
                "percentage": [
                    "float",
                    "Tuple[int, int, int]",
                    "int",
                    "List[str]"
                ],
                "percent_change": [
                    "float",
                    "Tuple[int, int, int]",
                    "int"
                ],
                "equity_change": [
                    "float",
                    "Tuple[int, int, int]",
                    "int"
                ]
            }
        },
        "HoldingInfo.get_security_id": {
            "name": "get_security_id",
            "location": 63,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HoldingInfo.get_name": {
            "name": "get_name",
            "location": 66,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "HoldingInfo.get_price": {
            "name": "get_price",
            "location": 69,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HoldingInfo.get_quantity": {
            "name": "get_quantity",
            "location": 72,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HoldingInfo.get_average_buy_price": {
            "name": "get_average_buy_price",
            "location": 75,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HoldingInfo.get_equity": {
            "name": "get_equity",
            "location": 78,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HoldingInfo.get_percentage": {
            "name": "get_percentage",
            "location": 81,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HoldingInfo.get_percent_change": {
            "name": "get_percent_change",
            "location": 84,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HoldingInfo.get_equity_change": {
            "name": "get_equity_change",
            "location": 87,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityInfo.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ],
                "symbol": [
                    "str"
                ],
                "price": [
                    "float",
                    "str",
                    "datetime.datetime"
                ]
            }
        },
        "SecurityInfo.get_name": {
            "name": "get_name",
            "location": 97,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityInfo.get_symbol": {
            "name": "get_symbol",
            "location": 100,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityInfo.get_price": {
            "name": "get_price",
            "location": 103,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DividendInfo.__init__": {
            "name": "__init__",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "security_id": [
                    "str",
                    "int",
                    "Dict[str, str]"
                ],
                "amount": [
                    "float",
                    "int",
                    "Union[str, int, float]",
                    "Union[float, int]"
                ]
            }
        },
        "DividendInfo.get_security_id": {
            "name": "get_security_id",
            "location": 112,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DividendInfo.get_amount": {
            "name": "get_amount",
            "location": 115,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Hanna-master/src/asset_class.py": {
        "AssetClass.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "target_percentage": [
                    "float"
                ]
            }
        },
        "AssetClass.__eq__": {
            "name": "__eq__",
            "location": 28,
            "return": [
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "AbstractSet",
                    "AbstractSet[T]",
                    "static_frame.core.util.UFunc"
                ]
            }
        },
        "AssetClass.__repr__": {
            "name": "__repr__",
            "location": 33,
            "return": [
                "str",
                "int",
                "dict",
                "Tuple[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClass.get_name": {
            "name": "get_name",
            "location": 36,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClass.get_target_percentage": {
            "name": "get_target_percentage",
            "location": 39,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClass.get_securities": {
            "name": "get_securities",
            "location": 42,
            "return": [
                "str",
                "list",
                "bool",
                "List[Dict[str, Any]]",
                "frozenset",
                "Optional[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClass.get_holdings": {
            "name": "get_holdings",
            "location": 48,
            "return": [
                "str",
                "list",
                "bool",
                "List[Dict[str, Any]]",
                "frozenset",
                "Optional[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClass.get_purchase_buffer": {
            "name": "get_purchase_buffer",
            "location": 54,
            "return": [
                "Sequence[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClass.get_value": {
            "name": "get_value",
            "location": 61,
            "return": [
                "bool",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClass.set_target_percentage": {
            "name": "set_target_percentage",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "target_percentage": [
                    "int",
                    "str",
                    "float",
                    "Iterator"
                ]
            }
        },
        "AssetClass.to_dict": {
            "name": "to_dict",
            "location": 67,
            "return": [
                "str",
                "bytes",
                "bool",
                "Sequence[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClass.get_security": {
            "name": "get_security",
            "location": 81,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "security_id": [
                    "str",
                    "int"
                ]
            }
        },
        "AssetClass.get_holding": {
            "name": "get_holding",
            "location": 93,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "security_id": [
                    "int",
                    "str"
                ]
            }
        },
        "AssetClass.get_num_shares": {
            "name": "get_num_shares",
            "location": 103,
            "return": [
                "tuple",
                "Optional[int]",
                "Optional[Dict[str, Any]]",
                "float",
                "str",
                "static_frame.core.util.PathSpecifier"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClass.get_dividends": {
            "name": "get_dividends",
            "location": 109,
            "return": [
                "int",
                "str",
                "Hashable",
                "Dict[str, Tuple[str, str]]",
                "Dict[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClass.get_cost": {
            "name": "get_cost",
            "location": 116,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClass.get_return": {
            "name": "get_return",
            "location": 127,
            "return": [
                "str",
                "bool",
                "Optional[int]",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClass.contains_security": {
            "name": "contains_security",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "security_id": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "AssetClass.contains_holding": {
            "name": "contains_holding",
            "location": 144,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "security_id": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "AssetClass.add_security": {
            "name": "add_security",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "security": [
                    "src.security.Security",
                    "src.holding.Holding",
                    "str",
                    "dict"
                ]
            }
        },
        "AssetClass.add_holding": {
            "name": "add_holding",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "holding": [
                    "src.holding.Holding",
                    "src.security.Security",
                    "str",
                    "dict"
                ]
            }
        },
        "AssetClass.update_security": {
            "name": "update_security",
            "location": 190,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "security_id": [
                    "str"
                ],
                "symbol": [
                    "str",
                    "Union[dict, str]"
                ],
                "name": [
                    "str"
                ],
                "price": [
                    "float",
                    "str",
                    "Union[Literal, str]",
                    "Optional[str]"
                ]
            }
        },
        "AssetClass.update_holding": {
            "name": "update_holding",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "security_id": [
                    "Sequence[int]",
                    "int"
                ],
                "num_shares": [
                    "int",
                    "float",
                    "Dict[int, dict]",
                    "str"
                ],
                "average_buy_price": [
                    "int",
                    "float"
                ],
                "dividends": [
                    "int",
                    "bool",
                    "list",
                    "Optional[int]",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "AssetClass.buy": {
            "name": "buy",
            "location": 229,
            "return": [
                "Callable"
            ],
            "arguments": {
                "self": [],
                "security": [
                    "src.security.Security",
                    "List[float]",
                    "Optional[float]"
                ],
                "num_shares": [
                    "int",
                    "float"
                ],
                "online": [
                    "bool",
                    "int",
                    "Iterable[T]",
                    "Sequence[str]",
                    "float"
                ]
            }
        },
        "AssetClass.plan_purchases": {
            "name": "plan_purchases",
            "location": 274,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "bool",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "budget": [
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "Hanna-master/src/deposit.py": {
        "Deposit.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deposit.__eq__": {
            "name": "__eq__",
            "location": 21,
            "return": [
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Deposit.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [
                "str",
                "int",
                "dict",
                "Tuple[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deposit.get_total": {
            "name": "get_total",
            "location": 29,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deposit.get_num_shares": {
            "name": "get_num_shares",
            "location": 32,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deposit.get_purchases": {
            "name": "get_purchases",
            "location": 35,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deposit.get_involved_asset_classes": {
            "name": "get_involved_asset_classes",
            "location": 38,
            "return": [
                "str",
                "Sequence[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deposit.to_dict": {
            "name": "to_dict",
            "location": 41,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deposit.for_display": {
            "name": "for_display",
            "location": 48,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deposit.add_purchase": {
            "name": "add_purchase",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "asset_class_name": [
                    "str",
                    "Optional[str]"
                ],
                "purchase": [
                    "str",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "Deposit.involves_asset_class": {
            "name": "involves_asset_class",
            "location": 100,
            "return": [
                "bool",
                "Callable",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "asset_class_name": [
                    "str",
                    "Callable"
                ]
            }
        },
        "Deposit.get_purchases_for_asset_class": {
            "name": "get_purchases_for_asset_class",
            "location": 107,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "Sequence[str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "asset_class_name": [
                    "str"
                ]
            }
        },
        "Deposit.get_asset_class_expenditures": {
            "name": "get_asset_class_expenditures",
            "location": 120,
            "return": [
                "List[str]",
                "list",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "asset_class_name": [
                    "str",
                    "allennlp.common.util.JsonDict"
                ]
            }
        }
    },
    "Hanna-master/src/holding.py": {
        "Holding.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "security": [
                    "List[int]",
                    "Union[None, bytes]",
                    "int"
                ],
                "num_shares": [
                    "int"
                ],
                "average_buy_price": [
                    "float",
                    "int"
                ],
                "dividends": [
                    "float",
                    "int",
                    "Union[float, int]"
                ]
            }
        },
        "Holding.__eq__": {
            "name": "__eq__",
            "location": 33,
            "return": [
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Holding.__repr__": {
            "name": "__repr__",
            "location": 38,
            "return": [
                "str",
                "int",
                "dict",
                "Tuple[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Holding.get_security": {
            "name": "get_security",
            "location": 41,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Holding.get_num_shares": {
            "name": "get_num_shares",
            "location": 44,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Holding.get_average_buy_price": {
            "name": "get_average_buy_price",
            "location": 47,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Holding.get_dividends": {
            "name": "get_dividends",
            "location": 50,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Holding.get_value": {
            "name": "get_value",
            "location": 53,
            "return": [
                "str",
                "type",
                "List[Tuple[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Holding.get_cost": {
            "name": "get_cost",
            "location": 62,
            "return": [
                "str",
                "int",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Holding.get_return": {
            "name": "get_return",
            "location": 67,
            "return": [
                "str",
                "bool",
                "Optional[int]",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Holding.set_num_shares": {
            "name": "set_num_shares",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_shares": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Holding.set_average_buy_price": {
            "name": "set_average_buy_price",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "average_buy_price": [
                    "bool",
                    "float"
                ]
            }
        },
        "Holding.set_dividends": {
            "name": "set_dividends",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dividends": [
                    "bool",
                    "float"
                ]
            }
        },
        "Holding.to_dict": {
            "name": "to_dict",
            "location": 89,
            "return": [
                "int",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Hanna-master/src/portfolio.py": {
        "Portfolio.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Portfolio.load_configuration": {
            "name": "load_configuration",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "portfolio_config": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "Portfolio.__eq__": {
            "name": "__eq__",
            "location": 96,
            "return": [
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Portfolio.__repr__": {
            "name": "__repr__",
            "location": 101,
            "return": [
                "str",
                "int",
                "dict",
                "Tuple[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Portfolio.get_asset_class_names": {
            "name": "get_asset_class_names",
            "location": 104,
            "return": [
                "Callable[[str], None]",
                "NamedTuple",
                "str",
                "util.photolib.contentfiles.Contentfile",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Portfolio.get_asset_classes": {
            "name": "get_asset_classes",
            "location": 107,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Portfolio.get_cash": {
            "name": "get_cash",
            "location": 110,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Portfolio.get_value": {
            "name": "get_value",
            "location": 113,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Portfolio.get_num_shares": {
            "name": "get_num_shares",
            "location": 118,
            "return": [
                "tuple",
                "Optional[int]",
                "Optional[Dict[str, Any]]",
                "float",
                "str",
                "static_frame.core.util.PathSpecifier"
            ],
            "arguments": {
                "self": []
            }
        },
        "Portfolio.set_cash": {
            "name": "set_cash",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "float",
                    "Union[str, float]"
                ]
            }
        },
        "Portfolio.add_asset_class": {
            "name": "add_asset_class",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "asset_class": [
                    "bool",
                    "Optional[Union[Any, str]]",
                    "Dict[str, Any]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Portfolio.to_dict": {
            "name": "to_dict",
            "location": 127,
            "return": [
                "float",
                "Optional[Dict[str, str]]",
                "Dict[str, Any]",
                "Callable[..., None]",
                "str",
                "\"Person\""
            ],
            "arguments": {
                "self": []
            }
        },
        "Portfolio.for_display": {
            "name": "for_display",
            "location": 134,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Portfolio.get_all_security_ids": {
            "name": "get_all_security_ids",
            "location": 261,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Portfolio.get_all_security_symbols": {
            "name": "get_all_security_symbols",
            "location": 272,
            "return": [
                "Optional[str]",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Portfolio.get_cost": {
            "name": "get_cost",
            "location": 283,
            "return": [
                "int",
                "Callable[[], bool]",
                "List[Dict[str, str]]",
                "Dict[str, Tuple[str, str]]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Portfolio.get_dividends": {
            "name": "get_dividends",
            "location": 292,
            "return": [
                "int",
                "str",
                "Hashable",
                "Dict[str, Tuple[str, str]]",
                "Dict[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Portfolio.get_return": {
            "name": "get_return",
            "location": 299,
            "return": [
                "str",
                "bool",
                "Optional[int]",
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Portfolio.contains_asset_class": {
            "name": "contains_asset_class",
            "location": 309,
            "return": [
                "Tuple[str]",
                "bool",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "asset_class_name": [
                    "str"
                ]
            }
        },
        "Portfolio.contains_security": {
            "name": "contains_security",
            "location": 316,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "security_id": [
                    "str",
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "Portfolio.get_asset_class": {
            "name": "get_asset_class",
            "location": 327,
            "return": [
                "str",
                "Optional[str]",
                "Sequence[Tuple[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "asset_class_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Portfolio.get_asset_class_for_security": {
            "name": "get_asset_class_for_security",
            "location": 339,
            "return": [
                "str",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "security_id": [
                    "str",
                    "int"
                ]
            }
        },
        "Portfolio.get_asset_class_value": {
            "name": "get_asset_class_value",
            "location": 348,
            "return": [
                "Type",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "asset_class_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Portfolio.get_cash_percentage": {
            "name": "get_cash_percentage",
            "location": 354,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Portfolio.get_asset_class_percentage": {
            "name": "get_asset_class_percentage",
            "location": 364,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "asset_class_name": [
                    "str",
                    "int",
                    "float",
                    "bytes"
                ]
            }
        },
        "Portfolio.get_security_value": {
            "name": "get_security_value",
            "location": 376,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "security_id": []
            }
        },
        "Portfolio.get_security_percentage": {
            "name": "get_security_percentage",
            "location": 383,
            "return": [
                "Optional[str]",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "security_id": [
                    "int",
                    "Iterable[str]",
                    "bytes",
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Optional[int]"
                ]
            }
        },
        "Portfolio.get_asset_class_target_value": {
            "name": "get_asset_class_target_value",
            "location": 390,
            "return": [
                "Optional[List[str]]",
                "Union[None, str, int]",
                "str",
                "Optional[str]",
                "int",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "asset_class_name": [
                    "Optional[str]",
                    "list"
                ],
                "portfolio_value": [
                    "float",
                    "Callable",
                    "Optional[Callable[[Any], None]]",
                    "Optional[str]",
                    "Callable[[Dict], None]",
                    "str"
                ]
            }
        },
        "Portfolio.get_asset_class_target_deviation": {
            "name": "get_asset_class_target_deviation",
            "location": 399,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "asset_class_name": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "portfolio_value": [
                    "float",
                    "Tuple[int, int, int]",
                    "str",
                    "int",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "Portfolio.get_asset_class_budgets": {
            "name": "get_asset_class_budgets",
            "location": 412,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "deposit_amount": [
                    "float",
                    "Sequence[Union[str, Any]]",
                    "Optional[int]",
                    "Iterable[Any]"
                ]
            }
        },
        "Portfolio.refresh": {
            "name": "refresh",
            "location": 439,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "online": [
                    "bool",
                    "Mapping[str, Any]",
                    "dict"
                ],
                "logging": [
                    "bool",
                    "Mapping[str, Any]",
                    "dict"
                ]
            }
        },
        "Portfolio.update": {
            "name": "update",
            "location": 461,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "account_profile": [
                    "src.api.AccountProfile",
                    "Dict[str, Any]",
                    "float",
                    "Sequence[Union[str, Any]]"
                ],
                "securities": [
                    "Dict[str, src.api.DividendInfo]",
                    "Dict[str, src.api.SecurityInfo]",
                    "Dict[str, src.api.HoldingInfo]",
                    "duniterpy.api.clienClient",
                    "str",
                    "int"
                ],
                "holdings": [
                    "Dict[str, src.api.HoldingInfo]",
                    "Dict[str, src.api.DividendInfo]",
                    "Dict[str, src.api.SecurityInfo]",
                    "str",
                    "duniterpy.api.clienClient"
                ],
                "dividends": [
                    "Dict[str, src.api.DividendInfo]",
                    "Dict[str, src.api.SecurityInfo]",
                    "Dict[str, src.api.HoldingInfo]",
                    "duniterpy.api.clienClient",
                    "str",
                    "int"
                ]
            }
        },
        "Portfolio.plan_deposit": {
            "name": "plan_deposit",
            "location": 504,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Portfolio.make_deposit": {
            "name": "make_deposit",
            "location": 536,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "deposit": [
                    "str",
                    "bool"
                ],
                "online": [
                    "bool",
                    "str",
                    "Type",
                    "Optional[str]"
                ]
            }
        }
    },
    "Hanna-master/src/purchase.py": {
        "Purchase.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "security": [
                    "int",
                    "src.security.Security",
                    "Union[str, int]",
                    "dict",
                    "Dict[str, int]",
                    "float"
                ],
                "num_shares": [
                    "int"
                ]
            }
        },
        "Purchase.__eq__": {
            "name": "__eq__",
            "location": 28,
            "return": [
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Purchase.__repr__": {
            "name": "__repr__",
            "location": 33,
            "return": [
                "str",
                "int",
                "dict",
                "Tuple[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Purchase.get_security": {
            "name": "get_security",
            "location": 36,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Purchase.get_num_shares": {
            "name": "get_num_shares",
            "location": 39,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Purchase.get_cost": {
            "name": "get_cost",
            "location": 42,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Purchase.add_shares": {
            "name": "add_shares",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_shares": [
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "Purchase.to_dict": {
            "name": "to_dict",
            "location": 55,
            "return": [
                "int",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Hanna-master/src/security.py": {
        "Security.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "security_id": [
                    "str",
                    "int"
                ],
                "symbol": [
                    "Optional[str]",
                    "str"
                ],
                "name": [
                    "Optional[str]"
                ],
                "price": [
                    "Optional[float]",
                    "Optional[str]"
                ],
                "buy_restricted": [
                    "int",
                    "Sequence[Sequence[int]]"
                ]
            }
        },
        "Security.__eq__": {
            "name": "__eq__",
            "location": 33,
            "return": [
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Security.__repr__": {
            "name": "__repr__",
            "location": 38,
            "return": [
                "str",
                "int",
                "dict",
                "Tuple[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Security.get_id": {
            "name": "get_id",
            "location": 41,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Security.get_symbol": {
            "name": "get_symbol",
            "location": 44,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Security.get_name": {
            "name": "get_name",
            "location": 47,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Security.get_price": {
            "name": "get_price",
            "location": 50,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Security.get_purchase_buffer": {
            "name": "get_purchase_buffer",
            "location": 53,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Security.get_buy_restricted": {
            "name": "get_buy_restricted",
            "location": 56,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Security.set_name": {
            "name": "set_name",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Security.set_symbol": {
            "name": "set_symbol",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "symbol": [
                    "str",
                    "int",
                    "Callable[[dict], None]"
                ]
            }
        },
        "Security.set_price": {
            "name": "set_price",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "price": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Security.restrict_buy": {
            "name": "restrict_buy",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Security.enable_buy": {
            "name": "enable_buy",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Security.to_dict": {
            "name": "to_dict",
            "location": 77,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Security.with_cents": {
            "name": "with_cents",
            "location": 87,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Hanna-master/src/util.py": {
        "dollar_str": {
            "name": "dollar_str",
            "location": 11,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "amt": [
                    "float",
                    "Tuple[int, int]",
                    "str",
                    "int"
                ]
            }
        },
        "pct_str": {
            "name": "pct_str",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "pct": [
                    "float",
                    "Tuple[int, int]",
                    "str",
                    "int"
                ]
            }
        },
        "latency_str": {
            "name": "latency_str",
            "location": 25,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "start": [
                    "datetime.datetime",
                    "float"
                ],
                "end": [
                    "datetime.datetime",
                    "float"
                ]
            }
        },
        "difference_in_millis": {
            "name": "difference_in_millis",
            "location": 33,
            "return": [
                "Iterator",
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "start": [
                    "datetime.datetime",
                    "int",
                    "float",
                    "datetime.timedelta"
                ],
                "end": [
                    "datetime.datetime",
                    "int",
                    "float",
                    "datetime.timedelta"
                ]
            }
        },
        "latest_ds": {
            "name": "latest_ds",
            "location": 51,
            "return": [
                "str",
                "bool",
                "Type[Exception]"
            ],
            "arguments": {
                "base_path": [
                    "str"
                ]
            }
        }
    },
    "Hanna-master/src/__init__.py": {},
    "Hanna-master/test/asset_class.py": {
        "AssetClassTest.test_inequality": {
            "name": "test_inequality",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClassTest.test_equality": {
            "name": "test_equality",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClassTest.test_get_purchase_buffer_new": {
            "name": "test_get_purchase_buffer_new",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClassTest.test_get_purchase_buffer_update": {
            "name": "test_get_purchase_buffer_update",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClassTest.test_get_security_exists": {
            "name": "test_get_security_exists",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClassTest.test_get_security_not_exists": {
            "name": "test_get_security_not_exists",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClassTest.test_get_holding_exists": {
            "name": "test_get_holding_exists",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClassTest.test_get_holding_not_exists": {
            "name": "test_get_holding_not_exists",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClassTest.test_get_num_shares": {
            "name": "test_get_num_shares",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClassTest.test_get_cost": {
            "name": "test_get_cost",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClassTest.test_get_return_zero": {
            "name": "test_get_return_zero",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClassTest.test_get_return_positive": {
            "name": "test_get_return_positive",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClassTest.test_get_return_negative": {
            "name": "test_get_return_negative",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClassTest.test_get_dividends": {
            "name": "test_get_dividends",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClassTest.test_contains_security_false": {
            "name": "test_contains_security_false",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClassTest.test_contains_security_true": {
            "name": "test_contains_security_true",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClassTest.test_contains_holding_false": {
            "name": "test_contains_holding_false",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClassTest.test_contains_holding_true": {
            "name": "test_contains_holding_true",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClassTest.test_get_value": {
            "name": "test_get_value",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClassTest.test_add_security_exists": {
            "name": "test_add_security_exists",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClassTest.test_add_security_not_exists": {
            "name": "test_add_security_not_exists",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClassTest.test_add_holding_hs_hh": {
            "name": "test_add_holding_hs_hh",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClassTest.test_add_holding_not_hs_hh": {
            "name": "test_add_holding_not_hs_hh",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClassTest.test_add_holding_hs_not_hh": {
            "name": "test_add_holding_hs_not_hh",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClassTest.test_add_holding_not_hs_not_hh": {
            "name": "test_add_holding_not_hs_not_hh",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClassTest.test_update_security": {
            "name": "test_update_security",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClassTest.test_update_holding": {
            "name": "test_update_holding",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClassTest.test_buy_new": {
            "name": "test_buy_new",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClassTest.test_buy_update": {
            "name": "test_buy_update",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClassTest.test_plan_purchases_knapsack_test_1": {
            "name": "test_plan_purchases_knapsack_test_1",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClassTest.test_plan_purchases_knapsack_test_2": {
            "name": "test_plan_purchases_knapsack_test_2",
            "location": 238,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AssetClassTest.test_plan_purchases_buy_restricted_test_1": {
            "name": "test_plan_purchases_buy_restricted_test_1",
            "location": 247,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Hanna-master/test/deposit.py": {
        "DepositTest.test_inequality": {
            "name": "test_inequality",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DepositTest.test_equality": {
            "name": "test_equality",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DepositTest.test_add_purchase": {
            "name": "test_add_purchase",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DepositTest.test_involves_asset_class_false": {
            "name": "test_involves_asset_class_false",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DepositTest.test_involves_asset_class_true": {
            "name": "test_involves_asset_class_true",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DepositTest.test_get_purchases_for_asset_class": {
            "name": "test_get_purchases_for_asset_class",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DepositTest.test_get_asset_class_expenditures": {
            "name": "test_get_asset_class_expenditures",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Hanna-master/test/holding.py": {
        "HoldingTest.test_inequality": {
            "name": "test_inequality",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HoldingTest.test_equality": {
            "name": "test_equality",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HoldingTest.test_init_negative_num_shares": {
            "name": "test_init_negative_num_shares",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HoldingTest.test_get_dividends": {
            "name": "test_get_dividends",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HoldingTest.test_get_cost": {
            "name": "test_get_cost",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HoldingTest.test_get_return": {
            "name": "test_get_return",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HoldingTest.test_get_return_with_dividends": {
            "name": "test_get_return_with_dividends",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Hanna-master/test/onboard.py": {
        "OnboardTest.test_ask_security": {
            "name": "test_ask_security",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "OnboardTest.test_ask_confirm_security_y": {
            "name": "test_ask_confirm_security_y",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "OnboardTest.test_ask_confirm_security_Y": {
            "name": "test_ask_confirm_security_Y",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "OnboardTest.test_ask_confirm_security_blank": {
            "name": "test_ask_confirm_security_blank",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "OnboardTest.test_ask_confirm_security_n": {
            "name": "test_ask_confirm_security_n",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ]
            }
        },
        "OnboardTest.test_ask_confirm_security_N": {
            "name": "test_ask_confirm_security_N",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str"
                ]
            }
        },
        "OnboardTest.test_ask_allow_purchase_y": {
            "name": "test_ask_allow_purchase_y",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": []
            }
        },
        "OnboardTest.test_ask_allow_purchase_Y": {
            "name": "test_ask_allow_purchase_Y",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": []
            }
        },
        "OnboardTest.test_ask_allow_purchase_blank": {
            "name": "test_ask_allow_purchase_blank",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": []
            }
        },
        "OnboardTest.test_ask_allow_purchase_n": {
            "name": "test_ask_allow_purchase_n",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": []
            }
        },
        "OnboardTest.test_ask_allow_purchase_N": {
            "name": "test_ask_allow_purchase_N",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": []
            }
        },
        "OnboardTest.test_ask_asset_class_name": {
            "name": "test_ask_asset_class_name",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": []
            }
        },
        "OnboardTest.test_ask_target_pct": {
            "name": "test_ask_target_pct",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "Hanna-master/test/portfolio.py": {
        "PortfolioTest.test_add_asset_class": {
            "name": "test_add_asset_class",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTest.test_inequality": {
            "name": "test_inequality",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTest.test_equality": {
            "name": "test_equality",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTest.test_load_configuration_basic": {
            "name": "test_load_configuration_basic",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTest.test_load_configuration_idempotent": {
            "name": "test_load_configuration_idempotent",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTest.test_load_configuration_add": {
            "name": "test_load_configuration_add",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTest.test_get_all_security_symbols": {
            "name": "test_get_all_security_symbols",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTest.test_get_cost": {
            "name": "test_get_cost",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTest.get_dividends": {
            "name": "get_dividends",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTest.test_get_return": {
            "name": "test_get_return",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTest.test_contains_asset_class_false": {
            "name": "test_contains_asset_class_false",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTest.test_contains_asset_class_true": {
            "name": "test_contains_asset_class_true",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTest.test_get_asset_class_names": {
            "name": "test_get_asset_class_names",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTest.test_contains_security_false": {
            "name": "test_contains_security_false",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTest.test_contains_security_true": {
            "name": "test_contains_security_true",
            "location": 221,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTest.test_get_asset_class_for_security": {
            "name": "test_get_asset_class_for_security",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTest.test_get_asset_class_value": {
            "name": "test_get_asset_class_value",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTest.test_get_asset_class_percentage": {
            "name": "test_get_asset_class_percentage",
            "location": 247,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTest.test_get_security_value": {
            "name": "test_get_security_value",
            "location": 261,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTest.test_get_security_percentage": {
            "name": "test_get_security_percentage",
            "location": 270,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTest.test_get_asset_class_target_value": {
            "name": "test_get_asset_class_target_value",
            "location": 279,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTest.test_get_asset_class_target_deviation": {
            "name": "test_get_asset_class_target_deviation",
            "location": 294,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTest.test_get_asset_class_budgets": {
            "name": "test_get_asset_class_budgets",
            "location": 311,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTest.test_update_basic": {
            "name": "test_update_basic",
            "location": 326,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTest.test_update_idempotent": {
            "name": "test_update_idempotent",
            "location": 359,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTest.test_plan_deposit_restrict_budget": {
            "name": "test_plan_deposit_restrict_budget",
            "location": 384,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTest.test_plan_deposit": {
            "name": "test_plan_deposit",
            "location": 396,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PortfolioTest.test_make_deposit": {
            "name": "test_make_deposit",
            "location": 416,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Hanna-master/test/purchase.py": {
        "PurchaseTest.test_inequality": {
            "name": "test_inequality",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PurchaseTest.test_equality": {
            "name": "test_equality",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PurchaseTest.test_init_security_null_price": {
            "name": "test_init_security_null_price",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PurchaseTest.test_init_zero_shares": {
            "name": "test_init_zero_shares",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Hanna-master/test/security.py": {
        "SecurityTest.test_init_negative_price": {
            "name": "test_init_negative_price",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityTest.test_inequality": {
            "name": "test_inequality",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityTest.test_equality": {
            "name": "test_equality",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityTest.test_to_dict_with_nones": {
            "name": "test_to_dict_with_nones",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityTest.test_set_price_first_time": {
            "name": "test_set_price_first_time",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityTest.test_set_price_update": {
            "name": "test_set_price_update",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityTest.test_restrict_buy": {
            "name": "test_restrict_buy",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityTest.test_enable_buy": {
            "name": "test_enable_buy",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SecurityTest.test_with_cents": {
            "name": "test_with_cents",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Hanna-master/test/util.py": {
        "UtilTest.test_dollar_str": {
            "name": "test_dollar_str",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilTest.test_pct_str": {
            "name": "test_pct_str",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilTest.test_difference_in_millis": {
            "name": "test_difference_in_millis",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilTest.test_latency_str": {
            "name": "test_latency_str",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Hanna-master/test/__init__.py": {}
}
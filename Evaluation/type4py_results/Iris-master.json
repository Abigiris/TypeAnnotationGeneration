{
    "Iris-master/main.py": {
        "main": {
            "name": "main",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "iris_config": [
                    "bool",
                    "List[str]",
                    "str",
                    "Optional[int]"
                ]
            }
        }
    },
    "Iris-master/setup.py": {},
    "Iris-master/iris/run.py": {
        "run_iris": {
            "name": "run_iris",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "logger": [
                    "logging.Logger",
                    "str",
                    "logging.Handler",
                    "bool"
                ],
                "iris_config": [
                    "str",
                    "dict"
                ]
            }
        },
        "ChildProcess.__post_init__": {
            "name": "__post_init__",
            "location": 254,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChildProcess.is_alive": {
            "name": "is_alive",
            "location": 263,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChildProcess.get_exit_code": {
            "name": "get_exit_code",
            "location": 271,
            "return": [
                "int",
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChildProcess.log_terminate": {
            "name": "log_terminate",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Iris-master/iris/__init__.py": {},
    "Iris-master/iris/config_service/configs.py": {
        "GlobalConfig.__post_init__": {
            "name": "__post_init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GlobalConfig.__str__": {
            "name": "__str__",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Metric.__post_init__": {
            "name": "__post_init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Metric.__str__": {
            "name": "__str__",
            "location": 100,
            "return": [
                "str",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Metric.to_json": {
            "name": "to_json",
            "location": 109,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.__post_init__": {
            "name": "__post_init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Profile.__str__": {
            "name": "__str__",
            "location": 142,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Iris-master/iris/config_service/run.py": {
        "run_config_service": {
            "name": "run_config_service",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "aws_creds_path": [
                    "str",
                    "int",
                    "List[Tuple[str, str]]"
                ],
                "s3_region_name": [
                    "str",
                    "int",
                    "List[Tuple[str, str]]"
                ],
                "s3_bucket_env": [
                    "str",
                    "int",
                    "List[Tuple[str, str]]"
                ],
                "s3_bucket_name": [
                    "str"
                ],
                "s3_download_to_path": [
                    "str"
                ],
                "ec2_region_name": [
                    "str",
                    "Tuple[str]",
                    "Optional[str]"
                ],
                "ec2_dev_instance_id": [
                    "str",
                    "Tuple[str]",
                    "Optional[str]"
                ],
                "ec2_metadata_url": [
                    "str",
                    "Tuple[str]",
                    "Optional[str]"
                ],
                "local_config_path": [
                    "str"
                ],
                "prom_dir_path": [
                    "str"
                ],
                "run_frequency": [
                    "float",
                    "Tuple[int, int, int]",
                    "str"
                ],
                "log_path": [
                    "str"
                ],
                "log_debug_path": [
                    "str"
                ],
                "dev_mode": [
                    "str",
                    "int",
                    "List[Tuple[str, str]]"
                ]
            }
        }
    },
    "Iris-master/iris/config_service/__init__.py": {},
    "Iris-master/iris/config_service/aws/ec2_tags.py": {
        "EC2Tags.__post_init__": {
            "name": "__post_init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "EC2Tags.get_iris_tags": {
            "name": "get_iris_tags",
            "location": 50,
            "return": [
                "str",
                "List[cmk.gui.plugins.views.utils.Cell]",
                "List[cmk.gui.plugins.views.utils.JoinCell]",
                "Tuple[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "EC2Tags._extract_iris_tags": {
            "name": "_extract_iris_tags",
            "location": 88,
            "return": [
                "str",
                "Tuple[str]",
                "Set[str]",
                "dict",
                "List[cmk.gui.plugins.views.utils.Cell]",
                "List[cmk.gui.plugins.views.utils.JoinCell]",
                "Dict[str, Any]",
                "Callable[[str], str]"
            ],
            "arguments": {
                "self": [],
                "instance_tags": [
                    "list",
                    "Type[Exception]",
                    "Dict[str, Any]",
                    "str",
                    "Iterable[str]",
                    "List[str]"
                ]
            }
        },
        "EC2Tags._request_instance_id": {
            "name": "_request_instance_id",
            "location": 110,
            "return": [
                "str",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.Item",
                "cmk.utils.type_defs.CheckPluginName.Str",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Iris-master/iris/config_service/aws/s3.py": {
        "S3.__post_init__": {
            "name": "__post_init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "S3.download_bucket": {
            "name": "download_bucket",
            "location": 45,
            "return": [
                "str",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "download_path": [
                    "str",
                    "dict"
                ]
            }
        },
        "S3.upload_object": {
            "name": "upload_object",
            "location": 74,
            "return": [
                "str",
                "Optional[str]",
                "bytes",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "upload_file_path": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "S3.upload_directory": {
            "name": "upload_directory",
            "location": 90,
            "return": [
                "str",
                "List[str]",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": [],
                "upload_dir_path": [
                    "str"
                ]
            }
        },
        "S3._create_object_key": {
            "name": "_create_object_key",
            "location": 115,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "dir_path": [
                    "str"
                ],
                "upload_dir_path": [
                    "str"
                ],
                "object_file": [
                    "str"
                ]
            }
        }
    },
    "Iris-master/iris/config_service/aws/__init__.py": {},
    "Iris-master/iris/config_service/config_lint/linter.py": {
        "Linter.lint_global_config": {
            "name": "lint_global_config",
            "location": 19,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "global_config_path": [
                    "str",
                    "Tuple[str, str, str]"
                ]
            }
        },
        "Linter.lint_metrics_config": {
            "name": "lint_metrics_config",
            "location": 33,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "global_config": [
                    "str",
                    "dict",
                    "int"
                ],
                "metrics_config_path": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Linter.lint_profile_configs": {
            "name": "lint_profile_configs",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "profile_configs_path": [
                    "str",
                    "bytes"
                ]
            }
        },
        "Linter._json_to_global": {
            "name": "_json_to_global",
            "location": 72,
            "return": [
                "bool",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "global_config_json": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "Linter._json_to_metric": {
            "name": "_json_to_metric",
            "location": 86,
            "return": [
                "str",
                "dict",
                "Callable[[str], None]"
            ],
            "arguments": {
                "self": [],
                "global_config": [
                    "str",
                    "iris.config_service.configs.GlobalConfig",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "metric_name": [
                    "str",
                    "iris.config_service.configs.GlobalConfig",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "metric_body": [
                    "str",
                    "iris.config_service.configs.GlobalConfig",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "Linter._json_to_profile": {
            "name": "_json_to_profile",
            "location": 105,
            "return": [
                "int",
                "dict",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "profile_configs_path": [
                    "str",
                    "Optional[str]",
                    "Optional[List]"
                ]
            }
        },
        "Linter._detect_mismatch_profilename_filename": {
            "name": "_detect_mismatch_profilename_filename",
            "location": 115,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "profiles": [
                    "Dict[str, iris.config_service.configs.Profile]",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, float]",
                    "Dict[str, bool]",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "Iris-master/iris/config_service/config_lint/__init__.py": {},
    "Iris-master/iris/garbage_collector/garbage_collector.py": {
        "GarbageCollector.delete_stale_prom_files": {
            "name": "delete_stale_prom_files",
            "location": 25,
            "return": [
                "str",
                "Optional[int]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Iris-master/iris/garbage_collector/run.py": {
        "run_garbage_collector": {
            "name": "run_garbage_collector",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "global_config_path": [
                    "str"
                ],
                "local_config_path": [
                    "str"
                ],
                "prom_dir_path": [
                    "str",
                    "dict"
                ],
                "run_frequency": [
                    "float",
                    "int",
                    "Optional[str]",
                    "Tuple[int, int, int]"
                ],
                "internal_metrics_whitelist": [
                    "str",
                    "dict"
                ],
                "log_path": [
                    "str"
                ],
                "log_debug_path": [
                    "str"
                ]
            }
        }
    },
    "Iris-master/iris/garbage_collector/__init__.py": {},
    "Iris-master/iris/scheduler/run.py": {
        "run_scheduler": {
            "name": "run_scheduler",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "global_config_path": [
                    "str",
                    "int"
                ],
                "local_config_path": [
                    "str",
                    "int"
                ],
                "prom_dir_path": [
                    "str"
                ],
                "run_frequency": [
                    "float",
                    "int",
                    "Optional[str]",
                    "Tuple[int, int, int]"
                ],
                "internal_metrics_whitelist": [
                    "Tuple[str]",
                    "str",
                    "int",
                    "List[str]"
                ],
                "log_path": [
                    "str"
                ],
                "log_debug_path": [
                    "str"
                ]
            }
        }
    },
    "Iris-master/iris/scheduler/scheduler.py": {
        "MetricResult.__post_init__": {
            "name": "__post_init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricResult.get_prom_strings": {
            "name": "get_prom_strings",
            "location": 49,
            "return": [
                "str",
                "Optional[str]",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricResult.__str__": {
            "name": "__str__",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scheduler.run": {
            "name": "run",
            "location": 97,
            "return": [
                "str",
                "int",
                "Set[str]",
                "Mapping[str, int]",
                "bool",
                "\"Parameter\""
            ],
            "arguments": {
                "self": []
            }
        },
        "Scheduler.get_prom_files_to_write": {
            "name": "get_prom_files_to_write",
            "location": 113,
            "return": [
                "int",
                "Dict[str, str]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Iris-master/iris/scheduler/__init__.py": {},
    "Iris-master/iris/utils/iris_logging.py": {
        "get_logger": {
            "name": "get_logger",
            "location": 5,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "log_file_path": [
                    "str",
                    "IO"
                ],
                "log_debug_file_path": [
                    "str"
                ]
            }
        }
    },
    "Iris-master/iris/utils/main_helpers.py": {
        "check_iris_dev_settings": {
            "name": "check_iris_dev_settings",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "iris_config": [
                    "str",
                    "Dict[str, Any]"
                ],
                "logger": [
                    "logging.Logger",
                    "dict",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "Iris-master/iris/utils/prom_helpers.py": {
        "PromStrBuilder.__post_init__": {
            "name": "__post_init__",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PromStrBuilder.create_prom_string": {
            "name": "create_prom_string",
            "location": 42,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PromStrBuilder.create_labels_string": {
            "name": "create_labels_string",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PromFileWriter.write_prom_file": {
            "name": "write_prom_file",
            "location": 77,
            "return": [
                "str",
                "Optional[Tuple[str, str]]",
                "Optional[str]",
                "list"
            ],
            "arguments": {
                "self": [],
                "prom_file_path": [
                    "str",
                    "logging.Logger",
                    "int",
                    "device.utilities.logger.Logger"
                ]
            }
        },
        "PromFileWriter.write_prom_file_sync_helper": {
            "name": "write_prom_file_sync_helper",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "prom_file_path": [
                    "str",
                    "List[str]",
                    "bytes"
                ],
                "prom_string": [
                    "str"
                ]
            }
        }
    },
    "Iris-master/iris/utils/util.py": {
        "read_config_file": {
            "name": "read_config_file",
            "location": 8,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "config_path": [
                    "str"
                ],
                "logger": [
                    "logging.Logger",
                    "str"
                ]
            }
        },
        "check_file_exists": {
            "name": "check_file_exists",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "file_path": [
                    "str",
                    "Set[str]"
                ],
                "file_type": [
                    "str"
                ],
                "logger": [
                    "logging.Logger",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "check_dir_exists": {
            "name": "check_dir_exists",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "dir_path": [
                    "str"
                ],
                "dir_type": [
                    "str",
                    "Optional[Union[Dict, str, int, bytes]]"
                ],
                "logger": [
                    "logging.Logger",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "detect_list_duplicates": {
            "name": "detect_list_duplicates",
            "location": 66,
            "return": [
                "int",
                "List[Type]",
                "str",
                "float"
            ],
            "arguments": {
                "items": [
                    "list",
                    "str",
                    "List[\"SqlFile\"]",
                    "dict",
                    "List[str]"
                ],
                "item_description": [],
                "logger": [
                    "logging.Logger",
                    "str",
                    "dict"
                ]
            }
        },
        "load_json_config": {
            "name": "load_json_config",
            "location": 91,
            "return": [
                "Optional[dict]",
                "dict",
                "str",
                "bool",
                "Sequence"
            ],
            "arguments": {
                "config_path": [
                    "str",
                    "logging.Logger",
                    "List[str]",
                    "Optional[str]"
                ],
                "config_type": [
                    "str",
                    "Dict[str, str]"
                ],
                "logger": [
                    "logging.Logger",
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "_detect_duplicate_json_keys": {
            "name": "_detect_duplicate_json_keys",
            "location": 113,
            "return": [
                "dict",
                "Optional[dict]",
                "str"
            ],
            "arguments": {
                "pairs": [
                    "str",
                    "List[Tuple]",
                    "Optional[List[str]]",
                    "int"
                ]
            }
        }
    },
    "Iris-master/iris/utils/__init__.py": {},
    "Iris-master/scripts/download_configs.py": {},
    "Iris-master/scripts/execute_metrics.py": {},
    "Iris-master/scripts/util.py": {
        "get_script_logger": {
            "name": "get_script_logger",
            "location": 5,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        }
    },
    "Iris-master/tests/__init__.py": {},
    "Iris-master/tests/config_service/test_ec2_tags.py": {
        "test_successful_get_tags": {
            "name": "test_successful_get_tags",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "mock_requests": [],
                "mock_boto3": []
            }
        },
        "test_get_tags_failure": {
            "name": "test_get_tags_failure",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "mock_requests": [],
                "mock_boto3": []
            }
        },
        "test_successful_request_instance_id": {
            "name": "test_successful_request_instance_id",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "mock_requests": []
            }
        },
        "test_request_instance_id_failure": {
            "name": "test_request_instance_id_failure",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "mock_requests": []
            }
        },
        "get_test_ec2_tags_instance": {
            "name": "get_test_ec2_tags_instance",
            "location": 71,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "float"
            ],
            "arguments": {
                "mock_requests": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        }
    },
    "Iris-master/tests/config_service/test_linter.py": {
        "test_lint_global_config": {
            "name": "test_lint_global_config",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lint_metrics_config": {
            "name": "test_lint_metrics_config",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_lint_profile_configs": {
            "name": "test_lint_profile_configs",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_to_metric": {
            "name": "test_json_to_metric",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_json_to_profile": {
            "name": "test_json_to_profile",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_detect_mismatch_profilename_filename": {
            "name": "test_detect_mismatch_profilename_filename",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "Iris-master/tests/config_service/test_s3.py": {
        "test_s3_download_bucket": {
            "name": "test_s3_download_bucket",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "mock_boto3": []
            }
        },
        "test_s3_upload_object": {
            "name": "test_s3_upload_object",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "mock_boto3": []
            }
        },
        "test_s3_upload_directory": {
            "name": "test_s3_upload_directory",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "mock_boto3": []
            }
        },
        "test_s3_create_object_key": {
            "name": "test_s3_create_object_key",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "get_test_s3_instance": {
            "name": "get_test_s3_instance",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "Iris-master/tests/config_service/test_util.py": {
        "test_check_file_exists": {
            "name": "test_check_file_exists",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_check_dir_exists": {
            "name": "test_check_dir_exists",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_detect_list_duplicates": {
            "name": "test_detect_list_duplicates",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_load_json_config": {
            "name": "test_load_json_config",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_detect_duplicate_json_keys": {
            "name": "test_detect_duplicate_json_keys",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "Iris-master/tests/scheduler/test_scheduler.py": {
        "test_get_prom_files_to_write": {
            "name": "test_get_prom_files_to_write",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "get_test_scheduler_instance": {
            "name": "get_test_scheduler_instance",
            "location": 72,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "global_config_path": [
                    "str"
                ],
                "local_config_path": [
                    "str",
                    "Optional[str]"
                ],
                "prom_output_path": [
                    "str",
                    "List[str]",
                    "Callable[[str], str]",
                    "Optional[str]"
                ]
            }
        }
    }
}
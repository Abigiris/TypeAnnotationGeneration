{
    "MFE-Coding-Workshop-master/src/debug.py": {},
    "MFE-Coding-Workshop-master/src/__init__.py": {},
    "MFE-Coding-Workshop-master/src/fluent_python/abc.py": {
        "Student.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "UCBMFE.showGPA": {
            "name": "showGPA",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CMUMFE.show_GPA": {
            "name": "show_GPA",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Student.showGPA": {
            "name": "showGPA",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "MFE-Coding-Workshop-master/src/fluent_python/decorator.py": {
        "identity": {
            "name": "identity",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "divide2": {
            "name": "divide2",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "multiply2": {
            "name": "multiply2",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        },
        "print_decorator": {
            "name": "print_decorator",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "print_decorator.wrapper": {
            "name": "wrapper",
            "location": 40,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {}
        }
    },
    "MFE-Coding-Workshop-master/src/fluent_python/functional_programming.py": {
        "add1": {
            "name": "add1",
            "location": 2,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "bool",
                    "List[float]"
                ]
            }
        },
        "absmax": {
            "name": "absmax",
            "location": 13,
            "return": [
                "bool",
                "pandas.DataFrame"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "is_gt_5": {
            "name": "is_gt_5",
            "location": 20,
            "return": [
                "str",
                "Union[int, float]",
                "int",
                "float"
            ],
            "arguments": {
                "x": [
                    "Dict[str, Any]",
                    "int",
                    "Sequence",
                    "T",
                    "Optional[bool]"
                ]
            }
        },
        "add_n": {
            "name": "add_n",
            "location": 31,
            "return": [
                "str",
                "Optional[str]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "List[list]",
                    "list"
                ]
            }
        },
        "add": {
            "name": "add",
            "location": 47,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "drop_none": {
            "name": "drop_none",
            "location": 65,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "df": [
                    "int",
                    "float"
                ]
            }
        },
        "fill_salary": {
            "name": "fill_salary",
            "location": 69,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "cap_score": {
            "name": "cap_score",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "df": [
                    "BaseException"
                ]
            }
        }
    },
    "MFE-Coding-Workshop-master/src/fluent_python/function_call_by.py": {
        "f": {
            "name": "f",
            "location": 3,
            "return": [
                "str",
                "int",
                "List[str]"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str",
                    "float"
                ],
                "b": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "g": {
            "name": "g",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "a": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "b": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ]
            }
        }
    },
    "MFE-Coding-Workshop-master/src/fluent_python/generator.py": {
        "even_number_generator": {
            "name": "even_number_generator",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "another_even_number_generator_bad": {
            "name": "another_even_number_generator_bad",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "another_even_number_generator_good": {
            "name": "another_even_number_generator_good",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "MFE-Coding-Workshop-master/src/fluent_python/list_comprehension.py": {},
    "MFE-Coding-Workshop-master/src/fluent_python/operator_overloading.py": {
        "Boo.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Boo.__add__": {
            "name": "__add__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "right": []
            }
        },
        "Boo.__radd__": {
            "name": "__radd__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "left": []
            }
        },
        "Boo.__len__": {
            "name": "__len__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Boo.__getitem__": {
            "name": "__getitem__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        }
    },
    "MFE-Coding-Workshop-master/src/fluent_python/variable_scope.py": {
        "foo": {
            "name": "foo",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "boo": {
            "name": "boo",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "MFE-Coding-Workshop-master/src/fluent_python/__init__.py": {},
    "MFE-Coding-Workshop-master/src/mypy_examples/mypy_example.py": {
        "add_int": {
            "name": "add_int",
            "location": 3,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "print_decorator": {
            "name": "print_decorator",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "calc_mean_GPA": {
            "name": "calc_mean_GPA",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "students": [
                    "str",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "print_decorator.wrapper": {
            "name": "wrapper",
            "location": 11,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {}
        },
        "UCBMFE.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "UCBMFE.__str__": {
            "name": "__str__",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UCBMFE.__repr__": {
            "name": "__repr__",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UCBMFE.getGPA": {
            "name": "getGPA",
            "location": 29,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CMUMFE.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "CMUMFE.__repr__": {
            "name": "__repr__",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CMUMFE.__str__": {
            "name": "__str__",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CMUMFE.getGPA": {
            "name": "getGPA",
            "location": 43,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "MFE-Coding-Workshop-master/src/mypy_examples/__init__.py": {},
    "MFE-Coding-Workshop-master/src/production_code/test_util.py": {
        "test_add": {
            "name": "test_add",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test_divide2": {
            "name": "test_divide2",
            "location": 8,
            "return": [],
            "arguments": {}
        }
    },
    "MFE-Coding-Workshop-master/src/production_code/util.py": {
        "add": {
            "name": "add",
            "location": 1,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "divide2": {
            "name": "divide2",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "float",
                    "Iterable[Iterable[float]]",
                    "list",
                    "str",
                    "T",
                    "bytes"
                ]
            }
        }
    },
    "MFE-Coding-Workshop-master/src/production_code/__init__.py": {}
}
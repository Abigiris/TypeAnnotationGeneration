{
    "Mastering-Object-Oriented-Python-Second-Edition-master/show_hierarchies.py": {},
    "Mastering-Object-Oriented-Python-Second-Edition-master/test_all.py": {
        "package_module_iter": {
            "name": "package_module_iter",
            "location": 27,
            "return": [
                "typing.Iterator[typing.Tuple[pathlib.Path, typing.Iterator[pathlib.Path]]]"
            ],
            "arguments": {
                "packages": [
                    "Iterable[pathlib.Path]",
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[Dict[str, str]]"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "pkg_mod_iter": [
                    "Iterable[Tuple[pathlib.Path, Any]]",
                    "str"
                ]
            }
        },
        "run_doctest_suite": {
            "name": "run_doctest_suite",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "pkg_mod_iter": [
                    "Iterable[Tuple[pathlib.Path, Any]]",
                    "str"
                ]
            }
        },
        "run_pytest_suite": {
            "name": "run_pytest_suite",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "pkg_mod_iter": [
                    "Iterable[Tuple[pathlib.Path, Any]]",
                    "str"
                ]
            }
        },
        "run_performance": {
            "name": "run_performance",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "pkg_mod_iter": [
                    "Iterable[Tuple[pathlib.Path, Any]]",
                    "str"
                ]
            }
        },
        "master_test_suite": {
            "name": "master_test_suite",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "pkg_mod_iter": [
                    "Iterable[Tuple[pathlib.Path, Any]]",
                    "int",
                    "Tuple[float]",
                    "float"
                ]
            }
        },
        "chap_key": {
            "name": "chap_key",
            "location": 146,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "name": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "package_module_iter.module_iter": {
            "name": "module_iter",
            "location": 37,
            "return": [
                "typing.Iterator[pathlib.Path]"
            ],
            "arguments": {
                "package": [
                    "pathlib.Path",
                    "str",
                    "int"
                ],
                "module_iter": [
                    "Iterable[pathlib.Path]",
                    "int",
                    "str",
                    "Iterable[str]"
                ]
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_1/ch01_ex1.py": {},
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_1/ch01_ex2.py": {},
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_1/ch01_ex3.py": {
        "F": {
            "name": "F",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "demo": {
            "name": "demo",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_1/ch01_ex4.py": {
        "factorial": {
            "name": "factorial",
            "location": 13,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_1/ch01_ex5.py": {},
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_10/ch10_bonus.py": {
        "card": {
            "name": "card",
            "location": 46,
            "return": [],
            "arguments": {
                "rank": [],
                "suit": []
            }
        },
        "deal_rules": {
            "name": "deal_rules",
            "location": 73,
            "return": [],
            "arguments": {
                "deck": []
            }
        },
        "simulation": {
            "name": "simulation",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "Card.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": [],
                "hard": [],
                "soft": []
            }
        },
        "Card.__str__": {
            "name": "__str__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AceCard.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": []
            }
        },
        "FaceCard.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": []
            }
        },
        "Deck.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hand.hard": {
            "name": "hard",
            "location": 62,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hand.soft": {
            "name": "soft",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hand.__repr__": {
            "name": "__repr__",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_10/ch10_ex1.py": {
        "blogx_encode": {
            "name": "blogx_encode",
            "location": 120,
            "return": [],
            "arguments": {
                "object": []
            }
        },
        "blogx_decode": {
            "name": "blogx_decode",
            "location": 155,
            "return": [],
            "arguments": {
                "some_dict": []
            }
        },
        "blog_encode": {
            "name": "blog_encode",
            "location": 287,
            "return": [],
            "arguments": {
                "object": []
            }
        },
        "blog_decode": {
            "name": "blog_decode",
            "location": 320,
            "return": [],
            "arguments": {
                "some_dict": []
            }
        },
        "rst_render": {
            "name": "rst_render",
            "location": 407,
            "return": [],
            "arguments": {
                "blog": []
            }
        },
        "blog_j_encode": {
            "name": "blog_j_encode",
            "location": 597,
            "return": [],
            "arguments": {
                "object": []
            }
        },
        "blog_j2_encode": {
            "name": "blog_j2_encode",
            "location": 711,
            "return": [],
            "arguments": {
                "object": []
            }
        },
        "Post.as_dict": {
            "name": "as_dict",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blog_x.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": [],
                "title": [],
                "posts": []
            }
        },
        "Blog_x.by_tag": {
            "name": "by_tag",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blog_x.as_dict": {
            "name": "as_dict",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blog.__init__": {
            "name": "__init__",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "title": [],
                "posts": []
            }
        },
        "Blog.underline": {
            "name": "underline",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blog.append": {
            "name": "append",
            "location": 249,
            "return": [],
            "arguments": {
                "self": [],
                "post": []
            }
        },
        "Blog.by_tag": {
            "name": "by_tag",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blog.as_dict": {
            "name": "as_dict",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Post_J._json": {
            "name": "_json",
            "location": 577,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blog_J._json": {
            "name": "_json",
            "location": 590,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_10/ch10_ex2.py": {
        "Card.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": [],
                "hard": [],
                "soft": []
            }
        },
        "Card.__str__": {
            "name": "__str__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AceCard.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": []
            }
        },
        "FaceCard.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_10/ch10_ex2a.py": {},
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_10/ch10_ex2b.py": {
        "card_representer": {
            "name": "card_representer",
            "location": 28,
            "return": [],
            "arguments": {
                "dumper": [],
                "card": []
            }
        },
        "acecard_representer": {
            "name": "acecard_representer",
            "location": 33,
            "return": [],
            "arguments": {
                "dumper": [],
                "card": []
            }
        },
        "facecard_representer": {
            "name": "facecard_representer",
            "location": 38,
            "return": [],
            "arguments": {
                "dumper": [],
                "card": []
            }
        },
        "card_constructor": {
            "name": "card_constructor",
            "location": 43,
            "return": [],
            "arguments": {
                "loader": [],
                "node": []
            }
        },
        "acecard_constructor": {
            "name": "acecard_constructor",
            "location": 49,
            "return": [],
            "arguments": {
                "loader": [],
                "node": []
            }
        },
        "facecard_constructor": {
            "name": "facecard_constructor",
            "location": 55,
            "return": [],
            "arguments": {
                "loader": [],
                "node": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_10/ch10_ex2c.py": {
        "Card2.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": [],
                "hard": [],
                "soft": []
            }
        },
        "Card2.__str__": {
            "name": "__str__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AceCard2.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": []
            }
        },
        "FaceCard2.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_10/ch10_ex3.py": {
        "Hand_bad.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "dealer_card": []
            }
        },
        "Hand_bad.append": {
            "name": "append",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "card": []
            }
        },
        "Hand_bad.__str__": {
            "name": "__str__",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hand2.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [],
            "arguments": {
                "self": [],
                "dealer_card": []
            }
        },
        "Hand2.append": {
            "name": "append",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "card": []
            }
        },
        "Hand2.__str__": {
            "name": "__str__",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hand2.__getstate__": {
            "name": "__getstate__",
            "location": 105,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hand2.__setstate__": {
            "name": "__setstate__",
            "location": 108,
            "return": [],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "RestrictedUnpickler.find_class": {
            "name": "find_class",
            "location": 138,
            "return": [],
            "arguments": {
                "self": [],
                "module": [],
                "name": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_10/ch10_ex4.py": {
        "gamestat_iter": {
            "name": "gamestat_iter",
            "location": 160,
            "return": [],
            "arguments": {
                "player": [],
                "betting": [],
                "limit": []
            }
        },
        "gamestat_rdr_iter": {
            "name": "gamestat_rdr_iter",
            "location": 197,
            "return": [],
            "arguments": {
                "source_data": []
            }
        },
        "blog_builder": {
            "name": "blog_builder",
            "location": 282,
            "return": [],
            "arguments": {
                "row": []
            }
        },
        "post_builder": {
            "name": "post_builder",
            "location": 286,
            "return": [],
            "arguments": {
                "row": []
            }
        },
        "blog_iter": {
            "name": "blog_iter",
            "location": 316,
            "return": [],
            "arguments": {
                "source": []
            }
        },
        "post_builder5": {
            "name": "post_builder5",
            "location": 365,
            "return": [],
            "arguments": {
                "row": []
            }
        },
        "blog_builder5": {
            "name": "blog_builder5",
            "location": 374,
            "return": [],
            "arguments": {
                "row": []
            }
        },
        "blog_iter2": {
            "name": "blog_iter2",
            "location": 381,
            "return": [],
            "arguments": {
                "source": []
            }
        },
        "Table.bet": {
            "name": "bet",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "game_state": [],
                "amount": []
            }
        },
        "Betting.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "stake": []
            }
        },
        "Betting.bet": {
            "name": "bet",
            "location": 48,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "game_state": []
            }
        },
        "Betting.win": {
            "name": "win",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "amount": []
            }
        },
        "Betting.loss": {
            "name": "loss",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "amount": []
            }
        },
        "Betting.push": {
            "name": "push",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Martingale_Bet.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Martingale_Bet.bet": {
            "name": "bet",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "game_state": []
            }
        },
        "Martingale_Bet.win": {
            "name": "win",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "amount": []
            }
        },
        "Martingale_Bet.loss": {
            "name": "loss",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "amount": []
            }
        },
        "Martingale_Bet.push": {
            "name": "push",
            "location": 88,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blackjack.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "play": [],
                "betting": []
            }
        },
        "Blackjack.stake": {
            "name": "stake",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blackjack.bet": {
            "name": "bet",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "game_state": [],
                "amount": []
            }
        },
        "Blackjack.play_1": {
            "name": "play_1",
            "location": 121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blackjack.until_broke_or_rounds": {
            "name": "until_broke_or_rounds",
            "location": 137,
            "return": [],
            "arguments": {
                "self": [],
                "limit": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_10/ch10_ex5.py": {
        "gamestat_record": {
            "name": "gamestat_record",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "gamestat": [],
                "metadata": [
                    "str",
                    "Callable[[str], str]"
                ]
            }
        },
        "line_iter": {
            "name": "line_iter",
            "location": 79,
            "return": [
                "typing.Iterator[builtins.str]"
            ],
            "arguments": {
                "aFile": [
                    "BinaryIO",
                    "Union[Dict[str, Any], List[Any]]",
                    "str",
                    "bytes",
                    "Optional[Dict[str, str]]"
                ],
                "metadata": [
                    "BinaryIO",
                    "Union[Dict[str, Any], List[Any]]",
                    "str",
                    "bytes",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "record_iter": {
            "name": "record_iter",
            "location": 87,
            "return": [
                "typing.Iterator[typing.Dict[builtins.str, builtins.str]]"
            ],
            "arguments": {
                "aFile": [
                    "str",
                    "List[str]",
                    "TextIO"
                ],
                "metadata": [
                    "BinaryIO",
                    "bool",
                    "str"
                ]
            }
        },
        "ebcdic_lookup": {
            "name": "ebcdic_lookup",
            "location": 153,
            "return": [
                "Optional[str]",
                "str",
                "bytes"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "fallback": [
                    "str"
                ]
            }
        },
        "alpha_decode": {
            "name": "alpha_decode",
            "location": 163,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Optional[bytes]",
                    "bytes"
                ],
                "metadata": [
                    "str",
                    "Optional[bytes]",
                    "bytes"
                ],
                "field_metadata": [
                    "pathlib.Path",
                    "bool",
                    "list",
                    "Optional[pathlib.Path]",
                    "Dict[str, List[Dict]]",
                    "List[List[dict]]"
                ]
            }
        },
        "display_decode": {
            "name": "display_decode",
            "location": 185,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Optional[bytes]",
                    "bytes"
                ],
                "metadata": [
                    "str",
                    "Optional[bytes]",
                    "bytes"
                ],
                "field_metadata": [
                    "str",
                    "int",
                    "Set[Tuple[str, str, str]]",
                    "List[str]"
                ]
            }
        },
        "comp3_decode": {
            "name": "comp3_decode",
            "location": 209,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "bool",
                    "memoryview",
                    "Type[bytes]"
                ],
                "metadata": [
                    "pathlib.Path",
                    "bool",
                    "list",
                    "Optional[pathlib.Path]",
                    "Dict[str, List[Dict]]",
                    "List[List[dict]]"
                ],
                "field_metadata": [
                    "str",
                    "int",
                    "Set[Tuple[str, str, str]]",
                    "List[str]"
                ]
            }
        },
        "alpha_encode": {
            "name": "alpha_encode",
            "location": 241,
            "return": [
                "str",
                "bytearray",
                "bytes",
                "int",
                "bool"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "float"
                ],
                "metadata": [
                    "bytes",
                    "float"
                ],
                "field_metadata": [
                    "bytes",
                    "float"
                ]
            }
        },
        "display_encode": {
            "name": "display_encode",
            "location": 265,
            "return": [
                "str",
                "bytearray",
                "bytes",
                "int",
                "bool"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "int",
                    "Tuple[int, int]"
                ],
                "metadata": [
                    "str",
                    "bytes",
                    "List[str]"
                ],
                "field_metadata": [
                    "str"
                ]
            }
        },
        "comp3_encode": {
            "name": "comp3_encode",
            "location": 294,
            "return": [
                "bool",
                "str",
                "pathlib.Path",
                "bytes"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "int",
                    "str",
                    "List[int]"
                ],
                "metadata": [
                    "pathlib.Path",
                    "bool",
                    "list",
                    "Optional[pathlib.Path]",
                    "Dict[str, List[Dict]]",
                    "List[List[dict]]"
                ],
                "field_metadata": [
                    "str",
                    "int",
                    "Set[Tuple[str, str, str]]",
                    "List[str]"
                ]
            }
        },
        "gamestat_record_comp3": {
            "name": "gamestat_record_comp3",
            "location": 376,
            "return": [
                "str"
            ],
            "arguments": {
                "gamestat": [
                    "List[Dict[str, Any]]",
                    "type",
                    "dict"
                ],
                "metadata": [
                    "List[Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "record2_iter": {
            "name": "record2_iter",
            "location": 395,
            "return": [
                "typing.Iterator[typing.Dict[builtins.str, XField]]"
            ],
            "arguments": {
                "aFile": [
                    "str",
                    "List[str]",
                    "TextIO"
                ],
                "metadata": [
                    "dict",
                    "Iterable[pathlib.Path]",
                    "pathlib.Path"
                ]
            }
        },
        "XMetadata.decode": {
            "name": "decode",
            "location": 356,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "XMetadata.encode": {
            "name": "encode",
            "location": 360,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_10/ch10_ex6.py": {
        "build_blog": {
            "name": "build_blog",
            "location": 195,
            "return": [],
            "arguments": {
                "document": []
            }
        },
        "Post_X.__post_init__": {
            "name": "__post_init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Post_X.as_dict": {
            "name": "as_dict",
            "location": 42,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Post_X.xml": {
            "name": "xml",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blog_X.__post_init__": {
            "name": "__post_init__",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blog_X.append": {
            "name": "append",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "post": []
            }
        },
        "Blog_X.by_tag": {
            "name": "by_tag",
            "location": 70,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blog_X.as_dict": {
            "name": "as_dict",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blog_X.xml": {
            "name": "xml",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blog_E.xmlelt": {
            "name": "xmlelt",
            "location": 137,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Post_E.xmlelt": {
            "name": "xmlelt",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_10/__init__.py": {},
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_11/ch11_ex1.py": {
        "Blog.__post_init__": {
            "name": "__post_init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blog.append": {
            "name": "append",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "post": []
            }
        },
        "Blog.by_tag": {
            "name": "by_tag",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_11/ch11_ex2.py": {
        "database_script": {
            "name": "database_script",
            "location": 195,
            "return": [],
            "arguments": {
                "access": []
            }
        },
        "create": {
            "name": "create",
            "location": 470,
            "return": [],
            "arguments": {
                "access": [],
                "blogs": [],
                "posts_per_blog": []
            }
        },
        "performance": {
            "name": "performance",
            "location": 484,
            "return": [],
            "arguments": {
                "cycles": []
            }
        },
        "Post.__post_init__": {
            "name": "__post_init__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blog.__post_init__": {
            "name": "__post_init__",
            "location": 48,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Blog.by_tag": {
            "name": "by_tag",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "access": []
            }
        },
        "Access.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Access.new": {
            "name": "new",
            "location": 120,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "Access.open": {
            "name": "open",
            "location": 125,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "Access.close": {
            "name": "close",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Access.sync": {
            "name": "sync",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Access.create_blog": {
            "name": "create_blog",
            "location": 139,
            "return": [],
            "arguments": {
                "self": [],
                "blog": []
            }
        },
        "Access.retrieve_blog": {
            "name": "retrieve_blog",
            "location": 146,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Access.create_post": {
            "name": "create_post",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "blog": [],
                "post": []
            }
        },
        "Access.retrieve_post": {
            "name": "retrieve_post",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "key": []
            }
        },
        "Access.update_post": {
            "name": "update_post",
            "location": 160,
            "return": [],
            "arguments": {
                "self": [],
                "post": []
            }
        },
        "Access.delete_post": {
            "name": "delete_post",
            "location": 164,
            "return": [],
            "arguments": {
                "self": [],
                "post": []
            }
        },
        "Access.__iter__": {
            "name": "__iter__",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Access.blog_iter": {
            "name": "blog_iter",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Access.post_iter": {
            "name": "post_iter",
            "location": 179,
            "return": [],
            "arguments": {
                "self": [],
                "blog": []
            }
        },
        "Access.post_title_iter": {
            "name": "post_title_iter",
            "location": 185,
            "return": [],
            "arguments": {
                "self": [],
                "blog": [],
                "title": []
            }
        },
        "Access.blog_title_iter": {
            "name": "blog_title_iter",
            "location": 188,
            "return": [],
            "arguments": {
                "self": [],
                "title": []
            }
        },
        "Render.__init__": {
            "name": "__init__",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "access": []
            }
        },
        "Render.emit_all": {
            "name": "emit_all",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "destination": []
            }
        },
        "Render.emit_blog": {
            "name": "emit_blog",
            "location": 247,
            "return": [],
            "arguments": {
                "self": [],
                "blog": [],
                "output": []
            }
        },
        "Render.emit_post": {
            "name": "emit_post",
            "location": 257,
            "return": [],
            "arguments": {
                "self": [],
                "post": []
            }
        },
        "Render.emit_index": {
            "name": "emit_index",
            "location": 272,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Access2.create_post": {
            "name": "create_post",
            "location": 304,
            "return": [],
            "arguments": {
                "self": [],
                "blog": [],
                "post": []
            }
        },
        "Access2.delete_post": {
            "name": "delete_post",
            "location": 312,
            "return": [],
            "arguments": {
                "self": [],
                "post": []
            }
        },
        "Access2.post_iter": {
            "name": "post_iter",
            "location": 320,
            "return": [],
            "arguments": {
                "self": [],
                "blog": []
            }
        },
        "Access3.new": {
            "name": "new",
            "location": 357,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "Access3.create_blog": {
            "name": "create_blog",
            "location": 361,
            "return": [],
            "arguments": {
                "self": [],
                "blog": []
            }
        },
        "Access3.blog_iter": {
            "name": "blog_iter",
            "location": 366,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Access4.new": {
            "name": "new",
            "location": 400,
            "return": [],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "Access4.create_blog": {
            "name": "create_blog",
            "location": 404,
            "return": [],
            "arguments": {
                "self": [],
                "blog": []
            }
        },
        "Access4.update_blog": {
            "name": "update_blog",
            "location": 412,
            "return": [],
            "arguments": {
                "self": [],
                "blog": []
            }
        },
        "Access4.blog_iter": {
            "name": "blog_iter",
            "location": 431,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Access4.blog_title_iter": {
            "name": "blog_title_iter",
            "location": 434,
            "return": [],
            "arguments": {
                "self": [],
                "title": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_11/__init__.py": {},
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_12/ch12_ex1.py": {},
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_12/ch12_ex2.py": {
        "adapt_currency": {
            "name": "adapt_currency",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "convert_currency": {
            "name": "convert_currency",
            "location": 25,
            "return": [
                "Mapping[str, Any]",
                "str"
            ],
            "arguments": {
                "bytes": [
                    "int",
                    "str",
                    "bool",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_12/ch12_ex3.py": {
        "Blog.__post_init__": {
            "name": "__post_init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blog.entries": {
            "name": "entries",
            "location": 37,
            "return": [
                "str",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blog.by_tag": {
            "name": "by_tag",
            "location": 43,
            "return": [
                "str",
                "Dict[str, str]",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Post.append": {
            "name": "append",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tag": [
                    "str",
                    "list",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "Access.open": {
            "name": "open",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "pathlib.Path",
                    "Callable"
                ]
            }
        },
        "Access.get_blog": {
            "name": "get_blog",
            "location": 71,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "Optional[str]",
                    "str",
                    "List[dict]"
                ]
            }
        },
        "Access.add_blog": {
            "name": "add_blog",
            "location": 81,
            "return": [
                "int",
                "Optional[str]",
                "datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "blog": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Access.get_post": {
            "name": "get_post",
            "location": 91,
            "return": [
                "str",
                "Mapping[str, Any]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "Access.add_post": {
            "name": "add_post",
            "location": 111,
            "return": [
                "dict",
                "Mapping[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "blog": [
                    "dict"
                ],
                "post": [
                    "dict"
                ]
            }
        },
        "Access.blog_iter": {
            "name": "blog_iter",
            "location": 155,
            "return": [
                "typing.Iterator[Blog]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Access.post_iter": {
            "name": "post_iter",
            "location": 166,
            "return": [
                "typing.Iterator[Post]"
            ],
            "arguments": {
                "self": [],
                "blog": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "Access.post_by_tag": {
            "name": "post_by_tag",
            "location": 174,
            "return": [
                "str",
                "Type[T]",
                "List[str]",
                "Set[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "blog": [
                    "str",
                    "int",
                    "set"
                ]
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_12/ch12_ex4.py": {
        "Blog.as_dict": {
            "name": "as_dict",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Post.as_dict": {
            "name": "as_dict",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_12/__init__.py": {},
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_13/ch13_e1_ex2.py": {
        "roulette_server_3": {
            "name": "roulette_server_3",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "count": [
                    "int",
                    "Optional[float]",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "server_3": {
            "name": "server_3",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Wheel2.__call__": {
            "name": "__call__",
            "location": 44,
            "return": [
                "starlette.types.Receive",
                "Callable",
                "starlette.types.Send",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "WSGIEnvironment",
                    "StartResponse",
                    "Callable[[str, List], None]"
                ],
                "start_response": [
                    "StartResponse"
                ]
            }
        },
        "Wheel3.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seed": [
                    "float",
                    "bool"
                ]
            }
        },
        "Wheel3.__call__": {
            "name": "__call__",
            "location": 82,
            "return": [
                "dict",
                "List[float]",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "environ": [],
                "start_response": [
                    "dict",
                    "Dict[str, Any]",
                    "bytes",
                    "MutableMapping"
                ]
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_13/ch13_e1_ex3.py": {
        "roulette_server_3": {
            "name": "roulette_server_3",
            "location": 258,
            "return": [
                "None"
            ],
            "arguments": {
                "count": [
                    "int",
                    "Optional[float]",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "roulette_client": {
            "name": "roulette_client",
            "location": 278,
            "return": [
                "axion.utils.types.AnyCallable",
                "dict"
            ],
            "arguments": {
                "method": [
                    "str",
                    "dict"
                ],
                "path": [
                    "str",
                    "dict"
                ],
                "data": [
                    "Dict[str, str]",
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "server_3": {
            "name": "server_3",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Wheel2.__call__": {
            "name": "__call__",
            "location": 44,
            "return": [
                "starlette.types.Receive",
                "Callable",
                "starlette.types.Send",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "WSGIEnvironment",
                    "StartResponse",
                    "Callable[[str, List], None]"
                ],
                "start_response": [
                    "StartResponse"
                ]
            }
        },
        "Wheel3.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wheel3.__call__": {
            "name": "__call__",
            "location": 72,
            "return": [
                "dict",
                "List[float]",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "environ": [],
                "start_response": [
                    "dict",
                    "Dict[str, Any]",
                    "bytes",
                    "MutableMapping"
                ]
            }
        },
        "Table.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stake": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "Table.place_bet": {
            "name": "place_bet",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "amount": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Table.clear_bets": {
            "name": "clear_bets",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "Table.resolve": {
            "name": "resolve",
            "location": 114,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "spin": [
                    "Dict[str, Tuple[int, int]]",
                    "List[int]",
                    "Iterable[Any]",
                    "int",
                    "float",
                    "Tuple[str]",
                    "str"
                ]
            }
        },
        "WSGI.__call__": {
            "name": "__call__",
            "location": 132,
            "return": [
                "typing.Iterable[builtins.bytes]"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "WSGIEnvironment",
                    "StartResponse",
                    "Callable[[str, List], None]"
                ],
                "start_response": [
                    "WSGIEnvironment",
                    "StartResponse",
                    "Callable[[str, List], None]"
                ]
            }
        },
        "Roulette.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wheel": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "Roulette.__call__": {
            "name": "__call__",
            "location": 149,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "dict",
                    "requests.Response"
                ],
                "start_response": [
                    "Callable",
                    "StartResponse",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Roulette.player_app": {
            "name": "player_app",
            "location": 172,
            "return": [
                "Callable",
                "str",
                "bool",
                "List[dict]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "WSGIEnvironment",
                    "str"
                ],
                "start_response": [
                    "StartResponse"
                ]
            }
        },
        "Roulette.bet_app": {
            "name": "bet_app",
            "location": 187,
            "return": [
                "Callable",
                "str",
                "bool",
                "List[dict]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "dict"
                ],
                "start_response": [
                    "StartResponse"
                ]
            }
        },
        "Roulette.wheel_app": {
            "name": "wheel_app",
            "location": 215,
            "return": [
                "Callable",
                "str",
                "bool",
                "List[dict]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Tuple[str, str]]"
                ],
                "start_response": [
                    "StartResponse"
                ]
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_13/ch13_e1_ex4.py": {
        "roulette_server_4": {
            "name": "roulette_server_4",
            "location": 258,
            "return": [
                ""
            ],
            "arguments": {
                "count": [
                    "int",
                    "Optional[float]",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "roulette_client": {
            "name": "roulette_client",
            "location": 278,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "method": [
                    "str",
                    "dict"
                ],
                "path": [
                    "str",
                    "dict"
                ],
                "data": [
                    "Dict[str, str]",
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "authenticated_client": {
            "name": "authenticated_client",
            "location": 425,
            "return": [
                "bool",
                "bytes"
            ],
            "arguments": {
                "method": [
                    "str"
                ],
                "path": [
                    "str"
                ],
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ],
                "username": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[Callable[[Any], None]]"
                ],
                "password": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[Callable[[Any], None]]"
                ]
            }
        },
        "auth_server": {
            "name": "auth_server",
            "location": 454,
            "return": [
                "None"
            ],
            "arguments": {
                "count": [
                    "int",
                    "Optional[int]",
                    "Iterable[str]"
                ]
            }
        },
        "server_5": {
            "name": "server_5",
            "location": 470,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Wheel2.__call__": {
            "name": "__call__",
            "location": 44,
            "return": [
                "starlette.types.Receive",
                "Callable",
                "starlette.types.Send",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "WSGIEnvironment",
                    "StartResponse",
                    "Callable[[str, List], None]"
                ],
                "start_response": [
                    "StartResponse"
                ]
            }
        },
        "Wheel3.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Wheel3.__call__": {
            "name": "__call__",
            "location": 72,
            "return": [
                "dict",
                "List[float]",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "environ": [],
                "start_response": [
                    "dict",
                    "Dict[str, Any]",
                    "bytes",
                    "MutableMapping"
                ]
            }
        },
        "Table.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stake": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "Table.place_bet": {
            "name": "place_bet",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "amount": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Table.clear_bets": {
            "name": "clear_bets",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "Table.resolve": {
            "name": "resolve",
            "location": 114,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "spin": [
                    "Dict[str, Tuple[int, int]]",
                    "List[int]",
                    "Iterable[Any]",
                    "int",
                    "float",
                    "Tuple[str]",
                    "str"
                ]
            }
        },
        "WSGI.__call__": {
            "name": "__call__",
            "location": 132,
            "return": [
                "typing.Iterable[builtins.bytes]"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "WSGIEnvironment",
                    "StartResponse",
                    "Callable[[str, List], None]"
                ],
                "start_response": [
                    "WSGIEnvironment",
                    "StartResponse",
                    "Callable[[str, List], None]"
                ]
            }
        },
        "Roulette.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "wheel": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "Roulette.__call__": {
            "name": "__call__",
            "location": 149,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "dict",
                    "requests.Response"
                ],
                "start_response": [
                    "Callable",
                    "StartResponse",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Roulette.player_app": {
            "name": "player_app",
            "location": 172,
            "return": [
                "Callable",
                "str",
                "bool",
                "List[dict]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "WSGIEnvironment",
                    "str"
                ],
                "start_response": [
                    "StartResponse"
                ]
            }
        },
        "Roulette.bet_app": {
            "name": "bet_app",
            "location": 187,
            "return": [
                "Callable",
                "str",
                "bool",
                "List[dict]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "dict"
                ],
                "start_response": [
                    "StartResponse"
                ]
            }
        },
        "Roulette.wheel_app": {
            "name": "wheel_app",
            "location": 215,
            "return": [
                "Callable",
                "str",
                "bool",
                "List[dict]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Tuple[str, str]]"
                ],
                "start_response": [
                    "StartResponse"
                ]
            }
        },
        "Authentication.__init__": {
            "name": "__init__",
            "location": 308,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "int"
                ],
                "password": [
                    "str",
                    "Sequence[str]",
                    "types.CodeType"
                ],
                "salt": [
                    "str",
                    "bool"
                ]
            }
        },
        "Authentication._iter_hash": {
            "name": "_iter_hash",
            "location": 315,
            "return": [
                "str",
                "int",
                "float",
                "List[str]"
            ],
            "arguments": {
                "iterations": [
                    "bytes",
                    "int",
                    "str"
                ],
                "salt": [
                    "bytes",
                    "int",
                    "str"
                ],
                "username": [
                    "bytes",
                    "int",
                    "str"
                ],
                "password": [
                    "bytes",
                    "int",
                    "str"
                ]
            }
        },
        "Authentication.__eq__": {
            "name": "__eq__",
            "location": 321,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Authentication.__hash__": {
            "name": "__hash__",
            "location": 325,
            "return": [
                "int",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Authentication.__repr__": {
            "name": "__repr__",
            "location": 328,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Authentication.match": {
            "name": "match",
            "location": 333,
            "return": [
                "int",
                "Union[int, List]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "bytes",
                    "types.CodeType"
                ]
            }
        },
        "Users.__init__": {
            "name": "__init__",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Users.add": {
            "name": "add",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "authentication": [
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Users.match": {
            "name": "match",
            "location": 351,
            "return": [
                "str",
                "Dict[str, int]",
                "List[Dict[str, Any]]",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, str]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "bytes",
                    "Pattern"
                ],
                "password": [
                    "str",
                    "Pattern",
                    "bytes"
                ]
            }
        },
        "Authenticate.__init__": {
            "name": "__init__",
            "location": 386,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "users": [
                    "str",
                    "int"
                ],
                "target_app": [
                    "bool",
                    "set",
                    "str",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "Authenticate.__call__": {
            "name": "__call__",
            "location": 390,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "WSGIEnvironment",
                    "StartResponse",
                    "str",
                    "Callable",
                    "bytes",
                    "Dict[str, Any]",
                    "dict"
                ],
                "start_response": [
                    "StartResponse",
                    "Dict[str, Any]",
                    "Type[Any]"
                ]
            }
        },
        "Some_App.__call__": {
            "name": "__call__",
            "location": 412,
            "return": [
                "starlette.types.Receive",
                "Callable",
                "starlette.types.Send",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "WSGIEnvironment",
                    "StartResponse",
                    "Callable[[str, List], None]"
                ],
                "start_response": [
                    "StartResponse"
                ]
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_13/ch13_ex1.py": {
        "wsgi_wheel": {
            "name": "wsgi_wheel",
            "location": 155,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "environ": [
                    "float",
                    "Dict[str, Any]",
                    "int"
                ],
                "start_response": [
                    "StartResponse"
                ]
            }
        },
        "roulette_server": {
            "name": "roulette_server",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "count": [
                    "int",
                    "Optional[float]",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "json_get": {
            "name": "json_get",
            "location": 203,
            "return": [
                "str",
                "bool",
                "eth.abc.BlockHeaderAPI",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Tuple[int, int]"
                ]
            }
        },
        "server": {
            "name": "server",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Wheel.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seed": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "Wheel.zero": {
            "name": "zero",
            "location": 73,
            "return": [
                "typing.List[typing.Dict[builtins.str, typing.Tuple[builtins.int, builtins.int]]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Wheel.redblack": {
            "name": "redblack",
            "location": 77,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "Wheel.hilo": {
            "name": "hilo",
            "location": 83,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "Wheel.evenodd": {
            "name": "evenodd",
            "location": 87,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "Wheel.spin": {
            "name": "spin",
            "location": 90,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Zero.zero": {
            "name": "zero",
            "location": 96,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DoubleZero.zero": {
            "name": "zero",
            "location": 102,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Response.__str__": {
            "name": "__str__",
            "location": 199,
            "return": [
                "int",
                "bytes",
                "str",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_13/ch13_ex2.py": {
        "dominoes": {
            "name": "dominoes",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "hands": {
            "name": "hands",
            "location": 89,
            "return": [
                "int"
            ],
            "arguments": {
                "h": [
                    "str",
                    "float",
                    "List[str]",
                    "Dict[str, Any]",
                    "int",
                    "Exception"
                ],
                "c": [
                    "str",
                    "float",
                    "List[str]",
                    "Dict[str, Any]",
                    "int",
                    "Exception"
                ]
            }
        },
        "openapi": {
            "name": "openapi",
            "location": 121,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "Domino.double": {
            "name": "double",
            "location": 26,
            "return": [
                "bool",
                "Type",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Domino.__repr__": {
            "name": "__repr__",
            "location": 29,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "List[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Boneyard.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "int",
                    "Tuple[int]",
                    "float"
                ]
            }
        },
        "Boneyard.deal": {
            "name": "deal",
            "location": 53,
            "return": [
                "str",
                "int",
                "tuple",
                "List[str]",
                "list",
                "Union[List[str], str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "tiles": [
                    "bytes",
                    "str"
                ],
                "hands": [
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_13/ch13_ex3.py": {
        "make_dice": {
            "name": "make_dice",
            "location": 39,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "n_dice": [
                    "int"
                ]
            }
        },
        "openapi": {
            "name": "openapi",
            "location": 89,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "make_roll": {
            "name": "make_roll",
            "location": 95,
            "return": [
                "Iterable[str]",
                "bool",
                "IO[str]",
                "int"
            ],
            "arguments": {}
        },
        "get_roll": {
            "name": "get_roll",
            "location": 113,
            "return": [
                "str"
            ],
            "arguments": {
                "identifier": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "patch_roll": {
            "name": "patch_roll",
            "location": 121,
            "return": [
                "dict",
                "Optional[bool]",
                "Optional[int]",
                "List[str]"
            ],
            "arguments": {
                "identifier": [
                    "str"
                ]
            }
        },
        "make_app": {
            "name": "make_app",
            "location": 142,
            "return": [
                "flask.Flask",
                "\"App\""
            ],
            "arguments": {}
        },
        "Dice.reroll": {
            "name": "reroll",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "keep_positions": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "make_app.error_message": {
            "name": "error_message",
            "location": 149,
            "return": [
                "str",
                "Mapping[str, Any]",
                "bool"
            ],
            "arguments": {
                "ex": [
                    "str",
                    "Exception"
                ]
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_13/ch13_ex4.py": {
        "demo": {
            "name": "demo",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "headers": [
                    "str",
                    "starlette.requests.Request",
                    "Mapping"
                ]
            }
        },
        "mock_requests": {
            "name": "mock_requests",
            "location": 54,
            "return": [
                "Mapping[str, Any]",
                "str",
                "bool",
                "Optional[List[str]]"
            ],
            "arguments": {
                "monkeypatch": [
                    "List[str]",
                    "Mapping[str, Any]",
                    "unittesmock.Mock"
                ]
            }
        },
        "test_demo": {
            "name": "test_demo",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "mock_requests": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_13/ch13_ex5.py": {
        "init_app": {
            "name": "init_app",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "valid_api_key": {
            "name": "valid_api_key",
            "location": 66,
            "return": [
                "bool",
                "str",
                "Callable",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "view_function": [
                    "Callable",
                    "bool"
                ]
            }
        },
        "api_key_in": {
            "name": "api_key_in",
            "location": 79,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "valid_values": [
                    "Set[str]",
                    "str",
                    "List[str]",
                    "Sequence[str]",
                    "List[Union[Any, Any]]"
                ]
            }
        },
        "openapi": {
            "name": "openapi",
            "location": 102,
            "return": [
                "str",
                "type",
                "BaseException",
                "Exception"
            ],
            "arguments": {}
        },
        "create_roll": {
            "name": "create_roll",
            "location": 109,
            "return": [
                "dict",
                "int"
            ],
            "arguments": {}
        },
        "get_roll": {
            "name": "get_roll",
            "location": 131,
            "return": [
                "str",
                "bool",
                "Tuple[str, int]"
            ],
            "arguments": {
                "identifier": [
                    "int",
                    "Union['KspNativeControl', int]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "patch_roll": {
            "name": "patch_roll",
            "location": 142,
            "return": [
                "str",
                "Dict[str, Any]",
                "Tuple[Dict[str, Any], http.HTTPStatus]"
            ],
            "arguments": {
                "identifier": [
                    "Dict[Hashable, Any]",
                    "int",
                    "dict"
                ]
            }
        },
        "make_app": {
            "name": "make_app",
            "location": 168,
            "return": [
                "flask.Flask",
                "\"App\""
            ],
            "arguments": {}
        },
        "valid_api_key.confirming_view_function": {
            "name": "confirming_view_function",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "api_key_in.concrete_decorator": {
            "name": "concrete_decorator",
            "location": 81,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "view_function": [
                    "Callable"
                ]
            }
        },
        "make_app.error_message": {
            "name": "error_message",
            "location": 174,
            "return": [
                "str",
                "Mapping[str, Any]",
                "bool"
            ],
            "arguments": {
                "ex": [
                    "str",
                    "Exception"
                ]
            }
        },
        "api_key_in.concrete_decorator.confirming_view_function": {
            "name": "confirming_view_function",
            "location": 84,
            "return": [],
            "arguments": {}
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_13/ch13_ex6.py": {
        "server_6": {
            "name": "server_6",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Simulation.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_queue": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "dict"
                ],
                "result_queue": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "dict"
                ]
            }
        },
        "Simulation.run": {
            "name": "run",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Summarize.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "queue": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Summarize.run": {
            "name": "run",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_13/simulation_model.py": {
        "Table.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "decks": [
                    "int",
                    "List[int]",
                    "Optional[List[Any]]",
                    "float"
                ],
                "limit": [
                    "int",
                    "List[int]",
                    "Optional[List[Any]]",
                    "float"
                ],
                "dealer": [
                    "int",
                    "List[int]",
                    "Optional[List[Any]]",
                    "float"
                ],
                "split": [
                    "str",
                    "Union[None, str, List[str]]",
                    "Optional[str]"
                ],
                "payout": [
                    "int",
                    "List[int]",
                    "Optional[List[Any]]",
                    "float"
                ]
            }
        },
        "Table.as_tuple": {
            "name": "as_tuple",
            "location": 59,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BettingStrategy.bet": {
            "name": "bet",
            "location": 83,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BettingStrategy.record_win": {
            "name": "record_win",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BettingStrategy.record_loss": {
            "name": "record_loss",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Player.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "play": [
                    "int",
                    "bool",
                    "float"
                ],
                "betting": [
                    "int",
                    "bool",
                    "float"
                ],
                "rounds": [
                    "int",
                    "bool",
                    "float"
                ],
                "stake": [
                    "int",
                    "Union[float, int]",
                    "str",
                    "float",
                    "Union[str, type]",
                    "Union[float, Tuple[float, float]]",
                    "Tuple[int]"
                ]
            }
        },
        "Player.reset": {
            "name": "reset",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Player.as_tuple": {
            "name": "as_tuple",
            "location": 117,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Simulate.__init__": {
            "name": "__init__",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[List[Any]]"
                ],
                "player": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[List[Any]]"
                ],
                "samples": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[List[Any]]"
                ]
            }
        },
        "Simulate.__iter__": {
            "name": "__iter__",
            "location": 145,
            "return": [
                "typing.Iterator[typing.Tuple]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_13/__init__.py": {},
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_14/ch14_ex1.py": {
        "simulate_blackjack": {
            "name": "simulate_blackjack",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "location_list": {
            "name": "location_list",
            "location": 50,
            "return": [
                "str",
                "pathlib.Path",
                "io.TextIO"
            ],
            "arguments": {
                "config_name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "main_ini": {
            "name": "main_ini",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_14/ch14_ex2.py": {
        "simulate": {
            "name": "simulate",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "table": [
                    "str",
                    "int"
                ],
                "player": [
                    "str",
                    "int"
                ],
                "outputpath": [
                    "pathlib.Path",
                    "str",
                    "paradigm.catalog.Path"
                ],
                "samples": [
                    "str",
                    "int"
                ]
            }
        },
        "simulate_SomeStrategy_Flat": {
            "name": "simulate_SomeStrategy_Flat",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "simulate_c": {
            "name": "simulate_c",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "bool"
                ]
            }
        },
        "make_config": {
            "name": "make_config",
            "location": 166,
            "return": [
                "str"
            ],
            "arguments": {
                "dealer_rule": [
                    "int",
                    "Tuple[int, int]",
                    "str"
                ],
                "split_rule": [
                    "int",
                    "Tuple[int, int]",
                    "str"
                ],
                "decks": [
                    "int",
                    "Tuple[int, int]",
                    "str"
                ],
                "limit": [
                    "int",
                    "Tuple[int, int]",
                    "str"
                ],
                "payout": [
                    "int",
                    "Tuple[int, int]",
                    "str"
                ],
                "player_rule": [
                    "int",
                    "Tuple[int, int]",
                    "str"
                ],
                "betting_rule": [
                    "int",
                    "Tuple[int, int]",
                    "str"
                ],
                "base_name": [
                    "int",
                    "Tuple[int, int]",
                    "str"
                ],
                "samples": [
                    "int",
                    "Tuple[int, int]",
                    "str"
                ]
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_14/ch14_ex3.py": {
        "simulate": {
            "name": "simulate",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "table": [
                    "str",
                    "int"
                ],
                "player": [
                    "str",
                    "int"
                ],
                "outputpath": [
                    "pathlib.Path",
                    "str",
                    "paradigm.catalog.Path"
                ],
                "samples": [
                    "str",
                    "int"
                ]
            }
        },
        "AttrChainMap.__getattr__": {
            "name": "__getattr__",
            "location": 174,
            "return": [
                "str",
                "bool",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "AttrChainMap.__setattr__": {
            "name": "__setattr__",
            "location": 179,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "float",
                    "List[Optional[str]]",
                    "Union[int, float]"
                ],
                "value": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_14/ch14_ex4.py": {
        "main_nested_dict": {
            "name": "main_nested_dict",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "simulate": {
            "name": "simulate",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "table": [
                    "str",
                    "int"
                ],
                "player": [
                    "str",
                    "int"
                ],
                "outputpath": [
                    "pathlib.Path",
                    "str",
                    "paradigm.catalog.Path"
                ],
                "samples": [
                    "str",
                    "int"
                ]
            }
        },
        "main_cm": {
            "name": "main_cm",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "List[str]"
                ]
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_14/ch14_ex5.py": {
        "main_cm_prop": {
            "name": "main_cm_prop",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "List[Tuple[str, str, str, str, str]]"
                ]
            }
        },
        "PropertyParser.read_string": {
            "name": "read_string",
            "location": 76,
            "return": [
                "bytes",
                "pymatgen.io.vasp.inputs.Poscar",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Callable[[Any], None]",
                    "str",
                    "bytes",
                    "dict",
                    "int"
                ]
            }
        },
        "PropertyParser.read_file": {
            "name": "read_file",
            "location": 79,
            "return": [
                "str",
                "Optional[dict]",
                "frozenset[str]"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "Sequence[str]",
                    "IO[Any]",
                    "IO",
                    "str",
                    "List[str]",
                    "dict",
                    "IO[str]"
                ]
            }
        },
        "PropertyParser.read": {
            "name": "read",
            "location": 83,
            "return": [
                "str",
                "dict",
                "Callable",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.Path",
                    "Optional[pathlib.Path]",
                    "str"
                ]
            }
        },
        "PropertyParser._parse": {
            "name": "_parse",
            "location": 89,
            "return": [
                "typing.Iterator[Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Tuple[str, int]",
                    "\"ks.Series[str]\"",
                    "bytes"
                ]
            }
        },
        "PropertyParser.load": {
            "name": "load",
            "location": 109,
            "return": [
                "str",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "file_name_or_path": [
                    "str",
                    "io.BufferedWriter",
                    "pathlib.Path"
                ]
            }
        },
        "PropertyParser.loads": {
            "name": "loads",
            "location": 119,
            "return": [
                "Union[str, IO]",
                "Dict[str, Any]",
                "pymatgen.io.vasp.inputs.Poscar",
                "IO[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "int",
                    "Iterable",
                    "str",
                    "dict",
                    "Iterable[T]"
                ]
            }
        },
        "PropertyParser._escape": {
            "name": "_escape",
            "location": 122,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Union[List, Dict]",
                    "str",
                    "int",
                    "dict",
                    "Union['Contributor', 'Coverage']"
                ]
            }
        },
        "PropertyParser._escape2": {
            "name": "_escape2",
            "location": 127,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Union[List, Dict]",
                    "Dict[str, Any]",
                    "bytes",
                    "Mapping[str, Optional[float]]"
                ]
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_14/ch14_ex6.py": {
        "main_cm_prop": {
            "name": "main_cm_prop",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "List[Tuple[str, str, str, str, str]]"
                ]
            }
        },
        "Configuration.read_file": {
            "name": "read_file",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "Callable",
                    "pathlib.Path",
                    "Union[pathlib.Path, str]",
                    "bool"
                ]
            }
        },
        "Configuration.read": {
            "name": "read",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "Configuration.read_string": {
            "name": "read_string",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Configuration.get": {
            "name": "get",
            "location": 133,
            "return": [
                "int",
                "bool",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "self": [],
                "qual_name": [
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "default": [
                    "List[str]",
                    "bool",
                    "str"
                ]
            }
        },
        "Configuration.__getitem__": {
            "name": "__getitem__",
            "location": 141,
            "return": [
                "bool",
                "int",
                "str",
                "Optional[Union[Any, Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "section": [
                    "Tuple['cirq.Qid']",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_14/simulation_model.py": {
        "check": {
            "name": "check",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "IO[bytes]",
                    "str"
                ]
            }
        },
        "DealerRule.__repr__": {
            "name": "__repr__",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SplitRule.__repr__": {
            "name": "__repr__",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PlayerStrategy.__repr__": {
            "name": "__repr__",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BettingStrategy.__repr__": {
            "name": "__repr__",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BettingStrategy.bet": {
            "name": "bet",
            "location": 85,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BettingStrategy.record_win": {
            "name": "record_win",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BettingStrategy.record_loss": {
            "name": "record_loss",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Player.__post_init__": {
            "name": "__post_init__",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Player.reset": {
            "name": "reset",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Simulate.__iter__": {
            "name": "__iter__",
            "location": 138,
            "return": [
                "typing.Iterator[typing.Tuple]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_14/__init__.py": {},
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_15/ch15_ex1.py": {
        "DominoBoneYard.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "int",
                    "Tuple[int]"
                ]
            }
        },
        "DominoBoneYard.double": {
            "name": "double",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "domino": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "DominoBoneYard.score": {
            "name": "score",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "domino": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "DominoBoneYard.hand_iter": {
            "name": "hand_iter",
            "location": 57,
            "return": [
                "typing.Iterator[typing.List[typing.Tuple[builtins.int, builtins.int]]]"
            ],
            "arguments": {
                "self": [],
                "players": [
                    "int",
                    "Iterable[str]",
                    "float"
                ]
            }
        },
        "DominoBoneYard.can_play_first": {
            "name": "can_play_first",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "hand": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DominoBoneYard.score_hand": {
            "name": "score_hand",
            "location": 67,
            "return": [
                "str",
                "bool",
                "int",
                "Optional[dict]",
                "Counter",
                "Sequence[int]"
            ],
            "arguments": {
                "self": [],
                "hand": [
                    "List[Tuple[int, int]]",
                    "List[str]"
                ]
            }
        },
        "DominoBoneYard.rank_hand": {
            "name": "rank_hand",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hand": [
                    "List[Tuple[int, int]]",
                    "Iterable[Any]",
                    "Iterable[Tuple[str, str]]",
                    "dict",
                    "Set[str]"
                ]
            }
        },
        "DominoBoneYard.doubles_indices": {
            "name": "doubles_indices",
            "location": 73,
            "return": [
                "Set[str]",
                "Dict[int, int]",
                "List[str]",
                "Optional[dict]"
            ],
            "arguments": {
                "self": [],
                "hand": [
                    "List[int]",
                    "List[List[str]]",
                    "list",
                    "str",
                    "List[float]"
                ]
            }
        },
        "Domino.double": {
            "name": "double",
            "location": 85,
            "return": [
                "bool",
                "Type",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Domino.score": {
            "name": "score",
            "location": 88,
            "return": [
                "bool",
                "Type",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hand.score": {
            "name": "score",
            "location": 94,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hand.rank": {
            "name": "rank",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hand.doubles_indices": {
            "name": "doubles_indices",
            "location": 100,
            "return": [
                "Set[str]",
                "Dict[int, int]",
                "List[str]",
                "Optional[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DominoBoneYard2.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "int",
                    "Tuple[int]",
                    "float"
                ]
            }
        },
        "DominoBoneYard2.hand_iter": {
            "name": "hand_iter",
            "location": 110,
            "return": [
                "typing.Iterator[Hand]"
            ],
            "arguments": {
                "self": [],
                "players": [
                    "int",
                    "Iterable[str]",
                    "float"
                ]
            }
        },
        "Hand3.highest_double_index": {
            "name": "highest_double_index",
            "location": 154,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DominoBoneYard3.hand_iter": {
            "name": "hand_iter",
            "location": 167,
            "return": [
                "typing.Iterator[Hand3]"
            ],
            "arguments": {
                "self": [],
                "players": [
                    "int",
                    "Iterable[str]",
                    "float"
                ]
            }
        },
        "FancyDealer4.__init__": {
            "name": "__init__",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FancyDealer4.hand_iter": {
            "name": "hand_iter",
            "location": 198,
            "return": [
                "typing.Iterator[Hand3]"
            ],
            "arguments": {
                "self": [],
                "players": [
                    "int",
                    "List[float]",
                    "List[int]",
                    "Optional[int]"
                ],
                "tiles": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "DominoBoneYard3b.__init__": {
            "name": "__init__",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "int",
                    "Tuple[int]",
                    "float"
                ]
            }
        },
        "DominoBoneYard3b.hand_iter": {
            "name": "hand_iter",
            "location": 232,
            "return": [
                "typing.Iterator[Hand3]"
            ],
            "arguments": {
                "self": [],
                "players": [
                    "int",
                    "Iterable[str]",
                    "float"
                ]
            }
        },
        "DominoBoneYard3c.__init__": {
            "name": "__init__",
            "location": 267,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "int",
                    "str"
                ]
            }
        },
        "DominoBoneYard3c.hand_iter": {
            "name": "hand_iter",
            "location": 273,
            "return": [
                "typing.Iterator[Hand]"
            ],
            "arguments": {
                "self": [],
                "players": [
                    "int",
                    "Iterable[str]",
                    "float"
                ]
            }
        },
        "Hand4.__init__": {
            "name": "__init__",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hand4.doubles_indices": {
            "name": "doubles_indices",
            "location": 287,
            "return": [
                "int",
                "List[str]",
                "Tuple[int]",
                "Set[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_15/ch15_ex2.py": {
        "builder": {
            "name": "builder",
            "location": 62,
            "return": [
                "Callable[..., None]",
                "str",
                "Callable",
                "float",
                "bool"
            ],
            "arguments": {
                "v1": [
                    "int",
                    "str"
                ],
                "v2": [
                    "int",
                    "str"
                ]
            }
        },
        "Domino_1.double": {
            "name": "double",
            "location": 34,
            "return": [
                "bool",
                "Type",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Domino_1.score": {
            "name": "score",
            "location": 38,
            "return": [
                "bool",
                "Type",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Domino_2.double": {
            "name": "double",
            "location": 51,
            "return": [
                "bool",
                "Type",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Domino_2.score": {
            "name": "score",
            "location": 55,
            "return": [
                "bool",
                "Type",
                "Union[List, Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hand.__init__": {
            "name": "__init__",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hand.score": {
            "name": "score",
            "location": 94,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hand.rank": {
            "name": "rank",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hand.doubles": {
            "name": "doubles",
            "location": 100,
            "return": [
                "List[str]",
                "str",
                "List[dict]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hand.highest_double": {
            "name": "highest_double",
            "location": 103,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DominoBoneYard.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "DominoBoneYard.draw": {
            "name": "draw",
            "location": 124,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int"
                ]
            }
        },
        "DominoBoneYard.hand_iter": {
            "name": "hand_iter",
            "location": 131,
            "return": [
                "typing.Iterator[Hand]"
            ],
            "arguments": {
                "self": [],
                "players": [
                    "int",
                    "Union[Sequence[Any], float, None]",
                    "Optional[List[Any]]",
                    "Optional[str]"
                ]
            }
        },
        "Hand_X1.__init__": {
            "name": "__init__",
            "location": 177,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hand_X1.matches": {
            "name": "matches",
            "location": 184,
            "return": [
                "bool",
                "str",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "spots": [
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_15/__init__.py": {},
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_16/ch16_ex1.py": {
        "logged": {
            "name": "logged",
            "location": 31,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "logging.Logger",
                    "int",
                    "Exception",
                    "str"
                ]
            }
        },
        "Player.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bet": [
                    "str",
                    "Tuple[Tuple[str, ...]]",
                    "List[str]",
                    "int",
                    "logging.Logger"
                ],
                "strategy": [
                    "str",
                    "Tuple[Tuple[str, ...]]",
                    "List[str]",
                    "int",
                    "logging.Logger"
                ],
                "stake": [
                    "str",
                    "Tuple[Tuple[str, ...]]",
                    "List[str]",
                    "int",
                    "logging.Logger"
                ]
            }
        },
        "Player_2.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bet": [
                    "str",
                    "Tuple[Tuple[str, ...]]",
                    "List[str]",
                    "int",
                    "logging.Logger"
                ],
                "strategy": [
                    "str",
                    "Tuple[Tuple[str, ...]]",
                    "List[str]",
                    "int",
                    "logging.Logger"
                ],
                "stake": [
                    "str",
                    "Tuple[Tuple[str, ...]]",
                    "List[str]",
                    "int",
                    "logging.Logger"
                ]
            }
        },
        "LoggedClassMeta.__new__": {
            "name": "__new__",
            "location": 62,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "Set[str]",
                    "type",
                    "bool"
                ],
                "name": [
                    "str",
                    "dict",
                    "Set[str]",
                    "type",
                    "bool"
                ],
                "bases": [
                    "str",
                    "dict",
                    "Set[str]",
                    "type",
                    "bool"
                ],
                "namespace": [
                    "str",
                    "dict",
                    "Set[str]",
                    "type",
                    "bool"
                ]
            }
        },
        "Player_3.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bet": [
                    "str",
                    "Tuple[Tuple[str, ...]]",
                    "List[str]",
                    "int",
                    "logging.Logger"
                ],
                "strategy": [
                    "str",
                    "Tuple[Tuple[str, ...]]",
                    "List[str]",
                    "int",
                    "logging.Logger"
                ],
                "stake": [
                    "str",
                    "Tuple[Tuple[str, ...]]",
                    "List[str]",
                    "int",
                    "logging.Logger"
                ]
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_16/ch16_ex10.py": {
        "WaitQueueHandler.enqueue": {
            "name": "enqueue",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "record": [
                    "multiprocessing.Queue",
                    "str"
                ]
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_16/ch16_ex2.py": {
        "log_to": {
            "name": "log_to",
            "location": 21,
            "return": [
                "Union[str, List[str]]",
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "log_to.concrete_log_to": {
            "name": "concrete_log_to",
            "location": 25,
            "return": [
                "int",
                "str",
                "Dict[str, Any]",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "Player.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bet": [
                    "bool",
                    "Union[str, List[str]]",
                    "int",
                    "List[str]"
                ],
                "strategy": [
                    "bool",
                    "Union[str, List[str]]",
                    "int",
                    "List[str]"
                ],
                "stake": [
                    "bool",
                    "List[str]"
                ]
            }
        },
        "Table.add_player": {
            "name": "add_player",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "player": [
                    "List[str]",
                    "int",
                    "Union[str, List[str]]",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_16/ch16_ex3.py": {},
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_16/ch16_ex4.py": {
        "demo4a": {
            "name": "demo4a",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "demo4b": {
            "name": "demo4b",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Main.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Main.run": {
            "name": "run",
            "location": 28,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_16/ch16_ex5.py": {
        "audited": {
            "name": "audited",
            "location": 99,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "Exception",
                    "Optional[logging.Logger]"
                ]
            }
        },
        "BettingStrategy.bet": {
            "name": "bet",
            "location": 64,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BettingStrategy.record_win": {
            "name": "record_win",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BettingStrategy.record_loss": {
            "name": "record_loss",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneThreeTwoSix.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneThreeTwoSix._state": {
            "name": "_state",
            "location": 79,
            "return": [
                "str",
                "int",
                "Dict[str, List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneThreeTwoSix.bet": {
            "name": "bet",
            "location": 82,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneThreeTwoSix.record_win": {
            "name": "record_win",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "OneThreeTwoSix.record_loss": {
            "name": "record_loss",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuditedClassMeta.__new__": {
            "name": "__new__",
            "location": 112,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "type",
                    "Sequence[type]",
                    "dict"
                ],
                "name": [
                    "str",
                    "type",
                    "Sequence[type]",
                    "dict"
                ],
                "bases": [
                    "str",
                    "type",
                    "Sequence[type]",
                    "dict"
                ],
                "namespace": [
                    "str",
                    "type",
                    "Sequence[type]",
                    "dict"
                ]
            }
        },
        "Table.bet": {
            "name": "bet",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bet": [
                    "int",
                    "logging.Logger",
                    "Exception",
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Optional[dict]",
                    "T"
                ],
                "amount": [
                    "int",
                    "logging.Logger",
                    "Exception",
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Optional[dict]",
                    "T"
                ]
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_16/ch16_ex6.py": {
        "UserLogRecordFactory.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserLogRecordFactory.__call__": {
            "name": "__call__",
            "location": 61,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserLogAdapter.process": {
            "name": "process",
            "location": 74,
            "return": [
                "bool",
                "str",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "Optional[int]",
                    "int",
                    "bool"
                ],
                "kwargs": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_16/ch16_ex7.py": {
        "Player.bet": {
            "name": "bet",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_16/ch16_ex8.py": {
        "TailHandler.shouldFlush": {
            "name": "shouldFlush",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_16/ch16_ex9.py": {
        "demo": {
            "name": "demo",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Log_Consumer_1.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "queue": [
                    "str",
                    "IO[bytes]",
                    "bytes"
                ]
            }
        },
        "Log_Consumer_1.run": {
            "name": "run",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Log_Producer.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "proc_id": [
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "queue": [
                    "str",
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Log_Producer.run": {
            "name": "run",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_16/__init__.py": {},
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_17/ch17_ex1.py": {
        "card": {
            "name": "card",
            "location": 54,
            "return": [],
            "arguments": {
                "rank": [],
                "suit": []
            }
        },
        "suite2": {
            "name": "suite2",
            "location": 165,
            "return": [],
            "arguments": {}
        },
        "suite3": {
            "name": "suite3",
            "location": 217,
            "return": [],
            "arguments": {}
        },
        "suite4": {
            "name": "suite4",
            "location": 312,
            "return": [],
            "arguments": {}
        },
        "ackermann": {
            "name": "ackermann",
            "location": 329,
            "return": [],
            "arguments": {
                "m": [],
                "n": []
            }
        },
        "gamestat_iter": {
            "name": "gamestat_iter",
            "location": 400,
            "return": [],
            "arguments": {
                "source": []
            }
        },
        "rounds_final": {
            "name": "rounds_final",
            "location": 405,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "suite7": {
            "name": "suite7",
            "location": 458,
            "return": [],
            "arguments": {}
        },
        "float_or_none": {
            "name": "float_or_none",
            "location": 491,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "suite9": {
            "name": "suite9",
            "location": 539,
            "return": [],
            "arguments": {}
        },
        "suite10": {
            "name": "suite10",
            "location": 573,
            "return": [],
            "arguments": {}
        },
        "Card.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": [],
                "hard": [],
                "soft": []
            }
        },
        "Card.__str__": {
            "name": "__str__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AceCard.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": []
            }
        },
        "FaceCard.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": []
            }
        },
        "Deck1.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "Deck2.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [],
            "arguments": {
                "self": [],
                "size": [],
                "random": [],
                "ace_class": [],
                "card_class": [],
                "face_class": []
            }
        },
        "TestCard.setUp": {
            "name": "setUp",
            "location": 117,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCard.test_should_returnStr": {
            "name": "test_should_returnStr",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCard.test_should_getAttrValues": {
            "name": "test_should_getAttrValues",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAceCard.setUp": {
            "name": "setUp",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAceCard.test_should_returnStr": {
            "name": "test_should_returnStr",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAceCard.test_should_getAttrValues": {
            "name": "test_should_getAttrValues",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFaceCard.setUp": {
            "name": "setUp",
            "location": 148,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFaceCard.test_should_returnStr": {
            "name": "test_should_returnStr",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestFaceCard.test_should_getAttrValues": {
            "name": "test_should_getAttrValues",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCardFactory.test_rank1_should_createAceCard": {
            "name": "test_rank1_should_createAceCard",
            "location": 187,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCardFactory.test_rank2_should_createCard": {
            "name": "test_rank2_should_createCard",
            "location": 191,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCardFactory.test_rank10_should_createCard": {
            "name": "test_rank10_should_createCard",
            "location": 195,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCardFactory.test_rank10_should_createFaceCard": {
            "name": "test_rank10_should_createFaceCard",
            "location": 199,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCardFactory.test_rank13_should_createFaceCard": {
            "name": "test_rank13_should_createFaceCard",
            "location": 203,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCardFactory.test_otherRank_should_exception": {
            "name": "test_otherRank_should_exception",
            "location": 207,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Deck3.__init__": {
            "name": "__init__",
            "location": 239,
            "return": [],
            "arguments": {
                "self": [],
                "size": [],
                "random": [],
                "card_factory": []
            }
        },
        "Deck3.deal": {
            "name": "deal",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDeckBuild.setUp": {
            "name": "setUp",
            "location": 268,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDeckBuild.test_Deck3_should_build": {
            "name": "test_Deck3_should_build",
            "location": 273,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDeckDeal.setUp": {
            "name": "setUp",
            "location": 288,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDeckDeal.test_Deck3_should_deal": {
            "name": "test_Deck3_should_deal",
            "location": 294,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestDeckDeal.test_empty_deck_should_exception": {
            "name": "test_empty_deck_should_exception",
            "location": 302,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test_Missing.setUp": {
            "name": "setUp",
            "location": 431,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test_Missing.test_missingFile_should_returnDefault": {
            "name": "test_missingFile_should_returnDefault",
            "location": 439,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test_Damaged.setUp": {
            "name": "setUp",
            "location": 447,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test_Damaged.test_damagedFile_should_raiseException": {
            "name": "test_damagedFile_should_raiseException",
            "location": 452,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test_RTD.runTest": {
            "name": "runTest",
            "location": 502,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test_RTD.example": {
            "name": "example",
            "location": 508,
            "return": [],
            "arguments": {
                "self": [],
                "rate_in": [],
                "time_in": [],
                "distance_in": [],
                "rate_out": [],
                "time_out": [],
                "distance_out": []
            }
        },
        "Test_Performance.test_simpleCalc_shouldbe_fastEnough": {
            "name": "test_simpleCalc_shouldbe_fastEnough",
            "location": 561,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_17/ch17_ex2.py": {
        "build_test_db": {
            "name": "build_test_db",
            "location": 32,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "suite8": {
            "name": "suite8",
            "location": 127,
            "return": [],
            "arguments": {}
        },
        "Test_Blog_Queries.setUpClass": {
            "name": "setUpClass",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "Test_Blog_Queries.setUp": {
            "name": "setUp",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test_Blog_Queries.test_query_eqTitle_should_return1Blog": {
            "name": "test_query_eqTitle_should_return1Blog",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test_Blog_Queries.test_query_likeTitle_should_return2Blog": {
            "name": "test_query_likeTitle_should_return2Blog",
            "location": 99,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test_Blog_Queries.test_query_eqW42_tag_should_return2Post": {
            "name": "test_query_eqW42_tag_should_return2Post",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Test_Blog_Queries.test_query_eqICW_tag_should_return1Post": {
            "name": "test_query_eqICW_tag_should_return1Post",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_17/test_ch17.py": {
        "card": {
            "name": "card",
            "location": 59,
            "return": [],
            "arguments": {
                "rank": [],
                "suit": []
            }
        },
        "test_card": {
            "name": "test_card",
            "location": 116,
            "return": [],
            "arguments": {}
        },
        "test_ace_card": {
            "name": "test_ace_card",
            "location": 125,
            "return": [],
            "arguments": {}
        },
        "test_face_card": {
            "name": "test_face_card",
            "location": 134,
            "return": [],
            "arguments": {}
        },
        "test_card_factory": {
            "name": "test_card_factory",
            "location": 153,
            "return": [],
            "arguments": {}
        },
        "deck_context": {
            "name": "deck_context",
            "location": 210,
            "return": [],
            "arguments": {}
        },
        "test_deck_build": {
            "name": "test_deck_build",
            "location": 223,
            "return": [],
            "arguments": {
                "deck_context": []
            }
        },
        "test_deck_deal": {
            "name": "test_deck_deal",
            "location": 237,
            "return": [],
            "arguments": {
                "deck_context": []
            }
        },
        "ackermann": {
            "name": "ackermann",
            "location": 258,
            "return": [],
            "arguments": {
                "m": [],
                "n": []
            }
        },
        "gamestat_iter": {
            "name": "gamestat_iter",
            "location": 302,
            "return": [],
            "arguments": {
                "iterator": []
            }
        },
        "rounds_final": {
            "name": "rounds_final",
            "location": 307,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "no_file_path": {
            "name": "no_file_path",
            "location": 331,
            "return": [],
            "arguments": {}
        },
        "test_missing": {
            "name": "test_missing",
            "location": 341,
            "return": [],
            "arguments": {
                "no_file_path": []
            }
        },
        "damaged_file_path": {
            "name": "damaged_file_path",
            "location": 347,
            "return": [],
            "arguments": {}
        },
        "test_damaged": {
            "name": "test_damaged",
            "location": 355,
            "return": [],
            "arguments": {
                "damaged_file_path": []
            }
        },
        "built_test_db": {
            "name": "built_test_db",
            "location": 379,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "db_session_maker": {
            "name": "db_session_maker",
            "location": 390,
            "return": [],
            "arguments": {}
        },
        "test_database": {
            "name": "test_database",
            "location": 428,
            "return": [],
            "arguments": {
                "db_session_maker": []
            }
        },
        "float_or_none": {
            "name": "float_or_none",
            "location": 465,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "rtd_example": {
            "name": "rtd_example",
            "location": 479,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "test_rtd": {
            "name": "test_rtd",
            "location": 483,
            "return": [],
            "arguments": {
                "rtd_example": []
            }
        },
        "test_performance": {
            "name": "test_performance",
            "location": 513,
            "return": [],
            "arguments": {}
        },
        "Card.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": [],
                "hard": [],
                "soft": []
            }
        },
        "Card.__str__": {
            "name": "__str__",
            "location": 39,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AceCard.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": []
            }
        },
        "FaceCard.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": []
            }
        },
        "Deck1.__init__": {
            "name": "__init__",
            "location": 72,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "Deck2.__init__": {
            "name": "__init__",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "size": [],
                "random": [],
                "ace_class": [],
                "card_class": [],
                "face_class": []
            }
        },
        "Deck3.__init__": {
            "name": "__init__",
            "location": 189,
            "return": [],
            "arguments": {
                "self": [],
                "size": [],
                "random": [],
                "card_factory": []
            }
        },
        "Deck3.deal": {
            "name": "deal",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_17/__init__.py": {},
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_18/ch18_demo.py": {},
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_18/ch18_ex1.py": {
        "get_options_1": {
            "name": "get_options_1",
            "location": 23,
            "return": [
                "argparse.ArgumentParser",
                "argparse.Namespace",
                "Tuple[Dict[str, str], List[str]]",
                "List[str]"
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "Optional[argparse.Namespace]",
                    "argparse.Namespace",
                    "list",
                    "str"
                ],
                "defaults": [
                    "List[str]",
                    "Optional[argparse.Namespace]",
                    "argparse.Namespace",
                    "list",
                    "str"
                ]
            }
        },
        "test_get_config_1": {
            "name": "test_get_config_1",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "capsys": [
                    "str",
                    "Dict[scripts.node_integration_tests.playbooks.test_config_base.NodeId, pathlib.Path]",
                    "bool",
                    "Callable[[str], bool]",
                    "BaseException"
                ]
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_18/ch18_ex2.py": {
        "nint": {
            "name": "nint",
            "location": 28,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "x": [
                    "Optional[str]",
                    "Optional[object]",
                    "int",
                    "Optional[float]",
                    "Union[None, str, int, float]"
                ]
            }
        },
        "get_options_2": {
            "name": "get_options_2",
            "location": 34,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "str",
                    "bytes",
                    "list"
                ]
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_18/ch18_ex3.py": {
        "simulate_blackjack": {
            "name": "simulate_blackjack",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict"
                ]
            }
        },
        "simulate_blackjack_betting": {
            "name": "simulate_blackjack_betting",
            "location": 219,
            "return": [
                "None"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "logging.Logger"
                ]
            }
        },
        "Build_Config.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "argv": [
                    "int",
                    "str"
                ]
            }
        },
        "Build_Config.__enter__": {
            "name": "__enter__",
            "location": 95,
            "return": [
                "bool",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Build_Config.__exit__": {
            "name": "__exit__",
            "location": 98,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Setup_Logging.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream": [
                    "str",
                    "dict"
                ],
                "disable_existing_loggers": [
                    "str",
                    "dict"
                ]
            }
        },
        "Setup_Logging.__enter__": {
            "name": "__enter__",
            "location": 143,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Setup_Logging.__exit__": {
            "name": "__exit__",
            "location": 147,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ClassLogger.work": {
            "name": "work",
            "location": 160,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "InstanceLogger.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "InstanceLogger.work": {
            "name": "work",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.__init__": {
            "name": "__init__",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command.configure": {
            "name": "configure",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "namespace": [
                    "Optional[str]",
                    "dict",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "Command.run": {
            "name": "run",
            "location": 263,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Simulate_Command.run": {
            "name": "run",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Analyze_Command.run": {
            "name": "run",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command_Sequence.__init__": {
            "name": "__init__",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Command_Sequence.configure": {
            "name": "configure",
            "location": 352,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Command_Sequence.run": {
            "name": "run",
            "location": 356,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ForAllBets_Simulate.run": {
            "name": "run",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_18/__init__.py": {},
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_19/ch19_ex1.py": {},
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_19/ch19_ex2.py": {},
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_19/__init__.py": {},
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_19/some_algorithm/abstraction.py": {},
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_19/some_algorithm/long_version.py": {
        "Implementation_Long.value": {
            "name": "value",
            "location": 21,
            "return": [
                "Union[str, int, float]",
                "float",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_19/some_algorithm/short_version.py": {
        "Implementation_Short.value": {
            "name": "value",
            "location": 21,
            "return": [
                "Union[str, int, float]",
                "float",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_19/some_algorithm/__init__.py": {},
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_19/tests/test_all.py": {
        "TestSomeAlgorithm.test_import_should_see_value": {
            "name": "test_import_should_see_value",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_19/tests/__init__.py": {},
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_2/ch02_ex1.py": {
        "Card.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": []
            }
        },
        "Card._points": {
            "name": "_points",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AceCard._points": {
            "name": "_points",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FaceCard._points": {
            "name": "_points",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_2/ch02_ex2.py": {
        "Card.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": []
            }
        },
        "Card.__eq__": {
            "name": "__eq__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Card.__repr__": {
            "name": "__repr__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Card.__str__": {
            "name": "__str__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Card._points": {
            "name": "_points",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AceCard._points": {
            "name": "_points",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FaceCard._points": {
            "name": "_points",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_2/ch02_ex3.py": {
        "card": {
            "name": "card",
            "location": 16,
            "return": [],
            "arguments": {
                "rank": [],
                "suit": []
            }
        },
        "card2": {
            "name": "card2",
            "location": 51,
            "return": [],
            "arguments": {
                "rank": [],
                "suit": []
            }
        },
        "card3": {
            "name": "card3",
            "location": 70,
            "return": [],
            "arguments": {
                "rank": [],
                "suit": []
            }
        },
        "card4": {
            "name": "card4",
            "location": 108,
            "return": [],
            "arguments": {
                "rank": [],
                "suit": []
            }
        },
        "card5": {
            "name": "card5",
            "location": 126,
            "return": [],
            "arguments": {
                "rank": [],
                "suit": []
            }
        },
        "card6": {
            "name": "card6",
            "location": 145,
            "return": [],
            "arguments": {
                "rank": [],
                "suit": []
            }
        },
        "card7": {
            "name": "card7",
            "location": 176,
            "return": [],
            "arguments": {
                "rank": [],
                "suit": []
            }
        },
        "CardFactory.rank": {
            "name": "rank",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "rank": []
            }
        },
        "CardFactory.suit": {
            "name": "suit",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "suit": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_2/ch02_ex4.py": {
        "card9": {
            "name": "card9",
            "location": 65,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rank": [
                    "int",
                    "Callable",
                    "str"
                ],
                "suit": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "card10": {
            "name": "card10",
            "location": 127,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rank": [
                    "int",
                    "Callable",
                    "str"
                ],
                "suit": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Card2.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rank": [
                    "str",
                    "Optional[str]"
                ],
                "suit": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Card2.__eq__": {
            "name": "__eq__",
            "location": 29,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Tuple[int, int, int]",
                    "Optional[float]",
                    "int"
                ]
            }
        },
        "Card2.__repr__": {
            "name": "__repr__",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NumberCard2.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rank": [
                    "str",
                    "int",
                    "Union[int, str]",
                    "Suit"
                ],
                "suit": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "AceCard2.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rank": [
                    "int",
                    "bool",
                    "float"
                ],
                "suit": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "FaceCard2.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rank": [
                    "int",
                    "bool",
                    "float"
                ],
                "suit": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Card3.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rank": [
                    "int",
                    "bool",
                    "float"
                ],
                "suit": [
                    "int",
                    "bool",
                    "float"
                ],
                "hard": [
                    "int",
                    "bool",
                    "float"
                ],
                "soft": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Card3.__eq__": {
            "name": "__eq__",
            "location": 99,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Tuple[int, int, int]",
                    "Optional[float]",
                    "int"
                ]
            }
        },
        "NumberCard3.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rank": [
                    "int",
                    "Suit",
                    "Chapter_2.ch02_ex3.Suit"
                ],
                "suit": [
                    "int",
                    "Suit",
                    "Chapter_2.ch02_ex3.Suit"
                ]
            }
        },
        "AceCard3.__init__": {
            "name": "__init__",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rank": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ],
                "suit": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "FaceCard3.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rank": [
                    "str",
                    "float",
                    "List[str]"
                ],
                "suit": [
                    "Suit",
                    "Chapter_2.ch02_ex3.Suit",
                    "str",
                    "list",
                    "dict"
                ]
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_2/ch02_ex5.py": {
        "Deck.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Deck.pop": {
            "name": "pop",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Deck2.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Deck3.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "decks": []
            }
        },
        "Deck3a.__init__": {
            "name": "__init__",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "decks": []
            }
        },
        "Hand.__init__": {
            "name": "__init__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "dealer_card": []
            }
        },
        "Hand.hard_total": {
            "name": "hard_total",
            "location": 132,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hand.soft_total": {
            "name": "soft_total",
            "location": 135,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hand.__repr__": {
            "name": "__repr__",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hand2.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "dealer_card": []
            }
        },
        "Hand2.card_append": {
            "name": "card_append",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "card": []
            }
        },
        "Hand2.hard_total": {
            "name": "hard_total",
            "location": 166,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hand2.soft_total": {
            "name": "soft_total",
            "location": 169,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hand2.__repr__": {
            "name": "__repr__",
            "location": 172,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hand3.__init__": {
            "name": "__init__",
            "location": 198,
            "return": [],
            "arguments": {
                "self": [],
                "arg1": [],
                "arg2": [],
                "arg3": []
            }
        },
        "Hand3.__repr__": {
            "name": "__repr__",
            "location": 218,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hand4.__init__": {
            "name": "__init__",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "arg1": [],
                "arg2": [],
                "arg3": [],
                "split": []
            }
        },
        "Hand4.__str__": {
            "name": "__str__",
            "location": 286,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hand5.__init__": {
            "name": "__init__",
            "location": 306,
            "return": [],
            "arguments": {
                "self": [],
                "dealer_card": []
            }
        },
        "Hand5.freeze": {
            "name": "freeze",
            "location": 311,
            "return": [],
            "arguments": {
                "other": []
            }
        },
        "Hand5.split": {
            "name": "split",
            "location": 316,
            "return": [],
            "arguments": {
                "other": [],
                "card0": [],
                "card1": []
            }
        },
        "Hand5.__str__": {
            "name": "__str__",
            "location": 321,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BettingStrategy.bet": {
            "name": "bet",
            "location": 343,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BettingStrategy.record_win": {
            "name": "record_win",
            "location": 346,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BettingStrategy.record_loss": {
            "name": "record_loss",
            "location": 349,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Flat.bet": {
            "name": "bet",
            "location": 355,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BettingStrategy2.bet": {
            "name": "bet",
            "location": 372,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BettingStrategy2.record_win": {
            "name": "record_win",
            "location": 375,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BettingStrategy2.record_loss": {
            "name": "record_loss",
            "location": 378,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "GameStrategy.insurance": {
            "name": "insurance",
            "location": 387,
            "return": [],
            "arguments": {
                "self": [],
                "hand": []
            }
        },
        "GameStrategy.split": {
            "name": "split",
            "location": 390,
            "return": [],
            "arguments": {
                "self": [],
                "hand": []
            }
        },
        "GameStrategy.double": {
            "name": "double",
            "location": 393,
            "return": [],
            "arguments": {
                "self": [],
                "hand": []
            }
        },
        "GameStrategy.hit": {
            "name": "hit",
            "location": 396,
            "return": [],
            "arguments": {
                "self": [],
                "hand": []
            }
        },
        "Table.__init__": {
            "name": "__init__",
            "location": 426,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.place_bet": {
            "name": "place_bet",
            "location": 429,
            "return": [],
            "arguments": {
                "self": [],
                "amount": []
            }
        },
        "Table.get_hand": {
            "name": "get_hand",
            "location": 432,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Table.can_insure": {
            "name": "can_insure",
            "location": 444,
            "return": [],
            "arguments": {
                "self": [],
                "hand": []
            }
        },
        "Player.__init__": {
            "name": "__init__",
            "location": 453,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "bet_strategy": [],
                "game_strategy": []
            }
        },
        "Player.game": {
            "name": "game",
            "location": 463,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Player2.__init__": {
            "name": "__init__",
            "location": 492,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Player2.game": {
            "name": "game",
            "location": 499,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Player2x.__init__": {
            "name": "__init__",
            "location": 520,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Player2x.game": {
            "name": "game",
            "location": 527,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Player3.__init__": {
            "name": "__init__",
            "location": 554,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "bet_strategy": [],
                "game_strategy": []
            }
        },
        "ValidPlayer.__init__": {
            "name": "__init__",
            "location": 597,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "bet_strategy": [],
                "game_strategy": []
            }
        },
        "Player4.__init__": {
            "name": "__init__",
            "location": 619,
            "return": [],
            "arguments": {
                "self": [],
                "table": [],
                "bet_strategy": [],
                "game_strategy": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_2/__init__.py": {},
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_20/combo.py": {
        "combinations": {
            "name": "combinations",
            "location": 41,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "n": [
                    "int",
                    "list",
                    "List[str]",
                    "Sequence[str]"
                ],
                "k": [
                    "int",
                    "list",
                    "List[str]",
                    "Sequence[str]"
                ]
            }
        },
        "combinations.fact": {
            "name": "fact",
            "location": 60,
            "return": [
                "str",
                "list",
                "List[T]"
            ],
            "arguments": {
                "a": [
                    "int",
                    "Pattern",
                    "str"
                ]
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_20/__init__.py": {},
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_20/docs/conf.py": {},
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_20/src/ch20_ex1.py": {
        "card": {
            "name": "card",
            "location": 120,
            "return": [],
            "arguments": {
                "rank": [],
                "suit": []
            }
        },
        "Card.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": [],
                "hard": [],
                "soft": []
            }
        },
        "Card.__str__": {
            "name": "__str__",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Card.__repr__": {
            "name": "__repr__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FaceCard.__str__": {
            "name": "__str__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AceCard.__str__": {
            "name": "__str__",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_20/src/__init__.py": {},
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_20/tests/test_ch20.py": {
        "test_card_factory": {
            "name": "test_card_factory",
            "location": 15,
            "return": [],
            "arguments": {}
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_3/ch03_ex1.py": {
        "card2": {
            "name": "card2",
            "location": 162,
            "return": [],
            "arguments": {
                "rank": [],
                "suit": []
            }
        },
        "Card.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": [],
                "hard": [],
                "soft": []
            }
        },
        "Card.__repr__": {
            "name": "__repr__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Card.__str__": {
            "name": "__str__",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumberCard.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": []
            }
        },
        "AceCard.__init__": {
            "name": "__init__",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": []
            }
        },
        "FaceCard.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": []
            }
        },
        "Card2.__init__": {
            "name": "__init__",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": [],
                "hard": [],
                "soft": []
            }
        },
        "Card2.__repr__": {
            "name": "__repr__",
            "location": 108,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Card2.__str__": {
            "name": "__str__",
            "location": 111,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Card2.__eq__": {
            "name": "__eq__",
            "location": 114,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Card2.__hash__": {
            "name": "__hash__",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Card2.__format__": {
            "name": "__format__",
            "location": 123,
            "return": [],
            "arguments": {
                "self": [],
                "format_spec": []
            }
        },
        "Card2.__bytes__": {
            "name": "__bytes__",
            "location": 133,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumberCard2.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": []
            }
        },
        "AceCard2.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": []
            }
        },
        "FaceCard2.__init__": {
            "name": "__init__",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": []
            }
        },
        "Card3.__init__": {
            "name": "__init__",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": [],
                "hard": [],
                "soft": []
            }
        },
        "Card3.__repr__": {
            "name": "__repr__",
            "location": 211,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Card3.__str__": {
            "name": "__str__",
            "location": 214,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Card3.__eq__": {
            "name": "__eq__",
            "location": 217,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "AceCard3.__init__": {
            "name": "__init__",
            "location": 229,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": []
            }
        },
        "NumberCard3.__init__": {
            "name": "__init__",
            "location": 235,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": []
            }
        },
        "FaceCard3.__init__": {
            "name": "__init__",
            "location": 241,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_3/ch03_ex2.py": {
        "card": {
            "name": "card",
            "location": 71,
            "return": [],
            "arguments": {
                "rank": [],
                "suit": []
            }
        },
        "Card.__str__": {
            "name": "__str__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Card.insure": {
            "name": "insure",
            "location": 32,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Card.hard": {
            "name": "hard",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Card.soft": {
            "name": "soft",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Card._points": {
            "name": "_points",
            "location": 45,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumberCard._points": {
            "name": "_points",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AceCard.insure": {
            "name": "insure",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AceCard._points": {
            "name": "_points",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FaceCard._points": {
            "name": "_points",
            "location": 67,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_3/ch03_ex3.py": {
        "Hand.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [],
            "arguments": {
                "self": [],
                "dealer_card": []
            }
        },
        "Hand.__str__": {
            "name": "__str__",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hand.__repr__": {
            "name": "__repr__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hand.__format__": {
            "name": "__format__",
            "location": 35,
            "return": [],
            "arguments": {
                "self": [],
                "spec": []
            }
        },
        "Hand.__eq__": {
            "name": "__eq__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Hand.__lt__": {
            "name": "__lt__",
            "location": 51,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Hand.__le__": {
            "name": "__le__",
            "location": 59,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Hand.total": {
            "name": "total",
            "location": 69,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FrozenHand.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FrozenHand.__hash__": {
            "name": "__hash__",
            "location": 89,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Deck.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_3/ch03_ex4.py": {
        "card_from_bytes": {
            "name": "card_from_bytes",
            "location": 160,
            "return": [],
            "arguments": {
                "buffer": []
            }
        },
        "card21": {
            "name": "card21",
            "location": 339,
            "return": [],
            "arguments": {
                "rank": [],
                "suit": []
            }
        },
        "Deck.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackJackCard_p.__init__": {
            "name": "__init__",
            "location": 216,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": []
            }
        },
        "BlackJackCard_p.__lt__": {
            "name": "__lt__",
            "location": 220,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BlackJackCard_p.__str__": {
            "name": "__str__",
            "location": 224,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackJackCard.__init__": {
            "name": "__init__",
            "location": 258,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": [],
                "hard": [],
                "soft": []
            }
        },
        "BlackJackCard.__lt__": {
            "name": "__lt__",
            "location": 264,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BlackJackCard.__le__": {
            "name": "__le__",
            "location": 269,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BlackJackCard.__gt__": {
            "name": "__gt__",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BlackJackCard.__ge__": {
            "name": "__ge__",
            "location": 280,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BlackJackCard.__eq__": {
            "name": "__eq__",
            "location": 286,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BlackJackCard.__ne__": {
            "name": "__ne__",
            "location": 292,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BlackJackCard.__str__": {
            "name": "__str__",
            "location": 298,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackJackCard.__repr__": {
            "name": "__repr__",
            "location": 301,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ace21Card.__init__": {
            "name": "__init__",
            "location": 309,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": []
            }
        },
        "Ace21Card.__str__": {
            "name": "__str__",
            "location": 312,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ace21Card.__repr__": {
            "name": "__repr__",
            "location": 315,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Face21Card.__init__": {
            "name": "__init__",
            "location": 323,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": []
            }
        },
        "Face21Card.__str__": {
            "name": "__str__",
            "location": 326,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Face21Card.__repr__": {
            "name": "__repr__",
            "location": 329,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Number21Card.__init__": {
            "name": "__init__",
            "location": 335,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": []
            }
        },
        "Noisy.__del__": {
            "name": "__del__",
            "location": 420,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parent.__init__": {
            "name": "__init__",
            "location": 449,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parent.__del__": {
            "name": "__del__",
            "location": 454,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Child.__init__": {
            "name": "__init__",
            "location": 462,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Child.__del__": {
            "name": "__del__",
            "location": 466,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parent2.__init__": {
            "name": "__init__",
            "location": 499,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Parent2.__del__": {
            "name": "__del__",
            "location": 504,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Child2.__init__": {
            "name": "__init__",
            "location": 511,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "Child2.__del__": {
            "name": "__del__",
            "location": 515,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Float_Fail.__init__": {
            "name": "__init__",
            "location": 536,
            "return": [],
            "arguments": {
                "self": [],
                "value": [],
                "unit": []
            }
        },
        "Float_Units.__new__": {
            "name": "__new__",
            "location": 564,
            "return": [],
            "arguments": {
                "cls": [],
                "value": [],
                "unit": []
            }
        },
        "Float_Units_Ugly.__new__": {
            "name": "__new__",
            "location": 575,
            "return": [],
            "arguments": {
                "cls": [],
                "value": [],
                "unit": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_3/ch03_ex5.py": {
        "Float_Fail.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "bool"
                ],
                "unit": [
                    "int",
                    "List[Tuple[int, float]]",
                    "Tuple[str]",
                    "str",
                    "float"
                ]
            }
        },
        "Float_Units.__new__": {
            "name": "__new__",
            "location": 54,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "dict"
                ],
                "value": [
                    "str",
                    "int",
                    "dict"
                ],
                "unit": [
                    "str",
                    "int"
                ]
            }
        },
        "Float_Units_Ugly.__new__": {
            "name": "__new__",
            "location": 79,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "SupportsFloat",
                    "float",
                    "str"
                ],
                "value": [
                    "Type",
                    "SupportsFloat",
                    "float",
                    "str"
                ],
                "unit": [
                    "str",
                    "int"
                ]
            }
        },
        "AddUnitMeta.__new__": {
            "name": "__new__",
            "location": 101,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, str]"
                ],
                "name": [
                    "str",
                    "Dict[str, str]"
                ],
                "bases": [
                    "str",
                    "Dict[str, str]"
                ],
                "namespace": [
                    "Optional[str]",
                    "Dict[str, Any]",
                    "str",
                    "Tuple[Optional[str], Optional[str]]",
                    "Optional[Dict[str, Any]]",
                    "Tuple[List[str], Optional[Any], Optional[Any]]"
                ]
            }
        },
        "Float_Units2.withUnit": {
            "name": "withUnit",
            "location": 111,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "unit": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "LoggedMeta.__new__": {
            "name": "__new__",
            "location": 134,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, str]"
                ],
                "name": [
                    "str"
                ],
                "bases": [
                    "str",
                    "Dict[str, str]"
                ],
                "namespace": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "SomeApplicationClass.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "v1": [
                    "Dict[str, Dict[str, Any]]",
                    "dict",
                    "bool",
                    "int",
                    "Union[int, float]"
                ],
                "v2": [
                    "Dict[str, Dict[str, Any]]",
                    "dict",
                    "bool",
                    "int",
                    "Union[int, float]"
                ]
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_3/__init__.py": {},
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_4/ch04_ex1.py": {
        "card21": {
            "name": "card21",
            "location": 111,
            "return": [],
            "arguments": {
                "rank": [],
                "suit": []
            }
        },
        "compare": {
            "name": "compare",
            "location": 122,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "card2": {
            "name": "card2",
            "location": 216,
            "return": [],
            "arguments": {
                "rank": [],
                "suit": []
            }
        },
        "card3": {
            "name": "card3",
            "location": 310,
            "return": [],
            "arguments": {
                "rank": [],
                "suit": []
            }
        },
        "BlackJackCard.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": [],
                "hard": [],
                "soft": []
            }
        },
        "BlackJackCard.__repr__": {
            "name": "__repr__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackJackCard.__str__": {
            "name": "__str__",
            "location": 47,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BlackJackCard.__lt__": {
            "name": "__lt__",
            "location": 57,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BlackJackCard.__le__": {
            "name": "__le__",
            "location": 63,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BlackJackCard.__eq__": {
            "name": "__eq__",
            "location": 70,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Ace21Card.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": []
            }
        },
        "Ace21Card.__repr__": {
            "name": "__repr__",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Face21Card.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": []
            }
        },
        "Face21Card.__repr__": {
            "name": "__repr__",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Number21Card.__init__": {
            "name": "__init__",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": []
            }
        },
        "Number21Card.__repr__": {
            "name": "__repr__",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Deck.__init__": {
            "name": "__init__",
            "location": 174,
            "return": [],
            "arguments": {
                "self": [],
                "decks": [],
                "factory": []
            }
        },
        "AceCard2.__str__": {
            "name": "__str__",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FaceCard2.__str__": {
            "name": "__str__",
            "location": 202,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NumberCard2.__str__": {
            "name": "__str__",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_4/ch04_ex2.py": {
        "Hand.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [],
            "arguments": {
                "self": [],
                "dealer_card": []
            }
        },
        "Hand.__str__": {
            "name": "__str__",
            "location": 31,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hand.__repr__": {
            "name": "__repr__",
            "location": 34,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hand.card": {
            "name": "card",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hand.split": {
            "name": "split",
            "location": 53,
            "return": [],
            "arguments": {
                "self": [],
                "deck": []
            }
        },
        "Hand_Lazy.total": {
            "name": "total",
            "location": 66,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hand_Lazy.card": {
            "name": "card",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hand_Eager.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [],
            "arguments": {
                "self": [],
                "dealer_card": []
            }
        },
        "Hand_Eager.card": {
            "name": "card",
            "location": 136,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hand_Eager._set_total": {
            "name": "_set_total",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_4/ch04_ex3.py": {
        "RateTimeDistance.__post_init__": {
            "name": "__post_init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RTD_Dynamic.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RTD_Dynamic.__repr__": {
            "name": "__repr__",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RTD_Dynamic.__setattr__": {
            "name": "__setattr__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str",
                    "list"
                ]
            }
        },
        "StateManager.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base": [
                    "int",
                    "str",
                    "bool",
                    "pathlib.Path"
                ]
            }
        },
        "StateManager.__get__": {
            "name": "__get__",
            "location": 133,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "int"
                ],
                "owner": [
                    "str",
                    "Mapping[str, List[str]]"
                ]
            }
        },
        "PersistentClass.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "b": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "PersistentClass.calculate": {
            "name": "calculate",
            "location": 150,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "PersistentClass.__str__": {
            "name": "__str__",
            "location": 155,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Conversion.__get__": {
            "name": "__get__",
            "location": 177,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "int",
                    "Optional[str]",
                    "list",
                    "Tuple[int, int]"
                ],
                "owner": [
                    "Type['Signature']",
                    "Type[Any]"
                ]
            }
        },
        "Conversion.__set__": {
            "name": "__set__",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "float",
                    "int"
                ],
                "value": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "Trip.__init__": {
            "name": "__init__",
            "location": 210,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "distance": [
                    "float",
                    "int",
                    "str"
                ],
                "kph": [
                    "int",
                    "bool",
                    "float"
                ],
                "mph": [
                    "int",
                    "bool",
                    "float"
                ],
                "knots": [
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "Trip.__str__": {
            "name": "__str__",
            "location": 228,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_4/ch04_ex4.py": {
        "Card.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "rank": [
                    "bool",
                    "Tuple[int]",
                    "int",
                    "bytes",
                    "List[str]"
                ],
                "suit": [
                    "bool",
                    "Tuple[int]",
                    "int",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "Card.__setattr__": {
            "name": "__setattr__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "Card.__getattr__": {
            "name": "__getattr__",
            "location": 23,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Type[T]",
                    "dict",
                    "Sequence[str]",
                    "Union[Literal, Literal]"
                ]
            }
        },
        "RTD_Solver.__init__": {
            "name": "__init__",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RTD_Solver.__getattr__": {
            "name": "__getattr__",
            "location": 99,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "SuperSecret.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hidden": [
                    "int",
                    "bool",
                    "float"
                ],
                "exposed": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SuperSecret.__getattribute__": {
            "name": "__getattribute__",
            "location": 126,
            "return": [
                "bytes",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Union[str, bytes]"
                ]
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_4/ch04_ex5.py": {
        "deck": {
            "name": "deck",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "RTD.compute": {
            "name": "compute",
            "location": 21,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Card.points": {
            "name": "points",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Ace.points": {
            "name": "points",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Face.points": {
            "name": "points",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_4/__init__.py": {},
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_5/ch05_ex1.py": {
        "Hand.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractBettingStrategy.bet": {
            "name": "bet",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "hand": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "AbstractBettingStrategy.record_win": {
            "name": "record_win",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hand": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "AbstractBettingStrategy.record_loss": {
            "name": "record_loss",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hand": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "AbstractBettingStrategy2.bet": {
            "name": "bet",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "hand": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "AbstractBettingStrategy2.record_win": {
            "name": "record_win",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hand": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "AbstractBettingStrategy2.record_loss": {
            "name": "record_loss",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hand": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "AbstractBettingStrategy2.__subclasshook__": {
            "name": "__subclasshook__",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "float",
                    "type"
                ],
                "subclass": [
                    "int",
                    "bytes",
                    "bool",
                    "float"
                ]
            }
        },
        "Simple.bet": {
            "name": "bet",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "hand": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Simple.record_win": {
            "name": "record_win",
            "location": 101,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hand": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "Simple.record_loss": {
            "name": "record_loss",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hand": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "LikeAbstract.aMethod": {
            "name": "aMethod",
            "location": 114,
            "return": [
                "builtins.int"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "int",
                    "Tuple[int, int]",
                    "bool"
                ]
            }
        },
        "LikeConcrete.aMethod": {
            "name": "aMethod",
            "location": 120,
            "return": [
                "typing.Iterator[typing.Any]"
            ],
            "arguments": {
                "self": [],
                "arg1": [
                    "int",
                    "Tuple[int, int]",
                    "bool"
                ],
                "arg2": [
                    "int",
                    "Tuple[int, int]",
                    "bool"
                ]
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_5/ch05_ex2.py": {},
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_5/__init__.py": {},
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_6/ch06_ex1.py": {
        "pow6": {
            "name": "pow6",
            "location": 157,
            "return": [
                "List[int]",
                "int"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "performance": {
            "name": "performance",
            "location": 172,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Power1.__call__": {
            "name": "__call__",
            "location": 20,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "T"
                ],
                "n": [
                    "int",
                    "T"
                ]
            }
        },
        "Power2.__call_": {
            "name": "__call_",
            "location": 39,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "T"
                ],
                "n": [
                    "int",
                    "T"
                ]
            }
        },
        "Power3.__call_": {
            "name": "__call_",
            "location": 60,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "T"
                ],
                "n": [
                    "int",
                    "T"
                ]
            }
        },
        "Power4.__call__": {
            "name": "__call__",
            "location": 83,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "T"
                ],
                "n": [
                    "T"
                ]
            }
        },
        "Power4i.__call__": {
            "name": "__call__",
            "location": 105,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "List[int]",
                    "bool"
                ],
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "Power5.__init__": {
            "name": "__init__",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Power5.__call__": {
            "name": "__call__",
            "location": 133,
            "return": [
                "Tuple[int, int]",
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "BettingStrategy.__init__": {
            "name": "__init__",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BettingStrategy.win": {
            "name": "win",
            "location": 250,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Set[str]",
                    "T"
                ]
            }
        },
        "BettingStrategy.loss": {
            "name": "loss",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "BettingStrategy.__call__": {
            "name": "__call__",
            "location": 262,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BettingMartingale.__init__": {
            "name": "__init__",
            "location": 280,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BettingMartingale.win": {
            "name": "win",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Set[str]",
                    "T"
                ]
            }
        },
        "BettingMartingale.loss": {
            "name": "loss",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "BettingMartingale.__call__": {
            "name": "__call__",
            "location": 303,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "BettingMartingale2.__init__": {
            "name": "__init__",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BettingMartingale2.__setattr__": {
            "name": "__setattr__",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ],
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "BettingMartingale2.__call__": {
            "name": "__call__",
            "location": 340,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_6/ch06_ex2.py": {
        "slow": {
            "name": "slow",
            "location": 17,
            "return": [],
            "arguments": {
                "source": []
            }
        },
        "some_update": {
            "name": "some_update",
            "location": 312,
            "return": [],
            "arguments": {
                "important_path": []
            }
        },
        "Debugging.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "aName": []
            }
        },
        "Debugging.__enter__": {
            "name": "__enter__",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Debugging.__exit__": {
            "name": "__exit__",
            "location": 97,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_value": [],
                "traceback": []
            }
        },
        "KnownSequence.__init__": {
            "name": "__init__",
            "location": 135,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "KnownSequence.__enter__": {
            "name": "__enter__",
            "location": 138,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "KnownSequence.__exit__": {
            "name": "__exit__",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_value": [],
                "traceback": []
            }
        },
        "Deck.__init__": {
            "name": "__init__",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "Deterministic_Deck.__init__": {
            "name": "__init__",
            "location": 196,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Deterministic_Deck.__enter__": {
            "name": "__enter__",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Deterministic_Deck.__exit__": {
            "name": "__exit__",
            "location": 205,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_value": [],
                "traceback": []
            }
        },
        "Deck2.__init__": {
            "name": "__init__",
            "location": 238,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "Deck2.pop": {
            "name": "pop",
            "location": 246,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Updating.__init__": {
            "name": "__init__",
            "location": 277,
            "return": [],
            "arguments": {
                "self": [],
                "target": []
            }
        },
        "Updating.__enter__": {
            "name": "__enter__",
            "location": 281,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Updating.__exit__": {
            "name": "__exit__",
            "location": 292,
            "return": [],
            "arguments": {
                "self": [],
                "exc_type": [],
                "exc_value": [],
                "traceback": []
            }
        },
        "slow.Counter.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [],
            "arguments": {
                "self": [],
                "source": []
            }
        },
        "slow.Counter.__iter__": {
            "name": "__iter__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_6/__init__.py": {},
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_7/ch07_ex1.py": {
        "card": {
            "name": "card",
            "location": 55,
            "return": [],
            "arguments": {
                "rank": [],
                "suit": []
            }
        },
        "card_t": {
            "name": "card_t",
            "location": 70,
            "return": [],
            "arguments": {
                "rank": [],
                "suit": []
            }
        },
        "get_options": {
            "name": "get_options",
            "location": 190,
            "return": [],
            "arguments": {
                "argv": []
            }
        },
        "dice_examples": {
            "name": "dice_examples",
            "location": 335,
            "return": [],
            "arguments": {
                "n": [],
                "seed": []
            }
        },
        "value_iterator": {
            "name": "value_iterator",
            "location": 361,
            "return": [],
            "arguments": {
                "count": [],
                "seed": []
            }
        },
        "freq_ordered": {
            "name": "freq_ordered",
            "location": 372,
            "return": [],
            "arguments": {
                "values": []
            }
        },
        "bag_demo": {
            "name": "bag_demo",
            "location": 423,
            "return": [],
            "arguments": {}
        },
        "BlackjackCard_T.is_ace": {
            "name": "is_ace",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AceCard.is_ace": {
            "name": "is_ace",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AceCard_T.is_ace": {
            "name": "is_ace",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MultiDeck.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_7/ch07_ex2.py": {
        "mean": {
            "name": "mean",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "outcomes": [
                    "List[int]",
                    "list",
                    "bool",
                    "List[float]",
                    "str",
                    "int"
                ]
            }
        },
        "stdev": {
            "name": "stdev",
            "location": 22,
            "return": [
                "str",
                "bool",
                "Callable"
            ],
            "arguments": {
                "outcomes": [
                    "list",
                    "float",
                    "tuple",
                    "List[int]",
                    "List[tuple]",
                    "List[float]",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "data_gen": {
            "name": "data_gen",
            "location": 71,
            "return": [
                "str",
                "int",
                "bytes",
                "set"
            ],
            "arguments": {}
        },
        "demo_statslist": {
            "name": "demo_statslist",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "StatsList.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterable": [
                    "Optional[Iterable[float]]",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "List[Callable]",
                    "str"
                ]
            }
        },
        "StatsList.mean": {
            "name": "mean",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatsList.stdev": {
            "name": "stdev",
            "location": 50,
            "return": [
                "str",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Explore.__getitem__": {
            "name": "__getitem__",
            "location": 92,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int"
                ]
            }
        },
        "StatsList2.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iterable": [
                    "Optional[Iterable[float]]",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "List[Callable]",
                    "str"
                ]
            }
        },
        "StatsList2._new": {
            "name": "_new",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "float",
                    "Iterable[object]"
                ]
            }
        },
        "StatsList2._rmv": {
            "name": "_rmv",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "Iterable[object]",
                    "float",
                    "str"
                ]
            }
        },
        "StatsList2.insert": {
            "name": "insert",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "list",
                    "str",
                    "tuple",
                    "float"
                ],
                "value": [
                    "list",
                    "Optional[Sequence[T]]",
                    "str"
                ]
            }
        },
        "StatsList2.pop": {
            "name": "pop",
            "location": 142,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "bool",
                    "int",
                    "Callable[[List], None]",
                    "float"
                ]
            }
        },
        "StatsList2.append": {
            "name": "append",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "list",
                    "float",
                    "int",
                    "Union[str, list]",
                    "set",
                    "str",
                    "List[List[Any]]"
                ]
            }
        },
        "StatsList2.extend": {
            "name": "extend",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sequence": [
                    "List[str]",
                    "list",
                    "Iterable[float]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "StatsList2.remove": {
            "name": "remove",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "float",
                    "Union[int, float]"
                ]
            }
        },
        "StatsList2.__iadd__": {
            "name": "__iadd__",
            "location": 160,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "sequence": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "StatsList2.__add__": {
            "name": "__add__",
            "location": 165,
            "return": [
                "bool",
                "Dict[str, Tuple[int, int]]"
            ],
            "arguments": {
                "self": [],
                "sequence": [
                    "int",
                    "VT"
                ]
            }
        },
        "StatsList2.mean": {
            "name": "mean",
            "location": 176,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatsList2.stdev": {
            "name": "stdev",
            "location": 180,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatsList2.__setitem__": {
            "name": "__setitem__",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "float",
                    "list",
                    "Optional[Union[int, Any]]"
                ],
                "value": [
                    "list",
                    "Iterator[Any]",
                    "Optional[Sequence[T]]"
                ]
            }
        },
        "StatsList2.__delitem__": {
            "name": "__delitem__",
            "location": 206,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "Union[int, slice]",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "StatsList3.__init__": {
            "name": "__init__",
            "location": 297,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatsList3.append": {
            "name": "append",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "list",
                    "float",
                    "str",
                    "List[Union[int, float]]",
                    "Callable"
                ]
            }
        },
        "StatsList3.__getitem__": {
            "name": "__getitem__",
            "location": 311,
            "return": [
                "List[Dict]",
                "List[str]",
                "List[int]",
                "str",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "StatsList3.mean": {
            "name": "mean",
            "location": 315,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatsList3.stdev": {
            "name": "stdev",
            "location": 319,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatsCounter.mean": {
            "name": "mean",
            "location": 343,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatsCounter.stdev": {
            "name": "stdev",
            "location": 349,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatsCounter.median": {
            "name": "median",
            "location": 356,
            "return": [
                "List[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatsCounter.median2": {
            "name": "median2",
            "location": 361,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "int",
                "Union[int, None]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_7/ch07_ex3.py": {
        "Comparable.__lt__": {
            "name": "__lt__",
            "location": 34,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "Comparable.__ge__": {
            "name": "__ge__",
            "location": 37,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsFloat",
                    "List[str]",
                    "Union[int, float]",
                    "AbstractSet[T]"
                ]
            }
        },
        "TreeNode.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict",
                    "Union[AsyncIterable[Any], Iterable[Any]]",
                    "Optional[Dict[str, Any]]",
                    "Tuple[int, int, str]",
                    "Set[bytes]",
                    "Dict[str, str]"
                ],
                "less": [
                    "Optional[str]",
                    "bool"
                ],
                "more": [
                    "int",
                    "bool",
                    "str"
                ],
                "parent": [
                    "bool",
                    "Tuple[type]",
                    "Type[T]",
                    "List[str]",
                    "Sequence[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "TreeNode.parent": {
            "name": "parent",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Type",
                    "Union[str, int, float]"
                ]
            }
        },
        "TreeNode.__repr__": {
            "name": "__repr__",
            "location": 73,
            "return": [
                "Match",
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeNode.find": {
            "name": "find",
            "location": 76,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict"
                ]
            }
        },
        "TreeNode.__iter__": {
            "name": "__iter__",
            "location": 88,
            "return": [
                "typing.Iterator[Comparable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeNode.add": {
            "name": "add",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "T",
                    "Union[int, slice]",
                    "list",
                    "dict",
                    "List[T]",
                    "Sequence[str]"
                ]
            }
        },
        "TreeNode.remove": {
            "name": "remove",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "T",
                    "Union[int, slice]",
                    "dict",
                    "List[T]",
                    "int"
                ]
            }
        },
        "TreeNode._least": {
            "name": "_least",
            "location": 138,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeNode._replace": {
            "name": "_replace",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new": [
                    "Optional[Awaitable[None]]",
                    "Optional[bytes]",
                    "Optional[\"Outcome\"]"
                ]
            }
        },
        "Tree.__init__": {
            "name": "__init__",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "source": [
                    "list",
                    "Iterable[Any]",
                    "int"
                ]
            }
        },
        "Tree.add": {
            "name": "add",
            "location": 163,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict"
                ]
            }
        },
        "Tree.discard": {
            "name": "discard",
            "location": 167,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "dict",
                    "Awaitable",
                    "bytes",
                    "Tuple[bool, float]"
                ]
            }
        },
        "Tree.__contains__": {
            "name": "__contains__",
            "location": 177,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Dict[str, str]",
                    "int",
                    "str",
                    "Callable"
                ]
            }
        },
        "Tree.__iter__": {
            "name": "__iter__",
            "location": 184,
            "return": [
                "typing.Iterator[Comparable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tree.__len__": {
            "name": "__len__",
            "location": 190,
            "return": [
                "int",
                "List[Tuple[int, float, float]]",
                "List[int]",
                "List[List[int]]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_7/ch07_ex4.py": {
        "performance": {
            "name": "performance",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_7/__init__.py": {},
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_8/ch08_ex1.py": {
        "trace": {
            "name": "trace",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "frame": [
                    "dict",
                    "Dict[str, str]",
                    "str"
                ],
                "event": [
                    "int",
                    "Hashable",
                    "Optional[Dict]"
                ],
                "arg": [
                    "str",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "NoisyFloat.__add__": {
            "name": "__add__",
            "location": 26,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Match",
                    "str",
                    "Mapping[str, str]"
                ]
            }
        },
        "NoisyFloat.__radd__": {
            "name": "__radd__",
            "location": 30,
            "return": [
                "Tuple[Any, Any, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "FixedPoint.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Union[int, float]"
                ],
                "scale": [
                    "int"
                ]
            }
        },
        "FixedPoint.__str__": {
            "name": "__str__",
            "location": 71,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixedPoint.__repr__": {
            "name": "__repr__",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixedPoint.__format__": {
            "name": "__format__",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "specification": [
                    "Callable"
                ]
            }
        },
        "FixedPoint.numerator": {
            "name": "numerator",
            "location": 82,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixedPoint.denominator": {
            "name": "denominator",
            "location": 85,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixedPoint.__add__": {
            "name": "__add__",
            "location": 88,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "FixedPoint.__sub__": {
            "name": "__sub__",
            "location": 99,
            "return": [
                "Dict[str, int]",
                "int",
                "Optional[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "FixedPoint.__mul__": {
            "name": "__mul__",
            "location": 110,
            "return": [
                "Dict[str, int]",
                "int",
                "Optional[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union['FixedPoint', int]"
                ]
            }
        },
        "FixedPoint.__truediv__": {
            "name": "__truediv__",
            "location": 119,
            "return": [
                "Dict[str, int]",
                "Dict[str, Any]",
                "List[List[str]]",
                "Iterable[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union['FixedPoint', int]"
                ]
            }
        },
        "FixedPoint.__floordiv__": {
            "name": "__floordiv__",
            "location": 126,
            "return": [
                "Dict[str, int]",
                "Dict[str, Any]",
                "List[List[str]]",
                "Iterable[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union['FixedPoint', int]"
                ]
            }
        },
        "FixedPoint.__mod__": {
            "name": "__mod__",
            "location": 133,
            "return": [
                "Dict[str, int]",
                "Dict[str, Any]",
                "List[List[str]]",
                "Iterable[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]",
                    "Union['FixedPoint', int]"
                ]
            }
        },
        "FixedPoint.__pow__": {
            "name": "__pow__",
            "location": 140,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]",
                    "Union['FixedPoint', int]"
                ]
            }
        },
        "FixedPoint.__abs__": {
            "name": "__abs__",
            "location": 147,
            "return": [
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixedPoint.__float__": {
            "name": "__float__",
            "location": 150,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixedPoint.__int__": {
            "name": "__int__",
            "location": 153,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixedPoint.__trunc__": {
            "name": "__trunc__",
            "location": 156,
            "return": [
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixedPoint.__ceil__": {
            "name": "__ceil__",
            "location": 159,
            "return": [
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixedPoint.__floor__": {
            "name": "__floor__",
            "location": 162,
            "return": [
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixedPoint.__round__": {
            "name": "__round__",
            "location": 167,
            "return": [
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "ndigits": [
                    "float",
                    "str",
                    "T",
                    "int"
                ]
            }
        },
        "FixedPoint.__neg__": {
            "name": "__neg__",
            "location": 170,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixedPoint.__pos__": {
            "name": "__pos__",
            "location": 173,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixedPoint.__eq__": {
            "name": "__eq__",
            "location": 178,
            "return": [
                "int",
                "Union[int, Tuple[int, ...]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Iterable[T]",
                    "float"
                ]
            }
        },
        "FixedPoint.__ne__": {
            "name": "__ne__",
            "location": 187,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "FixedPoint.__le__": {
            "name": "__le__",
            "location": 190,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, float]"
                ]
            }
        },
        "FixedPoint.__lt__": {
            "name": "__lt__",
            "location": 193,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, float]"
                ]
            }
        },
        "FixedPoint.__ge__": {
            "name": "__ge__",
            "location": 196,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, float]"
                ]
            }
        },
        "FixedPoint.__gt__": {
            "name": "__gt__",
            "location": 199,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, float]"
                ]
            }
        },
        "FixedPoint.__hash__": {
            "name": "__hash__",
            "location": 202,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FixedPoint.__radd__": {
            "name": "__radd__",
            "location": 221,
            "return": [
                "Dict[str, int]",
                "int",
                "Optional[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union['FixedPoint', int]"
                ]
            }
        },
        "FixedPoint.__rsub__": {
            "name": "__rsub__",
            "location": 232,
            "return": [
                "Dict[str, int]",
                "int",
                "Optional[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union['FixedPoint', int]"
                ]
            }
        },
        "FixedPoint.__rmul__": {
            "name": "__rmul__",
            "location": 243,
            "return": [
                "Dict[str, int]",
                "int",
                "Optional[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union['FixedPoint', int]"
                ]
            }
        },
        "FixedPoint.__rtruediv__": {
            "name": "__rtruediv__",
            "location": 252,
            "return": [
                "Dict[str, int]",
                "Dict[str, Any]",
                "List[List[str]]",
                "Iterable[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "FixedPoint.__rfloordiv__": {
            "name": "__rfloordiv__",
            "location": 259,
            "return": [
                "Dict[str, int]",
                "Dict[str, Any]",
                "List[List[str]]",
                "Iterable[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "FixedPoint.__rmod__": {
            "name": "__rmod__",
            "location": 266,
            "return": [
                "Dict[str, int]",
                "Dict[str, Any]",
                "List[List[str]]",
                "Iterable[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "FixedPoint.__rpow__": {
            "name": "__rpow__",
            "location": 273,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "FixedPoint.round_to": {
            "name": "round_to",
            "location": 280,
            "return": [
                "Iterable[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "new_scale": [
                    "int"
                ]
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_8/__init__.py": {},
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_9/ch09_ex1.py": {
        "debug": {
            "name": "debug",
            "location": 214,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "ackermann": {
            "name": "ackermann",
            "location": 227,
            "return": [],
            "arguments": {
                "m": [],
                "n": []
            }
        },
        "debug2": {
            "name": "debug2",
            "location": 249,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "ackermann2": {
            "name": "ackermann2",
            "location": 263,
            "return": [],
            "arguments": {
                "m": [],
                "n": []
            }
        },
        "simpler": {
            "name": "simpler",
            "location": 275,
            "return": [],
            "arguments": {
                "x": [],
                "y": []
            }
        },
        "decorator": {
            "name": "decorator",
            "location": 292,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "debug_named": {
            "name": "debug_named",
            "location": 304,
            "return": [],
            "arguments": {
                "log_name": []
            }
        },
        "ackermann3": {
            "name": "ackermann3",
            "location": 322,
            "return": [],
            "arguments": {
                "m": [],
                "n": []
            }
        },
        "standard": {
            "name": "standard",
            "location": 346,
            "return": [],
            "arguments": {
                "class_": []
            }
        },
        "nonstandard": {
            "name": "nonstandard",
            "location": 351,
            "return": [],
            "arguments": {
                "based_on": []
            }
        },
        "audit": {
            "name": "audit",
            "location": 399,
            "return": [],
            "arguments": {
                "method": []
            }
        },
        "memento": {
            "name": "memento",
            "location": 471,
            "return": [],
            "arguments": {
                "class_": []
            }
        },
        "Angle.from_radians": {
            "name": "from_radians",
            "location": 26,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "Angle.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "degrees": []
            }
        },
        "Angle.radians": {
            "name": "radians",
            "location": 33,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Angle.degrees": {
            "name": "degrees",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CardTO.__init__": {
            "name": "__init__",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "rank": [],
                "suit": []
            }
        },
        "CardTO.__eq__": {
            "name": "__eq__",
            "location": 81,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "CardTO.__lt__": {
            "name": "__lt__",
            "location": 84,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "CardTO.__str__": {
            "name": "__str__",
            "location": 87,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CardDC.__eq__": {
            "name": "__eq__",
            "location": 116,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "CardDC.__lt__": {
            "name": "__lt__",
            "location": 119,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "CardDC.__le__": {
            "name": "__le__",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "CardDC.__str__": {
            "name": "__str__",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Deck.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [],
            "arguments": {
                "self": [],
                "size": []
            }
        },
        "EnumDomain.domain": {
            "name": "domain",
            "location": 171,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "debug.logged_function": {
            "name": "logged_function",
            "location": 217,
            "return": [],
            "arguments": {}
        },
        "debug2.logged_function": {
            "name": "logged_function",
            "location": 253,
            "return": [],
            "arguments": {}
        },
        "decorator.concrete_decorator": {
            "name": "concrete_decorator",
            "location": 294,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "debug_named.concrete_decorator": {
            "name": "concrete_decorator",
            "location": 307,
            "return": [],
            "arguments": {
                "function": []
            }
        },
        "nonstandard.concrete_decorator": {
            "name": "concrete_decorator",
            "location": 353,
            "return": [],
            "arguments": {
                "class_": []
            }
        },
        "Unit.value": {
            "name": "value",
            "location": 364,
            "return": [],
            "arguments": {
                "class_": [],
                "value": []
            }
        },
        "Unit.convert": {
            "name": "convert",
            "location": 370,
            "return": [],
            "arguments": {
                "class_": [],
                "value": []
            }
        },
        "audit.wrapper": {
            "name": "wrapper",
            "location": 402,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hand.__init__": {
            "name": "__init__",
            "location": 421,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Hand.__iadd__": {
            "name": "__iadd__",
            "location": 425,
            "return": [],
            "arguments": {
                "self": [],
                "card": []
            }
        },
        "Hand.__repr__": {
            "name": "__repr__",
            "location": 430,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "memento.memento_method": {
            "name": "memento_method",
            "location": 473,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StatefulClass.__init__": {
            "name": "__init__",
            "location": 486,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "StatefulClass.__repr__": {
            "name": "__repr__",
            "location": 489,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Memento.memento": {
            "name": "memento",
            "location": 502,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "StatefulClass2.__init__": {
            "name": "__init__",
            "location": 508,
            "return": [],
            "arguments": {
                "self": [],
                "value": []
            }
        },
        "StatefulClass2.__repr__": {
            "name": "__repr__",
            "location": 511,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "decorator.concrete_decorator.wrapped": {
            "name": "wrapped",
            "location": 296,
            "return": [],
            "arguments": {}
        },
        "debug_named.concrete_decorator.wrapped": {
            "name": "wrapped",
            "location": 310,
            "return": [],
            "arguments": {}
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_9/ch09_ex2.py": {
        "logged": {
            "name": "logged",
            "location": 45,
            "return": [
                "List[str]",
                "bool",
                "\"Pipeline\"",
                "List[Dict[str, Any]]",
                "\"State\"",
                "\"Attribute\""
            ],
            "arguments": {
                "class_": [
                    "Type",
                    "logging.Logger",
                    "str"
                ]
            }
        },
        "UglyClass1.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UglyClass1.method": {
            "name": "method",
            "location": 24,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "UglyClass2.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UglyClass2.method": {
            "name": "method",
            "location": 36,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SomeClass.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SomeClass.method": {
            "name": "method",
            "location": 56,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoggedInstance.__new__": {
            "name": "__new__",
            "location": 65,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Exception",
                    "dict",
                    "bool"
                ]
            }
        },
        "SomeClass2.__init__": {
            "name": "__init__",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SomeClass2.method": {
            "name": "method",
            "location": 76,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoggedClassMeta.__new__": {
            "name": "__new__",
            "location": 86,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "Set[str]",
                    "type",
                    "bool"
                ],
                "name": [
                    "str",
                    "dict",
                    "Set[str]",
                    "type",
                    "bool"
                ],
                "bases": [
                    "str",
                    "dict",
                    "Set[str]",
                    "type",
                    "bool"
                ],
                "namespace": [
                    "str",
                    "dict",
                    "Set[str]",
                    "type",
                    "bool"
                ]
            }
        },
        "SomeClass3.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SomeClass3.method": {
            "name": "method",
            "location": 102,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LoggedWithHook.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Union[int, float]",
                    "Tuple[str, int]",
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "Union[int, float]",
                    "Tuple[str, int]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "SomeClass4.__init__": {
            "name": "__init__",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SomeClass4.method": {
            "name": "method",
            "location": 117,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SomeClass4s.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SomeClass4s.method": {
            "name": "method",
            "location": 126,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Mastering-Object-Oriented-Python-Second-Edition-master/Chapter_9/__init__.py": {},
    "Mastering-Object-Oriented-Python-Second-Edition-master/stubs/sqlite3.py": {
        "connect": {
            "name": "connect",
            "location": 7,
            "return": [],
            "arguments": {
                "database": [],
                "timeout": [],
                "detect_types": [],
                "isolation_level": [],
                "check_same_thread": [],
                "factory": [],
                "cached_statements": [],
                "uri": []
            }
        }
    }
}
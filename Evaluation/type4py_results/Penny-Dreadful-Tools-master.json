{
    "Penny-Dreadful-Tools-master/build.py": {
        "build": {
            "name": "build",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "buildpy": {
            "name": "buildpy",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "buildjs": {
            "name": "buildjs",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/conftest.py": {},
    "Penny-Dreadful-Tools-master/dev.py": {
        "cli": {
            "name": "cli",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "build": {
            "name": "build",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "buildpy": {
            "name": "buildpy",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "buildjs": {
            "name": "buildjs",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "lint": {
            "name": "lint",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "do_lint": {
            "name": "do_lint",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "stylefix": {
            "name": "stylefix",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "mypy": {
            "name": "mypy",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "list",
                    "str",
                    "List[Tuple[float, str]]",
                    "Sequence[str]",
                    "List[T]",
                    "Union[List[float], List[int]]"
                ],
                "strict": [
                    "list",
                    "str",
                    "List[Tuple[float, str]]",
                    "Sequence[str]",
                    "List[T]",
                    "Union[List[float], List[int]]"
                ],
                "typeshedding": [
                    "list",
                    "str",
                    "List[Tuple[float, str]]",
                    "Sequence[str]",
                    "List[T]",
                    "Union[List[float], List[int]]"
                ]
            }
        },
        "do_mypy": {
            "name": "do_mypy",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "Sequence[str]",
                    "str",
                    "os.PathLike"
                ],
                "strict": [
                    "bool",
                    "int",
                    "set"
                ],
                "typeshedding": [
                    "bool",
                    "int",
                    "set"
                ]
            }
        },
        "unit": {
            "name": "unit",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "do_unit": {
            "name": "do_unit",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "bool",
                    "dict",
                    "str",
                    "Callable",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "runtests": {
            "name": "runtests",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "Union[int, slice]",
                    "T",
                    "bool",
                    "Tuple[str]"
                ],
                "m": [
                    "str",
                    "float",
                    "int",
                    "mypy.types.TupleType"
                ],
                "mark": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "upload_coverage": {
            "name": "upload_coverage",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "sort": {
            "name": "sort",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "fix": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "do_sort": {
            "name": "do_sort",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "fix": [
                    "bool",
                    "int",
                    "set"
                ]
            }
        },
        "reset_db": {
            "name": "reset_db",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "safe_push": {
            "name": "safe_push",
            "location": 180,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "int",
                    "tuple"
                ]
            }
        },
        "do_safe_push": {
            "name": "do_safe_push",
            "location": 183,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "float",
                    "Tuple[str, int]"
                ]
            }
        },
        "push": {
            "name": "push",
            "location": 192,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "do_push": {
            "name": "do_push",
            "location": 195,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "pull_request": {
            "name": "pull_request",
            "location": 202,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": []
            }
        },
        "do_pull_request": {
            "name": "do_pull_request",
            "location": 205,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "str",
                    "List[str]",
                    "subprocess.CompletedProcess",
                    "qutebrowser.api.apitypes.Tab",
                    "IO",
                    "dict",
                    "BinaryIO"
                ]
            }
        },
        "jslint": {
            "name": "jslint",
            "location": 214,
            "return": [
                "None"
            ],
            "arguments": {
                "fix": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "do_jslint": {
            "name": "do_jslint",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "fix": [
                    "bool",
                    "int",
                    "set"
                ]
            }
        },
        "jsfix": {
            "name": "jsfix",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "coverage": {
            "name": "coverage",
            "location": 231,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "watch": {
            "name": "watch",
            "location": 238,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "branch": {
            "name": "branch",
            "location": 244,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "args": []
            }
        },
        "stash_if_any": {
            "name": "stash_if_any",
            "location": 258,
            "return": [
                "str",
                "bool",
                "Iterable[str]",
                "List[List[str]]"
            ],
            "arguments": {}
        },
        "pop_if_any": {
            "name": "pop_if_any",
            "location": 264,
            "return": [
                "None"
            ],
            "arguments": {
                "label": [
                    "str",
                    "Mapping[str, Any]",
                    "dict"
                ]
            }
        },
        "popclean": {
            "name": "popclean",
            "location": 274,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "check": {
            "name": "check",
            "location": 288,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "do_check": {
            "name": "do_check",
            "location": 291,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "full_check": {
            "name": "full_check",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "do_full_check": {
            "name": "do_full_check",
            "location": 305,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "float",
                    "str",
                    "int"
                ]
            }
        },
        "release": {
            "name": "release",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "int",
                    "List[Callable]"
                ]
            }
        },
        "find_files": {
            "name": "find_files",
            "location": 316,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "needle": [
                    "str"
                ],
                "file_extension": [
                    "str"
                ],
                "exclude": [
                    "bytes",
                    "str"
                ]
            }
        },
        "swagger": {
            "name": "swagger",
            "location": 328,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "repip": {
            "name": "repip",
            "location": 337,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/dev_test.py": {
        "test_find_files": {
            "name": "test_find_files",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/run.py": {
        "wait_for_db": {
            "name": "wait_for_db",
            "location": 17,
            "return": [
                "int",
                "DefaultDict",
                "str",
                "Set[VT]"
            ],
            "arguments": {
                "_": [
                    "bool"
                ],
                "__": [
                    "bool"
                ],
                "value": [
                    "bool"
                ]
            }
        },
        "cli": {
            "name": "cli",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "discordbot": {
            "name": "discordbot",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "decksite": {
            "name": "decksite",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "profiler": {
            "name": "profiler",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "price_grabber": {
            "name": "price_grabber",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "srv_price": {
            "name": "srv_price",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "scraper": {
            "name": "scraper",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "source": [
                    "str",
                    "int",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "scrape_event": {
            "name": "scrape_event",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "eventname": [
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "maintenance": {
            "name": "maintenance",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "script": [
                    "str",
                    "mode.utils.types.trees.NodeT",
                    "float"
                ]
            }
        },
        "rotation": {
            "name": "rotation",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "logsite": {
            "name": "logsite",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "modo_bugs": {
            "name": "modo_bugs",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "task": {
            "name": "task",
            "location": 100,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        },
        "call": {
            "name": "call",
            "location": 135,
            "return": [
                "starlette.types.Receive",
                "Callable",
                "starlette.types.Send",
                "int",
                "float"
            ],
            "arguments": {
                "args": [],
                "s": [
                    "str",
                    "Type[T]",
                    "T",
                    "int"
                ]
            }
        },
        "run_all_tasks": {
            "name": "run_all_tasks",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "module": [
                    "str",
                    "dict",
                    "Optional[str]"
                ],
                "with_flag": [
                    "Optional[str]",
                    "str",
                    "Callable",
                    "Optional[bytes]"
                ]
            }
        },
        "wait_for_db.attempt": {
            "name": "attempt",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "interval": [
                    "int",
                    "List['world.PerceivedNoise']",
                    "bool"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/setup.py": {},
    "Penny-Dreadful-Tools-master/analysis/analysis.py": {
        "preaggregate": {
            "name": "preaggregate",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "preaggregate_played_person": {
            "name": "preaggregate_played_person",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "played_cards_by_person": {
            "name": "played_cards_by_person",
            "location": 71,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str",
                "Optional[int]",
                "set"
            ],
            "arguments": {
                "person_id": [
                    "str",
                    "bytes",
                    "List[bytes]"
                ],
                "season_id": [
                    "int",
                    "str"
                ]
            }
        },
        "process_logs": {
            "name": "process_logs",
            "location": 100,
            "return": [
                "bytes",
                "float"
            ],
            "arguments": {}
        },
        "next_ids": {
            "name": "next_ids",
            "location": 125,
            "return": [
                "str",
                "int",
                "bool",
                "IO[str]"
            ],
            "arguments": {}
        },
        "process_log": {
            "name": "process_log",
            "location": 145,
            "return": [
                "str"
            ],
            "arguments": {
                "log": [
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "init": {
            "name": "init",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/analysis/analysis_test.py": {
        "test_process_log": {
            "name": "test_process_log",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/analysis/__init__.py": {},
    "Penny-Dreadful-Tools-master/decksite/auth.py": {
        "login_required": {
            "name": "login_required",
            "location": 10,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "demimod_required": {
            "name": "demimod_required",
            "location": 18,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "admin_required": {
            "name": "admin_required",
            "location": 28,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "admin_required_no_redirect": {
            "name": "admin_required_no_redirect",
            "location": 38,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "Type",
                "Callable"
            ],
            "arguments": {
                "f": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "load_person": {
            "name": "load_person",
            "location": 47,
            "return": [
                "str",
                "type",
                "Iterable[str]"
            ],
            "arguments": {
                "f": [
                    "str",
                    "bool",
                    "Type[object]",
                    "dict"
                ]
            }
        },
        "discord_id": {
            "name": "discord_id",
            "location": 58,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "person_id": {
            "name": "person_id",
            "location": 61,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "mtgo_username": {
            "name": "mtgo_username",
            "location": 64,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "login": {
            "name": "login",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "p": []
            }
        },
        "hide_intro": {
            "name": "hide_intro",
            "location": 76,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "login_required.decorated_function": {
            "name": "decorated_function",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "demimod_required.decorated_function": {
            "name": "decorated_function",
            "location": 20,
            "return": [],
            "arguments": {}
        },
        "admin_required.decorated_function": {
            "name": "decorated_function",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "admin_required_no_redirect.decorated_function": {
            "name": "decorated_function",
            "location": 40,
            "return": [],
            "arguments": {}
        },
        "load_person.decorated_function": {
            "name": "decorated_function",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/decksite/cache.py": {
        "cached": {
            "name": "cached",
            "location": 16,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "cached_impl": {
            "name": "cached_impl",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cacheable": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "must_revalidate": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "client_only": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "client_timeout": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "server_timeout": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "key": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "cached_impl.decorator": {
            "name": "decorator",
            "location": 30,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "List[magic.models.Card]"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "cached_impl.decorator.decorated_function": {
            "name": "decorated_function",
            "location": 32,
            "return": [
                "Callable[[], None]",
                "Dict[str, Any]",
                "dict",
                "int",
                "Type[T]"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/decksite/database.py": {
        "db": {
            "name": "db",
            "location": 12,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "setup_in_app_context": {
            "name": "setup_in_app_context",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "setup": {
            "name": "setup",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "db_version": {
            "name": "db_version",
            "location": 46,
            "return": [
                "str",
                "bool",
                "Sequence[str]",
                "int",
                "Tuple[List[Any], int]"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/decksite/deck_name.py": {
        "normalize": {
            "name": "normalize",
            "location": 59,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "file_name": {
            "name": "file_name",
            "location": 92,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "replace_space_alternatives": {
            "name": "replace_space_alternatives",
            "location": 98,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "remove_extra_spaces": {
            "name": "remove_extra_spaces",
            "location": 103,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "remove_pd": {
            "name": "remove_pd",
            "location": 106,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "remove_hashtags": {
            "name": "remove_hashtags",
            "location": 117,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "remove_brackets": {
            "name": "remove_brackets",
            "location": 121,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "expand_common_abbreviations": {
            "name": "expand_common_abbreviations",
            "location": 124,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "whitelisted": {
            "name": "whitelisted",
            "location": 129,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "normalize_colors": {
            "name": "normalize_colors",
            "location": 135,
            "return": [],
            "arguments": {
                "name": [],
                "colors": []
            }
        },
        "is_true_match": {
            "name": "is_true_match",
            "location": 162,
            "return": [],
            "arguments": {
                "color_word": []
            }
        },
        "canonicalize_colors": {
            "name": "canonicalize_colors",
            "location": 167,
            "return": [],
            "arguments": {
                "colors": []
            }
        },
        "regex_pattern": {
            "name": "regex_pattern",
            "location": 178,
            "return": [],
            "arguments": {
                "pattern": []
            }
        },
        "standardize_color_string": {
            "name": "standardize_color_string",
            "location": 181,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "name_from_colors": {
            "name": "name_from_colors",
            "location": 188,
            "return": [],
            "arguments": {
                "colors": []
            }
        },
        "add_colors_if_no_deckname": {
            "name": "add_colors_if_no_deckname",
            "location": 195,
            "return": [],
            "arguments": {
                "name": [],
                "colors": []
            }
        },
        "add_archetype_if_just_colors": {
            "name": "add_archetype_if_just_colors",
            "location": 200,
            "return": [],
            "arguments": {
                "name": [],
                "archetype": []
            }
        },
        "remove_mono_if_not_first_word": {
            "name": "remove_mono_if_not_first_word",
            "location": 211,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "remove_profanity": {
            "name": "remove_profanity",
            "location": 214,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "ucase_trailing_roman_numerals": {
            "name": "ucase_trailing_roman_numerals",
            "location": 221,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "strip_leading_punctuation": {
            "name": "strip_leading_punctuation",
            "location": 229,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "remove_leading_deck": {
            "name": "remove_leading_deck",
            "location": 233,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "remove_extraneous_hyphens": {
            "name": "remove_extraneous_hyphens",
            "location": 236,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "correct_case_of_color_names": {
            "name": "correct_case_of_color_names",
            "location": 240,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "enforce_max_len": {
            "name": "enforce_max_len",
            "location": 246,
            "return": [],
            "arguments": {
                "name": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/deck_name_test.py": {
        "test_normalize": {
            "name": "test_normalize",
            "location": 119,
            "return": [],
            "arguments": {
                "original_name": [],
                "expected": [],
                "colors": [],
                "archetype_name": []
            }
        },
        "test_remove_pd": {
            "name": "test_remove_pd",
            "location": 125,
            "return": [],
            "arguments": {}
        },
        "test_invalid_color": {
            "name": "test_invalid_color",
            "location": 132,
            "return": [],
            "arguments": {}
        },
        "test_canonicalize_colors": {
            "name": "test_canonicalize_colors",
            "location": 142,
            "return": [],
            "arguments": {}
        },
        "test_normalize_colors": {
            "name": "test_normalize_colors",
            "location": 147,
            "return": [],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/decksite/deck_type.py": {},
    "Penny-Dreadful-Tools-master/decksite/league.py": {
        "signup": {
            "name": "signup",
            "location": 184,
            "return": [],
            "arguments": {
                "form": []
            }
        },
        "identifier": {
            "name": "identifier",
            "location": 189,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "deck_options": {
            "name": "deck_options",
            "location": 193,
            "return": [],
            "arguments": {
                "decks": [],
                "v": [],
                "viewer_id": [],
                "show_details": []
            }
        },
        "deck_option_text": {
            "name": "deck_option_text",
            "location": 201,
            "return": [],
            "arguments": {
                "d": [],
                "viewer_id": [],
                "show_details": []
            }
        },
        "active_decks": {
            "name": "active_decks",
            "location": 208,
            "return": [],
            "arguments": {
                "additional_where": []
            }
        },
        "active_decks_by": {
            "name": "active_decks_by",
            "location": 233,
            "return": [],
            "arguments": {
                "mtgo_username": []
            }
        },
        "active_decks_by_person": {
            "name": "active_decks_by_person",
            "location": 236,
            "return": [],
            "arguments": {
                "person_id": []
            }
        },
        "report": {
            "name": "report",
            "location": 239,
            "return": [],
            "arguments": {
                "form": []
            }
        },
        "winner_and_loser": {
            "name": "winner_and_loser",
            "location": 304,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "active_competition_id_query": {
            "name": "active_competition_id_query",
            "location": 311,
            "return": [],
            "arguments": {}
        },
        "active_league": {
            "name": "active_league",
            "location": 322,
            "return": [],
            "arguments": {
                "should_load_decks": []
            }
        },
        "determine_end_of_league": {
            "name": "determine_end_of_league",
            "location": 335,
            "return": [],
            "arguments": {
                "start_date": [],
                "next_rotation": [],
                "lookahead": []
            }
        },
        "determine_league_name": {
            "name": "determine_league_name",
            "location": 357,
            "return": [],
            "arguments": {
                "start_date": [],
                "end_date": []
            }
        },
        "retire_deck": {
            "name": "retire_deck",
            "location": 366,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "load_latest_league_matches": {
            "name": "load_latest_league_matches",
            "location": 371,
            "return": [],
            "arguments": {}
        },
        "load_matches": {
            "name": "load_matches",
            "location": 376,
            "return": [],
            "arguments": {
                "where": []
            }
        },
        "first_runs": {
            "name": "first_runs",
            "location": 409,
            "return": [],
            "arguments": {}
        },
        "random_legal_deck": {
            "name": "random_legal_deck",
            "location": 451,
            "return": [],
            "arguments": {}
        },
        "get_status": {
            "name": "get_status",
            "location": 460,
            "return": [],
            "arguments": {}
        },
        "set_status": {
            "name": "set_status",
            "location": 465,
            "return": [],
            "arguments": {
                "status": []
            }
        },
        "SignUpForm.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [],
            "arguments": {
                "self": [],
                "form": [],
                "person_id": [],
                "mtgo_username": []
            }
        },
        "SignUpForm.do_validation": {
            "name": "do_validation",
            "location": 51,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignUpForm.parse_and_validate_decklist": {
            "name": "parse_and_validate_decklist",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignUpForm.parse_decklist": {
            "name": "parse_decklist",
            "location": 82,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignUpForm.vivify_deck": {
            "name": "vivify_deck",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SignUpForm.check_deck_legality": {
            "name": "check_deck_legality",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DeckCheckForm.do_validation": {
            "name": "do_validation",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ReportForm.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [],
            "arguments": {
                "self": [],
                "form": [],
                "deck_id": [],
                "person_id": []
            }
        },
        "ReportForm.do_validation": {
            "name": "do_validation",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RetireForm.__init__": {
            "name": "__init__",
            "location": 159,
            "return": [],
            "arguments": {
                "self": [],
                "form": [],
                "deck_id": [],
                "discord_user": []
            }
        },
        "RetireForm.do_validation": {
            "name": "do_validation",
            "location": 176,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/league_test.py": {
        "test_determine_end_of_league": {
            "name": "test_determine_end_of_league",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_determine_league_name": {
            "name": "test_determine_league_name",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/decksite/main.py": {
        "home": {
            "name": "home",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "export": {
            "name": "export",
            "location": 37,
            "return": [],
            "arguments": {
                "deck_id": []
            }
        },
        "cmc_chart": {
            "name": "cmc_chart",
            "location": 46,
            "return": [],
            "arguments": {
                "deck_id": []
            }
        },
        "discord": {
            "name": "discord",
            "location": 50,
            "return": [],
            "arguments": {}
        },
        "image": {
            "name": "image",
            "location": 54,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "dev_db": {
            "name": "dev_db",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "banner_stats": {
            "name": "banner_stats",
            "location": 75,
            "return": [],
            "arguments": {}
        },
        "bannercss": {
            "name": "bannercss",
            "location": 90,
            "return": [],
            "arguments": {}
        },
        "banner": {
            "name": "banner",
            "location": 101,
            "return": [],
            "arguments": {
                "seasonnum": [],
                "crop": []
            }
        },
        "banner_cards": {
            "name": "banner_cards",
            "location": 110,
            "return": [],
            "arguments": {
                "seasonnum": []
            }
        },
        "guess_banner": {
            "name": "guess_banner",
            "location": 158,
            "return": [],
            "arguments": {
                "season_num": []
            }
        },
        "before_request": {
            "name": "before_request",
            "location": 181,
            "return": [],
            "arguments": {}
        },
        "after_request": {
            "name": "after_request",
            "location": 192,
            "return": [],
            "arguments": {
                "response": []
            }
        },
        "teardown_request": {
            "name": "teardown_request",
            "location": 201,
            "return": [],
            "arguments": {
                "_": []
            }
        },
        "init": {
            "name": "init",
            "location": 206,
            "return": [],
            "arguments": {
                "debug": [],
                "port": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/prepare.py": {
        "prepare_cards": {
            "name": "prepare_cards",
            "location": 17,
            "return": [],
            "arguments": {
                "cs": [],
                "tournament_only": [],
                "season_id": []
            }
        },
        "prepare_card": {
            "name": "prepare_card",
            "location": 21,
            "return": [],
            "arguments": {
                "c": [],
                "tournament_only": [],
                "season_id": []
            }
        },
        "prepare_card_urls": {
            "name": "prepare_card_urls",
            "location": 51,
            "return": [],
            "arguments": {
                "c": [],
                "tournament_only": [],
                "season_id": []
            }
        },
        "url_for_image": {
            "name": "url_for_image",
            "location": 55,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "url_for_card": {
            "name": "url_for_card",
            "location": 62,
            "return": [],
            "arguments": {
                "c": [],
                "tournament_only": [],
                "season_id": []
            }
        },
        "prepare_decks": {
            "name": "prepare_decks",
            "location": 72,
            "return": [],
            "arguments": {
                "ds": []
            }
        },
        "prepare_deck": {
            "name": "prepare_deck",
            "location": 76,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "prepare_people": {
            "name": "prepare_people",
            "location": 124,
            "return": [],
            "arguments": {
                "ps": []
            }
        },
        "prepare_leaderboard": {
            "name": "prepare_leaderboard",
            "location": 132,
            "return": [],
            "arguments": {
                "leaderboard": []
            }
        },
        "prepare_matches": {
            "name": "prepare_matches",
            "location": 138,
            "return": [],
            "arguments": {
                "ms": []
            }
        },
        "set_stars_and_top8": {
            "name": "set_stars_and_top8",
            "location": 154,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "colors_html": {
            "name": "colors_html",
            "location": 188,
            "return": [],
            "arguments": {
                "colors": [],
                "colored_symbols": []
            }
        },
        "set_legal_icons": {
            "name": "set_legal_icons",
            "location": 200,
            "return": [],
            "arguments": {
                "o": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/smoke_test.py": {
        "DecksiteSmokeTest.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecksiteSmokeTest.test_some_pages": {
            "name": "test_some_pages",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecksiteSmokeTest.test_trailing_slashes": {
            "name": "test_trailing_slashes",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DecksiteSmokeTest.test_api_no_trailing_slashes": {
            "name": "test_api_no_trailing_slashes",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/testutil.py": {
        "setup_test_db": {
            "name": "setup_test_db",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/decksite/translation.py": {
        "translate": {
            "name": "translate",
            "location": 10,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "mappings": [
                    "Dict[str, str]",
                    "Optional[str]",
                    "Optional[Callable]",
                    "Optional[Dict[str, object]]"
                ],
                "data": [
                    "dict",
                    "str",
                    "Type",
                    "Type[T]",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/translation_test.py": {
        "test_translate": {
            "name": "test_translate",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/decksite/view.py": {
        "seasonized_url": {
            "name": "seasonized_url",
            "location": 310,
            "return": [],
            "arguments": {
                "season_id": []
            }
        },
        "add_season_num": {
            "name": "add_season_num",
            "location": 327,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "View.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.season_id": {
            "name": "season_id",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.season_name": {
            "name": "season_name",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.season_code_lower": {
            "name": "season_code_lower",
            "location": 74,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.has_buttons": {
            "name": "has_buttons",
            "location": 77,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.all_seasons": {
            "name": "all_seasons",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.favicon_url": {
            "name": "favicon_url",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.favicon_152_url": {
            "name": "favicon_152_url",
            "location": 127,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.title": {
            "name": "title",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.notice_html": {
            "name": "notice_html",
            "location": 142,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.page_title": {
            "name": "page_title",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.num_tournaments": {
            "name": "num_tournaments",
            "location": 155,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.rotation_text": {
            "name": "rotation_text",
            "location": 159,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.learn_more_url": {
            "name": "learn_more_url",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.decks_url": {
            "name": "decks_url",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.current_league_url": {
            "name": "current_league_url",
            "location": 168,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.league_info_url": {
            "name": "league_info_url",
            "location": 171,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.league_signup_url": {
            "name": "league_signup_url",
            "location": 174,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.tournaments_info_url": {
            "name": "tournaments_info_url",
            "location": 177,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.show_legal_seasons": {
            "name": "show_legal_seasons",
            "location": 180,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.prepare": {
            "name": "prepare",
            "location": 183,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.prepare_decks": {
            "name": "prepare_decks",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.prepare_cards": {
            "name": "prepare_cards",
            "location": 197,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.prepare_competitions": {
            "name": "prepare_competitions",
            "location": 200,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.prepare_people": {
            "name": "prepare_people",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.prepare_archetypes": {
            "name": "prepare_archetypes",
            "location": 218,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.prepare_archetype": {
            "name": "prepare_archetype",
            "location": 222,
            "return": [],
            "arguments": {
                "self": [],
                "a": [],
                "archetypes": [],
                "tournament_only": []
            }
        },
        "View.prepare_leaderboards": {
            "name": "prepare_leaderboards",
            "location": 231,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.prepare_legal_formats": {
            "name": "prepare_legal_formats",
            "location": 235,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.prepare_matches": {
            "name": "prepare_matches",
            "location": 239,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.prepare_active_runs": {
            "name": "prepare_active_runs",
            "location": 242,
            "return": [],
            "arguments": {
                "self": [],
                "o": []
            }
        },
        "View.babel_languages": {
            "name": "babel_languages",
            "location": 254,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.TT_HELP_TRANSLATE": {
            "name": "TT_HELP_TRANSLATE",
            "location": 257,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.setup_tournaments": {
            "name": "setup_tournaments",
            "location": 260,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.setup_tournament_rounds": {
            "name": "setup_tournament_rounds",
            "location": 283,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/view_test.py": {
        "test_seasonized_url_for_app": {
            "name": "test_seasonized_url_for_app",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_seasonized_url_for_seasons": {
            "name": "test_seasonized_url_for_seasons",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_seasonized_url_simple": {
            "name": "test_seasonized_url_simple",
            "location": 16,
            "return": [],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/decksite/__init__.py": {
        "get_season_id": {
            "name": "get_season_id",
            "location": 17,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "add_season_id": {
            "name": "add_season_id",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "_endpoint": [
                    "str",
                    "Dict[str, Any]"
                ],
                "values": [
                    "Dict[str, Any]",
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "pull_season_id": {
            "name": "pull_season_id",
            "location": 28,
            "return": [
                "int",
                "Union[tuple, list]",
                "Optional[bool]",
                "Set[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "_endpoint": [
                    "str",
                    "Union[Set[str], List[str]]"
                ],
                "values": [
                    "T",
                    "Optional[Union[str, Any]]",
                    "Union[int, None]",
                    "Union[str, None]",
                    "bytes",
                    "Optional[T]"
                ]
            }
        },
        "build_menu": {
            "name": "build_menu",
            "location": 37,
            "return": [
                "Iterable[allennlp.data.instance.Instance]",
                "bool"
            ],
            "arguments": {}
        },
        "setup_links": {
            "name": "setup_links",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "menu": [
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/charts/chart.py": {
        "cmc": {
            "name": "cmc",
            "location": 18,
            "return": [
                "pathlib.Path",
                "str",
                "List[str]"
            ],
            "arguments": {
                "deck_id": [
                    "str",
                    "int"
                ],
                "attempts": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "image": {
            "name": "image",
            "location": 45,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Union[pathlib.Path, str]"
                ],
                "costs": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, pathlib.Path]"
                ]
            }
        },
        "determine_path": {
            "name": "determine_path",
            "location": 65,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "acceptable_file": {
            "name": "acceptable_file",
            "location": 72,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/charts/__init__.py": {},
    "Penny-Dreadful-Tools-master/decksite/controllers/about.py": {
        "about_pdm": {
            "name": "about_pdm",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "about_gp": {
            "name": "about_gp",
            "location": 17,
            "return": [
                "Dict[str, Any]",
                "Response"
            ],
            "arguments": {}
        },
        "about": {
            "name": "about",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "faqs": {
            "name": "faqs",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "community_guidelines": {
            "name": "community_guidelines",
            "location": 36,
            "return": [
                "str",
                "Tuple[int, int]",
                "int",
                "float"
            ],
            "arguments": {}
        },
        "contact_us": {
            "name": "contact_us",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/decksite/controllers/admin.py": {
        "admin_menu": {
            "name": "admin_menu",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "admin_home": {
            "name": "admin_home",
            "location": 40,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, dict]",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "edit_aliases": {
            "name": "edit_aliases",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "post_aliases": {
            "name": "post_aliases",
            "location": 55,
            "return": [
                "Optional[Type]",
                "dict"
            ],
            "arguments": {
                "person_id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "alias": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "edit_archetypes": {
            "name": "edit_archetypes",
            "location": 62,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, dict]",
                "str",
                "bool"
            ],
            "arguments": {
                "search_results": [
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "tuple"
                ],
                "q": [
                    "List[int]",
                    "float"
                ],
                "notq": [
                    "List[int]",
                    "float"
                ]
            }
        },
        "post_archetypes": {
            "name": "post_archetypes",
            "location": 70,
            "return": [
                "str",
                "Dict[str, allennlp.data.token_indexers.token_indexer.TokenIndexer]",
                "zerver.models.Realm"
            ],
            "arguments": {}
        },
        "edit_rules": {
            "name": "edit_rules",
            "location": 101,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, dict]",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "post_rules": {
            "name": "post_rules",
            "location": 110,
            "return": [
                "Optional[Type]",
                "dict"
            ],
            "arguments": {}
        },
        "admin_retire_deck": {
            "name": "admin_retire_deck",
            "location": 120,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "form": [
                    "allennlp.models.model.Model",
                    "audiopyle.lib.models.compressed_feature.CompressedFeatureDTO",
                    "audiopyle.lib.models.resulFeatureMeta",
                    "audiopyle.lib.models.resulAnalysisStats",
                    "Callable",
                    "django.db.models.query.QuerySet",
                    "int"
                ]
            }
        },
        "do_admin_retire_deck": {
            "name": "do_admin_retire_deck",
            "location": 128,
            "return": [
                "str",
                "Dict[str, str]",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "edit_matches": {
            "name": "edit_matches",
            "location": 138,
            "return": [
                "Callable[[T], bool]",
                "Iterable[T]"
            ],
            "arguments": {}
        },
        "post_matches": {
            "name": "post_matches",
            "location": 145,
            "return": [
                "zerver.models.UserProfile"
            ],
            "arguments": {}
        },
        "edit_news": {
            "name": "edit_news",
            "location": 163,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "post_news": {
            "name": "post_news",
            "location": 172,
            "return": [
                "models.Dashboard",
                "dict",
                "bool",
                "int"
            ],
            "arguments": {
                "news_id": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "Optional[Exception]"
                ],
                "title": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "int"
                ],
                "url": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "int"
                ],
                "date": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "netanalysis.traffic.data.model.ProductId",
                    "int"
                ]
            }
        },
        "prizes": {
            "name": "prizes",
            "location": 182,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "rotation_checklist": {
            "name": "rotation_checklist",
            "location": 189,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "player_notes": {
            "name": "player_notes",
            "location": 195,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "post_player_note": {
            "name": "post_player_note",
            "location": 204,
            "return": [
                "models.Dashboard",
                "dict",
                "bool",
                "int"
            ],
            "arguments": {
                "person_id": [
                    "str",
                    "int",
                    "bool"
                ],
                "note": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "unlink": {
            "name": "unlink",
            "location": 213,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "num_affected_people": [
                    "int",
                    "Optional[int]",
                    "tuple"
                ],
                "errors": [
                    "int",
                    "Optional[int]",
                    "tuple"
                ]
            }
        },
        "post_unlink": {
            "name": "post_unlink",
            "location": 220,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "ban": {
            "name": "ban",
            "location": 235,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "success": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "post_ban": {
            "name": "post_ban",
            "location": 242,
            "return": [
                "Optional[Type]",
                "dict"
            ],
            "arguments": {}
        },
        "edit_league": {
            "name": "edit_league",
            "location": 261,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "post_league": {
            "name": "post_league",
            "location": 267,
            "return": [
                "Optional[Type]",
                "dict"
            ],
            "arguments": {}
        },
        "sorters": {
            "name": "sorters",
            "location": 274,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "cast_int": {
            "name": "cast_int",
            "location": 278,
            "return": [
                "str"
            ],
            "arguments": {
                "param": [
                    "str",
                    "Optional[Any]",
                    "Union[str, Tuple[Any]]",
                    "List[int]",
                    "int",
                    "Union[int, List[int]]"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/controllers/api.py": {
        "decks_api": {
            "name": "decks_api",
            "location": 115,
            "return": [],
            "arguments": {}
        },
        "cards2_api": {
            "name": "cards2_api",
            "location": 185,
            "return": [],
            "arguments": {}
        },
        "cardfeed_api": {
            "name": "cardfeed_api",
            "location": 223,
            "return": [],
            "arguments": {}
        },
        "people_api": {
            "name": "people_api",
            "location": 241,
            "return": [],
            "arguments": {}
        },
        "h2h_api": {
            "name": "h2h_api",
            "location": 274,
            "return": [],
            "arguments": {}
        },
        "leaderboards_api": {
            "name": "leaderboards_api",
            "location": 310,
            "return": [],
            "arguments": {}
        },
        "matches_api": {
            "name": "matches_api",
            "location": 355,
            "return": [],
            "arguments": {}
        },
        "archetypes_api": {
            "name": "archetypes_api",
            "location": 396,
            "return": [],
            "arguments": {}
        },
        "rotation_cards_api": {
            "name": "rotation_cards_api",
            "location": 413,
            "return": [],
            "arguments": {}
        },
        "competitions_api": {
            "name": "competitions_api",
            "location": 496,
            "return": [],
            "arguments": {}
        },
        "competition_api": {
            "name": "competition_api",
            "location": 511,
            "return": [],
            "arguments": {
                "competition_id": []
            }
        },
        "person_api": {
            "name": "person_api",
            "location": 531,
            "return": [],
            "arguments": {
                "person": [],
                "season_id": []
            }
        },
        "person_decks_api": {
            "name": "person_decks_api",
            "location": 543,
            "return": [],
            "arguments": {
                "person": [],
                "season_id": []
            }
        },
        "league_run_api": {
            "name": "league_run_api",
            "location": 552,
            "return": [],
            "arguments": {
                "person": []
            }
        },
        "drop": {
            "name": "drop",
            "location": 568,
            "return": [],
            "arguments": {
                "person": []
            }
        },
        "rotation_clear_cache": {
            "name": "rotation_clear_cache",
            "location": 584,
            "return": [],
            "arguments": {}
        },
        "cards_api": {
            "name": "cards_api",
            "location": 590,
            "return": [],
            "arguments": {}
        },
        "card_api": {
            "name": "card_api",
            "location": 595,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "post_reassign": {
            "name": "post_reassign",
            "location": 601,
            "return": [],
            "arguments": {
                "deck_id": [],
                "archetype_id": []
            }
        },
        "post_rule_update": {
            "name": "post_rule_update",
            "location": 609,
            "return": [],
            "arguments": {
                "rule_id": []
            }
        },
        "sitemap": {
            "name": "sitemap",
            "location": 616,
            "return": [],
            "arguments": {}
        },
        "intro": {
            "name": "intro",
            "location": 621,
            "return": [],
            "arguments": {}
        },
        "hide_intro": {
            "name": "hide_intro",
            "location": 625,
            "return": [],
            "arguments": {}
        },
        "person_status": {
            "name": "person_status",
            "location": 632,
            "return": [],
            "arguments": {}
        },
        "guarantee_at_most_one_or_retire": {
            "name": "guarantee_at_most_one_or_retire",
            "location": 655,
            "return": [],
            "arguments": {
                "decks": []
            }
        },
        "key_cards": {
            "name": "key_cards",
            "location": 664,
            "return": [],
            "arguments": {
                "season_num": []
            }
        },
        "person_notes": {
            "name": "person_notes",
            "location": 671,
            "return": [],
            "arguments": {
                "person_id": []
            }
        },
        "deck_embed": {
            "name": "deck_embed",
            "location": 675,
            "return": [],
            "arguments": {
                "deck_id": []
            }
        },
        "trigger_test_500": {
            "name": "trigger_test_500",
            "location": 692,
            "return": [],
            "arguments": {}
        },
        "all_achievements": {
            "name": "all_achievements",
            "location": 698,
            "return": [],
            "arguments": {}
        },
        "all_tournaments": {
            "name": "all_tournaments",
            "location": 704,
            "return": [],
            "arguments": {}
        },
        "search": {
            "name": "search",
            "location": 710,
            "return": [],
            "arguments": {}
        },
        "init_search_cache": {
            "name": "init_search_cache",
            "location": 725,
            "return": [],
            "arguments": {}
        },
        "menu_item_to_search_item": {
            "name": "menu_item_to_search_item",
            "location": 743,
            "return": [],
            "arguments": {
                "menu_item": [],
                "parent_name": []
            }
        },
        "pagination": {
            "name": "pagination",
            "location": 754,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "UpdatedDecks.get": {
            "name": "get",
            "location": 154,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LoadDeck.get": {
            "name": "get",
            "location": 467,
            "return": [],
            "arguments": {
                "self": [],
                "deck_id": []
            }
        },
        "LoadRandomDeck.get": {
            "name": "get",
            "location": 473,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Rotation.get": {
            "name": "get",
            "location": 484,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "League.get": {
            "name": "get",
            "location": 517,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "SeasonCodes.get": {
            "name": "get",
            "location": 526,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/controllers/competitions.py": {
        "competitions": {
            "name": "competitions",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "competition": {
            "name": "competition",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "competition_id": [
                    "int",
                    "str"
                ]
            }
        },
        "tournaments": {
            "name": "tournaments",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "hosting": {
            "name": "hosting",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "tournament_leaderboards": {
            "name": "tournament_leaderboards",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "pd500": {
            "name": "pd500",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "kickoff": {
            "name": "kickoff",
            "location": 53,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "achievements": {
            "name": "achievements",
            "location": 59,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/decksite/controllers/league.py": {
        "league": {
            "name": "league",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "current_league": {
            "name": "current_league",
            "location": 24,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {}
        },
        "signup": {
            "name": "signup",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "form": [
                    "Optional[str]",
                    "int",
                    "str",
                    "Optional[int]",
                    "Optional[bytes]"
                ],
                "deck_id": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "add_signup": {
            "name": "add_signup",
            "location": 41,
            "return": [
                "List[str]",
                "Optional[str]",
                "Tuple[str, str]",
                "bytes"
            ],
            "arguments": {}
        },
        "report": {
            "name": "report",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "form": [
                    "int",
                    "str"
                ],
                "deck_id": [
                    "str",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "add_report": {
            "name": "add_report",
            "location": 64,
            "return": [
                "bytes",
                "dict",
                "str",
                "Sequence",
                "Optional[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {}
        },
        "retire": {
            "name": "retire",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "form": [
                    "str",
                    "Union['HTMLSession', 'AsyncHTMLSession']",
                    "bool",
                    "Optional[str]"
                ],
                "deck_id": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "retire_deck": {
            "name": "retire_deck",
            "location": 85,
            "return": [
                "Dict[str, Any]",
                "bool",
                "int",
                "flask.Response",
                "Mapping[str, Any]"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/decksite/controllers/metagame.py": {
        "decks": {
            "name": "decks",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "deck_type": []
            }
        },
        "metagame": {
            "name": "metagame",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "deck_type": []
            }
        },
        "deck": {
            "name": "deck",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "deck_id": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "seasons": {
            "name": "seasons",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "season": {
            "name": "season",
            "location": 61,
            "return": [
                "str",
                "Dict[str, str]",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "cards": {
            "name": "cards",
            "location": 69,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "deck_type": []
            }
        },
        "card": {
            "name": "card",
            "location": 83,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "deck_type": [
                    "int",
                    "Optional[type]",
                    "Dict[str, type]",
                    "str"
                ]
            }
        },
        "parse_card_name": {
            "name": "parse_card_name",
            "location": 92,
            "return": [
                "type",
                "Sequence[Any]"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "archetypes": {
            "name": "archetypes",
            "location": 103,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "deck_type": []
            }
        },
        "archetype": {
            "name": "archetype",
            "location": 115,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "archetype_id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Union[str, int]"
                ],
                "deck_type": []
            }
        },
        "matchups": {
            "name": "matchups",
            "location": 126,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "validate_deck_type": {
            "name": "validate_deck_type",
            "location": 149,
            "return": [
                "Type"
            ],
            "arguments": {
                "s": [],
                "allowed_values": [
                    "Type[Any]",
                    "Union[str, 'Type']"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/controllers/people.py": {
        "people": {
            "name": "people",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "person": {
            "name": "person",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mtgo_username": [
                    "str",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "person_id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Union[str, List[str]]"
                ]
            }
        },
        "person_achievements": {
            "name": "person_achievements",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mtgo_username": [
                    "str",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "person_id": [
                    "str",
                    "Optional[bool]",
                    "Optional[int]"
                ]
            }
        },
        "achievements_redirect": {
            "name": "achievements_redirect",
            "location": 51,
            "return": [
                "str",
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {}
        },
        "person_matches": {
            "name": "person_matches",
            "location": 59,
            "return": [
                "Callable[[T], bool]",
                "Iterable[T]"
            ],
            "arguments": {
                "mtgo_username": [
                    "str",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "person_id": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "load_person": {
            "name": "load_person",
            "location": 66,
            "return": [
                "Union[str, IO]",
                "Dict[str, Any]",
                "Callable[[str], T]",
                "Callable",
                "dict",
                "IO[str]"
            ],
            "arguments": {
                "mtgo_username": [
                    "str",
                    "int",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "person_id": [
                    "str",
                    "int"
                ],
                "season_id": [
                    "int",
                    "Optional[bool]",
                    "Optional[int]"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/controllers/resources.py": {
        "rotation": {
            "name": "rotation",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "resources": {
            "name": "resources",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "bugs": {
            "name": "bugs",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "deck_check": {
            "name": "deck_check",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "form": [
                    "Optional[int]"
                ]
            }
        },
        "do_deck_check": {
            "name": "do_deck_check",
            "location": 47,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "rotation_changes": {
            "name": "rotation_changes",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "rotation_changes_files": {
            "name": "rotation_changes_files",
            "location": 65,
            "return": [
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "changes_type": [
                    "str",
                    "data.TransformedFunction"
                ]
            }
        },
        "rotation_speculation": {
            "name": "rotation_speculation",
            "location": 72,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "rotation_speculation_files": {
            "name": "rotation_speculation_files",
            "location": 82,
            "return": [
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "changes_type": [
                    "str",
                    "list",
                    "Dict[str, str]"
                ]
            }
        },
        "link": {
            "name": "link",
            "location": 91,
            "return": [
                "int",
                "bytes",
                "str"
            ],
            "arguments": {}
        },
        "link_post": {
            "name": "link_post",
            "location": 98,
            "return": [
                "dict",
                "tensorflow.data.Dataset",
                "float"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/decksite/controllers/__init__.py": {},
    "Penny-Dreadful-Tools-master/decksite/data/achievements.py": {
        "load_achievements": {
            "name": "load_achievements",
            "location": 20,
            "return": [],
            "arguments": {
                "p": [],
                "season_id": [],
                "with_detail": []
            }
        },
        "load_query": {
            "name": "load_query",
            "location": 37,
            "return": [],
            "arguments": {
                "people_by_id": [],
                "season_id": []
            }
        },
        "preaggregate_achievements": {
            "name": "preaggregate_achievements",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "preaggregate_query": {
            "name": "preaggregate_query",
            "location": 55,
            "return": [],
            "arguments": {}
        },
        "Achievement.description_safe": {
            "name": "description_safe",
            "location": 102,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Achievement.sql": {
            "name": "sql",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Achievement.with_sql": {
            "name": "with_sql",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Achievement.join_sql": {
            "name": "join_sql",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Achievement.detail_sql": {
            "name": "detail_sql",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Achievement.create_columns": {
            "name": "create_columns",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Achievement.select_columns": {
            "name": "select_columns",
            "location": 130,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Achievement.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 137,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "Achievement.display": {
            "name": "display",
            "location": 149,
            "return": [],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "Achievement.load_summary": {
            "name": "load_summary",
            "location": 154,
            "return": [],
            "arguments": {
                "self": [],
                "season_id": []
            }
        },
        "Achievement.percent": {
            "name": "percent",
            "location": 167,
            "return": [],
            "arguments": {
                "self": [],
                "season_id": []
            }
        },
        "Achievement.detail": {
            "name": "detail",
            "location": 177,
            "return": [],
            "arguments": {
                "self": [],
                "p": [],
                "season_id": []
            }
        },
        "Achievement.leaderboard": {
            "name": "leaderboard",
            "location": 197,
            "return": [],
            "arguments": {
                "self": [],
                "season_id": []
            }
        },
        "Achievement.leaderboard_heading": {
            "name": "leaderboard_heading",
            "location": 252,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CountedAchievement.display": {
            "name": "display",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "CountedAchievement.leaderboard_heading": {
            "name": "leaderboard_heading",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "CountedAchievement.localised_display": {
            "name": "localised_display",
            "location": 265,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "BooleanAchievement.alltime_text": {
            "name": "alltime_text",
            "location": 273,
            "return": [],
            "arguments": {
                "_": []
            }
        },
        "BooleanAchievement.display": {
            "name": "display",
            "location": 276,
            "return": [],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "BooleanAchievement.leaderboard": {
            "name": "leaderboard",
            "location": 285,
            "return": [],
            "arguments": {
                "self": [],
                "season_id": []
            }
        },
        "BooleanAchievement.leaderboard_heading": {
            "name": "leaderboard_heading",
            "location": 290,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TournamentOrganizer.__init__": {
            "name": "__init__",
            "location": 299,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TournamentOrganizer.display": {
            "name": "display",
            "location": 302,
            "return": [],
            "arguments": {
                "self": [],
                "p": []
            }
        },
        "TournamentOrganizer.load_summary": {
            "name": "load_summary",
            "location": 307,
            "return": [],
            "arguments": {
                "self": [],
                "season_id": []
            }
        },
        "TournamentOrganizer.percent": {
            "name": "percent",
            "location": 313,
            "return": [],
            "arguments": {
                "self": [],
                "season_id": []
            }
        },
        "TournamentOrganizer.leaderboard": {
            "name": "leaderboard",
            "location": 318,
            "return": [],
            "arguments": {
                "self": [],
                "season_id": []
            }
        },
        "TournamentPlayer.description_safe": {
            "name": "description_safe",
            "location": 329,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TournamentPlayer.leaderboard_heading": {
            "name": "leaderboard_heading",
            "location": 332,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TournamentPlayer.localised_display": {
            "name": "localised_display",
            "location": 335,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "TournamentWinner.leaderboard_heading": {
            "name": "leaderboard_heading",
            "location": 346,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TournamentWinner.localised_display": {
            "name": "localised_display",
            "location": 349,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "LeaguePlayer.description_safe": {
            "name": "description_safe",
            "location": 360,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LeaguePlayer.leaderboard_heading": {
            "name": "leaderboard_heading",
            "location": 363,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LeaguePlayer.localised_display": {
            "name": "localised_display",
            "location": 366,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "PerfectRun.leaderboard_heading": {
            "name": "leaderboard_heading",
            "location": 377,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PerfectRun.localised_display": {
            "name": "localised_display",
            "location": 380,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "FlawlessRun.leaderboard_heading": {
            "name": "leaderboard_heading",
            "location": 391,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FlawlessRun.localised_display": {
            "name": "localised_display",
            "location": 394,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "FlawlessRun.with_sql": {
            "name": "with_sql",
            "location": 399,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PerfectRunCrusher.leaderboard_heading": {
            "name": "leaderboard_heading",
            "location": 449,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PerfectRunCrusher.localised_display": {
            "name": "localised_display",
            "location": 452,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "PerfectRunCrusher.with_sql": {
            "name": "with_sql",
            "location": 460,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AncientGrudge.leaderboard_heading": {
            "name": "leaderboard_heading",
            "location": 497,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AncientGrudge.localised_display": {
            "name": "localised_display",
            "location": 500,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "AncientGrudge.with_sql": {
            "name": "with_sql",
            "location": 508,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BurningVengeance.leaderboard_heading": {
            "name": "leaderboard_heading",
            "location": 567,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BurningVengeance.localised_display": {
            "name": "localised_display",
            "location": 570,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Deckbuilder.leaderboard_heading": {
            "name": "leaderboard_heading",
            "location": 630,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Deckbuilder.localised_display": {
            "name": "localised_display",
            "location": 633,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Pioneer.leaderboard_heading": {
            "name": "leaderboard_heading",
            "location": 658,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Pioneer.localised_display": {
            "name": "localised_display",
            "location": 661,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "VarietyPlayer.alltime_text": {
            "name": "alltime_text",
            "location": 704,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "Specialist.alltime_text": {
            "name": "alltime_text",
            "location": 746,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "Generalist.alltime_text": {
            "name": "alltime_text",
            "location": 768,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "Completionist.alltime_text": {
            "name": "alltime_text",
            "location": 780,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "PD500Top8.leaderboard_heading": {
            "name": "leaderboard_heading",
            "location": 792,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PD500Top8.localised_display": {
            "name": "localised_display",
            "location": 795,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "PD500Winner.leaderboard_heading": {
            "name": "leaderboard_heading",
            "location": 806,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "PD500Winner.localised_display": {
            "name": "localised_display",
            "location": 809,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/data/archetype.py": {
        "load_archetype": {
            "name": "load_archetype",
            "location": 25,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "archetype": [
                    "int",
                    "str",
                    "bool",
                    "List[int]"
                ],
                "season_id": [
                    "str",
                    "int",
                    "bool"
                ],
                "tournament_only": [
                    "str",
                    "Optional[str]",
                    "models.CloudConfig"
                ]
            }
        },
        "load_archetypes": {
            "name": "load_archetypes",
            "location": 46,
            "return": [
                "str",
                "List[str]",
                "List[Dict]",
                "List[List[Any]]",
                "Optional[str]",
                "List[float]"
            ],
            "arguments": {
                "where": [
                    "int",
                    "Optional[int]"
                ],
                "merge": [
                    "str",
                    "int",
                    "Sequence[str]",
                    "bytes"
                ],
                "season_id": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "load_archetypes_deckless_for": {
            "name": "load_archetypes_deckless_for",
            "location": 71,
            "return": [
                "List[str]",
                "str",
                "List[Dict]",
                "List[T]"
            ],
            "arguments": {
                "archetype_id": [
                    "str",
                    "int",
                    "transfer.models.TopicID"
                ],
                "season_id": [
                    "int",
                    "str"
                ],
                "tournament_only": [
                    "int",
                    "str"
                ]
            }
        },
        "add": {
            "name": "add",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "parent": [
                    "str",
                    "bool",
                    "int"
                ],
                "description": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "assign": {
            "name": "assign",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "deck_id": [
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "archetype_id": [
                    "int",
                    "Optional[int]"
                ],
                "person_id": [
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "reviewed": [
                    "str",
                    "Union[str, List[str]]",
                    "bytes",
                    "int"
                ],
                "similarity": [
                    "str",
                    "Optional[int]",
                    "Optional[str]",
                    "Dict['cirq.Qid', str]"
                ]
            }
        },
        "move": {
            "name": "move",
            "location": 96,
            "return": [
                "None"
            ],
            "arguments": {
                "archetype_id": [
                    "str",
                    "int"
                ],
                "parent_id": [
                    "str",
                    "int",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "rename": {
            "name": "rename",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "archetype_id": [
                    "str"
                ],
                "new_name": [
                    "str"
                ]
            }
        },
        "update_description": {
            "name": "update_description",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "archetype_id": [
                    "str",
                    "int",
                    "List[int]"
                ],
                "description": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "base_archetypes": {
            "name": "base_archetypes",
            "location": 124,
            "return": [
                "Set[str]",
                "int",
                "Optional[dict]",
                "Counter"
            ],
            "arguments": {}
        },
        "base_archetype_by_id": {
            "name": "base_archetype_by_id",
            "location": 127,
            "return": [
                "str",
                "tuple",
                "Callable[[str], T]",
                "Callable[[], str]"
            ],
            "arguments": {}
        },
        "base_archetypes_data": {
            "name": "base_archetypes_data",
            "location": 132,
            "return": [
                "int",
                "bytes",
                "List[str]",
                "dict",
                "bool",
                "story.models.Character"
            ],
            "arguments": {
                "c": [
                    "magic.models.Card",
                    "List[str]",
                    "Optional[bytes]",
                    "list"
                ]
            }
        },
        "rebuild_archetypes": {
            "name": "rebuild_archetypes",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "preaggregate": {
            "name": "preaggregate",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "preaggregate_archetypes": {
            "name": "preaggregate_archetypes",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "preaggregate_archetype_person": {
            "name": "preaggregate_archetype_person",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "preaggregate_disjoint_archetypes": {
            "name": "preaggregate_disjoint_archetypes",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "preaggregate_disjoint_archetype_person": {
            "name": "preaggregate_disjoint_archetype_person",
            "location": 317,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "preaggregate_matchups": {
            "name": "preaggregate_matchups",
            "location": 369,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "preaggregate_matchups_person": {
            "name": "preaggregate_matchups_person",
            "location": 415,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "load_matchups": {
            "name": "load_matchups",
            "location": 466,
            "return": [
                "List[str]",
                "Set[str]",
                "str",
                "List[List[str]]",
                "FrozenSet[str]",
                "Dict[str, Set[str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "where": [
                    "int",
                    "str"
                ],
                "archetype_id": [
                    "str",
                    "int",
                    "List[str]",
                    "Mapping[str, str]"
                ],
                "person_id": [
                    "str",
                    "int",
                    "List[str]",
                    "Mapping[str, str]"
                ],
                "season_id": [
                    "str",
                    "int",
                    "transfer.models.BoardID"
                ],
                "tournament_only": [
                    "str",
                    "int",
                    "Optional[bool]",
                    "Optional[int]",
                    "Optional[float]"
                ]
            }
        },
        "load_archetypes_deckless": {
            "name": "load_archetypes_deckless",
            "location": 504,
            "return": [
                "str",
                "app.models.GameMember",
                "app.models.course.Course",
                "bool",
                "models.User"
            ],
            "arguments": {
                "order_by": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "person_id": [
                    "Optional[int]",
                    "str",
                    "int",
                    "List[str]"
                ],
                "season_id": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "tournament_only": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "load_disjoint_archetypes": {
            "name": "load_disjoint_archetypes",
            "location": 548,
            "return": [
                "str",
                "app.models.GameMember",
                "app.models.course.Course",
                "bool",
                "models.User"
            ],
            "arguments": {
                "order_by": [
                    "str",
                    "int",
                    "transfer.models.TicketID"
                ],
                "person_id": [
                    "Optional[int]",
                    "str",
                    "int",
                    "List[str]"
                ],
                "season_id": [
                    "str",
                    "int"
                ],
                "tournament_only": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "archetype_list_from": {
            "name": "archetype_list_from",
            "location": 594,
            "return": [
                "int",
                "set",
                "dict",
                "str",
                "Union[int, float]"
            ],
            "arguments": {
                "sql": [
                    "list",
                    "int",
                    "List[List[str]]"
                ],
                "should_preorder": [
                    "bool",
                    "str",
                    "Callable[[], object]",
                    "Dict[str, int]",
                    "Dict[str, Any]",
                    "List[str]",
                    "Set[str]"
                ]
            }
        },
        "preorder": {
            "name": "preorder",
            "location": 605,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "archetypes": []
            }
        },
        "load_archetype_tree": {
            "name": "load_archetype_tree",
            "location": 613,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "Tuple[int, int]",
                "str",
                "list",
                "Optional[List[str]]"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/decksite/data/card.py": {
        "load_card": {
            "name": "load_card",
            "location": 14,
            "return": [
                "str",
                "bool",
                "set",
                "Tuple[Any, Any, Any]",
                "List[str]",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "dict"
                ],
                "tournament_only": [
                    "bool",
                    "str",
                    "Sequence[str]",
                    "Callable[[], float]",
                    "Optional[Dict[str, str]]",
                    "int",
                    "List[str]"
                ],
                "season_id": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "preaggregate": {
            "name": "preaggregate",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "preaggregate_card": {
            "name": "preaggregate_card",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "preaggregate_card_archetype": {
            "name": "preaggregate_card_archetype",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "preaggregate_card_person": {
            "name": "preaggregate_card_person",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "preaggregate_unique": {
            "name": "preaggregate_unique",
            "location": 191,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "preaggregate_trailblazer": {
            "name": "preaggregate_trailblazer",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "load_cards_count": {
            "name": "load_cards_count",
            "location": 255,
            "return": [
                "str",
                "bytes",
                "Dict[str, Dict[str, Any]]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "additional_where": [
                    "int",
                    "str"
                ],
                "archetype_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "bool",
                    "Optional[str]"
                ],
                "person_id": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "season_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Set[int]"
                ]
            }
        },
        "load_cards": {
            "name": "load_cards",
            "location": 271,
            "return": [
                "str",
                "bool",
                "set",
                "Tuple[Any, Any, Any]",
                "List[str]",
                "Dict[str, Set[str]]"
            ],
            "arguments": {
                "additional_where": [
                    "int",
                    "str",
                    "bool"
                ],
                "order_by": [
                    "int",
                    "str",
                    "bool"
                ],
                "limit": [
                    "int",
                    "str",
                    "bool"
                ],
                "archetype_id": [
                    "Optional[str]",
                    "int",
                    "str",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]"
                ],
                "person_id": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Union[str, List[str]]",
                    "int"
                ],
                "season_id": [
                    "int",
                    "str",
                    "bool"
                ],
                "tournament_only": [
                    "bool",
                    "zerver.models.Recipient",
                    "int",
                    "Optional[Set[int]]",
                    "Set[int]",
                    "Iterable[str]",
                    "Callable[[str], None]",
                    "Callable[..., None]"
                ]
            }
        },
        "unique_cards_played": {
            "name": "unique_cards_played",
            "location": 323,
            "return": [
                "str",
                "Optional[dict]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "person_id": [
                    "int",
                    "str",
                    "pymongo.database.Database",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "trailblazer_cards": {
            "name": "trailblazer_cards",
            "location": 335,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "person_id": [
                    "int",
                    "str",
                    "list"
                ]
            }
        },
        "card_exists": {
            "name": "card_exists",
            "location": 348,
            "return": [
                "Optional[str]",
                "bool",
                "Dict[str, Any]",
                "deeplearning.ml4pl.models.logger.Logger"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int",
                    "zerver.models.UserProfile"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/data/card_test.py": {
        "test_load_cards_season": {
            "name": "test_load_cards_season",
            "location": 8,
            "return": [],
            "arguments": {}
        },
        "test_load_cards_all": {
            "name": "test_load_cards_all",
            "location": 12,
            "return": [],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/decksite/data/competition.py": {
        "get_or_insert_competition": {
            "name": "get_or_insert_competition",
            "location": 16,
            "return": [
                "bool",
                "Dict[str, Any]",
                "zerver.models.Realm"
            ],
            "arguments": {
                "start_date": [
                    "datetime.datetime",
                    "List[str]",
                    "int",
                    "bool"
                ],
                "end_date": [
                    "datetime.date",
                    "str",
                    "Optional[datetime.datetime]",
                    "bool",
                    "datetime.datetime"
                ],
                "name": [
                    "str",
                    "bool",
                    "int",
                    "List[bytes]",
                    "List[int]"
                ],
                "competition_series": [
                    "bool",
                    "int",
                    "List[str]",
                    "Tuple[int]",
                    "datetime"
                ],
                "url": [
                    "str",
                    "Optional[float]",
                    "float",
                    "List[str]",
                    "datetime.datetime"
                ],
                "top_n": [
                    "str",
                    "Optional[float]",
                    "List[str]",
                    "datetime.datetime",
                    "float"
                ]
            }
        },
        "load_competition": {
            "name": "load_competition",
            "location": 43,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "competition_id": [
                    "str",
                    "transfer.models.TopicID",
                    "Optional[bool]"
                ]
            }
        },
        "load_competitions": {
            "name": "load_competitions",
            "location": 46,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "where": [
                    "str",
                    "int",
                    "Pattern[str]"
                ],
                "having": [
                    "str",
                    "int",
                    "Pattern[str]"
                ],
                "limit": [
                    "str",
                    "int",
                    "Pattern[str]"
                ],
                "season_id": [
                    "str",
                    "int",
                    "Pattern[str]"
                ],
                "should_load_decks": [
                    "int",
                    "bool",
                    "Dict[str, int]"
                ]
            }
        },
        "load_decks": {
            "name": "load_decks",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "competitions": [
                    "str",
                    "Dict[str, Any]",
                    "Tuple[Tuple[int, int]]",
                    "List[str]",
                    "Set[str]",
                    "allennlp.data.vocabulary.Vocabulary"
                ]
            }
        },
        "tournaments_with_prizes": {
            "name": "tournaments_with_prizes",
            "location": 103,
            "return": [
                "bool",
                "salon.models.Stylist",
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "series": {
            "name": "series",
            "location": 115,
            "return": [
                "List[str]",
                "List[\"Variable\"]",
                "List[int]"
            ],
            "arguments": {
                "season_id": [
                    "str",
                    "services.board.transfer.models.TopicID",
                    "int"
                ]
            }
        },
        "load_leaderboard_count": {
            "name": "load_leaderboard_count",
            "location": 139,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "where": [
                    "int",
                    "str",
                    "Dict[str, Any]"
                ],
                "season_id": [
                    "str",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "load_leaderboard": {
            "name": "load_leaderboard",
            "location": 167,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "where": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "group_by": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "order_by": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "limit": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "season_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/data/deck.py": {
        "latest_decks": {
            "name": "latest_decks",
            "location": 21,
            "return": [],
            "arguments": {
                "season_id": []
            }
        },
        "load_deck": {
            "name": "load_deck",
            "location": 24,
            "return": [],
            "arguments": {
                "deck_id": []
            }
        },
        "load_decks_count": {
            "name": "load_decks_count",
            "location": 27,
            "return": [],
            "arguments": {
                "where": [],
                "having": [],
                "season_id": []
            }
        },
        "load_decks": {
            "name": "load_decks",
            "location": 34,
            "return": [],
            "arguments": {
                "where": [],
                "having": [],
                "order_by": [],
                "limit": [],
                "season_id": []
            }
        },
        "load_decks_query": {
            "name": "load_decks_query",
            "location": 80,
            "return": [],
            "arguments": {
                "columns": [],
                "where": [],
                "group_by": [],
                "having": [],
                "order_by": [],
                "limit": [],
                "season_id": []
            }
        },
        "deserialize_deck": {
            "name": "deserialize_deck",
            "location": 137,
            "return": [],
            "arguments": {
                "sdeck": []
            }
        },
        "load_decks_heavy": {
            "name": "load_decks_heavy",
            "location": 153,
            "return": [],
            "arguments": {
                "where": [],
                "having": [],
                "order_by": [],
                "limit": [],
                "season_id": []
            }
        },
        "set_colors": {
            "name": "set_colors",
            "location": 260,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "set_legality": {
            "name": "set_legality",
            "location": 277,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "add_deck": {
            "name": "add_deck",
            "location": 334,
            "return": [],
            "arguments": {
                "params": []
            }
        },
        "prime_cache": {
            "name": "prime_cache",
            "location": 402,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "add_cards": {
            "name": "add_cards",
            "location": 423,
            "return": [],
            "arguments": {
                "deck_id": [],
                "cards": []
            }
        },
        "get_deck_id": {
            "name": "get_deck_id",
            "location": 436,
            "return": [],
            "arguments": {
                "source_name": [],
                "identifier": []
            }
        },
        "insert_deck_card": {
            "name": "insert_deck_card",
            "location": 441,
            "return": [],
            "arguments": {
                "deck_id": [],
                "name": [],
                "n": [],
                "in_sideboard": []
            }
        },
        "get_or_insert_person_id": {
            "name": "get_or_insert_person_id",
            "location": 446,
            "return": [],
            "arguments": {
                "mtgo_username": [],
                "tappedout_username": [],
                "mtggoldfish_username": []
            }
        },
        "get_source_id": {
            "name": "get_source_id",
            "location": 454,
            "return": [],
            "arguments": {
                "source": []
            }
        },
        "get_archetype_id": {
            "name": "get_archetype_id",
            "location": 461,
            "return": [],
            "arguments": {
                "archetype": []
            }
        },
        "calculate_similar_decks": {
            "name": "calculate_similar_decks",
            "location": 465,
            "return": [],
            "arguments": {
                "ds": []
            }
        },
        "all_card_names": {
            "name": "all_card_names",
            "location": 480,
            "return": [],
            "arguments": {
                "ds": []
            }
        },
        "similarity_score": {
            "name": "similarity_score",
            "location": 490,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "load_decks_by_cards": {
            "name": "load_decks_by_cards",
            "location": 497,
            "return": [],
            "arguments": {
                "names": [],
                "not_names": []
            }
        },
        "contains_cards_clause": {
            "name": "contains_cards_clause",
            "location": 507,
            "return": [],
            "arguments": {
                "names": [],
                "negate": []
            }
        },
        "load_cards": {
            "name": "load_cards",
            "location": 519,
            "return": [],
            "arguments": {
                "decks": []
            }
        },
        "load_conflicted_decks": {
            "name": "load_conflicted_decks",
            "location": 534,
            "return": [],
            "arguments": {}
        },
        "load_queue_similarity": {
            "name": "load_queue_similarity",
            "location": 550,
            "return": [],
            "arguments": {
                "decks": []
            }
        },
        "load_competitive_stats": {
            "name": "load_competitive_stats",
            "location": 559,
            "return": [],
            "arguments": {
                "decks": []
            }
        },
        "preaggregate": {
            "name": "preaggregate",
            "location": 595,
            "return": [],
            "arguments": {}
        },
        "preaggregate_omw": {
            "name": "preaggregate_omw",
            "location": 598,
            "return": [],
            "arguments": {}
        },
        "count_matches": {
            "name": "count_matches",
            "location": 631,
            "return": [],
            "arguments": {
                "deck_id": [],
                "opponent_deck_id": []
            }
        },
        "nwdl_join": {
            "name": "nwdl_join",
            "location": 638,
            "return": [],
            "arguments": {}
        },
        "num_decks": {
            "name": "num_decks",
            "location": 660,
            "return": [],
            "arguments": {
                "deck_query": []
            }
        },
        "get_deckhash": {
            "name": "get_deckhash",
            "location": 665,
            "return": [],
            "arguments": {
                "cards": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/data/deck_test.py": {},
    "Penny-Dreadful-Tools-master/decksite/data/elo.py": {
        "adjustment": {
            "name": "adjustment",
            "location": 18,
            "return": [
                "bool",
                "int",
                "List[List[str]]",
                "Callable",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "elo1": [
                    "List[str]",
                    "str",
                    "Tuple[int]",
                    "float"
                ],
                "elo2": [
                    "List[str]",
                    "str",
                    "Tuple[int]",
                    "float"
                ]
            }
        },
        "expected": {
            "name": "expected",
            "location": 22,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "elo1": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "bool"
                ],
                "elo2": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "adjust_elo": {
            "name": "adjust_elo",
            "location": 25,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "winning_deck_id": [
                    "int",
                    "str",
                    "Dict[int, int]"
                ],
                "losing_deck_id": [
                    "int",
                    "str",
                    "Dict[int, int]"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/data/elo_test.py": {
        "test_elo": {
            "name": "test_elo",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/decksite/data/form.py": {
        "Form.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Form.validate": {
            "name": "validate",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/data/match.py": {
        "insert_match": {
            "name": "insert_match",
            "location": 18,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "dt": [
                    "int",
                    "str",
                    "bool"
                ],
                "left_id": [
                    "int",
                    "str",
                    "bytes",
                    "bool"
                ],
                "left_games": [
                    "int",
                    "str",
                    "transfer.models.TopicID"
                ],
                "right_id": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[float]",
                    "Optional[List[str]]"
                ],
                "right_games": [
                    "int",
                    "str",
                    "transfer.models.TopicID"
                ],
                "round_num": [
                    "str",
                    "Set[int]",
                    "int",
                    "Optional[str]"
                ],
                "elimination": [
                    "str",
                    "Set[int]",
                    "int",
                    "Optional[str]"
                ],
                "mtgo_match_id": [
                    "str",
                    "Set[int]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "load_match": {
            "name": "load_match",
            "location": 45,
            "return": [
                "str",
                "bool",
                "int",
                "float"
            ],
            "arguments": {
                "match_id": [
                    "int",
                    "str",
                    "ajapaik.ajapaik_object_recognition.models.ObjectDetectionAnnotation"
                ],
                "deck_id": [
                    "int",
                    "str",
                    "ajapaik.ajapaik_object_recognition.models.ObjectDetectionAnnotation"
                ]
            }
        },
        "load_matches_by_deck": {
            "name": "load_matches_by_deck",
            "location": 48,
            "return": [
                "int",
                "Optional[str]",
                "bool",
                "List[str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "d": [
                    "int",
                    "Type",
                    "dict",
                    "str",
                    "Type[django.db.models.base.Model]",
                    "Optional[Callable[..., None]]"
                ],
                "should_load_decks": [
                    "Optional[Any]",
                    "Optional[int]",
                    "Dict[int, Dict[str, str]]",
                    "bool"
                ]
            }
        },
        "load_matches_by_person": {
            "name": "load_matches_by_person",
            "location": 52,
            "return": [
                "bool",
                "Dict[str, zam_repondeur.models.Amendement]",
                "Tuple[int, int]",
                "int",
                "\"Task\""
            ],
            "arguments": {
                "person_id": [
                    "str",
                    "int"
                ],
                "season_id": [
                    "int",
                    "str",
                    "Optional[Union[str, int]]",
                    "bool"
                ]
            }
        },
        "load_matches_count": {
            "name": "load_matches_count",
            "location": 56,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "where": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "core.models.GroupingKey",
                    "List[str]"
                ],
                "season_id": [
                    "str",
                    "int",
                    "Optional[bool]"
                ]
            }
        },
        "load_matches": {
            "name": "load_matches",
            "location": 90,
            "return": [
                "bool",
                "str",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "where": [
                    "int",
                    "Optional[str]",
                    "Union[str, int]"
                ],
                "order_by": [
                    "int",
                    "Optional[str]",
                    "Union[str, int]"
                ],
                "limit": [
                    "int",
                    "Optional[str]",
                    "Union[str, int]"
                ],
                "season_id": [
                    "int",
                    "str"
                ],
                "should_load_decks": [
                    "Optional[bool]",
                    "str",
                    "Optional[str]"
                ],
                "show_active_deck_names": [
                    "Optional[bool]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "setup_matches": {
            "name": "setup_matches",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "should_load_decks": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "show_active_deck_names": [
                    "str",
                    "int",
                    "List[Tuple[int, int]]",
                    "Union[None, str, List[str]]"
                ],
                "decks_by_id": [
                    "int",
                    "Optional[bool]",
                    "str",
                    "Mapping[Any, str]",
                    "Union[str, List[str]]",
                    "bool",
                    "Optional[str]"
                ],
                "matches": [
                    "bool",
                    "Callable[[str], None]",
                    "Callable[..., None]",
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "stats": {
            "name": "stats",
            "location": 171,
            "return": [
                "str",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {}
        },
        "update_match": {
            "name": "update_match",
            "location": 184,
            "return": [
                "None"
            ],
            "arguments": {
                "match_id": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "left_id": [
                    "Optional[str]",
                    "str",
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "left_games": [
                    "int",
                    "bytes",
                    "Optional[str]",
                    "Tuple[int, str]",
                    "bool",
                    "zerver.models.Realm",
                    "List[str]",
                    "str",
                    "dict"
                ],
                "right_id": [
                    "int",
                    "bytes",
                    "Optional[str]",
                    "Tuple[int, str]",
                    "bool",
                    "zerver.models.Realm",
                    "List[str]",
                    "str",
                    "dict"
                ],
                "right_games": [
                    "int",
                    "bytes",
                    "Optional[str]",
                    "Tuple[int, str]",
                    "bool",
                    "zerver.models.Realm",
                    "List[str]",
                    "str",
                    "dict"
                ]
            }
        },
        "update_games": {
            "name": "update_games",
            "location": 199,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "match_id": [
                    "str",
                    "int",
                    "List[str]",
                    "transfer.models.Catalog.ID"
                ],
                "deck_id": [
                    "str",
                    "int",
                    "List[str]",
                    "transfer.models.Catalog.ID"
                ],
                "games": [
                    "str",
                    "int",
                    "List[str]",
                    "transfer.models.Catalog.ID"
                ]
            }
        },
        "update_cache": {
            "name": "update_cache",
            "location": 204,
            "return": [
                "None"
            ],
            "arguments": {
                "deck_id": [
                    "str",
                    "bool",
                    "Optional[Mapping[str, str]]"
                ],
                "games": [
                    "bool",
                    "list",
                    "str",
                    "bytes"
                ],
                "opponent_games": [
                    "bool",
                    "list",
                    "str",
                    "bytes"
                ],
                "delete": [
                    "List[\"DeliveryItem\"]",
                    "List[int]",
                    "Optional[Sequence[str]]",
                    "tildes.models.group.Group",
                    "Iterable[Any]",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ],
                "dt": [
                    "datetime.datetime",
                    "str",
                    "datetime.date",
                    "List[str]",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "delete_match": {
            "name": "delete_match",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "match_id": [
                    "str",
                    "int"
                ]
            }
        },
        "winner": {
            "name": "winner",
            "location": 244,
            "return": [
                "bool",
                "List[str]"
            ],
            "arguments": {
                "left_id": [
                    "str",
                    "int",
                    "transfer.models.ItemID",
                    "float"
                ],
                "left_games": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool",
                    "Optional[bool]"
                ],
                "right_id": [
                    "Union[Callable, Set[str], str]",
                    "str",
                    "bool"
                ],
                "right_games": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/data/matchup.py": {
        "matchup": {
            "name": "matchup",
            "location": 8,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "hero": [
                    "Dict[str, str]",
                    "str",
                    "Mapping[str, Any]"
                ],
                "enemy": [
                    "Dict[str, str]",
                    "str",
                    "Mapping[str, Any]"
                ],
                "season_id": [
                    "int",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/data/news.py": {
        "all_news": {
            "name": "all_news",
            "location": 19,
            "return": [],
            "arguments": {
                "start_date": [],
                "end_date": [],
                "max_items": []
            }
        },
        "load_news": {
            "name": "load_news",
            "location": 43,
            "return": [],
            "arguments": {
                "start_date": [],
                "end_date": [],
                "max_items": []
            }
        },
        "add_or_update_news": {
            "name": "add_or_update_news",
            "location": 73,
            "return": [],
            "arguments": {
                "news_item_id": [],
                "date": [],
                "title": [],
                "url": []
            }
        },
        "update_news": {
            "name": "update_news",
            "location": 80,
            "return": [],
            "arguments": {
                "news_item_id": [],
                "ts": [],
                "title": [],
                "url": []
            }
        },
        "add_news": {
            "name": "add_news",
            "location": 84,
            "return": [],
            "arguments": {
                "ts": [],
                "title": [],
                "url": []
            }
        },
        "delete": {
            "name": "delete",
            "location": 88,
            "return": [],
            "arguments": {
                "news_item_id": []
            }
        },
        "tournament_winners": {
            "name": "tournament_winners",
            "location": 92,
            "return": [],
            "arguments": {
                "start_date": [],
                "end_date": [],
                "max_items": []
            }
        },
        "tournament_winner_headline": {
            "name": "tournament_winner_headline",
            "location": 97,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "perfect_league_runs": {
            "name": "perfect_league_runs",
            "location": 100,
            "return": [],
            "arguments": {
                "start_date": [],
                "end_date": [],
                "max_items": []
            }
        },
        "perfect_league_run_headline": {
            "name": "perfect_league_run_headline",
            "location": 106,
            "return": [],
            "arguments": {
                "d": []
            }
        },
        "code_merges": {
            "name": "code_merges",
            "location": 109,
            "return": [],
            "arguments": {
                "start_date": [],
                "end_date": [],
                "max_items": []
            }
        },
        "subreddit": {
            "name": "subreddit",
            "location": 125,
            "return": [],
            "arguments": {
                "start_date": [],
                "end_date": [],
                "max_items": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/data/person.py": {
        "load_person_by_id": {
            "name": "load_person_by_id",
            "location": 13,
            "return": [
                "bool",
                "zerver.models.Realm",
                "Optional[str]"
            ],
            "arguments": {
                "person_id": [
                    "int",
                    "Optional[int]",
                    "str",
                    "List[int]"
                ],
                "season_id": [
                    "int",
                    "Optional[int]",
                    "str",
                    "List[int]"
                ]
            }
        },
        "load_person_by_mtgo_username": {
            "name": "load_person_by_mtgo_username",
            "location": 16,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "username": [
                    "str",
                    "Optional[int]",
                    "list"
                ],
                "season_id": [
                    "str",
                    "Optional[int]",
                    "list"
                ]
            }
        },
        "load_person_by_discord_id": {
            "name": "load_person_by_discord_id",
            "location": 19,
            "return": [
                "bool",
                "int",
                "Tuple[float, float]"
            ],
            "arguments": {
                "discord_id": [
                    "int",
                    "Optional[int]",
                    "str",
                    "List[int]"
                ],
                "season_id": [
                    "int",
                    "Optional[int]",
                    "str",
                    "List[int]"
                ]
            }
        },
        "load_person_by_discord_id_or_username": {
            "name": "load_person_by_discord_id_or_username",
            "location": 23,
            "return": [
                "bool",
                "Tuple[float, float]",
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "person": [
                    "str",
                    "int"
                ],
                "season_id": [
                    "int",
                    "str",
                    "Optional[int]",
                    "bytes"
                ]
            }
        },
        "maybe_load_person_by_discord_id": {
            "name": "maybe_load_person_by_discord_id",
            "location": 49,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "str"
            ],
            "arguments": {
                "discord_id": [
                    "Optional[int]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "maybe_load_person_by_tappedout_name": {
            "name": "maybe_load_person_by_tappedout_name",
            "location": 55,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "username": [
                    "str"
                ]
            }
        },
        "maybe_load_person_by_mtggoldfish_name": {
            "name": "maybe_load_person_by_mtggoldfish_name",
            "location": 59,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "username": [
                    "str"
                ]
            }
        },
        "load_person": {
            "name": "load_person",
            "location": 62,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "where": [
                    "str",
                    "int"
                ],
                "season_id": [
                    "str",
                    "int"
                ]
            }
        },
        "load_person_statless": {
            "name": "load_person_statless",
            "location": 72,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "where": [
                    "str"
                ],
                "season_id": [
                    "str",
                    "Set[int]",
                    "int"
                ]
            }
        },
        "load_people_count": {
            "name": "load_people_count",
            "location": 94,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "where": [
                    "int",
                    "str",
                    "Dict[str, Any]"
                ],
                "season_id": [
                    "Optional[str]",
                    "str",
                    "Type[models.taxonomies.T]"
                ]
            }
        },
        "load_people": {
            "name": "load_people",
            "location": 113,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "where": [
                    "bool",
                    "str"
                ],
                "order_by": [
                    "bool",
                    "str"
                ],
                "limit": [
                    "bool",
                    "str"
                ],
                "season_id": [
                    "int",
                    "str",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "seasons_active": {
            "name": "seasons_active",
            "location": 161,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "person_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "preaggregate": {
            "name": "preaggregate",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "preaggregate_head_to_head": {
            "name": "preaggregate_head_to_head",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "set_achievements": {
            "name": "set_achievements",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "people": [
                    "str",
                    "int",
                    "grouper.models.group.Group",
                    "Dict[str,str]",
                    "bool",
                    "List[int]"
                ],
                "season_id": [
                    "str",
                    "int"
                ]
            }
        },
        "load_head_to_head_count": {
            "name": "load_head_to_head_count",
            "location": 234,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "Type[db.models.BaseModel]"
            ],
            "arguments": {
                "person_id": [
                    "int",
                    "bool",
                    "Optional[Tuple[int, int]]"
                ],
                "where": [
                    "int",
                    "bool",
                    "Optional[Tuple[int, int]]"
                ],
                "season_id": [
                    "int",
                    "str"
                ]
            }
        },
        "load_head_to_head": {
            "name": "load_head_to_head",
            "location": 240,
            "return": [
                "List[str]",
                "Set[str]",
                "List[List[str]]",
                "List[T]"
            ],
            "arguments": {
                "person_id": [
                    "int",
                    "Set[transfer.models.SubjectID]"
                ],
                "where": [
                    "int",
                    "Set[transfer.models.SubjectID]"
                ],
                "order_by": [
                    "int",
                    "Set[transfer.models.SubjectID]"
                ],
                "limit": [
                    "int",
                    "Set[transfer.models.SubjectID]"
                ],
                "season_id": [
                    "int",
                    "str",
                    "list",
                    "bytes",
                    "Optional[int]"
                ]
            }
        },
        "associate": {
            "name": "associate",
            "location": 267,
            "return": [
                "int",
                "bool",
                "\"IApiCursor\"",
                "str",
                "addrservice.database.addressbook_db.AbstractAddressBookDB"
            ],
            "arguments": {
                "d": [
                    "str",
                    "Optional[str]",
                    "float",
                    "Optional[int]"
                ],
                "discord_id": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "is_allowed_to_retire": {
            "name": "is_allowed_to_retire",
            "location": 272,
            "return": [
                "bool"
            ],
            "arguments": {
                "deck_id": [
                    "Optional[int]",
                    "str",
                    "bytes",
                    "int"
                ],
                "discord_id": [
                    "int",
                    "str",
                    "transfer.models.TopicID"
                ]
            }
        },
        "get_or_insert_person_id": {
            "name": "get_or_insert_person_id",
            "location": 282,
            "return": [
                "bool"
            ],
            "arguments": {
                "mtgo_username": [
                    "bytes",
                    "List[str]",
                    "int",
                    "zerver.lib.db.Query",
                    "str"
                ],
                "tappedout_username": [
                    "bytes",
                    "List[str]",
                    "int",
                    "zerver.lib.db.Query",
                    "str"
                ],
                "mtggoldfish_username": [
                    "bytes",
                    "List[str]",
                    "int",
                    "zerver.lib.db.Query",
                    "str"
                ]
            }
        },
        "load_aliases": {
            "name": "load_aliases",
            "location": 290,
            "return": [
                "List[str]",
                "Set[str]",
                "List[List[str]]",
                "Dict[str, Set[str]]",
                "FrozenSet[str]",
                "dict"
            ],
            "arguments": {}
        },
        "add_alias": {
            "name": "add_alias",
            "location": 303,
            "return": [
                "None"
            ],
            "arguments": {
                "person_id": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "alias": [
                    "int",
                    "str"
                ]
            }
        },
        "load_notes": {
            "name": "load_notes",
            "location": 314,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "person_id": [
                    "str",
                    "int"
                ]
            }
        },
        "add_note": {
            "name": "add_note",
            "location": 342,
            "return": [
                "None"
            ],
            "arguments": {
                "creator_id": [
                    "int",
                    "str"
                ],
                "subject_id": [
                    "int",
                    "str"
                ],
                "note": [
                    "int",
                    "str"
                ]
            }
        },
        "link_discord": {
            "name": "link_discord",
            "location": 346,
            "return": [
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "mtgo_username": [
                    "int",
                    "str",
                    "Type[models.taxonomies.T]"
                ],
                "discord_id": [
                    "int",
                    "Optional[str]",
                    "str",
                    "Optional[Dict[str, str]]",
                    "bool"
                ]
            }
        },
        "unlink_discord": {
            "name": "unlink_discord",
            "location": 355,
            "return": [
                "str",
                "bool",
                "Optional[Union[Any, Any]]"
            ],
            "arguments": {
                "person_id": [
                    "int",
                    "str"
                ]
            }
        },
        "remove_discord_link": {
            "name": "remove_discord_link",
            "location": 359,
            "return": [
                "str",
                "bool",
                "Optional[Union[Any, Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "discord_id": [
                    "int",
                    "str"
                ]
            }
        },
        "is_banned": {
            "name": "is_banned",
            "location": 363,
            "return": [
                "Callable[[KT], VT]",
                "str",
                "int",
                "Set[str]"
            ],
            "arguments": {
                "mtgo_username": [
                    "str",
                    "int"
                ]
            }
        },
        "squash": {
            "name": "squash",
            "location": 366,
            "return": [
                "None"
            ],
            "arguments": {
                "p1id": [
                    "int",
                    "Optional[str]",
                    "str"
                ],
                "p2id": [
                    "str",
                    "int"
                ],
                "col1": [
                    "int",
                    "str",
                    "List[allennlp.data.tokenizers.token.Token]"
                ],
                "col2": [
                    "str",
                    "int"
                ]
            }
        },
        "set_locale": {
            "name": "set_locale",
            "location": 375,
            "return": [
                "None"
            ],
            "arguments": {
                "person_id": [
                    "int",
                    "str"
                ],
                "locale": [
                    "int",
                    "str"
                ]
            }
        },
        "load_sorters": {
            "name": "load_sorters",
            "location": 378,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "ban": {
            "name": "ban",
            "location": 412,
            "return": [
                "str",
                "bool",
                "Optional[Union[Any, Any]]"
            ],
            "arguments": {
                "person_id": [
                    "int",
                    "str"
                ]
            }
        },
        "unban": {
            "name": "unban",
            "location": 416,
            "return": [
                "str",
                "bool",
                "Optional[Union[Any, Any]]"
            ],
            "arguments": {
                "person_id": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/data/playability.py": {
        "preaggregate": {
            "name": "preaggregate",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "key_cards": {
            "name": "key_cards",
            "location": 24,
            "return": [
                "List[str]",
                "str",
                "dict",
                "FrozenSet[str]",
                "AbstractSet[Type[object]]"
            ],
            "arguments": {
                "season_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "playability": {
            "name": "playability",
            "location": 55,
            "return": [
                "List[str]",
                "set",
                "str",
                "Dict[str, Set[str]]",
                "Iterable"
            ],
            "arguments": {}
        },
        "season_playability": {
            "name": "season_playability",
            "location": 66,
            "return": [
                "List[str]",
                "List[\"Variable\"]",
                "List[int]"
            ],
            "arguments": {
                "season_id": [
                    "str",
                    "int"
                ]
            }
        },
        "rank": {
            "name": "rank",
            "location": 83,
            "return": [
                "List[str]",
                "set",
                "str",
                "Dict[str, Set[str]]",
                "Iterable"
            ],
            "arguments": {}
        },
        "preaggregate_season_count": {
            "name": "preaggregate_season_count",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "preaggregate_season_archetype_count": {
            "name": "preaggregate_season_archetype_count",
            "location": 116,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "preaggregate_season_card_count": {
            "name": "preaggregate_season_card_count",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "preaggregate_season_archetype_card_count": {
            "name": "preaggregate_season_archetype_card_count",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "preaggregate_season_archetype_playability": {
            "name": "preaggregate_season_archetype_playability",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "preaggregate_archetype_count": {
            "name": "preaggregate_archetype_count",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "preaggregate_card_count": {
            "name": "preaggregate_card_count",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "preaggregate_archetype_card_count": {
            "name": "preaggregate_archetype_card_count",
            "location": 298,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "preaggregate_archetype_playability": {
            "name": "preaggregate_archetype_playability",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "preaggregate_season_playability": {
            "name": "preaggregate_season_playability",
            "location": 367,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "preaggregate_playability": {
            "name": "preaggregate_playability",
            "location": 390,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/decksite/data/preaggregation.py": {
        "preaggregate": {
            "name": "preaggregate",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "table": [
                    "Exception",
                    "str",
                    "Union[int, str, bool]"
                ],
                "sql": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/data/query.py": {
        "person_query": {
            "name": "person_query",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "table": [
                    "str",
                    "type",
                    "list"
                ]
            }
        },
        "competition_ids_by_type_select": {
            "name": "competition_ids_by_type_select",
            "location": 14,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "competition_type": [
                    "str",
                    "Optional[Union[int, float]]",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "competition_type_id_select": {
            "name": "competition_type_id_select",
            "location": 33,
            "return": [
                "str",
                "bool",
                "IO"
            ],
            "arguments": {
                "competition_type": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "competition_join": {
            "name": "competition_join",
            "location": 43,
            "return": [
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {}
        },
        "season_query": {
            "name": "season_query",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "season_id": [
                    "Optional[Union[str, int]]",
                    "str",
                    "int"
                ],
                "column_name": [
                    "str",
                    "int"
                ]
            }
        },
        "season_join": {
            "name": "season_join",
            "location": 61,
            "return": [
                "str",
                "list"
            ],
            "arguments": {}
        },
        "decks_order_by": {
            "name": "decks_order_by",
            "location": 64,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "sort_by": [
                    "Optional[str]",
                    "int",
                    "List[dict]",
                    "List[List[int]]",
                    "bytes",
                    "Dict[Tuple[int, ...], int]"
                ],
                "sort_order": [
                    "int",
                    "Union[str, List[Any]]",
                    "float",
                    "str",
                    "Tuple[int, int, int, int]"
                ],
                "competition_id": [
                    "Optional[str]",
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "cards_order_by": {
            "name": "cards_order_by",
            "location": 100,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "sort_by": [
                    "Optional[str]",
                    "str"
                ],
                "sort_order": [
                    "str",
                    "List[int]"
                ]
            }
        },
        "people_order_by": {
            "name": "people_order_by",
            "location": 119,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "sort_by": [
                    "Optional[str]",
                    "str"
                ],
                "sort_order": [
                    "str",
                    "List[int]"
                ]
            }
        },
        "head_to_head_order_by": {
            "name": "head_to_head_order_by",
            "location": 139,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "sort_by": [
                    "str",
                    "Optional[str]"
                ],
                "sort_order": [
                    "str",
                    "List[int]"
                ]
            }
        },
        "leaderboard_order_by": {
            "name": "leaderboard_order_by",
            "location": 155,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "sort_by": [
                    "Optional[str]",
                    "str"
                ],
                "sort_order": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "matches_order_by": {
            "name": "matches_order_by",
            "location": 171,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "sort_by": [
                    "str",
                    "Optional[str]",
                    "IO",
                    "List[str]",
                    "IO[str]"
                ],
                "sort_order": [
                    "str",
                    "Callable",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "exclude_active_league_runs": {
            "name": "exclude_active_league_runs",
            "location": 189,
            "return": [
                "str",
                "int",
                "Tuple[int]"
            ],
            "arguments": {
                "except_person_id": [
                    "Optional[int]",
                    "str",
                    "int",
                    "Union[int,str]"
                ]
            }
        },
        "decks_where": {
            "name": "decks_where",
            "location": 203,
            "return": [
                "str",
                "Dict[str, int]",
                "float"
            ],
            "arguments": {
                "args": [],
                "is_admin": [
                    "str",
                    "int",
                    "Optional[str]",
                    "List[int]",
                    "dict",
                    "float"
                ],
                "viewer_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "List[str]",
                    "float"
                ]
            }
        },
        "text_match_where": {
            "name": "text_match_where",
            "location": 224,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "field": [
                    "str",
                    "List[str]",
                    "IO[str]"
                ],
                "q": [
                    "str",
                    "List[str]",
                    "IO[str]"
                ]
            }
        },
        "archetype_where": {
            "name": "archetype_where",
            "location": 227,
            "return": [
                "str"
            ],
            "arguments": {
                "archetype_id": [
                    "int",
                    "str",
                    "Optional[float]",
                    "list",
                    "bytes"
                ]
            }
        },
        "card_where": {
            "name": "card_where",
            "location": 230,
            "return": [
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "card_search_where": {
            "name": "card_search_where",
            "location": 233,
            "return": [
                "bool"
            ],
            "arguments": {
                "q": [
                    "List[str]",
                    "str",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "tournament_only_clause": {
            "name": "tournament_only_clause",
            "location": 240,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {}
        },
        "decks_updated_since": {
            "name": "decks_updated_since",
            "location": 243,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "ts": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "pagination": {
            "name": "pagination",
            "location": 246,
            "return": [
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/data/query_test.py": {
        "test_decks_where": {
            "name": "test_decks_where",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_card_search_where": {
            "name": "test_card_search_where",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_limit": {
            "name": "test_limit",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/decksite/data/rule.py": {
        "excluded_archetype_names": {
            "name": "excluded_archetype_names",
            "location": 14,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "Container[str]"
            ],
            "arguments": {}
        },
        "excluded_archetype_ids": {
            "name": "excluded_archetype_ids",
            "location": 17,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "excluded_archetype_info": {
            "name": "excluded_archetype_info",
            "location": 23,
            "return": [
                "List[str]",
                "Dict[str, Set[str]]",
                "str",
                "set",
                "Set[VT]"
            ],
            "arguments": {}
        },
        "apply_rules_to_decks": {
            "name": "apply_rules_to_decks",
            "location": 29,
            "return": [
                "str",
                "dict",
                "Iterable[Hashable]",
                "int"
            ],
            "arguments": {
                "decks": [
                    "Sequence[int]",
                    "type",
                    "bool",
                    "Optional[bool]",
                    "Union[str, List]",
                    "str"
                ]
            }
        },
        "cache_all_rules": {
            "name": "cache_all_rules",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "num_classified_decks": {
            "name": "num_classified_decks",
            "location": 72,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "mistagged_decks": {
            "name": "mistagged_decks",
            "location": 77,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {}
        },
        "doubled_decks": {
            "name": "doubled_decks",
            "location": 113,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {}
        },
        "overlooked_decks": {
            "name": "overlooked_decks",
            "location": 140,
            "return": [
                "salon.models.Stylist",
                "bool"
            ],
            "arguments": {}
        },
        "load_all_rules": {
            "name": "load_all_rules",
            "location": 168,
            "return": [
                "list",
                "Union[int, float, complex]",
                "set",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "add_rule": {
            "name": "add_rule",
            "location": 203,
            "return": [
                "str",
                "bool",
                "Optional[Union[Any, Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "archetype_id": [
                    "int",
                    "str"
                ]
            }
        },
        "update_cards_raw": {
            "name": "update_cards_raw",
            "location": 207,
            "return": [
                "bool"
            ],
            "arguments": {
                "rule_id": [
                    "int",
                    "str",
                    "Optional[str]",
                    "transfer.models.TicketBundleID"
                ],
                "include": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "exclude": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "update_cards": {
            "name": "update_cards",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "rule_id": [
                    "int",
                    "str",
                    "bool"
                ],
                "inc": [
                    "List[Tuple[int, str]]",
                    "int",
                    "str",
                    "list"
                ],
                "exc": [
                    "List[Tuple[int, str]]",
                    "int",
                    "str",
                    "list"
                ]
            }
        },
        "classified_decks_query": {
            "name": "classified_decks_query",
            "location": 244,
            "return": [
                "esm.models.service_type.ServiceType"
            ],
            "arguments": {}
        },
        "apply_rules_query": {
            "name": "apply_rules_query",
            "location": 247,
            "return": [
                "str",
                "dict",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "deck_query": [
                    "str",
                    "List[str]",
                    "Awaitable"
                ],
                "rule_query": [
                    "str",
                    "List[str]",
                    "Awaitable"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/data/season.py": {
        "get_season_id": {
            "name": "get_season_id",
            "location": 14,
            "return": [
                "tuple",
                "str",
                "int"
            ],
            "arguments": {
                "dt": [
                    "str",
                    "datetime.datetime",
                    "datetime.date",
                    "Set[str]",
                    "Dict[datetime.date, Dict[str, Any]]"
                ]
            }
        },
        "init_seasons": {
            "name": "init_seasons",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "preaggregate": {
            "name": "preaggregate",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "preaggregate_season_stats": {
            "name": "preaggregate_season_stats",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "season_stats": {
            "name": "season_stats",
            "location": 123,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/decksite/data/season_test.py": {
        "test_get_season_id": {
            "name": "test_get_season_id",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/decksite/data/top.py": {},
    "Penny-Dreadful-Tools-master/decksite/data/__init__.py": {},
    "Penny-Dreadful-Tools-master/decksite/data/models/person.py": {
        "Person.decks": {
            "name": "decks",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/data/models/__init__.py": {},
    "Penny-Dreadful-Tools-master/decksite/scrapers/bugged_cards.py": {
        "scrape": {
            "name": "scrape",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/decksite/scrapers/decksite.py": {
        "disabled": {
            "name": "disabled",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "tournament": {
            "name": "tournament",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "comp": [
                    "str"
                ]
            }
        },
        "store_deck": {
            "name": "store_deck",
            "location": 25,
            "return": [
                "str",
                "List[Tuple[int, int]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "d": [
                    "AbstractSet[int]",
                    "List[int]",
                    "bytes"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/scrapers/gatherling.py": {
        "scrape": {
            "name": "scrape",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "make_api_response": {
            "name": "make_api_response",
            "location": 162,
            "return": [
                "dict",
                "Optional[str]",
                "List[dict]",
                "Dict[str, Any]",
                "bool",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "process": {
            "name": "process",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "dict",
                    "Dict[bytes, bytes]",
                    "Dict[str, float]",
                    "list",
                    "str"
                ]
            }
        },
        "process_tournament": {
            "name": "process_tournament",
            "location": 174,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]",
                    "Dict[str, object]"
                ],
                "event": [
                    "str",
                    "bool"
                ]
            }
        },
        "determine_finishes": {
            "name": "determine_finishes",
            "location": 191,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "standings": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "finalists": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "medal2finish": {
            "name": "medal2finish",
            "location": 202,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "m": [
                    "dict",
                    "str",
                    "Tuple[int, int, str]",
                    "Iterable[str]"
                ]
            }
        },
        "insert_competition": {
            "name": "insert_competition",
            "location": 213,
            "return": [
                "str",
                "bool",
                "Union[str, int]"
            ],
            "arguments": {
                "name": [
                    "Optional[str]",
                    "Sequence",
                    "str",
                    "Dict[str, Any]",
                    "Optional[dict]"
                ],
                "date": [
                    "str",
                    "datetime.datetime",
                    "Dict[datetime.date, Dict[str, Any]]",
                    "list",
                    "datetime.date",
                    "datetime.timedelta",
                    "Union[str, datetime.datetime, None]"
                ],
                "event": [
                    "Optional[str]",
                    "str",
                    "Sequence",
                    "Dict[str, Any]",
                    "Callable[[], str]"
                ]
            }
        },
        "insert_decks": {
            "name": "insert_decks",
            "location": 226,
            "return": [
                "str",
                "Optional[int]",
                "dict"
            ],
            "arguments": {
                "competition_id": [
                    "datetime.datetime",
                    "int",
                    "str"
                ],
                "date": [
                    "datetime.datetime",
                    "int",
                    "str"
                ],
                "ds": [
                    "datetime.datetime",
                    "int",
                    "str"
                ],
                "fs": [
                    "datetime.datetime",
                    "int",
                    "str"
                ],
                "players": [
                    "datetime.datetime",
                    "int",
                    "str"
                ]
            }
        },
        "insert_deck": {
            "name": "insert_deck",
            "location": 229,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "competition_id": [
                    "int",
                    "str",
                    "Optional[List[str]]",
                    "List[datetime.date]",
                    "datetime.datetime"
                ],
                "date": [
                    "int",
                    "str",
                    "Optional[List[str]]",
                    "List[datetime.date]",
                    "datetime.datetime"
                ],
                "d": [
                    "str",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "fs": [
                    "int",
                    "bool",
                    "Dict[Any, str]"
                ],
                "players": [
                    "str",
                    "int",
                    "Optional[int]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "insert_matches": {
            "name": "insert_matches",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "date": [
                    "datetime.date",
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "datetime.datetime",
                    "str"
                ],
                "decks_by_gatherling_username": [
                    "datetime.date",
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "datetime.datetime",
                    "str"
                ],
                "ms": [
                    "Optional[Any]",
                    "str",
                    "int",
                    "List[datetime.date]",
                    "bool",
                    "List[int]"
                ],
                "total_rounds": [
                    "datetime.date",
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]",
                    "datetime.datetime",
                    "str"
                ]
            }
        },
        "insert_match": {
            "name": "insert_match",
            "location": 259,
            "return": [
                "None"
            ],
            "arguments": {
                "date": [
                    "datetime.datetime",
                    "str",
                    "datetime.time",
                    "bool",
                    "Optional[datetime.datetime]",
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]"
                ],
                "decks_by_gatherling_username": [
                    "str",
                    "int",
                    "list"
                ],
                "m": [
                    "bool",
                    "str",
                    "datetime"
                ],
                "total_rounds": [
                    "datetime.datetime",
                    "str",
                    "datetime.time",
                    "bool",
                    "Optional[datetime.datetime]",
                    "hypothesis.strategies.SearchStrategy[datetime.date.time]"
                ]
            }
        },
        "is_bye": {
            "name": "is_bye",
            "location": 277,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "m": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ]
            }
        },
        "elimination": {
            "name": "elimination",
            "location": 281,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "m": [
                    "List[Tuple[str, str]]",
                    "Set[str]",
                    "Dict[str, Any]"
                ],
                "total_rounds": [
                    "str",
                    "bool",
                    "float",
                    "List[List[str]]",
                    "int"
                ]
            }
        },
        "find_mtgo_username": {
            "name": "find_mtgo_username",
            "location": 287,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "gatherling_username": [
                    "Type[T]",
                    "str",
                    "int"
                ],
                "players": [
                    "List[str]",
                    "bool",
                    "List[object]",
                    "Sized",
                    "Optional[List]",
                    "str"
                ]
            }
        },
        "gatherling_url": {
            "name": "gatherling_url",
            "location": 294,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "href": [
                    "str",
                    "TextIO"
                ]
            }
        },
        "guess_archetypes": {
            "name": "guess_archetypes",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "ds": [
                    "List[decksite.data.deck.Deck]",
                    "dict",
                    "str"
                ]
            }
        },
        "vivify_date": {
            "name": "vivify_date",
            "location": 305,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "fuzzy_get": {
            "name": "fuzzy_get",
            "location": 310,
            "return": [
                "Union[int, float]",
                "tuple",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "d": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "k": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "aliased": {
            "name": "aliased",
            "location": 324,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "username": [
                    "str",
                    "dict"
                ]
            }
        },
        "load_aliases": {
            "name": "load_aliases",
            "location": 329,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/decksite/scrapers/gatherling_test.py": {
        "test_medal2finish": {
            "name": "test_medal2finish",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_process": {
            "name": "test_process",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_find_mtgo_username": {
            "name": "test_find_mtgo_username",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "test_gatherling_url": {
            "name": "test_gatherling_url",
            "location": 58,
            "return": [],
            "arguments": {}
        },
        "test_vivify_date": {
            "name": "test_vivify_date",
            "location": 61,
            "return": [],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/decksite/scrapers/league1.py": {
        "disabled": {
            "name": "disabled",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/decksite/scrapers/league2.py": {
        "disabled": {
            "name": "disabled",
            "location": 20,
            "return": [],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/decksite/scrapers/league3.py": {
        "disabled": {
            "name": "disabled",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/decksite/scrapers/mtggoldfish.py": {
        "scrape": {
            "name": "scrape",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "limit": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "without_by": {
            "name": "without_by",
            "location": 45,
            "return": [
                "Callable",
                "str",
                "list",
                "float"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "scrape_created_date": {
            "name": "scrape_created_date",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "d": [
                    "str",
                    "float",
                    "Dict[str, str]",
                    "List[str]"
                ]
            }
        },
        "parse_created_date": {
            "name": "parse_created_date",
            "location": 55,
            "return": [
                "bool"
            ],
            "arguments": {
                "soup": [
                    "str",
                    "Union[int, str]",
                    "int",
                    "dict"
                ]
            }
        },
        "scrape_decklist": {
            "name": "scrape_decklist",
            "location": 63,
            "return": [
                "str",
                "Tuple[float, float]",
                "Tuple[int, int]",
                "allennlp.data.Instance",
                "bool"
            ],
            "arguments": {
                "d": [
                    "str",
                    "Dict[str, str]",
                    "magic.models.Deck",
                    "Type[object]"
                ]
            }
        },
        "vivify_or_error": {
            "name": "vivify_or_error",
            "location": 68,
            "return": [
                "int",
                "float",
                "Callable[[Union, Union], Tuple[Any, ...],]"
            ],
            "arguments": {
                "d": [
                    "T",
                    "int",
                    "Callable",
                    "Optional[Callable[..., Any]]",
                    "Sequence[T]",
                    "IO[bytes]"
                ]
            }
        },
        "scrape_one": {
            "name": "scrape_one",
            "location": 80,
            "return": [
                "bool",
                "dict",
                "str"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "Union[str, Iterable[str]]"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/scrapers/scraper_test.py": {
        "test_goldfish": {
            "name": "test_goldfish",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/decksite/scrapers/__init__.py": {},
    "Penny-Dreadful-Tools-master/decksite/views/about.py": {
        "exciting_cards": {
            "name": "exciting_cards",
            "location": 26,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "fancy_cards": {
            "name": "fancy_cards",
            "location": 31,
            "return": [
                "str",
                "AnyStr",
                "bytes",
                "Union[str, List[str]]"
            ],
            "arguments": {}
        },
        "About.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "src": [
                    "dict",
                    "str",
                    "MutableSequence[str]",
                    "Optional[Callable]",
                    "Sequence[str]"
                ],
                "last_season_tournament_winners": [
                    "Tuple[int, int]",
                    "str",
                    "Optional[str]",
                    "List[Dict[str, str]]",
                    "Optional[List[str]]"
                ]
            }
        },
        "About.page_title": {
            "name": "page_title",
            "location": 23,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/about_pdm.py": {
        "AboutPdm.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AboutPdm.page_title": {
            "name": "page_title",
            "location": 15,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AboutPdm.languages": {
            "name": "languages",
            "location": 18,
            "return": [
                "str",
                "Optional[str]",
                "Iterable[str]",
                "list",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/achievements.py": {
        "Achievements.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "achievements": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Achievements.page_title": {
            "name": "page_title",
            "location": 19,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/admin.py": {
        "Admin.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "admin_menu": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Admin.page_title": {
            "name": "page_title",
            "location": 12,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/admin_retire.py": {
        "AdminRetire.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "AdminRetire.page_title": {
            "name": "page_title",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/archetype.py": {
        "Archetype.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "archetype": [
                    "bool",
                    "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                    "float",
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "archetypes": [
                    "int",
                    "Optional[int]",
                    "Set[str]",
                    "Optional[str]",
                    "List[int]"
                ],
                "matchups": [
                    "int",
                    "Optional[int]",
                    "List[float]",
                    "Dict[str, Any]"
                ],
                "season_id": [
                    "str",
                    "int",
                    "float"
                ],
                "tournament_only": [
                    "str"
                ]
            }
        },
        "Archetype.og_title": {
            "name": "og_title",
            "location": 49,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Archetype.og_url": {
            "name": "og_url",
            "location": 52,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Archetype.og_description": {
            "name": "og_description",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Archetype.__getattr__": {
            "name": "__getattr__",
            "location": 58,
            "return": [
                "str",
                "bool",
                "int",
                "MutableMapping[str, Any]",
                "bytes",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "list"
                ]
            }
        },
        "Archetype.page_title": {
            "name": "page_title",
            "location": 61,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/archetypes.py": {
        "Archetypes.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "archetypes": [
                    "int",
                    "bool",
                    "float"
                ],
                "tournament_only": [
                    "int",
                    "bool",
                    "Tuple[str]"
                ]
            }
        },
        "Archetypes.page_title": {
            "name": "page_title",
            "location": 21,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/ban.py": {
        "Ban.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "people": [
                    "int",
                    "bool",
                    "float"
                ],
                "success": [
                    "Optional[int]",
                    "List[str]",
                    "Optional[str]",
                    "Optional[Callable]",
                    "Optional[Hashable]",
                    "Optional[Iterable[str]]"
                ]
            }
        },
        "Ban.page_title": {
            "name": "page_title",
            "location": 16,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/banners.py": {
        "Banners.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cards": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Banners.page_title": {
            "name": "page_title",
            "location": 13,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/bugs.py": {
        "Bugs.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bugs.page_title": {
            "name": "page_title",
            "location": 16,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/card.py": {
        "Card.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "card": [
                    "int",
                    "Tuple[float, float, float]",
                    "List[str]"
                ],
                "tournament_only": [
                    "Dict[str, str]",
                    "dict",
                    "models.Name",
                    "str"
                ]
            }
        },
        "Card.__getattr__": {
            "name": "__getattr__",
            "location": 26,
            "return": [
                "str",
                "bool",
                "int",
                "MutableMapping[str, Any]",
                "bytes",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "list"
                ]
            }
        },
        "Card.page_title": {
            "name": "page_title",
            "location": 29,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/cards.py": {
        "Cards.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cards": [
                    "int",
                    "Optional[int]"
                ],
                "tournament_only": [
                    "Optional[str]",
                    "bool",
                    "Optional[int]",
                    "int",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "query": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Cards.page_title": {
            "name": "page_title",
            "location": 21,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/community_guidelines.py": {
        "CommunityGuidelines.page_title": {
            "name": "page_title",
            "location": 6,
            "return": [
                "bool",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/competition.py": {
        "Competition.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "competition": [
                    "List[decksite.data.competition.Competition]",
                    "str",
                    "models.User",
                    "bool",
                    "int"
                ]
            }
        },
        "Competition.__getattr__": {
            "name": "__getattr__",
            "location": 25,
            "return": [
                "str",
                "bool",
                "int",
                "MutableMapping[str, Any]",
                "bytes",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "list"
                ]
            }
        },
        "Competition.page_title": {
            "name": "page_title",
            "location": 28,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/competitions.py": {
        "Competitions.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "competitions": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Competitions.page_title": {
            "name": "page_title",
            "location": 14,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/contact_us.py": {
        "ContactUs.page_title": {
            "name": "page_title",
            "location": 6,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/deck.py": {
        "display_round": {
            "name": "display_round",
            "location": 138,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "m": [
                    "shared.container.Container",
                    "int",
                    "List[Tuple[float, float]]",
                    "Type",
                    "Dict[str, List]",
                    "Sequence",
                    "Callable[[int], None]"
                ]
            }
        },
        "Deck.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "str",
                    "int"
                ],
                "person_id": [
                    "str",
                    "int"
                ],
                "discord_id": [
                    "str",
                    "int"
                ]
            }
        },
        "Deck.has_matches": {
            "name": "has_matches",
            "location": 53,
            "return": [
                "int",
                "str",
                "List[Dict[str, Any]]",
                "Dict[str, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deck.has_rounds": {
            "name": "has_rounds",
            "location": 56,
            "return": [
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deck.og_title": {
            "name": "og_title",
            "location": 59,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deck.og_url": {
            "name": "og_url",
            "location": 62,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deck.og_description": {
            "name": "og_description",
            "location": 65,
            "return": [
                "Optional[str]",
                "dict",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deck.oembed_url": {
            "name": "oembed_url",
            "location": 74,
            "return": [
                "str",
                "Dict[str, str]",
                "int",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deck.authenticate_url": {
            "name": "authenticate_url",
            "location": 77,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deck.logout_url": {
            "name": "logout_url",
            "location": 80,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deck.season_id": {
            "name": "season_id",
            "location": 83,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deck.__getattr__": {
            "name": "__getattr__",
            "location": 86,
            "return": [
                "str",
                "bool",
                "int",
                "MutableMapping[str, Any]",
                "bytes",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "list"
                ]
            }
        },
        "Deck.page_title": {
            "name": "page_title",
            "location": 89,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deck.sections": {
            "name": "sections",
            "location": 92,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deck.creatures": {
            "name": "creatures",
            "location": 104,
            "return": [
                "int",
                "list",
                "List[Dict]",
                "List[Tuple[int, float]]",
                "List[dict]",
                "List[str]",
                "Iterator[str]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deck.spells": {
            "name": "spells",
            "location": 107,
            "return": [
                "int",
                "list",
                "List[Dict]",
                "List[Tuple[int, float]]",
                "List[dict]",
                "List[str]",
                "Iterator[str]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deck.lands": {
            "name": "lands",
            "location": 110,
            "return": [
                "int",
                "list",
                "List[Dict]",
                "List[Tuple[int, float]]",
                "List[dict]",
                "List[str]",
                "Iterator[str]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deck.sideboard": {
            "name": "sideboard",
            "location": 113,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deck.public": {
            "name": "public",
            "location": 116,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deck.cardhoarder_url": {
            "name": "cardhoarder_url",
            "location": 129,
            "return": [
                "float",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/decklist_form.py": {
        "DecklistForm.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "decksite.data.form.Form"
                ],
                "person_id": [
                    "str",
                    "Set[int]",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "DecklistForm.classify_illegal_cards": {
            "name": "classify_illegal_cards",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/decks.py": {
        "Decks.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "league_only": [
                    "str",
                    "dict"
                ]
            }
        },
        "Decks.page_title": {
            "name": "page_title",
            "location": 11,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/deck_check.py": {
        "DeckCheck.page_title": {
            "name": "page_title",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeckCheck.TT_DECKLIST": {
            "name": "TT_DECKLIST",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeckCheck.TT_ENTER_OR_UPLOAD": {
            "name": "TT_ENTER_OR_UPLOAD",
            "location": 14,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeckCheck.TT_YOUR_RECENT_DECKS": {
            "name": "TT_YOUR_RECENT_DECKS",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeckCheck.TT_CHOOSE_DECK": {
            "name": "TT_CHOOSE_DECK",
            "location": 20,
            "return": [
                "str",
                "Awaitable[None]",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeckCheck.TT_DECKCHECK": {
            "name": "TT_DECKCHECK",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/edit_aliases.py": {
        "EditAliases.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "aliases": [
                    "int",
                    "Callable",
                    "str",
                    "AsyncIterator[T]",
                    "List[allennlp.data.fields.production_rule_field.ProductionRule]"
                ],
                "all_people": [
                    "Type",
                    "Dict[Tuple[int, int], str]",
                    "List[List[str]]"
                ]
            }
        },
        "EditAliases.page_title": {
            "name": "page_title",
            "location": 18,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/edit_archetypes.py": {
        "EditArchetypes.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "archetypes": [],
                "search_results": [
                    "Sequence[Sequence[float]]",
                    "Tuple[int]",
                    "bytes",
                    "list",
                    "List[Dict]",
                    "List[str]"
                ],
                "q": [
                    "bool",
                    "str",
                    "List['cirq.Circuit']",
                    "int",
                    "float",
                    "Optional[float]"
                ],
                "notq": [
                    "bool",
                    "str",
                    "List['cirq.Circuit']",
                    "int",
                    "float",
                    "Optional[float]"
                ]
            }
        },
        "EditArchetypes.page_title": {
            "name": "page_title",
            "location": 41,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/edit_league.py": {
        "EditLeague.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "EditLeague.page_title": {
            "name": "page_title",
            "location": 14,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/edit_matches.py": {
        "EditMatches.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "competition_id": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "decks": [
                    "list",
                    "str",
                    "Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]",
                    "robot_server.service.session.models.IdentifierType",
                    "db.models.Name",
                    "int"
                ]
            }
        },
        "EditMatches.page_title": {
            "name": "page_title",
            "location": 17,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/edit_news.py": {
        "EditNews.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "news": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "EditNews.page_title": {
            "name": "page_title",
            "location": 13,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/edit_rules.py": {
        "EditRules.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "num_classified": [
                    "int",
                    "Optional[int]"
                ],
                "num_total": [
                    "int",
                    "Optional[int]"
                ],
                "doubled_decks": [
                    "int",
                    "float"
                ],
                "mistagged_decks": [
                    "int",
                    "float"
                ],
                "overlooked_decks": [
                    "int",
                    "float",
                    "Tuple[Set[Any], Dict[int, int]]"
                ],
                "rules": [
                    "int",
                    "str",
                    "float",
                    "bool",
                    "Optional[Tuple[int, int]]"
                ],
                "archetypes": [
                    "int",
                    "bool",
                    "float"
                ],
                "excluded_archetype_info": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "EditRules.page_title": {
            "name": "page_title",
            "location": 49,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/faqs.py": {
        "Faqs.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Faqs.page_title": {
            "name": "page_title",
            "location": 10,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/home.py": {
        "Home.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "news": [],
                "decks": [],
                "cards": [],
                "matches_stats": []
            }
        },
        "Home.setup_news": {
            "name": "setup_news",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "news": []
            }
        },
        "Home.setup_decks": {
            "name": "setup_decks",
            "location": 37,
            "return": [],
            "arguments": {
                "self": [],
                "decks": []
            }
        },
        "Home.setup_cards": {
            "name": "setup_cards",
            "location": 88,
            "return": [],
            "arguments": {
                "self": [],
                "cards": []
            }
        },
        "Home.setup_rotation": {
            "name": "setup_rotation",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Home.setup_stats": {
            "name": "setup_stats",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "matches_stats": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/kickoff.py": {
        "KickOff.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "KickOff.page_title": {
            "name": "page_title",
            "location": 24,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/league_form.py": {
        "LeagueForm.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/league_info.py": {
        "suffix": {
            "name": "suffix",
            "location": 27,
            "return": [
                "int",
                "Dict[str, int]",
                "float",
                "str",
                "Dict[str, Any]",
                "Dict[int, List[Any]]"
            ],
            "arguments": {
                "d": [
                    "int",
                    "str",
                    "Union[int, str]",
                    "bytes"
                ]
            }
        },
        "custom_strftime": {
            "name": "custom_strftime",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "fmt": [
                    "str",
                    "datetime.datetime",
                    "int",
                    "bytes",
                    "bool",
                    "AnyStr"
                ],
                "t": [
                    "str",
                    "datetime.datetime",
                    "int",
                    "bytes",
                    "bool",
                    "AnyStr"
                ]
            }
        },
        "LeagueInfo.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeagueInfo.page_title": {
            "name": "page_title",
            "location": 21,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LeagueInfo.discord_url": {
            "name": "discord_url",
            "location": 24,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/link_accounts.py": {
        "LinkAccounts.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkAccounts.__getattr__": {
            "name": "__getattr__",
            "location": 32,
            "return": [
                "str",
                "bool",
                "int",
                "MutableMapping[str, Any]",
                "bytes",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "list"
                ]
            }
        },
        "LinkAccounts.page_title": {
            "name": "page_title",
            "location": 35,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkAccounts.process": {
            "name": "process",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkAccounts.link_discord": {
            "name": "link_discord",
            "location": 45,
            "return": [
                "Union[tuple, list]",
                "Set[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkAccounts.link_mtggoldfish": {
            "name": "link_mtggoldfish",
            "location": 55,
            "return": [
                "Union[tuple, list]",
                "Set[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkAccounts.link_tappedout": {
            "name": "link_tappedout",
            "location": 69,
            "return": [
                "Union[tuple, list]",
                "Set[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/matchups.py": {
        "summary_text": {
            "name": "summary_text",
            "location": 44,
            "return": [],
            "arguments": {
                "choices": [],
                "archetypes": [],
                "people": []
            }
        },
        "Matchups.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [],
            "arguments": {
                "self": [],
                "hero": [],
                "enemy": [],
                "season_id": [],
                "archetypes": [],
                "people": [],
                "cards": [],
                "results": []
            }
        },
        "Matchups.show_legal_seasons": {
            "name": "show_legal_seasons",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Matchups.page_title": {
            "name": "page_title",
            "location": 40,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/metagame.py": {
        "confidence_interval": {
            "name": "confidence_interval",
            "location": 56,
            "return": [
                "bool",
                "Dict[str, float]",
                "Dict[str, Dict[str, int]]",
                "Dict[str, int]"
            ],
            "arguments": {
                "win_rate": [
                    "int",
                    "float",
                    "str"
                ],
                "matches_played": [
                    "int",
                    "str",
                    "float",
                    "Tuple[int, int]",
                    "bytes"
                ]
            }
        },
        "Metagame.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "archetypes": [
                    "int",
                    "List[str]",
                    "Sequence[T]",
                    "allennlp.data.fields.sequence_field.SequenceField",
                    "Optional[bytes]"
                ],
                "tournament_only": [
                    "Optional[int]",
                    "bool",
                    "str"
                ],
                "key_cards": [
                    "dict",
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, str]",
                    "\"UdpTransport\"",
                    "bytes"
                ]
            }
        },
        "Metagame.page_title": {
            "name": "page_title",
            "location": 48,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/pd500.py": {
        "PD500.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tournament_winning_decks": [
                    "str",
                    "Optional[int]",
                    "List[int]",
                    "int",
                    "Mapping[str, str]",
                    "bool",
                    "Tuple[List[str], bool]"
                ]
            }
        },
        "PD500.page_title": {
            "name": "page_title",
            "location": 30,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/people.py": {
        "People.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "People.page_title": {
            "name": "page_title",
            "location": 13,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/person.py": {
        "Person.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "person": [
                    "Optional[Union[int, slice]]",
                    "float",
                    "int",
                    "Union[int, float]"
                ],
                "cards": [
                    "int",
                    "str",
                    "Optional[int]",
                    "float",
                    "Tuple[int, int]"
                ],
                "archetypes": [
                    "int",
                    "str",
                    "Optional[int]",
                    "float",
                    "Tuple[int, int]"
                ],
                "all_archetypes": [
                    "int",
                    "str",
                    "Optional[int]",
                    "float",
                    "Tuple[int, int]"
                ],
                "your_cards": [
                    "int",
                    "str",
                    "Optional[int]",
                    "float",
                    "Tuple[int, int]"
                ],
                "seasons_active": [
                    "int",
                    "Dict[str, Set[str]]",
                    "Optional[float]"
                ],
                "season_id": [
                    "float",
                    "Sequence"
                ]
            }
        },
        "Person.__getattr__": {
            "name": "__getattr__",
            "location": 71,
            "return": [
                "str",
                "bool",
                "int",
                "MutableMapping[str, Any]",
                "bytes",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "flask_dialogflow.json.JSON",
                    "list"
                ]
            }
        },
        "Person.page_title": {
            "name": "page_title",
            "location": 74,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.setup_active_seasons": {
            "name": "setup_active_seasons",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "seasons_active": [
                    "core_lib.core.models.Venue",
                    "Callable"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/person_achievements.py": {
        "PersonAchievements.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "person": [
                    "int",
                    "bool",
                    "float"
                ],
                "achievements": [
                    "int",
                    "bytearray"
                ]
            }
        },
        "PersonAchievements.page_title": {
            "name": "page_title",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/person_matches.py": {
        "PersonMatches.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "person": [
                    "int",
                    "Union[int, float]"
                ],
                "matches": [
                    "int",
                    "Union[int, float]"
                ]
            }
        },
        "PersonMatches.page_title": {
            "name": "page_title",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/player_notes.py": {
        "PlayerNotes.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "notes": [
                    "int",
                    "bool",
                    "float"
                ],
                "people": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "PlayerNotes.page_title": {
            "name": "page_title",
            "location": 19,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/prizes.py": {
        "split_by_week": {
            "name": "split_by_week",
            "location": 42,
            "return": [
                "Callable[[T], bool]",
                "str",
                "List[Tuple]",
                "bool"
            ],
            "arguments": {
                "competitions": [
                    "List[decksite.data.competition.Competition]",
                    "int",
                    "datetime.datetime",
                    "str"
                ]
            }
        },
        "Prizes.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "competitions": [
                    "bool",
                    "int"
                ],
                "first_runs": [
                    "bool"
                ]
            }
        },
        "Prizes.page_title": {
            "name": "page_title",
            "location": 39,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/report.py": {
        "Report.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "decksite.data.form.Form"
                ],
                "person_id": [
                    "str",
                    "Set[int]",
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "Report.page_title": {
            "name": "page_title",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Report.TT_REPORT": {
            "name": "TT_REPORT",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Report.TT_YOUR_DECK": {
            "name": "TT_YOUR_DECK",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/resources.py": {
        "Resources.sections": {
            "name": "sections",
            "location": 22,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Resources.page_title": {
            "name": "page_title",
            "location": 33,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/retire.py": {
        "Retire.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "Sequence[float]",
                    "str",
                    "int",
                    "bytes",
                    "List[T]"
                ]
            }
        },
        "Retire.page_title": {
            "name": "page_title",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/rotation.py": {
        "Rotation.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Rotation.page_title": {
            "name": "page_title",
            "location": 26,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/rotation_changes.py": {
        "RotationChanges.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cards_in": [
                    "List[str]",
                    "Optional[List[str]]",
                    "Tuple[int, int]",
                    "List[Tuple[int, int]]",
                    "int"
                ],
                "cards_out": [
                    "List[str]",
                    "Callable[[str, str], float]",
                    "bytes",
                    "List[Tuple[int, int]]",
                    "Tuple[int, int]",
                    "Dict[int, str]",
                    "Iterable"
                ],
                "playability": [
                    "int",
                    "Optional[str]",
                    "float",
                    "Optional[int]",
                    "bool"
                ],
                "speculation": [
                    "int",
                    "Optional[str]",
                    "float",
                    "Optional[int]",
                    "bool"
                ],
                "query": [
                    "bool",
                    "float",
                    "int",
                    "str"
                ]
            }
        },
        "RotationChanges.page_title": {
            "name": "page_title",
            "location": 31,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/rotation_checklist.py": {
        "RotationChecklist.page_title": {
            "name": "page_title",
            "location": 6,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/seasons.py": {
        "Seasons.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stats": [
                    "Dict[str, Any]",
                    "List[dict]",
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Seasons.page_title": {
            "name": "page_title",
            "location": 43,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/signup.py": {
        "SignUp.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "Optional[int]",
                    "decksite.data.form.Form",
                    "str",
                    "int",
                    "bool",
                    "Sequence[str]"
                ],
                "is_closed": [
                    "List[int]",
                    "Callable[[], None]",
                    "bool",
                    "Tuple[int]",
                    "int"
                ],
                "person_id": [
                    "Optional[int]",
                    "decksite.data.form.Form",
                    "str",
                    "int",
                    "bool",
                    "Sequence[str]"
                ],
                "d": [
                    "int",
                    "bool",
                    "str",
                    "Optional[float]",
                    "Optional[str]"
                ]
            }
        },
        "SignUp.page_title": {
            "name": "page_title",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignUp.TT_MTGOTRADERS_SIGNUP_TIK": {
            "name": "TT_MTGOTRADERS_SIGNUP_TIK",
            "location": 24,
            "return": [
                "Callable",
                "Tuple[Any, Any, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignUp.TT_MTGO_USERNAME": {
            "name": "TT_MTGO_USERNAME",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignUp.TT_DECK_NAME": {
            "name": "TT_DECK_NAME",
            "location": 30,
            "return": [
                "Dict[str, str]",
                "list",
                "str",
                "type",
                "deeplearning.ml4pl.models.epoch.Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignUp.TT_DECKLIST": {
            "name": "TT_DECKLIST",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignUp.TT_ENTER_OR_UPLOAD": {
            "name": "TT_ENTER_OR_UPLOAD",
            "location": 36,
            "return": [
                "str",
                "dict",
                "annofabapi.models.Inspection",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignUp.TT_SIGNUP": {
            "name": "TT_SIGNUP",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignUp.TT_YOUR_RECENT_DECKS": {
            "name": "TT_YOUR_RECENT_DECKS",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SignUp.TT_CHOOSE_DECK": {
            "name": "TT_CHOOSE_DECK",
            "location": 45,
            "return": [
                "str",
                "Awaitable[None]",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/sorters.py": {
        "Sorters.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "sorters": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Sorters.page_title": {
            "name": "page_title",
            "location": 17,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/tournaments.py": {
        "Tournaments.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tournaments.page_title": {
            "name": "page_title",
            "location": 18,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/tournament_hosting.py": {
        "TournamentHosting.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TournamentHosting.page_title": {
            "name": "page_title",
            "location": 14,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/tournament_leaderboards.py": {
        "TournamentLeaderboards.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "series": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TournamentLeaderboards.page_title": {
            "name": "page_title",
            "location": 13,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/unlink.py": {
        "Unlink.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "people": [
                    "int",
                    "Optional[Callable[[Any], None]]",
                    "Tuple[int, int, int]",
                    "List['cirq.Circuit']",
                    "Callable",
                    "bool"
                ],
                "num_affected_people": [
                    "str",
                    "Optional[float]",
                    "Optional[Dict[str, int]]",
                    "Optional[Tuple[float, float]]",
                    "Optional[Any]",
                    "Optional[str]",
                    "int",
                    "Callable",
                    "Optional[Literal[\"only_clustered\", \"include_clustered\"]]"
                ],
                "errors": [
                    "int",
                    "Optional[Callable[[Any], None]]",
                    "Tuple[int, int, int]",
                    "List['cirq.Circuit']",
                    "Callable",
                    "bool"
                ]
            }
        },
        "Unlink.page_title": {
            "name": "page_title",
            "location": 16,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/decksite/views/__init__.py": {},
    "Penny-Dreadful-Tools-master/discordbot/bot.py": {
        "background_task": {
            "name": "background_task",
            "location": 29,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "init": {
            "name": "init",
            "location": 399,
            "return": [],
            "arguments": {}
        },
        "is_pd_server": {
            "name": "is_pd_server",
            "location": 414,
            "return": [],
            "arguments": {
                "guild": []
            }
        },
        "list_of_most_interesting": {
            "name": "list_of_most_interesting",
            "location": 456,
            "return": [],
            "arguments": {
                "cs": []
            }
        },
        "Bot.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/discordbot/command.py": {
        "searcher": {
            "name": "searcher",
            "location": 36,
            "return": [],
            "arguments": {}
        },
        "parse_queries": {
            "name": "parse_queries",
            "location": 60,
            "return": [],
            "arguments": {
                "content": [],
                "scryfall_compatability_mode": []
            }
        },
        "cards_from_names_with_mode": {
            "name": "cards_from_names_with_mode",
            "location": 68,
            "return": [],
            "arguments": {
                "cards": [],
                "mode": [],
                "preferred_printing": []
            }
        },
        "copy_with_mode": {
            "name": "copy_with_mode",
            "location": 71,
            "return": [],
            "arguments": {
                "oracle_card": [],
                "mode": [],
                "preferred_printing": []
            }
        },
        "parse_mode": {
            "name": "parse_mode",
            "location": 77,
            "return": [],
            "arguments": {
                "query": []
            }
        },
        "results_from_queries": {
            "name": "results_from_queries",
            "location": 88,
            "return": [],
            "arguments": {
                "queries": []
            }
        },
        "complex_search": {
            "name": "complex_search",
            "location": 96,
            "return": [],
            "arguments": {
                "query": []
            }
        },
        "roughly_matches": {
            "name": "roughly_matches",
            "location": 103,
            "return": [],
            "arguments": {
                "s1": [],
                "s2": []
            }
        },
        "simplify_string": {
            "name": "simplify_string",
            "location": 106,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "disambiguation": {
            "name": "disambiguation",
            "location": 110,
            "return": [],
            "arguments": {
                "cards": []
            }
        },
        "escape_underscores": {
            "name": "escape_underscores",
            "location": 229,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "uniqify_cards": {
            "name": "uniqify_cards",
            "location": 248,
            "return": [],
            "arguments": {
                "cards": []
            }
        },
        "slash_card_option": {
            "name": "slash_card_option",
            "location": 255,
            "return": [],
            "arguments": {
                "param": []
            }
        },
        "slash_permission_pd_mods": {
            "name": "slash_permission_pd_mods",
            "location": 269,
            "return": [],
            "arguments": {}
        },
        "make_choice": {
            "name": "make_choice",
            "location": 277,
            "return": [],
            "arguments": {
                "value": [],
                "name": []
            }
        },
        "alias_message_command_to_slash_command": {
            "name": "alias_message_command_to_slash_command",
            "location": 296,
            "return": [],
            "arguments": {
                "command": [],
                "param": [],
                "name": []
            }
        },
        "slash_card_option.wrapper": {
            "name": "wrapper",
            "location": 258,
            "return": [],
            "arguments": {
                "func": []
            }
        },
        "slash_permission_pd_mods.wrapper": {
            "name": "wrapper",
            "location": 272,
            "return": [],
            "arguments": {
                "func": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/discordbot/command_test.py": {
        "test_roughly_matches": {
            "name": "test_roughly_matches",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "test_results_from_queries": {
            "name": "test_results_from_queries",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "test_do_not_choke_on_unicode": {
            "name": "test_do_not_choke_on_unicode",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "test_resources_matching_in_url": {
            "name": "test_resources_matching_in_url",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "test_escape_underscores": {
            "name": "test_escape_underscores",
            "location": 67,
            "return": [],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/discordbot/emoji.py": {
        "info_emoji": {
            "name": "info_emoji",
            "location": 49,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "c": [
                    "int",
                    "bool",
                    "List[str]",
                    "str"
                ],
                "verbose": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "Optional[bool]",
                    "int"
                ],
                "show_legality": [
                    "int",
                    "str",
                    "tuple",
                    "Optional[str]"
                ],
                "no_rotation_hype": [
                    "str",
                    "int",
                    "bool"
                ],
                "legality_format": [
                    "str",
                    "int"
                ]
            }
        },
        "get_future_legality": {
            "name": "get_future_legality",
            "location": 70,
            "return": [
                "str",
                "Optional[Sequence[str]]"
            ],
            "arguments": {
                "c": [
                    "magic.models.Card",
                    "Callable[..., None]",
                    "list",
                    "str"
                ],
                "legal": [
                    "bool",
                    "List[str]",
                    "str",
                    "Union[List[str], str]"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/discordbot/emoji_test.py": {
        "emoji_params": {
            "name": "emoji_params",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "test_info_emoji": {
            "name": "test_info_emoji",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "cardname": [
                    "str"
                ],
                "verbose": [
                    "Iterable[int]",
                    "int"
                ],
                "show_legality": [
                    "Iterable[int]",
                    "int"
                ],
                "bugged": [],
                "legality_format": [
                    "Iterable[int]",
                    "int"
                ],
                "expected": [
                    "Callable",
                    "int"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/discordbot/functional_test.py": {
        "discordbot": {
            "name": "discordbot",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "get_params": {
            "name": "get_params",
            "location": 40,
            "return": [
                "bool",
                "Optional[int]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "Optional[str]",
                "str",
                "Optional[List[Any]]",
                "Optional[List[str]]"
            ],
            "arguments": {}
        },
        "find_command": {
            "name": "find_command",
            "location": 99,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "discordbot": [
                    "str",
                    "zerver.models.Realm",
                    "Sequence[str]",
                    "bool"
                ],
                "cmd": [
                    "str"
                ],
                "function_name": [
                    "str",
                    "Set[str]",
                    "Mapping[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/discordbot/generate_readme.py": {
        "generate_readme": {
            "name": "generate_readme",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "print_commands": {
            "name": "print_commands",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/discordbot/shared.py": {
        "guild_id": {
            "name": "guild_id",
            "location": 6,
            "return": [
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "Optional[BaseException]",
                "str",
                "bytes"
            ],
            "arguments": {
                "ctx": [
                    "discord.excommands.Context",
                    "str"
                ]
            }
        },
        "channel_id": {
            "name": "channel_id",
            "location": 15,
            "return": [
                "Optional[str]",
                "str",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "ctx": [
                    "discord.excommands.Context"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/discordbot/unit_test.py": {
        "test_imagedownload": {
            "name": "test_imagedownload",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_fallbackimagedownload": {
            "name": "test_fallbackimagedownload",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "test_noimageavailable": {
            "name": "test_noimageavailable",
            "location": 32,
            "return": [],
            "arguments": {}
        },
        "test_solo_query": {
            "name": "test_solo_query",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "test_double_query": {
            "name": "test_double_query",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "test_compat": {
            "name": "test_compat",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "test_legend_query": {
            "name": "test_legend_query",
            "location": 57,
            "return": [],
            "arguments": {}
        },
        "test_partial_query": {
            "name": "test_partial_query",
            "location": 63,
            "return": [],
            "arguments": {}
        },
        "test_info_emoji": {
            "name": "test_info_emoji",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "test_accents": {
            "name": "test_accents",
            "location": 78,
            "return": [],
            "arguments": {}
        },
        "test_aether": {
            "name": "test_aether",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "test_split_cards": {
            "name": "test_split_cards",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "test_cmc": {
            "name": "test_cmc",
            "location": 102,
            "return": [],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/discordbot/__init__.py": {},
    "Penny-Dreadful-Tools-master/discordbot/commands/art.py": {
        "setup": {
            "name": "setup",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/discordbot/commands/barbs.py": {
        "setup": {
            "name": "setup",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/discordbot/commands/bug.py": {
        "setup": {
            "name": "setup",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/discordbot/commands/buginfo.py": {
        "setup": {
            "name": "setup",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "str",
                    "Callable",
                    "int"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/discordbot/commands/burningofxinye.py": {},
    "Penny-Dreadful-Tools-master/discordbot/commands/clearimagecache.py": {},
    "Penny-Dreadful-Tools-master/discordbot/commands/configure.py": {
        "help_message": {
            "name": "help_message",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "scope": [
                    "str",
                    "bytes",
                    "float",
                    "int",
                    "Union[float, int]"
                ]
            }
        },
        "ConfigError.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "scope": [
                    "int",
                    "bool",
                    "float"
                ],
                "message": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "models.LTI1p3Provider"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/discordbot/commands/debug.py": {
        "setup": {
            "name": "setup",
            "location": 42,
            "return": [],
            "arguments": {
                "bot": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/discordbot/commands/downtimes.py": {},
    "Penny-Dreadful-Tools-master/discordbot/commands/drc.py": {
        "format_deck": {
            "name": "format_deck",
            "location": 15,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "more_results_link": {
            "name": "more_results_link",
            "location": 112,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "args": [],
                "total": [
                    "bool"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/discordbot/commands/echo.py": {},
    "Penny-Dreadful-Tools-master/discordbot/commands/explain.py": {
        "is_tournament_channel": {
            "name": "is_tournament_channel",
            "location": 288,
            "return": [],
            "arguments": {
                "channel": []
            }
        },
        "promo_explanation": {
            "name": "promo_explanation",
            "location": 294,
            "return": [],
            "arguments": {}
        },
        "setup": {
            "name": "setup",
            "location": 309,
            "return": [],
            "arguments": {
                "bot": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/discordbot/commands/flavor.py": {
        "flavor_text": {
            "name": "flavor_text",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "c": [
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "setup": {
            "name": "setup",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/discordbot/commands/google.py": {
        "setup": {
            "name": "setup",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/discordbot/commands/history.py": {
        "card_history": {
            "name": "card_history",
            "location": 25,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "c": [
                    "str",
                    "dict"
                ]
            }
        },
        "setup": {
            "name": "setup",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/discordbot/commands/hype.py": {},
    "Penny-Dreadful-Tools-master/discordbot/commands/invite.py": {},
    "Penny-Dreadful-Tools-master/discordbot/commands/kickoff.py": {},
    "Penny-Dreadful-Tools-master/discordbot/commands/legal.py": {
        "setup": {
            "name": "setup",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/discordbot/commands/mana.py": {},
    "Penny-Dreadful-Tools-master/discordbot/commands/modobug.py": {},
    "Penny-Dreadful-Tools-master/discordbot/commands/modofail.py": {},
    "Penny-Dreadful-Tools-master/discordbot/commands/oracle.py": {
        "oracle_text": {
            "name": "oracle_text",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "c": [
                    "magic.models.Card",
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "setup": {
            "name": "setup",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/discordbot/commands/p1p1.py": {},
    "Penny-Dreadful-Tools-master/discordbot/commands/patreon.py": {},
    "Penny-Dreadful-Tools-master/discordbot/commands/pd500.py": {},
    "Penny-Dreadful-Tools-master/discordbot/commands/price.py": {
        "setup": {
            "name": "setup",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/discordbot/commands/quality.py": {},
    "Penny-Dreadful-Tools-master/discordbot/commands/randomcard.py": {},
    "Penny-Dreadful-Tools-master/discordbot/commands/randomdeck.py": {},
    "Penny-Dreadful-Tools-master/discordbot/commands/resources.py": {
        "site_resources": {
            "name": "site_resources",
            "location": 33,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "args": []
            }
        },
        "resources_resources": {
            "name": "resources_resources",
            "location": 62,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/discordbot/commands/restartbot.py": {},
    "Penny-Dreadful-Tools-master/discordbot/commands/rhinos.py": {
        "rhinos.find_rhino": {
            "name": "find_rhino",
            "location": 18,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "query": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/discordbot/commands/rotation.py": {},
    "Penny-Dreadful-Tools-master/discordbot/commands/rulings.py": {
        "card_rulings": {
            "name": "card_rulings",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "c": [
                    "int",
                    "Callable[..., None]",
                    "Type",
                    "T"
                ]
            }
        },
        "setup": {
            "name": "setup",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/discordbot/commands/search.py": {
        "more_results_link": {
            "name": "more_results_link",
            "location": 24,
            "return": [
                "str",
                "int",
                "dict",
                "bool"
            ],
            "arguments": {
                "args": [],
                "total": [
                    "bool",
                    "tuple",
                    "List[str]"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/discordbot/commands/spoiler.py": {},
    "Penny-Dreadful-Tools-master/discordbot/commands/status.py": {},
    "Penny-Dreadful-Tools-master/discordbot/commands/swiss.py": {
        "swisscalc": {
            "name": "swisscalc",
            "location": 68,
            "return": [],
            "arguments": {
                "num_players": [],
                "num_rounds": [],
                "num_elimination_rounds": []
            }
        },
        "setup": {
            "name": "setup",
            "location": 89,
            "return": [],
            "arguments": {
                "bot": []
            }
        },
        "Swiss.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "bot": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/discordbot/commands/time.py": {},
    "Penny-Dreadful-Tools-master/discordbot/commands/tournament.py": {},
    "Penny-Dreadful-Tools-master/discordbot/commands/update.py": {
        "setup": {
            "name": "setup",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/discordbot/commands/version.py": {},
    "Penny-Dreadful-Tools-master/discordbot/commands/whois.py": {
        "not_found": {
            "name": "not_found",
            "location": 54,
            "return": [
                "Optional[str]",
                "bool",
                "deeplearning.ml4pl.models.logger.Logger",
                "Dict[str, Any]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "person": [
                    "Dict[str, Any]",
                    "dict",
                    "bool",
                    "Type",
                    "str"
                ]
            }
        },
        "setup": {
            "name": "setup",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "bot": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/discordbot/commands/__init__.py": {
        "setup": {
            "name": "setup",
            "location": 16,
            "return": [],
            "arguments": {
                "bot": []
            }
        },
        "scaleless_load": {
            "name": "scaleless_load",
            "location": 29,
            "return": [],
            "arguments": {
                "bot": [],
                "module": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/discordsite/__init__.py": {
        "home": {
            "name": "home",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "rotate": {
            "name": "rotate",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/find/expression.py": {
        "Expression.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "str",
                    "List[str]",
                    "Token"
                ]
            }
        },
        "Expression.tokens": {
            "name": "tokens",
            "location": 10,
            "return": [
                "int",
                "bool",
                "str",
                "Iterable[str]",
                "List[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Expression.__str__": {
            "name": "__str__",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/find/find_test.py": {
        "test_match": {
            "name": "test_match",
            "location": 13,
            "return": [],
            "arguments": {}
        },
        "test_colors_and_color_identity": {
            "name": "test_colors_and_color_identity",
            "location": 25,
            "return": [],
            "arguments": {}
        },
        "test_types": {
            "name": "test_types",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "test_card_text": {
            "name": "test_card_text",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "test_mana_costs": {
            "name": "test_mana_costs",
            "location": 59,
            "return": [],
            "arguments": {}
        },
        "test_power_toughness_and_loyalty": {
            "name": "test_power_toughness_and_loyalty",
            "location": 83,
            "return": [],
            "arguments": {}
        },
        "test_multi_faced_cards": {
            "name": "test_multi_faced_cards",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "test_spells_permanents_and_effects": {
            "name": "test_spells_permanents_and_effects",
            "location": 102,
            "return": [],
            "arguments": {}
        },
        "test_rarity": {
            "name": "test_rarity",
            "location": 113,
            "return": [],
            "arguments": {}
        },
        "test_sets_and_blocks": {
            "name": "test_sets_and_blocks",
            "location": 124,
            "return": [],
            "arguments": {}
        },
        "test_format_legality": {
            "name": "test_format_legality",
            "location": 141,
            "return": [],
            "arguments": {}
        },
        "test_negating_conditions": {
            "name": "test_negating_conditions",
            "location": 162,
            "return": [],
            "arguments": {}
        },
        "test_using_or": {
            "name": "test_using_or",
            "location": 174,
            "return": [],
            "arguments": {}
        },
        "test_nesting_conditions": {
            "name": "test_nesting_conditions",
            "location": 181,
            "return": [],
            "arguments": {}
        },
        "test_edition_functional": {
            "name": "test_edition_functional",
            "location": 193,
            "return": [],
            "arguments": {}
        },
        "test_edition": {
            "name": "test_edition",
            "location": 196,
            "return": [],
            "arguments": {}
        },
        "test_special_chars": {
            "name": "test_special_chars",
            "location": 199,
            "return": [],
            "arguments": {}
        },
        "test_tilde_functional": {
            "name": "test_tilde_functional",
            "location": 203,
            "return": [],
            "arguments": {}
        },
        "test_tilde": {
            "name": "test_tilde",
            "location": 206,
            "return": [],
            "arguments": {}
        },
        "test_double_tilde_functional": {
            "name": "test_double_tilde_functional",
            "location": 211,
            "return": [],
            "arguments": {}
        },
        "test_double_tilde": {
            "name": "test_double_tilde",
            "location": 214,
            "return": [],
            "arguments": {}
        },
        "test_color": {
            "name": "test_color",
            "location": 219,
            "return": [],
            "arguments": {}
        },
        "test_only_multicolored_functional": {
            "name": "test_only_multicolored_functional",
            "location": 223,
            "return": [],
            "arguments": {}
        },
        "test_only_multicolored": {
            "name": "test_only_multicolored",
            "location": 226,
            "return": [],
            "arguments": {}
        },
        "test_multicolored_with_other_colors": {
            "name": "test_multicolored_with_other_colors",
            "location": 229,
            "return": [],
            "arguments": {}
        },
        "test_multicolored_coloridentity_functional": {
            "name": "test_multicolored_coloridentity_functional",
            "location": 238,
            "return": [],
            "arguments": {}
        },
        "test_multicolored_coloridentity": {
            "name": "test_multicolored_coloridentity",
            "location": 241,
            "return": [],
            "arguments": {}
        },
        "test_exclusivemulitcolored_same_functional": {
            "name": "test_exclusivemulitcolored_same_functional",
            "location": 245,
            "return": [],
            "arguments": {}
        },
        "test_exclusivemulitcolored_same": {
            "name": "test_exclusivemulitcolored_same",
            "location": 248,
            "return": [],
            "arguments": {}
        },
        "test_mulitcolored_multiple": {
            "name": "test_mulitcolored_multiple",
            "location": 251,
            "return": [],
            "arguments": {}
        },
        "test_multicolored_exclusive_functional": {
            "name": "test_multicolored_exclusive_functional",
            "location": 255,
            "return": [],
            "arguments": {}
        },
        "test_multicolored_exclusive": {
            "name": "test_multicolored_exclusive",
            "location": 258,
            "return": [],
            "arguments": {}
        },
        "test_color_identity_functional": {
            "name": "test_color_identity_functional",
            "location": 262,
            "return": [],
            "arguments": {}
        },
        "test_color_identity": {
            "name": "test_color_identity",
            "location": 269,
            "return": [],
            "arguments": {}
        },
        "test_color_identity_two_colors": {
            "name": "test_color_identity_two_colors",
            "location": 277,
            "return": [],
            "arguments": {}
        },
        "test_color_identity_colorless_functional": {
            "name": "test_color_identity_colorless_functional",
            "location": 281,
            "return": [],
            "arguments": {}
        },
        "test_color_identity_colorless": {
            "name": "test_color_identity_colorless",
            "location": 284,
            "return": [],
            "arguments": {}
        },
        "test_color_exclusively_functional": {
            "name": "test_color_exclusively_functional",
            "location": 288,
            "return": [],
            "arguments": {}
        },
        "test_color_exclusively": {
            "name": "test_color_exclusively",
            "location": 291,
            "return": [],
            "arguments": {}
        },
        "test_color_exclusively2_functional": {
            "name": "test_color_exclusively2_functional",
            "location": 295,
            "return": [],
            "arguments": {}
        },
        "test_color_exclusively2": {
            "name": "test_color_exclusively2",
            "location": 298,
            "return": [],
            "arguments": {}
        },
        "test_colorless_with_color": {
            "name": "test_colorless_with_color",
            "location": 301,
            "return": [],
            "arguments": {}
        },
        "test_colorless_exclusivity": {
            "name": "test_colorless_exclusivity",
            "location": 309,
            "return": [],
            "arguments": {}
        },
        "test_colorless_exclusivity2": {
            "name": "test_colorless_exclusivity2",
            "location": 312,
            "return": [],
            "arguments": {}
        },
        "test_multiple_colors_functional": {
            "name": "test_multiple_colors_functional",
            "location": 321,
            "return": [],
            "arguments": {}
        },
        "test_multiple_colors": {
            "name": "test_multiple_colors",
            "location": 324,
            "return": [],
            "arguments": {}
        },
        "test_mana": {
            "name": "test_mana",
            "location": 327,
            "return": [],
            "arguments": {}
        },
        "test_mana2": {
            "name": "test_mana2",
            "location": 330,
            "return": [],
            "arguments": {}
        },
        "test_mana3": {
            "name": "test_mana3",
            "location": 333,
            "return": [],
            "arguments": {}
        },
        "test_mana4": {
            "name": "test_mana4",
            "location": 336,
            "return": [],
            "arguments": {}
        },
        "test_mana5": {
            "name": "test_mana5",
            "location": 339,
            "return": [],
            "arguments": {}
        },
        "test_mana6": {
            "name": "test_mana6",
            "location": 342,
            "return": [],
            "arguments": {}
        },
        "test_mana7": {
            "name": "test_mana7",
            "location": 345,
            "return": [],
            "arguments": {}
        },
        "test_mana8": {
            "name": "test_mana8",
            "location": 348,
            "return": [],
            "arguments": {}
        },
        "test_hybrid_phyrexian_mana": {
            "name": "test_hybrid_phyrexian_mana",
            "location": 352,
            "return": [],
            "arguments": {}
        },
        "test_uppercase": {
            "name": "test_uppercase",
            "location": 359,
            "return": [],
            "arguments": {}
        },
        "test_subtype": {
            "name": "test_subtype",
            "location": 363,
            "return": [],
            "arguments": {}
        },
        "test_not": {
            "name": "test_not",
            "location": 366,
            "return": [],
            "arguments": {}
        },
        "test_not_cmc": {
            "name": "test_not_cmc",
            "location": 369,
            "return": [],
            "arguments": {}
        },
        "test_cmc": {
            "name": "test_cmc",
            "location": 372,
            "return": [],
            "arguments": {}
        },
        "test_not_text": {
            "name": "test_not_text",
            "location": 376,
            "return": [],
            "arguments": {}
        },
        "test_color_not_text_functional": {
            "name": "test_color_not_text_functional",
            "location": 380,
            "return": [],
            "arguments": {}
        },
        "test_color_not_text": {
            "name": "test_color_not_text",
            "location": 383,
            "return": [],
            "arguments": {}
        },
        "test_color_functional": {
            "name": "test_color_functional",
            "location": 387,
            "return": [],
            "arguments": {}
        },
        "test_color_green": {
            "name": "test_color_green",
            "location": 390,
            "return": [],
            "arguments": {}
        },
        "test_or": {
            "name": "test_or",
            "location": 393,
            "return": [],
            "arguments": {}
        },
        "test_bad_or": {
            "name": "test_bad_or",
            "location": 396,
            "return": [],
            "arguments": {}
        },
        "test_or_without_args": {
            "name": "test_or_without_args",
            "location": 399,
            "return": [],
            "arguments": {}
        },
        "test_not_without_args": {
            "name": "test_not_without_args",
            "location": 405,
            "return": [],
            "arguments": {}
        },
        "test_or_with_args": {
            "name": "test_or_with_args",
            "location": 411,
            "return": [],
            "arguments": {}
        },
        "test_text": {
            "name": "test_text",
            "location": 414,
            "return": [],
            "arguments": {}
        },
        "test_name": {
            "name": "test_name",
            "location": 418,
            "return": [],
            "arguments": {}
        },
        "test_parentheses": {
            "name": "test_parentheses",
            "location": 421,
            "return": [],
            "arguments": {}
        },
        "test_toughness_functional": {
            "name": "test_toughness_functional",
            "location": 425,
            "return": [],
            "arguments": {}
        },
        "test_toughness": {
            "name": "test_toughness",
            "location": 428,
            "return": [],
            "arguments": {}
        },
        "test_type": {
            "name": "test_type",
            "location": 431,
            "return": [],
            "arguments": {}
        },
        "test_power": {
            "name": "test_power",
            "location": 434,
            "return": [],
            "arguments": {}
        },
        "test_mana_with_other": {
            "name": "test_mana_with_other",
            "location": 437,
            "return": [],
            "arguments": {}
        },
        "test_mana_alone": {
            "name": "test_mana_alone",
            "location": 440,
            "return": [],
            "arguments": {}
        },
        "test_or_and_parentheses": {
            "name": "test_or_and_parentheses",
            "location": 443,
            "return": [],
            "arguments": {}
        },
        "test_not_color_functional": {
            "name": "test_not_color_functional",
            "location": 447,
            "return": [],
            "arguments": {}
        },
        "test_not_color": {
            "name": "test_not_color",
            "location": 450,
            "return": [],
            "arguments": {}
        },
        "test_complex_functional": {
            "name": "test_complex_functional",
            "location": 454,
            "return": [],
            "arguments": {}
        },
        "test_complex": {
            "name": "test_complex",
            "location": 457,
            "return": [],
            "arguments": {}
        },
        "test_is_hybrid": {
            "name": "test_is_hybrid",
            "location": 460,
            "return": [],
            "arguments": {}
        },
        "test_is_commander": {
            "name": "test_is_commander",
            "location": 463,
            "return": [],
            "arguments": {}
        },
        "test_is_triland_functional": {
            "name": "test_is_triland_functional",
            "location": 467,
            "return": [],
            "arguments": {}
        },
        "test_is_checkland_functional": {
            "name": "test_is_checkland_functional",
            "location": 471,
            "return": [],
            "arguments": {}
        },
        "test_format_functional": {
            "name": "test_format_functional",
            "location": 475,
            "return": [],
            "arguments": {}
        },
        "test_is_commander_illegal_commander_functional": {
            "name": "test_is_commander_illegal_commander_functional",
            "location": 486,
            "return": [],
            "arguments": {}
        },
        "test_is_spikey": {
            "name": "test_is_spikey",
            "location": 489,
            "return": [],
            "arguments": {}
        },
        "do_functional_test": {
            "name": "do_functional_test",
            "location": 495,
            "return": [],
            "arguments": {
                "query": [],
                "yes": [],
                "no": []
            }
        },
        "do_test": {
            "name": "do_test",
            "location": 503,
            "return": [],
            "arguments": {
                "query": [],
                "expected": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/find/search.py": {
        "search": {
            "name": "search",
            "location": 21,
            "return": [],
            "arguments": {
                "query": []
            }
        },
        "tokenize": {
            "name": "tokenize",
            "location": 30,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "parse": {
            "name": "parse",
            "location": 111,
            "return": [],
            "arguments": {
                "expression": []
            }
        },
        "parse_criterion": {
            "name": "parse_criterion",
            "location": 148,
            "return": [],
            "arguments": {
                "key": [],
                "operator": [],
                "term": []
            }
        },
        "text_where": {
            "name": "text_where",
            "location": 186,
            "return": [],
            "arguments": {
                "column": [],
                "term": []
            }
        },
        "subtable_where": {
            "name": "subtable_where",
            "location": 198,
            "return": [],
            "arguments": {
                "subtable": [],
                "value": [],
                "operator": []
            }
        },
        "math_where": {
            "name": "math_where",
            "location": 212,
            "return": [],
            "arguments": {
                "column": [],
                "operator": [],
                "term": []
            }
        },
        "color_where": {
            "name": "color_where",
            "location": 219,
            "return": [],
            "arguments": {
                "subtable": [],
                "operator": [],
                "term": []
            }
        },
        "set_where": {
            "name": "set_where",
            "location": 266,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "format_where": {
            "name": "format_where",
            "location": 269,
            "return": [],
            "arguments": {
                "term": []
            }
        },
        "rarity_where": {
            "name": "rarity_where",
            "location": 277,
            "return": [],
            "arguments": {
                "operator": [],
                "term": []
            }
        },
        "mana_where": {
            "name": "mana_where",
            "location": 285,
            "return": [],
            "arguments": {
                "operator": [],
                "term": []
            }
        },
        "playable_where": {
            "name": "playable_where",
            "location": 302,
            "return": [],
            "arguments": {
                "term": []
            }
        },
        "value_lookup": {
            "name": "value_lookup",
            "location": 328,
            "return": [],
            "arguments": {
                "table": [],
                "value": []
            }
        },
        "init_value_lookup": {
            "name": "init_value_lookup",
            "location": 337,
            "return": [],
            "arguments": {}
        },
        "is_subquery": {
            "name": "is_subquery",
            "location": 370,
            "return": [],
            "arguments": {
                "subquery_name": []
            }
        },
        "intersperse": {
            "name": "intersperse",
            "location": 408,
            "return": [],
            "arguments": {
                "iterable": [],
                "delimiter": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/find/tokens.py": {
        "Token.match": {
            "name": "match",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "List[dict]",
                    "List[str]"
                ],
                "chars": [
                    "str",
                    "int",
                    "List[dict]",
                    "List[str]"
                ]
            }
        },
        "Token.length": {
            "name": "length",
            "location": 12,
            "return": [
                "bytes",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Union[int, str]",
                    "dict",
                    "Hashable"
                ],
                "chars": [
                    "str",
                    "bool",
                    "Union[int, str]",
                    "dict",
                    "Hashable"
                ]
            }
        },
        "Token.find": {
            "name": "find",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[Optional[str]]",
                    "Optional[float]"
                ],
                "chars": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[\"LocalizedString\"]"
                ]
            }
        },
        "Token.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "chars": [
                    "str"
                ]
            }
        },
        "Token.value": {
            "name": "value",
            "location": 26,
            "return": [
                "Union[str, int, float]",
                "float",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.__str__": {
            "name": "__str__",
            "location": 29,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Token.__repr__": {
            "name": "__repr__",
            "location": 32,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BooleanOperator.find": {
            "name": "find",
            "location": 41,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[Optional[str]]",
                    "Optional[float]"
                ],
                "chars": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[\"LocalizedString\"]"
                ]
            }
        },
        "BooleanOperator.value": {
            "name": "value",
            "location": 48,
            "return": [
                "Union[str, int, float]",
                "float",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Criterion.match": {
            "name": "match",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ],
                "chars": [
                    "str",
                    "list"
                ]
            }
        },
        "String.find": {
            "name": "find",
            "location": 77,
            "return": [
                "int",
                "str",
                "set"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "int"
                ],
                "chars": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/find/__init__.py": {},
    "Penny-Dreadful-Tools-master/logsite/api.py": {
        "admin": {
            "name": "admin",
            "location": 13,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "person_status": {
            "name": "person_status",
            "location": 18,
            "return": [
                "bytes",
                "int",
                "flask.Response",
                "str"
            ],
            "arguments": {}
        },
        "match_exists": {
            "name": "match_exists",
            "location": 28,
            "return": [
                "bool",
                "Optional[Dict[str, str]]",
                "int",
                "type"
            ],
            "arguments": {
                "match_id": [
                    "int"
                ]
            }
        },
        "person_data": {
            "name": "person_data",
            "location": 32,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "person": [
                    "str",
                    "dict"
                ]
            }
        },
        "match_data": {
            "name": "match_data",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "match_id": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "game_data": {
            "name": "game_data",
            "location": 40,
            "return": [
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "game_id": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "upload": {
            "name": "upload",
            "location": 44,
            "return": [
                "List[str]",
                "IO",
                "str",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {}
        },
        "export": {
            "name": "export",
            "location": 63,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "match_id": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/logsite/database.py": {
        "db": {
            "name": "db",
            "location": 7,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/logsite/db.py": {
        "commit": {
            "name": "commit",
            "location": 51,
            "return": [
                "List[Dict[str, Any]]",
                "Union[List, Dict]",
                "BaseException"
            ],
            "arguments": {}
        },
        "add": {
            "name": "add",
            "location": 54,
            "return": [
                "bool",
                "str",
                "type"
            ],
            "arguments": {
                "item": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "merge": {
            "name": "merge",
            "location": 57,
            "return": [
                "bool",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {
                "item": [
                    "str",
                    "T",
                    "Type"
                ]
            }
        },
        "delete": {
            "name": "delete",
            "location": 60,
            "return": [
                "Callable[[Dict], None]",
                "sqlalchemy.orm.session.Session",
                "Callable[[], str]",
                "int",
                "str"
            ],
            "arguments": {
                "item": [
                    "str",
                    "type"
                ]
            }
        },
        "get_format": {
            "name": "get_format",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Sequence[int]",
                    "Union[str, List[str]]"
                ]
            }
        },
        "get_or_insert_format": {
            "name": "get_or_insert_format",
            "location": 66,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "get_or_insert_module": {
            "name": "get_or_insert_module",
            "location": 75,
            "return": [
                "bool",
                "Mapping[str, Any]",
                "List[Dict]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "get_or_insert_user": {
            "name": "get_or_insert_user",
            "location": 84,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "User.url": {
            "name": "url",
            "location": 32,
            "return": [
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Format.get_name": {
            "name": "get_name",
            "location": 41,
            "return": [
                "int",
                "BaseException",
                "Exception",
                "Type[BaseException]",
                "type",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/logsite/importing.py": {
        "load_from_file": {
            "name": "load_from_file",
            "location": 17,
            "return": [
                "str",
                "Dict[str, Any]",
                "Set[str]",
                "List[str]",
                "Tuple[Any, Any, Any]",
                "tuple"
            ],
            "arguments": {}
        },
        "import_from_pdbot": {
            "name": "import_from_pdbot",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "match_id": [
                    "str",
                    "int"
                ]
            }
        },
        "import_log": {
            "name": "import_log",
            "location": 34,
            "return": [
                "str",
                "List[bytes]",
                "Iterable[float]",
                "type",
                "int"
            ],
            "arguments": {
                "lines": [
                    "str",
                    "int"
                ],
                "match_id": [
                    "int",
                    "str",
                    "Sequence[Optional[str]]"
                ]
            }
        },
        "import_header": {
            "name": "import_header",
            "location": 76,
            "return": [
                "str",
                "dict",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "lines": [
                    "str",
                    "list"
                ],
                "match_id": [
                    "int",
                    "str"
                ]
            }
        },
        "process_tourney_info": {
            "name": "process_tourney_info",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "local": [
                    "Dict[str, str]",
                    "str"
                ],
                "tname": [
                    "int"
                ],
                "roundnum": [
                    "Dict[str, Any]",
                    "Optional[int]",
                    "Dict[str, str]",
                    "Mapping[str, Any]",
                    "int"
                ]
            }
        },
        "reimport": {
            "name": "reimport",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {
                "local": [
                    "float",
                    "Optional[bytes]"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/logsite/smoke_test.py": {
        "LogsiteSmokeTest.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogsiteSmokeTest.test_home": {
            "name": "test_home",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "LogsiteSmokeTest.test_some_pages": {
            "name": "test_some_pages",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/logsite/stats.py": {
        "stats": {
            "name": "stats",
            "location": 15,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "calc_last_switcheroo": {
            "name": "calc_last_switcheroo",
            "location": 100,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "recent_json": {
            "name": "recent_json",
            "location": 104,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/logsite/view.py": {
        "View.js_extra_url": {
            "name": "js_extra_url",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.favicon_url": {
            "name": "favicon_url",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.favicon_152_url": {
            "name": "favicon_152_url",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.title": {
            "name": "title",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "View.page_title": {
            "name": "page_title",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/logsite/__init__.py": {
        "__create_schema": {
            "name": "__create_schema",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "build_menu": {
            "name": "build_menu",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/logsite/data/game.py": {
        "insert_game": {
            "name": "insert_game",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "game_id": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Union[int,str]"
                ],
                "match_id": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Union[int,str]"
                ],
                "game_lines": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]",
                    "Union[int,str]"
                ]
            }
        },
        "get_game": {
            "name": "get_game",
            "location": 40,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "game_id": [
                    "int",
                    "str"
                ]
            }
        },
        "Game.sanitized_log": {
            "name": "sanitized_log",
            "location": 21,
            "return": [
                "bool",
                "Tuple[str, str]",
                "int",
                "Dict[str, object]",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.to_dict": {
            "name": "to_dict",
            "location": 27,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Exception",
                "int",
                "str",
                "Dict[str, bool]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/logsite/data/match.py": {
        "create_match": {
            "name": "create_match",
            "location": 84,
            "return": [
                "int",
                "str",
                "List[int]"
            ],
            "arguments": {
                "match_id": [
                    "int",
                    "str",
                    "bool"
                ],
                "format_name": [
                    "str",
                    "Optional[str]"
                ],
                "comment": [
                    "int",
                    "str",
                    "bool"
                ],
                "modules": [
                    "List[str]",
                    "str",
                    "Dict[str, Any]"
                ],
                "players": [
                    "List[str]",
                    "str",
                    "bool",
                    "Tuple[int, str]",
                    "bytes"
                ]
            }
        },
        "get_match": {
            "name": "get_match",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "match_id": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_recent_matches": {
            "name": "get_recent_matches",
            "location": 97,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "get_recent_matches_by_player": {
            "name": "get_recent_matches_by_player",
            "location": 100,
            "return": [
                "int"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "get_recent_matches_by_format": {
            "name": "get_recent_matches_by_format",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "format_id": [
                    "int",
                    "str"
                ]
            }
        },
        "Match.url": {
            "name": "url",
            "location": 34,
            "return": [
                "str",
                "Dict[str, str]",
                "list",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Match.format_name": {
            "name": "format_name",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Match.host": {
            "name": "host",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Match.other_players": {
            "name": "other_players",
            "location": 43,
            "return": [
                "str",
                "deque",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Match.other_player_names": {
            "name": "other_player_names",
            "location": 46,
            "return": [
                "bool",
                "List[str]",
                "Iterable[str]",
                "str",
                "Tuple[str]",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Match.set_times": {
            "name": "set_times",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "start_time": [
                    "int",
                    "float"
                ],
                "end_time": [
                    "int",
                    "float",
                    "datetime.timedelta"
                ]
            }
        },
        "Match.start_time_aware": {
            "name": "start_time_aware",
            "location": 54,
            "return": [
                "datetime.timedelta",
                "Callable",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Match.end_time_aware": {
            "name": "end_time_aware",
            "location": 59,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Optional[int]",
                "Optional[\"Period\"]",
                "datetime.timedelta"
            ],
            "arguments": {
                "self": []
            }
        },
        "Match.display_date": {
            "name": "display_date",
            "location": 64,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Match.to_dict": {
            "name": "to_dict",
            "location": 70,
            "return": [
                "str",
                "Mapping[str, Any]",
                "Dict[str, Any]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/logsite/data/tournament.py": {
        "get_tournament": {
            "name": "get_tournament",
            "location": 33,
            "return": [
                "Mapping[str, Any]",
                "dict",
                "Tuple[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Union[str, List[str]]"
                ]
            }
        },
        "create_tournament": {
            "name": "create_tournament",
            "location": 37,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "create_tournament_info": {
            "name": "create_tournament_info",
            "location": 44,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "match_id": [
                    "int",
                    "Dict[str, Any]"
                ],
                "tournament_id": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "TournamentInfo.to_dict": {
            "name": "to_dict",
            "location": 17,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Exception",
                "int",
                "str",
                "Dict[str, bool]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/logsite/data/__init__.py": {},
    "Penny-Dreadful-Tools-master/logsite/tests/importing_test.py": {
        "import_log": {
            "name": "import_log",
            "location": 7,
            "return": [
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "match_id": [
                    "str"
                ]
            }
        },
        "test_import_league": {
            "name": "test_import_league",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_tourney": {
            "name": "test_import_tourney",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_import_switcheroo": {
            "name": "test_import_switcheroo",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/logsite/tests/__init__.py": {},
    "Penny-Dreadful-Tools-master/logsite/views/about.py": {
        "about": {
            "name": "about",
            "location": 9,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "About.page_title": {
            "name": "page_title",
            "location": 15,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "About.languages": {
            "name": "languages",
            "location": 18,
            "return": [
                "str",
                "Optional[str]",
                "Iterable[str]",
                "list",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/logsite/views/charts.py": {
        "old_charts": {
            "name": "old_charts",
            "location": 12,
            "return": [
                "int",
                "bool",
                "List[str]",
                "Dict[int, dict]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "charts": {
            "name": "charts",
            "location": 16,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "Charts.page_title": {
            "name": "page_title",
            "location": 22,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Charts.js_extra_url": {
            "name": "js_extra_url",
            "location": 25,
            "return": [
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Charts.last_switcheroo": {
            "name": "last_switcheroo",
            "location": 28,
            "return": [
                "int",
                "float",
                "List[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/logsite/views/error.py": {
        "Error.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "str",
                    "Union[int, str]",
                    "int"
                ]
            }
        },
        "Error.template": {
            "name": "template",
            "location": 11,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/logsite/views/home.py": {
        "home": {
            "name": "home",
            "location": 10,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "Home.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Home.page_title": {
            "name": "page_title",
            "location": 22,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/logsite/views/internal_server_error.py": {
        "InternalServerError.message": {
            "name": "message",
            "location": 6,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InternalServerError.page_title": {
            "name": "page_title",
            "location": 9,
            "return": [
                "Callable",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/logsite/views/matches.py": {
        "show_format": {
            "name": "show_format",
            "location": 11,
            "return": [
                "int",
                "str",
                "List[List[str]]",
                "tuple"
            ],
            "arguments": {
                "format_name": [
                    "str"
                ]
            }
        },
        "show_person": {
            "name": "show_person",
            "location": 16,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "person": [
                    "str",
                    "dict"
                ]
            }
        },
        "matches": {
            "name": "matches",
            "location": 21,
            "return": [
                "IO[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "Matches.page_title": {
            "name": "page_title",
            "location": 27,
            "return": [
                "Dict[str, Any]",
                "bool",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matches.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "Dict[str, Dict[str, int]]",
                "str",
                "Dict[str, Any]",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": [],
                "person": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Type",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[str, Any]]",
                    "Optional[List[Any]]"
                ],
                "format_name": [
                    "Optional[str]",
                    "str",
                    "List[str]",
                    "Optional[bool]"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/logsite/views/match_view.py": {
        "show_match": {
            "name": "show_match",
            "location": 15,
            "return": [
                "Callable[[T], bool]",
                "Iterable[T]"
            ],
            "arguments": {
                "match_id": [
                    "str",
                    "int",
                    "bytes",
                    "float"
                ]
            }
        },
        "player_link": {
            "name": "player_link",
            "location": 66,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Set[str]",
                    "Optional[str]"
                ]
            }
        },
        "Match.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "Dict[str, Dict[str, int]]",
                "str",
                "Dict[str, Any]",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": [],
                "viewed_match": [
                    "int",
                    "bool"
                ]
            }
        },
        "Match.og_title": {
            "name": "og_title",
            "location": 51,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Match.og_url": {
            "name": "og_url",
            "location": 54,
            "return": [
                "str",
                "tuple",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Match.og_description": {
            "name": "og_description",
            "location": 57,
            "return": [
                "Optional[str]",
                "dict",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Match.page_title": {
            "name": "page_title",
            "location": 63,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/logsite/views/not_found.py": {
        "NotFound.message": {
            "name": "message",
            "location": 6,
            "return": [
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotFound.page_title": {
            "name": "page_title",
            "location": 9,
            "return": [
                "int",
                "float",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/logsite/views/people.py": {
        "people": {
            "name": "people",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "People.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "People.prepare": {
            "name": "prepare",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "People.page_title": {
            "name": "page_title",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/logsite/views/__init__.py": {},
    "Penny-Dreadful-Tools-master/logsite_migrations/env.py": {
        "run_migrations_offline": {
            "name": "run_migrations_offline",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online": {
            "name": "run_migrations_online",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "run_migrations_online.process_revision_directives": {
            "name": "process_revision_directives",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "context": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "revision": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "directives": [
                    "Callable[[Mapping], T]",
                    "list",
                    "List[List[str]]",
                    "int",
                    "str",
                    "tuple"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/logsite_migrations/versions/0f0bd1e9444e_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/logsite_migrations/versions/4680022c11c2_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/logsite_migrations/versions/9c3b192c6dbf_.py": {
        "upgrade": {
            "name": "upgrade",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "downgrade": {
            "name": "downgrade",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/magic/card.py": {
        "base_query_properties": {
            "name": "base_query_properties",
            "location": 44,
            "return": [],
            "arguments": {}
        },
        "base_query_lite_properties": {
            "name": "base_query_lite_properties",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "base_query_specific_properties": {
            "name": "base_query_specific_properties",
            "location": 60,
            "return": [],
            "arguments": {}
        },
        "card_properties": {
            "name": "card_properties",
            "location": 74,
            "return": [],
            "arguments": {}
        },
        "face_properties": {
            "name": "face_properties",
            "location": 85,
            "return": [],
            "arguments": {}
        },
        "set_properties": {
            "name": "set_properties",
            "location": 111,
            "return": [],
            "arguments": {}
        },
        "printing_properties": {
            "name": "printing_properties",
            "location": 128,
            "return": [],
            "arguments": {}
        },
        "color_properties": {
            "name": "color_properties",
            "location": 146,
            "return": [],
            "arguments": {}
        },
        "card_color_properties": {
            "name": "card_color_properties",
            "location": 155,
            "return": [],
            "arguments": {}
        },
        "card_type_properties": {
            "name": "card_type_properties",
            "location": 168,
            "return": [],
            "arguments": {
                "typetype": []
            }
        },
        "format_properties": {
            "name": "format_properties",
            "location": 180,
            "return": [],
            "arguments": {}
        },
        "card_legality_properties": {
            "name": "card_legality_properties",
            "location": 190,
            "return": [],
            "arguments": {}
        },
        "card_alias_properties": {
            "name": "card_alias_properties",
            "location": 206,
            "return": [],
            "arguments": {}
        },
        "card_bug_properties": {
            "name": "card_bug_properties",
            "location": 218,
            "return": [],
            "arguments": {}
        },
        "name_query": {
            "name": "name_query",
            "location": 234,
            "return": [],
            "arguments": {
                "column": []
            }
        },
        "cmc_query": {
            "name": "cmc_query",
            "location": 244,
            "return": [],
            "arguments": {}
        },
        "mana_cost_query": {
            "name": "mana_cost_query",
            "location": 254,
            "return": [],
            "arguments": {}
        },
        "type_query": {
            "name": "type_query",
            "location": 264,
            "return": [],
            "arguments": {}
        },
        "unaccent": {
            "name": "unaccent",
            "location": 269,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "canonicalize": {
            "name": "canonicalize",
            "location": 272,
            "return": [],
            "arguments": {
                "name": []
            }
        },
        "to_mtgo_format": {
            "name": "to_mtgo_format",
            "location": 282,
            "return": [],
            "arguments": {
                "s": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/magic/card_price.py": {
        "card_price_string": {
            "name": "card_price_string",
            "location": 12,
            "return": [],
            "arguments": {
                "card": [],
                "short": []
            }
        },
        "card_price_string.price_info": {
            "name": "price_info",
            "location": 13,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "card_price_string.format_price": {
            "name": "format_price",
            "location": 36,
            "return": [],
            "arguments": {
                "p": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/magic/card_test.py": {
        "test_canonicalize": {
            "name": "test_canonicalize",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/magic/colors.py": {
        "init": {
            "name": "init",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/magic/database.py": {
        "db": {
            "name": "db",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "init": {
            "name": "init",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "last_updated": {
            "name": "last_updated",
            "location": 35,
            "return": [
                "Tuple[float, float]",
                "bool",
                "int",
                "str",
                "Callable",
                "float"
            ],
            "arguments": {}
        },
        "db_version": {
            "name": "db_version",
            "location": 38,
            "return": [
                "str",
                "bool",
                "Sequence[str]",
                "int",
                "Tuple[List[Any], int]"
            ],
            "arguments": {}
        },
        "setup": {
            "name": "setup",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "delete": {
            "name": "delete",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "column_def": {
            "name": "column_def",
            "location": 94,
            "return": [],
            "arguments": {
                "name": [
                    "str",
                    "Sequence[str]"
                ],
                "prop": [
                    "str"
                ]
            }
        },
        "foreign_key_def": {
            "name": "foreign_key_def",
            "location": 101,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool",
                "dict"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Tuple[str, str]",
                    "List[str]"
                ],
                "fk": [
                    "str",
                    "Tuple[str, str]",
                    "List[str]"
                ]
            }
        },
        "unique_constraint_def": {
            "name": "unique_constraint_def",
            "location": 104,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "cols": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "create_table_def": {
            "name": "create_table_def",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]",
                    "dict",
                    "list"
                ],
                "props": [
                    "str",
                    "List[str]",
                    "dict",
                    "list"
                ],
                "from_query": [
                    "str",
                    "bool",
                    "datetime.datetime",
                    "int",
                    "Sequence"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/magic/decklist.py": {
        "parse_line": {
            "name": "parse_line",
            "location": 17,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "parse_chunk": {
            "name": "parse_chunk",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "chunk": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ],
                "section": [
                    "bool",
                    "int",
                    "List[float]",
                    "dict",
                    "List[int]"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "s": [
                    "Collection[int]",
                    "FrozenSet[int]"
                ]
            }
        },
        "looks_doublespaced": {
            "name": "looks_doublespaced",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "remove_doublespacing": {
            "name": "remove_doublespacing",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "parse_xml": {
            "name": "parse_xml",
            "location": 90,
            "return": [
                "str",
                "bool",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm"
            ],
            "arguments": {
                "s": [
                    "str",
                    "BinaryIO",
                    "Optional['Directory']",
                    "Tuple[int, int]"
                ]
            }
        },
        "vivify": {
            "name": "vivify",
            "location": 104,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "decklist": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "unvivify": {
            "name": "unvivify",
            "location": 121,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "deck": [
                    "magic.models.Deck",
                    "str",
                    "List[Dict]",
                    "fonduer.parser.models.Document",
                    "List[Tuple[str, str]]",
                    "bool"
                ]
            }
        },
        "add_card": {
            "name": "add_card",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "section": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Optional[str]",
                    "Optional[Union[Any, str]]"
                ],
                "n": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Optional[str]",
                    "Optional[Union[Any, str]]"
                ],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Optional[str]",
                    "Optional[Union[Any, str]]"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/magic/decklist_test.py": {
        "test_parse": {
            "name": "test_parse",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse2": {
            "name": "test_parse2",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse3": {
            "name": "test_parse3",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse4": {
            "name": "test_parse4",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse5": {
            "name": "test_parse5",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse6": {
            "name": "test_parse6",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse7": {
            "name": "test_parse7",
            "location": 201,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse8": {
            "name": "test_parse8",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse9": {
            "name": "test_parse9",
            "location": 262,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse10": {
            "name": "test_parse10",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse11": {
            "name": "test_parse11",
            "location": 302,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse12": {
            "name": "test_parse12",
            "location": 384,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse13": {
            "name": "test_parse13",
            "location": 422,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_tappedout_commander": {
            "name": "test_parse_tappedout_commander",
            "location": 458,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_scryfall": {
            "name": "test_parse_scryfall",
            "location": 550,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_double_blank_line": {
            "name": "test_parse_double_blank_line",
            "location": 584,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_explicit_main_sb": {
            "name": "test_explicit_main_sb",
            "location": 618,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sideboard_with_sb": {
            "name": "test_sideboard_with_sb",
            "location": 646,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dfcs": {
            "name": "test_dfcs",
            "location": 680,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_no_numbers": {
            "name": "test_no_numbers",
            "location": 697,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_archidekt_adventure_cards": {
            "name": "test_archidekt_adventure_cards",
            "location": 782,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_maindeck_not_sideboard": {
            "name": "test_maindeck_not_sideboard",
            "location": 795,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/magic/fetcher.py": {
        "card_aliases": {
            "name": "card_aliases",
            "location": 71,
            "return": [
                "List[Dict]",
                "str",
                "List[str]",
                "List[int]",
                "List[List[Any]]"
            ],
            "arguments": {}
        },
        "card_price": {
            "name": "card_price",
            "location": 75,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "cardname": [
                    "str",
                    "int"
                ]
            }
        },
        "current_time": {
            "name": "current_time",
            "location": 78,
            "return": [
                "float",
                "int",
                "datetime.datetime",
                "str"
            ],
            "arguments": {
                "timezone": [
                    "datetime.tzinfo",
                    "Optional[Sequence[Any]]",
                    "Callable[[str], str]",
                    "str"
                ],
                "twentyfour": [
                    "bool",
                    "int"
                ]
            }
        },
        "decksite_url": {
            "name": "decksite_url",
            "location": 86,
            "return": [
                "str",
                "List[django.db.models.query.QuerySet]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "logsite_url": {
            "name": "logsite_url",
            "location": 89,
            "return": [
                "str",
                "List[django.db.models.query.QuerySet]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "site_url": {
            "name": "site_url",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "protocol": [
                    "str"
                ],
                "hostname": [
                    "str",
                    "int",
                    "float"
                ],
                "port": [
                    "int",
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "downtimes": {
            "name": "downtimes",
            "location": 101,
            "return": [
                "str",
                "int",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "gatherling_deck_comments": {
            "name": "gatherling_deck_comments",
            "location": 104,
            "return": [
                "str",
                "Iterator[str]"
            ],
            "arguments": {
                "d": [
                    "str",
                    "magic.models.Deck",
                    "Type[object]",
                    "int"
                ]
            }
        },
        "hq_artcrops": {
            "name": "hq_artcrops",
            "location": 122,
            "return": [
                "List[Dict[str, Any]]",
                "str"
            ],
            "arguments": {}
        },
        "post_discord_webhook": {
            "name": "post_discord_webhook",
            "location": 162,
            "return": [
                "bool"
            ],
            "arguments": {
                "webhook_id": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "webhook_token": [
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "message": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "resources": {
            "name": "resources",
            "location": 173,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {}
        },
        "search_scryfall": {
            "name": "search_scryfall",
            "location": 184,
            "return": [
                "bool"
            ],
            "arguments": {
                "query": [
                    "Optional[int]",
                    "Optional[dict]",
                    "str",
                    "bool",
                    "Union[None, list, tuple]"
                ],
                "exhaustive": [
                    "Optional[int]",
                    "Optional[dict]",
                    "str",
                    "bool",
                    "Union[None, list, tuple]"
                ]
            }
        },
        "rulings": {
            "name": "rulings",
            "location": 275,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "cardname": [
                    "str"
                ]
            }
        },
        "sitemap": {
            "name": "sitemap",
            "location": 279,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "subreddit": {
            "name": "subreddit",
            "location": 290,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "time": {
            "name": "time",
            "location": 294,
            "return": [
                "str",
                "Dict[str, zam_repondeur.models.Amendement]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "q": [
                    "str",
                    "bool",
                    "int",
                    "List[int]",
                    "list"
                ],
                "twentyfour": [
                    "str",
                    "bool",
                    "int",
                    "List[int]",
                    "list"
                ]
            }
        },
        "times_from_timezone_code": {
            "name": "times_from_timezone_code",
            "location": 297,
            "return": [
                "Dict[str, Any]",
                "dict",
                "list"
            ],
            "arguments": {
                "q": [
                    "int",
                    "datetime.datetime",
                    "str"
                ],
                "twentyfour": [
                    "int",
                    "Type",
                    "bool",
                    "dict",
                    "str"
                ]
            }
        },
        "times_from_location": {
            "name": "times_from_location",
            "location": 308,
            "return": [
                "int",
                "Callable[[], None]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "q": [
                    "str",
                    "int"
                ],
                "twentyfour": [
                    "bool",
                    "str",
                    "int",
                    "float",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "whatsinstandard": {
            "name": "whatsinstandard",
            "location": 353,
            "return": [
                "str",
                "salon.models.Stylist"
            ],
            "arguments": {}
        },
        "search_scryfall.get_frontside": {
            "name": "get_frontside",
            "location": 221,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Optional[List[str]]",
                "zerver.models.Realm",
                "zerver.models.UserProfile"
            ],
            "arguments": {
                "scr_card": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/magic/image_fetcher.py": {
        "basename": {
            "name": "basename",
            "location": 18,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "cards": [
                    "List[str]",
                    "Union[Callable, None]",
                    "Iterable[str]"
                ]
            }
        },
        "bluebones_image": {
            "name": "bluebones_image",
            "location": 21,
            "return": [
                "_types.Image",
                "int",
                "str"
            ],
            "arguments": {
                "cards": [
                    "str",
                    "bytes",
                    "Dict[str, str]"
                ]
            }
        },
        "scryfall_image": {
            "name": "scryfall_image",
            "location": 25,
            "return": [
                "_types.Image",
                "int",
                "str"
            ],
            "arguments": {
                "c": [
                    "dict",
                    "List[Union[str, \"SqlFile\"]]"
                ],
                "version": [
                    "str",
                    "int"
                ],
                "face": [
                    "Pattern",
                    "str"
                ]
            }
        },
        "mci_image": {
            "name": "mci_image",
            "location": 43,
            "return": [
                "str",
                "int",
                "zerver.models.Realm",
                "bool",
                "MutableMapping[str, Any]"
            ],
            "arguments": {
                "printing": [
                    "str",
                    "core_lib.core.models.Venue"
                ]
            }
        },
        "gatherer_image": {
            "name": "gatherer_image",
            "location": 46,
            "return": [
                "str",
                "bool",
                "esm.models.service_type.ServiceType",
                "float",
                "Dict[str, int]"
            ],
            "arguments": {
                "printing": [
                    "Dict[str, Any]",
                    "str",
                    "List[List[str]]",
                    "Optional[socialhome.users.models.Profile]",
                    "fonduer.candidates.models.SpanMention",
                    "dict"
                ]
            }
        },
        "download_bluebones_image": {
            "name": "download_bluebones_image",
            "location": 52,
            "return": [
                "str",
                "IO[str]",
                "int",
                "List[str]"
            ],
            "arguments": {
                "cards": [
                    "str",
                    "bytes",
                    "asyncio.Transport"
                ],
                "filepath": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "determine_filepath": {
            "name": "determine_filepath",
            "location": 119,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "cards": [
                    "str",
                    "bool",
                    "int",
                    "Callable",
                    "List[domain.models.hotel.field.HotelField]"
                ],
                "prefix": [
                    "str"
                ],
                "ext": [
                    "int",
                    "zam_repondeur.services.fetch.an.dossiers.models.TexteRef",
                    "fonduer.candidates.models.temporary_contexTemporaryContext"
                ]
            }
        },
        "download_image": {
            "name": "download_image",
            "location": 129,
            "return": [
                "Dict[str, str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "cards": [
                    "str",
                    "Optional[int]",
                    "models.characters.states.StatusEffect",
                    "Tuple[str, str]"
                ]
            }
        },
        "save_composite_image": {
            "name": "save_composite_image",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "in_filepaths": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "out_filepath": [
                    "bool",
                    "int",
                    "Tuple[str, str]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/magic/legality.py": {
        "legal_in_format": {
            "name": "legal_in_format",
            "location": 10,
            "return": [],
            "arguments": {
                "d": [],
                "f": []
            }
        },
        "legal_formats": {
            "name": "legal_formats",
            "location": 13,
            "return": [],
            "arguments": {
                "d": [],
                "formats_to_check": [],
                "errors": []
            }
        },
        "add_error": {
            "name": "add_error",
            "location": 73,
            "return": [],
            "arguments": {
                "errors": [],
                "fmt": [],
                "error_type": [],
                "card": []
            }
        },
        "cards_legal_in_format": {
            "name": "cards_legal_in_format",
            "location": 80,
            "return": [],
            "arguments": {
                "cardlist": [],
                "f": []
            }
        },
        "order_score": {
            "name": "order_score",
            "location": 88,
            "return": [],
            "arguments": {
                "fmt": []
            }
        },
        "init": {
            "name": "init",
            "location": 109,
            "return": [],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/magic/legality_test.py": {
        "test_legal_formats": {
            "name": "test_legal_formats",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/magic/mana.py": {
        "parse": {
            "name": "parse",
            "location": 19,
            "return": [
                "bool",
                "dict",
                "Iterable[str]",
                "List[List[str]]",
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "colors": {
            "name": "colors",
            "location": 107,
            "return": [
                "List[str]",
                "str",
                "int"
            ],
            "arguments": {
                "symbols": [
                    "List[str]",
                    "str",
                    "IO"
                ]
            }
        },
        "colors_from_colored_symbols": {
            "name": "colors_from_colored_symbols",
            "location": 110,
            "return": [
                "bool",
                "int",
                "AsyncGenerator",
                "Optional[Any]"
            ],
            "arguments": {
                "all_colored_symbols": [
                    "Dict[str, List[str]]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "colored_symbols": {
            "name": "colored_symbols",
            "location": 113,
            "return": [
                "List[str]",
                "Iterable[str]",
                "Optional[Iterable[str]]",
                "Tuple[str]"
            ],
            "arguments": {
                "symbols": [
                    "List[str]",
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "cmc": {
            "name": "cmc",
            "location": 133,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mana_cost": [
                    "str",
                    "int",
                    "BinaryIO"
                ]
            }
        },
        "generic": {
            "name": "generic",
            "location": 151,
            "return": [
                "bool"
            ],
            "arguments": {
                "symbol": [
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "variable": {
            "name": "variable",
            "location": 154,
            "return": [
                "bool"
            ],
            "arguments": {
                "symbol": [
                    "str"
                ]
            }
        },
        "phyrexian": {
            "name": "phyrexian",
            "location": 157,
            "return": [
                "bool"
            ],
            "arguments": {
                "symbol": [
                    "str"
                ]
            }
        },
        "hybrid": {
            "name": "hybrid",
            "location": 160,
            "return": [
                "bool"
            ],
            "arguments": {
                "symbol": [
                    "str"
                ]
            }
        },
        "twobrid": {
            "name": "twobrid",
            "location": 163,
            "return": [
                "bool"
            ],
            "arguments": {
                "symbol": [
                    "str"
                ]
            }
        },
        "half": {
            "name": "half",
            "location": 166,
            "return": [
                "bool"
            ],
            "arguments": {
                "symbol": [
                    "str"
                ]
            }
        },
        "colored": {
            "name": "colored",
            "location": 169,
            "return": [
                "bool"
            ],
            "arguments": {
                "symbol": [
                    "str"
                ]
            }
        },
        "has_x": {
            "name": "has_x",
            "location": 172,
            "return": [
                "str",
                "list",
                "dict",
                "Union[int, None]"
            ],
            "arguments": {
                "mana_cost": [
                    "str",
                    "bool",
                    "type"
                ]
            }
        },
        "order": {
            "name": "order",
            "location": 175,
            "return": [
                "List[str]",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "symbols": [
                    "Hashable",
                    "str",
                    "bool"
                ]
            }
        },
        "order_score": {
            "name": "order_score",
            "location": 179,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "initial_symbols": [
                    "str"
                ]
            }
        },
        "sort_score": {
            "name": "sort_score",
            "location": 201,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "initial_symbols": [
                    "str",
                    "Pattern"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/magic/mana_test.py": {
        "test_simple": {
            "name": "test_simple",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_twobrid": {
            "name": "test_twobrid",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_twodigit": {
            "name": "test_twodigit",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_gleemax": {
            "name": "test_gleemax",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_x": {
            "name": "test_x",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_y": {
            "name": "test_y",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_multicolor_x": {
            "name": "test_multicolor_x",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_phyrexian": {
            "name": "test_phyrexian",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_porcelain_legionnaire": {
            "name": "test_porcelain_legionnaire",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_norns_annex": {
            "name": "test_norns_annex",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_slitherhead": {
            "name": "test_slitherhead",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_little_girl": {
            "name": "test_little_girl",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_hybrid_phyrexian": {
            "name": "test_hybrid_phyrexian",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_everything": {
            "name": "test_everything",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_colors": {
            "name": "test_colors",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_colored_symbols": {
            "name": "test_colored_symbols",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_has_x": {
            "name": "test_has_x",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_order": {
            "name": "test_order",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_sort_score": {
            "name": "test_sort_score",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_colorless": {
            "name": "test_colorless",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_snow": {
            "name": "test_snow",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_cmc": {
            "name": "test_cmc",
            "location": 139,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_phyrexian": {
            "name": "test_is_phyrexian",
            "location": 147,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_hybrid": {
            "name": "test_is_hybrid",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "do_test": {
            "name": "do_test",
            "location": 156,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "bytes"
                ],
                "expected": [
                    "str"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/magic/multiverse.py": {
        "init": {
            "name": "init",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "layouts": {
            "name": "layouts",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "playable_layouts": {
            "name": "playable_layouts",
            "location": 69,
            "return": [],
            "arguments": {}
        },
        "is_playable_layout": {
            "name": "is_playable_layout",
            "location": 72,
            "return": [],
            "arguments": {
                "layout": []
            }
        },
        "cached_base_query": {
            "name": "cached_base_query",
            "location": 87,
            "return": [],
            "arguments": {
                "where": []
            }
        },
        "base_query": {
            "name": "base_query",
            "location": 90,
            "return": [],
            "arguments": {
                "where": []
            }
        },
        "base_query_lite": {
            "name": "base_query_lite",
            "location": 137,
            "return": [],
            "arguments": {}
        },
        "valid_layout": {
            "name": "valid_layout",
            "location": 306,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "face_colors": {
            "name": "face_colors",
            "location": 311,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "insert_many": {
            "name": "insert_many",
            "location": 318,
            "return": [],
            "arguments": {
                "table": [],
                "properties": [],
                "values": [],
                "additional_columns": []
            }
        },
        "single_face_value": {
            "name": "single_face_value",
            "location": 351,
            "return": [],
            "arguments": {
                "p": [],
                "card_id": [],
                "position": []
            }
        },
        "multiple_faces_values": {
            "name": "multiple_faces_values",
            "location": 369,
            "return": [],
            "arguments": {
                "p": [],
                "card_id": []
            }
        },
        "meld_face_values": {
            "name": "meld_face_values",
            "location": 383,
            "return": [],
            "arguments": {
                "p": [],
                "cards": []
            }
        },
        "is_meld_result": {
            "name": "is_meld_result",
            "location": 394,
            "return": [],
            "arguments": {
                "p": []
            }
        },
        "load_sets": {
            "name": "load_sets",
            "location": 401,
            "return": [],
            "arguments": {}
        },
        "insert_set": {
            "name": "insert_set",
            "location": 404,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "printing_value": {
            "name": "printing_value",
            "location": 421,
            "return": [],
            "arguments": {
                "p": [],
                "card_id": [],
                "set_id": [],
                "rarity_id": []
            }
        },
        "rebuild_cache": {
            "name": "rebuild_cache",
            "location": 485,
            "return": [],
            "arguments": {}
        },
        "add_to_cache": {
            "name": "add_to_cache",
            "location": 497,
            "return": [],
            "arguments": {
                "ids": []
            }
        },
        "database2json": {
            "name": "database2json",
            "location": 505,
            "return": [],
            "arguments": {
                "propname": []
            }
        },
        "date2int": {
            "name": "date2int",
            "location": 510,
            "return": [],
            "arguments": {
                "s": [],
                "name": []
            }
        },
        "get_format_id": {
            "name": "get_format_id",
            "location": 516,
            "return": [],
            "arguments": {
                "name": [],
                "allow_create": []
            }
        },
        "get_format_id_from_season_id": {
            "name": "get_format_id_from_season_id",
            "location": 530,
            "return": [],
            "arguments": {
                "season_id": []
            }
        },
        "get_all_cards": {
            "name": "get_all_cards",
            "location": 535,
            "return": [],
            "arguments": {}
        },
        "supertypes": {
            "name": "supertypes",
            "location": 539,
            "return": [],
            "arguments": {
                "type_line": []
            }
        },
        "subtypes": {
            "name": "subtypes",
            "location": 548,
            "return": [],
            "arguments": {
                "type_line": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/magic/multiverse_test.py": {
        "test_base_query_legalities": {
            "name": "test_base_query_legalities",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_supertypes": {
            "name": "test_supertypes",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_subtypes": {
            "name": "test_subtypes",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/magic/oracle.py": {
        "init": {
            "name": "init",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "force": [
                    "bool",
                    "str",
                    "List[str]",
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "valid_name": {
            "name": "valid_name",
            "location": 23,
            "return": [
                "bool",
                "db.models.Name",
                "Callable[[str], str]",
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict",
                    "type"
                ]
            }
        },
        "load_card": {
            "name": "load_card",
            "location": 40,
            "return": [
                "str",
                "models.Name",
                "type"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "load_cards": {
            "name": "load_cards",
            "location": 43,
            "return": [
                "str",
                "dict",
                "list",
                "Optional[bool]",
                "Union[int, None]"
            ],
            "arguments": {
                "names": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "where": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "cards_by_name": {
            "name": "cards_by_name",
            "location": 63,
            "return": [
                "Dict[str, str]",
                "list",
                "str",
                "type",
                "deeplearning.ml4pl.models.epoch.Type"
            ],
            "arguments": {}
        },
        "bugged_cards": {
            "name": "bugged_cards",
            "location": 66,
            "return": [
                "str",
                "List[str]",
                "list",
                "Optional[int]",
                "Union[List[float], List[int]]",
                "Sequence['cirq.Qid']",
                "int"
            ],
            "arguments": {}
        },
        "legal_cards": {
            "name": "legal_cards",
            "location": 71,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "force": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "get_printings": {
            "name": "get_printings",
            "location": 81,
            "return": [
                "List[str]",
                "bool",
                "Optional[dict]",
                "Iterable",
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "generalized_card": [
                    "float",
                    "str",
                    "bool",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "get_printing": {
            "name": "get_printing",
            "location": 89,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "Optional[Dict]",
                "str"
            ],
            "arguments": {
                "generalized_card": [
                    "str",
                    "dict",
                    "List[str]",
                    "bool",
                    "salon.models.ServiceCategory"
                ],
                "setcode": [
                    "int",
                    "str",
                    "Optional[List[topicdb.core.models.association.Association]]",
                    "Optional[str]"
                ]
            }
        },
        "get_set": {
            "name": "get_set",
            "location": 101,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "set_id": [
                    "int",
                    "str",
                    "list"
                ]
            }
        },
        "deck_sort": {
            "name": "deck_sort",
            "location": 105,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "c": [
                    "magic.models.Card",
                    "Optional[bytes]",
                    "int",
                    "str"
                ]
            }
        },
        "pd_rotation_changes": {
            "name": "pd_rotation_changes",
            "location": 135,
            "return": [
                "str"
            ],
            "arguments": {
                "season_id": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "changes_between_formats": {
            "name": "changes_between_formats",
            "location": 151,
            "return": [
                "str"
            ],
            "arguments": {
                "f1": [
                    "int"
                ],
                "f2": [
                    "int"
                ]
            }
        },
        "query_diff_formats": {
            "name": "query_diff_formats",
            "location": 154,
            "return": [
                "Set[str]",
                "str",
                "list",
                "Sequence[Dict[str, str]]",
                "List[Tuple[str, str]]",
                "FrozenSet[str]"
            ],
            "arguments": {
                "f1": [
                    "List[str]",
                    "str",
                    "List[List[str]]"
                ],
                "f2": [
                    "List[str]",
                    "str",
                    "List[List[str]]"
                ]
            }
        },
        "if_todays_prices": {
            "name": "if_todays_prices",
            "location": 167,
            "return": [
                "str",
                "dict",
                "Optional[Union[Any, str]]"
            ],
            "arguments": {
                "out": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/magic/oracle_test.py": {
        "test_legality": {
            "name": "test_legality",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_valid_name": {
            "name": "test_valid_name",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_load_cards": {
            "name": "test_load_cards",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_deck_sort_x_last": {
            "name": "test_deck_sort_x_last",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_legality_list": {
            "name": "test_legality_list",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/magic/rotation.py": {
        "interesting": {
            "name": "interesting",
            "location": 16,
            "return": [
                "bool",
                "Type",
                "Callable",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "playability": [
                    "dict",
                    "Dict[str, str]",
                    "bool"
                ],
                "c": [
                    "Dict[str, Union[Any, Any, Any]]",
                    "str",
                    "Tuple['cirq.Qid']",
                    "Dict[str, str]",
                    "Callable[[str], bool]",
                    "Dict[str, float]",
                    "dict"
                ],
                "speculation": [
                    "bool",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "new": [
                    "bool",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "in_rotation": {
            "name": "in_rotation",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "files": {
            "name": "files",
            "location": 32,
            "return": [
                "str",
                "bool",
                "dict",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "last_run_time": {
            "name": "last_run_time",
            "location": 35,
            "return": [
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "read_rotation_files": {
            "name": "read_rotation_files",
            "location": 41,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {}
        },
        "rotation_redis_store": {
            "name": "rotation_redis_store",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "get_file_contents": {
            "name": "get_file_contents",
            "location": 84,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "file": [
                    "IO[str]"
                ]
            }
        },
        "clear_redis": {
            "name": "clear_redis",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "clear_files": [
                    "Union[List, set]",
                    "bool",
                    "Optional[str]",
                    "IO[str]",
                    "str"
                ]
            }
        },
        "process_score": {
            "name": "process_score",
            "location": 99,
            "return": [
                "Optional[float]",
                "bool",
                "Optional[int]",
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "Optional[str]",
                    "Dict[str, Any]",
                    "bool",
                    "str"
                ],
                "hits": [
                    "bool",
                    "float",
                    "datetime.datetime",
                    "Callable"
                ],
                "cs": [
                    "dict",
                    "List[Dict[str, Any]]",
                    "Dict[str, str]",
                    "Optional[Callable[[Any], None]]",
                    "str",
                    "Dict[str, Any]"
                ],
                "runs": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "latest_list": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "classify_by_status": {
            "name": "classify_by_status",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "c": [
                    "Dict[str, List[str]]",
                    "magic.models.Card",
                    "List[str]",
                    "str",
                    "Dict[str, Any]",
                    "tuple"
                ],
                "card_names_by_status": [
                    "Dict[str, List[str]]",
                    "magic.models.Card",
                    "List[str]",
                    "str",
                    "Dict[str, Any]",
                    "tuple"
                ]
            }
        },
        "rotation_sort": {
            "name": "rotation_sort",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "cs": [
                    "Callable",
                    "dict",
                    "list",
                    "List[List[str]]",
                    "T",
                    "object"
                ],
                "sort_by": [
                    "str",
                    "Union[str, IO[str]]",
                    "Union[int, slice]",
                    "T"
                ],
                "sort_order": [
                    "int",
                    "Type[object]",
                    "magic.models.Card"
                ]
            }
        },
        "hits_needed_score": {
            "name": "hits_needed_score",
            "location": 158,
            "return": [
                "str",
                "bool",
                "int",
                "Sequence[int]"
            ],
            "arguments": {
                "c": [
                    "str",
                    "Sequence[\"Expr\"]",
                    "Optional[Any]",
                    "int",
                    "dict"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/magic/rotation_test.py": {
        "test_hits_needed_score": {
            "name": "test_hits_needed_score",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "test_rotation_sort_func": {
            "name": "test_rotation_sort_func",
            "location": 14,
            "return": [],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/magic/seasons.py": {
        "calc_next": {
            "name": "calc_next",
            "location": 83,
            "return": [
                "Dict[int, int]",
                "str",
                "Dict[str, float]",
                "Dict[str, Tuple[float, float]]",
                "int",
                "float"
            ],
            "arguments": {}
        },
        "calc_prev": {
            "name": "calc_prev",
            "location": 95,
            "return": [
                "Dict[int, int]",
                "str",
                "Dict[str, float]",
                "Dict[str, Tuple[float, float]]",
                "int",
                "float"
            ],
            "arguments": {}
        },
        "sets": {
            "name": "sets",
            "location": 100,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "rotation_info": {
            "name": "rotation_info",
            "location": 118,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {}
        },
        "current_season_code": {
            "name": "current_season_code",
            "location": 121,
            "return": [
                "str",
                "Optional[int]",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "current_season_num": {
            "name": "current_season_num",
            "location": 124,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {}
        },
        "current_season_name": {
            "name": "current_season_name",
            "location": 127,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {}
        },
        "season_num": {
            "name": "season_num",
            "location": 130,
            "return": [
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "code_to_look_for": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "last_rotation": {
            "name": "last_rotation",
            "location": 136,
            "return": [
                "datetime.datetime"
            ],
            "arguments": {}
        },
        "next_rotation": {
            "name": "next_rotation",
            "location": 139,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "last_rotation_ex": {
            "name": "last_rotation_ex",
            "location": 142,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "next_rotation_ex": {
            "name": "next_rotation_ex",
            "location": 146,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "message": {
            "name": "message",
            "location": 150,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]",
                "dict"
            ],
            "arguments": {}
        },
        "season_id": {
            "name": "season_id",
            "location": 159,
            "return": [
                "float",
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "v": [
                    "int",
                    "Optional[int]",
                    "Union[None, str, int, float]",
                    "Optional[Tuple[int, int]]",
                    "Optional[float]",
                    "Optional[str]"
                ],
                "all_return_value": [
                    "Optional[Union[int, str]]",
                    "int",
                    "Optional[Any]",
                    "str",
                    "bool"
                ]
            }
        },
        "season_code": {
            "name": "season_code",
            "location": 178,
            "return": [
                "Dict[str, Any]",
                "str",
                "set"
            ],
            "arguments": {
                "v": [
                    "int",
                    "Optional[float]",
                    "Tuple[int]",
                    "str",
                    "bool"
                ]
            }
        },
        "season_name": {
            "name": "season_name",
            "location": 186,
            "return": [
                "str",
                "Mapping[str, Any]",
                "Mapping"
            ],
            "arguments": {
                "v": [
                    "Union[int, str]",
                    "Dict[str, str]",
                    "Optional[float]",
                    "int",
                    "str"
                ]
            }
        },
        "get_set_info": {
            "name": "get_set_info",
            "location": 193,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "code": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "SetInfo.parse": {
            "name": "parse",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "str",
                    "list",
                    "Sequence"
                ],
                "json": [
                    "dict",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "RotationInfo.validate": {
            "name": "validate",
            "location": 71,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RotationInfo.recalculate": {
            "name": "recalculate",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/magic/seasons_test.py": {
        "test_seasons_enum_uptodate": {
            "name": "test_seasons_enum_uptodate",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "test_season_id": {
            "name": "test_season_id",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_season_code": {
            "name": "test_season_code",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_season_name": {
            "name": "test_season_name",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/magic/tournaments.py": {
        "next_tournament_info": {
            "name": "next_tournament_info",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "previous_tournament_info": {
            "name": "previous_tournament_info",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "tournament_info": {
            "name": "tournament_info",
            "location": 41,
            "return": [],
            "arguments": {
                "time_direction": [],
                "units": []
            }
        },
        "get_nearest_tournament": {
            "name": "get_nearest_tournament",
            "location": 57,
            "return": [],
            "arguments": {
                "time_direction": []
            }
        },
        "get_all_next_tournament_dates": {
            "name": "get_all_next_tournament_dates",
            "location": 68,
            "return": [],
            "arguments": {
                "start": [],
                "index": []
            }
        },
        "pd500_date": {
            "name": "pd500_date",
            "location": 88,
            "return": [],
            "arguments": {}
        },
        "is_pd500_week": {
            "name": "is_pd500_week",
            "location": 95,
            "return": [],
            "arguments": {
                "start": []
            }
        },
        "kick_off_date": {
            "name": "kick_off_date",
            "location": 100,
            "return": [],
            "arguments": {}
        },
        "is_kick_off_week": {
            "name": "is_kick_off_week",
            "location": 104,
            "return": [],
            "arguments": {
                "start": []
            }
        },
        "is_pd500": {
            "name": "is_pd500",
            "location": 108,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "is_kick_off": {
            "name": "is_kick_off",
            "location": 111,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "pd500_prizes": {
            "name": "pd500_prizes",
            "location": 114,
            "return": [],
            "arguments": {}
        },
        "kick_off_prizes": {
            "name": "kick_off_prizes",
            "location": 117,
            "return": [],
            "arguments": {}
        },
        "normal_prizes": {
            "name": "normal_prizes",
            "location": 120,
            "return": [],
            "arguments": {}
        },
        "prizes_by_finish": {
            "name": "prizes_by_finish",
            "location": 123,
            "return": [],
            "arguments": {
                "c": []
            }
        },
        "display_prizes": {
            "name": "display_prizes",
            "location": 133,
            "return": [],
            "arguments": {
                "prizes": []
            }
        },
        "prize": {
            "name": "prize",
            "location": 142,
            "return": [],
            "arguments": {
                "c": [],
                "d": []
            }
        },
        "prize_by_finish": {
            "name": "prize_by_finish",
            "location": 146,
            "return": [],
            "arguments": {
                "c": [],
                "finish": []
            }
        },
        "pd500_prize": {
            "name": "pd500_prize",
            "location": 153,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "kick_off_prize": {
            "name": "kick_off_prize",
            "location": 166,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "normal_prize": {
            "name": "normal_prize",
            "location": 183,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "series_info": {
            "name": "series_info",
            "location": 194,
            "return": [],
            "arguments": {
                "tournament_id": []
            }
        },
        "all_series_info": {
            "name": "all_series_info",
            "location": 197,
            "return": [],
            "arguments": {}
        },
        "rounds_info": {
            "name": "rounds_info",
            "location": 259,
            "return": [],
            "arguments": {}
        },
        "num_rounds_info": {
            "name": "num_rounds_info",
            "location": 299,
            "return": [],
            "arguments": {
                "num_players": [],
                "k": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/magic/tournaments_test.py": {
        "test_get_all_next_tournament_dates": {
            "name": "test_get_all_next_tournament_dates",
            "location": 17,
            "return": [],
            "arguments": {}
        },
        "test_is_pd500": {
            "name": "test_is_pd500",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "test_is_kick_off": {
            "name": "test_is_kick_off",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "test_pd500_prizes": {
            "name": "test_pd500_prizes",
            "location": 38,
            "return": [],
            "arguments": {}
        },
        "test_kick_off_prizes": {
            "name": "test_kick_off_prizes",
            "location": 46,
            "return": [],
            "arguments": {}
        },
        "test_normal_prizes": {
            "name": "test_normal_prizes",
            "location": 54,
            "return": [],
            "arguments": {}
        },
        "test_prizes_by_finish": {
            "name": "test_prizes_by_finish",
            "location": 62,
            "return": [],
            "arguments": {}
        },
        "test_prize": {
            "name": "test_prize",
            "location": 82,
            "return": [],
            "arguments": {}
        },
        "test_prize_by_finish": {
            "name": "test_prize_by_finish",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "test_pd500_prize": {
            "name": "test_pd500_prize",
            "location": 92,
            "return": [],
            "arguments": {}
        },
        "test_kick_off_prize": {
            "name": "test_kick_off_prize",
            "location": 95,
            "return": [],
            "arguments": {}
        },
        "test_normal_prize": {
            "name": "test_normal_prize",
            "location": 98,
            "return": [],
            "arguments": {}
        },
        "test_display_prizes": {
            "name": "test_display_prizes",
            "location": 102,
            "return": [],
            "arguments": {}
        },
        "test_all_series_info": {
            "name": "test_all_series_info",
            "location": 121,
            "return": [],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/magic/whoosh_constants.py": {},
    "Penny-Dreadful-Tools-master/magic/whoosh_search.py": {
        "has": {
            "name": "has",
            "location": 128,
            "return": [
                "bool"
            ],
            "arguments": {
                "elements": [
                    "list",
                    "str",
                    "List[Tuple[int, int]]",
                    "List[T]",
                    "int",
                    "List[\"Issue\"]"
                ]
            }
        },
        "classify": {
            "name": "classify",
            "location": 134,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "matches": [
                    "int",
                    "str",
                    "bool"
                ],
                "word": [
                    "Dict[str, Optional[str]]",
                    "int",
                    "str",
                    "bool",
                    "Callable"
                ]
            }
        },
        "fuzzy_term": {
            "name": "fuzzy_term",
            "location": 144,
            "return": [
                "bool"
            ],
            "arguments": {
                "q": [
                    "int",
                    "dict",
                    "Dict[str, Any]"
                ],
                "dist": [
                    "dict",
                    "pypika.terms.Term",
                    "Type",
                    "float"
                ],
                "field": [
                    "int",
                    "str"
                ]
            }
        },
        "prune_fuzzy_by_score": {
            "name": "prune_fuzzy_by_score",
            "location": 149,
            "return": [
                "bool",
                "int",
                "Optional[dict]",
                "str",
                "object",
                "Tuple[int]"
            ],
            "arguments": {
                "fuzzy": [
                    "str",
                    "List[float]",
                    "Dict[str, str]",
                    "Tuple[int]",
                    "List[Dict[str, Any]]",
                    "int",
                    "list"
                ]
            }
        },
        "SearchResult.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exact": [
                    "float",
                    "bool",
                    "Optional[List[Any]]",
                    "Callable",
                    "str",
                    "bytes"
                ],
                "prefix_whole_word": [
                    "float",
                    "bool",
                    "Optional[List[Any]]",
                    "Callable",
                    "str",
                    "bytes"
                ],
                "other_prefixed": [
                    "int",
                    "bool",
                    "str",
                    "dict"
                ],
                "fuzzy": [
                    "float",
                    "bool",
                    "Optional[List[Any]]",
                    "Callable",
                    "str",
                    "bytes"
                ]
            }
        },
        "SearchResult.has_match": {
            "name": "has_match",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchResult.is_ambiguous": {
            "name": "is_ambiguous",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchResult.get_best_match": {
            "name": "get_best_match",
            "location": 37,
            "return": [
                "Optional[int]",
                "bool",
                "dict",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "Optional[str]",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchResult.get_ambiguous_matches": {
            "name": "get_ambiguous_matches",
            "location": 48,
            "return": [
                "dict",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchResult.get_all_matches": {
            "name": "get_all_matches",
            "location": 57,
            "return": [
                "str",
                "dict",
                "list",
                "List[str]",
                "Union[int, None]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchResult.remove_duplicates": {
            "name": "remove_duplicates",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchResult.__str__": {
            "name": "__str__",
            "location": 69,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchResult.__repr__": {
            "name": "__repr__",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchResult.__len__": {
            "name": "__len__",
            "location": 75,
            "return": [
                "int",
                "Union[Dict, List]",
                "List[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "WhooshSearcher.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WhooshSearcher.initialize_trie": {
            "name": "initialize_trie",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WhooshSearcher.search": {
            "name": "search",
            "location": 91,
            "return": [
                "bool",
                "dict",
                "Dict[str, Dict[str, str]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "w": [
                    "str"
                ]
            }
        },
        "WhooshSearcher.find_matches_by_prefix": {
            "name": "find_matches_by_prefix",
            "location": 115,
            "return": [
                "int",
                "List[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Dict[str, str]"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/magic/whoosh_search_test.py": {
        "is_included": {
            "name": "is_included",
            "location": 107,
            "return": [],
            "arguments": {
                "name": [],
                "cards": []
            }
        },
        "WhooshSearchTest.setUpClass": {
            "name": "setUpClass",
            "location": 15,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "WhooshSearchTest.best_match_is": {
            "name": "best_match_is",
            "location": 22,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "expected_best_match": []
            }
        },
        "WhooshSearchTest.finds_at_least": {
            "name": "finds_at_least",
            "location": 29,
            "return": [],
            "arguments": {
                "self": [],
                "query": [],
                "card_name": []
            }
        },
        "WhooshSearchTest.aliases_are_exact": {
            "name": "aliases_are_exact",
            "location": 36,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WhooshSearchTest.test_assorted_typos": {
            "name": "test_assorted_typos",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WhooshSearchTest.test_split_cards": {
            "name": "test_split_cards",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WhooshSearchTest.test_special_chars": {
            "name": "test_special_chars",
            "location": 54,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WhooshSearchTest.test_2_typos_in_the_same_word": {
            "name": "test_2_typos_in_the_same_word",
            "location": 58,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WhooshSearchTest.test_2_typos_in_2_words": {
            "name": "test_2_typos_in_2_words",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WhooshSearchTest.best_match_without_prefix": {
            "name": "best_match_without_prefix",
            "location": 64,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WhooshSearchTest.test_stem_finds_variations": {
            "name": "test_stem_finds_variations",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WhooshSearchTest.test_exact_match": {
            "name": "test_exact_match",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WhooshSearchTest.test_prefix_match": {
            "name": "test_prefix_match",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WhooshSearchTest.test_whole_word": {
            "name": "test_whole_word",
            "location": 80,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WhooshSearchTest.test_normalized_beats_tokenized": {
            "name": "test_normalized_beats_tokenized",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WhooshSearchTest.test_10_cycles_are_returned": {
            "name": "test_10_cycles_are_returned",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WhooshSearchTest.test_dfc": {
            "name": "test_dfc",
            "location": 90,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WhooshSearchTest.test_flip": {
            "name": "test_flip",
            "location": 93,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WhooshSearchTest.test_meld": {
            "name": "test_meld",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "WhooshSearchTest.test_aliases": {
            "name": "test_aliases",
            "location": 101,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/magic/whoosh_write.py": {
        "ensure_dir_exists": {
            "name": "ensure_dir_exists",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "directory": [
                    "str"
                ]
            }
        },
        "update_index": {
            "name": "update_index",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "index": [
                    "int",
                    "List[int]",
                    "str",
                    "Sequence[int]"
                ],
                "cards": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "reindex": {
            "name": "reindex",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "reindex_specific_cards": {
            "name": "reindex_specific_cards",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "cs": [
                    "List[magic.models.Card]",
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "WhooshWriter.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "WhooshWriter.rewrite_index": {
            "name": "rewrite_index",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cards": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "WhooshWriter.update_card": {
            "name": "update_card",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "card": [
                    "float",
                    "zam_repondeur.models.Amendement",
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/magic/__init__.py": {},
    "Penny-Dreadful-Tools-master/magic/abc/card_description.py": {},
    "Penny-Dreadful-Tools-master/magic/abc/__init__.py": {},
    "Penny-Dreadful-Tools-master/magic/models/card.py": {
        "determine_value": {
            "name": "determine_value",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "k": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ],
                "params": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "determine_legalities": {
            "name": "determine_legalities",
            "location": 71,
            "return": [
                "str",
                "bool",
                "Tuple[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "s": [
                    "Optional[str]",
                    "int",
                    "Optional[AnyStr]",
                    "str"
                ]
            }
        },
        "determine_bugs": {
            "name": "determine_bugs",
            "location": 81,
            "return": [
                "bool",
                "Optional[int]",
                "Sequence[Callable]",
                "Optional[float]",
                "Optional[str]"
            ],
            "arguments": {
                "s": [
                    "Optional[str]",
                    "bool",
                    "Optional[bytes]",
                    "str",
                    "Type",
                    "int"
                ]
            }
        },
        "Card.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "Dict[str, str]",
                    "Mapping[str, Any]",
                    "float",
                    "str",
                    "bytes",
                    "Optional[float]",
                    "Callable[[dict], None]",
                    "bool"
                ],
                "predetermined_values": [
                    "bool",
                    "Optional[List[str]]"
                ]
            }
        },
        "Card.is_double_sided": {
            "name": "is_double_sided",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Card.is_creature": {
            "name": "is_creature",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Card.is_land": {
            "name": "is_land",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Card.is_spell": {
            "name": "is_spell",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Card.is_split": {
            "name": "is_split",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Card.never_legal": {
            "name": "never_legal",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Card.__hash__": {
            "name": "__hash__",
            "location": 40,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Card.__eq__": {
            "name": "__eq__",
            "location": 43,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T"
                ]
            }
        },
        "Card.legal_in": {
            "name": "legal_in",
            "location": 48,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "format_name": [
                    "str"
                ]
            }
        },
        "Card.colors": {
            "name": "colors",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/magic/models/cardref.py": {
        "CardRef.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ],
                "count": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "CardRef.__contains__": {
            "name": "__contains__",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Hashable"
                ]
            }
        },
        "CardRef.__getitem__": {
            "name": "__getitem__",
            "location": 22,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Hashable"
                ]
            }
        },
        "CardRef.card": {
            "name": "card",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/magic/models/competition.py": {
        "Competition.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/magic/models/deck.py": {
        "Deck.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "params": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]"
                ]
            }
        },
        "Deck.all_cards": {
            "name": "all_cards",
            "location": 17,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deck.sort": {
            "name": "sort",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deck.is_in_current_run": {
            "name": "is_in_current_run",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deck.__str__": {
            "name": "__str__",
            "location": 38,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Deck.is_person_associated": {
            "name": "is_person_associated",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/magic/models/printing.py": {},
    "Penny-Dreadful-Tools-master/magic/models/__init__.py": {},
    "Penny-Dreadful-Tools-master/maintenance/calculate_similar_decks.py": {
        "ad_hoc": {
            "name": "ad_hoc",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/maintenance/client_dependencies.py": {
        "ad_hoc": {
            "name": "ad_hoc",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "get_dependencies": {
            "name": "get_dependencies",
            "location": 16,
            "return": [
                "List[str]",
                "List[Tuple[str, str]]",
                "list",
                "bool",
                "Sequence[str]"
            ],
            "arguments": {}
        },
        "write_dependencies": {
            "name": "write_dependencies",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "send_pr_if_updated": {
            "name": "send_pr_if_updated",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fetch_script_tag": {
            "name": "fetch_script_tag",
            "location": 30,
            "return": [
                "str",
                "int",
                "bytes",
                "dict"
            ],
            "arguments": {
                "entry": [
                    "str"
                ]
            }
        },
        "minified_path": {
            "name": "minified_path",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "list"
                ],
                "library": [
                    "str",
                    "list"
                ]
            }
        },
        "unminified_path": {
            "name": "unminified_path",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "list"
                ],
                "library": [
                    "str",
                    "list"
                ]
            }
        },
        "test_path": {
            "name": "test_path",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "library": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "Dict[str, Any]",
                    "bool",
                    "Set[str]"
                ],
                "required": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "Iterable[str]",
                    "Optional[str]",
                    "Set[str]"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/maintenance/deck_hash.py": {
        "run": {
            "name": "run",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/maintenance/delete_unplayed_retired_decks.py": {
        "run": {
            "name": "run",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/maintenance/dev_db.py": {
        "run": {
            "name": "run",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/maintenance/elo.py": {
        "run": {
            "name": "run",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "match": {
            "name": "match",
            "location": 38,
            "return": [
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "m": [
                    "Dict[str, str]",
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "adjust": {
            "name": "adjust",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "winner": [
                    "str",
                    "bool",
                    "django.db.migrations.state.StateApps",
                    "int"
                ],
                "loser": [
                    "str",
                    "bool",
                    "django.db.migrations.state.StateApps",
                    "int"
                ]
            }
        },
        "get_elo": {
            "name": "get_elo",
            "location": 58,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "person_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/maintenance/gatherling_substitutions.py": {
        "ad_hoc": {
            "name": "ad_hoc",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "ad_hoc.best_match_f": {
            "name": "best_match_f",
            "location": 29,
            "return": [
                "bool",
                "str",
                "List[str]",
                "T"
            ],
            "arguments": {
                "s": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/maintenance/generate_translations.py": {
        "ad_hoc": {
            "name": "ad_hoc",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "exitcode": {
            "name": "exitcode",
            "location": 41,
            "return": [
                "int",
                "dict"
            ],
            "arguments": {}
        },
        "extract_mustache": {
            "name": "extract_mustache",
            "location": 52,
            "return": [
                "typing.Generator"
            ],
            "arguments": {
                "fileobj": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "int"
                ],
                "keywords": [
                    "List[str]",
                    "bool",
                    "str",
                    "int",
                    "Any"
                ],
                "comment_tags": [
                    "List[str]",
                    "bool",
                    "str",
                    "int",
                    "Any"
                ],
                "options": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/maintenance/guess_league_archetypes.py": {
        "run": {
            "name": "run",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/maintenance/insert_seasons.py": {
        "run": {
            "name": "run",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/maintenance/populate_whoosh_index.py": {
        "ad_hoc": {
            "name": "ad_hoc",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/maintenance/post_rotation.py": {
        "ad_hoc": {
            "name": "ad_hoc",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/maintenance/process_logs.py": {
        "ad_hoc": {
            "name": "ad_hoc",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/maintenance/reprime_cache.py": {
        "run": {
            "name": "run",
            "location": 5,
            "return": [],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/maintenance/squash_people.py": {
        "run": {
            "name": "run",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/maintenance/typeahead.py": {
        "run": {
            "name": "run",
            "location": 12,
            "return": [],
            "arguments": {}
        },
        "archetypes": {
            "name": "archetypes",
            "location": 16,
            "return": [],
            "arguments": {}
        },
        "cards": {
            "name": "cards",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "people": {
            "name": "people",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "resources": {
            "name": "resources",
            "location": 35,
            "return": [],
            "arguments": {}
        },
        "write_typeahead": {
            "name": "write_typeahead",
            "location": 42,
            "return": [],
            "arguments": {
                "urls": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/maintenance/update_translations.py": {
        "run": {
            "name": "run",
            "location": 11,
            "return": [
                "Awaitable"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/maintenance/validate_translations.py": {
        "ad_hoc": {
            "name": "ad_hoc",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "validate_pofile": {
            "name": "validate_pofile",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "validate_string": {
            "name": "validate_string",
            "location": 26,
            "return": [
                "int",
                "Union[tuple, list]",
                "Set[VT]",
                "Optional[bool]"
            ],
            "arguments": {
                "message": [
                    "str",
                    "os.DirEntry"
                ],
                "catalog": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "has_missing_var": {
            "name": "has_missing_var",
            "location": 44,
            "return": [
                "str",
                "bool",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "english": [
                    "str",
                    "int",
                    "Dict[str, Sequence[str]]"
                ],
                "string": [
                    "str",
                    "List[str]",
                    "bytes",
                    "Union[str, bytes]",
                    "List[Tuple[str, Any]]",
                    "int"
                ]
            }
        },
        "error": {
            "name": "error",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str"
                ],
                "catalog": [
                    "str"
                ],
                "warning": [
                    "str"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/maintenance/validate_translations_test.py": {
        "test_has_missing_var": {
            "name": "test_has_missing_var",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/maintenance/__init__.py": {},
    "Penny-Dreadful-Tools-master/modo_bugs/fetcher.py": {
        "search_scryfall": {
            "name": "search_scryfall",
            "location": 13,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "query": [
                    "Optional[int]",
                    "Optional[dict]",
                    "str",
                    "bool",
                    "Union[None, list, tuple]"
                ]
            }
        },
        "catalog_cardnames": {
            "name": "catalog_cardnames",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "update_redirect": {
            "name": "update_redirect",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "file": [
                    "str",
                    "BinaryIO",
                    "Optional[str]"
                ],
                "title": [
                    "str",
                    "bool"
                ],
                "redirect": [
                    "str",
                    "bool"
                ]
            }
        },
        "find_bug_blog": {
            "name": "find_bug_blog",
            "location": 71,
            "return": [
                "Optional[bool]",
                "List[str]",
                "Optional[float]",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "find_announcements": {
            "name": "find_announcements",
            "location": 80,
            "return": [
                "List[str]",
                "bool",
                "Optional[str]",
                "Iterable[str]",
                "str",
                "List['Product']"
            ],
            "arguments": {}
        },
        "parse_article_item_extended": {
            "name": "parse_article_item_extended",
            "location": 88,
            "return": [
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "get_article_archive": {
            "name": "get_article_archive",
            "location": 94,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "search_scryfall.get_frontside": {
            "name": "get_frontside",
            "location": 30,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Optional[List[str]]"
            ],
            "arguments": {
                "scr_card": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/modo_bugs/main.py": {
        "run": {
            "name": "run",
            "location": 10,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "argv": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/modo_bugs/repo.py": {
        "get_github": {
            "name": "get_github",
            "location": 19,
            "return": [
                "str",
                "bool",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "Optional[List[str]]",
                "int"
            ],
            "arguments": {}
        },
        "get_repo": {
            "name": "get_repo",
            "location": 25,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "list"
            ],
            "arguments": {}
        },
        "get_verification_project": {
            "name": "get_verification_project",
            "location": 31,
            "return": [
                "config.Project",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "create_comment": {
            "name": "create_comment",
            "location": 37,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "issue": [
                    "github.Issue.Issue",
                    "str",
                    "Optional[str]"
                ],
                "body": [
                    "str"
                ]
            }
        },
        "set_issue_bbt": {
            "name": "set_issue_bbt",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "number": [
                    "str"
                ],
                "text": [
                    "Optional[str]",
                    "str",
                    "Optional[Union[str, Any]]",
                    "Dict[str, bytes]"
                ]
            }
        },
        "get_issue_bbt": {
            "name": "get_issue_bbt",
            "location": 50,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "int",
                "dict"
            ],
            "arguments": {
                "issue": [
                    "github.Issue.Issue",
                    "int",
                    "dict",
                    "Mapping[str, Any]",
                    "Exception"
                ]
            }
        },
        "is_issue_from_bug_blog": {
            "name": "is_issue_from_bug_blog",
            "location": 60,
            "return": [
                "bool",
                "Optional[Union[int, str]]",
                "List[Tuple[Any, str]]",
                "Dict[int, int]",
                "List[str]",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "issue": [
                    "github.Issue.Issue",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/modo_bugs/scrape_announcements.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "changes": [
                    "str",
                    "List[str]",
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "scrape": {
            "name": "scrape",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "float",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "parse_header": {
            "name": "parse_header",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "h": [
                    "str",
                    "dict",
                    "Exception"
                ]
            }
        },
        "parse_build_notes": {
            "name": "parse_build_notes",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "h": [
                    "bool"
                ]
            }
        },
        "parse_downtimes": {
            "name": "parse_downtimes",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "h": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/modo_bugs/scrape_bugblog.py": {
        "main": {
            "name": "main",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "changes": [
                    "str",
                    "List[str]",
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "scrape_bb": {
            "name": "scrape_bb",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "parse_block": {
            "name": "parse_block",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "collapsible_block": [
                    "type"
                ]
            }
        },
        "parse_changelog": {
            "name": "parse_changelog",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "collapsible_block": [
                    "bs4.elemenTag",
                    "int",
                    "float",
                    "Optional[float]",
                    "T",
                    "Type"
                ]
            }
        },
        "parse_knownbugs": {
            "name": "parse_knownbugs",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "b": [
                    "bs4.elemenTag",
                    "str",
                    "Union[str, Sequence[str]]"
                ]
            }
        },
        "check_if_removed_from_bugblog": {
            "name": "check_if_removed_from_bugblog",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "bbt": [
                    "Match",
                    "Optional[List[str]]",
                    "bool",
                    "Optional[float]",
                    "Optional[T]",
                    "list"
                ],
                "b": [
                    "bs4.elemenTag",
                    "bytes",
                    "float",
                    "str"
                ],
                "issue": [
                    "int",
                    "str"
                ]
            }
        },
        "check_for_missing_bugs": {
            "name": "check_for_missing_bugs",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "b": [
                    "bs4.elemenTag",
                    "Optional[str]",
                    "bytes",
                    "float",
                    "str"
                ]
            }
        },
        "find_bbt_in_issue_title": {
            "name": "find_bbt_in_issue_title",
            "location": 158,
            "return": [
                "int"
            ],
            "arguments": {
                "issue": [
                    "bytes",
                    "dict",
                    "Dict[str, Any]"
                ],
                "known_issues": [
                    "bs4.elemenTag",
                    "str",
                    "bool"
                ]
            }
        },
        "handle_autocards": {
            "name": "handle_autocards",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "soup": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "find_issue_by_code": {
            "name": "find_issue_by_code",
            "location": 175,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "str"
            ],
            "arguments": {
                "code": [
                    "str"
                ]
            }
        },
        "find_bbt_in_body_or_comments": {
            "name": "find_bbt_in_body_or_comments",
            "location": 210,
            "return": [
                "Optional[str]",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "issue": [
                    "github.Issue.Issue",
                    "Dict[str, Any]",
                    "Optional[Exception]",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "find_issue_by_name": {
            "name": "find_issue_by_name",
            "location": 225,
            "return": [
                "Optional[bool]",
                "Optional[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "Callable[[Any], bool]",
                    "Union[str, None]"
                ]
            }
        },
        "find_issue_by_code.scan": {
            "name": "scan",
            "location": 179,
            "return": [
                "str",
                "Optional[str]",
                "Optional[List[Any]]",
                "list",
                "Optional[BaseException]"
            ],
            "arguments": {
                "issue_list": [
                    "List[Tuple[str, str]]",
                    "Sequence[dict]",
                    "list",
                    "List[str]",
                    "Iterator[tuple]",
                    "bool"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/modo_bugs/strings.py": {
        "remove_smartquotes": {
            "name": "remove_smartquotes",
            "location": 23,
            "return": [],
            "arguments": {
                "text": []
            }
        },
        "strip_squarebrackets": {
            "name": "strip_squarebrackets",
            "location": 26,
            "return": [],
            "arguments": {
                "title": []
            }
        },
        "grouper": {
            "name": "grouper",
            "location": 32,
            "return": [],
            "arguments": {
                "n": [],
                "iterable": [],
                "fillvalue": []
            }
        },
        "get_cards_from_string": {
            "name": "get_cards_from_string",
            "location": 37,
            "return": [],
            "arguments": {
                "item": []
            }
        },
        "set_body_field": {
            "name": "set_body_field",
            "location": 41,
            "return": [],
            "arguments": {
                "body": [],
                "field": [],
                "value": []
            }
        },
        "get_body_field": {
            "name": "get_body_field",
            "location": 49,
            "return": [],
            "arguments": {
                "body": [],
                "field": []
            }
        },
        "strip_squarebrackets.get_name": {
            "name": "get_name",
            "location": 27,
            "return": [],
            "arguments": {
                "match": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/modo_bugs/update.py": {
        "cardnames": {
            "name": "cardnames",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "pd_legal_cards": {
            "name": "pd_legal_cards",
            "location": 24,
            "return": [
                "str",
                "int",
                "Callable",
                "bool"
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "verification_numbers": {
            "name": "verification_numbers",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "process_issue": {
            "name": "process_issue",
            "location": 82,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "issue": [
                    "Optional[str]",
                    "datetime.datetime",
                    "int",
                    "Optional[datetime.date]",
                    "str"
                ]
            }
        },
        "update_issue_body": {
            "name": "update_issue_body",
            "location": 158,
            "return": [
                "None"
            ],
            "arguments": {
                "issue": [
                    "Dict[str, Any]",
                    "dict",
                    "Exception",
                    "str"
                ],
                "cards": [
                    "List[str]",
                    "str",
                    "bool",
                    "Dict[str, List[str]]"
                ],
                "see_also": [
                    "Optional[str]",
                    "Optional[int]",
                    "str",
                    "Optional[Sequence[Any]]"
                ]
            }
        },
        "check_for_invalid_card_names": {
            "name": "check_for_invalid_card_names",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "issue": [
                    "dict"
                ],
                "cards": [
                    "List[str]",
                    "Callable",
                    "Type[Any]",
                    "Exception"
                ]
            }
        },
        "get_affects": {
            "name": "get_affects",
            "location": 189,
            "return": [
                "str"
            ],
            "arguments": {
                "issue": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "fix_user_errors": {
            "name": "fix_user_errors",
            "location": 197,
            "return": [
                "None"
            ],
            "arguments": {
                "issue": [
                    "github.Issue.Issue",
                    "github.PullRequesPullRequest",
                    "Optional[str]",
                    "Set[int]",
                    "int"
                ]
            }
        },
        "apply_screenshot_labels": {
            "name": "apply_screenshot_labels",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "issue": [
                    "Dict[str, Any]",
                    "str",
                    "type"
                ]
            }
        },
        "fix_user_errors.do_search": {
            "name": "do_search",
            "location": 207,
            "return": [
                "str",
                "int",
                "Generator",
                "float"
            ],
            "arguments": {
                "m": [
                    "SupportsInt",
                    "float",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/modo_bugs/verification.py": {
        "main": {
            "name": "main",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/modo_bugs/__init__.py": {},
    "Penny-Dreadful-Tools-master/price_grabber/parser.py": {
        "parse_cardhoarder_prices": {
            "name": "parse_cardhoarder_prices",
            "location": 15,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "parse_mtgotraders_prices": {
            "name": "parse_mtgotraders_prices",
            "location": 26,
            "return": [
                "List[str]",
                "Set[str]",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "is_exceptional_name": {
            "name": "is_exceptional_name",
            "location": 41,
            "return": [
                "str",
                "Optional[List[str]]",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "name_lookup": {
            "name": "name_lookup",
            "location": 44,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Callable",
                    "Optional[str]"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/price_grabber/price.py": {
        "info": {
            "name": "info",
            "location": 10,
            "return": [
                "dict",
                "Callable[[Any], bool]",
                "zam_repondeur.models.Lecture",
                "zerver.models.Realm",
                "bytes"
            ],
            "arguments": {
                "card": [
                    "int",
                    "float"
                ],
                "force": [
                    "str",
                    "bool",
                    "int",
                    "list",
                    "dict"
                ]
            }
        },
        "info_cached": {
            "name": "info_cached",
            "location": 18,
            "return": [
                "str",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "card": [
                    "Optional[str]",
                    "str"
                ],
                "name": [
                    "Optional[str]",
                    "str",
                    "Optional[Set[str]]"
                ]
            }
        },
        "cache": {
            "name": "cache",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/price_grabber/price_grabber.py": {
        "run": {
            "name": "run",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "fetch": {
            "name": "fetch",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "store": {
            "name": "store",
            "location": 41,
            "return": [
                "int",
                "str",
                "Optional[str]",
                "Tuple[str, int]",
                "bytearray"
            ],
            "arguments": {
                "timestamp": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Type",
                    "bytes",
                    "Mapping"
                ],
                "all_prices": [
                    "str",
                    "int"
                ]
            }
        },
        "cleanup": {
            "name": "cleanup",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "count": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "execute": {
            "name": "execute",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "sql": [
                    "Dict[str, Any]",
                    "int",
                    "Optional[Sequence[T]]",
                    "Optional['ModelOrDc']",
                    "SupportsInt"
                ],
                "values": [
                    "bytes",
                    "Optional[str]",
                    "Optional[datetime.timedelta]",
                    "Optional[dict]",
                    "Optional[Any]",
                    "str",
                    "float"
                ]
            }
        },
        "create_tables": {
            "name": "create_tables",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/price_grabber/srv_prices.py": {
        "cardprice": {
            "name": "cardprice",
            "location": 13,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "card": [
                    "list",
                    "int",
                    "Set[str]"
                ]
            }
        },
        "init": {
            "name": "init",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/price_grabber/__init__.py": {},
    "Penny-Dreadful-Tools-master/pylint_monolith/await_checker.py": {
        "register": {
            "name": "register",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "linter": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AsyncAwaitChecker.visit_callfunc": {
            "name": "visit_callfunc",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "astroid.node_classes.NodeNG"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/pylint_monolith/l18n_check.py": {
        "register_checkers": {
            "name": "register_checkers",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "linter": [
                    "str"
                ]
            }
        },
        "TranslationStringConstantsChecker.visit_call": {
            "name": "visit_call",
            "location": 61,
            "return": [],
            "arguments": {
                "self": [],
                "node": [
                    "astroid.node_classes.NodeNG"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/pylint_monolith/monolith_checker.py": {
        "get_basename": {
            "name": "get_basename",
            "location": 84,
            "return": [
                "str"
            ],
            "arguments": {
                "modname": [
                    "str"
                ]
            }
        },
        "_get_imported_module": {
            "name": "_get_imported_module",
            "location": 89,
            "return": [],
            "arguments": {
                "importnode": [
                    "str",
                    "bool",
                    "int"
                ],
                "modname": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "MonolithChecker.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "linter": [
                    "dict",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "MonolithChecker.visit_importfrom": {
            "name": "visit_importfrom",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "node": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/pylint_monolith/__init__.py": {
        "register": {
            "name": "register",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "linter": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/rotation_script/rotation_script.py": {
        "run": {
            "name": "run",
            "location": 24,
            "return": [
                "Iterator[T]",
                "Iterator[str]",
                "Iterator[int]",
                "Iterable[T]"
            ],
            "arguments": {}
        },
        "process": {
            "name": "process",
            "location": 67,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "all_prices": [
                    "int",
                    "str",
                    "List[int]",
                    "Type['DataclassT']"
                ]
            }
        },
        "process_sets": {
            "name": "process_sets",
            "location": 86,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "seen_sets": [
                    "Set[str]",
                    "int",
                    "List[Union[int, str]]",
                    "bool",
                    "List[list]",
                    "List[int]",
                    "dict"
                ],
                "used_sets": [
                    "Set[str]",
                    "frozenset[str]",
                    "int",
                    "bool",
                    "List[str]",
                    "str",
                    "Dict[str, bytes]"
                ],
                "hits": [
                    "Set[str]",
                    "int",
                    "List[Union[int, str]]",
                    "bool",
                    "List[list]",
                    "List[int]",
                    "dict"
                ],
                "ignored": [
                    "int",
                    "Mapping[str, Any]",
                    "str",
                    "Dict[str, str]",
                    "Dict[str, List[str]]",
                    "List[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "make_final_list": {
            "name": "make_final_list",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "do_push": {
            "name": "do_push",
            "location": 134,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/rotation_script/__init__.py": {},
    "Penny-Dreadful-Tools-master/shared/configuration.py": {
        "get_optional_str": {
            "name": "get_optional_str",
            "location": 134,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "get_str": {
            "name": "get_str",
            "location": 142,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "get_optional_int": {
            "name": "get_optional_int",
            "location": 148,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "get_int": {
            "name": "get_int",
            "location": 160,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "get_float": {
            "name": "get_float",
            "location": 166,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "get_list": {
            "name": "get_list",
            "location": 181,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "get": {
            "name": "get",
            "location": 191,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "write": {
            "name": "write",
            "location": 239,
            "return": [],
            "arguments": {
                "key": [],
                "value": []
            }
        },
        "server_name": {
            "name": "server_name",
            "location": 263,
            "return": [],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/shared/container.py": {
        "Container.__getattr__": {
            "name": "__getattr__",
            "location": 9,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[bool]",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": [],
                "k": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/shared/database.py": {
        "get_database": {
            "name": "get_database",
            "location": 160,
            "return": [
                "bool",
                "str",
                "Optional[Any]",
                "int",
                "Hashable"
            ],
            "arguments": {
                "location": [
                    "str",
                    "dict",
                    "float",
                    "Optional[int]",
                    "int",
                    "bool"
                ]
            }
        },
        "sqlescape": {
            "name": "sqlescape",
            "location": 163,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "T",
                    "Optional[str]",
                    "Optional[Any]",
                    "Callable",
                    "List[str]"
                ],
                "force_string": [
                    "bool",
                    "str",
                    "int"
                ],
                "backslashed_escaped": [
                    "bool",
                    "int",
                    "str",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "sqllikeescape": {
            "name": "sqllikeescape",
            "location": 178,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "concat": {
            "name": "concat",
            "location": 182,
            "return": [
                "str",
                "Dict[str, int]",
                "float"
            ],
            "arguments": {
                "parts": [
                    "int",
                    "Dict[str, str]",
                    "float",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "Database.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "Set[str]"
                ]
            }
        },
        "Database.connect": {
            "name": "connect",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.select": {
            "name": "select",
            "location": 43,
            "return": [
                "Tuple[int, int]",
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "int",
                    "type"
                ],
                "args": []
            }
        },
        "Database.execute": {
            "name": "execute",
            "location": 47,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "str",
                    "Callable",
                    "int",
                    "tuple"
                ],
                "args": []
            }
        },
        "Database.execute_anything": {
            "name": "execute_anything",
            "location": 51,
            "return": [
                "str",
                "Iterable[str]",
                "IO[str]",
                "Callable",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "Callable",
                    "Callable[..., None]",
                    "Set[str]",
                    "bool",
                    "tuple",
                    "Dict[str, Any]"
                ],
                "args": [],
                "fetch_rows": [
                    "bool",
                    "Callable",
                    "List[str]",
                    "str"
                ]
            }
        },
        "Database.execute_with_reconnect": {
            "name": "execute_with_reconnect",
            "location": 65,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "bool",
                    "Callable"
                ],
                "args": [],
                "fetch_rows": [
                    "List[int]",
                    "list",
                    "Optional[List]",
                    "bool",
                    "List[str]",
                    "List[Dict]",
                    "Iterable[str]"
                ]
            }
        },
        "Database.insert": {
            "name": "insert",
            "location": 91,
            "return": [
                "bool",
                "Optional[Union[str, Any]]",
                "float"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "str",
                    "Callable",
                    "int"
                ],
                "args": []
            }
        },
        "Database.begin": {
            "name": "begin",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "Database.commit": {
            "name": "commit",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str"
                ]
            }
        },
        "Database.rollback": {
            "name": "rollback",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "List[str]",
                    "Hashable",
                    "bytes"
                ]
            }
        },
        "Database.last_insert_rowid": {
            "name": "last_insert_rowid",
            "location": 117,
            "return": [
                "int",
                "bool",
                "IO[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.get_lock": {
            "name": "get_lock",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lock_id": [
                    "int",
                    "str"
                ],
                "timeout": [
                    "int",
                    "str"
                ]
            }
        },
        "Database.release_lock": {
            "name": "release_lock",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lock_id": [
                    "str",
                    "int"
                ]
            }
        },
        "Database.value": {
            "name": "value",
            "location": 128,
            "return": [
                "int",
                "Union[int, Tuple[int, ...]]",
                "str",
                "Optional[float]",
                "float"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "T"
                ],
                "args": [],
                "default": [
                    "Callable[[], None]",
                    "float",
                    "Optional",
                    "str"
                ],
                "fail_on_missing": [
                    "Callable[[], None]",
                    "float",
                    "Optional",
                    "str"
                ]
            }
        },
        "Database.values": {
            "name": "values",
            "location": 136,
            "return": [
                "Set[str]",
                "List[str]",
                "List[Dict]",
                "str",
                "list",
                "List[\"Variable\"]"
            ],
            "arguments": {
                "self": [],
                "sql": [
                    "float",
                    "int",
                    "bool",
                    "str",
                    "Iterable[Any]"
                ],
                "args": []
            }
        },
        "Database.close": {
            "name": "close",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.nuke_database": {
            "name": "nuke_database",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/shared/database_test.py": {
        "test_sqlescape": {
            "name": "test_sqlescape",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/shared/decorators.py": {
        "retry_after_calling": {
            "name": "retry_after_calling",
            "location": 16,
            "return": [
                "int",
                "str",
                "Optional[List[str]]",
                "Callable"
            ],
            "arguments": {
                "retry_func": [
                    "Callable[[], None]",
                    "Callable",
                    "Callable[..., Dict]"
                ]
            }
        },
        "lock": {
            "name": "lock",
            "location": 33,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "interprocess_locked": {
            "name": "interprocess_locked",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "retry_after_calling.decorator": {
            "name": "decorator",
            "location": 17,
            "return": [],
            "arguments": {
                "decorated_func": []
            }
        },
        "interprocess_locked.decorator": {
            "name": "decorator",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "retry_after_calling.decorator.wrapper": {
            "name": "wrapper",
            "location": 19,
            "return": [],
            "arguments": {}
        },
        "interprocess_locked.decorator.wrapper": {
            "name": "wrapper",
            "location": 44,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/shared/dtutil.py": {
        "ts2dt": {
            "name": "ts2dt",
            "location": 30,
            "return": [
                "Dict[str, Any]",
                "int",
                "str"
            ],
            "arguments": {
                "ts": [
                    "int",
                    "datetime.datetime",
                    "datetime.date",
                    "str"
                ]
            }
        },
        "dt2ts": {
            "name": "dt2ts",
            "location": 34,
            "return": [
                "int",
                "Optional[int]",
                "Callable[[str], None]",
                "bool",
                "float"
            ],
            "arguments": {
                "dt": [
                    "datetime.datetime",
                    "Optional[datetime.datetime]",
                    "Optional[str]",
                    "Optional[float]",
                    "float"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 39,
            "return": [
                "str",
                "List[str]",
                "Mapping"
            ],
            "arguments": {
                "s": [
                    "str"
                ],
                "date_format": [
                    "str"
                ],
                "tz": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "parse_rfc3339": {
            "name": "parse_rfc3339",
            "location": 43,
            "return": [
                "int",
                "str",
                "datetime.datetime",
                "float"
            ],
            "arguments": {
                "s": [
                    "str",
                    "Type",
                    "Optional[str]"
                ]
            }
        },
        "parse_to_ts": {
            "name": "parse_to_ts",
            "location": 48,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "s": [
                    "str",
                    "int",
                    "Optional[str]",
                    "List[List[str]]"
                ],
                "date_format": [
                    "str",
                    "int",
                    "Optional[str]",
                    "List[List[str]]"
                ],
                "tz": [
                    "str",
                    "int",
                    "Optional[str]",
                    "List[List[str]]"
                ]
            }
        },
        "timezone": {
            "name": "timezone",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "tzid": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "now": {
            "name": "now",
            "location": 55,
            "return": [
                "str",
                "datetime.date",
                "List[str]",
                "int",
                "datetime.datetime"
            ],
            "arguments": {
                "tz": [
                    "str",
                    "datetime.datetime",
                    "bytes",
                    "datetime.tzinfo",
                    "Optional[str]",
                    "datetime.date"
                ]
            }
        },
        "day_of_week": {
            "name": "day_of_week",
            "location": 60,
            "return": [
                "bool",
                "datetime.datetime",
                "str"
            ],
            "arguments": {
                "dt": [
                    "datetime.datetime",
                    "str",
                    "type"
                ],
                "tz": [
                    "datetime.datetime",
                    "str",
                    "type"
                ]
            }
        },
        "form_date": {
            "name": "form_date",
            "location": 63,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "dt": [
                    "datetime.datetime",
                    "str",
                    "Dict[str, Dict[str, Any]]"
                ],
                "tz": [
                    "datetime.datetime",
                    "str",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "display_date": {
            "name": "display_date",
            "location": 66,
            "return": [
                "int",
                "Optional[int]",
                "float",
                "List[int]",
                "tuple",
                "str"
            ],
            "arguments": {
                "dt": [
                    "datetime.datetime",
                    "Optional[datetime.datetime]",
                    "datetime.date",
                    "str"
                ],
                "granularity": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "display_date_with_date_and_year": {
            "name": "display_date_with_date_and_year",
            "location": 79,
            "return": [
                "int",
                "List[int]",
                "float"
            ],
            "arguments": {
                "dt": [
                    "str",
                    "int",
                    "Optional[List[str]]"
                ],
                "tz": [
                    "str",
                    "int",
                    "Optional[List[str]]"
                ]
            }
        },
        "replace_day_with_ordinal": {
            "name": "replace_day_with_ordinal",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        },
        "day2ordinal": {
            "name": "day2ordinal",
            "location": 86,
            "return": [
                "int",
                "str",
                "Union[str, int, float]"
            ],
            "arguments": {
                "m": [
                    "Match",
                    "int",
                    "str"
                ]
            }
        },
        "get_intervals": {
            "name": "get_intervals",
            "location": 94,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "display_time": {
            "name": "display_time",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "seconds": [
                    "int",
                    "float",
                    "str",
                    "slice"
                ],
                "granularity": [
                    "int",
                    "str"
                ]
            }
        },
        "round_value_appropriately": {
            "name": "round_value_appropriately",
            "location": 124,
            "return": [
                "int",
                "str",
                "Tuple[int, int]",
                "Tuple[str, int]",
                "T",
                "float"
            ],
            "arguments": {
                "seconds": [
                    "int",
                    "str",
                    "Dict[str, Any]"
                ],
                "seconds_per_unit": [
                    "int",
                    "str",
                    "Dict[str, Any]"
                ],
                "max_units": [
                    "Optional[int]",
                    "int",
                    "type"
                ],
                "rounding_threshold": [
                    "Optional[int]",
                    "str",
                    "Optional[Tuple[int, int]]",
                    "Optional[str]"
                ]
            }
        },
        "round_up_preceeding_unit": {
            "name": "round_up_preceeding_unit",
            "location": 132,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "result": [
                    "Dict[str, Any]",
                    "list",
                    "Tuple[int, int]",
                    "List[Tuple[int, int]]"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/shared/dtutil_test.py": {
        "test_ts2dt": {
            "name": "test_ts2dt",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dt2ts": {
            "name": "test_dt2ts",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_end_to_end": {
            "name": "test_end_to_end",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse": {
            "name": "test_parse",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_rfc3339": {
            "name": "test_parse_rfc3339",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_parse_to_ts": {
            "name": "test_parse_to_ts",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_now": {
            "name": "test_now",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_display_date": {
            "name": "test_display_date",
            "location": 61,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_rounding": {
            "name": "test_rounding",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_round_up_preceeding_unit": {
            "name": "test_round_up_preceeding_unit",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_display_time": {
            "name": "test_display_time",
            "location": 97,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_round_value_appropriately": {
            "name": "test_round_value_appropriately",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/shared/fetch_tools.py": {
        "fetch": {
            "name": "fetch",
            "location": 16,
            "return": [],
            "arguments": {
                "url": [],
                "character_encoding": [],
                "force": [],
                "retry": [],
                "session": []
            }
        },
        "fetch_json": {
            "name": "fetch_json",
            "location": 61,
            "return": [],
            "arguments": {
                "url": [],
                "character_encoding": [],
                "session": []
            }
        },
        "post": {
            "name": "post",
            "location": 91,
            "return": [],
            "arguments": {
                "url": [],
                "data": [],
                "json_data": []
            }
        },
        "store": {
            "name": "store",
            "location": 102,
            "return": [],
            "arguments": {
                "url": [],
                "path": []
            }
        },
        "acceptable_file": {
            "name": "acceptable_file",
            "location": 135,
            "return": [],
            "arguments": {
                "filepath": []
            }
        },
        "escape": {
            "name": "escape",
            "location": 138,
            "return": [],
            "arguments": {
                "str_input": [],
                "skip_double_slash": []
            }
        },
        "post_discord_webhook": {
            "name": "post_discord_webhook",
            "location": 151,
            "return": [],
            "arguments": {
                "webhook_id": [],
                "webhook_token": [],
                "message": [],
                "username": [],
                "avatar_url": [],
                "embeds": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/shared/guarantee.py": {
        "exactly_one": {
            "name": "exactly_one",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sequence": [
                    "int",
                    "bytes",
                    "Sequence[T]",
                    "str"
                ],
                "noun": [
                    "int",
                    "bytearray",
                    "list",
                    "List[float]",
                    "Sequence['cirq.Qid']",
                    "float"
                ]
            }
        },
        "at_most_one": {
            "name": "at_most_one",
            "location": 16,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "sequence": [
                    "int",
                    "list",
                    "float"
                ],
                "noun": [
                    "int",
                    "bytearray",
                    "list",
                    "List[float]",
                    "Sequence['cirq.Qid']",
                    "float"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/shared/lazy.py": {
        "lazy_property": {
            "name": "lazy_property",
            "location": 6,
            "return": [
                "str",
                "bool",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "Callable[[str], str]",
                    "List[str]"
                ]
            }
        },
        "lazy_property._lazy_property": {
            "name": "_lazy_property",
            "location": 11,
            "return": [
                "str",
                "bool",
                "Callable",
                "Iterable[str]"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/shared/logger.py": {
        "logger": {
            "name": "logger",
            "location": 25,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "fatal": {
            "name": "fatal",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "error": {
            "name": "error",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "warning": {
            "name": "warning",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "info": {
            "name": "info",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "debug": {
            "name": "debug",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "SupportsLogging.debug": {
            "name": "debug",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "SupportsLogging.info": {
            "name": "info",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bool",
                    "int",
                    "list",
                    "dict"
                ]
            }
        },
        "SupportsLogging.warning": {
            "name": "warning",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "SupportsLogging.error": {
            "name": "error",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bool",
                    "List[object]"
                ]
            }
        },
        "SupportsLogging.fatal": {
            "name": "fatal",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "dict"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/shared/pd_exception.py": {},
    "Penny-Dreadful-Tools-master/shared/perf.py": {
        "start": {
            "name": "start",
            "location": 9,
            "return": [
                "int",
                "str"
            ],
            "arguments": {}
        },
        "check": {
            "name": "check",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "start_time": [
                    "int",
                    "float",
                    "str"
                ],
                "kind": [
                    "str",
                    "int",
                    "float",
                    "Optional[int]"
                ],
                "detail": [
                    "int",
                    "str",
                    "Optional[int]",
                    "List[str]",
                    "List[int]",
                    "Tuple[int, int, int, int]"
                ],
                "location": [
                    "str",
                    "Optional[str]",
                    "float",
                    "int"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "f": [
                    "Callable",
                    "Dict[str, str]",
                    "List[List[Any]]",
                    "bool",
                    "Mapping[str, Any]",
                    "str"
                ],
                "limit": [
                    "float",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "took": {
            "name": "took",
            "location": 31,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "start_time": [
                    "float",
                    "int",
                    "Tuple[int, int]",
                    "str",
                    "List[int]",
                    "Optional[str]"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/shared/recursive_update.py": {
        "rupdate": {
            "name": "rupdate",
            "location": 9,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "base": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Dict[str, Any]]"
                ],
                "new_data": [
                    "str",
                    "Type",
                    "List[dict]"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/shared/redis_wrapper.py": {
        "init": {
            "name": "init",
            "location": 11,
            "return": [
                "Optional[str]",
                "int",
                "bool",
                "Optional[float]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "enabled": {
            "name": "enabled",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "_get": {
            "name": "_get",
            "location": 31,
            "return": [
                "Optional[int]",
                "bool",
                "str",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "dict",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Union[str, int]",
                    "List[Dict[str, Any]]",
                    "List[str]"
                ],
                "ex": [
                    "Optional[int]",
                    "int",
                    "str",
                    "slice",
                    "Tuple['cirq.Qid']"
                ]
            }
        },
        "get_str": {
            "name": "get_str",
            "location": 45,
            "return": [
                "bool",
                "Optional[int]",
                "Optional[str]",
                "Optional[Dict]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "ex": [
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "get_bool": {
            "name": "get_bool",
            "location": 54,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Optional[str]"
                ],
                "ex": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "get_container": {
            "name": "get_container",
            "location": 62,
            "return": [
                "str",
                "Optional[dict]",
                "bool",
                "int"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "ex": [
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "get_int": {
            "name": "get_int",
            "location": 71,
            "return": [
                "Optional[int]",
                "bool",
                "str",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "dict",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Optional[int]"
                ],
                "ex": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "get_list": {
            "name": "get_list",
            "location": 80,
            "return": [
                "Optional[str]",
                "Union[None, List[str]]",
                "str"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        },
        "get_container_list": {
            "name": "get_container_list",
            "location": 88,
            "return": [
                "Set[str]",
                "Dict[str, str]",
                "List[str]"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        },
        "store": {
            "name": "store",
            "location": 99,
            "return": [
                "int",
                "str",
                "Optional[str]",
                "Tuple[str, int]",
                "bytearray"
            ],
            "arguments": {
                "key": [
                    "str",
                    "T",
                    "type",
                    "int"
                ],
                "val": [
                    "str",
                    "T",
                    "type",
                    "int"
                ]
            }
        },
        "increment": {
            "name": "increment",
            "location": 109,
            "return": [
                "Optional[str]",
                "dict",
                "Optional[BaseException]"
            ],
            "arguments": {
                "key": [
                    "Hashable",
                    "str",
                    "int",
                    "Union[int, slice]"
                ]
            }
        },
        "clear": {
            "name": "clear",
            "location": 119,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "expire": {
            "name": "expire",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str",
                    "int",
                    "Hashable",
                    "Dict[str, str]",
                    "bytes"
                ],
                "time": [
                    "str",
                    "int",
                    "Hashable",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        },
        "keys": {
            "name": "keys",
            "location": 136,
            "return": [
                "str",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "pattern": [
                    "str",
                    "int",
                    "Union[str, bool, None]",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "sadd": {
            "name": "sadd",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        },
        "sismember": {
            "name": "sismember",
            "location": 147,
            "return": [
                "bool",
                "Iterable",
                "List[str]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "T"
                ],
                "value": [
                    "str",
                    "T"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/shared/repo.py": {
        "create_issue": {
            "name": "create_issue",
            "location": 26,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[float]"
            ],
            "arguments": {
                "content": [
                    "str",
                    "Optional[str]"
                ],
                "author": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Dict[str, str]"
                ],
                "location": [
                    "str",
                    "Optional[str]"
                ],
                "repo_name": [
                    "str",
                    "Optional[str]"
                ],
                "exception": [
                    "str",
                    "Optional[BaseException]",
                    "List[str]"
                ]
            }
        },
        "safe_data": {
            "name": "safe_data",
            "location": 114,
            "return": [
                "bool",
                "Optional[BaseException]",
                "Callable",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "data": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "get_pull_requests": {
            "name": "get_pull_requests",
            "location": 121,
            "return": [
                "dict",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "start_date": [
                    "datetime.datetime",
                    "Optional[int]",
                    "float",
                    "str"
                ],
                "end_date": [
                    "datetime.datetime",
                    "int",
                    "List[str]",
                    "Optional[datetime.datetime]"
                ],
                "max_pull_requests": [
                    "int"
                ],
                "repo_name": [
                    "str",
                    "Optional[str]",
                    "MutableMapping[domain.Identifier, datetime.date]"
                ]
            }
        },
        "format_exception": {
            "name": "format_exception",
            "location": 152,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "e": [
                    "Exception",
                    "BaseException",
                    "str",
                    "Callable",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/shared/serialization.py": {
        "extra_serializer": {
            "name": "extra_serializer",
            "location": 10,
            "return": [
                "tuple",
                "int",
                "float",
                "Type[BaseException]"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "datetime.datetime",
                    "float",
                    "Optional[datetime.datetime]",
                    "str"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/shared/settings.py": {
        "with_config_file": {
            "name": "with_config_file",
            "location": 25,
            "return": [
                "Iterator[object]",
                "Dict[str, Any]",
                "bool",
                "str"
            ],
            "arguments": {
                "namespace": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "fail": {
            "name": "fail",
            "location": 180,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "str",
                    "type"
                ],
                "val": [
                    "str",
                    "type"
                ],
                "expected_type": [
                    "str",
                    "type"
                ]
            }
        },
        "Setting.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Tuple[bytes, int]",
                    "Dict[str, Any]",
                    "\"VersionedAnalyzer\"",
                    "\"BooleanArray\"",
                    "List[str]"
                ],
                "default_value": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "configurable": [
                    "str",
                    "Sequence[str]",
                    "\"NoopSpan\"",
                    "Dict[str, str]",
                    "\"Span\"",
                    "T"
                ],
                "doc": [
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "Optional[\"Node\"]",
                    "Optional[T]",
                    "Dict[str, str]",
                    "Optional[bytes]"
                ]
            }
        },
        "Setting.get": {
            "name": "get",
            "location": 56,
            "return": [
                "bool",
                "dict",
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Setting.set": {
            "name": "set",
            "location": 91,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "dict",
                    "str",
                    "List[str]"
                ]
            }
        },
        "BoolSetting.value": {
            "name": "value",
            "location": 138,
            "return": [
                "str",
                "Callable",
                "int",
                "Iterable[str]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "StrSetting.value": {
            "name": "value",
            "location": 151,
            "return": [
                "str",
                "Callable",
                "int",
                "Iterable[str]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "IntSetting.value": {
            "name": "value",
            "location": 177,
            "return": [
                "str",
                "Callable",
                "int",
                "Iterable[str]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Set[str]"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/shared/text.py": {
        "sanitize": {
            "name": "sanitize",
            "location": 5,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "unambiguous_prefixes": {
            "name": "unambiguous_prefixes",
            "location": 13,
            "return": [],
            "arguments": {
                "words": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/shared/text_test.py": {
        "test_sanitize": {
            "name": "test_sanitize",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test_unambiguous_prefixes": {
            "name": "test_unambiguous_prefixes",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/shared/__init__.py": {},
    "Penny-Dreadful-Tools-master/shared_web/api.py": {
        "process_github_webhook": {
            "name": "process_github_webhook",
            "location": 14,
            "return": [
                "Optional[Dict[str, str]]",
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "commit_id": {
            "name": "commit_id",
            "location": 43,
            "return": [
                "bool",
                "Optional[List[Dict]]",
                "BaseException"
            ],
            "arguments": {}
        },
        "validate_api_key": {
            "name": "validate_api_key",
            "location": 46,
            "return": [
                "Optional[str]",
                "str",
                "Optional[List[int]]",
                "Iterable[T]"
            ],
            "arguments": {}
        },
        "generate_error": {
            "name": "generate_error",
            "location": 51,
            "return": [
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "code": [
                    "falcon.Response",
                    "Union['KspNativeControl', int]",
                    "int",
                    "bytes",
                    "str"
                ],
                "msg": [
                    "falcon.Response",
                    "Union['KspNativeControl', int]",
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "return_json": {
            "name": "return_json",
            "location": 54,
            "return": [
                "bool",
                "List[str]",
                "str",
                "List[Mapping[str, Any]]"
            ],
            "arguments": {
                "content": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]"
                ],
                "status": [
                    "List[str]",
                    "dict",
                    "Tuple[str, str]",
                    "int",
                    "str"
                ],
                "camelize": [
                    "str",
                    "bool",
                    "Optional[list]",
                    "bytes"
                ]
            }
        },
        "return_camelized_json": {
            "name": "return_camelized_json",
            "location": 59,
            "return": [
                "bytes",
                "bool",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "content": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "int",
                    "dict",
                    "Mapping"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/shared_web/base_view.py": {
        "BaseView.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseView.home_url": {
            "name": "home_url",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseView.template": {
            "name": "template",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseView.render_content": {
            "name": "render_content",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseView.page": {
            "name": "page",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseView.response": {
            "name": "response",
            "location": 29,
            "return": [
                "Optional[str]",
                "Dict[str, str]",
                "int",
                "werkzeug.wrappers.Response",
                "bytes",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseView.prepare": {
            "name": "prepare",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseView.commit_id": {
            "name": "commit_id",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Union[str, 'Path']"
                ]
            }
        },
        "BaseView.git_branch": {
            "name": "git_branch",
            "location": 46,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseView.css_url": {
            "name": "css_url",
            "location": 49,
            "return": [
                "str",
                "bool",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseView.tooltips_url": {
            "name": "tooltips_url",
            "location": 52,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[float]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseView.js_url": {
            "name": "js_url",
            "location": 58,
            "return": [
                "str",
                "bool",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseView.bundle_url": {
            "name": "bundle_url",
            "location": 61,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseView.language_icon": {
            "name": "language_icon",
            "location": 64,
            "return": [
                "str",
                "IO"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseView.menu": {
            "name": "menu",
            "location": 67,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/shared_web/decorators.py": {
        "fill_args": {
            "name": "fill_args",
            "location": 7,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "fill_cookies": {
            "name": "fill_cookies",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "fill_form": {
            "name": "fill_form",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "fill_args.decorator": {
            "name": "decorator",
            "location": 8,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "fill_cookies.decorator": {
            "name": "decorator",
            "location": 21,
            "return": [],
            "arguments": {
                "f": []
            }
        },
        "fill_form.decorator": {
            "name": "decorator",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "fill_args.decorator.wrapper": {
            "name": "wrapper",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "fill_cookies.decorator.wrapper": {
            "name": "wrapper",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "fill_form.decorator.wrapper": {
            "name": "wrapper",
            "location": 36,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/shared_web/flask_app.py": {
        "sentry_filter": {
            "name": "sentry_filter",
            "location": 25,
            "return": [
                "Optional[int]",
                "Optional[bool]"
            ],
            "arguments": {
                "event": [
                    "bool",
                    "list",
                    "str"
                ],
                "hint": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "log_exception": {
            "name": "log_exception",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "r": [
                    "Exception",
                    "flask.Request",
                    "werkzeug.exceptions.Forbidden",
                    "werkzeug.exceptions.Unauthorized",
                    "str",
                    "logging.Logger",
                    "pypi2nix.logger.Logger"
                ],
                "e": [
                    "Exception",
                    "flask.Request",
                    "werkzeug.exceptions.Forbidden",
                    "werkzeug.exceptions.Unauthorized",
                    "str",
                    "logging.Logger",
                    "pypi2nix.logger.Logger"
                ]
            }
        },
        "PDFlask.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "import_name": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "PDFlask.not_found": {
            "name": "not_found",
            "location": 85,
            "return": [
                "int",
                "float",
                "Type[BaseException]"
            ],
            "arguments": {
                "self": [],
                "e": [
                    "str",
                    "Optional[List[str]]",
                    "int",
                    "List[str]",
                    "Sequence[int]"
                ]
            }
        },
        "PDFlask.internal_server_error": {
            "name": "internal_server_error",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "e": [
                    "Exception",
                    "bool",
                    "str",
                    "type"
                ]
            }
        },
        "PDFlask.unauthorized": {
            "name": "unauthorized",
            "location": 107,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "Optional[str]",
                    "Exception",
                    "str",
                    "Dict[str, Optional[str]]",
                    "Callable",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "PDFlask.logout": {
            "name": "logout",
            "location": 111,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool",
                "Optional[bool]",
                "int",
                "werkzeug.wrappers.Response"
            ],
            "arguments": {
                "self": []
            }
        },
        "PDFlask.authenticate": {
            "name": "authenticate",
            "location": 118,
            "return": [
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {
                "self": []
            }
        },
        "PDFlask.authenticate_callback": {
            "name": "authenticate_callback",
            "location": 130,
            "return": [
                "str",
                "dict",
                "int",
                "Tuple[Dict[str, Any], int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PDFlask.robots_txt": {
            "name": "robots_txt",
            "location": 140,
            "return": [
                "Optional[str]",
                "str",
                "Dict[str, Any]",
                "Dict[str, dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PDFlask.favicon": {
            "name": "favicon",
            "location": 150,
            "return": [
                "dict",
                "List[str]",
                "Optional[str]",
                "\"TopicQuery\"",
                "starlette.responses.Response",
                "Tuple[str, int, Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "rest": [
                    "str",
                    "bool"
                ]
            }
        },
        "PDFlask.external_url_handler": {
            "name": "external_url_handler",
            "location": 155,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "Exception",
                    "bool",
                    "List[int]",
                    "List[str]"
                ],
                "endpoint": [
                    "str",
                    "Callable[..., T]"
                ],
                "values": [
                    "str",
                    "Callable[..., T]"
                ]
            }
        },
        "PDFlask.lookup_external_url": {
            "name": "lookup_external_url",
            "location": 165,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "str"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/shared_web/localization.py": {
        "get_locale": {
            "name": "get_locale",
            "location": 11,
            "return": [
                "bool",
                "str",
                "Union[int, float, complex]",
                "Optional[List[str]]",
                "IO"
            ],
            "arguments": {}
        },
        "check_sql_injection": {
            "name": "check_sql_injection",
            "location": 21,
            "return": [
                "Optional[str]",
                "type",
                "Optional[List[Any]]",
                "list"
            ],
            "arguments": {
                "locale": [
                    "str",
                    "bool",
                    "int",
                    "MutableMapping",
                    "Optional[str]"
                ]
            }
        },
        "init": {
            "name": "init",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "babel": [
                    "List[deque]",
                    "int",
                    "str",
                    "BinaryIO"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/shared_web/oauth.py": {
        "setup_authentication": {
            "name": "setup_authentication",
            "location": 15,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "setup_session": {
            "name": "setup_session",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "add_to_guild": {
            "name": "add_to_guild",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "make_session": {
            "name": "make_session",
            "location": 56,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "token": [
                    "str",
                    "List[str]",
                    "Tuple[str]"
                ],
                "state": [
                    "str",
                    "List[str]",
                    "Tuple[str]"
                ],
                "scope": [
                    "str",
                    "List[str]",
                    "Tuple[str]"
                ]
            }
        },
        "token_updater": {
            "name": "token_updater",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "token": [
                    "str",
                    "List[int]"
                ]
            }
        },
        "redirect_uri": {
            "name": "redirect_uri",
            "location": 75,
            "return": [
                "Callable[[str], bool]",
                "List[object]",
                "Optional[str]",
                "dict",
                "int",
                "Sequence[Tuple[float, float]]"
            ],
            "arguments": {}
        },
        "logout": {
            "name": "logout",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "Penny-Dreadful-Tools-master/shared_web/smoke.py": {
        "SmokeTester.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "SmokeTester.base_tests": {
            "name": "base_tests",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SmokeTester.data_test": {
            "name": "data_test",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[str]"
                ],
                "expected": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        },
        "SmokeTester.response_test": {
            "name": "response_test",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[str]"
                ],
                "expected_code": [
                    "int",
                    "str",
                    "Mapping[str, str]",
                    "Dict[str, int]",
                    "Optional[int]"
                ]
            }
        },
        "SmokeTester.url_map": {
            "name": "url_map",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/shared_web/template.py": {
        "render_name": {
            "name": "render_name",
            "location": 23,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "template": [
                    "str",
                    "dict",
                    "List[List[Any]]"
                ]
            }
        },
        "render": {
            "name": "render",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "view": [
                    "int",
                    "str"
                ]
            }
        },
        "insert_gettext_nodes": {
            "name": "insert_gettext_nodes",
            "location": 71,
            "return": [
                "bool",
                "str",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "parsed_template": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "CachedRenderer._make_loader": {
            "name": "_make_loader",
            "location": 36,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CachedRenderer._make_render_engine": {
            "name": "_make_render_engine",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CachedLoader.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_encoding": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "extension": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "to_unicode": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "search_dirs": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "CachedLoader.read": {
            "name": "read",
            "location": 52,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "lxml.etree.Element",
                    "Optional[str]",
                    "Optional[Sequence[str]]"
                ],
                "encoding": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "CachedRenderEngine.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "literal": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "escape": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "resolve_context": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "resolve_partial": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "to_str": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "CachedRenderEngine.render": {
            "name": "render",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str"
                ],
                "context_stack": [
                    "int",
                    "str"
                ],
                "delimiters": [
                    "str",
                    "Union[str, Pattern]",
                    "bool"
                ]
            }
        },
        "_GettextNode.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "_GettextNode.__repr__": {
            "name": "__repr__",
            "location": 93,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_GettextNode.render": {
            "name": "render",
            "location": 96,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "engine": [
                    "List[str]",
                    "str"
                ],
                "context": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "NoParaTagProcessor.run": {
            "name": "run",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "bool",
                    "List[List[xml.etree.ElementTree.Element]]",
                    "str",
                    "xml.etree.ElementTree.Element"
                ]
            }
        },
        "NoParaTagsExtension.extendMarkdown": {
            "name": "extendMarkdown",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "md": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "_GettextNode.render.lookup": {
            "name": "lookup",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "match": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/shared_web/template_test.py": {
        "test_render_name": {
            "name": "test_render_name",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "module": [
                    "str",
                    "List[str]",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/shared_web/__init__.py": {},
    "Penny-Dreadful-Tools-master/shared_web/views/error.py": {
        "ErrorView.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ErrorView.make_card": {
            "name": "make_card",
            "location": 17,
            "return": [
                "Mapping",
                "int",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "c": [
                    "int",
                    "bytes",
                    "str",
                    "Set[str]"
                ]
            }
        }
    },
    "Penny-Dreadful-Tools-master/shared_web/views/internal_server_error.py": {
        "InternalServerError.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "str",
                    "Union[int, str]",
                    "int"
                ]
            }
        },
        "InternalServerError.message": {
            "name": "message",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "InternalServerError.template": {
            "name": "template",
            "location": 17,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "InternalServerError.page_title": {
            "name": "page_title",
            "location": 20,
            "return": [
                "Callable",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/shared_web/views/not_found.py": {
        "NotFound.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exception": [
                    "str",
                    "Union[int, str]",
                    "int"
                ]
            }
        },
        "NotFound.message": {
            "name": "message",
            "location": 14,
            "return": [
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotFound.template": {
            "name": "template",
            "location": 17,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NotFound.page_title": {
            "name": "page_title",
            "location": 20,
            "return": [
                "int",
                "float",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/shared_web/views/unauthorized.py": {
        "Unauthorized.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "error": [
                    "str",
                    "bool",
                    "float",
                    "int",
                    "Callable"
                ]
            }
        },
        "Unauthorized.page_title": {
            "name": "page_title",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Penny-Dreadful-Tools-master/shared_web/views/__init__.py": {}
}
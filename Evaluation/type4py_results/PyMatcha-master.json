{
    "PyMatcha-master/backend/app.py": {},
    "PyMatcha-master/backend/PyMatcha/__init__.py": {
        "home": {
            "name": "home",
            "location": 219,
            "return": [
                "str",
                "Dict[str, str]",
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "site_map": {
            "name": "site_map",
            "location": 224,
            "return": [
                "str",
                "list"
            ],
            "arguments": {}
        }
    },
    "PyMatcha-master/backend/PyMatcha/models/block.py": {
        "Block.create": {
            "name": "create",
            "location": 39,
            "return": [
                "str",
                "int",
                "MutableSequence[utils.CWLObjectType]"
            ],
            "arguments": {
                "blocker_id": [
                    "str",
                    "Optional[bytes]",
                    "Optional[Union[str, int]]",
                    "Optional[int]"
                ],
                "blocked_id": [
                    "str",
                    "Optional[bytes]",
                    "Optional[Union[str, int]]",
                    "Optional[int]"
                ],
                "dt_blocked": [
                    "str",
                    "Optional[datetime.datetime]",
                    "datetime.date",
                    "int",
                    "datetime"
                ]
            }
        },
        "Block.create_table": {
            "name": "create_table",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Type[peewee.Model]",
                    "type"
                ]
            }
        }
    },
    "PyMatcha-master/backend/PyMatcha/models/image.py": {
        "Image.create": {
            "name": "create",
            "location": 40,
            "return": [
                "Optional[int]",
                "str",
                "Optional[T]",
                "Optional[List[Callable]]"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[int]"
                ],
                "link": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[int]"
                ],
                "is_primary": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[int]"
                ],
                "timestamp": [
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Image.create_table": {
            "name": "create_table",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "int",
                    "Tuple[int, int]",
                    "dict",
                    "str"
                ]
            }
        }
    },
    "PyMatcha-master/backend/PyMatcha/models/like.py": {
        "Like.create": {
            "name": "create",
            "location": 40,
            "return": [
                "set",
                "datetime.datetime",
                "int",
                "Sequence[str]",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "liker_id": [
                    "int",
                    "str",
                    "Sequence[int]",
                    "bytes",
                    "Dict[str, str]"
                ],
                "liked_id": [
                    "int",
                    "str",
                    "Sequence[int]",
                    "bytes",
                    "Dict[str, str]"
                ],
                "is_superlike": [
                    "int",
                    "str",
                    "Sequence[int]",
                    "bytes",
                    "Dict[str, str]"
                ],
                "dt_liked": [
                    "Optional[datetime.datetime]",
                    "datetime.datetime",
                    "int",
                    "datetime"
                ]
            }
        },
        "Like.create_table": {
            "name": "create_table",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "int"
                ]
            }
        }
    },
    "PyMatcha-master/backend/PyMatcha/models/match.py": {
        "Match.create": {
            "name": "create",
            "location": 39,
            "return": [
                "bool",
                "list",
                "dict"
            ],
            "arguments": {
                "user_1": [
                    "str",
                    "dict"
                ],
                "user_2": [
                    "str",
                    "dict"
                ],
                "dt_matched": [
                    "datetime.datetime",
                    "str",
                    "Optional[datetime.datetime]",
                    "int"
                ]
            }
        },
        "Match.create_table": {
            "name": "create_table",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "bool",
                    "flask_appbuilder.models.sqla.Model",
                    "Dict[str, Union[str, Set]]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "PyMatcha-master/backend/PyMatcha/models/message.py": {
        "Message.create": {
            "name": "create",
            "location": 45,
            "return": [
                "set",
                "datetime.datetime",
                "int",
                "Sequence[str]",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "from_id": [
                    "datetime.datetime",
                    "Optional[int]",
                    "str",
                    "raiden.utils.Address",
                    "raiden.utils.BlockIdentifier",
                    "int"
                ],
                "to_id": [
                    "datetime.datetime",
                    "Optional[int]",
                    "str",
                    "raiden.utils.Address",
                    "raiden.utils.BlockIdentifier",
                    "int"
                ],
                "content": [
                    "datetime.datetime",
                    "Optional[int]",
                    "str",
                    "raiden.utils.Address",
                    "raiden.utils.BlockIdentifier",
                    "int"
                ],
                "timestamp": [
                    "datetime.datetime"
                ],
                "seen_timestamp": [
                    "datetime.datetime",
                    "Optional[int]",
                    "str",
                    "raiden.utils.Address",
                    "raiden.utils.BlockIdentifier",
                    "int"
                ],
                "is_seen": [
                    "datetime.datetime",
                    "Optional[int]",
                    "str",
                    "raiden.utils.Address",
                    "raiden.utils.BlockIdentifier",
                    "int"
                ],
                "is_liked": [
                    "datetime.datetime",
                    "Optional[int]",
                    "str",
                    "raiden.utils.Address",
                    "raiden.utils.BlockIdentifier",
                    "int"
                ]
            }
        },
        "Message.to_dict": {
            "name": "to_dict",
            "location": 69,
            "return": [
                "Dict[str, Any]",
                "bool",
                "Sequence",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.create_table": {
            "name": "create_table",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "int"
                ]
            }
        }
    },
    "PyMatcha-master/backend/PyMatcha/models/notification.py": {
        "Notification.create": {
            "name": "create",
            "location": 44,
            "return": [
                "Optional[int]",
                "Optional[bool]",
                "Optional[str]"
            ],
            "arguments": {
                "trigger_id": [
                    "str",
                    "int",
                    "bytes"
                ],
                "user_id": [
                    "jgikbase.idmapping.core.user.AuthsourceID",
                    "Optional[str]",
                    "tracim.models.data.Workspace",
                    "bytes",
                    "Optional[Dict[str, str]]"
                ],
                "content": [
                    "str",
                    "Tuple[Dict[str, Any], Any]"
                ],
                "type": [
                    "str",
                    "Tuple[Dict[str, Any], Any]"
                ],
                "link_to": [
                    "str",
                    "Tuple[Dict[str, Any], Any]"
                ],
                "is_seen": [
                    "str",
                    "Tuple[Dict[str, Any], Any]"
                ],
                "dt_received": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "Notification.create_table": {
            "name": "create_table",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "int"
                ]
            }
        },
        "Notification.to_dict": {
            "name": "to_dict",
            "location": 75,
            "return": [
                "Dict[str, Any]",
                "bool",
                "Sequence",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PyMatcha-master/backend/PyMatcha/models/report.py": {
        "Report.create": {
            "name": "create",
            "location": 42,
            "return": [
                "set",
                "datetime.datetime",
                "int",
                "Sequence[str]",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "reported_id": [
                    "Optional[str]",
                    "Optional[int]",
                    "raiden.utils.ChainID",
                    "str",
                    "int"
                ],
                "reporter_id": [
                    "Optional[str]",
                    "Optional[int]",
                    "raiden.utils.ChainID",
                    "str",
                    "int"
                ],
                "reason": [
                    "Optional[str]",
                    "Optional[int]",
                    "raiden.utils.ChainID",
                    "str",
                    "int"
                ],
                "details": [
                    "Optional[str]",
                    "Optional[int]",
                    "raiden.utils.ChainID",
                    "str",
                    "int"
                ],
                "dt_reported": [
                    "int",
                    "datetime.datetime",
                    "str",
                    "Optional[datetime.datetime]"
                ]
            }
        },
        "Report.create_table": {
            "name": "create_table",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "int"
                ]
            }
        }
    },
    "PyMatcha-master/backend/PyMatcha/models/tag.py": {
        "Tag.create": {
            "name": "create",
            "location": 36,
            "return": [
                "int",
                "Hashable",
                "bytes",
                "str",
                "dict",
                "Callable",
                "Tuple[int, int]"
            ],
            "arguments": {
                "user_id": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Tag.create_table": {
            "name": "create_table",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "type",
                    "dict"
                ]
            }
        }
    },
    "PyMatcha-master/backend/PyMatcha/models/user.py": {
        "get_user": {
            "name": "get_user",
            "location": 423,
            "return": [
                "zerver.models.Realm",
                "str",
                "Dict[str, str]",
                "zerver.models.UserProfile",
                "models.User"
            ],
            "arguments": {
                "uid": [
                    "str",
                    "int",
                    "Pattern[str]"
                ]
            }
        },
        "User.create": {
            "name": "create",
            "location": 74,
            "return": [
                "zerver.models.Realm",
                "dict",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "first_name": [
                    "str",
                    "Optional[str]",
                    "Optional[Callable[[], None]]",
                    "Optional[Callable[[], bool]]",
                    "Sequence[str]",
                    "bool"
                ],
                "last_name": [
                    "str",
                    "Optional[str]",
                    "Optional[Callable[[], None]]",
                    "Optional[Callable[[], bool]]",
                    "Sequence[str]",
                    "bool"
                ],
                "email": [
                    "str"
                ],
                "username": [
                    "str"
                ],
                "password": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ],
                "bio": [
                    "str",
                    "Optional[str]",
                    "Optional[Callable[[], None]]",
                    "Optional[Callable[[], bool]]",
                    "Sequence[str]",
                    "bool"
                ],
                "gender": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "orientation": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "birthdate": [
                    "str",
                    "Optional[str]",
                    "Optional[Callable[[], None]]",
                    "Optional[Callable[[], bool]]",
                    "Sequence[str]",
                    "bool"
                ],
                "geohash": [
                    "str",
                    "Optional[str]"
                ],
                "heat_score": [
                    "str",
                    "Optional[str]",
                    "Optional[Callable[[], None]]",
                    "Optional[Callable[[], bool]]",
                    "Sequence[str]",
                    "bool"
                ],
                "is_online": [
                    "str",
                    "Optional[str]",
                    "Optional[Callable[[], None]]",
                    "Optional[Callable[[], bool]]",
                    "Sequence[str]",
                    "bool"
                ],
                "date_joined": [
                    "str",
                    "Union[datetime.datetime, datetime.date]",
                    "datetime.date",
                    "Union[int, str, datetime.datetime]"
                ],
                "date_lastseen": [
                    "str",
                    "Union[datetime.datetime, datetime.date]",
                    "datetime.date",
                    "Union[int, str, datetime.datetime]"
                ],
                "is_profile_completed": [
                    "str",
                    "Optional[str]",
                    "Optional[Callable[[], None]]",
                    "Optional[Callable[[], bool]]",
                    "Sequence[str]",
                    "bool"
                ],
                "is_confirmed": [
                    "str",
                    "Optional[str]",
                    "Optional[Callable[[], None]]",
                    "Optional[Callable[[], bool]]",
                    "Sequence[str]",
                    "bool"
                ],
                "confirmed_on": [
                    "str",
                    "Optional[str]",
                    "Optional[Callable[[], None]]",
                    "Optional[Callable[[], bool]]",
                    "Sequence[str]",
                    "bool"
                ],
                "skip_recommendations": [
                    "str",
                    "Optional[str]",
                    "Optional[Callable[[], None]]",
                    "Optional[Callable[[], bool]]",
                    "Sequence[str]",
                    "bool"
                ],
                "superlikes_counter": [
                    "str",
                    "Optional[str]",
                    "Optional[Callable[[], None]]",
                    "Optional[Callable[[], bool]]",
                    "Sequence[str]",
                    "bool"
                ],
                "superlikes_reset_dt": [
                    "str",
                    "Optional[str]",
                    "Optional[Callable[[], None]]",
                    "Optional[Callable[[], bool]]",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "User.register": {
            "name": "register",
            "location": 163,
            "return": [
                "float",
                "sublime.View",
                "int",
                "AsyncGenerator"
            ],
            "arguments": {
                "email": [
                    "str",
                    "Optional[str]",
                    "peewee.Model",
                    "app.models.user.User.InDB"
                ],
                "username": [
                    "str",
                    "List[str]",
                    "Dict[str, str]",
                    "int"
                ],
                "password": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "first_name": [
                    "str",
                    "List[str]"
                ],
                "last_name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "User.to_dict": {
            "name": "to_dict",
            "location": 204,
            "return": [
                "Dict[str, Any]",
                "bool",
                "Sequence",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.create_table": {
            "name": "create_table",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "dict"
                ]
            }
        },
        "User.get_jwt_info": {
            "name": "get_jwt_info",
            "location": 234,
            "return": [
                "Optional[str]",
                "int",
                "Dict[str, Any]",
                "dict",
                "djmoney.contrib.exchange.models.Rate",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_images": {
            "name": "get_images",
            "location": 243,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_tags": {
            "name": "get_tags",
            "location": 247,
            "return": [
                "str",
                "type",
                "dict",
                "List[str]",
                "models.Name"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_views": {
            "name": "get_views",
            "location": 251,
            "return": [
                "str",
                "int",
                "zerver.models.Realm",
                "limbic.emotion.models.LexiconLimbicModel",
                "Optional[List[str]]",
                "Optional[str]",
                "raiden.utils.List[raiden.utils.Tuple[str, raiden.utils.Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_view_history": {
            "name": "get_view_history",
            "location": 255,
            "return": [
                "str",
                "int",
                "zerver.models.Realm",
                "limbic.emotion.models.LexiconLimbicModel",
                "Optional[List[str]]",
                "Optional[str]",
                "raiden.utils.List[raiden.utils.Tuple[str, raiden.utils.Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_reports_received": {
            "name": "get_reports_received",
            "location": 258,
            "return": [
                "str",
                "int",
                "zerver.models.Realm",
                "limbic.emotion.models.LexiconLimbicModel",
                "Optional[List[str]]",
                "Optional[str]",
                "raiden.utils.List[raiden.utils.Tuple[str, raiden.utils.Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_reports_sent": {
            "name": "get_reports_sent",
            "location": 262,
            "return": [
                "str",
                "int",
                "zerver.models.Realm",
                "limbic.emotion.models.LexiconLimbicModel",
                "Optional[List[str]]",
                "Optional[str]",
                "raiden.utils.List[raiden.utils.Tuple[str, raiden.utils.Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_likes_received": {
            "name": "get_likes_received",
            "location": 266,
            "return": [
                "str",
                "int",
                "zerver.models.Realm",
                "limbic.emotion.models.LexiconLimbicModel",
                "Optional[List[str]]",
                "Optional[str]",
                "raiden.utils.List[raiden.utils.Tuple[str, raiden.utils.Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_likes_sent": {
            "name": "get_likes_sent",
            "location": 270,
            "return": [
                "str",
                "int",
                "zerver.models.Realm",
                "limbic.emotion.models.LexiconLimbicModel",
                "Optional[List[str]]",
                "Optional[str]",
                "raiden.utils.List[raiden.utils.Tuple[str, raiden.utils.Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_blocks": {
            "name": "get_blocks",
            "location": 274,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_all_notifications": {
            "name": "get_all_notifications",
            "location": 277,
            "return": [
                "str",
                "Optional[str]",
                "zerver.models.Realm",
                "lightbus.message.RpcMessage",
                "bool",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_unread_notifications": {
            "name": "get_unread_notifications",
            "location": 280,
            "return": [
                "Optional[str]",
                "str",
                "tuple",
                "zerver.models.Realm",
                "models.Payment"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.already_likes": {
            "name": "already_likes",
            "location": 283,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "liked_id": [
                    "int",
                    "str"
                ]
            }
        },
        "User.get_matches": {
            "name": "get_matches",
            "location": 300,
            "return": [
                "List[str]",
                "Set[str]",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.send_message": {
            "name": "send_message",
            "location": 320,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "to_id": [
                    "Union[str, \"TrackingCode\"]",
                    "str",
                    "int"
                ],
                "content": [
                    "Union[str, \"TrackingCode\"]",
                    "str",
                    "int"
                ]
            }
        },
        "User.get_messages": {
            "name": "get_messages",
            "location": 323,
            "return": [
                "bytes",
                "List[str]",
                "List[Dict]",
                "str",
                "Union[str, List[Any]]",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_conversation_list": {
            "name": "get_conversation_list",
            "location": 350,
            "return": [
                "str",
                "List[Dict]",
                "List[int]",
                "List[str]",
                "List[List[Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_messages_with_user": {
            "name": "get_messages_with_user",
            "location": 381,
            "return": [
                "str",
                "List[str]",
                "List[Dict]",
                "List[List[Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "with_user_id": [
                    "int",
                    "str",
                    "transfer.models.ListID"
                ]
            }
        }
    },
    "PyMatcha-master/backend/PyMatcha/models/view.py": {
        "View.create": {
            "name": "create",
            "location": 39,
            "return": [
                "set",
                "datetime.datetime",
                "int",
                "Sequence[str]",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "profile_id": [
                    "str",
                    "int",
                    "float"
                ],
                "viewer_id": [
                    "str",
                    "int",
                    "float"
                ],
                "dt_seen": [
                    "Optional[datetime.datetime]",
                    "str",
                    "Callable[[], datetime.datetime]",
                    "dict",
                    "datetime.date",
                    "datetime.datetime"
                ]
            }
        },
        "View.create_table": {
            "name": "create_table",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "int"
                ]
            }
        }
    },
    "PyMatcha-master/backend/PyMatcha/models/__init__.py": {},
    "PyMatcha-master/backend/PyMatcha/routes/__init__.py": {},
    "PyMatcha-master/backend/PyMatcha/routes/api/debug.py": {
        "debug_confirm_user": {
            "name": "debug_confirm_user",
            "location": 27,
            "return": [
                "django.db.models.Model",
                "allennlp.models.archival.Archive",
                "str",
                "cmk.utils.type_defs.UserId",
                "int",
                "List[Tuple[str, int]]",
                "Set[cmk.utils.type_defs.ParsedSectionName]"
            ],
            "arguments": {
                "uid": [
                    "int",
                    "str"
                ]
            }
        },
        "delete_user": {
            "name": "delete_user",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "uid": [
                    "int",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "create_views": {
            "name": "create_views",
            "location": 64,
            "return": [
                "int",
                "dict",
                "models.Dashboard",
                "str"
            ],
            "arguments": {
                "amount": [
                    "raiden.utils.Address",
                    "dict",
                    "byceps.services.news.transfer.models.Channel",
                    "zerver.models.Message"
                ]
            }
        },
        "debug_show_redis": {
            "name": "debug_show_redis",
            "location": 73,
            "return": [
                "bool",
                "float",
                "int"
            ],
            "arguments": {}
        },
        "debug_get_all_reports": {
            "name": "debug_get_all_reports",
            "location": 82,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "debug_get_user_reports": {
            "name": "debug_get_user_reports",
            "location": 91,
            "return": [
                "str",
                "int",
                "salon.models.Stylist",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]"
            ],
            "arguments": {
                "uid": [
                    "int",
                    "str",
                    "Callable[[], None]"
                ]
            }
        },
        "debug_create_report": {
            "name": "debug_create_report",
            "location": 104,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "create_fake_like": {
            "name": "create_fake_like",
            "location": 120,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "delete_redis": {
            "name": "delete_redis",
            "location": 133,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "debug_send_message": {
            "name": "debug_send_message",
            "location": 144,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "debug_reset_ci": {
            "name": "debug_reset_ci",
            "location": 154,
            "return": [
                "str",
                "int",
                "raiden.utils.Tuple[int, int]",
                "bytes"
            ],
            "arguments": {}
        }
    },
    "PyMatcha-master/backend/PyMatcha/routes/api/history.py": {
        "history_viewed_people": {
            "name": "history_viewed_people",
            "location": 15,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {}
        },
        "history_viewed_me": {
            "name": "history_viewed_me",
            "location": 33,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {}
        },
        "history_liked_people": {
            "name": "history_liked_people",
            "location": 51,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {}
        },
        "history_liked_me": {
            "name": "history_liked_me",
            "location": 69,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {}
        },
        "history_blocked": {
            "name": "history_blocked",
            "location": 87,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {}
        }
    },
    "PyMatcha-master/backend/PyMatcha/routes/api/like.py": {
        "like_profile": {
            "name": "like_profile",
            "location": 23,
            "return": [],
            "arguments": {
                "uid": []
            }
        },
        "unlike_profile": {
            "name": "unlike_profile",
            "location": 102,
            "return": [],
            "arguments": {
                "uid": []
            }
        }
    },
    "PyMatcha-master/backend/PyMatcha/routes/api/match.py": {
        "get_user_matches": {
            "name": "get_user_matches",
            "location": 11,
            "return": [
                "Dict[str, str]",
                "Optional[float]",
                "OrderedDict",
                "int",
                "bool",
                "str"
            ],
            "arguments": {}
        }
    },
    "PyMatcha-master/backend/PyMatcha/routes/api/messages.py": {
        "get_opened_conversations": {
            "name": "get_opened_conversations",
            "location": 45,
            "return": [
                "datetime",
                "str",
                "raiden.messages.Message",
                "int"
            ],
            "arguments": {}
        },
        "send_message": {
            "name": "send_message",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "get_conversation_messsages": {
            "name": "get_conversation_messsages",
            "location": 94,
            "return": [
                "datetime",
                "Union[str, List[str]]",
                "raiden.messages.Message",
                "int"
            ],
            "arguments": {
                "with_uid": [
                    "int",
                    "str"
                ]
            }
        },
        "see_conversation_messages": {
            "name": "see_conversation_messages",
            "location": 111,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "with_uid": [
                    "int",
                    "str",
                    "Callable[[str], None]",
                    "bytes",
                    "can.Message"
                ]
            }
        },
        "like_message": {
            "name": "like_message",
            "location": 126,
            "return": [
                "str",
                "pywirelessmbus.utils.WMbusMessage"
            ],
            "arguments": {
                "message_id": [
                    "int",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "unlike_message": {
            "name": "unlike_message",
            "location": 150,
            "return": [
                "str",
                "pywirelessmbus.utils.WMbusMessage"
            ],
            "arguments": {
                "message_id": [
                    "int",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "get_new_messages": {
            "name": "get_new_messages",
            "location": 167,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "PyMatcha-master/backend/PyMatcha/routes/api/notifications.py": {
        "get_all_notifications": {
            "name": "get_all_notifications",
            "location": 15,
            "return": [
                "bool",
                "IO[str]",
                "List[int]",
                "str"
            ],
            "arguments": {}
        },
        "get_unread_notifications": {
            "name": "get_unread_notifications",
            "location": 22,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "mark_notification_as_read": {
            "name": "mark_notification_as_read",
            "location": 29,
            "return": [
                "int",
                "float",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "n_id": [
                    "str",
                    "IO[bytes]",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "PyMatcha-master/backend/PyMatcha/routes/api/recommendations.py": {
        "get_recommendations": {
            "name": "get_recommendations",
            "location": 34,
            "return": [
                "Union[str, List[str]]",
                "int"
            ],
            "arguments": {}
        }
    },
    "PyMatcha-master/backend/PyMatcha/routes/api/search.py": {
        "search": {
            "name": "search",
            "location": 32,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "get_min_maxes_values": {
            "name": "get_min_maxes_values",
            "location": 100,
            "return": [
                "str",
                "int",
                "Optional[float]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {}
        }
    },
    "PyMatcha-master/backend/PyMatcha/routes/api/user.py": {
        "get_all_users": {
            "name": "get_all_users",
            "location": 33,
            "return": [
                "str",
                "Optional[str]",
                "app.models.User",
                "bytes"
            ],
            "arguments": {}
        },
        "get_one_user": {
            "name": "get_one_user",
            "location": 44,
            "return": [
                "djmoney.contrib.exchange.models.Rate",
                "str",
                "Callable",
                "dict"
            ],
            "arguments": {
                "uid": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "get_all_online_users": {
            "name": "get_all_online_users",
            "location": 57,
            "return": [
                "str",
                "bool",
                "recidiviz.utils.regions.Region"
            ],
            "arguments": {}
        }
    },
    "PyMatcha-master/backend/PyMatcha/routes/api/__init__.py": {},
    "PyMatcha-master/backend/PyMatcha/routes/api/auth/email.py": {
        "confirm_email": {
            "name": "confirm_email",
            "location": 44,
            "return": [
                "str",
                "services.email.transfer.models.Message",
                "deque",
                "zam_repondeur.models.Lecture",
                "int",
                "list"
            ],
            "arguments": {
                "token": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "request_new_email_conf": {
            "name": "request_new_email_conf",
            "location": 77,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        }
    },
    "PyMatcha-master/backend/PyMatcha/routes/api/auth/login.py": {
        "auth_login": {
            "name": "auth_login",
            "location": 47,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {}
        },
        "refresh": {
            "name": "refresh",
            "location": 82,
            "return": [
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {}
        },
        "logout": {
            "name": "logout",
            "location": 92,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        }
    },
    "PyMatcha-master/backend/PyMatcha/routes/api/auth/password.py": {
        "forgot_password": {
            "name": "forgot_password",
            "location": 44,
            "return": [
                "str",
                "audiopyle.lib.models.file_meta.CompressedAudioFileMeta",
                "type",
                "Set[str]"
            ],
            "arguments": {}
        },
        "reset_password": {
            "name": "reset_password",
            "location": 66,
            "return": [
                "str",
                "audiopyle.lib.models.file_meta.CompressedAudioFileMeta",
                "type",
                "Set[str]"
            ],
            "arguments": {}
        },
        "check_token_validity": {
            "name": "check_token_validity",
            "location": 99,
            "return": [
                "Optional[dict]",
                "hackathon.utils.utils.DataMessage"
            ],
            "arguments": {}
        }
    },
    "PyMatcha-master/backend/PyMatcha/routes/api/auth/register.py": {
        "api_create_user": {
            "name": "api_create_user",
            "location": 38,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {}
        }
    },
    "PyMatcha-master/backend/PyMatcha/routes/api/auth/__init__.py": {},
    "PyMatcha-master/backend/PyMatcha/routes/api/profile/block.py": {
        "block_profile": {
            "name": "block_profile",
            "location": 33,
            "return": [
                "int",
                "Tuple[int, int]",
                "str",
                "utils.Node"
            ],
            "arguments": {
                "uid": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "unblock_profile": {
            "name": "unblock_profile",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "uid": [
                    "str",
                    "IO[str]",
                    "float",
                    "int"
                ]
            }
        }
    },
    "PyMatcha-master/backend/PyMatcha/routes/api/profile/complete.py": {
        "complete_profile": {
            "name": "complete_profile",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        }
    },
    "PyMatcha-master/backend/PyMatcha/routes/api/profile/edit.py": {
        "edit_profile_first_name": {
            "name": "edit_profile_first_name",
            "location": 48,
            "return": [
                "Dict[str, str]",
                "list",
                "str",
                "type"
            ],
            "arguments": {}
        },
        "edit_profile_last_name": {
            "name": "edit_profile_last_name",
            "location": 61,
            "return": [
                "str",
                "Dict[str, str]",
                "list",
                "BaseException",
                "Exception"
            ],
            "arguments": {}
        },
        "edit_profile_username": {
            "name": "edit_profile_username",
            "location": 74,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "edit_profile_bio": {
            "name": "edit_profile_bio",
            "location": 93,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "edit_profile_gender": {
            "name": "edit_profile_gender",
            "location": 108,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "edit_profile_orientation": {
            "name": "edit_profile_orientation",
            "location": 123,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "edit_profile_birthdate": {
            "name": "edit_profile_birthdate",
            "location": 138,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "edit_profile_tags": {
            "name": "edit_profile_tags",
            "location": 161,
            "return": [
                "str",
                "Tuple[str]",
                "Set[str]",
                "dict",
                "List[cmk.gui.plugins.views.utils.Cell]",
                "List[cmk.gui.plugins.views.utils.JoinCell]",
                "Dict[str, Any]",
                "Callable[[str], str]"
            ],
            "arguments": {}
        },
        "edit_email": {
            "name": "edit_email",
            "location": 177,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "Dict[str, Union[str, int]]",
                "Union[str, Pattern]"
            ],
            "arguments": {}
        },
        "edit_password": {
            "name": "edit_password",
            "location": 195,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "edit_geolocation": {
            "name": "edit_geolocation",
            "location": 215,
            "return": [
                "Dict[str, Dict[str, int]]",
                "bool",
                "Dict[str, Any]",
                "Set[str]",
                "str"
            ],
            "arguments": {}
        }
    },
    "PyMatcha-master/backend/PyMatcha/routes/api/profile/images.py": {
        "add_image_profile": {
            "name": "add_image_profile",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "delete_image_profile": {
            "name": "delete_image_profile",
            "location": 66,
            "return": [
                "int",
                "multinedb.models.workspace.Workspace",
                "float",
                "Tuple[int, int]"
            ],
            "arguments": {
                "image_id": [
                    "str"
                ]
            }
        },
        "change_main_image": {
            "name": "change_main_image",
            "location": 76,
            "return": [
                "int",
                "Dict[str, bool]",
                "str"
            ],
            "arguments": {
                "image_id": [
                    "str"
                ]
            }
        },
        "get_images_profile": {
            "name": "get_images_profile",
            "location": 91,
            "return": [
                "str",
                "django.contrib.sites.models.Site"
            ],
            "arguments": {}
        }
    },
    "PyMatcha-master/backend/PyMatcha/routes/api/profile/report.py": {
        "report_profile": {
            "name": "report_profile",
            "location": 36,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "uid": [
                    "str",
                    "IO[str]",
                    "float",
                    "int"
                ]
            }
        }
    },
    "PyMatcha-master/backend/PyMatcha/routes/api/profile/view.py": {
        "view_profile": {
            "name": "view_profile",
            "location": 35,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "uid": [
                    "str",
                    "IO[str]",
                    "float",
                    "int"
                ]
            }
        }
    },
    "PyMatcha-master/backend/PyMatcha/routes/api/profile/__init__.py": {},
    "PyMatcha-master/backend/PyMatcha/utils/confirm_token.py": {
        "generate_confirmation_token": {
            "name": "generate_confirmation_token",
            "location": 29,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[str]"
            ],
            "arguments": {
                "email": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "Optional[Sequence[str]]",
                    "int",
                    "Optional[list]"
                ],
                "token_type": [
                    "str",
                    "type",
                    "float",
                    "Optional[List[str]]",
                    "Mapping",
                    "int"
                ]
            }
        },
        "confirm_token": {
            "name": "confirm_token",
            "location": 40,
            "return": [
                "str",
                "ClassVar",
                "bool"
            ],
            "arguments": {
                "token": [
                    "str",
                    "Dict[str, str]"
                ],
                "expiration": [
                    "dict",
                    "str"
                ]
            }
        }
    },
    "PyMatcha-master/backend/PyMatcha/utils/decorators.py": {
        "validate_params": {
            "name": "validate_params",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "required": [
                    "str",
                    "bool",
                    "int"
                ],
                "optional": [
                    "str",
                    "bool",
                    "int"
                ],
                "allow_empty": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "debug_token_required": {
            "name": "debug_token_required",
            "location": 73,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "Callable[..., Awaitable]"
            ],
            "arguments": {
                "f": [
                    "bytes",
                    "Dict[str, str]",
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "validate_params.decorator": {
            "name": "decorator",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fn": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "debug_token_required.decorated_function": {
            "name": "decorated_function",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "validate_params.decorator.wrapper": {
            "name": "wrapper",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "PyMatcha-master/backend/PyMatcha/utils/images.py": {
        "upload_image": {
            "name": "upload_image",
            "location": 14,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "bytesio_img": [
                    "str",
                    "float",
                    "int"
                ],
                "username": [
                    "str",
                    "Optional[str]",
                    "type",
                    "cmk.utils.type_defs.OptionalConfigSerial"
                ]
            }
        }
    },
    "PyMatcha-master/backend/PyMatcha/utils/jwt_callbacks.py": {
        "expired_token_callback": {
            "name": "expired_token_callback",
            "location": 15,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "expired_token": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "jwt_user_callback": {
            "name": "jwt_user_callback",
            "location": 30,
            "return": [
                "Optional[int]",
                "Optional[bool]",
                "Optional[str]"
            ],
            "arguments": {
                "identity": [
                    "Dict[int, dict]",
                    "int",
                    "float"
                ]
            }
        },
        "check_if_token_is_revoked": {
            "name": "check_if_token_is_revoked",
            "location": 46,
            "return": [
                "bool"
            ],
            "arguments": {
                "decrypted_token": [
                    "str",
                    "List[int]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "jwt_revoked_token_callback": {
            "name": "jwt_revoked_token_callback",
            "location": 55,
            "return": [
                "str",
                "int",
                "Exception",
                "tartare.core.models.Job"
            ],
            "arguments": {}
        },
        "no_jwt_callback": {
            "name": "no_jwt_callback",
            "location": 74,
            "return": [
                "str",
                "List[str]",
                "List[django.db.models.query.QuerySet]"
            ],
            "arguments": {
                "error_message": [
                    "Tuple[int, int]",
                    "dict",
                    "Optional[superseconnectors.sqla.models.TableColumn]",
                    "Dict[str, Any]",
                    "Optional[Dict]",
                    "bool",
                    "Tuple[Any, str]",
                    "alerta.models.alerAlert"
                ]
            }
        },
        "jwt_invalid_token_callback": {
            "name": "jwt_invalid_token_callback",
            "location": 93,
            "return": [
                "str",
                "List[django.db.models.query.QuerySet]",
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {
                "error_message": [
                    "str",
                    "Dict[str, Any]",
                    "Tuple[int, int]",
                    "Optional[superseconnectors.sqla.models.TableColumn]",
                    "Optional[Dict]",
                    "Dict[str, List[str]]",
                    "dict"
                ]
            }
        }
    },
    "PyMatcha-master/backend/PyMatcha/utils/logging.py": {
        "setup_logging": {
            "name": "setup_logging",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "PyMatcha-master/backend/PyMatcha/utils/mail.py": {
        "send_mail_text": {
            "name": "send_mail_text",
            "location": 10,
            "return": [
                "str",
                "Iterable[int]"
            ],
            "arguments": {
                "dest": [
                    "str",
                    "int",
                    "TextIO",
                    "Iterable[Any]"
                ],
                "subject": [
                    "int",
                    "Optional[float]",
                    "Optional[str]",
                    "str",
                    "bool",
                    "bytes"
                ],
                "body": [
                    "int",
                    "Optional[float]",
                    "Optional[str]",
                    "str",
                    "bool",
                    "bytes"
                ],
                "sender": [
                    "int",
                    "Optional[float]",
                    "Optional[str]",
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "send_mail_html": {
            "name": "send_mail_html",
            "location": 19,
            "return": [
                "str",
                "dict",
                "Iterable[int]"
            ],
            "arguments": {
                "dest": [
                    "str",
                    "dict",
                    "float"
                ],
                "subject": [
                    "str"
                ],
                "html": [
                    "str"
                ],
                "sender": [
                    "str"
                ]
            }
        }
    },
    "PyMatcha-master/backend/PyMatcha/utils/match_score.py": {
        "_get_distance": {
            "name": "_get_distance",
            "location": 10,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "geohash_1": [
                    "bytes",
                    "List[str]",
                    "bool"
                ],
                "geohash_2": [
                    "bytes",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "_get_common_tags": {
            "name": "_get_common_tags",
            "location": 20,
            "return": [
                "List[str]",
                "str",
                "Tuple[Any, Any, Any]",
                "Dict[str, Set[str]]",
                "set",
                "List[Mapping[str, Any]]"
            ],
            "arguments": {
                "tag_list_1": [
                    "Literal",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "tag_list_2": [
                    "Literal",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "_get_age_diff": {
            "name": "_get_age_diff",
            "location": 30,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "age_1": [
                    "str",
                    "bool"
                ],
                "age_2": [
                    "str",
                    "bool"
                ]
            }
        },
        "_get_gender_query": {
            "name": "_get_gender_query",
            "location": 34,
            "return": [
                "str",
                "int",
                "tuple",
                "List[str]"
            ],
            "arguments": {
                "orientation": [
                    "str",
                    "salon.models.Stylist",
                    "django.db.models.Model",
                    "models.Category"
                ],
                "gender": [
                    "str",
                    "salon.models.Stylist",
                    "django.db.models.Model",
                    "models.Category"
                ]
            }
        }
    },
    "PyMatcha-master/backend/PyMatcha/utils/password.py": {
        "hash_password": {
            "name": "hash_password",
            "location": 25,
            "return": [
                "str",
                "Dict[str, str]",
                "Optional[Sequence[str]]",
                "Sequence[str]"
            ],
            "arguments": {
                "password": [
                    "str",
                    "bytes"
                ]
            }
        },
        "check_password": {
            "name": "check_password",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "hash": [
                    "str",
                    "bytes"
                ],
                "password": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "PyMatcha-master/backend/PyMatcha/utils/populate_database.py": {
        "gen_datetime": {
            "name": "gen_datetime",
            "location": 26,
            "return": [],
            "arguments": {
                "min_year": [
                    "float",
                    "str",
                    "int",
                    "Optional[datetime.tzinfo]",
                    "datetime.timezone"
                ],
                "max_year": [
                    "int",
                    "float"
                ]
            }
        },
        "get_unsplash_image": {
            "name": "get_unsplash_image",
            "location": 34,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "gender": [
                    "str",
                    "bytes",
                    "dict",
                    "int"
                ]
            }
        },
        "populate_users": {
            "name": "populate_users",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "amount": [
                    "str",
                    "models.Project",
                    "Optional[str]",
                    "datetime.datetime",
                    "users.models.JustfixUser"
                ],
                "drop_user_table": [
                    "bool",
                    "Callable[[], Any]",
                    "Optional[int]"
                ]
            }
        }
    },
    "PyMatcha-master/backend/PyMatcha/utils/recommendations.py": {
        "default_date_converter": {
            "name": "default_date_converter",
            "location": 11,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "o": [
                    "float",
                    "int",
                    "str",
                    "Optional[datetime.tzinfo]",
                    "datetime.datetime"
                ]
            }
        },
        "create_user_recommendations": {
            "name": "create_user_recommendations",
            "location": 16,
            "return": [],
            "arguments": {
                "user_to_update": [
                    "raiden.utils.BlockSpecification",
                    "raiden.utils.Address",
                    "raiden.utils.Optional[List[str]]"
                ]
            }
        }
    },
    "PyMatcha-master/backend/PyMatcha/utils/static.py": {},
    "PyMatcha-master/backend/PyMatcha/utils/tables.py": {
        "_create_user_table": {
            "name": "_create_user_table",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "db": [
                    "Set[str]",
                    "Tuple[float, float]"
                ]
            }
        },
        "_create_tags_table": {
            "name": "_create_tags_table",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "db": [
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "_create_views_table": {
            "name": "_create_views_table",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "db": [
                    "Set[str]",
                    "Tuple[float, float]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "_create_reports_table": {
            "name": "_create_reports_table",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "db": [
                    "Set[str]",
                    "Tuple[float, float]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "_create_likes_table": {
            "name": "_create_likes_table",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "db": [
                    "Set[str]",
                    "Tuple[float, float]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "_create_matches_table": {
            "name": "_create_matches_table",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "db": [
                    "Set[str]",
                    "Tuple[float, float]"
                ]
            }
        },
        "_create_messages_table": {
            "name": "_create_messages_table",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "db": [
                    "Set[str]",
                    "Tuple[float, float]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "_create_images_table": {
            "name": "_create_images_table",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "db": [
                    "str"
                ]
            }
        },
        "_create_blocks_table": {
            "name": "_create_blocks_table",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "db": [
                    "Set[str]",
                    "Tuple[float, float]"
                ]
            }
        },
        "_create_notifications_table": {
            "name": "_create_notifications_table",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "db": [
                    "Set[str]",
                    "Tuple[float, float]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "create_tables": {
            "name": "create_tables",
            "location": 244,
            "return": [
                ""
            ],
            "arguments": {
                "db": [
                    "str"
                ]
            }
        }
    },
    "PyMatcha-master/backend/PyMatcha/utils/tasks.py": {
        "setup_periodic_tasks": {
            "name": "setup_periodic_tasks",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "sender": [
                    "Mapping[str, Any]"
                ]
            }
        },
        "update_heat_scores": {
            "name": "update_heat_scores",
            "location": 34,
            "return": [
                "float",
                "zam_repondeur.models.Amendement",
                "str",
                "datetime.timedelta",
                "int",
                "bool"
            ],
            "arguments": {}
        },
        "take_users_offline": {
            "name": "take_users_offline",
            "location": 73,
            "return": [
                "str",
                "int",
                "zerver.models.Realm",
                "Dict[str, Any]",
                "Optional[int]",
                "Iterable[str]"
            ],
            "arguments": {}
        },
        "update_user_recommendations": {
            "name": "update_user_recommendations",
            "location": 87,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "reset_superlikes": {
            "name": "reset_superlikes",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "calc_search_min_max": {
            "name": "calc_search_min_max",
            "location": 108,
            "return": [
                "List[int]",
                "List[dict]",
                "float",
                "str"
            ],
            "arguments": {}
        },
        "take_random_users_online": {
            "name": "take_random_users_online",
            "location": 135,
            "return": [
                "dict",
                "int"
            ],
            "arguments": {}
        }
    },
    "PyMatcha-master/backend/PyMatcha/utils/__init__.py": {},
    "PyMatcha-master/backend/PyMatcha/utils/errors/badrequest.py": {
        "generate_badrequest": {
            "name": "generate_badrequest",
            "location": 39,
            "return": [
                "bool",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "error": [
                    "bool",
                    "List[str]",
                    "Dict[str, str]",
                    "Callable"
                ]
            }
        },
        "BadRequestError.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "IO",
                    "bool",
                    "Optional[int]",
                    "hackathon.utils.utils.DataMessage"
                ],
                "solution": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "PyMatcha-master/backend/PyMatcha/utils/errors/base_class.py": {},
    "PyMatcha-master/backend/PyMatcha/utils/errors/conflict.py": {
        "generate_conflict": {
            "name": "generate_conflict",
            "location": 39,
            "return": [
                "bool",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "error": [
                    "bool",
                    "List[str]",
                    "Dict[str, str]",
                    "Callable"
                ]
            }
        },
        "ConflictError.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "IO",
                    "bool",
                    "Optional[int]",
                    "hackathon.utils.utils.DataMessage"
                ],
                "solution": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "PyMatcha-master/backend/PyMatcha/utils/errors/forbidden.py": {
        "generate_forbidden": {
            "name": "generate_forbidden",
            "location": 39,
            "return": [
                "bool",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "error": [
                    "bool",
                    "List[str]",
                    "Dict[str, str]",
                    "Callable"
                ]
            }
        },
        "ForbiddenError.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "IO",
                    "bool",
                    "Optional[int]",
                    "hackathon.utils.utils.DataMessage"
                ],
                "solution": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "PyMatcha-master/backend/PyMatcha/utils/errors/notfound.py": {
        "generate_notfound": {
            "name": "generate_notfound",
            "location": 39,
            "return": [
                "bool",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "error": [
                    "bool",
                    "List[str]",
                    "Dict[str, str]",
                    "Callable"
                ]
            }
        },
        "NotFoundError.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "IO",
                    "bool",
                    "Optional[int]",
                    "hackathon.utils.utils.DataMessage"
                ],
                "solution": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "PyMatcha-master/backend/PyMatcha/utils/errors/template.py": {
        "generate_error_json": {
            "name": "generate_error_json",
            "location": 24,
            "return": [
                "str",
                "Optional[str]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "error": [
                    "int",
                    "str"
                ],
                "status_code": [
                    "int",
                    "Dict[str, str]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "PyMatcha-master/backend/PyMatcha/utils/errors/unauthorized.py": {
        "generate_unauthorized": {
            "name": "generate_unauthorized",
            "location": 39,
            "return": [
                "bool",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "error": [
                    "bool",
                    "List[str]",
                    "Dict[str, str]",
                    "Callable"
                ]
            }
        },
        "UnauthorizedError.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "IO",
                    "bool",
                    "Optional[int]",
                    "hackathon.utils.utils.DataMessage"
                ],
                "solution": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "PyMatcha-master/backend/PyMatcha/utils/errors/__init__.py": {},
    "PyMatcha-master/backend/PyMatcha/utils/orm/_field.py": {
        "Field.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "typeof": [
                    "str",
                    "int",
                    "Callable",
                    "list"
                ],
                "default": [
                    "str",
                    "dict",
                    "List[str]",
                    "bool",
                    "int"
                ],
                "fmt": [
                    "str",
                    "int",
                    "Callable",
                    "list"
                ],
                "hidden": [
                    "str",
                    "int",
                    "Callable",
                    "list"
                ],
                "modifiable": [
                    "str",
                    "int",
                    "Callable",
                    "list"
                ]
            }
        },
        "Field.__repr__": {
            "name": "__repr__",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.deserialize": {
            "name": "deserialize",
            "location": 35,
            "return": [
                "bool",
                "str",
                "int",
                "Union[int, Tuple[int, ...]]",
                "Optional[bool]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.serialize": {
            "name": "serialize",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "list"
                ]
            }
        }
    },
    "PyMatcha-master/backend/PyMatcha/utils/orm/_model.py": {
        "Model.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_data": [
                    "Mapping[str, Union[int, slice]]",
                    "bytes",
                    "dict",
                    "Dict[str, str]",
                    "str",
                    "int"
                ]
            }
        },
        "Model.__getattribute__": {
            "name": "__getattribute__",
            "location": 53,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Union[str, List[str]]"
                ]
            }
        },
        "Model.__getattr__": {
            "name": "__getattr__",
            "location": 68,
            "return": [
                "bool",
                "Mapping",
                "Sequence"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "float",
                    "int",
                    "bytes"
                ]
            }
        },
        "Model.__getitem__": {
            "name": "__getitem__",
            "location": 77,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Model.__setitem__": {
            "name": "__setitem__",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "int",
                    "float",
                    "tuple"
                ],
                "val": [
                    "bytes",
                    "str",
                    "int",
                    "float",
                    "tuple"
                ]
            }
        },
        "Model.__setattr__": {
            "name": "__setattr__",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ],
                "val": [
                    "str",
                    "int",
                    "Callable[[None], Any]"
                ]
            }
        },
        "Model.__repr__": {
            "name": "__repr__",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.__len__": {
            "name": "__len__",
            "location": 125,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.__iter__": {
            "name": "__iter__",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.before_init": {
            "name": "before_init",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "bool",
                    "dict",
                    "AnyStr"
                ]
            }
        },
        "Model.save": {
            "name": "save",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.update": {
            "name": "update",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_dict": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "Model.delete": {
            "name": "delete",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.get": {
            "name": "get",
            "location": 220,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "type",
                    "dict",
                    "int",
                    "django.db.models.fields.Field"
                ]
            }
        },
        "Model.get_multi": {
            "name": "get_multi",
            "location": 265,
            "return": [
                "bool",
                "tuple",
                "Optional['User']"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "Model.get_multis": {
            "name": "get_multis",
            "location": 311,
            "return": [
                "List[str]",
                "bytes",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "Model.select_all": {
            "name": "select_all",
            "location": 365,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Optional[dict]",
                    "str",
                    "dict"
                ]
            }
        },
        "Model.select_random": {
            "name": "select_random",
            "location": 376,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Exception",
                    "Type[T]",
                    "Optional[Type[BaseException]]",
                    "str"
                ],
                "count": [
                    "str",
                    "float",
                    "Union[int, str, bool]"
                ]
            }
        },
        "Model.drop_table": {
            "name": "drop_table",
            "location": 395,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[dict]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Model.to_dict": {
            "name": "to_dict",
            "location": 402,
            "return": [
                "Dict[str, Any]",
                "bytes",
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PyMatcha-master/backend/PyMatcha/utils/orm/__init__.py": {},
    "PyMatcha-master/backend/PyMatcha/utils/success/created.py": {
        "SuccessCreated": {
            "name": "SuccessCreated",
            "location": 22,
            "return": [
                "str",
                "Optional[int]",
                "Dict[str, Any]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "message": [
                    "str",
                    "IO"
                ]
            }
        }
    },
    "PyMatcha-master/backend/PyMatcha/utils/success/deleted.py": {
        "SuccessDeleted": {
            "name": "SuccessDeleted",
            "location": 22,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "message": [
                    "str"
                ]
            }
        }
    },
    "PyMatcha-master/backend/PyMatcha/utils/success/success.py": {
        "Success": {
            "name": "Success",
            "location": 22,
            "return": [
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "message": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "SuccessOutput": {
            "name": "SuccessOutput",
            "location": 35,
            "return": [
                "str",
                "bool",
                "int",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "key": [
                    "bytes",
                    "str",
                    "MutableMapping",
                    "Optional[Union[Dict, str, int, bytes]]"
                ],
                "output": [
                    "bytes",
                    "str",
                    "MutableMapping",
                    "Optional[Union[Dict, str, int, bytes]]"
                ]
            }
        },
        "SuccessOutputMessage": {
            "name": "SuccessOutputMessage",
            "location": 50,
            "return": [
                "str",
                "bool",
                "int",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bytes",
                    "Optional[Union[Dict, str, int, bytes]]",
                    "MutableMapping"
                ],
                "output": [
                    "str",
                    "bytes",
                    "Optional[Union[Dict, str, int, bytes]]",
                    "MutableMapping"
                ],
                "message": [
                    "str",
                    "bytes",
                    "Optional[Union[Dict, str, int, bytes]]",
                    "MutableMapping"
                ]
            }
        }
    },
    "PyMatcha-master/backend/PyMatcha/utils/success/__init__.py": {}
}
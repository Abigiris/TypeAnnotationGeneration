{
    "PynamoDB-master/setup.py": {},
    "PynamoDB-master/docs/conf.py": {},
    "PynamoDB-master/examples/attributes.py": {
        "Color.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "Color.__str__": {
            "name": "__str__",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PickleAttribute.serialize": {
            "name": "serialize",
            "location": 25,
            "return": [
                "Optional[int]",
                "int",
                "float",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "PickleAttribute.deserialize": {
            "name": "deserialize",
            "location": 32,
            "return": [
                "salon.models.Stylist",
                "Iterable[str]",
                "float",
                "dict",
                "str",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "T",
                    "dict"
                ]
            }
        }
    },
    "PynamoDB-master/examples/connection.py": {},
    "PynamoDB-master/examples/indexes.py": {},
    "PynamoDB-master/examples/model.py": {},
    "PynamoDB-master/examples/office_model.py": {},
    "PynamoDB-master/examples/optimistic_locking.py": {
        "assert_condition_check_fails": {
            "name": "assert_condition_check_fails",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "OfficeEmployeeMap.__eq__": {
            "name": "__eq__",
            "location": 16,
            "return": [
                "bool",
                "Optional[str]",
                "models.JournalEntryOrigin",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "OfficeEmployeeMap.__repr__": {
            "name": "__repr__",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PynamoDB-master/examples/table_connection.py": {},
    "PynamoDB-master/examples/url_shortener/shortener.py": {
        "index": {
            "name": "index",
            "location": 42,
            "return": [
                "str",
                "salon.models.Stylist",
                "Optional[int]",
                "Optional[Any]"
            ],
            "arguments": {}
        },
        "shorten": {
            "name": "shorten",
            "location": 47,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        },
        "resolve": {
            "name": "resolve",
            "location": 54,
            "return": [
                "dict",
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "code": [
                    "str",
                    "bytes",
                    "Dict[str, Optional[str]]",
                    "Dict[str, str]"
                ]
            }
        },
        "Url.save": {
            "name": "save",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PynamoDB-master/pynamodb/attributes.py": {
        "_get_class_for_serialize": {
            "name": "_get_class_for_serialize",
            "location": 1101,
            "return": [
                "str",
                "bool",
                "List[str]",
                "Tuple[str, int, int]"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "Callable[..., None]",
                    "Union[str, int]",
                    "str"
                ]
            }
        },
        "Attribute.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hash_key": [
                    "bool",
                    "Set[str]",
                    "str",
                    "Optional[str]"
                ],
                "range_key": [
                    "bool",
                    "List[str]",
                    "bytes",
                    "Optional[bool]",
                    "float",
                    "dict"
                ],
                "null": [
                    "bool",
                    "Optional[bool]",
                    "Optional[int]",
                    "Optional[List]"
                ],
                "default": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Callable",
                    "int",
                    "Optional[List[Any]]"
                ],
                "default_for_new": [
                    "str",
                    "bool"
                ],
                "attr_name": [
                    "Optional[str]",
                    "List[str]",
                    "Union[str, List[str]]",
                    "Optional[List[str]]",
                    "str",
                    "Union[List[str], str]",
                    "Union[str, List[str], None]",
                    "Sequence[object]"
                ]
            }
        },
        "Attribute.attr_name": {
            "name": "attr_name",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[str, bytes]",
                    "Optional[str]"
                ]
            }
        },
        "Attribute.__set__": {
            "name": "__set__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "bool",
                    "dict",
                    "Dict[str, Any]"
                ],
                "value": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "Optional[Union[Any, Any]]"
                ]
            }
        },
        "Attribute.__get__": {
            "name": "__get__",
            "location": 106,
            "return": [
                "str",
                "Optional[str]",
                "Optional['SparkSession']",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "dict",
                    "Dict[str, type]",
                    "Dict[str, Any]"
                ],
                "owner": [
                    "Type['Signature']",
                    "Type[Any]"
                ]
            }
        },
        "Attribute.__set_name__": {
            "name": "__set_name__",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "Type",
                    "Type['Signature']",
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "Attribute._is_map_attribute_class_object": {
            "name": "_is_map_attribute_class_object",
            "location": 120,
            "return": [
                "float"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "float"
                ]
            }
        },
        "Attribute.serialize": {
            "name": "serialize",
            "location": 123,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "Attribute.deserialize": {
            "name": "deserialize",
            "location": 129,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "Attribute.get_value": {
            "name": "get_value",
            "location": 135,
            "return": [
                "bool",
                "str",
                "Tuple[str]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "dict",
                    "list"
                ]
            }
        },
        "Attribute.__iter__": {
            "name": "__iter__",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Attribute.__eq__": {
            "name": "__eq__",
            "location": 145,
            "return": [
                "str",
                "pathlib.Path",
                "Union[str, pathlib.Path]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "Attribute.__ne__": {
            "name": "__ne__",
            "location": 148,
            "return": [
                "str",
                "pathlib.Path",
                "Union[str, pathlib.Path]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "Attribute.__lt__": {
            "name": "__lt__",
            "location": 151,
            "return": [
                "str",
                "pathlib.Path",
                "Union[str, pathlib.Path]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "Attribute.__le__": {
            "name": "__le__",
            "location": 154,
            "return": [
                "str",
                "pathlib.Path",
                "Union[str, pathlib.Path]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "Attribute.__gt__": {
            "name": "__gt__",
            "location": 157,
            "return": [
                "str",
                "pathlib.Path",
                "Union[str, pathlib.Path]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "Attribute.__ge__": {
            "name": "__ge__",
            "location": 160,
            "return": [
                "str",
                "pathlib.Path",
                "Union[str, pathlib.Path]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "Attribute.__getitem__": {
            "name": "__getitem__",
            "location": 163,
            "return": [
                "str",
                "Union[str, pathlib.Path]",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "bytes",
                    "IO[bytes]",
                    "Union[str, bytes]"
                ]
            }
        },
        "Attribute.between": {
            "name": "between",
            "location": 166,
            "return": [
                "pathlib.Path",
                "str",
                "Union[str, pathlib.Path]"
            ],
            "arguments": {
                "self": [],
                "lower": [
                    "str",
                    "pathlib.Path",
                    "bytes",
                    "IO[str]"
                ],
                "upper": [
                    "str",
                    "pathlib.Path",
                    "bytes",
                    "IO[str]"
                ]
            }
        },
        "Attribute.is_in": {
            "name": "is_in",
            "location": 169,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attribute.exists": {
            "name": "exists",
            "location": 172,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attribute.does_not_exist": {
            "name": "does_not_exist",
            "location": 175,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attribute.is_type": {
            "name": "is_type",
            "location": 178,
            "return": [
                "bool",
                "str",
                "Type",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attribute.startswith": {
            "name": "startswith",
            "location": 182,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "Attribute.contains": {
            "name": "contains",
            "location": 185,
            "return": [
                "str",
                "Union[str, pathlib.Path]",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "bytes",
                    "IO[bytes]",
                    "Union[str, bytes]"
                ]
            }
        },
        "Attribute.__add__": {
            "name": "__add__",
            "location": 189,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]"
                ]
            }
        },
        "Attribute.__radd__": {
            "name": "__radd__",
            "location": 192,
            "return": [
                "str",
                "pathlib.Path",
                "Union[str, pathlib.Path]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "Attribute.__sub__": {
            "name": "__sub__",
            "location": 195,
            "return": [
                "str",
                "pathlib.Path",
                "Union[str, pathlib.Path]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "Attribute.__rsub__": {
            "name": "__rsub__",
            "location": 198,
            "return": [
                "str",
                "pathlib.Path",
                "Union[str, pathlib.Path]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "Attribute.__or__": {
            "name": "__or__",
            "location": 201,
            "return": [
                "str",
                "pathlib.Path",
                "Union[str, pathlib.Path]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[T]",
                    "Iterable[Any]"
                ]
            }
        },
        "Attribute.append": {
            "name": "append",
            "location": 204,
            "return": [
                "str",
                "pathlib.Path",
                "Union[str, pathlib.Path]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[Union[\"PipeChain\", str]]"
                ]
            }
        },
        "Attribute.prepend": {
            "name": "prepend",
            "location": 207,
            "return": [
                "str",
                "pathlib.Path",
                "Union[str, pathlib.Path]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "Attribute.set": {
            "name": "set",
            "location": 210,
            "return": [
                "str",
                "Optional[pathlib.Path]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "list",
                    "int",
                    "set",
                    "tuple",
                    "Dict[str, Any]"
                ]
            }
        },
        "Attribute.remove": {
            "name": "remove",
            "location": 213,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attribute.add": {
            "name": "add",
            "location": 216,
            "return": [
                "bool",
                "Optional[List[str]]",
                "List[str]",
                "Optional[pathlib.Path]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Attribute.delete": {
            "name": "delete",
            "location": 219,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttributeContainerMeta.__new__": {
            "name": "__new__",
            "location": 225,
            "return": [
                "str",
                "Type",
                "Type[Any]",
                "Sequence[Any]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "type",
                    "Sequence[type]"
                ],
                "name": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "type",
                    "Sequence[type]"
                ],
                "bases": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "type",
                    "Sequence[type]"
                ],
                "namespace": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "type",
                    "Sequence[type]"
                ],
                "discriminator": [
                    "bool",
                    "str",
                    "Iterable[Tuple[Hashable, Any]]",
                    "Tuple[type]"
                ]
            }
        },
        "AttributeContainerMeta.__init__": {
            "name": "__init__",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "float"
                ],
                "bases": [
                    "str",
                    "float"
                ],
                "namespace": [
                    "str",
                    "float"
                ],
                "discriminator": [
                    "str",
                    "bool",
                    "Tuple[type]"
                ]
            }
        },
        "AttributeContainerMeta._initialize_attributes": {
            "name": "_initialize_attributes",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Type"
                ],
                "discriminator_value": [
                    "Optional[str]",
                    "Optional[Tuple[str, Any]]",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "AttributeContainer.__init__": {
            "name": "__init__",
            "location": 260,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_user_instantiated": [
                    "str"
                ]
            }
        },
        "AttributeContainer._get_attributes": {
            "name": "_get_attributes",
            "location": 272,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "AttributeContainer.get_attributes": {
            "name": "get_attributes",
            "location": 280,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "List[int]",
                    "Type['DataclassT']",
                    "str",
                    "List[str]"
                ]
            }
        },
        "AttributeContainer._dynamo_to_python_attr": {
            "name": "_dynamo_to_python_attr",
            "location": 289,
            "return": [
                "Callable",
                "datetime.datetime",
                "int",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "dynamo_key": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "AttributeContainer._get_discriminator_attribute": {
            "name": "_get_discriminator_attribute",
            "location": 298,
            "return": [
                "Optional[str]",
                "List[dict]",
                "bool",
                "List[Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Callable",
                    "Optional[int]"
                ]
            }
        },
        "AttributeContainer._set_discriminator": {
            "name": "_set_discriminator",
            "location": 301,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttributeContainer._set_defaults": {
            "name": "_set_defaults",
            "location": 306,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "_user_instantiated": [
                    "bool"
                ]
            }
        },
        "AttributeContainer._set_attributes": {
            "name": "_set_attributes",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttributeContainer._container_serialize": {
            "name": "_container_serialize",
            "location": 331,
            "return": [
                "str",
                "bytes",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "null_check": [
                    "bool"
                ]
            }
        },
        "AttributeContainer._container_deserialize": {
            "name": "_container_deserialize",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute_values": [
                    "float",
                    "dict"
                ]
            }
        },
        "AttributeContainer._update_attribute_types": {
            "name": "_update_attribute_types",
            "location": 373,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "Callable",
                    "int",
                    "bool"
                ],
                "attribute_values": [
                    "Dict[str, Any]",
                    "str",
                    "Tuple[Dict[str, Any], Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "AttributeContainer._coerce_attribute_type": {
            "name": "_coerce_attribute_type",
            "location": 393,
            "return": [
                ""
            ],
            "arguments": {
                "attr_type": [
                    "List[Dict]",
                    "str"
                ],
                "attribute_value": [
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "AttributeContainer._get_discriminator_class": {
            "name": "_get_discriminator_class",
            "location": 403,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "tuple"
                ],
                "attribute_values": [
                    "str",
                    "Dict[str, object]",
                    "dict",
                    "T",
                    "MutableMapping[str, Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "AttributeContainer._instantiate": {
            "name": "_instantiate",
            "location": 413,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[float]",
                    "Optional[Callable]",
                    "Tuple[str, str]",
                    "Optional[bool]",
                    "Callable[[dict], None]",
                    "List[str]"
                ],
                "attribute_values": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "DiscriminatorAttribute.__init__": {
            "name": "__init__",
            "location": 426,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attr_name": [
                    "Optional[str]",
                    "str",
                    "Tuple[str, str]"
                ]
            }
        },
        "DiscriminatorAttribute.register_class": {
            "name": "register_class",
            "location": 431,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "bool"
                ],
                "discriminator": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Type[Exception]"
                ]
            }
        },
        "DiscriminatorAttribute.get_registered_subclasses": {
            "name": "get_registered_subclasses",
            "location": 443,
            "return": [
                "int",
                "Set[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "dict",
                    "str",
                    "Dict[str, List[Any]]"
                ]
            }
        },
        "DiscriminatorAttribute.get_discriminator": {
            "name": "get_discriminator",
            "location": 446,
            "return": [
                "Callable[[KT], VT]",
                "Iterable[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "bytes",
                    "int"
                ]
            }
        },
        "DiscriminatorAttribute.__set__": {
            "name": "__set__",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "Union[None, bool]",
                    "str",
                    "Sequence[str]",
                    "int",
                    "Type"
                ],
                "value": [
                    "Optional[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "DiscriminatorAttribute.serialize": {
            "name": "serialize",
            "location": 454,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        },
        "DiscriminatorAttribute.deserialize": {
            "name": "deserialize",
            "location": 460,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str",
                    "Tuple[Hashable]"
                ]
            }
        },
        "BinaryAttribute.serialize": {
            "name": "serialize",
            "location": 475,
            "return": [
                "bool",
                "int",
                "str",
                "Union[bytes, bytearray]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Union[str, bytes]",
                    "Optional[int]",
                    "dict",
                    "Union[bool, str]",
                    "list"
                ]
            }
        },
        "BinaryAttribute.deserialize": {
            "name": "deserialize",
            "location": 481,
            "return": [
                "int",
                "bytes",
                "Union[bytes, bytearray]",
                "bool",
                "bytearray",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes",
                    "float",
                    "Union[str, bytes]"
                ]
            }
        },
        "BinarySetAttribute.serialize": {
            "name": "serialize",
            "location": 495,
            "return": [
                "int",
                "bytes",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Sequence[Any]",
                    "Optional[Sequence[T]]",
                    "Dict[str, int]",
                    "Tuple[str, Any]",
                    "list"
                ]
            }
        },
        "BinarySetAttribute.deserialize": {
            "name": "deserialize",
            "location": 501,
            "return": [
                "bytes",
                "bool",
                "List[Dict[str, Any]]",
                "Optional[object]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "list",
                    "int",
                    "tuple",
                    "str",
                    "List[float]",
                    "List[str]"
                ]
            }
        },
        "UnicodeSetAttribute.serialize": {
            "name": "serialize",
            "location": 522,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[Exception]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "T",
                    "Dict[type, Callable]",
                    "Union[None, str, bytes]",
                    "float"
                ]
            }
        },
        "UnicodeSetAttribute.deserialize": {
            "name": "deserialize",
            "location": 528,
            "return": [
                "str",
                "Iterable[Sequence[str]]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "JSONAttribute.serialize": {
            "name": "serialize",
            "location": 543,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[str]",
                    "Optional[bytes]",
                    "Optional[pathlib.Path]",
                    "str",
                    "T",
                    "Optional[int]",
                    "Union[List, Tuple]"
                ]
            }
        },
        "JSONAttribute.deserialize": {
            "name": "deserialize",
            "location": 552,
            "return": [
                "bool",
                "int",
                "Optional[bool]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Dict[str, Union[str, int, bool]]",
                    "str",
                    "datetime.datetime"
                ]
            }
        },
        "BooleanAttribute.serialize": {
            "name": "serialize",
            "location": 565,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "T",
                    "Optional[bool]",
                    "Optional[T]",
                    "Optional[str]",
                    "datetime.datetime"
                ]
            }
        },
        "BooleanAttribute.deserialize": {
            "name": "deserialize",
            "location": 573,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[float]",
                    "T",
                    "Union[bool, Any]",
                    "float"
                ]
            }
        },
        "NumberAttribute.serialize": {
            "name": "serialize",
            "location": 583,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "list",
                    "dict"
                ]
            }
        },
        "NumberAttribute.deserialize": {
            "name": "deserialize",
            "location": 589,
            "return": [
                "int",
                "List[int]",
                "str",
                "Dict[Tuple[str, str], Tuple[float, float]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str"
                ]
            }
        },
        "NumberSetAttribute.serialize": {
            "name": "serialize",
            "location": 603,
            "return": [
                "int",
                "Optional[dict]",
                "Tuple[int]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Match"
                ]
            }
        },
        "NumberSetAttribute.deserialize": {
            "name": "deserialize",
            "location": 609,
            "return": [
                "List[str]",
                "Dict[int, int]",
                "str",
                "int",
                "list",
                "Optional[dict]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Match",
                    "list"
                ]
            }
        },
        "VersionAttribute.__set__": {
            "name": "__set__",
            "location": 622,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "int",
                    "Optional[str]",
                    "float"
                ],
                "value": [
                    "int",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "VersionAttribute.__get__": {
            "name": "__get__",
            "location": 628,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "owner": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "VersionAttribute.serialize": {
            "name": "serialize",
            "location": 635,
            "return": [
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Tuple[str, str, str]",
                    "str",
                    "Union[int, str]",
                    "Tuple[str]",
                    "Tuple[str, str]",
                    "float",
                    "int"
                ]
            }
        },
        "VersionAttribute.deserialize": {
            "name": "deserialize",
            "location": 641,
            "return": [
                "int",
                "str",
                "List[int]",
                "Dict[str, Any]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "T",
                    "Sequence",
                    "int"
                ]
            }
        },
        "TTLAttribute._normalize": {
            "name": "_normalize",
            "location": 657,
            "return": [
                "Optional[str]",
                "float",
                "str",
                "bool",
                "datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[int]",
                    "Optional[object]",
                    "Union[int, float, None]",
                    "T",
                    "bool",
                    "float",
                    "Optional[Union[bool, int]]"
                ]
            }
        },
        "TTLAttribute.__set__": {
            "name": "__set__",
            "location": 673,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "int",
                    "float",
                    "str",
                    "dict"
                ],
                "value": [
                    "int",
                    "float",
                    "str",
                    "dict"
                ]
            }
        },
        "TTLAttribute.serialize": {
            "name": "serialize",
            "location": 679,
            "return": [
                "Optional[int]",
                "str",
                "Optional[str]",
                "datetime.timedelta",
                "type"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[str]",
                    "T",
                    "Optional[Union[str, Any]]",
                    "Optional[T]",
                    "Optional[int]",
                    "Union[None, float, int, str]",
                    "Union[None, int, float]",
                    "Optional[bool]"
                ]
            }
        },
        "TTLAttribute.deserialize": {
            "name": "deserialize",
            "location": 687,
            "return": [
                "str",
                "datetime.datetime",
                "datetime.date"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "int",
                    "list",
                    "Match"
                ]
            }
        },
        "UTCDateTimeAttribute.serialize": {
            "name": "serialize",
            "location": 701,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "Optional[Union[str, Any]]",
                    "Optional[object]",
                    "T",
                    "Optional[int]",
                    "Optional[str]",
                    "Union[None, float, int, str]",
                    "Optional[pathlib.Path]",
                    "Union[None, int, float]"
                ]
            }
        },
        "UTCDateTimeAttribute.deserialize": {
            "name": "deserialize",
            "location": 712,
            "return": [
                "str",
                "int",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bytes",
                    "int",
                    "float"
                ]
            }
        },
        "UTCDateTimeAttribute._fast_parse_utc_date_string": {
            "name": "_fast_parse_utc_date_string",
            "location": 719,
            "return": [
                "datetime.date",
                "datetime.datetime",
                "int",
                "bool",
                "Optional[datetime.datetime]"
            ],
            "arguments": {
                "date_string": [
                    "str",
                    "Optional[str]",
                    "BinaryIO"
                ]
            }
        },
        "NullAttribute.serialize": {
            "name": "serialize",
            "location": 742,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "NullAttribute.deserialize": {
            "name": "deserialize",
            "location": 745,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "MapAttribute.__init__": {
            "name": "__init__",
            "location": 810,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MapAttribute._is_attribute_container": {
            "name": "_is_attribute_container",
            "location": 829,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapAttribute._make_attribute": {
            "name": "_make_attribute",
            "location": 835,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MapAttribute._update_attribute_paths": {
            "name": "_update_attribute_paths",
            "location": 851,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path_segment": [
                    "str",
                    "Optional[Sequence[str]]",
                    "Dict[str, str]"
                ]
            }
        },
        "MapAttribute.__eq__": {
            "name": "__eq__",
            "location": 861,
            "return": [
                "Tuple[Any, Any, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Collection"
                ]
            }
        },
        "MapAttribute.__ne__": {
            "name": "__ne__",
            "location": 866,
            "return": [
                "Tuple[Any, Any, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Collection"
                ]
            }
        },
        "MapAttribute.__lt__": {
            "name": "__lt__",
            "location": 871,
            "return": [
                "Tuple[Any, Any, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Collection"
                ]
            }
        },
        "MapAttribute.__le__": {
            "name": "__le__",
            "location": 876,
            "return": [
                "Tuple[Any, Any, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Collection"
                ]
            }
        },
        "MapAttribute.__gt__": {
            "name": "__gt__",
            "location": 881,
            "return": [
                "Tuple[Any, Any, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Collection"
                ]
            }
        },
        "MapAttribute.__ge__": {
            "name": "__ge__",
            "location": 886,
            "return": [
                "Tuple[Any, Any, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Collection"
                ]
            }
        },
        "MapAttribute.__iter__": {
            "name": "__iter__",
            "location": 891,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MapAttribute.__getitem__": {
            "name": "__getitem__",
            "location": 896,
            "return": [
                "int",
                "List[str]",
                "str",
                "Optional[int]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        },
        "MapAttribute.__setitem__": {
            "name": "__setitem__",
            "location": 909,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Callable",
                    "Dict[type, Callable]"
                ],
                "value": [
                    "dict",
                    "list"
                ]
            }
        },
        "MapAttribute.__getattr__": {
            "name": "__getattr__",
            "location": 919,
            "return": [
                "int",
                "dict",
                "bytes",
                "pathlib.Path",
                "List[dict]",
                "str"
            ],
            "arguments": {
                "self": [],
                "attr": [
                    "str",
                    "Type"
                ]
            }
        },
        "MapAttribute.__get__": {
            "name": "__get__",
            "location": 933,
            "return": [
                "int",
                "bytes",
                "Callable[[], T]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "Optional[str]",
                    "Set[str]"
                ],
                "owner": [
                    "str",
                    "Optional[str]",
                    "Set[str]"
                ]
            }
        },
        "MapAttribute.__setattr__": {
            "name": "__setattr__",
            "location": 937,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str"
                ]
            }
        },
        "MapAttribute.__set__": {
            "name": "__set__",
            "location": 945,
            "return": [
                "float",
                "str",
                "Iterable[Union[Any, int]]"
            ],
            "arguments": {
                "self": [],
                "instance": [
                    "str",
                    "List[str]",
                    "list",
                    "Dict[Any, list]",
                    "List[int]",
                    "Optional[str]"
                ],
                "value": [
                    "bool",
                    "T",
                    "aiocometd.constants.TransportState",
                    "Iterable",
                    "Optional[str]",
                    "Iterator[Any]"
                ]
            }
        },
        "MapAttribute.__set_name__": {
            "name": "__set_name__",
            "location": 950,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "str",
                    "int"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "MapAttribute._set_attributes": {
            "name": "_set_attributes",
            "location": 963,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MapAttribute.is_correctly_typed": {
            "name": "is_correctly_typed",
            "location": 973,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "set",
                    "dict",
                    "str"
                ],
                "attr": [
                    "str",
                    "Dict[str, Any]",
                    "Callable[[], T]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "MapAttribute.validate": {
            "name": "validate",
            "location": 982,
            "return": [
                "bool",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MapAttribute._serialize_undeclared_attributes": {
            "name": "_serialize_undeclared_attributes",
            "location": 986,
            "return": [
                "str",
                "Optional[datetime.datetime]"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "str",
                    "Dict[str, int]",
                    "Callable",
                    "bytes",
                    "dict"
                ],
                "container": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "MapAttribute.serialize": {
            "name": "serialize",
            "location": 1002,
            "return": [
                "bytes",
                "bool",
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "Optional[bool]",
                    "T",
                    "Optional[int]",
                    "Union[None, str, bytes]"
                ]
            }
        },
        "MapAttribute.deserialize": {
            "name": "deserialize",
            "location": 1021,
            "return": [
                "bool",
                "Optional[bool]",
                "Optional[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "str",
                    "Union[bool, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "MapAttribute.is_raw": {
            "name": "is_raw",
            "location": 1035,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int",
                    "Type",
                    "type",
                    "List[str]"
                ]
            }
        },
        "MapAttribute.as_dict": {
            "name": "as_dict",
            "location": 1038,
            "return": [
                "list",
                "Tuple[int, Dict[str, Any]]",
                "List[str]",
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]",
                "set",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "DynamicMapAttribute.__setattr__": {
            "name": "__setattr__",
            "location": 1059,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "value": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "DynamicMapAttribute.serialize": {
            "name": "serialize",
            "location": 1066,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "str",
                    "Union[bool, str]",
                    "list",
                    "Optional[int]",
                    "bool",
                    "datetime.datetime"
                ]
            }
        },
        "DynamicMapAttribute.deserialize": {
            "name": "deserialize",
            "location": 1084,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "bool",
                    "datetime.timedelta",
                    "Iterable[object]",
                    "float",
                    "Optional[Any]"
                ]
            }
        },
        "DynamicMapAttribute.is_raw": {
            "name": "is_raw",
            "location": 1096,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "str",
                    "Callable",
                    "T",
                    "Type[Any]"
                ]
            }
        },
        "ListAttribute.__init__": {
            "name": "__init__",
            "location": 1116,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hash_key": [
                    "bool",
                    "Optional[str]",
                    "Optional[Union[Any, Any]]",
                    "Optional[bool]",
                    "Optional[int]",
                    "str"
                ],
                "range_key": [
                    "bool",
                    "Optional[str]",
                    "Optional[Union[Any, Any]]",
                    "Optional[bool]",
                    "Optional[int]",
                    "str"
                ],
                "null": [
                    "bool",
                    "Optional[str]",
                    "Optional[Union[Any, Any]]",
                    "Optional[bool]",
                    "Optional[int]",
                    "str"
                ],
                "default": [
                    "bool",
                    "Optional[str]",
                    "Optional[Union[Any, Any]]",
                    "Optional[bool]",
                    "Optional[int]",
                    "str"
                ],
                "attr_name": [
                    "bool",
                    "Optional[str]",
                    "Optional[Union[Any, Any]]",
                    "Optional[bool]",
                    "Optional[int]",
                    "str"
                ],
                "of": [
                    "int",
                    "str",
                    "float",
                    "List[float]",
                    "bool"
                ]
            }
        },
        "ListAttribute.serialize": {
            "name": "serialize",
            "location": 1137,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "ListAttribute.deserialize": {
            "name": "deserialize",
            "location": 1155,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "values": [
                    "str",
                    "Union[int, float]",
                    "dict",
                    "List[str]",
                    "list",
                    "T",
                    "Union[bytes, str]"
                ]
            }
        },
        "ListAttribute.__getitem__": {
            "name": "__getitem__",
            "location": 1178,
            "return": [
                "str",
                "Optional[str]",
                "dict",
                "Callable[[], Any]"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int",
                    "str",
                    "Union[int, List]"
                ]
            }
        },
        "ListAttribute._get_serialize_class": {
            "name": "_get_serialize_class",
            "location": 1196,
            "return": [
                "str",
                "Optional[Any]",
                "Type",
                "Mapping"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "PynamoDB-master/pynamodb/constants.py": {},
    "PynamoDB-master/pynamodb/exceptions.py": {
        "PynamoDBException.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "BaseException",
                    "int"
                ],
                "cause": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "PynamoDBException.cause_response_code": {
            "name": "cause_response_code",
            "location": 20,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PynamoDBException.cause_response_message": {
            "name": "cause_response_message",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableDoesNotExist.__init__": {
            "name": "__init__",
            "location": 95,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "AttributeDeserializationError.__init__": {
            "name": "__init__",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "attr_name": [
                    "str"
                ],
                "attr_type": [
                    "str"
                ]
            }
        },
        "AttributeNullError.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attr_name": [
                    "str",
                    "int"
                ]
            }
        },
        "AttributeNullError.__str__": {
            "name": "__str__",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AttributeNullError.prepend_path": {
            "name": "prepend_path",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attr_name": [
                    "str"
                ]
            }
        },
        "VerboseClientError.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "error_response": [
                    "str",
                    "Optional[str]"
                ],
                "operation_name": [
                    "str",
                    "Optional[str]"
                ],
                "verbose_properties": [
                    "str",
                    "Optional[Any]",
                    "Optional[int]",
                    "Optional[Dict[str, str]]",
                    "int"
                ]
            }
        }
    },
    "PynamoDB-master/pynamodb/indexes.py": {
        "Index.__init_subclass__": {
            "name": "__init_subclass__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "dict",
                    "Type[T]",
                    "Optional[src.main.core.models.area.Area]"
                ]
            }
        },
        "Index.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Index.__set_name__": {
            "name": "__set_name__",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "Type",
                    "Type['Signature']",
                    "str"
                ],
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Index.count": {
            "name": "count",
            "location": 50,
            "return": [
                "int",
                "zam_repondeur.models.Lecture",
                "type",
                "str",
                "Optional[str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "hash_key": [
                    "bytes",
                    "Optional[List[Any]]",
                    "Callable[[str], int]",
                    "int"
                ],
                "range_key_condition": [
                    "bytes",
                    "Optional[List[Any]]",
                    "Callable[[str], int]",
                    "int"
                ],
                "filter_condition": [
                    "bytes",
                    "Optional[List[Any]]",
                    "Callable[[str], int]",
                    "int"
                ],
                "consistent_read": [
                    "bytes",
                    "Optional[List[Any]]",
                    "Callable[[str], int]",
                    "int"
                ],
                "limit": [
                    "bytes",
                    "Optional[List[Any]]",
                    "Callable[[str], int]",
                    "int"
                ],
                "rate_limit": [
                    "bytes",
                    "Optional[List[Any]]",
                    "Callable[[str], int]",
                    "int"
                ]
            }
        },
        "Index.query": {
            "name": "query",
            "location": 72,
            "return": [
                "dict",
                "str",
                "bool",
                "Dict[str, Any]",
                "Tuple[Tuple[int, int], Tuple[int, int]]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "hash_key": [
                    "str",
                    "int",
                    "Optional[List[Any]]",
                    "list",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Union[str, float]"
                ],
                "range_key_condition": [
                    "str",
                    "int",
                    "Optional[List[Any]]",
                    "list",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Union[str, float]"
                ],
                "filter_condition": [
                    "str",
                    "int",
                    "Optional[List[Any]]",
                    "list",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Union[str, float]"
                ],
                "consistent_read": [
                    "str",
                    "int",
                    "Optional[List[Any]]",
                    "list",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Union[str, float]"
                ],
                "scan_index_forward": [
                    "str",
                    "int",
                    "Optional[List[Any]]",
                    "list",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Union[str, float]"
                ],
                "limit": [
                    "str",
                    "int",
                    "Optional[List[Any]]",
                    "list",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Union[str, float]"
                ],
                "last_evaluated_key": [
                    "str",
                    "int",
                    "Optional[List[Any]]",
                    "list",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Union[str, float]"
                ],
                "attributes_to_get": [
                    "str",
                    "int",
                    "Optional[List[Any]]",
                    "list",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Union[str, float]"
                ],
                "page_size": [
                    "str",
                    "int",
                    "Optional[List[Any]]",
                    "list",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Union[str, float]"
                ],
                "rate_limit": [
                    "str",
                    "int",
                    "Optional[List[Any]]",
                    "list",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Union[str, float]"
                ]
            }
        },
        "Index.scan": {
            "name": "scan",
            "location": 102,
            "return": [
                "int",
                "tuple",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "filter_condition": [
                    "int",
                    "float"
                ],
                "segment": [
                    "int",
                    "float"
                ],
                "total_segments": [
                    "int",
                    "float"
                ],
                "limit": [
                    "int",
                    "float"
                ],
                "last_evaluated_key": [
                    "int",
                    "float"
                ],
                "page_size": [
                    "int",
                    "float"
                ],
                "consistent_read": [
                    "int",
                    "float"
                ],
                "rate_limit": [
                    "int",
                    "float"
                ],
                "attributes_to_get": [
                    "int",
                    "float"
                ]
            }
        },
        "Index._hash_key_attribute": {
            "name": "_hash_key_attribute",
            "location": 131,
            "return": [
                "str",
                "dict",
                "zerver.models.Realm"
            ],
            "arguments": {
                "cls": [
                    "Union[int, float, str]",
                    "Callable[[str], bool]",
                    "List[str]",
                    "types.topics.ChannelT",
                    "employees.models.Employee",
                    "str",
                    "Callable"
                ]
            }
        },
        "Index._get_schema": {
            "name": "_get_schema",
            "location": 140,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Type",
                    "str",
                    "type"
                ]
            }
        },
        "GlobalSecondaryIndex._get_schema": {
            "name": "_get_schema",
            "location": 173,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Union[int, str]",
                    "str",
                    "zam_repondeur.models.Lecture",
                    "bool"
                ]
            }
        },
        "IncludeProjection.__init__": {
            "name": "__init__",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "non_attr_keys": [
                    "rouver.types.StartResponse",
                    "dict",
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "PynamoDB-master/pynamodb/models.py": {
        "BatchWrite.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "auto_commit": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "settings": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "BatchWrite.save": {
            "name": "save",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "put_item": [
                    "str",
                    "List[str]",
                    "float",
                    "int"
                ]
            }
        },
        "BatchWrite.delete": {
            "name": "delete",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "del_item": [
                    "str",
                    "list",
                    "int"
                ]
            }
        },
        "BatchWrite.__enter__": {
            "name": "__enter__",
            "location": 122,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BatchWrite.__exit__": {
            "name": "__exit__",
            "location": 125,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "BatchWrite.commit": {
            "name": "commit",
            "location": 132,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaModel.__new__": {
            "name": "__new__",
            "location": 204,
            "return": [
                "str",
                "Type",
                "Type[Any]",
                "Sequence[Any]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "type",
                    "Sequence[type]"
                ],
                "name": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "type",
                    "Sequence[type]"
                ],
                "bases": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "type",
                    "Sequence[type]"
                ],
                "namespace": [
                    "str",
                    "bool",
                    "List[Tuple[str, str]]",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "type",
                    "Sequence[type]"
                ],
                "discriminator": [
                    "bool",
                    "str",
                    "Iterable[Tuple[Hashable, Any]]",
                    "Tuple[type]"
                ]
            }
        },
        "MetaModel.__init__": {
            "name": "__init__",
            "location": 208,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "bases": [
                    "str",
                    "Optional[str]"
                ],
                "namespace": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[Sequence[Any]]"
                ],
                "discriminator": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "MetaModel._initialize_indexes": {
            "name": "_initialize_indexes",
            "location": 272,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Match[str]",
                    "type",
                    "dict"
                ]
            }
        },
        "Model.__init__": {
            "name": "__init__",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hash_key": [
                    "str",
                    "Optional[Sequence[str]]",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "range_key": [
                    "Optional[Dict[str, Any]]",
                    "Optional[Sequence[str]]",
                    "Optional[Any]",
                    "List[Tuple[str, bytes]]",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "_user_instantiated": []
            }
        },
        "Model.batch_get": {
            "name": "batch_get",
            "location": 327,
            "return": [
                "typing.Iterator[_T]"
            ],
            "arguments": {
                "cls": [
                    "List[Dict[str, Any]]",
                    "dict",
                    "Dict[str, Any]",
                    "int"
                ],
                "items": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "consistent_read": [
                    "Optional[bool]",
                    "Optional[Sequence[str]]",
                    "Iterable[str]",
                    "Type[T]",
                    "Optional[str]"
                ],
                "attributes_to_get": [
                    "Optional[bool]",
                    "Optional[Sequence[str]]",
                    "Iterable[str]",
                    "Type[T]",
                    "Optional[str]"
                ],
                "settings": [
                    "Optional[bool]",
                    "Optional[Sequence[str]]",
                    "Iterable[str]",
                    "Type[T]",
                    "Optional[str]"
                ]
            }
        },
        "Model.batch_write": {
            "name": "batch_write",
            "location": 387,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "type",
                    "Type"
                ],
                "auto_commit": [
                    "str",
                    "type",
                    "Type"
                ],
                "settings": [
                    "str",
                    "type",
                    "Type"
                ]
            }
        },
        "Model.__repr__": {
            "name": "__repr__",
            "location": 399,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.delete": {
            "name": "delete",
            "location": 407,
            "return": [
                "Optional[Dict]",
                "Optional[bool]",
                "str"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Optional[int]",
                    "Optional[\"PNSqlCursor\"]",
                    "Mapping[str, Any]"
                ],
                "settings": [
                    "str",
                    "bool",
                    "settings.Settings",
                    "dict"
                ]
            }
        },
        "Model.update": {
            "name": "update",
            "location": 420,
            "return": [
                "dict",
                "starfish.types.Axes",
                "str",
                "Callable",
                "OrderedDict[str, Any]",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "actions": [
                    "int",
                    "list"
                ],
                "condition": [
                    "str",
                    "bool"
                ],
                "settings": [
                    "int",
                    "bytes"
                ]
            }
        },
        "Model.save": {
            "name": "save",
            "location": 446,
            "return": [
                "str",
                "Optional[float]",
                "starfish.types.Axes",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "List[Dict[str, str]]",
                    "List[str]",
                    "List[Tuple[float, str]]",
                    "dict",
                    "tuple"
                ],
                "settings": [
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "int"
                ]
            }
        },
        "Model.refresh": {
            "name": "refresh",
            "location": 456,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "consistent_read": [
                    "str",
                    "dict",
                    "bool"
                ],
                "settings": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "Model.get_update_kwargs_from_instance": {
            "name": "get_update_kwargs_from_instance",
            "location": 474,
            "return": [
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "actions": [
                    "int",
                    "bool",
                    "str"
                ],
                "condition": [
                    "int",
                    "Optional[str]",
                    "Iterable[Sequence[str]]",
                    "str"
                ],
                "return_values_on_condition_failure": [
                    "bool",
                    "bytes",
                    "List[str]",
                    "int",
                    "psycopg2.extensions.connection",
                    "str"
                ]
            }
        },
        "Model.get_delete_kwargs_from_instance": {
            "name": "get_delete_kwargs_from_instance",
            "location": 488,
            "return": [
                "str",
                "Optional[str]",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "str",
                    "list",
                    "int",
                    "float",
                    "Optional[str]"
                ],
                "return_values_on_condition_failure": [
                    "str",
                    "bytes",
                    "Dict[str, str]",
                    "Type['Declared']",
                    "int"
                ]
            }
        },
        "Model.get_save_kwargs_from_instance": {
            "name": "get_save_kwargs_from_instance",
            "location": 501,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "Optional[bool]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "OrderedDict",
                    "Type",
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Callable",
                    "Optional[str]"
                ],
                "return_values_on_condition_failure": [
                    "str",
                    "Type"
                ]
            }
        },
        "Model.get_operation_kwargs_from_class": {
            "name": "get_operation_kwargs_from_class",
            "location": 512,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "List[str]",
                "Optional[T]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Hashable",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Dict[str, Set[str]]",
                    "Optional[int]"
                ],
                "hash_key": [
                    "str",
                    "Hashable",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Dict[str, Set[str]]",
                    "Optional[int]"
                ],
                "range_key": [
                    "str",
                    "Hashable",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Dict[str, Set[str]]",
                    "Optional[int]"
                ],
                "condition": [
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Optional[str]",
                    "types.K",
                    "str",
                    "static_frame.core.util.GetItemKeyType",
                    "IO[bytes]",
                    "bytes"
                ]
            }
        },
        "Model.get": {
            "name": "get",
            "location": 526,
            "return": [
                "str",
                "int",
                "core.types.FBAccessToken",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]",
                    "types.K"
                ],
                "hash_key": [
                    "str",
                    "List[str]",
                    "types.K"
                ],
                "range_key": [
                    "str",
                    "List[str]",
                    "types.K"
                ],
                "consistent_read": [
                    "int",
                    "bytes",
                    "float",
                    "bool",
                    "IO[str]",
                    "Optional[int]",
                    "Optional[List[Any]]"
                ],
                "attributes_to_get": [
                    "int",
                    "bytes",
                    "float",
                    "bool",
                    "IO[str]",
                    "Optional[int]",
                    "Optional[List[Any]]"
                ],
                "settings": [
                    "int",
                    "bytes",
                    "float",
                    "bool",
                    "IO[str]",
                    "Optional[int]",
                    "Optional[List[Any]]"
                ]
            }
        },
        "Model.from_raw_data": {
            "name": "from_raw_data",
            "location": 559,
            "return": [
                "dict",
                "bytes",
                "str",
                "Exception",
                "starfish.types.Axes",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "dict",
                    "bytes",
                    "Type[Any]",
                    "Type[T]"
                ],
                "data": [
                    "Optional[str]",
                    "Optional[Any]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Optional[str]]",
                    "Optional[Dict[str, str]]",
                    "str"
                ]
            }
        },
        "Model.count": {
            "name": "count",
            "location": 572,
            "return": [
                "bool",
                "str",
                "Optional[Any]"
            ],
            "arguments": {
                "cls": [
                    "Optional[str]"
                ],
                "hash_key": [
                    "Optional[mypy.types.Type]",
                    "Callable",
                    "Optional[str]",
                    "types.trees.NodeT",
                    "Union[Dict[str, Any], None]",
                    "Union[Dict[str, str], None]",
                    "Optional[float]",
                    "Optional[int]"
                ],
                "range_key_condition": [
                    "str",
                    "int",
                    "float"
                ],
                "filter_condition": [
                    "Optional[Any]",
                    "bool",
                    "Optional['Entity']",
                    "Optional[bytes]",
                    "Optional[bool]",
                    "Optional[str]",
                    "Optional[T]",
                    "Optional[Sequence[Any]]"
                ],
                "consistent_read": [
                    "str",
                    "int",
                    "float"
                ],
                "index_name": [
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "Dict[str, Any]",
                    "Iterable",
                    "bool"
                ],
                "limit": [
                    "str",
                    "int",
                    "float"
                ],
                "rate_limit": [
                    "Optional[float]",
                    "Callable",
                    "T",
                    "str"
                ],
                "settings": [
                    "Optional[float]",
                    "Callable",
                    "T",
                    "str"
                ]
            }
        },
        "Model.query": {
            "name": "query",
            "location": 633,
            "return": [
                "bool",
                "str",
                "types.ModuleType"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[List[Any]]",
                    "Optional[Union[str, bytes]]",
                    "Optional[str]",
                    "Dict[str, Set[str]]"
                ],
                "hash_key": [
                    "str",
                    "dict",
                    "Optional[List[Any]]",
                    "Optional[Union[str, bytes]]",
                    "Optional[str]"
                ],
                "range_key_condition": [
                    "Iterable[bytes]",
                    "int",
                    "float",
                    "Dict[str, Any]"
                ],
                "filter_condition": [
                    "str",
                    "dict",
                    "Union[None, str]"
                ],
                "consistent_read": [
                    "Iterable[bytes]",
                    "int",
                    "float",
                    "Dict[str, Any]"
                ],
                "index_name": [
                    "Optional[str]",
                    "list",
                    "Optional[List[Any]]",
                    "Dict[str, Any]",
                    "bool"
                ],
                "scan_index_forward": [
                    "Iterable[bytes]",
                    "int",
                    "float",
                    "Dict[str, Any]"
                ],
                "limit": [
                    "\"State\"",
                    "int",
                    "float",
                    "static_frame.core.util.GetItemKeyType",
                    "bool"
                ],
                "last_evaluated_key": [
                    "Iterable[bytes]",
                    "int",
                    "float",
                    "Dict[str, Any]"
                ],
                "attributes_to_get": [
                    "Iterable[bytes]",
                    "int",
                    "float",
                    "Dict[str, Any]"
                ],
                "page_size": [
                    "bool",
                    "Optional[int]",
                    "Optional[bool]",
                    "Optional[dict]",
                    "Iterable"
                ],
                "rate_limit": [
                    "Optional[float]",
                    "bytes",
                    "Optional[str]",
                    "str",
                    "T"
                ],
                "settings": [
                    "Optional[float]",
                    "bytes",
                    "Optional[str]",
                    "str",
                    "T"
                ]
            }
        },
        "Model.scan": {
            "name": "scan",
            "location": 700,
            "return": [
                "bool",
                "str",
                "Optional[Any]",
                "Tuple[int, int]",
                "float"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "medtagger.types.SurveyElementKey",
                    "Dict[str, str]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "filter_condition": [
                    "str",
                    "Optional[str]"
                ],
                "segment": [
                    "Optional[object]",
                    "Optional[\"ShippingInfo\"]",
                    "Dict[str, Any]",
                    "List[Tuple[int, int]]",
                    "types.K",
                    "int"
                ],
                "total_segments": [
                    "Optional[object]",
                    "Optional[\"ShippingInfo\"]",
                    "Dict[str, Any]",
                    "List[Tuple[int, int]]",
                    "types.K",
                    "int"
                ],
                "limit": [
                    "Optional[Callable]",
                    "int",
                    "bool",
                    "dict",
                    "static_frame.core.util.GetItemKeyTypeCompound",
                    "Callable",
                    "List[List[int]]"
                ],
                "last_evaluated_key": [
                    "Optional[object]",
                    "Optional[\"ShippingInfo\"]",
                    "Dict[str, Any]",
                    "List[Tuple[int, int]]",
                    "types.K",
                    "int"
                ],
                "page_size": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "str",
                    "Union[float, None, int]"
                ],
                "consistent_read": [
                    "Optional[object]",
                    "Optional[\"ShippingInfo\"]",
                    "Dict[str, Any]",
                    "List[Tuple[int, int]]",
                    "types.K",
                    "int"
                ],
                "index_name": [
                    "Optional[object]",
                    "Optional[\"ShippingInfo\"]",
                    "Dict[str, Any]",
                    "List[Tuple[int, int]]",
                    "types.K",
                    "int"
                ],
                "rate_limit": [
                    "Optional[float]",
                    "bytes"
                ],
                "attributes_to_get": [
                    "Optional[object]",
                    "Optional[\"ShippingInfo\"]",
                    "Dict[str, Any]",
                    "List[Tuple[int, int]]",
                    "types.K",
                    "int"
                ],
                "settings": [
                    "Optional[float]",
                    "bytes"
                ]
            }
        },
        "Model.exists": {
            "name": "exists",
            "location": 759,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "Optional[Dict]",
                    "str"
                ]
            }
        },
        "Model.delete_table": {
            "name": "delete_table",
            "location": 770,
            "return": [
                "bool",
                "List[dict]",
                "List[Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Dict[str, Any]",
                    "psycopg2.extensions.connection"
                ]
            }
        },
        "Model.describe_table": {
            "name": "describe_table",
            "location": 777,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "Model.create_table": {
            "name": "create_table",
            "location": 784,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "static_frame.core.util.PathSpecifier",
                    "str",
                    "Optional[Sequence[str]]",
                    "Optional[Callable]"
                ],
                "wait": [
                    "bool",
                    "int",
                    "float",
                    "fklearn.types.LogType"
                ],
                "read_capacity_units": [
                    "str",
                    "type",
                    "int",
                    "bool"
                ],
                "write_capacity_units": [
                    "Optional[Type]",
                    "Optional[str]",
                    "static_frame.core.util.PathSpecifier",
                    "bool"
                ],
                "billing_mode": [
                    "bool",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "ignore_update_ttl_errors": [
                    "bool",
                    "int",
                    "Type[MutableMapping[Any, Any]]"
                ]
            }
        },
        "Model.update_ttl": {
            "name": "update_ttl",
            "location": 839,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type[types.C]",
                    "float",
                    "Optional[str]"
                ],
                "ignore_update_ttl_errors": [
                    "bool",
                    "List[Type]"
                ]
            }
        },
        "Model._get_schema": {
            "name": "_get_schema",
            "location": 858,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "Model._get_save_args": {
            "name": "_get_save_args",
            "location": 905,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "dict",
                    "denite.util.UserContext",
                    "Sequence[Hashable]",
                    "str"
                ]
            }
        },
        "Model._get_hash_range_key_serialized_values": {
            "name": "_get_hash_range_key_serialized_values",
            "location": 931,
            "return": [
                "str",
                "dict",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model._handle_version_attribute": {
            "name": "_handle_version_attribute",
            "location": 948,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.update_local_version_attribute": {
            "name": "update_local_version_attribute",
            "location": 973,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Model._hash_key_attribute": {
            "name": "_hash_key_attribute",
            "location": 979,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Exception"
                ]
            }
        },
        "Model._range_key_attribute": {
            "name": "_range_key_attribute",
            "location": 986,
            "return": [
                "bool",
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Sequence[object]",
                    "psycopg2.extensions.connection",
                    "Dict[str, Any]"
                ]
            }
        },
        "Model._ttl_attribute": {
            "name": "_ttl_attribute",
            "location": 993,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type[T]",
                    "AsyncGenerator",
                    "int",
                    "Type"
                ]
            }
        },
        "Model._get_keys": {
            "name": "_get_keys",
            "location": 1003,
            "return": [
                "str",
                "bool",
                "logging.LogRecord"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model._get_serialized_keys": {
            "name": "_get_serialized_keys",
            "location": 1017,
            "return": [
                "str",
                "Dict[str, str]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model._batch_get_page": {
            "name": "_batch_get_page",
            "location": 1023,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "cls": [
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[Sequence[str]]",
                    "Type[T]",
                    "dict"
                ],
                "keys_to_get": [
                    "Optional[str]",
                    "Type[T]",
                    "Optional[bool]",
                    "Optional[Sequence[str]]"
                ],
                "consistent_read": [
                    "Optional[str]",
                    "Type[T]",
                    "Optional[bool]",
                    "Optional[Sequence[str]]"
                ],
                "attributes_to_get": [
                    "Optional[str]",
                    "Type[T]",
                    "Optional[bool]",
                    "Optional[Sequence[str]]"
                ],
                "settings": [
                    "Optional[str]",
                    "Type[T]",
                    "Optional[bool]",
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "Model._get_connection": {
            "name": "_get_connection",
            "location": 1041,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "cls": [
                    "Type[Any]",
                    "int",
                    "str"
                ]
            }
        },
        "Model._serialize_value": {
            "name": "_serialize_value",
            "location": 1079,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Sequence[str]",
                    "int",
                    "Pattern[str]",
                    "List[Union[Any, Any]]",
                    "Union[str, int]"
                ],
                "attr": [
                    "Type[static_frame.Index]",
                    "T",
                    "Dict[str, Any]",
                    "str"
                ],
                "value": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "Model._serialize_keys": {
            "name": "_serialize_keys",
            "location": 1096,
            "return": [
                "dict",
                "List[str]",
                "Mapping[int, str]",
                "Dict[int, str]",
                "str",
                "bool",
                "int",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Optional[int]",
                    "list",
                    "graph.types.RowsProxy",
                    "Optional[float]"
                ],
                "hash_key": [
                    "bytes",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Optional[VT]",
                    "dict",
                    "Optional[str]",
                    "Optional[mypy.types.Type]"
                ],
                "range_key": [
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "str",
                    "Optional[VT]",
                    "Optional[float]",
                    "Optional[str]",
                    "dict",
                    "Hashable"
                ]
            }
        },
        "Model.serialize": {
            "name": "serialize",
            "location": 1109,
            "return": [
                "str",
                "types.LocatorType"
            ],
            "arguments": {
                "self": [],
                "null_check": [
                    "str"
                ]
            }
        },
        "Model.deserialize": {
            "name": "deserialize",
            "location": 1115,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "attribute_values": [
                    "int",
                    "str",
                    "Iterable"
                ]
            }
        },
        "Model.to_json": {
            "name": "to_json",
            "location": 1121,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Model.from_json": {
            "name": "from_json",
            "location": 1124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "dict",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "_ModelFuture.__init__": {
            "name": "__init__",
            "location": 1137,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_cls": [
                    "int",
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "_ModelFuture.update_with_raw_data": {
            "name": "update_with_raw_data",
            "location": 1142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "list",
                    "Dict[str, List[int]]",
                    "bytes",
                    "Tuple[dict]"
                ]
            }
        },
        "_ModelFuture.get": {
            "name": "get",
            "location": 1147,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PynamoDB-master/pynamodb/pagination.py": {
        "RateLimiter.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rate_limit": [
                    "str",
                    "List[str]",
                    "bool",
                    "float",
                    "int",
                    "Optional[List[str]]"
                ],
                "time_module": [
                    "str",
                    "int",
                    "float",
                    "Callable"
                ]
            }
        },
        "RateLimiter.consume": {
            "name": "consume",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "units": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "RateLimiter.acquire": {
            "name": "acquire",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RateLimiter.rate_limit": {
            "name": "rate_limit",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rate_limit": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "PageIterator.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "operation": [
                    "int",
                    "bool",
                    "float"
                ],
                "args": [],
                "kwargs": [],
                "rate_limit": [
                    "int",
                    "bool",
                    "float"
                ],
                "settings": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "PageIterator.__iter__": {
            "name": "__iter__",
            "location": 101,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageIterator.__next__": {
            "name": "__next__",
            "location": 104,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageIterator.next": {
            "name": "next",
            "location": 125,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageIterator.key_names": {
            "name": "key_names",
            "location": 129,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageIterator.page_size": {
            "name": "page_size",
            "location": 143,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "page_size": [
                    "int",
                    "bool",
                    "Tuple[int, int]",
                    "Tuple[int, int, int]",
                    "List[int]",
                    "Iterable[List[str]]"
                ]
            }
        },
        "PageIterator.last_evaluated_key": {
            "name": "last_evaluated_key",
            "location": 147,
            "return": [
                "str",
                "dict",
                "Mapping[str, Any]",
                "MutableMapping",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageIterator.total_scanned_count": {
            "name": "total_scanned_count",
            "location": 151,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultIterator.__init__": {
            "name": "__init__",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "operation": [
                    "int",
                    "Sequence[int]",
                    "Sequence[str]",
                    "str"
                ],
                "args": [],
                "kwargs": [],
                "map_fn": [
                    "int",
                    "bool",
                    "float"
                ],
                "limit": [
                    "int",
                    "bool",
                    "float"
                ],
                "rate_limit": [
                    "int",
                    "Sequence[int]",
                    "Sequence[str]",
                    "str"
                ],
                "settings": [
                    "int",
                    "Sequence[int]",
                    "Sequence[str]",
                    "str"
                ]
            }
        },
        "ResultIterator._get_next_page": {
            "name": "_get_next_page",
            "location": 178,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultIterator.__iter__": {
            "name": "__iter__",
            "location": 185,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultIterator.__next__": {
            "name": "__next__",
            "location": 188,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultIterator.next": {
            "name": "next",
            "location": 207,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultIterator.last_evaluated_key": {
            "name": "last_evaluated_key",
            "location": 211,
            "return": [
                "dict",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResultIterator.total_count": {
            "name": "total_count",
            "location": 225,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PynamoDB-master/pynamodb/settings.py": {
        "_load_module": {
            "name": "_load_module",
            "location": 24,
            "return": [
                "Optional[str]",
                "bool",
                "list"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "path": [
                    "str"
                ]
            }
        },
        "get_settings_value": {
            "name": "get_settings_value",
            "location": 43,
            "return": [
                "bool",
                "Tuple[float, float]",
                "tuple",
                "str",
                "\"State\""
            ],
            "arguments": {
                "key": [
                    "str",
                    "int",
                    "Hashable"
                ]
            }
        },
        "OperationSettings.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PynamoDB-master/pynamodb/signals.py": {
        "_FakeNamespace.signal": {
            "name": "signal",
            "location": 12,
            "return": [
                "bool",
                "bytes",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict"
                ],
                "doc": [
                    "str",
                    "dict"
                ]
            }
        },
        "_FakeSignal.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ],
                "doc": [
                    "int",
                    "str",
                    "Sequence",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "_FakeSignal._fail": {
            "name": "_fail",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PynamoDB-master/pynamodb/transactions.py": {
        "Transaction.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "str",
                    "psycopg2.extensions.connection",
                    "tuple",
                    "bytes",
                    "List[Dict[str, Any]]",
                    "int",
                    "IO"
                ],
                "return_consumed_capacity": [
                    "str",
                    "Optional[Any]",
                    "Optional[Callable[[Dict], bool]]",
                    "dict",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "Transaction._commit": {
            "name": "_commit",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Transaction.__enter__": {
            "name": "__enter__",
            "location": 26,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transaction.__exit__": {
            "name": "__exit__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Type[Any]",
                    "Optional[type]",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "exc_val": [
                    "Type[Any]",
                    "Optional[type]",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "exc_tb": [
                    "Type[Any]",
                    "Optional[type]",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "TransactGet.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactGet.get": {
            "name": "get",
            "location": 43,
            "return": [
                "model.Model",
                "str",
                "GPy.models.GPRegression",
                "base.Model",
                "allennlp.models.model.Model"
            ],
            "arguments": {
                "self": [],
                "model_cls": [
                    "bytes",
                    "Optional[int]",
                    "django.db.models.QuerySet",
                    "Optional[List[str]]",
                    "str"
                ],
                "hash_key": [
                    "django.db.models.QuerySet",
                    "bytes",
                    "Optional[List[str]]"
                ],
                "range_key": [
                    "django.db.models.QuerySet",
                    "bytes",
                    "Optional[List[str]]"
                ]
            }
        },
        "TransactGet._update_futures": {
            "name": "_update_futures",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "futures": [
                    "list",
                    "str",
                    "Callable[[T], bool]",
                    "Callable[[int], bool]",
                    "int",
                    "Union[int, float]"
                ],
                "results": [
                    "list",
                    "str",
                    "Callable[[T], bool]",
                    "Callable[[int], bool]",
                    "int",
                    "Union[int, float]"
                ]
            }
        },
        "TransactGet._commit": {
            "name": "_commit",
            "location": 64,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransactWrite.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client_request_token": [
                    "Optional[dict]",
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "return_item_collection_metrics": [
                    "bool",
                    "zerver.models.UserProfile",
                    "str"
                ]
            }
        },
        "TransactWrite.condition_check": {
            "name": "condition_check",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model_cls": [
                    "Optional[int]",
                    "IO[bytes]",
                    "\"PMap[Tk, Tv]\"",
                    "str",
                    "core.models.Groups"
                ],
                "hash_key": [
                    "Optional[int]",
                    "IO[bytes]",
                    "\"PMap[Tk, Tv]\"",
                    "str",
                    "core.models.Groups"
                ],
                "range_key": [
                    "Optional[int]",
                    "IO[bytes]",
                    "\"PMap[Tk, Tv]\"",
                    "str",
                    "core.models.Groups"
                ],
                "condition": [
                    "dict",
                    "Optional[dict]",
                    "Optional[_KeyType]",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "TransactWrite.delete": {
            "name": "delete",
            "location": 103,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "Dict[str, Any]"
                ],
                "condition": [
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        },
        "TransactWrite.save": {
            "name": "save",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Optional[str]",
                    "django.db.models.Model",
                    "Dict[str, Any]"
                ],
                "condition": [
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "str"
                ],
                "return_values": [
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "TransactWrite.update": {
            "name": "update",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Optional[str]",
                    "Optional[planetsclub.users.models.UserModel]"
                ],
                "actions": [
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Optional[planetsclub.users.models.UserModel]"
                ],
                "condition": [
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Optional[planetsclub.users.models.UserModel]"
                ],
                "return_values": [
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Optional[planetsclub.users.models.UserModel]"
                ]
            }
        },
        "TransactWrite._commit": {
            "name": "_commit",
            "location": 124,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PynamoDB-master/pynamodb/types.py": {},
    "PynamoDB-master/pynamodb/util.py": {
        "attribute_value_to_json": {
            "name": "attribute_value_to_json",
            "location": 20,
            "return": [
                "int",
                "OrderedDict",
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "attribute_value": [
                    "int",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "json_to_attribute_value": {
            "name": "json_to_attribute_value",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "T",
                    "Union[type, Tuple[type, ...]]",
                    "Iterable",
                    "float"
                ]
            }
        }
    },
    "PynamoDB-master/pynamodb/__init__.py": {},
    "PynamoDB-master/pynamodb/connection/base.py": {
        "_convert_binary": {
            "name": "_convert_binary",
            "location": 1347,
            "return": [
                ""
            ],
            "arguments": {
                "attr": [
                    "str",
                    "bytes",
                    "routemaster_sdk.types.LabelRef"
                ]
            }
        },
        "MetaTable.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "bytes",
                    "Dict[str, str]",
                    "list",
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "MetaTable.__repr__": {
            "name": "__repr__",
            "location": 75,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Union[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaTable.range_keyname": {
            "name": "range_keyname",
            "location": 81,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "Optional[Iterable[str]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaTable.hash_keyname": {
            "name": "hash_keyname",
            "location": 92,
            "return": [
                "int",
                "Tuple[int, int]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaTable.get_key_names": {
            "name": "get_key_names",
            "location": 105,
            "return": [
                "str",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "index_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "MetaTable.has_index_name": {
            "name": "has_index_name",
            "location": 121,
            "return": [
                "Dict[str, Any]",
                "str",
                "type"
            ],
            "arguments": {
                "self": [],
                "index_name": [
                    "str"
                ]
            }
        },
        "MetaTable.get_index_hash_keyname": {
            "name": "get_index_hash_keyname",
            "location": 130,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "index_name": [
                    "str"
                ]
            }
        },
        "MetaTable.get_index_range_keyname": {
            "name": "get_index_range_keyname",
            "location": 148,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "index_name": [
                    "str"
                ]
            }
        },
        "MetaTable.get_item_attribute_map": {
            "name": "get_item_attribute_map",
            "location": 166,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "attributes": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "item_key": [
                    "str",
                    "dict",
                    "List[dict]"
                ],
                "pythonic_key": [
                    "bool",
                    "str",
                    "List[bytes]"
                ]
            }
        },
        "MetaTable.get_attribute_type": {
            "name": "get_attribute_type",
            "location": 186,
            "return": [
                "Type",
                "bool",
                "mypy.types.FunctionLike",
                "str"
            ],
            "arguments": {
                "self": [],
                "attribute_name": [
                    "str"
                ],
                "value": [
                    "Optional[Any]",
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "List[Dict[str, Any]]",
                    "Union[str, int]",
                    "apistar.types.ParamAnnotation"
                ]
            }
        },
        "MetaTable.get_identifier_map": {
            "name": "get_identifier_map",
            "location": 200,
            "return": [
                "dict",
                "apistar.types.WSGIEnviron",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "hash_key": [
                    "str",
                    "Dict[str, Any]",
                    "Iterable[str]",
                    "Dict[str, str]",
                    "Dict[Union[Any, Any], str]"
                ],
                "range_key": [
                    "Optional[str]",
                    "Optional[dict]",
                    "Union[str, int]",
                    "Optional[int]",
                    "str",
                    "Union[None, str, int]",
                    "types.ValueType"
                ],
                "key": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "dict",
                    "bool"
                ]
            }
        },
        "MetaTable.get_exclusive_start_key_map": {
            "name": "get_exclusive_start_key_map",
            "location": 217,
            "return": [
                "Optional[BaseException]",
                "int"
            ],
            "arguments": {
                "self": [],
                "exclusive_start_key": [
                    "str",
                    "dict"
                ]
            }
        },
        "Connection.__init__": {
            "name": "__init__",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "region": [
                    "int",
                    "float",
                    "bytes"
                ],
                "host": [
                    "Optional[List[Any]]",
                    "int",
                    "float",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "read_timeout_seconds": [
                    "Optional[float]",
                    "bool",
                    "int",
                    "str"
                ],
                "connect_timeout_seconds": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[utils.types.Vec3D]",
                    "int",
                    "str"
                ],
                "max_retry_attempts": [
                    "int",
                    "Optional[int]",
                    "Optional[float]"
                ],
                "base_backoff_ms": [
                    "int",
                    "bool",
                    "Iterable[Any]",
                    "Iterable[float]",
                    "List[bytes]",
                    "Exception"
                ],
                "max_pool_connections": [
                    "Optional[int]",
                    "Optional[float]",
                    "int"
                ],
                "extra_headers": [
                    "Optional[int]",
                    "int",
                    "Optional[Callable[[str], bool]]",
                    "bool",
                    "Optional[float]",
                    "float",
                    "Optional[List]"
                ]
            }
        },
        "Connection.__repr__": {
            "name": "__repr__",
            "location": 290,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection._sign_request": {
            "name": "_sign_request",
            "location": 293,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "Connection._create_prepared_request": {
            "name": "_create_prepared_request",
            "location": 300,
            "return": [
                "int",
                "List[str]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "params": [],
                "settings": [
                    "Optional[sqlalchemy.orm.session.Session]",
                    "Dict[int, dict]",
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "Connection.dispatch": {
            "name": "dispatch",
            "location": 314,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "operation_name": [
                    "str",
                    "types.ModuleType",
                    "Optional[str]",
                    "tuple",
                    "bool",
                    "int",
                    "List[str]"
                ],
                "operation_kwargs": [
                    "str",
                    "int",
                    "raiden.constants.EthClient"
                ],
                "settings": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "Connection.send_post_boto_callback": {
            "name": "send_post_boto_callback",
            "location": 339,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "operation_name": [
                    "str",
                    "bool",
                    "Union[Optional[str], Literal[Literal]]"
                ],
                "req_uuid": [
                    "str",
                    "bool",
                    "Union[Optional[str], Literal[Literal]]"
                ],
                "table_name": [
                    "str",
                    "bool",
                    "Union[Optional[str], Literal[Literal]]"
                ]
            }
        },
        "Connection.send_pre_boto_callback": {
            "name": "send_pre_boto_callback",
            "location": 345,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "operation_name": [
                    "str"
                ],
                "req_uuid": [
                    "str"
                ],
                "table_name": [
                    "str"
                ]
            }
        },
        "Connection._make_api_call": {
            "name": "_make_api_call",
            "location": 351,
            "return": [
                "str",
                "bytes",
                "float",
                "slice"
            ],
            "arguments": {
                "self": [],
                "operation_name": [
                    "str"
                ],
                "operation_kwargs": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "apistar.types.ParamName",
                    "T"
                ],
                "settings": [
                    "str",
                    "bool",
                    "apistar.types.ParamName",
                    "float"
                ]
            }
        },
        "Connection._handle_binary_attributes": {
            "name": "_handle_binary_attributes",
            "location": 472,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, List[str]]",
                    "List[Tuple]"
                ]
            }
        },
        "Connection.session": {
            "name": "session",
            "location": 512,
            "return": [
                "dict",
                "Exception",
                "str",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.client": {
            "name": "client",
            "location": 522,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Connection.get_meta_table": {
            "name": "get_meta_table",
            "location": 539,
            "return": [
                "Optional[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str",
                    "type"
                ],
                "refresh": [
                    "str"
                ]
            }
        },
        "Connection.create_table": {
            "name": "create_table",
            "location": 559,
            "return": [
                "dict",
                "str",
                "starfish.types.Axes",
                "Optional[float]",
                "int"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Any]"
                ],
                "attribute_definitions": [
                    "Optional[Any]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "key_schema": [
                    "Optional[Any]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[constants.AgeClass]",
                    "bool"
                ],
                "read_capacity_units": [
                    "str",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Any]"
                ],
                "write_capacity_units": [
                    "str",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Any]"
                ],
                "global_secondary_indexes": [
                    "Optional[Any]",
                    "Optional[float]",
                    "int",
                    "Callable",
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict[str, str]]",
                    "bytes"
                ],
                "local_secondary_indexes": [
                    "Optional[Any]",
                    "Optional[float]",
                    "int",
                    "Callable",
                    "Optional[Dict[str, Any]]",
                    "Optional[Dict[str, str]]",
                    "bytes"
                ],
                "stream_specification": [
                    "Optional[Dict]",
                    "bool",
                    "dict",
                    "Optional[Any]",
                    "str",
                    "Dict[str, Any]"
                ],
                "billing_mode": [
                    "str",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Any]"
                ],
                "tags": [
                    "str",
                    "Dict[Hashable, Any]"
                ]
            }
        },
        "Connection.update_time_to_live": {
            "name": "update_time_to_live",
            "location": 654,
            "return": [
                "Dict[str, str]",
                "int",
                "Exception",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str",
                    "Optional[str]",
                    "Optional[Union[str, int]]",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "ttl_attribute_name": [
                    "str",
                    "Optional[str]",
                    "Optional[Union[str, int]]",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "Connection.delete_table": {
            "name": "delete_table",
            "location": 670,
            "return": [
                "Dict[str, List[int]]",
                "starfish.types.Axes",
                "Callable",
                "dict",
                "Union[Dict, List]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Connection.update_table": {
            "name": "update_table",
            "location": 683,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str",
                    "Optional[str]",
                    "list",
                    "Optional[Dict[str, Any]]"
                ],
                "read_capacity_units": [
                    "Optional[int]",
                    "str",
                    "bool"
                ],
                "write_capacity_units": [
                    "Optional[int]",
                    "str",
                    "bool"
                ],
                "global_secondary_index_updates": [
                    "Optional[Any]",
                    "List[Tuple[str, Any]]",
                    "str",
                    "bool",
                    "Iterable",
                    "List[List[str]]"
                ]
            }
        },
        "Connection.list_tables": {
            "name": "list_tables",
            "location": 721,
            "return": [
                "Optional[str]",
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "exclusive_start_table_name": [
                    "Optional[str]",
                    "str",
                    "Optional[int]"
                ],
                "limit": [
                    "Optional[int]",
                    "Optional[str]",
                    "Type",
                    "Optional[Match]",
                    "dict",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "Connection.describe_table": {
            "name": "describe_table",
            "location": 743,
            "return": [
                "bytes",
                "str",
                "starfish.types.Axes",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str"
                ]
            }
        },
        "Connection.get_item_attribute_map": {
            "name": "get_item_attribute_map",
            "location": 755,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str",
                    "Dict[str, str]"
                ],
                "attributes": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "Optional[bool]",
                    "Optional[Any]",
                    "Optional[str]"
                ],
                "item_key": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "Optional[bool]",
                    "Optional[Any]",
                    "Optional[str]"
                ],
                "pythonic_key": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "Optional[bool]",
                    "Optional[Any]",
                    "Optional[str]"
                ]
            }
        },
        "Connection.parse_attribute": {
            "name": "parse_attribute",
            "location": 773,
            "return": [
                "str",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "attribute": [
                    "dict",
                    "int",
                    "Dict[str, Any]",
                    "str",
                    "type",
                    "Mapping"
                ],
                "return_type": [
                    "bool",
                    "str",
                    "list"
                ]
            }
        },
        "Connection.get_attribute_type": {
            "name": "get_attribute_type",
            "location": 795,
            "return": [
                "str",
                "Optional[str]",
                "types.ModuleType"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str"
                ],
                "attribute_name": [
                    "str",
                    "Optional[Any]",
                    "Dict[str, Any]"
                ],
                "value": [
                    "str",
                    "Optional[Any]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Connection.get_identifier_map": {
            "name": "get_identifier_map",
            "location": 810,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str"
                ],
                "hash_key": [
                    "str",
                    "Optional[str]"
                ],
                "range_key": [
                    "str",
                    "Optional[str]"
                ],
                "key": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Connection.get_consumed_capacity_map": {
            "name": "get_consumed_capacity_map",
            "location": 825,
            "return": [
                "str",
                "mypy.types.Type",
                "Iterable[str]",
                "bool",
                "Optional[Iterable[str]]",
                "set"
            ],
            "arguments": {
                "self": [],
                "return_consumed_capacity": [
                    "str",
                    "skeema.types.KeyValueDef",
                    "Optional[str]"
                ]
            }
        },
        "Connection.get_return_values_map": {
            "name": "get_return_values_map",
            "location": 835,
            "return": [
                "dict",
                "Iterable[Any]",
                "recidiviz.persistence.database.session.Session"
            ],
            "arguments": {
                "self": [],
                "return_values": [
                    "str",
                    "List[Tuple[str, int]]",
                    "Dict[str, object]"
                ]
            }
        },
        "Connection.get_return_values_on_condition_failure_map": {
            "name": "get_return_values_on_condition_failure_map",
            "location": 845,
            "return": [
                "Dict[str, int]",
                "Generator",
                "pathlib.Path",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "return_values_on_condition_failure": [
                    "str",
                    "Tuple[str, str]"
                ]
            }
        },
        "Connection.get_item_collection_map": {
            "name": "get_item_collection_map",
            "location": 861,
            "return": [
                "str",
                "Type"
            ],
            "arguments": {
                "self": [],
                "return_item_collection_metrics": [
                    "str",
                    "bool",
                    "dict",
                    "Mapping[int, str]"
                ]
            }
        },
        "Connection.get_exclusive_start_key_map": {
            "name": "get_exclusive_start_key_map",
            "location": 871,
            "return": [
                "list",
                "str",
                "int",
                "List[Dict]"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str"
                ],
                "exclusive_start_key": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Connection.get_operation_kwargs": {
            "name": "get_operation_kwargs",
            "location": 880,
            "return": [
                "dict",
                "int",
                "apistar.types.WSGIEnviron",
                "Callable",
                "Dict[str, Any]",
                "Union[int, float, complex]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str",
                    "int",
                    "Dict[str, str]"
                ],
                "hash_key": [
                    "str",
                    "bool",
                    "Optional[Dict[str, str]]",
                    "Union[Mapping[str, Any], str, None]"
                ],
                "range_key": [
                    "str",
                    "bool",
                    "Optional[Dict[str, str]]",
                    "Union[Mapping[str, Any], str, None]"
                ],
                "key": [
                    "str",
                    "bool",
                    "Optional[Dict[str, str]]",
                    "Union[Mapping[str, Any], str, None]"
                ],
                "attributes": [
                    "dict",
                    "bool",
                    "Dict[str, Any]",
                    "str",
                    "Dict[int, Dict[str, str]]"
                ],
                "attributes_to_get": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "Dict[str, str]",
                    "List[str]",
                    "Optional[Tuple]"
                ],
                "actions": [
                    "Callable",
                    "dict",
                    "List[str]",
                    "Optional[Sequence[pynamodb.expressions.update.Action]]",
                    "Union[str, Pattern]",
                    "str",
                    "Optional[Sequence[Any]]",
                    "Optional[Sequence[str]]"
                ],
                "condition": [
                    "str",
                    "Optional[str]",
                    "int",
                    "FrozenSet[int]",
                    "List[str]"
                ],
                "consistent_read": [
                    "Optional[bool]",
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[float]",
                    "Optional[Union[str, \"PostalAddress\"]]",
                    "bool"
                ],
                "return_values": [
                    "Optional[str]",
                    "dict",
                    "Optional[Match]",
                    "Optional[Sequence[pynamodb.expressions.update.Action]]",
                    "Optional[Dict[str, Any]]"
                ],
                "return_consumed_capacity": [
                    "Optional[str]",
                    "int",
                    "bool",
                    "Optional[float]"
                ],
                "return_item_collection_metrics": [
                    "Optional[str]",
                    "Dict[str, Any]",
                    "dict",
                    "Union[str, None]",
                    "Optional[Sequence[pynamodb.expressions.update.Action]]",
                    "bool"
                ],
                "return_values_on_condition_failure": [
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Optional[Sequence[pynamodb.expressions.update.Action]]",
                    "dict",
                    "Callable[[str], None]"
                ]
            }
        },
        "Connection.delete_item": {
            "name": "delete_item",
            "location": 935,
            "return": [
                "bool",
                "Optional[Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str",
                    "Optional[str]",
                    "Exception"
                ],
                "hash_key": [
                    "str",
                    "Optional[str]",
                    "Exception"
                ],
                "range_key": [
                    "str",
                    "Optional[str]",
                    "Exception"
                ],
                "condition": [
                    "str",
                    "Optional[str]",
                    "Exception"
                ],
                "return_values": [
                    "str",
                    "Optional[str]",
                    "Exception"
                ],
                "return_consumed_capacity": [
                    "str",
                    "Optional[str]",
                    "Exception"
                ],
                "return_item_collection_metrics": [
                    "str",
                    "Optional[str]",
                    "Exception"
                ],
                "settings": [
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "Connection.update_item": {
            "name": "update_item",
            "location": 963,
            "return": [
                "Union[str, IO]",
                "str",
                "IO[str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "Optional[str]",
                    "str",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Optional[Any]",
                    "Optional[Sequence[pynamodb.expressions.update.Action]]"
                ],
                "hash_key": [
                    "Optional[str]",
                    "str",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Optional[Any]",
                    "Optional[Sequence[pynamodb.expressions.update.Action]]"
                ],
                "range_key": [
                    "Optional[str]",
                    "str",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Optional[Any]",
                    "Optional[Sequence[pynamodb.expressions.update.Action]]"
                ],
                "actions": [
                    "Optional[str]",
                    "str",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Optional[Any]",
                    "Optional[Sequence[pynamodb.expressions.update.Action]]"
                ],
                "condition": [
                    "Optional[str]",
                    "str",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Optional[Any]",
                    "Optional[Sequence[pynamodb.expressions.update.Action]]"
                ],
                "return_consumed_capacity": [
                    "Optional[str]",
                    "str",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Optional[Any]",
                    "Optional[Sequence[pynamodb.expressions.update.Action]]"
                ],
                "return_item_collection_metrics": [
                    "Optional[str]",
                    "str",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Optional[Any]",
                    "Optional[Sequence[pynamodb.expressions.update.Action]]"
                ],
                "return_values": [
                    "Optional[str]",
                    "str",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Optional[Any]",
                    "Optional[Sequence[pynamodb.expressions.update.Action]]"
                ],
                "settings": [
                    "List[str]",
                    "str",
                    "Dict[Tuple[str, str], Exception]",
                    "int",
                    "bool"
                ]
            }
        },
        "Connection.put_item": {
            "name": "put_item",
            "location": 996,
            "return": [
                "bool",
                "dict",
                "raiden.constants.Environment"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "Optional[str]",
                    "str",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Optional[Any]"
                ],
                "hash_key": [
                    "Optional[str]",
                    "str",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Optional[Any]"
                ],
                "range_key": [
                    "Optional[str]",
                    "str",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Optional[Any]"
                ],
                "attributes": [
                    "Optional[str]",
                    "str",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Optional[Any]"
                ],
                "condition": [
                    "Optional[str]",
                    "str",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Optional[Any]"
                ],
                "return_values": [
                    "Optional[str]",
                    "str",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Optional[Any]"
                ],
                "return_consumed_capacity": [
                    "Optional[str]",
                    "str",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Optional[Any]"
                ],
                "return_item_collection_metrics": [
                    "Optional[str]",
                    "str",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Optional[Any]"
                ],
                "settings": [
                    "bool",
                    "str"
                ]
            }
        },
        "Connection._get_transact_operation_kwargs": {
            "name": "_get_transact_operation_kwargs",
            "location": 1027,
            "return": [
                "dict",
                "int",
                "apistar.types.WSGIEnviron",
                "Callable",
                "Dict[str, Any]",
                "Union[int, float, complex]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "client_request_token": [
                    "Optional[str]"
                ],
                "return_consumed_capacity": [
                    "Optional[str]",
                    "bool",
                    "IO"
                ],
                "return_item_collection_metrics": [
                    "Optional[str]",
                    "bool",
                    "Dict[str, Optional[str]]"
                ]
            }
        },
        "Connection.transact_write_items": {
            "name": "transact_write_items",
            "location": 1043,
            "return": [
                "Iterable[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "condition_check_items": [
                    "Sequence[Dict]",
                    "list",
                    "threading.Event",
                    "str",
                    "Optional[Iterable[str]]",
                    "bool"
                ],
                "delete_items": [
                    "Sequence[Dict]",
                    "List[str]",
                    "Dict[str, int]"
                ],
                "put_items": [
                    "Sequence[Dict]",
                    "List[str]",
                    "Dict[str, int]"
                ],
                "update_items": [
                    "Sequence[Dict]",
                    "List[str]",
                    "mypy.types.Instance",
                    "list",
                    "Dict[str, int]"
                ],
                "client_request_token": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "return_consumed_capacity": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "return_item_collection_metrics": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "settings": [
                    "int",
                    "bool",
                    "str",
                    "List[str]",
                    "Optional[Callable[[Any], None]]"
                ]
            }
        },
        "Connection.transact_get_items": {
            "name": "transact_get_items",
            "location": 1083,
            "return": [
                "Dict[str, Any]",
                "types.ModuleType"
            ],
            "arguments": {
                "self": [],
                "get_items": [
                    "Sequence[Dict]"
                ],
                "return_consumed_capacity": [
                    "dict",
                    "str",
                    "int"
                ],
                "settings": [
                    "List[dict]",
                    "recidiviz.persistence.database.session.Session",
                    "List[Dict[str, Any]]",
                    "Dict[str, Dict]",
                    "Optional[Any]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Connection.batch_write_item": {
            "name": "batch_write_item",
            "location": 1102,
            "return": [
                "Iterable[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str",
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[List[Any]]"
                ],
                "put_items": [
                    "Optional[Any]",
                    "Optional[str]",
                    "bool",
                    "Optional[int]",
                    "Callable"
                ],
                "delete_items": [
                    "Optional[Any]",
                    "Optional[str]",
                    "bool",
                    "Optional[int]",
                    "Callable"
                ],
                "return_consumed_capacity": [
                    "Optional[str]",
                    "Dict[str, str]",
                    "Optional[int]",
                    "Optional[Sequence[str]]"
                ],
                "return_item_collection_metrics": [
                    "Optional[str]",
                    "bool",
                    "Dict[str, str]",
                    "Optional[bool]",
                    "Optional[Dict[str, str]]",
                    "Dict[str, Optional[str]]",
                    "Callable[[str], None]",
                    "Optional[Dict[str, Any]]"
                ],
                "settings": [
                    "Optional[str]",
                    "bool",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "Connection.batch_get_item": {
            "name": "batch_get_item",
            "location": 1143,
            "return": [
                "Dict[str, Any]",
                "types.ModuleType"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]"
                ],
                "keys": [
                    "Sequence[str]",
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "consistent_read": [
                    "Optional[bool]",
                    "str",
                    "Optional[str]",
                    "Dict[str, Tuple[str, str, Any]]",
                    "Union[int, float]",
                    "int",
                    "bool"
                ],
                "return_consumed_capacity": [
                    "Optional[str]",
                    "Optional[bool]",
                    "Callable[[], int]"
                ],
                "attributes_to_get": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "bool",
                    "Callable[[], str]",
                    "Callable"
                ],
                "settings": [
                    "str",
                    "Optional[List[docker.types.Mount]]",
                    "bool",
                    "Optional[str]",
                    "Optional[\"RoundingMode\"]"
                ]
            }
        },
        "Connection.get_item": {
            "name": "get_item",
            "location": 1185,
            "return": [
                "bool",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "Optional[str]",
                    "str",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Optional[Any]",
                    "Optional[Sequence[pynamodb.expressions.update.Action]]"
                ],
                "hash_key": [
                    "Optional[str]",
                    "str",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Optional[Any]",
                    "Optional[Sequence[pynamodb.expressions.update.Action]]"
                ],
                "range_key": [
                    "Optional[str]",
                    "str",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Optional[Any]",
                    "Optional[Sequence[pynamodb.expressions.update.Action]]"
                ],
                "consistent_read": [
                    "Optional[str]",
                    "str",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Optional[Any]",
                    "Optional[Sequence[pynamodb.expressions.update.Action]]"
                ],
                "attributes_to_get": [
                    "Optional[str]",
                    "str",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "Optional[Any]",
                    "Optional[Sequence[pynamodb.expressions.update.Action]]"
                ],
                "settings": [
                    "str",
                    "bool",
                    "int",
                    "List[str]"
                ]
            }
        },
        "Connection.scan": {
            "name": "scan",
            "location": 1209,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str",
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[list]"
                ],
                "filter_condition": [
                    "str",
                    "opentrons.types.Location",
                    "bool"
                ],
                "attributes_to_get": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Callable",
                    "Dict[str, str]",
                    "list"
                ],
                "limit": [
                    "Optional[int]",
                    "Optional[str]",
                    "Callable",
                    "bool"
                ],
                "return_consumed_capacity": [
                    "bool",
                    "Optional[str]",
                    "str"
                ],
                "exclusive_start_key": [
                    "str"
                ],
                "segment": [
                    "Optional[int]",
                    "Optional[str]",
                    "Callable",
                    "bool"
                ],
                "total_segments": [
                    "Optional[int]",
                    "Optional[str]",
                    "bool",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "consistent_read": [
                    "Optional[bool]",
                    "str",
                    "Optional[str]",
                    "Dict[str, Tuple[str, str, Any]]"
                ],
                "index_name": [
                    "Optional[str]",
                    "str",
                    "Optional[Iterable[str]]",
                    "Callable[[Any], str]",
                    "Sequence[Any]"
                ],
                "settings": [
                    "Optional[int]",
                    "Optional[str]",
                    "bool",
                    "List[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "Connection.query": {
            "name": "query",
            "location": 1262,
            "return": [
                "Dict[str, bool]",
                "Dict[str, Any]",
                "int",
                "str",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str",
                    "bool",
                    "int",
                    "Callable"
                ],
                "hash_key": [
                    "str",
                    "Dict[str, str]",
                    "Optional[int]",
                    "Callable[[str], str]"
                ],
                "range_key_condition": [
                    "Optional[Any]",
                    "str",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "Optional[str]",
                    "Optional[pynamodb.expressions.condition.Condition]"
                ],
                "filter_condition": [
                    "str",
                    "bool"
                ],
                "attributes_to_get": [
                    "str",
                    "Union[List[str], List[Any]]",
                    "bool",
                    "Sequence[str]"
                ],
                "consistent_read": [
                    "bool",
                    "str",
                    "Optional[Any]",
                    "Optional[str]",
                    "Optional[list]",
                    "Optional[bool]"
                ],
                "exclusive_start_key": [
                    "str",
                    "Optional[Any]"
                ],
                "index_name": [
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "limit": [
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[bool]",
                    "bool"
                ],
                "return_consumed_capacity": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "Iterable[Sequence[str]]",
                    "Union[str, None]"
                ],
                "scan_index_forward": [
                    "Optional[bool]",
                    "Optional[str]",
                    "Optional[int]",
                    "bool",
                    "Callable"
                ],
                "select": [
                    "Optional[str]",
                    "dict",
                    "str",
                    "uuid.UUID",
                    "int"
                ],
                "settings": [
                    "Optional[str]",
                    "str",
                    "Optional[bool]",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "Connection._check_condition": {
            "name": "_check_condition",
            "location": 1337,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "condition": [
                    "Optional[bool]",
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Connection._reverse_dict": {
            "name": "_reverse_dict",
            "location": 1343,
            "return": [
                "dict",
                "Dict[str, Dict]"
            ],
            "arguments": {
                "d": [
                    "dict",
                    "MutableMapping"
                ]
            }
        }
    },
    "PynamoDB-master/pynamodb/connection/table.py": {
        "TableConnection.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table_name": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "region": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[Mapping[str, str]]",
                    "bool"
                ],
                "host": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[Mapping[str, str]]",
                    "bool"
                ],
                "connect_timeout_seconds": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[Mapping[str, str]]",
                    "bool"
                ],
                "read_timeout_seconds": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[Mapping[str, str]]",
                    "bool"
                ],
                "max_retry_attempts": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[Mapping[str, str]]",
                    "bool"
                ],
                "base_backoff_ms": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[Mapping[str, str]]",
                    "bool"
                ],
                "max_pool_connections": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[Mapping[str, str]]",
                    "bool"
                ],
                "extra_headers": [
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[Mapping[str, str]]",
                    "bool"
                ],
                "aws_access_key_id": [
                    "Optional[str]",
                    "str",
                    "Callable",
                    "bytes",
                    "Optional[pynamodb.expressions.condition.Condition]"
                ],
                "aws_secret_access_key": [
                    "Optional[str]",
                    "str",
                    "Callable",
                    "bytes",
                    "Optional[pynamodb.expressions.condition.Condition]"
                ],
                "aws_session_token": [
                    "Optional[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "TableConnection.get_meta_table": {
            "name": "get_meta_table",
            "location": 49,
            "return": [
                "Optional[str]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "refresh": [
                    "str",
                    "int",
                    "bytes",
                    "type",
                    "bool"
                ]
            }
        },
        "TableConnection.get_operation_kwargs": {
            "name": "get_operation_kwargs",
            "location": 55,
            "return": [
                "Optional[str]",
                "str",
                "List[str]",
                "cmk.base.check_utils.Service",
                "dict"
            ],
            "arguments": {
                "self": [],
                "hash_key": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "range_key": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "key": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "attributes": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "attributes_to_get": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "actions": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "condition": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "consistent_read": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "return_values": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "return_consumed_capacity": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "return_item_collection_metrics": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "return_values_on_condition_failure": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "Optional[bool]"
                ]
            }
        },
        "TableConnection.delete_item": {
            "name": "delete_item",
            "location": 86,
            "return": [
                "Optional[str]",
                "Type",
                "bool"
            ],
            "arguments": {
                "self": [],
                "hash_key": [
                    "str",
                    "IO"
                ],
                "range_key": [
                    "str",
                    "IO"
                ],
                "condition": [
                    "str",
                    "IO"
                ],
                "return_values": [
                    "str",
                    "IO"
                ],
                "return_consumed_capacity": [
                    "str",
                    "IO"
                ],
                "return_item_collection_metrics": [
                    "str",
                    "IO"
                ],
                "settings": [
                    "str",
                    "IO"
                ]
            }
        },
        "TableConnection.update_item": {
            "name": "update_item",
            "location": 110,
            "return": [
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "hash_key": [
                    "Optional[Any]",
                    "Union[str, int]",
                    "str",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "Optional[str]",
                    "Optional[pynamodb.expressions.condition.Condition]"
                ],
                "range_key": [
                    "Optional[Any]",
                    "Union[str, int]",
                    "str",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "Optional[str]",
                    "Optional[pynamodb.expressions.condition.Condition]"
                ],
                "actions": [
                    "Optional[Any]",
                    "Union[str, int]",
                    "str",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "Optional[str]",
                    "Optional[pynamodb.expressions.condition.Condition]"
                ],
                "condition": [
                    "Optional[Any]",
                    "Union[str, int]",
                    "str",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "Optional[str]",
                    "Optional[pynamodb.expressions.condition.Condition]"
                ],
                "return_consumed_capacity": [
                    "Optional[Any]",
                    "Union[str, int]",
                    "str",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "Optional[str]",
                    "Optional[pynamodb.expressions.condition.Condition]"
                ],
                "return_item_collection_metrics": [
                    "Optional[Any]",
                    "Union[str, int]",
                    "str",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "Optional[str]",
                    "Optional[pynamodb.expressions.condition.Condition]"
                ],
                "return_values": [
                    "Optional[Any]",
                    "Union[str, int]",
                    "str",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "Optional[str]",
                    "Optional[pynamodb.expressions.condition.Condition]"
                ],
                "settings": [
                    "Optional[Any]",
                    "Union[str, int]",
                    "str",
                    "Optional[List[str]]",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "Optional[str]",
                    "Optional[pynamodb.expressions.condition.Condition]"
                ]
            }
        },
        "TableConnection.put_item": {
            "name": "put_item",
            "location": 136,
            "return": [
                "Type",
                "Optional[pynamodb.expressions.condition.Condition]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "hash_key": [
                    "str",
                    "Dict[str, bytes]",
                    "bool"
                ],
                "range_key": [
                    "str",
                    "Dict[str, bytes]",
                    "bool"
                ],
                "attributes": [
                    "str",
                    "Dict[str, bytes]",
                    "bool"
                ],
                "condition": [
                    "str",
                    "Dict[str, bytes]",
                    "bool"
                ],
                "return_values": [
                    "str",
                    "Dict[str, bytes]",
                    "bool"
                ],
                "return_consumed_capacity": [
                    "str",
                    "Dict[str, bytes]",
                    "bool"
                ],
                "return_item_collection_metrics": [
                    "str",
                    "Dict[str, bytes]",
                    "bool"
                ],
                "settings": [
                    "str",
                    "Dict[str, bytes]",
                    "bool"
                ]
            }
        },
        "TableConnection.batch_write_item": {
            "name": "batch_write_item",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "put_items": [
                    "bool",
                    "Optional[List[int]]",
                    "Set[str]",
                    "Dict[str, Dict[str, Any]]",
                    "dict"
                ],
                "delete_items": [
                    "bool",
                    "Optional[List[int]]",
                    "Set[str]",
                    "Dict[str, Dict[str, Any]]",
                    "dict"
                ],
                "return_consumed_capacity": [
                    "bool",
                    "Optional[List[int]]",
                    "Set[str]",
                    "Dict[str, Dict[str, Any]]",
                    "dict"
                ],
                "return_item_collection_metrics": [
                    "bool",
                    "Optional[List[int]]",
                    "Set[str]",
                    "Dict[str, Dict[str, Any]]",
                    "dict"
                ],
                "settings": [
                    "bool",
                    "Optional[List[int]]",
                    "Set[str]",
                    "Dict[str, Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "TableConnection.batch_get_item": {
            "name": "batch_get_item",
            "location": 182,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]",
                "Optional[pynamodb.expressions.condition.Condition]"
            ],
            "arguments": {
                "self": [],
                "keys": [
                    "str",
                    "Optional[str]",
                    "Union[int, float]"
                ],
                "consistent_read": [
                    "str",
                    "Optional[str]",
                    "Union[int, float]"
                ],
                "return_consumed_capacity": [
                    "str",
                    "Optional[str]",
                    "Union[int, float]"
                ],
                "attributes_to_get": [
                    "str",
                    "Optional[str]",
                    "Union[int, float]"
                ],
                "settings": [
                    "str",
                    "Optional[str]",
                    "Union[int, float]"
                ]
            }
        },
        "TableConnection.get_item": {
            "name": "get_item",
            "location": 202,
            "return": [
                "bool",
                "Type",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "hash_key": [
                    "Optional[str]",
                    "Optional[Any]",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "str"
                ],
                "range_key": [
                    "Optional[str]",
                    "Optional[Any]",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "str"
                ],
                "consistent_read": [
                    "Optional[str]",
                    "Optional[Any]",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "str"
                ],
                "attributes_to_get": [
                    "Optional[str]",
                    "Optional[Any]",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "str"
                ],
                "settings": [
                    "Optional[str]",
                    "Optional[Any]",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "Optional[pynamodb.expressions.condition.Condition]",
                    "str"
                ]
            }
        },
        "TableConnection.scan": {
            "name": "scan",
            "location": 222,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "filter_condition": [
                    "str",
                    "bool",
                    "dict",
                    "Optional[Sequence[Any]]"
                ],
                "attributes_to_get": [
                    "str",
                    "bool",
                    "dict",
                    "Optional[Sequence[Any]]"
                ],
                "limit": [
                    "str",
                    "bool",
                    "dict",
                    "Optional[Sequence[Any]]"
                ],
                "return_consumed_capacity": [
                    "str",
                    "bool",
                    "dict",
                    "Optional[Sequence[Any]]"
                ],
                "segment": [
                    "str",
                    "bool",
                    "dict",
                    "Optional[Sequence[Any]]"
                ],
                "total_segments": [
                    "str",
                    "bool",
                    "dict",
                    "Optional[Sequence[Any]]"
                ],
                "exclusive_start_key": [
                    "str",
                    "bool",
                    "dict",
                    "Optional[Sequence[Any]]"
                ],
                "consistent_read": [
                    "str",
                    "bool",
                    "dict",
                    "Optional[Sequence[Any]]"
                ],
                "index_name": [
                    "str",
                    "bool",
                    "dict",
                    "Optional[Sequence[Any]]"
                ],
                "settings": [
                    "str",
                    "bool",
                    "dict",
                    "Optional[Sequence[Any]]"
                ]
            }
        },
        "TableConnection.query": {
            "name": "query",
            "location": 252,
            "return": [
                "bool",
                "Dict[str, Tuple[Any, Any]]",
                "Mapping[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "hash_key": [
                    "str",
                    "Optional[Any]",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "Optional[pynamodb.expressions.condition.Condition]"
                ],
                "range_key_condition": [
                    "str",
                    "Optional[Any]",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "Optional[pynamodb.expressions.condition.Condition]"
                ],
                "filter_condition": [
                    "str",
                    "Optional[Any]",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "Optional[pynamodb.expressions.condition.Condition]"
                ],
                "attributes_to_get": [
                    "str",
                    "Optional[Any]",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "Optional[pynamodb.expressions.condition.Condition]"
                ],
                "consistent_read": [
                    "str",
                    "Optional[Any]",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "Optional[pynamodb.expressions.condition.Condition]"
                ],
                "exclusive_start_key": [
                    "str",
                    "Optional[Any]",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "Optional[pynamodb.expressions.condition.Condition]"
                ],
                "index_name": [
                    "str",
                    "Optional[Any]",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "Optional[pynamodb.expressions.condition.Condition]"
                ],
                "limit": [
                    "str",
                    "Optional[Any]",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "Optional[pynamodb.expressions.condition.Condition]"
                ],
                "return_consumed_capacity": [
                    "str",
                    "Optional[Any]",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "Optional[pynamodb.expressions.condition.Condition]"
                ],
                "scan_index_forward": [
                    "str",
                    "Optional[Any]",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "Optional[pynamodb.expressions.condition.Condition]"
                ],
                "select": [
                    "str",
                    "Optional[Any]",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "Optional[pynamodb.expressions.condition.Condition]"
                ],
                "settings": [
                    "str",
                    "Optional[Any]",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "Optional[pynamodb.expressions.condition.Condition]"
                ]
            }
        },
        "TableConnection.describe_table": {
            "name": "describe_table",
            "location": 286,
            "return": [
                "List[str]",
                "type",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableConnection.delete_table": {
            "name": "delete_table",
            "location": 292,
            "return": [
                "List[str]",
                "type",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "TableConnection.update_time_to_live": {
            "name": "update_time_to_live",
            "location": 298,
            "return": [
                "Iterable['Notification']",
                "bool"
            ],
            "arguments": {
                "self": [],
                "ttl_attr_name": [
                    "str"
                ]
            }
        },
        "TableConnection.update_table": {
            "name": "update_table",
            "location": 304,
            "return": [
                "actions.Action"
            ],
            "arguments": {
                "self": [],
                "read_capacity_units": [
                    "bool",
                    "int",
                    "List[List[int]]",
                    "str",
                    "bytes"
                ],
                "write_capacity_units": [
                    "bool",
                    "int",
                    "List[List[int]]",
                    "str",
                    "bytes"
                ],
                "global_secondary_index_updates": [
                    "bool",
                    "int",
                    "List[List[int]]",
                    "str",
                    "bytes"
                ]
            }
        },
        "TableConnection.create_table": {
            "name": "create_table",
            "location": 319,
            "return": [
                "Type",
                "type",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "attribute_definitions": [
                    "str",
                    "Optional[dict]"
                ],
                "key_schema": [
                    "str",
                    "Optional[dict]"
                ],
                "read_capacity_units": [
                    "str",
                    "Optional[dict]"
                ],
                "write_capacity_units": [
                    "str",
                    "Optional[dict]"
                ],
                "global_secondary_indexes": [
                    "str",
                    "Optional[dict]"
                ],
                "local_secondary_indexes": [
                    "str",
                    "Optional[dict]"
                ],
                "stream_specification": [
                    "str",
                    "Optional[dict]"
                ],
                "billing_mode": [
                    "str",
                    "Optional[dict]"
                ],
                "tags": [
                    "str",
                    "Optional[dict]"
                ]
            }
        }
    },
    "PynamoDB-master/pynamodb/connection/__init__.py": {},
    "PynamoDB-master/pynamodb/expressions/condition.py": {
        "size": {
            "name": "size",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Condition.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "operator": [
                    "List[Tuple[int, float]]",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "Condition.serialize": {
            "name": "serialize",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "placeholder_names": [
                    "str",
                    "bool",
                    "Callable",
                    "Dict[str, float]",
                    "Optional[Any]",
                    "int",
                    "bytes"
                ],
                "expression_attribute_values": [
                    "str",
                    "bool",
                    "Callable",
                    "Dict[str, float]",
                    "Optional[Any]",
                    "int",
                    "bytes"
                ]
            }
        },
        "Condition.__and__": {
            "name": "__and__",
            "location": 21,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Type"
                ]
            }
        },
        "Condition.__rand__": {
            "name": "__rand__",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "dict"
                ]
            }
        },
        "Condition.__or__": {
            "name": "__or__",
            "location": 34,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Type"
                ]
            }
        },
        "Condition.__invert__": {
            "name": "__invert__",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Condition.__repr__": {
            "name": "__repr__",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Condition.__bool__": {
            "name": "__bool__",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Comparison.__init__": {
            "name": "__init__",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "operator": [
                    "str"
                ],
                "lhs": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "rhs": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Between.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "bool",
                    "str",
                    "Type['Model']",
                    "Optional['Directory']"
                ],
                "lower": [
                    "bool",
                    "str",
                    "Type['Model']",
                    "Optional['Directory']"
                ],
                "upper": [
                    "bool",
                    "str",
                    "Type['Model']",
                    "Optional['Directory']"
                ]
            }
        },
        "In.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "Exists.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "NotExists.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "IsType.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Callable[[str], str]"
                ],
                "attr_type": [
                    "str",
                    "Callable[[str], str]"
                ]
            }
        },
        "BeginsWith.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "prefix": [
                    "str"
                ]
            }
        },
        "Contains.__init__": {
            "name": "__init__",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "operand": [
                    "str"
                ]
            }
        },
        "And.__init__": {
            "name": "__init__",
            "location": 113,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "condition1": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "condition2": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Or.__init__": {
            "name": "__init__",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "condition1": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "condition2": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Not.__init__": {
            "name": "__init__",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "condition": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        }
    },
    "PynamoDB-master/pynamodb/expressions/operand.py": {
        "_Operand.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Operand.__repr__": {
            "name": "__repr__",
            "location": 29,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "_Operand.serialize": {
            "name": "serialize",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "placeholder_names": [
                    "str",
                    "bool",
                    "Optional[Any]",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "expression_attribute_values": [
                    "str",
                    "bool",
                    "Optional[Any]",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "_Operand._serialize_value": {
            "name": "_serialize_value",
            "location": 36,
            "return": [
                "Type",
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Optional[str]",
                    "Iterable[str]",
                    "Union[str, int]"
                ],
                "placeholder_names": [
                    "str",
                    "Optional[str]",
                    "Iterable[str]",
                    "Union[str, int]"
                ],
                "expression_attribute_values": [
                    "str",
                    "Optional[str]",
                    "Iterable[str]",
                    "Union[str, int]"
                ]
            }
        },
        "_Operand._to_operand": {
            "name": "_to_operand",
            "location": 39,
            "return": [
                "Optional[int]",
                "str",
                "Optional[Tuple[str]]",
                "Optional[str]",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "str",
                    "Collection[str]",
                    "bool",
                    "float"
                ]
            }
        },
        "_Operand._to_value": {
            "name": "_to_value",
            "location": 47,
            "return": [
                "str",
                "bool",
                "int",
                "float",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "list",
                    "Dict[str, Any]",
                    "Set[str]"
                ]
            }
        },
        "_Operand._type_check": {
            "name": "_type_check",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "_ConditionOperand.__eq__": {
            "name": "__eq__",
            "location": 60,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Collection"
                ]
            }
        },
        "_ConditionOperand.__ne__": {
            "name": "__ne__",
            "location": 63,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Collection"
                ]
            }
        },
        "_ConditionOperand.__lt__": {
            "name": "__lt__",
            "location": 66,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Collection"
                ]
            }
        },
        "_ConditionOperand.__le__": {
            "name": "__le__",
            "location": 69,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Collection"
                ]
            }
        },
        "_ConditionOperand.__gt__": {
            "name": "__gt__",
            "location": 72,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Collection"
                ]
            }
        },
        "_ConditionOperand.__ge__": {
            "name": "__ge__",
            "location": 75,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Collection"
                ]
            }
        },
        "_ConditionOperand.between": {
            "name": "between",
            "location": 78,
            "return": [
                "Iterable[str]",
                "dict",
                "Dict[str, Any]",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "lower": [
                    "bytes",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "Iterable[bytes]",
                    "Union[bytes, bytearray, memoryview]"
                ],
                "upper": [
                    "bytes",
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "Iterable[bytes]",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        },
        "_ConditionOperand.is_in": {
            "name": "is_in",
            "location": 81,
            "return": [
                "bool",
                "dict",
                "Callable",
                "Optional[str]",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "_NumericOperand.__add__": {
            "name": "__add__",
            "location": 91,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Collection"
                ]
            }
        },
        "_NumericOperand.__radd__": {
            "name": "__radd__",
            "location": 94,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Collection"
                ]
            }
        },
        "_NumericOperand.__sub__": {
            "name": "__sub__",
            "location": 97,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Collection"
                ]
            }
        },
        "_NumericOperand.__rsub__": {
            "name": "__rsub__",
            "location": 100,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Collection"
                ]
            }
        },
        "_ListAppendOperand.append": {
            "name": "append",
            "location": 109,
            "return": [
                "str",
                "set",
                "list",
                "bool",
                "Optional[List[str]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_ListAppendOperand.prepend": {
            "name": "prepend",
            "location": 112,
            "return": [
                "str",
                "set",
                "list",
                "bool",
                "Optional[List[str]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "_Size.__init__": {
            "name": "__init__",
            "location": 123,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": []
            }
        },
        "_Size._to_operand": {
            "name": "_to_operand",
            "location": 128,
            "return": [
                "float",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "float",
                    "Tuple[float, float]",
                    "List[float]"
                ]
            }
        },
        "_Increment.__init__": {
            "name": "__init__",
            "location": 141,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lhs": [],
                "rhs": []
            }
        },
        "_Decrement.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lhs": [],
                "rhs": []
            }
        },
        "_ListAppend.__init__": {
            "name": "__init__",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "list1": [
                    "Dict[str, Any]",
                    "Dict[str, Set[str]]",
                    "OrderedDict",
                    "type",
                    "Dict[str, Dict[str, Any]]"
                ],
                "list2": [
                    "Dict[str, Any]",
                    "Dict[str, Set[str]]",
                    "OrderedDict",
                    "type",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "_IfNotExists.__init__": {
            "name": "__init__",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "list",
                    "Union[str, BinaryIO]"
                ],
                "value": [
                    "str",
                    "list",
                    "Optional[Union[Dict, str, int, bytes]]",
                    "Optional[str]"
                ]
            }
        },
        "Value.__init__": {
            "name": "__init__",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "list",
                    "Union[List[str], str]",
                    "T"
                ],
                "attribute": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "Value.value": {
            "name": "value",
            "location": 204,
            "return": [
                "str",
                "int",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Value._serialize_value": {
            "name": "_serialize_value",
            "location": 207,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List['mypy.types.Type']",
                    "float",
                    "bytes",
                    "int",
                    "bool"
                ],
                "placeholder_names": [
                    "bool",
                    "str",
                    "float",
                    "List[str]"
                ],
                "expression_attribute_values": [
                    "List['mypy.types.Type']",
                    "float",
                    "bytes",
                    "int",
                    "bool"
                ]
            }
        },
        "Value.__serialize": {
            "name": "__serialize",
            "location": 211,
            "return": [
                "dict",
                "Dict[str, Any]",
                "List[Dict[str, Any]]",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "set"
                ],
                "attribute": [
                    "Union[T, Sequence[T]]",
                    "float",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "Value.__serialize_based_on_type": {
            "name": "__serialize_based_on_type",
            "location": 224,
            "return": [
                "Union[str, 'Type']",
                "str",
                "bool",
                "Type"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "Path.__init__": {
            "name": "__init__",
            "location": 236,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attribute_or_path": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "Path.path": {
            "name": "path",
            "location": 252,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.__iter__": {
            "name": "__iter__",
            "location": 255,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.__getitem__": {
            "name": "__getitem__",
            "location": 259,
            "return": [
                "str",
                "dict",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "list",
                    "Union[int, str]"
                ]
            }
        },
        "Path.__or__": {
            "name": "__or__",
            "location": 278,
            "return": [
                "str",
                "Optional[bool]",
                "Optional[int]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Collection"
                ]
            }
        },
        "Path.set": {
            "name": "set",
            "location": 281,
            "return": [
                "List[str]",
                "Callable",
                "str",
                "Iterator[\"pytesmark.structures.ParameterSet[CaseInfo]\"]",
                "Set[int]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "float",
                    "str",
                    "Union[int, float]"
                ]
            }
        },
        "Path.remove": {
            "name": "remove",
            "location": 285,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.add": {
            "name": "add",
            "location": 289,
            "return": [
                "str",
                "Optional[bytes]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.delete": {
            "name": "delete",
            "location": 294,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.exists": {
            "name": "exists",
            "location": 299,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.does_not_exist": {
            "name": "does_not_exist",
            "location": 302,
            "return": [
                "float",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.is_type": {
            "name": "is_type",
            "location": 305,
            "return": [
                "bool",
                "str",
                "Union[bool, str]"
            ],
            "arguments": {
                "self": [],
                "attr_type": [
                    "str",
                    "Callable[[str], str]",
                    "IO[Any]",
                    "Optional[str]"
                ]
            }
        },
        "Path.startswith": {
            "name": "startswith",
            "location": 311,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "prefix": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Path.contains": {
            "name": "contains",
            "location": 317,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict",
                    "str",
                    "Union[int, slice]"
                ]
            }
        },
        "Path._serialize_value": {
            "name": "_serialize_value",
            "location": 324,
            "return": [
                "str",
                "Dict[str, Any]",
                "bool",
                "type"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "list",
                    "bool",
                    "Callable",
                    "str"
                ],
                "placeholder_names": [
                    "list",
                    "bool",
                    "Callable",
                    "str"
                ],
                "expression_attribute_values": [
                    "bool",
                    "str",
                    "float",
                    "List[str]"
                ]
            }
        },
        "Path._to_value": {
            "name": "_to_value",
            "location": 327,
            "return": [
                "str",
                "bool",
                "int",
                "float",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "Path.__str__": {
            "name": "__str__",
            "location": 330,
            "return": [
                "str",
                "int",
                "List[int]",
                "TextIO"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path.__repr__": {
            "name": "__repr__",
            "location": 335,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Path._quote_path": {
            "name": "_quote_path",
            "location": 339,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "PynamoDB-master/pynamodb/expressions/projection.py": {
        "create_projection_expression": {
            "name": "create_projection_expression",
            "location": 10,
            "return": [],
            "arguments": {
                "attributes_to_get": [
                    "static_frame.core.util.IndexInitializer",
                    "int"
                ],
                "placeholders": [
                    "str",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "_get_document_path": {
            "name": "_get_document_path",
            "location": 17,
            "return": [
                "str",
                "bool",
                "set",
                "List[str]",
                "list",
                "Dict[str, Any]"
            ],
            "arguments": {
                "attribute": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "PynamoDB-master/pynamodb/expressions/update.py": {
        "Action.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Action.serialize": {
            "name": "serialize",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "placeholder_names": [
                    "str",
                    "bool",
                    "Callable",
                    "Dict[str, float]",
                    "Optional[Any]",
                    "int",
                    "bytes"
                ],
                "expression_attribute_values": [
                    "str",
                    "bool",
                    "Callable",
                    "Dict[str, float]",
                    "Optional[Any]",
                    "int",
                    "bytes"
                ]
            }
        },
        "Action.__repr__": {
            "name": "__repr__",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SetAction.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "value": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "RemoveAction.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "Path",
                    "Optional[str]"
                ]
            }
        },
        "AddAction.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Path",
                    "str",
                    "bool",
                    "pathlib.Path",
                    "IO[str]"
                ],
                "subset": [
                    "Value",
                    "str",
                    "Union[str, pathlib.Path]",
                    "Dict[str, Any]"
                ]
            }
        },
        "DeleteAction.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "Path",
                    "pathlib.Path",
                    "str",
                    "IO[str]"
                ],
                "subset": [
                    "Value",
                    "str",
                    "Exception",
                    "Sequence[Tuple[str, Any]]"
                ]
            }
        },
        "Update.__init__": {
            "name": "__init__",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Update.add_action": {
            "name": "add_action",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str"
                ]
            }
        },
        "Update.serialize": {
            "name": "serialize",
            "location": 99,
            "return": [
                "bool",
                "Optional[Callable[[bool], None]]"
            ],
            "arguments": {
                "self": [],
                "placeholder_names": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, str]]"
                ],
                "expression_attribute_values": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "Update._get_clause": {
            "name": "_get_clause",
            "location": 110,
            "return": [
                "str",
                "bool",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "keyword": [
                    "str",
                    "Optional[Dict[str, str]]"
                ],
                "actions": [
                    "str",
                    "bool",
                    "dict",
                    "Optional[List[str]]"
                ],
                "placeholder_names": [
                    "str",
                    "bool",
                    "dict",
                    "Optional[List[str]]"
                ],
                "expression_attribute_values": [
                    "str",
                    "bool",
                    "dict",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "PynamoDB-master/pynamodb/expressions/util.py": {
        "get_path_segments": {
            "name": "get_path_segments",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "document_path": [
                    "Union[str, List[str]]",
                    "str",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "substitute_names": {
            "name": "substitute_names",
            "location": 24,
            "return": [
                "List[Tuple[int]]",
                "str",
                "List[T]",
                "List[int]"
            ],
            "arguments": {
                "document_path": [
                    "str"
                ],
                "placeholders": [
                    "str",
                    "list"
                ]
            }
        },
        "get_value_placeholder": {
            "name": "get_value_placeholder",
            "location": 51,
            "return": [
                "str",
                "Tuple[int, int]",
                "int"
            ],
            "arguments": {
                "value": [
                    "bool",
                    "Dict[str, Any]",
                    "Union[int, float]",
                    "Callable"
                ],
                "expression_attribute_values": [
                    "Dict[str, str]",
                    "str",
                    "bytes",
                    "List[Tuple[str, str]]"
                ]
            }
        }
    },
    "PynamoDB-master/pynamodb/expressions/__init__.py": {},
    "PynamoDB-master/tests/conftest.py": {
        "assert_mypy_output": {
            "name": "assert_mypy_output",
            "location": 5,
            "return": [
                "int",
                "bool",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {
                "pytestconfig": [
                    "List[str]"
                ]
            }
        }
    },
    "PynamoDB-master/tests/data.py": {},
    "PynamoDB-master/tests/deep_eq.py": {
        "deep_eq": {
            "name": "deep_eq",
            "location": 26,
            "return": [
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "_v1": [
                    "Tuple[int, List[str]]",
                    "Iterable[int]",
                    "dict",
                    "Dict[str, str]",
                    "int"
                ],
                "_v2": [
                    "dict",
                    "T",
                    "int"
                ],
                "datetime_fudge": [
                    "bool",
                    "str",
                    "List[List[str]]",
                    "T"
                ],
                "_assert": [
                    "bool",
                    "str",
                    "List[List[str]]",
                    "T"
                ]
            }
        },
        "deep_eq._check_assert": {
            "name": "_check_assert",
            "location": 93,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "R": [
                    "int"
                ],
                "a": [
                    "int",
                    "bytes",
                    "str"
                ],
                "b": [
                    "int",
                    "bytes",
                    "str"
                ],
                "reason": [
                    "int",
                    "bytes",
                    "str"
                ]
            }
        },
        "deep_eq._deep_dict_eq": {
            "name": "_deep_dict_eq",
            "location": 99,
            "return": [
                "Dict[str, Any]",
                "int",
                "bool"
            ],
            "arguments": {
                "d1": [
                    "dict",
                    "Dict[str, Any]",
                    "T",
                    "bytes",
                    "Optional[Any]"
                ],
                "d2": [
                    "dict",
                    "Dict[str, Any]",
                    "T",
                    "bytes",
                    "Optional[Any]"
                ]
            }
        },
        "deep_eq._deep_iter_eq": {
            "name": "_deep_iter_eq",
            "location": 108,
            "return": [
                "tuple",
                "bool",
                "Type",
                "int"
            ],
            "arguments": {
                "l1": [
                    "list",
                    "List[List]",
                    "List[List[T]]",
                    "dict",
                    "Dict[str, str]"
                ],
                "l2": [
                    "list",
                    "List[List]",
                    "List[List[T]]",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "deep_eq.op": {
            "name": "op",
            "location": 115,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "a": [
                    "int",
                    "Optional[datetime.datetime]",
                    "list",
                    "datetime.time.delta",
                    "dict",
                    "datetime.datetime",
                    "datetime.date"
                ],
                "b": [
                    "int",
                    "Optional[datetime.datetime]",
                    "list",
                    "datetime.time.delta",
                    "dict",
                    "datetime.datetime",
                    "datetime.date"
                ]
            }
        }
    },
    "PynamoDB-master/tests/response.py": {
        "MockResponse.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "status_code": [
                    "int",
                    "List[int]"
                ],
                "content": [
                    "\"ks.Series\"",
                    "Dict[str, Any]",
                    "str",
                    "bool",
                    "List[str]",
                    "Dict[str, List[Any]]",
                    "Dict[str,Any]",
                    "bytes"
                ]
            }
        },
        "HttpOK.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "PynamoDB-master/tests/test_attributes.py": {
        "TestAttributeDescriptor.setup": {
            "name": "setup",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAttributeDescriptor.test_binary_attr": {
            "name": "test_binary_attr",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAttributeDescriptor.test_binary_set_attr": {
            "name": "test_binary_set_attr",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAttributeDescriptor.test_number_attr": {
            "name": "test_number_attr",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAttributeDescriptor.test_number_set_attr": {
            "name": "test_number_set_attr",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAttributeDescriptor.test_unicode_attr": {
            "name": "test_unicode_attr",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAttributeDescriptor.test_unicode_set_attr": {
            "name": "test_unicode_set_attr",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAttributeDescriptor.test_datetime_attr": {
            "name": "test_datetime_attr",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAttributeDescriptor.test_bool_attr": {
            "name": "test_bool_attr",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAttributeDescriptor.test_json_attr": {
            "name": "test_json_attr",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUTCDateTimeAttribute.setup": {
            "name": "setup",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUTCDateTimeAttribute.test_utc_datetime_attribute": {
            "name": "test_utc_datetime_attribute",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUTCDateTimeAttribute.test_utc_date_time_serialize": {
            "name": "test_utc_date_time_serialize",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUTCDateTimeAttribute.test_utc_date_time_serialize_pre_1000": {
            "name": "test_utc_date_time_serialize_pre_1000",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUTCDateTimeAttribute.test_utc_date_time_deserialize": {
            "name": "test_utc_date_time_deserialize",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUTCDateTimeAttribute.test_utc_date_time_deserialize_pre_1000_not_padded": {
            "name": "test_utc_date_time_deserialize_pre_1000_not_padded",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUTCDateTimeAttribute.test_utc_date_time_invalid": {
            "name": "test_utc_date_time_invalid",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "invalid_string": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "TestBinaryAttribute.test_binary_attribute": {
            "name": "test_binary_attribute",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinaryAttribute.test_binary_round_trip": {
            "name": "test_binary_round_trip",
            "location": 203,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinaryAttribute.test_binary_serialize": {
            "name": "test_binary_serialize",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinaryAttribute.test_binary_deserialize": {
            "name": "test_binary_deserialize",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinaryAttribute.test_binary_set_serialize": {
            "name": "test_binary_set_serialize",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinaryAttribute.test_binary_set_round_trip": {
            "name": "test_binary_set_round_trip",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinaryAttribute.test_binary_set_deserialize": {
            "name": "test_binary_set_deserialize",
            "location": 246,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBinaryAttribute.test_binary_set_attribute": {
            "name": "test_binary_set_attribute",
            "location": 256,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNumberAttribute.test_number_attribute": {
            "name": "test_number_attribute",
            "location": 271,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNumberAttribute.test_number_serialize": {
            "name": "test_number_serialize",
            "location": 282,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNumberAttribute.test_number_deserialize": {
            "name": "test_number_deserialize",
            "location": 291,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNumberAttribute.test_number_set_deserialize": {
            "name": "test_number_set_deserialize",
            "location": 300,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNumberAttribute.test_number_set_serialize": {
            "name": "test_number_set_serialize",
            "location": 308,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNumberAttribute.test_number_set_attribute": {
            "name": "test_number_set_attribute",
            "location": 316,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeAttribute.test_unicode_attribute": {
            "name": "test_unicode_attribute",
            "location": 331,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeAttribute.test_unicode_serialize": {
            "name": "test_unicode_serialize",
            "location": 342,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeAttribute.test_unicode_deserialize": {
            "name": "test_unicode_deserialize",
            "location": 351,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeAttribute.test_unicode_set_serialize": {
            "name": "test_unicode_set_serialize",
            "location": 361,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeAttribute.test_round_trip_unicode_set": {
            "name": "test_round_trip_unicode_set",
            "location": 378,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeAttribute.test_unicode_set_deserialize": {
            "name": "test_unicode_set_deserialize",
            "location": 395,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUnicodeAttribute.test_unicode_set_attribute": {
            "name": "test_unicode_set_attribute",
            "location": 412,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBooleanAttribute.test_boolean_attribute": {
            "name": "test_boolean_attribute",
            "location": 427,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBooleanAttribute.test_boolean_serialize": {
            "name": "test_boolean_serialize",
            "location": 438,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBooleanAttribute.test_boolean_deserialize": {
            "name": "test_boolean_deserialize",
            "location": 447,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTTLAttribute.test_default_and_default_for_new": {
            "name": "test_default_and_default_for_new",
            "location": 460,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTTLAttribute.test_timedelta_ttl": {
            "name": "test_timedelta_ttl",
            "location": 465,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_time": []
            }
        },
        "TestTTLAttribute.test_datetime_naive_ttl": {
            "name": "test_datetime_naive_ttl",
            "location": 471,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTTLAttribute.test_datetime_with_tz_ttl": {
            "name": "test_datetime_with_tz_ttl",
            "location": 477,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTTLAttribute.test_ttl_attribute_wrong_type": {
            "name": "test_ttl_attribute_wrong_type",
            "location": 482,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTTLAttribute.test_serialize_timedelta": {
            "name": "test_serialize_timedelta",
            "location": 488,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_time": []
            }
        },
        "TestTTLAttribute.test_serialize_none": {
            "name": "test_serialize_none",
            "location": 492,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTTLAttribute.test_serialize_deserialize": {
            "name": "test_serialize_deserialize",
            "location": 499,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_time": []
            }
        },
        "TestJSONAttribute.test_quoted_json": {
            "name": "test_quoted_json",
            "location": 513,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONAttribute.test_json_attribute": {
            "name": "test_json_attribute",
            "location": 521,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONAttribute.test_json_serialize": {
            "name": "test_json_serialize",
            "location": 532,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONAttribute.test_json_deserialize": {
            "name": "test_json_deserialize",
            "location": 542,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJSONAttribute.test_control_chars": {
            "name": "test_control_chars",
            "location": 551,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapAttribute.test_attribute_children": {
            "name": "test_attribute_children",
            "location": 565,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapAttribute.test_null_attribute_raw_map": {
            "name": "test_null_attribute_raw_map",
            "location": 576,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapAttribute.test_null_attribute_subclassed_map": {
            "name": "test_null_attribute_subclassed_map",
            "location": 584,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapAttribute.test_null_attribute_map_after_serialization": {
            "name": "test_null_attribute_map_after_serialization",
            "location": 593,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapAttribute.test_map_of_map": {
            "name": "test_map_of_map",
            "location": 602,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapAttribute.test_map_overridden_attrs_accessors": {
            "name": "test_map_overridden_attrs_accessors",
            "location": 614,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapAttribute.test_map_overridden_attrs_serialize": {
            "name": "test_map_overridden_attrs_serialize",
            "location": 623,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapAttribute.test_additional_attrs_deserialize": {
            "name": "test_additional_attrs_deserialize",
            "location": 631,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapAttribute.test_defaults": {
            "name": "test_defaults",
            "location": 648,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapAttribute.test_raw_set_attr": {
            "name": "test_raw_set_attr",
            "location": 657,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapAttribute.test_raw_set_item": {
            "name": "test_raw_set_item",
            "location": 668,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapAttribute.test_raw_map_from_dict": {
            "name": "test_raw_map_from_dict",
            "location": 679,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapAttribute.test_raw_map_access": {
            "name": "test_raw_map_access",
            "location": 693,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapAttribute.test_raw_map_iter": {
            "name": "test_raw_map_iter",
            "location": 706,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapAttribute.test_raw_map_json_serialize": {
            "name": "test_raw_map_json_serialize",
            "location": 718,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapAttribute.test_typed_and_raw_map_json_serialize": {
            "name": "test_typed_and_raw_map_json_serialize",
            "location": 738,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapAttribute.test_json_serialize": {
            "name": "test_json_serialize",
            "location": 752,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapAttribute.test_serialize_datetime": {
            "name": "test_serialize_datetime",
            "location": 767,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapAttribute.test_complex_map_accessors": {
            "name": "test_complex_map_accessors",
            "location": 780,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapAttribute.test_attribute_paths_subclassing": {
            "name": "test_attribute_paths_subclassing",
            "location": 814,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapAttribute.test_attribute_paths_wrapping": {
            "name": "test_attribute_paths_wrapping",
            "location": 837,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapAttribute.test_required_elements": {
            "name": "test_required_elements",
            "location": 863,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDynamicMapAttribute.test_serialize": {
            "name": "test_serialize",
            "location": 894,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDynamicMapAttribute.test_deserialize": {
            "name": "test_deserialize",
            "location": 905,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListAttribute.test_untyped_list": {
            "name": "test_untyped_list",
            "location": 920,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListAttribute.test_list_of_strings": {
            "name": "test_list_of_strings",
            "location": 927,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListAttribute.test_list_type_error": {
            "name": "test_list_type_error",
            "location": 933,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestListAttribute.test_serialize_null": {
            "name": "test_serialize_null",
            "location": 942,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapAndListAttribute.test_map_of_list": {
            "name": "test_map_of_list",
            "location": 951,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapAndListAttribute.test_map_of_list_of_map": {
            "name": "test_map_of_list_of_map",
            "location": 959,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapAndListAttribute.test_list_of_map_with_of": {
            "name": "test_list_of_map_with_of",
            "location": 999,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapAndListAttribute.test_list_of_map_with_of_and_custom_attribute": {
            "name": "test_list_of_map_with_of_and_custom_attribute",
            "location": 1026,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": []
            }
        },
        "TestVersionAttribute.test_serialize": {
            "name": "test_serialize",
            "location": 1055,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestVersionAttribute.test_deserialize": {
            "name": "test_deserialize",
            "location": 1062,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAttributeContainer.test_to_json": {
            "name": "test_to_json",
            "location": 1070,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAttributeContainer.test_from_json": {
            "name": "test_from_json",
            "location": 1103,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAttributeContainer.test_to_json_complex": {
            "name": "test_to_json_complex",
            "location": 1137,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAttributeContainer.test_from_json_complex": {
            "name": "test_from_json_complex",
            "location": 1160,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMapAttribute.test_json_serialize.JSONMapAttribute.__eq__": {
            "name": "__eq__",
            "location": 756,
            "return": [
                "str",
                "IO[bytes]",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "django.db.models.Model",
                    "Optional[int]"
                ]
            }
        },
        "TestMapAndListAttribute.test_list_of_map_with_of.Person.__lt__": {
            "name": "__lt__",
            "location": 1004,
            "return": [
                "str",
                "list",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T",
                    "str"
                ]
            }
        },
        "TestMapAndListAttribute.test_list_of_map_with_of.Person.__eq__": {
            "name": "__eq__",
            "location": 1007,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "TestMapAndListAttribute.test_list_of_map_with_of_and_custom_attribute.CustomMapAttribute.__eq__": {
            "name": "__eq__",
            "location": 1031,
            "return": [
                "bool",
                "Optional[str]",
                "models.JournalEntryOrigin",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        }
    },
    "PynamoDB-master/tests/test_base_connection.py": {
        "MetaTableTestCase.setUp": {
            "name": "setUp",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaTableTestCase.test_get_key_names": {
            "name": "test_get_key_names",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaTableTestCase.test_get_key_names_index": {
            "name": "test_get_key_names_index",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaTableTestCase.test_get_attribute_type": {
            "name": "test_get_attribute_type",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MetaTableTestCase.test_has_index_name": {
            "name": "test_has_index_name",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.setUp": {
            "name": "setUp",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_create_connection": {
            "name": "test_create_connection",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_subsequent_client_is_not_cached_when_credentials_none": {
            "name": "test_subsequent_client_is_not_cached_when_credentials_none",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_subsequent_client_is_cached_when_credentials_truthy": {
            "name": "test_subsequent_client_is_cached_when_credentials_truthy",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_client_is_passed_region_when_set": {
            "name": "test_client_is_passed_region_when_set",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_create_table": {
            "name": "test_create_table",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_delete_table": {
            "name": "test_delete_table",
            "location": 291,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_update_table": {
            "name": "test_update_table",
            "location": 308,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_describe_table": {
            "name": "test_describe_table",
            "location": 379,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_list_tables": {
            "name": "test_list_tables",
            "location": 401,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_delete_item": {
            "name": "test_delete_item",
            "location": 429,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_get_item": {
            "name": "test_get_item",
            "location": 581,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_update_item": {
            "name": "test_update_item",
            "location": 634,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_put_item": {
            "name": "test_put_item",
            "location": 751,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_transact_write_items": {
            "name": "test_transact_write_items",
            "location": 915,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_transact_get_items": {
            "name": "test_transact_get_items",
            "location": 927,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_batch_write_item": {
            "name": "test_batch_write_item",
            "location": 939,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_batch_get_item": {
            "name": "test_batch_get_item",
            "location": 1073,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_query": {
            "name": "test_query",
            "location": 1162,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_scan": {
            "name": "test_scan",
            "location": 1296,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_make_api_call_throws_verbose_error_after_backoff": {
            "name": "test_make_api_call_throws_verbose_error_after_backoff",
            "location": 1414,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client_mock": []
            }
        },
        "ConnectionTestCase.test_make_api_call_throws_verbose_error_after_backoff_later_succeeds": {
            "name": "test_make_api_call_throws_verbose_error_after_backoff_later_succeeds",
            "location": 1438,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client_mock": [],
                "rand_int_mock": []
            }
        },
        "ConnectionTestCase.test_make_api_call_retries_properly": {
            "name": "test_make_api_call_retries_properly",
            "location": 1470,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client_mock": []
            }
        },
        "ConnectionTestCase.test_connection__timeout": {
            "name": "test_connection__timeout",
            "location": 1507,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_sign_request": {
            "name": "test_sign_request",
            "location": 1513,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_make_api_call___extra_headers": {
            "name": "test_make_api_call___extra_headers",
            "location": 1523,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client_mock": []
            }
        },
        "ConnectionTestCase.test_make_api_call_throws_when_retries_exhausted": {
            "name": "test_make_api_call_throws_when_retries_exhausted",
            "location": 1548,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client_mock": []
            }
        },
        "ConnectionTestCase.test_make_api_call_throws_retry_disabled": {
            "name": "test_make_api_call_throws_retry_disabled",
            "location": 1572,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client_mock": [],
                "rand_int_mock": []
            }
        },
        "ConnectionTestCase.test_handle_binary_attributes_for_unprocessed_items": {
            "name": "test_handle_binary_attributes_for_unprocessed_items",
            "location": 1593,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_handle_binary_attributes_for_unprocessed_keys": {
            "name": "test_handle_binary_attributes_for_unprocessed_keys",
            "location": 1624,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_update_time_to_live_fail": {
            "name": "test_update_time_to_live_fail",
            "location": 1662,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PynamoDB-master/tests/test_discriminator.py": {
        "TestDiscriminatorAttribute.test_serialize": {
            "name": "test_serialize",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDiscriminatorAttribute.test_deserialize": {
            "name": "test_deserialize",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDiscriminatorAttribute.test_condition_expression": {
            "name": "test_condition_expression",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDiscriminatorAttribute.test_multiple_discriminator_values": {
            "name": "test_multiple_discriminator_values",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDiscriminatorAttribute.test_multiple_discriminator_classes": {
            "name": "test_multiple_discriminator_classes",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDiscriminatorModel.test_serialize": {
            "name": "test_serialize",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDiscriminatorModel.test_deserialize": {
            "name": "test_deserialize",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDynamicDiscriminatorModel.test_serialize_parent": {
            "name": "test_serialize_parent",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDynamicDiscriminatorModel.test_deserialize_parent": {
            "name": "test_deserialize_parent",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDynamicDiscriminatorModel.test_serialize_child": {
            "name": "test_serialize_child",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDynamicDiscriminatorModel.test_deserialize_child": {
            "name": "test_deserialize_child",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PynamoDB-master/tests/test_exceptions.py": {
        "test_get_cause_response_code": {
            "name": "test_get_cause_response_code",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_cause_response_code__no_code": {
            "name": "test_get_cause_response_code__no_code",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_cause_response_message": {
            "name": "test_get_cause_response_message",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_cause_response_message__no_message": {
            "name": "test_get_cause_response_message__no_message",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PynamoDB-master/tests/test_expressions.py": {
        "PathTestCase.test_document_path": {
            "name": "test_document_path",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PathTestCase.test_attribute_name": {
            "name": "test_attribute_name",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PathTestCase.test_index_document_path": {
            "name": "test_index_document_path",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PathTestCase.test_index_attribute_name": {
            "name": "test_index_attribute_name",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PathTestCase.test_index_map_attribute": {
            "name": "test_index_map_attribute",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PathTestCase.test_index_invalid": {
            "name": "test_index_invalid",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionTestCase.test_action": {
            "name": "test_action",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectionExpressionTestCase.setUp": {
            "name": "setUp",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectionExpressionTestCase.test_create_projection_expression": {
            "name": "test_create_projection_expression",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectionExpressionTestCase.test_create_projection_expression_repeated_names": {
            "name": "test_create_projection_expression_repeated_names",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectionExpressionTestCase.test_create_projection_expression_invalid_attribute_raises": {
            "name": "test_create_projection_expression_invalid_attribute_raises",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectionExpressionTestCase.test_create_project_expression_with_document_paths": {
            "name": "test_create_project_expression_with_document_paths",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectionExpressionTestCase.test_create_project_expression_with_attribute_names": {
            "name": "test_create_project_expression_with_attribute_names",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectionExpressionTestCase.test_create_projection_expression_with_attributes": {
            "name": "test_create_projection_expression_with_attributes",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProjectionExpressionTestCase.test_create_projection_expression_not_a_list": {
            "name": "test_create_projection_expression_not_a_list",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.setUp": {
            "name": "setUp",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_equal": {
            "name": "test_equal",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_not_equal": {
            "name": "test_not_equal",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_less_than": {
            "name": "test_less_than",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_less_than_or_equal": {
            "name": "test_less_than_or_equal",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_greater_than": {
            "name": "test_greater_than",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_greater_than_or_equal": {
            "name": "test_greater_than_or_equal",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_between": {
            "name": "test_between",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_in": {
            "name": "test_in",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_exists": {
            "name": "test_exists",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_does_not_exist": {
            "name": "test_does_not_exist",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_is_type": {
            "name": "test_is_type",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_begins_with": {
            "name": "test_begins_with",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_contains": {
            "name": "test_contains",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_contains_string_set": {
            "name": "test_contains_string_set",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_contains_number_set": {
            "name": "test_contains_number_set",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_contains_list": {
            "name": "test_contains_list",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_contains_attribute": {
            "name": "test_contains_attribute",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_size": {
            "name": "test_size",
            "location": 239,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_sizes": {
            "name": "test_sizes",
            "location": 246,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_and": {
            "name": "test_and",
            "location": 253,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_invalid_and": {
            "name": "test_invalid_and",
            "location": 260,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_rand": {
            "name": "test_rand",
            "location": 265,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_invalid_rand": {
            "name": "test_invalid_rand",
            "location": 273,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_or": {
            "name": "test_or",
            "location": 278,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_invalid_or": {
            "name": "test_invalid_or",
            "location": 285,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_not": {
            "name": "test_not",
            "location": 290,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_compound_logic": {
            "name": "test_compound_logic",
            "location": 297,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_indexing": {
            "name": "test_indexing",
            "location": 304,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_invalid_indexing": {
            "name": "test_invalid_indexing",
            "location": 311,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_double_indexing": {
            "name": "test_double_indexing",
            "location": 315,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_typed_list_indexing": {
            "name": "test_typed_list_indexing",
            "location": 322,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_map_comparison": {
            "name": "test_map_comparison",
            "location": 331,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_map_comparison_rhs": {
            "name": "test_map_comparison_rhs",
            "location": 343,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_list_comparison": {
            "name": "test_list_comparison",
            "location": 355,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_dotted_attribute_name": {
            "name": "test_dotted_attribute_name",
            "location": 362,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_map_attribute_indexing": {
            "name": "test_map_attribute_indexing",
            "location": 370,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_map_attribute_dereference": {
            "name": "test_map_attribute_dereference",
            "location": 382,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_map_attribute_dereference_via_indexing": {
            "name": "test_map_attribute_dereference_via_indexing",
            "location": 397,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_map_attribute_dereference_via_indexing_missing_attribute": {
            "name": "test_map_attribute_dereference_via_indexing_missing_attribute",
            "location": 412,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConditionExpressionTestCase.test_attribute_comparison": {
            "name": "test_attribute_comparison",
            "location": 424,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateExpressionTestCase.setUp": {
            "name": "setUp",
            "location": 434,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateExpressionTestCase.test_set_action": {
            "name": "test_set_action",
            "location": 441,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateExpressionTestCase.test_set_action_attribute_container": {
            "name": "test_set_action_attribute_container",
            "location": 448,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateExpressionTestCase.test_increment_action": {
            "name": "test_increment_action",
            "location": 460,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateExpressionTestCase.test_increment_action_value": {
            "name": "test_increment_action_value",
            "location": 467,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateExpressionTestCase.test_decrement_action": {
            "name": "test_decrement_action",
            "location": 474,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateExpressionTestCase.test_decrement_action_value": {
            "name": "test_decrement_action_value",
            "location": 481,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateExpressionTestCase.test_append_action": {
            "name": "test_append_action",
            "location": 488,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateExpressionTestCase.test_prepend_action": {
            "name": "test_prepend_action",
            "location": 495,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateExpressionTestCase.test_conditional_set_action": {
            "name": "test_conditional_set_action",
            "location": 502,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateExpressionTestCase.test_remove_action": {
            "name": "test_remove_action",
            "location": 509,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateExpressionTestCase.test_remove_action_list_element": {
            "name": "test_remove_action_list_element",
            "location": 516,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateExpressionTestCase.test_add_action": {
            "name": "test_add_action",
            "location": 523,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateExpressionTestCase.test_add_action_set": {
            "name": "test_add_action_set",
            "location": 530,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateExpressionTestCase.test_add_action_serialized": {
            "name": "test_add_action_serialized",
            "location": 537,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateExpressionTestCase.test_add_action_list": {
            "name": "test_add_action_list",
            "location": 544,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateExpressionTestCase.test_delete_action": {
            "name": "test_delete_action",
            "location": 548,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateExpressionTestCase.test_delete_action_set": {
            "name": "test_delete_action_set",
            "location": 555,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateExpressionTestCase.test_delete_action_serialized": {
            "name": "test_delete_action_serialized",
            "location": 562,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateExpressionTestCase.test_delete_action_non_set": {
            "name": "test_delete_action_non_set",
            "location": 569,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateExpressionTestCase.test_update": {
            "name": "test_update",
            "location": 573,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateExpressionTestCase.test_update_skips_empty_clauses": {
            "name": "test_update_skips_empty_clauses",
            "location": 589,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UpdateExpressionTestCase.test_update_empty": {
            "name": "test_update_empty",
            "location": 596,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PynamoDB-master/tests/test_model.py": {
        "Person.foo": {
            "name": "foo",
            "location": 312,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OfficeEmployee.foo": {
            "name": "foo",
            "location": 331,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OfficeEmployeeMap.cool_function": {
            "name": "cool_function",
            "location": 367,
            "return": [
                "int",
                "bool",
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.init_table_meta": {
            "name": "init_table_meta",
            "location": 472,
            "return": [
                ""
            ],
            "arguments": {
                "model_clz": [
                    "str",
                    "int",
                    "Optional[List[str]]",
                    "Optional[Dict[str, Any]]"
                ],
                "table_data": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "ModelTestCase.assert_dict_lists_equal": {
            "name": "assert_dict_lists_equal",
            "location": 477,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "list1": [
                    "list",
                    "dict",
                    "List[dict]"
                ],
                "list2": [
                    "list",
                    "dict",
                    "List[dict]"
                ]
            }
        },
        "ModelTestCase.test_create_model": {
            "name": "test_create_model",
            "location": 492,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_model_attrs": {
            "name": "test_model_attrs",
            "location": 655,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_overidden_defaults": {
            "name": "test_overidden_defaults",
            "location": 679,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_overridden_attr_name": {
            "name": "test_overridden_attr_name",
            "location": 697,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_refresh": {
            "name": "test_refresh",
            "location": 704,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_complex_key": {
            "name": "test_complex_key",
            "location": 725,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_delete": {
            "name": "test_delete",
            "location": 736,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_delete_doesnt_do_validation_on_null_attributes": {
            "name": "test_delete_doesnt_do_validation_on_null_attributes",
            "location": 819,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_update": {
            "name": "test_update",
            "location": 834,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_time": [
                    "unittesmock.MagicMock",
                    "mock.MagicMock"
                ]
            }
        },
        "ModelTestCase.test_update_doesnt_do_validation_on_null_attributes": {
            "name": "test_update_doesnt_do_validation_on_null_attributes",
            "location": 924,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_save": {
            "name": "test_save",
            "location": 940,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_filter_count": {
            "name": "test_filter_count",
            "location": 1103,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_count": {
            "name": "test_count",
            "location": 1129,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_count_no_hash_key": {
            "name": "test_count_no_hash_key",
            "location": 1147,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_index_count": {
            "name": "test_index_count",
            "location": 1151,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_index_multipage_count": {
            "name": "test_index_multipage_count",
            "location": 1187,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_query_limit_greater_than_available_items_single_page": {
            "name": "test_query_limit_greater_than_available_items_single_page",
            "location": 1225,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_query_limit_identical_to_available_items_single_page": {
            "name": "test_query_limit_identical_to_available_items_single_page",
            "location": 1241,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_query_limit_less_than_available_items_multiple_page": {
            "name": "test_query_limit_less_than_available_items_multiple_page",
            "location": 1258,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_query_limit_less_than_available_and_page_size": {
            "name": "test_query_limit_less_than_available_and_page_size",
            "location": 1286,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_query_limit_greater_than_available_items_multiple_page": {
            "name": "test_query_limit_greater_than_available_items_multiple_page",
            "location": 1314,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_query_limit_greater_than_available_items_and_page_size": {
            "name": "test_query_limit_greater_than_available_items_and_page_size",
            "location": 1342,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_query_with_exclusive_start_key": {
            "name": "test_query_with_exclusive_start_key",
            "location": 1369,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_query": {
            "name": "test_query",
            "location": 1395,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_query_with_discriminator": {
            "name": "test_query_with_discriminator",
            "location": 1568,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_scan_limit_with_page_size": {
            "name": "test_scan_limit_with_page_size",
            "location": 1638,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_scan_limit": {
            "name": "test_scan_limit",
            "location": 1662,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_scan": {
            "name": "test_scan",
            "location": 1698,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_get": {
            "name": "test_get",
            "location": 1765,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_batch_get": {
            "name": "test_batch_get",
            "location": 1853,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_batch_write": {
            "name": "test_batch_write",
            "location": 2008,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_batch_write_with_unprocessed": {
            "name": "test_batch_write_with_unprocessed",
            "location": 2052,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_batch_write_raises_put_error": {
            "name": "test_batch_write_raises_put_error",
            "location": 2096,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_index_queries": {
            "name": "test_index_queries",
            "location": 2133,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_multiple_indices_share_non_key_attribute": {
            "name": "test_multiple_indices_share_non_key_attribute",
            "location": 2265,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_global_index": {
            "name": "test_global_index",
            "location": 2335,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_local_index": {
            "name": "test_local_index",
            "location": 2386,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_projections": {
            "name": "test_projections",
            "location": 2482,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_old_style_model_exception": {
            "name": "test_old_style_model_exception",
            "location": 2513,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_no_table_name_exception": {
            "name": "test_no_table_name_exception",
            "location": 2520,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_to_json": {
            "name": "test_to_json",
            "location": 2531,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_from_json": {
            "name": "test_from_json",
            "location": 2547,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase._get_office_employee": {
            "name": "_get_office_employee",
            "location": 2565,
            "return": [
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase._get_grocery_list": {
            "name": "_get_grocery_list",
            "location": 2585,
            "return": [
                "str",
                "AbstractSet[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase._get_complex_thing": {
            "name": "_get_complex_thing",
            "location": 2589,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase._get_office": {
            "name": "_get_office",
            "location": 2598,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_model_with_maps": {
            "name": "test_model_with_maps",
            "location": 2654,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_model_with_list": {
            "name": "test_model_with_list",
            "location": 2660,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_model_with_list_of_map": {
            "name": "test_model_with_list_of_map",
            "location": 2666,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_model_with_nulls_validates": {
            "name": "test_model_with_nulls_validates",
            "location": 2672,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_model_with_invalid_data_does_not_validate": {
            "name": "test_model_with_invalid_data_does_not_validate",
            "location": 2679,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_model_works_like_model": {
            "name": "test_model_works_like_model",
            "location": 2688,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_list_works_like_list": {
            "name": "test_list_works_like_list",
            "location": 2696,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_complex_model_is_complex": {
            "name": "test_complex_model_is_complex",
            "location": 2701,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_list_of_map_works_like_list_of_map": {
            "name": "test_list_of_map_works_like_list_of_map",
            "location": 2707,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_invalid_map_model_raises": {
            "name": "test_invalid_map_model_raises",
            "location": 2714,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_model_with_maps_retrieve_from_db": {
            "name": "test_model_with_maps_retrieve_from_db",
            "location": 2724,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_model_with_maps_with_nulls_retrieve_from_db": {
            "name": "test_model_with_maps_with_nulls_retrieve_from_db",
            "location": 2737,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_model_with_maps_with_snake_case_attributes": {
            "name": "test_model_with_maps_with_snake_case_attributes",
            "location": 2752,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_model_with_list_retrieve_from_db": {
            "name": "test_model_with_list_retrieve_from_db",
            "location": 2778,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_model_with_list_of_map_retrieve_from_db": {
            "name": "test_model_with_list_of_map_retrieve_from_db",
            "location": 2793,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_complex_model_retrieve_from_db": {
            "name": "test_complex_model_retrieve_from_db",
            "location": 2809,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.database_mocker": {
            "name": "database_mocker",
            "location": 2826,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Optional[Iterable[str]]",
                    "List[int]",
                    "Exception",
                    "List[Dict[str, Any]]",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ],
                "table_data": [
                    "Optional[Iterable[str]]",
                    "List[int]",
                    "Exception",
                    "List[Dict[str, Any]]",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ],
                "item_data": [
                    "Optional[Iterable[str]]",
                    "List[int]",
                    "Exception",
                    "List[Dict[str, Any]]",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ],
                "primary_key_name": [
                    "Optional[Iterable[str]]",
                    "List[int]",
                    "Exception",
                    "List[Dict[str, Any]]",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ],
                "primary_key_dynamo_type": [
                    "Optional[Iterable[str]]",
                    "List[int]",
                    "Exception",
                    "List[Dict[str, Any]]",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ],
                "primary_key_id": [
                    "Optional[Iterable[str]]",
                    "List[int]",
                    "Exception",
                    "List[Dict[str, Any]]",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ]
            }
        },
        "ModelTestCase.test_car_model_retrieve_from_db": {
            "name": "test_car_model_retrieve_from_db",
            "location": 2845,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_car_model_with_null_retrieve_from_db": {
            "name": "test_car_model_with_null_retrieve_from_db",
            "location": 2858,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_invalid_car_model_with_null_retrieve_from_db": {
            "name": "test_invalid_car_model_with_null_retrieve_from_db",
            "location": 2872,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_boolean_serializes_as_bool": {
            "name": "test_boolean_serializes_as_bool",
            "location": 2885,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_deserializing_bool_false_works": {
            "name": "test_deserializing_bool_false_works",
            "location": 2891,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_deserializing_new_style_bool_true_works": {
            "name": "test_deserializing_new_style_bool_true_works",
            "location": 2902,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_serializing_map_with_null_check": {
            "name": "test_serializing_map_with_null_check",
            "location": 2913,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_deserializing_map_four_layers_deep_works": {
            "name": "test_deserializing_map_four_layers_deep_works",
            "location": 2949,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_explicit_raw_map_serialize_pass": {
            "name": "test_explicit_raw_map_serialize_pass",
            "location": 2960,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_raw_map_serialize_fun_one": {
            "name": "test_raw_map_serialize_fun_one",
            "location": 2967,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_raw_map_deserializes": {
            "name": "test_raw_map_deserializes",
            "location": 2984,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_raw_map_from_raw_data_works": {
            "name": "test_raw_map_from_raw_data_works",
            "location": 3007,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_raw_map_as_sub_map_serialize_pass": {
            "name": "test_raw_map_as_sub_map_serialize_pass",
            "location": 3025,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase._get_raw_map_as_sub_map_test_data": {
            "name": "_get_raw_map_as_sub_map_test_data",
            "location": 3044,
            "return": [
                "dict",
                "bytes",
                "float",
                "flask_appbuilder.security.sqla.models.User",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]",
                "Dict[Optional[str], Set[abilian.services.security.models.Role]]",
                "abilian.core.models.subjects.Principal",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_raw_map_as_sub_map": {
            "name": "test_raw_map_as_sub_map",
            "location": 3072,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_raw_map_as_sub_map_deserialize": {
            "name": "test_raw_map_as_sub_map_deserialize",
            "location": 3079,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_raw_map_as_sub_map_from_raw_data_works": {
            "name": "test_raw_map_as_sub_map_from_raw_data_works",
            "location": 3089,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_model_subclass_attributes_inherited_on_create": {
            "name": "test_model_subclass_attributes_inherited_on_create",
            "location": 3104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_model_version_attribute_save": {
            "name": "test_model_version_attribute_save",
            "location": 3127,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_model_version_attribute_save_with_initial_version_zero": {
            "name": "test_model_version_attribute_save_with_initial_version_zero",
            "location": 3180,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_version_attribute_increments_on_update": {
            "name": "test_version_attribute_increments_on_update",
            "location": 3234,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelInitTestCase.test_raw_map_attribute_with_dict_init": {
            "name": "test_raw_map_attribute_with_dict_init",
            "location": 3331,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelInitTestCase.test_raw_map_attribute_with_initialized_instance_init": {
            "name": "test_raw_map_attribute_with_initialized_instance_init",
            "location": 3339,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelInitTestCase.test_subclassed_map_attribute_with_dict_init": {
            "name": "test_subclassed_map_attribute_with_dict_init",
            "location": 3349,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelInitTestCase.test_subclassed_map_attribute_with_initialized_instance_init": {
            "name": "test_subclassed_map_attribute_with_initialized_instance_init",
            "location": 3359,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelInitTestCase._get_bin_tree": {
            "name": "_get_bin_tree",
            "location": 3369,
            "return": [
                "datetime.datetime",
                "str",
                "Dict[str, allennlp.data.token_indexers.TokenIndexer]"
            ],
            "arguments": {
                "self": [],
                "multiplier": [
                    "str",
                    "int",
                    "zam_repondeur.models.Lecture"
                ]
            }
        },
        "ModelInitTestCase.test_subclassed_map_attribute_with_map_attributes_member_with_dict_init": {
            "name": "test_subclassed_map_attribute_with_map_attributes_member_with_dict_init",
            "location": 3392,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelInitTestCase.test_subclassed_map_attribute_with_map_attribute_member_with_initialized_instance_init": {
            "name": "test_subclassed_map_attribute_with_map_attribute_member_with_initialized_instance_init",
            "location": 3401,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelInitTestCase.test_multiple_ttl_attributes": {
            "name": "test_multiple_ttl_attributes",
            "location": 3412,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelInitTestCase.test_get_ttl_attribute_fails": {
            "name": "test_get_ttl_attribute_fails",
            "location": 3420,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelInitTestCase.test_get_ttl_attribute": {
            "name": "test_get_ttl_attribute",
            "location": 3425,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelInitTestCase.test_deserialized": {
            "name": "test_deserialized",
            "location": 3428,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelInitTestCase.test_deserialized_with_ttl": {
            "name": "test_deserialized_with_ttl",
            "location": 3434,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelInitTestCase.test_deserialized_with_invalid_type": {
            "name": "test_deserialized_with_invalid_type",
            "location": 3440,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelInitTestCase.test_multiple_hash_keys": {
            "name": "test_multiple_hash_keys",
            "location": 3443,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelInitTestCase.test_multiple_range_keys": {
            "name": "test_multiple_range_keys",
            "location": 3452,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelInitTestCase.test_multiple_version_attributes": {
            "name": "test_multiple_version_attributes",
            "location": 3461,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelInitTestCase.test_inherit_metaclass": {
            "name": "test_inherit_metaclass",
            "location": 3470,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelInitTestCase.test_connection_inheritance": {
            "name": "test_connection_inheritance",
            "location": 3478,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelTestCase.test_create_model.fake_dynamodb": {
            "name": "fake_dynamodb",
            "location": 499,
            "return": [],
            "arguments": {}
        },
        "ModelTestCase.test_create_model.fake_wait": {
            "name": "fake_wait",
            "location": 580,
            "return": [
                "bool",
                "str",
                "dict"
            ],
            "arguments": {}
        },
        "ModelTestCase.test_create_model.bad_server": {
            "name": "bad_server",
            "location": 635,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "ModelTestCase.test_count.fake_dynamodb": {
            "name": "fake_dynamodb",
            "location": 1134,
            "return": [],
            "arguments": {}
        },
        "ModelTestCase.test_query.fake_query": {
            "name": "fake_query",
            "location": 1491,
            "return": [
                "dict",
                "str",
                "Optional[float]",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "ModelTestCase.test_scan_limit.fake_scan": {
            "name": "fake_scan",
            "location": 1667,
            "return": [],
            "arguments": {}
        },
        "ModelTestCase.test_scan.fake_scan": {
            "name": "fake_scan",
            "location": 1718,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {}
        },
        "ModelTestCase.test_get.fake_dynamodb": {
            "name": "fake_dynamodb",
            "location": 1770,
            "return": [],
            "arguments": {}
        },
        "ModelTestCase.test_batch_get.fake_batch_get": {
            "name": "fake_batch_get",
            "location": 1982,
            "return": [
                "int",
                "List[str]",
                "Optional[str]",
                "Dict[str, str]",
                "Dict[str, digipathos.data.dataseDataset]",
                "dict",
                "bool"
            ],
            "arguments": {}
        },
        "ModelTestCase.test_multiple_indices_share_non_key_attribute.fake_dynamodb": {
            "name": "fake_dynamodb",
            "location": 2271,
            "return": [],
            "arguments": {}
        },
        "ModelTestCase.test_global_index.fake_dynamodb": {
            "name": "fake_dynamodb",
            "location": 2349,
            "return": [],
            "arguments": {}
        },
        "ModelTestCase.test_local_index.fake_dynamodb": {
            "name": "fake_dynamodb",
            "location": 2445,
            "return": [],
            "arguments": {}
        },
        "ModelTestCase.database_mocker.fake_dynamodb": {
            "name": "fake_dynamodb",
            "location": 2828,
            "return": [],
            "arguments": {}
        },
        "ModelTestCase.test_model_subclass_attributes_inherited_on_create.fake_dynamodb": {
            "name": "fake_dynamodb",
            "location": 3107,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        }
    },
    "PynamoDB-master/tests/test_pagination.py": {
        "test_rate_limiter_exceptions": {
            "name": "test_rate_limiter_exceptions",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_basic_rate_limiting": {
            "name": "test_basic_rate_limiting",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_basic_rate_limiting_small_increment": {
            "name": "test_basic_rate_limiting_small_increment",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_basic_rate_limiting_large_increment": {
            "name": "test_basic_rate_limiting_large_increment",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "MockTime.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MockTime.sleep": {
            "name": "sleep",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "float",
                    "Optional[float]",
                    "Optional[int]"
                ]
            }
        },
        "MockTime.time": {
            "name": "time",
            "location": 12,
            "return": [
                "int",
                "Optional[bool]",
                "float",
                "Iterable[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockTime.increment_time": {
            "name": "increment_time",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "amount": [
                    "int",
                    "float",
                    "Optional[float]"
                ]
            }
        }
    },
    "PynamoDB-master/tests/test_settings.py": {
        "test_override_old_attributes": {
            "name": "test_override_old_attributes",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "settings_str": [
                    "str"
                ],
                "tmpdir": [
                    "str"
                ]
            }
        }
    },
    "PynamoDB-master/tests/test_signals.py": {
        "test_signal": {
            "name": "test_signal",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "mock_uuid": [],
                "mock_req": []
            }
        },
        "test_signal_exception_pre_signal": {
            "name": "test_signal_exception_pre_signal",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "mock_uuid": [],
                "mock_req": []
            }
        },
        "test_signal_exception_post_signal": {
            "name": "test_signal_exception_post_signal",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "mock_uuid": [],
                "mock_req": []
            }
        },
        "test_fake_signals": {
            "name": "test_fake_signals",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_signal.record_pre_dynamodb_send": {
            "name": "record_pre_dynamodb_send",
            "location": 23,
            "return": [],
            "arguments": {
                "sender": [],
                "operation_name": [],
                "table_name": [],
                "req_uuid": []
            }
        },
        "test_signal.record_post_dynamodb_send": {
            "name": "record_post_dynamodb_send",
            "location": 26,
            "return": [],
            "arguments": {
                "sender": [],
                "operation_name": [],
                "table_name": [],
                "req_uuid": []
            }
        },
        "test_signal_exception_pre_signal.record_pre_dynamodb_send": {
            "name": "record_pre_dynamodb_send",
            "location": 49,
            "return": [],
            "arguments": {
                "sender": [],
                "operation_name": [],
                "table_name": [],
                "req_uuid": []
            }
        },
        "test_signal_exception_pre_signal.record_post_dynamodb_send": {
            "name": "record_post_dynamodb_send",
            "location": 52,
            "return": [],
            "arguments": {
                "sender": [],
                "operation_name": [],
                "table_name": [],
                "req_uuid": []
            }
        },
        "test_signal_exception_post_signal.record_pre_dynamodb_send": {
            "name": "record_pre_dynamodb_send",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "sender": [
                    "str",
                    "int"
                ],
                "operation_name": [
                    "str",
                    "Optional[str]",
                    "List[Tuple[str, int]]"
                ],
                "table_name": [
                    "str",
                    "Optional[str]",
                    "List[Tuple[str, int]]"
                ],
                "req_uuid": [
                    "str",
                    "Optional[str]",
                    "List[Tuple[str, int]]"
                ]
            }
        },
        "test_signal_exception_post_signal.record_post_dynamodb_send": {
            "name": "record_post_dynamodb_send",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "sender": [
                    "str",
                    "bool"
                ],
                "operation_name": [
                    "str",
                    "bool"
                ],
                "table_name": [
                    "str",
                    "bool"
                ],
                "req_uuid": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "PynamoDB-master/tests/test_table_connection.py": {
        "ConnectionTestCase.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_create_connection": {
            "name": "test_create_connection",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_connection_session_set_credentials": {
            "name": "test_connection_session_set_credentials",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_connection_session_set_credentials_with_session_token": {
            "name": "test_connection_session_set_credentials_with_session_token",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_create_table": {
            "name": "test_create_table",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_create_table_with_tags": {
            "name": "test_create_table_with_tags",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_update_time_to_live": {
            "name": "test_update_time_to_live",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_delete_table": {
            "name": "test_delete_table",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_update_table": {
            "name": "test_update_table",
            "location": 227,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_describe_table": {
            "name": "test_describe_table",
            "location": 284,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_delete_item": {
            "name": "test_delete_item",
            "location": 295,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_update_item": {
            "name": "test_update_item",
            "location": 323,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_get_item": {
            "name": "test_get_item",
            "location": 369,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_put_item": {
            "name": "test_put_item",
            "location": 383,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_batch_write_item": {
            "name": "test_batch_write_item",
            "location": 453,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_batch_get_item": {
            "name": "test_batch_get_item",
            "location": 490,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_query": {
            "name": "test_query",
            "location": 530,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConnectionTestCase.test_scan": {
            "name": "test_scan",
            "location": 564,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PynamoDB-master/tests/test_transaction.py": {
        "TestTransaction.test_commit__not_implemented": {
            "name": "test_commit__not_implemented",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransactGet.test_commit": {
            "name": "test_commit",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "deeplearning.ml4pl.models.logger.Logger",
                    "str"
                ]
            }
        },
        "TestTransactWrite.test_condition_check__no_condition": {
            "name": "test_condition_check__no_condition",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTransactWrite.test_commit": {
            "name": "test_commit",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mocker": [
                    "deeplearning.ml4pl.models.logger.Logger",
                    "str"
                ]
            }
        }
    },
    "PynamoDB-master/tests/__init__.py": {},
    "PynamoDB-master/tests/integration/base_integration_test.py": {
        "test_connection_integration": {
            "name": "test_connection_integration",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "ddb_url": [
                    "str"
                ]
            }
        }
    },
    "PynamoDB-master/tests/integration/binary_update_test.py": {
        "test_binary_attribute_update": {
            "name": "test_binary_attribute_update",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "ddb_url": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_binary_set_attribute_update": {
            "name": "test_binary_set_attribute_update",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "ddb_url": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "PynamoDB-master/tests/integration/conftest.py": {
        "ddb_url": {
            "name": "ddb_url",
            "location": 7,
            "return": [
                "bool",
                "str",
                "Optional[Any]"
            ],
            "arguments": {}
        }
    },
    "PynamoDB-master/tests/integration/model_integration_test.py": {
        "test_model_integration": {
            "name": "test_model_integration",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "ddb_url": [
                    "str",
                    "Callable",
                    "bool"
                ]
            }
        },
        "test_can_inherit_version_attribute": {
            "name": "test_can_inherit_version_attribute",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "ddb_url": [
                    "str"
                ]
            }
        }
    },
    "PynamoDB-master/tests/integration/table_integration_test.py": {
        "test_table_integration": {
            "name": "test_table_integration",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "ddb_url": [
                    "str"
                ]
            }
        }
    },
    "PynamoDB-master/tests/integration/test_transaction_integration.py": {
        "connection": {
            "name": "connection",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "ddb_url": [
                    "str",
                    "int"
                ]
            }
        },
        "create_tables": {
            "name": "create_tables",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "ddb_url": [
                    "str",
                    "int"
                ]
            }
        },
        "get_error_code": {
            "name": "get_error_code",
            "location": 106,
            "return": [
                "Type",
                "Tuple[int, int]",
                "Type[Model]",
                "Type[django.db.models.Model]",
                "List[app.models.User]",
                "tuple",
                "str"
            ],
            "arguments": {
                "error": [
                    "dict"
                ]
            }
        },
        "get_error_message": {
            "name": "get_error_message",
            "location": 110,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "error": [
                    "werkzeug.exceptions.HTTPException",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "test_transact_write__error__idempotent_parameter_mismatch": {
            "name": "test_transact_write__error__idempotent_parameter_mismatch",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "connection": []
            }
        },
        "test_transact_write__error__different_regions": {
            "name": "test_transact_write__error__different_regions",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "connection": [
                    "dict"
                ]
            }
        },
        "test_transact_write__error__transaction_cancelled__condition_check_failure": {
            "name": "test_transact_write__error__transaction_cancelled__condition_check_failure",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "connection": [
                    "dict"
                ]
            }
        },
        "test_transact_write__error__multiple_operations_on_same_record": {
            "name": "test_transact_write__error__multiple_operations_on_same_record",
            "location": 170,
            "return": [
                ""
            ],
            "arguments": {
                "connection": [
                    "dict"
                ]
            }
        },
        "test_transact_get": {
            "name": "test_transact_get",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "connection": [
                    "dict"
                ]
            }
        },
        "test_transact_get__does_not_exist": {
            "name": "test_transact_get__does_not_exist",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "connection": [
                    "dict"
                ]
            }
        },
        "test_transact_get__invalid_state": {
            "name": "test_transact_get__invalid_state",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "connection": [
                    "dict",
                    "bool"
                ]
            }
        },
        "test_transact_write": {
            "name": "test_transact_write",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {
                "connection": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_transact_write__one_of_each": {
            "name": "test_transact_write__one_of_each",
            "location": 264,
            "return": [
                ""
            ],
            "arguments": {
                "connection": [
                    "dict"
                ]
            }
        },
        "test_transaction_write_with_version_attribute": {
            "name": "test_transaction_write_with_version_attribute",
            "location": 298,
            "return": [
                ""
            ],
            "arguments": {
                "connection": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_transaction_get_with_version_attribute": {
            "name": "test_transaction_get_with_version_attribute",
            "location": 326,
            "return": [
                ""
            ],
            "arguments": {
                "connection": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_transaction_write_with_version_attribute_condition_failure": {
            "name": "test_transaction_write_with_version_attribute_condition_failure",
            "location": 342,
            "return": [
                ""
            ],
            "arguments": {
                "connection": [
                    "Optional[int]"
                ]
            }
        }
    },
    "PynamoDB-master/tests/integration/__init__.py": {},
    "PynamoDB-master/typing_tests/attributes.py": {
        "test_number_attribute": {
            "name": "test_number_attribute",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_unicode_attribute": {
            "name": "test_unicode_attribute",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_map_attribute": {
            "name": "test_map_attribute",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_list_attribute": {
            "name": "test_list_attribute",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "PynamoDB-master/typing_tests/models.py": {
        "test_model_count": {
            "name": "test_model_count",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_query": {
            "name": "test_model_query",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_pagination": {
            "name": "test_pagination",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_model_update": {
            "name": "test_model_update",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_paths": {
            "name": "test_paths",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_index_query_scan": {
            "name": "test_index_query_scan",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_map_attribute_derivation": {
            "name": "test_map_attribute_derivation",
            "location": 119,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_is_in": {
            "name": "test_is_in",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_append": {
            "name": "test_append",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "PynamoDB-master/typing_tests/transactions.py": {
        "test_transact_write": {
            "name": "test_transact_write",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_transact_get": {
            "name": "test_transact_get",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "PynamoDB-master/typing_tests/__init__.py": {}
}
{
    "PythonCode-master/arithmetic_analysis/bisection.py": {
        "bisection": {
            "name": "bisection",
            "location": 4,
            "return": [
                "str",
                "bytearray",
                "int",
                "List[dict]",
                "bytes"
            ],
            "arguments": {
                "function": [
                    "int",
                    "float",
                    "Optional[List[int]]",
                    "str"
                ],
                "a": [
                    "int",
                    "bool",
                    "float",
                    "list"
                ],
                "b": [
                    "int",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "f": {
            "name": "f",
            "location": 29,
            "return": [
                "List[str]",
                "bool",
                "int"
            ],
            "arguments": {
                "x": [
                    "Union[bytes, bytearray, memoryview]",
                    "float",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "PythonCode-master/arithmetic_analysis/intersection.py": {
        "intersection": {
            "name": "intersection",
            "location": 3,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "function": [
                    "T"
                ],
                "x0": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "Callable"
                ],
                "x1": [
                    "str",
                    "Optional[List[str]]",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "f": {
            "name": "f",
            "location": 13,
            "return": [
                "List[str]",
                "bool",
                "int"
            ],
            "arguments": {
                "x": [
                    "Union[bytes, bytearray, memoryview]",
                    "float",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "PythonCode-master/arithmetic_analysis/in_static_equilibrium.py": {
        "polar_force": {
            "name": "polar_force",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "magnitude": [
                    "float",
                    "str",
                    "bool",
                    "int",
                    "Iterable[List[str]]",
                    "Tuple[int]"
                ],
                "angle": [
                    "float",
                    "str",
                    "bool",
                    "int",
                    "Iterable[List[str]]",
                    "Tuple[int]"
                ],
                "radian_mode": [
                    "bool",
                    "str",
                    "Set[Tuple[int, int]]",
                    "Callable",
                    "Union[str, Tuple[str, str]]"
                ]
            }
        },
        "in_static_equilibrium": {
            "name": "in_static_equilibrium",
            "location": 29,
            "return": [
                "int",
                "Callable[[Mapping], T]",
                "Dict[str, str]"
            ],
            "arguments": {
                "forces": [
                    "numpy.array",
                    "int",
                    "dict",
                    "str"
                ],
                "location": [
                    "numpy.array",
                    "int",
                    "dict",
                    "str"
                ],
                "eps": [
                    "float",
                    "str",
                    "tuple"
                ]
            }
        }
    },
    "PythonCode-master/arithmetic_analysis/lu_decomposition.py": {
        "LUDecompose": {
            "name": "LUDecompose",
            "location": 7,
            "return": [],
            "arguments": {
                "table": []
            }
        }
    },
    "PythonCode-master/arithmetic_analysis/newton_method.py": {
        "newton": {
            "name": "newton",
            "location": 7,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "function": [
                    "int"
                ],
                "function1": [
                    "int"
                ],
                "startingInt": [
                    "Optional[int]",
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "f": {
            "name": "f",
            "location": 16,
            "return": [
                "List[int]",
                "str",
                "int"
            ],
            "arguments": {
                "x": [
                    "float"
                ]
            }
        },
        "f1": {
            "name": "f1",
            "location": 20,
            "return": [
                "float",
                "str",
                "T"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "List[T]",
                    "Tuple[int]"
                ]
            }
        }
    },
    "PythonCode-master/arithmetic_analysis/newton_raphson_method.py": {
        "NewtonRaphson": {
            "name": "NewtonRaphson",
            "location": 7,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str",
                "Optional[int]",
                "set"
            ],
            "arguments": {
                "func": [
                    "int",
                    "Iterable[T]"
                ],
                "a": []
            }
        }
    },
    "PythonCode-master/backtracking/all_combinations.py": {
        "generate_all_combinations": {
            "name": "generate_all_combinations",
            "location": 10,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "List[object]"
            ],
            "arguments": {
                "n": [
                    "int"
                ],
                "k": [
                    "int"
                ]
            }
        },
        "create_all_state": {
            "name": "create_all_state",
            "location": 21,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "increment": [
                    "int",
                    "bytes",
                    "str",
                    "List[str]"
                ],
                "total_number": [
                    "int",
                    "bool",
                    "str",
                    "float"
                ],
                "level": [
                    "int",
                    "bool",
                    "str",
                    "float"
                ],
                "current_list": [
                    "List[str]",
                    "List[Dict[Any, str]]",
                    "list",
                    "List[Dict[int, str]]"
                ],
                "total_list": [
                    "int",
                    "Callable"
                ]
            }
        },
        "print_all_state": {
            "name": "print_all_state",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "total_list": [
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "List[Tuple[str, str]]",
                    "list",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/backtracking/all_permutations.py": {
        "generate_all_permutations": {
            "name": "generate_all_permutations",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "sequence": [
                    "str",
                    "Tuple[int]",
                    "Sequence['cirq.Qid']",
                    "List[str]",
                    "list",
                    "List[Tuple]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "create_state_space_tree": {
            "name": "create_state_space_tree",
            "location": 14,
            "return": [
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "sequence": [
                    "List[str]",
                    "str",
                    "List[Dict[str, Any]]",
                    "List[T]",
                    "int",
                    "Union[str, List[str], Tuple[str, ...]]"
                ],
                "current_sequence": [
                    "str",
                    "bool",
                    "list"
                ],
                "index": [
                    "bool",
                    "int",
                    "Dict[str, List[str]]"
                ],
                "index_used": [
                    "bool",
                    "List[str]",
                    "Dict[str, Any]",
                    "str",
                    "Callable",
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/backtracking/all_subsequences.py": {
        "generate_all_subsequences": {
            "name": "generate_all_subsequences",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "sequence": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "create_state_space_tree": {
            "name": "create_state_space_tree",
            "location": 14,
            "return": [
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "sequence": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "dict"
                ],
                "current_subsequence": [
                    "Optional[str]",
                    "bytes",
                    "str",
                    "IO"
                ],
                "index": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "dict"
                ]
            }
        }
    },
    "PythonCode-master/backtracking/minimax.py": {
        "minimax": {
            "name": "minimax",
            "location": 11,
            "return": [
                "str",
                "int",
                "Callable"
            ],
            "arguments": {
                "Depth": [
                    "int",
                    "bool"
                ],
                "nodeIndex": [
                    "int",
                    "Optional[int]",
                    "float",
                    "Callable[[str], int]",
                    "bool"
                ],
                "isMax": [
                    "bool",
                    "List[Dict]",
                    "dict"
                ],
                "scores": [
                    "int",
                    "Optional[int]",
                    "float",
                    "Callable[[str], int]",
                    "bool"
                ],
                "height": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "PythonCode-master/backtracking/n_queens.py": {
        "isSafe": {
            "name": "isSafe",
            "location": 12,
            "return": [
                "bool"
            ],
            "arguments": {
                "board": [
                    "int",
                    "List[int]",
                    "Sequence[Any]",
                    "list",
                    "Sequence[int]",
                    "bytes"
                ],
                "row": [
                    "int",
                    "Tuple[str, str]",
                    "List[int]",
                    "List[str]",
                    "Sequence[str]"
                ],
                "column": [
                    "int",
                    "Sequence[str]",
                    "List[str]"
                ]
            }
        },
        "solve": {
            "name": "solve",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "board": [
                    "List[List[str]]",
                    "List[dict]",
                    "List[Tuple[str, int]]",
                    "list",
                    "List[Dict]",
                    "int",
                    "List[List[int]]"
                ],
                "row": [
                    "dict",
                    "List[List[str]]",
                    "List[str]",
                    "str",
                    "list"
                ]
            }
        },
        "printboard": {
            "name": "printboard",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "board": [
                    "str",
                    "List[List[Any]]",
                    "list",
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/backtracking/sum_of_subsets.py": {
        "generate_sum_of_subsets_soln": {
            "name": "generate_sum_of_subsets_soln",
            "location": 9,
            "return": [
                "bool",
                "Sequence[str]",
                "str"
            ],
            "arguments": {
                "nums": [
                    "bool",
                    "int",
                    "List[str]"
                ],
                "max_sum": [
                    "str",
                    "Set[str]",
                    "int",
                    "Tuple[str, str]"
                ]
            }
        },
        "create_state_space_tree": {
            "name": "create_state_space_tree",
            "location": 17,
            "return": [
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "nums": [
                    "int",
                    "Collection",
                    "Dict[str, int]",
                    "str"
                ],
                "max_sum": [
                    "int",
                    "Tuple[int, int]",
                    "List[Tuple[int, int]]",
                    "float",
                    "List[str]",
                    "str"
                ],
                "num_index": [
                    "int",
                    "Collection",
                    "Dict[str, int]",
                    "str"
                ],
                "path": [
                    "List[str]",
                    "str",
                    "int",
                    "list",
                    "bool"
                ],
                "result": [
                    "str",
                    "Optional[tuple]",
                    "Tuple[str, str]",
                    "List[str]",
                    "list"
                ],
                "remaining_nums_sum": [
                    "str",
                    "int",
                    "float"
                ]
            }
        }
    },
    "PythonCode-master/boolean_algebra/quine_mc_cluskey.py": {
        "compare_string": {
            "name": "compare_string",
            "location": 16,
            "return": [
                "str",
                "bytes",
                "Tuple[List[str], List[str]]",
                "\"Project\""
            ],
            "arguments": {
                "string1": [
                    "bool",
                    "str",
                    "List[str]",
                    "Callable[[float], bool]"
                ],
                "string2": [
                    "bool",
                    "str",
                    "List[str]",
                    "Callable[[float], bool]"
                ]
            }
        },
        "check": {
            "name": "check",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "binary": [
                    "list",
                    "List[List[str]]",
                    "List[List[Any]]",
                    "int"
                ]
            }
        },
        "decimal_to_binary": {
            "name": "decimal_to_binary",
            "location": 47,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "no_of_variable": [
                    "Callable",
                    "str",
                    "Union[int, float]"
                ],
                "minterms": [
                    "T",
                    "Mapping[str, Any]",
                    "list",
                    "int"
                ]
            }
        },
        "is_for_table": {
            "name": "is_for_table",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "string1": [
                    "str",
                    "bool",
                    "Tuple[str]",
                    "List[str]"
                ],
                "string2": [
                    "str",
                    "bool",
                    "Tuple[str]",
                    "List[str]"
                ],
                "count": [
                    "str",
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "selection": {
            "name": "selection",
            "location": 69,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "chart": [
                    "list",
                    "List[List[Any]]",
                    "int"
                ],
                "prime_implicants": [
                    "List[List[int]]",
                    "Union[str, bool, None]",
                    "int",
                    "Sequence['cirq.Qid']"
                ]
            }
        },
        "prime_implicant_chart": {
            "name": "prime_implicant_chart",
            "location": 106,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "prime_implicants": [
                    "int",
                    "list",
                    "float"
                ],
                "binary": [
                    "int",
                    "list",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/ciphers/affine_cipher.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "getKeyParts": {
            "name": "getKeyParts",
            "location": 19,
            "return": [
                "Dict[str, str]",
                "str",
                "dict",
                "Exception",
                "Dict[int, Dict[int, Any]]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "checkKeys": {
            "name": "checkKeys",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "keyA": [
                    "str",
                    "int",
                    "dict",
                    "Dict[bytes, bytes]",
                    "List[List[int]]",
                    "List[str]"
                ],
                "keyB": [
                    "int",
                    "str"
                ],
                "mode": [
                    "str",
                    "Optional[str]",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "encryptMessage": {
            "name": "encryptMessage",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "bytes",
                    "int",
                    "KT",
                    "Union[int, slice]",
                    "bool"
                ],
                "message": [
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "decryptMessage": {
            "name": "decryptMessage",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "bytes",
                    "int",
                    "KT",
                    "Union[int, slice]",
                    "bool"
                ],
                "message": [
                    "str",
                    "Union[float, int]"
                ]
            }
        },
        "getRandomKey": {
            "name": "getRandomKey",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/ciphers/atbash.py": {
        "Atbash": {
            "name": "Atbash",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "PythonCode-master/ciphers/base16.py": {
        "main": {
            "name": "main",
            "location": 3,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/ciphers/base32.py": {
        "main": {
            "name": "main",
            "location": 3,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/ciphers/base64_cipher.py": {
        "encodeBase64": {
            "name": "encodeBase64",
            "location": 1,
            "return": [
                "List[str]",
                "bool",
                "str",
                "set"
            ],
            "arguments": {
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "decodeBase64": {
            "name": "decodeBase64",
            "location": 26,
            "return": [
                "List[str]",
                "bool",
                "str",
                "set"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Optional[str]",
                    "Iterable[Tuple[int, int]]",
                    "Set[str]",
                    "List[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/ciphers/base85.py": {
        "main": {
            "name": "main",
            "location": 3,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/ciphers/brute_force_caesar_cipher.py": {
        "decrypt": {
            "name": "decrypt",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/ciphers/caesar_cipher.py": {
        "encrypt": {
            "name": "encrypt",
            "location": 1,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "strng": [
                    "str",
                    "Callable"
                ],
                "key": [
                    "str",
                    "int",
                    "Tuple[bool]"
                ]
            }
        },
        "decrypt": {
            "name": "decrypt",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "strng": [
                    "str",
                    "Callable"
                ],
                "key": [
                    "str",
                    "int",
                    "Tuple[bool]"
                ]
            }
        },
        "brute_force": {
            "name": "brute_force",
            "location": 20,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "strng": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/ciphers/cryptomath_module.py": {
        "gcd": {
            "name": "gcd",
            "location": 1,
            "return": [
                "bool",
                "str",
                "bytes"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "float"
                ]
            }
        },
        "findModInverse": {
            "name": "findModInverse",
            "location": 6,
            "return": [
                "str",
                "Optional[int]",
                "bool",
                "dict"
            ],
            "arguments": {
                "a": [
                    "float",
                    "int"
                ],
                "m": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Sequence[int]"
                ]
            }
        }
    },
    "PythonCode-master/ciphers/elgamal_key_generator.py": {
        "main": {
            "name": "main",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "primitiveRoot": {
            "name": "primitiveRoot",
            "location": 19,
            "return": [
                "bool",
                "Callable",
                "List[dict]",
                "int",
                "str"
            ],
            "arguments": {
                "p_val": [
                    "int",
                    "str",
                    "slice"
                ]
            }
        },
        "generateKey": {
            "name": "generateKey",
            "location": 30,
            "return": [
                "str",
                "Dict[str, List[Any]]"
            ],
            "arguments": {
                "keySize": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "makeKeyFiles": {
            "name": "makeKeyFiles",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "Sequence[str]"
                ],
                "keySize": [
                    "str",
                    "Optional[List[str]]",
                    "bytes"
                ]
            }
        }
    },
    "PythonCode-master/ciphers/hill_cipher.py": {
        "gcd": {
            "name": "gcd",
            "location": 44,
            "return": [
                "int",
                "Union[bytes, bytearray]",
                "str",
                "bytes"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ],
                "b": [
                    "int",
                    "float",
                    "numpy.ndarray"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "HillCipher.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "encrypt_key": [
                    "str",
                    "int"
                ]
            }
        },
        "HillCipher.checkDeterminant": {
            "name": "checkDeterminant",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HillCipher.processText": {
            "name": "processText",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "HillCipher.encrypt": {
            "name": "encrypt",
            "location": 92,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "HillCipher.makeDecryptKey": {
            "name": "makeDecryptKey",
            "location": 106,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "HillCipher.decrypt": {
            "name": "decrypt",
            "location": 122,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        }
    },
    "PythonCode-master/ciphers/morse_code_implementation.py": {
        "encrypt": {
            "name": "encrypt",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "decrypt": {
            "name": "decrypt",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/ciphers/onepad_cipher.py": {
        "Onepad.encrypt": {
            "name": "encrypt",
            "location": 7,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "Onepad.decrypt": {
            "name": "decrypt",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "cipher": [
                    "Tuple[bool]",
                    "slice",
                    "int",
                    "Dict[int, bool]",
                    "Union[int, Sequence[Any]]"
                ],
                "key": [
                    "int",
                    "str",
                    "Tuple[bool]",
                    "List[int]"
                ]
            }
        }
    },
    "PythonCode-master/ciphers/playfair_cipher.py": {
        "chunker": {
            "name": "chunker",
            "location": 4,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "seq": [
                    "int",
                    "float",
                    "bytes",
                    "set"
                ],
                "size": [
                    "int",
                    "List[int]",
                    "bool"
                ]
            }
        },
        "prepare_input": {
            "name": "prepare_input",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dirty": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "generate_table": {
            "name": "generate_table",
            "location": 39,
            "return": [
                "Optional[Iterable[Any]]",
                "type",
                "Optional[int]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "int"
                ]
            }
        },
        "encode": {
            "name": "encode",
            "location": 60,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "plaintext": [
                    "Iterable[Iterable[T]]",
                    "int",
                    "str",
                    "Optional[str]",
                    "bool",
                    "bytes"
                ],
                "key": [
                    "str",
                    "dict",
                    "Dict[str, List[Any]]",
                    "OrderedDict",
                    "List[str]"
                ]
            }
        },
        "decode": {
            "name": "decode",
            "location": 83,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ciphertext": [
                    "Iterable[Iterable[T]]",
                    "int",
                    "str",
                    "Optional[str]",
                    "bool",
                    "bytes"
                ],
                "key": [
                    "str",
                    "dict",
                    "Dict[str, List[Any]]",
                    "OrderedDict",
                    "List[str]"
                ]
            }
        }
    },
    "PythonCode-master/ciphers/rabin_miller.py": {
        "rabinMiller": {
            "name": "rabinMiller",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {
                "num": [
                    "str",
                    "Sequence[str]",
                    "List[int]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "isPrime": {
            "name": "isPrime",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "num": [
                    "Optional[int]",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "generateLargePrime": {
            "name": "generateLargePrime",
            "location": 55,
            "return": [
                "str",
                "List[int]",
                "Optional[str]",
                "List[str]",
                "Tuple[int, int]",
                "List[Tuple[int, int]]",
                "float"
            ],
            "arguments": {
                "keysize": [
                    "float",
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/ciphers/rot13.py": {
        "dencrypt": {
            "name": "dencrypt",
            "location": 2,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "s": [
                    "int",
                    "bool",
                    "Type[Exception]",
                    "str",
                    "Callable",
                    "Sequence",
                    "float"
                ],
                "n": [
                    "int",
                    "Optional[Union[int, float]]",
                    "str",
                    "float"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/ciphers/rsa_cipher.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "getBlocksFromText": {
            "name": "getBlocksFromText",
            "location": 40,
            "return": [
                "float",
                "bool"
            ],
            "arguments": {
                "message": [
                    "str",
                    "int",
                    "bool"
                ],
                "blockSize": [
                    "int",
                    "str",
                    "List[Tuple[int, int]]",
                    "Tuple[str]"
                ]
            }
        },
        "getTextFromBlocks": {
            "name": "getTextFromBlocks",
            "location": 52,
            "return": [
                "str",
                "Iterator"
            ],
            "arguments": {
                "blockInts": [
                    "bool",
                    "Callable[[int], None]",
                    "Callable",
                    "float"
                ],
                "messageLength": [
                    "int",
                    "Callable[[T], T]",
                    "OrderedDict",
                    "str",
                    "Optional[\"ReferenceTypeId\"]",
                    "type",
                    "bool"
                ],
                "blockSize": [
                    "bool",
                    "int",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "encryptMessage": {
            "name": "encryptMessage",
            "location": 65,
            "return": [
                "Sequence['cirq.Qid']",
                "str",
                "bool"
            ],
            "arguments": {
                "message": [
                    "str",
                    "int",
                    "bool"
                ],
                "key": [
                    "str",
                    "Optional[str]",
                    "Dict[str, bytes]",
                    "Optional[List[str]]",
                    "Optional[Tuple[str, str]]",
                    "Mapping"
                ],
                "blockSize": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "decryptMessage": {
            "name": "decryptMessage",
            "location": 74,
            "return": [
                "type",
                "str",
                "int"
            ],
            "arguments": {
                "encryptedBlocks": [
                    "float",
                    "bool",
                    "set",
                    "Optional[Callable[[], None]]"
                ],
                "messageLength": [
                    "bool"
                ],
                "key": [
                    "bool",
                    "str",
                    "Union[int, float]",
                    "Callable",
                    "float",
                    "Callable[[T], None]"
                ],
                "blockSize": [
                    "bool"
                ]
            }
        },
        "readKeyFile": {
            "name": "readKeyFile",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "keyFilename": [
                    "Optional[str]",
                    "str",
                    "Tuple[str]",
                    "bool",
                    "int"
                ]
            }
        },
        "encryptAndWriteToFile": {
            "name": "encryptAndWriteToFile",
            "location": 89,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "messageFilename": [
                    "str",
                    "int",
                    "Optional[str]",
                    "List[str]",
                    "Union[int, float]"
                ],
                "keyFilename": [
                    "bytes",
                    "int",
                    "BinaryIO",
                    "str"
                ],
                "message": [
                    "int",
                    "List[int]",
                    "Union[int, float]",
                    "str",
                    "dict"
                ],
                "blockSize": [
                    "int",
                    "bool",
                    "Optional[float]",
                    "Callable"
                ]
            }
        },
        "readFromFileAndDecrypt": {
            "name": "readFromFileAndDecrypt",
            "location": 105,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "messageFilename": [
                    "str",
                    "Dict[str, str]"
                ],
                "keyFilename": [
                    "bytes",
                    "Union[bytes, str]",
                    "Set[bytes]",
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/ciphers/rsa_key_generator.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "generateKey": {
            "name": "generateKey",
            "location": 10,
            "return": [
                "str",
                "Dict[str, List[Any]]"
            ],
            "arguments": {
                "keySize": [
                    "int"
                ]
            }
        },
        "makeKeyFiles": {
            "name": "makeKeyFiles",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "Sequence[str]"
                ],
                "keySize": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        }
    },
    "PythonCode-master/ciphers/simple_substitution_cipher.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "checkValidKey": {
            "name": "checkValidKey",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "key": [
                    "str",
                    "bytes",
                    "int",
                    "bool",
                    "Tuple['cirq.Qid']"
                ]
            }
        },
        "encryptMessage": {
            "name": "encryptMessage",
            "location": 31,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "key": [
                    "Hashable",
                    "str",
                    "int",
                    "Union[int, slice]"
                ],
                "message": [
                    "Hashable",
                    "str",
                    "int",
                    "Union[int, slice]"
                ]
            }
        },
        "decryptMessage": {
            "name": "decryptMessage",
            "location": 38,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "key": [
                    "Hashable",
                    "str",
                    "int",
                    "Union[int, slice]"
                ],
                "message": [
                    "Hashable",
                    "str",
                    "int",
                    "Union[int, slice]"
                ]
            }
        },
        "translateMessage": {
            "name": "translateMessage",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Optional[int]"
                ],
                "message": [
                    "str",
                    "bool"
                ],
                "mode": [
                    "str",
                    "bool"
                ]
            }
        },
        "getRandomKey": {
            "name": "getRandomKey",
            "location": 65,
            "return": [
                "str",
                "Optional[str]",
                "bytes",
                "int",
                "bool"
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/ciphers/trafid_cipher.py": {
        "__encryptPart": {
            "name": "__encryptPart",
            "location": 3,
            "return": [
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "messagePart": [
                    "str"
                ],
                "character2Number": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "__decryptPart": {
            "name": "__decryptPart",
            "location": 17,
            "return": [
                "str",
                "bool",
                "Tuple[int, int]"
            ],
            "arguments": {
                "messagePart": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "list",
                    "int"
                ],
                "character2Number": [
                    "int",
                    "float",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "__prepare": {
            "name": "__prepare",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "message": [
                    "bytes",
                    "int",
                    "dict"
                ],
                "alphabet": [
                    "bool",
                    "str",
                    "Union[int, str]",
                    "IO[str]"
                ]
            }
        },
        "encryptMessage": {
            "name": "encryptMessage",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "message": [
                    "Optional[str]",
                    "Callable[[T], T]",
                    "T",
                    "bytes"
                ],
                "alphabet": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bytes"
                ],
                "period": [
                    "Union[str, List[str]]",
                    "Callable[[None], bool]",
                    "Sequence"
                ]
            }
        },
        "decryptMessage": {
            "name": "decryptMessage",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "message": [
                    "bool",
                    "bytes",
                    "int"
                ],
                "alphabet": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bytes"
                ],
                "period": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "PythonCode-master/ciphers/transposition_cipher.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "encryptMessage": {
            "name": "encryptMessage",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Callable",
                    "bool"
                ],
                "message": [
                    "str",
                    "int",
                    "Union[int, slice]"
                ]
            }
        },
        "decryptMessage": {
            "name": "decryptMessage",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "str"
                ],
                "message": [
                    "bytes",
                    "int",
                    "str",
                    "Callable[[T], T]"
                ]
            }
        }
    },
    "PythonCode-master/ciphers/transposition_cipher_encrypt_decrypt_file.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/ciphers/vigenere_cipher.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "encryptMessage": {
            "name": "encryptMessage",
            "location": 19,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "key": [
                    "Hashable",
                    "str",
                    "int",
                    "Union[int, slice]"
                ],
                "message": [
                    "Hashable",
                    "str",
                    "int",
                    "Union[int, slice]"
                ]
            }
        },
        "decryptMessage": {
            "name": "decryptMessage",
            "location": 26,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "key": [
                    "Hashable",
                    "str",
                    "int",
                    "Union[int, slice]"
                ],
                "message": [
                    "Hashable",
                    "str",
                    "int",
                    "Union[int, slice]"
                ]
            }
        },
        "translateMessage": {
            "name": "translateMessage",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "key": [
                    "bytes",
                    "str",
                    "int",
                    "Union[str, int]",
                    "Optional[str]"
                ],
                "message": [
                    "str",
                    "bool"
                ],
                "mode": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "PythonCode-master/ciphers/xor_cipher.py": {
        "XORCipher.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "XORCipher.encrypt": {
            "name": "encrypt",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "Sequence[str]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "key": [
                    "str",
                    "dict",
                    "Sequence[str]",
                    "bool",
                    "int",
                    "Container[str]"
                ]
            }
        },
        "XORCipher.decrypt": {
            "name": "decrypt",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "Union[int, str]",
                    "bytes",
                    "str"
                ],
                "key": [
                    "str",
                    "\"models.Name\"",
                    "Dict[str, str]"
                ]
            }
        },
        "XORCipher.encrypt_string": {
            "name": "encrypt_string",
            "location": 81,
            "return": [
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "Dict[str, str]"
                ],
                "key": [
                    "int",
                    "Mapping",
                    "KT",
                    "dict",
                    "bytes",
                    "Callable[[T], Any]"
                ]
            }
        },
        "XORCipher.decrypt_string": {
            "name": "decrypt_string",
            "location": 106,
            "return": [
                "int",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "content": [
                    "str",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "Dict[str, str]"
                ],
                "key": [
                    "int",
                    "Mapping",
                    "KT",
                    "dict",
                    "bytes",
                    "Callable[[T], Any]"
                ]
            }
        },
        "XORCipher.encrypt_file": {
            "name": "encrypt_file",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "bool"
                ],
                "key": [
                    "str",
                    "bool"
                ]
            }
        },
        "XORCipher.decrypt_file": {
            "name": "decrypt_file",
            "location": 158,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "bool"
                ],
                "key": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "PythonCode-master/compression/burrows_wheeler.py": {
        "all_rotations": {
            "name": "all_rotations",
            "location": 16,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "bwt_transform": {
            "name": "bwt_transform",
            "location": 46,
            "return": [],
            "arguments": {
                "s": []
            }
        },
        "reverse_bwt": {
            "name": "reverse_bwt",
            "location": 84,
            "return": [],
            "arguments": {
                "bwt_string": [],
                "idx_original_string": []
            }
        }
    },
    "PythonCode-master/compression/huffman.py": {
        "parse_file": {
            "name": "parse_file",
            "location": 20,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "build_tree": {
            "name": "build_tree",
            "location": 34,
            "return": [
                "int"
            ],
            "arguments": {
                "letters": [
                    "Tuple['cirq.Qid']",
                    "List[Mapping[str, Any]]"
                ]
            }
        },
        "traverse_tree": {
            "name": "traverse_tree",
            "location": 48,
            "return": [],
            "arguments": {
                "root": [],
                "bitstring": [
                    "tuple",
                    "int"
                ]
            }
        },
        "huffman": {
            "name": "huffman",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "file_path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Letter.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "letter": [
                    "int",
                    "bool",
                    "float"
                ],
                "freq": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Letter.__repr__": {
            "name": "__repr__",
            "location": 9,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeNode.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "freq": [
                    "int",
                    "bool",
                    "float"
                ],
                "left": [
                    "int",
                    "bool",
                    "float"
                ],
                "right": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "PythonCode-master/compression/peak_signal_to_noise_ratio.py": {
        "psnr": {
            "name": "psnr",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "original": [
                    "int",
                    "Callable",
                    "str"
                ],
                "contrast": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/conversions/decimal_to_binary.py": {
        "decimal_to_binary": {
            "name": "decimal_to_binary",
            "location": 4,
            "return": [
                "bytes",
                "int",
                "dict",
                "str"
            ],
            "arguments": {
                "num": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "PythonCode-master/conversions/decimal_to_hexadecimal.py": {
        "decimal_to_hexadecimal": {
            "name": "decimal_to_hexadecimal",
            "location": 23,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "decimal": [
                    "int",
                    "str",
                    "float"
                ]
            }
        }
    },
    "PythonCode-master/conversions/decimal_to_octal.py": {
        "decimal_to_octal": {
            "name": "decimal_to_octal",
            "location": 9,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]",
                "bytes"
            ],
            "arguments": {
                "num": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/data_structures/binary_tree/avl_tree.py": {
        "getheight": {
            "name": "getheight",
            "location": 55,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "node": [
                    "Pattern"
                ]
            }
        },
        "my_max": {
            "name": "my_max",
            "location": 60,
            "return": [
                "float",
                "Tuple[Any, Any, Any]",
                "bytearray",
                "int",
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ],
                "b": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "leftrotation": {
            "name": "leftrotation",
            "location": 67,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "node": [
                    "list",
                    "bytes"
                ]
            }
        },
        "rightrotation": {
            "name": "rightrotation",
            "location": 89,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "node": [
                    "list",
                    "bytes"
                ]
            }
        },
        "rlrotation": {
            "name": "rlrotation",
            "location": 103,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "node": [
                    "List[int]"
                ]
            }
        },
        "lrrotation": {
            "name": "lrrotation",
            "location": 117,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "node": [
                    "List[int]"
                ]
            }
        },
        "insert_node": {
            "name": "insert_node",
            "location": 122,
            "return": [
                "bool",
                "Union[int, float, complex]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "node": [],
                "data": [
                    "Sequence[Any]"
                ]
            }
        },
        "getRightMost": {
            "name": "getRightMost",
            "location": 143,
            "return": [
                "str",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "root": [
                    "List[Union[str, \"SqlFile\"]]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "getLeftMost": {
            "name": "getLeftMost",
            "location": 147,
            "return": [
                "str",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "root": [
                    "List[Union[str, \"SqlFile\"]]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "del_node": {
            "name": "del_node",
            "location": 152,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "root": [
                    "bytes",
                    "Iterable",
                    "Exception"
                ],
                "data": [
                    "int",
                    "dict",
                    "memoryview"
                ]
            }
        },
        "my_queue.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "my_queue.isEmpty": {
            "name": "isEmpty",
            "location": 12,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "my_queue.push": {
            "name": "push",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "list",
                    "str",
                    "int",
                    "Dict[str, List[str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "my_queue.pop": {
            "name": "pop",
            "location": 17,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "my_queue.count": {
            "name": "count",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "my_queue.print": {
            "name": "print",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "my_node.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "bytes",
                    "Dict[str, str]",
                    "list",
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "my_node.getdata": {
            "name": "getdata",
            "location": 34,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "my_node.getleft": {
            "name": "getleft",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "my_node.getright": {
            "name": "getright",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "my_node.getheight": {
            "name": "getheight",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "my_node.setdata": {
            "name": "setdata",
            "location": 42,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "bytes",
                    "list",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "my_node.setleft": {
            "name": "setleft",
            "location": 45,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        },
        "my_node.setright": {
            "name": "setright",
            "location": 48,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "int"
                ]
            }
        },
        "my_node.setheight": {
            "name": "setheight",
            "location": 51,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "height": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "AVLtree.__init__": {
            "name": "__init__",
            "location": 190,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AVLtree.getheight": {
            "name": "getheight",
            "location": 192,
            "return": [
                "bool",
                "Callable",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "AVLtree.insert": {
            "name": "insert",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "bytes",
                    "T",
                    "dict"
                ]
            }
        },
        "AVLtree.del_node": {
            "name": "del_node",
            "location": 199,
            "return": [
                "int",
                "str",
                "DefaultDict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict",
                    "Dict[str, float]",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "AVLtree.traversale": {
            "name": "traversale",
            "location": 205,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AVLtree.test": {
            "name": "test",
            "location": 239,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PythonCode-master/data_structures/binary_tree/basic_binary_tree.py": {
        "display": {
            "name": "display",
            "location": 7,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "tree": [
                    "Optional[List[Any]]",
                    "str",
                    "T",
                    "Dict[str, Any]"
                ]
            }
        },
        "depth_of_tree": {
            "name": "depth_of_tree",
            "location": 22,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "tree": []
            }
        },
        "is_full_binary_tree": {
            "name": "is_full_binary_tree",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "tree": [
                    "str",
                    "Optional[List[Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "bytes",
                    "Dict[str, str]",
                    "list",
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        }
    },
    "PythonCode-master/data_structures/binary_tree/binary_search_tree.py": {
        "InPreOrder": {
            "name": "InPreOrder",
            "location": 189,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "curr_node": [
                    "Optional[str]",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "testBinarySearchTree": {
            "name": "testBinarySearchTree",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "Callable",
                    "Set[str]",
                    "int"
                ],
                "parent": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[bytes]"
                ]
            }
        },
        "Node.getLabel": {
            "name": "getLabel",
            "location": 14,
            "return": [
                "str",
                "Dict[str, Union[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.setLabel": {
            "name": "setLabel",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "Node.getLeft": {
            "name": "getLeft",
            "location": 20,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.setLeft": {
            "name": "setLeft",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "left": [
                    "bool",
                    "float"
                ]
            }
        },
        "Node.getRight": {
            "name": "getRight",
            "location": 26,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.setRight": {
            "name": "setRight",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "right": [
                    "bool",
                    "float"
                ]
            }
        },
        "Node.getParent": {
            "name": "getParent",
            "location": 32,
            "return": [
                "str",
                "dict",
                "Optional[str]",
                "Tuple[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.setParent": {
            "name": "setParent",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "bool",
                    "str",
                    "Type"
                ]
            }
        },
        "BinarySearchTree.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BinarySearchTree.insert": {
            "name": "insert",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "label": [
                    "Optional[\"Outcome\"]"
                ]
            }
        },
        "BinarySearchTree.delete": {
            "name": "delete",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "bool"
                ]
            }
        },
        "BinarySearchTree.getNode": {
            "name": "getNode",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "Optional[Callable]",
                    "str",
                    "Optional[Dict[str, str]]",
                    "Optional[Tuple[float, float]]",
                    "Optional[str]"
                ]
            }
        },
        "BinarySearchTree.getMax": {
            "name": "getMax",
            "location": 114,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "bool",
                    "List[Union[str, \"SqlFile\"]]",
                    "Optional[Union[Any, Any]]",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "BinarySearchTree.getMin": {
            "name": "getMin",
            "location": 125,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "root": [
                    "bool",
                    "List[Union[str, \"SqlFile\"]]",
                    "Optional[Union[Any, Any]]",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "BinarySearchTree.empty": {
            "name": "empty",
            "location": 137,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BinarySearchTree.__InOrderTraversal": {
            "name": "__InOrderTraversal",
            "location": 142,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "curr_node": [
                    "float",
                    "int"
                ]
            }
        },
        "BinarySearchTree.getRoot": {
            "name": "getRoot",
            "location": 150,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BinarySearchTree.__isRightChildren": {
            "name": "__isRightChildren",
            "location": 153,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "node": [
                    "dict"
                ]
            }
        },
        "BinarySearchTree.__reassignNodes": {
            "name": "__reassignNodes",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [],
                "newChildren": [
                    "Type[object]",
                    "Optional[ChainMap[str, Any]]",
                    "list"
                ]
            }
        },
        "BinarySearchTree.traversalTree": {
            "name": "traversalTree",
            "location": 172,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "traversalFunction": [
                    "Optional[List[str]]",
                    "Optional[Union[Any, Any]]",
                    "Optional[str]",
                    "Optional[int]",
                    "bool"
                ],
                "root": [
                    "str"
                ]
            }
        },
        "BinarySearchTree.__str__": {
            "name": "__str__",
            "location": 182,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PythonCode-master/data_structures/binary_tree/fenwick_tree.py": {
        "FenwickTree.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "SIZE": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "FenwickTree.update": {
            "name": "update",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "bool",
                    "Tuple[int, int]",
                    "Tuple[int, int, int]"
                ],
                "val": [
                    "int",
                    "List[List[int]]"
                ]
            }
        },
        "FenwickTree.query": {
            "name": "query",
            "location": 13,
            "return": [
                "str",
                "List[str]",
                "bool",
                "Union[bytes, str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/data_structures/binary_tree/lazy_segment_tree.py": {
        "SegmentTree.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "N": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "SegmentTree.left": {
            "name": "left",
            "location": 12,
            "return": [
                "bool",
                "float",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int",
                    "slice",
                    "Hashable"
                ]
            }
        },
        "SegmentTree.right": {
            "name": "right",
            "location": 15,
            "return": [
                "bool",
                "float",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int",
                    "slice",
                    "Hashable"
                ]
            }
        },
        "SegmentTree.build": {
            "name": "build",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "Dict[str, Any]"
                ],
                "l": [
                    "bool",
                    "int",
                    "str",
                    "Mapping[Any, Any]"
                ],
                "r": [
                    "bool"
                ],
                "A": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "SegmentTree.update": {
            "name": "update",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "bool",
                    "int"
                ],
                "l": [
                    "int",
                    "list",
                    "str"
                ],
                "r": [
                    "int",
                    "list",
                    "str"
                ],
                "a": [
                    "str",
                    "Callable",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "b": [
                    "str",
                    "Callable",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "val": [
                    "bool",
                    "List[int]",
                    "int",
                    "str"
                ]
            }
        },
        "SegmentTree.query": {
            "name": "query",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "bool"
                ],
                "l": [
                    "int",
                    "Sequence[Mapping]",
                    "Tuple[int]",
                    "Optional[int]"
                ],
                "r": [
                    "int",
                    "Tuple[int]",
                    "Optional[int]",
                    "Sequence[Mapping]"
                ],
                "a": [
                    "int",
                    "bool"
                ],
                "b": [
                    "int",
                    "bool"
                ]
            }
        },
        "SegmentTree.showData": {
            "name": "showData",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PythonCode-master/data_structures/binary_tree/lca.py": {
        "swap": {
            "name": "swap",
            "location": 4,
            "return": [
                "float",
                "Tuple[Any, Any, Any]",
                "bytearray",
                "int",
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "Sequence[T]",
                    "float"
                ],
                "b": [
                    "int",
                    "Sequence[T]",
                    "float"
                ]
            }
        },
        "creatSparse": {
            "name": "creatSparse",
            "location": 12,
            "return": [
                "Optional[int]",
                "Optional[List[Callable]]",
                "str"
            ],
            "arguments": {
                "max_node": [
                    "int",
                    "Optional[bool]"
                ],
                "parent": [
                    "Optional[List[Type]]",
                    "int",
                    "List[List[int]]"
                ]
            }
        },
        "LCA": {
            "name": "LCA",
            "location": 22,
            "return": [
                "str",
                "type",
                "Optional[Iterable[Any]]",
                "int",
                "bool"
            ],
            "arguments": {
                "u": [
                    "int",
                    "List['Product']",
                    "list"
                ],
                "v": [
                    "int",
                    "List[int]",
                    "List['Product']"
                ],
                "level": [
                    "List[int]",
                    "bool",
                    "str",
                    "float",
                    "Optional[float]"
                ],
                "parent": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "bfs": {
            "name": "bfs",
            "location": 45,
            "return": [
                "str",
                "type",
                "Optional[Iterable[Any]]",
                "int",
                "bool"
            ],
            "arguments": {
                "level": [
                    "List[int]",
                    "str",
                    "List[List[int]]",
                    "List[str]",
                    "Tuple[str, str]",
                    "int"
                ],
                "parent": [
                    "List[List[int]]",
                    "int",
                    "str",
                    "List[int]",
                    "List[Dict[str, Any]]",
                    "bytes"
                ],
                "max_node": [
                    "int",
                    "Optional[int]",
                    "str",
                    "float"
                ],
                "graph": [
                    "Dict[int, int]",
                    "int",
                    "Optional[Mapping]",
                    "Type['AbstractIntegrationConversation']",
                    "str"
                ],
                "root": [
                    "bool",
                    "IO",
                    "list"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/data_structures/binary_tree/red_black_tree.py": {
        "color": {
            "name": "color",
            "location": 487,
            "return": [],
            "arguments": {
                "node": []
            }
        },
        "test_rotations": {
            "name": "test_rotations",
            "location": 501,
            "return": [],
            "arguments": {}
        },
        "test_insertion_speed": {
            "name": "test_insertion_speed",
            "location": 537,
            "return": [],
            "arguments": {}
        },
        "test_insert": {
            "name": "test_insert",
            "location": 547,
            "return": [],
            "arguments": {}
        },
        "test_insert_and_search": {
            "name": "test_insert_and_search",
            "location": 568,
            "return": [],
            "arguments": {}
        },
        "test_insert_delete": {
            "name": "test_insert_delete",
            "location": 586,
            "return": [],
            "arguments": {}
        },
        "test_floor_ceil": {
            "name": "test_floor_ceil",
            "location": 610,
            "return": [],
            "arguments": {}
        },
        "test_min_max": {
            "name": "test_min_max",
            "location": 626,
            "return": [],
            "arguments": {}
        },
        "test_tree_traversal": {
            "name": "test_tree_traversal",
            "location": 640,
            "return": [],
            "arguments": {}
        },
        "test_tree_chaining": {
            "name": "test_tree_chaining",
            "location": 658,
            "return": [],
            "arguments": {}
        },
        "print_results": {
            "name": "print_results",
            "location": 671,
            "return": [],
            "arguments": {
                "msg": [],
                "passes": []
            }
        },
        "pytests": {
            "name": "pytests",
            "location": 675,
            "return": [],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 685,
            "return": [],
            "arguments": {}
        },
        "RedBlackTree.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [],
            "arguments": {
                "self": [],
                "label": [],
                "color": [],
                "parent": [],
                "left": [],
                "right": []
            }
        },
        "RedBlackTree.rotate_left": {
            "name": "rotate_left",
            "location": 37,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedBlackTree.rotate_right": {
            "name": "rotate_right",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedBlackTree.insert": {
            "name": "insert",
            "location": 77,
            "return": [],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "RedBlackTree._insert_repair": {
            "name": "_insert_repair",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedBlackTree.remove": {
            "name": "remove",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "RedBlackTree._remove_repair": {
            "name": "_remove_repair",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedBlackTree.check_color_properties": {
            "name": "check_color_properties",
            "location": 253,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedBlackTree.check_coloring": {
            "name": "check_coloring",
            "location": 290,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedBlackTree.black_height": {
            "name": "black_height",
            "location": 303,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedBlackTree.__contains__": {
            "name": "__contains__",
            "location": 325,
            "return": [],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "RedBlackTree.search": {
            "name": "search",
            "location": 332,
            "return": [],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "RedBlackTree.floor": {
            "name": "floor",
            "location": 350,
            "return": [],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "RedBlackTree.ceil": {
            "name": "ceil",
            "location": 367,
            "return": [],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "RedBlackTree.get_max": {
            "name": "get_max",
            "location": 385,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedBlackTree.get_min": {
            "name": "get_min",
            "location": 395,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedBlackTree.grandparent": {
            "name": "grandparent",
            "location": 406,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedBlackTree.sibling": {
            "name": "sibling",
            "location": 414,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedBlackTree.is_left": {
            "name": "is_left",
            "location": 423,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedBlackTree.is_right": {
            "name": "is_right",
            "location": 427,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedBlackTree.__bool__": {
            "name": "__bool__",
            "location": 431,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedBlackTree.__len__": {
            "name": "__len__",
            "location": 434,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedBlackTree.preorder_traverse": {
            "name": "preorder_traverse",
            "location": 445,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedBlackTree.inorder_traverse": {
            "name": "inorder_traverse",
            "location": 452,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedBlackTree.postorder_traverse": {
            "name": "postorder_traverse",
            "location": 459,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedBlackTree.__repr__": {
            "name": "__repr__",
            "location": 466,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "RedBlackTree.__eq__": {
            "name": "__eq__",
            "location": 479,
            "return": [],
            "arguments": {
                "self": [],
                "other": []
            }
        }
    },
    "PythonCode-master/data_structures/binary_tree/segment_tree.py": {
        "SegmentTree.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "A": [
                    "int",
                    "list",
                    "Sequence[Any]",
                    "bool",
                    "Sequence[int]"
                ]
            }
        },
        "SegmentTree.left": {
            "name": "left",
            "location": 11,
            "return": [
                "bool",
                "float",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int",
                    "slice",
                    "Hashable"
                ]
            }
        },
        "SegmentTree.right": {
            "name": "right",
            "location": 14,
            "return": [
                "bool",
                "float",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int",
                    "slice",
                    "Hashable"
                ]
            }
        },
        "SegmentTree.build": {
            "name": "build",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "dict"
                ],
                "l": [
                    "int",
                    "bool",
                    "float",
                    "Optional[int]"
                ],
                "r": [
                    "dict",
                    "int",
                    "bool"
                ]
            }
        },
        "SegmentTree.update": {
            "name": "update",
            "location": 26,
            "return": [
                "str",
                "int",
                "bool",
                "Optional[float]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "float",
                    "int",
                    "list"
                ],
                "b": [
                    "float",
                    "int",
                    "list"
                ],
                "val": [
                    "float",
                    "int",
                    "list"
                ]
            }
        },
        "SegmentTree.update_recursive": {
            "name": "update_recursive",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int",
                    "float"
                ],
                "l": [
                    "str",
                    "Sequence[Any]",
                    "Dict[str, Any]",
                    "List[str]",
                    "bool",
                    "Callable"
                ],
                "r": [
                    "Optional[int]",
                    "Sequence[Any]",
                    "Sequence[Sequence[Any]]",
                    "float",
                    "bool"
                ],
                "a": [
                    "bool",
                    "int",
                    "Sequence[Sequence[Any]]",
                    "Callable",
                    "float"
                ],
                "b": [
                    "bool",
                    "int",
                    "Sequence[Sequence[Any]]",
                    "Callable",
                    "float"
                ],
                "val": [
                    "int",
                    "float"
                ]
            }
        },
        "SegmentTree.query": {
            "name": "query",
            "location": 41,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "str",
                    "Union[int, float]",
                    "bool"
                ],
                "b": [
                    "int",
                    "str",
                    "Union[int, float]",
                    "bool"
                ]
            }
        },
        "SegmentTree.query_recursive": {
            "name": "query_recursive",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "int",
                    "List[float]",
                    "Optional[int]"
                ],
                "l": [
                    "int"
                ],
                "r": [
                    "int"
                ],
                "a": [
                    "int",
                    "float",
                    "Union[int, bool]",
                    "str"
                ],
                "b": [
                    "int",
                    "float",
                    "Union[int, bool]",
                    "str"
                ]
            }
        },
        "SegmentTree.showData": {
            "name": "showData",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PythonCode-master/data_structures/binary_tree/treap.py": {
        "split": {
            "name": "split",
            "location": 17,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[int]",
                "Optional[List[str]]",
                "List[str]"
            ],
            "arguments": {
                "root": [
                    "str",
                    "bool",
                    "Optional[Any]",
                    "int"
                ],
                "key": [
                    "str",
                    "Optional[str]",
                    "Union[Callable[[Dict], Hashable], str]"
                ]
            }
        },
        "merge": {
            "name": "merge",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "left": [
                    "bytes",
                    "Dict[str, List]",
                    "Dict[str, Any]",
                    "str",
                    "dict"
                ],
                "right": [
                    "bytes",
                    "Dict[str, List]",
                    "Dict[str, Any]",
                    "str",
                    "dict"
                ]
            }
        },
        "insert": {
            "name": "insert",
            "location": 68,
            "return": [
                "str"
            ],
            "arguments": {
                "root": [
                    "str"
                ],
                "key": [
                    "str",
                    "Dict[str, Any]",
                    "Container[str]",
                    "bool",
                    "dict"
                ]
            }
        },
        "erase": {
            "name": "erase",
            "location": 83,
            "return": [
                "bool",
                "int",
                "List[List[str]]"
            ],
            "arguments": {
                "root": [
                    "str",
                    "List[str]",
                    "Pattern"
                ],
                "key": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "node_print": {
            "name": "node_print",
            "location": 96,
            "return": [
                "int",
                "str",
                "Union[int, slice]"
            ],
            "arguments": {
                "root": [
                    "Protocol",
                    "Type[object]",
                    "str"
                ]
            }
        },
        "interactTreap": {
            "name": "interactTreap",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "List[str]",
                    "bytes"
                ]
            }
        }
    },
    "PythonCode-master/data_structures/hashing/double_hash.py": {
        "DoubleHash.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DoubleHash.__hash_function_2": {
            "name": "__hash_function_2",
            "location": 14,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "int",
                    "float"
                ],
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "bytes"
                ]
            }
        },
        "DoubleHash.__hash_double_function": {
            "name": "__hash_double_function",
            "location": 20,
            "return": [
                "Mapping[str, Any]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "Hashable",
                    "str",
                    "List[Dict]",
                    "int"
                ],
                "data": [
                    "bytes",
                    "Hashable",
                    "str",
                    "List[Dict]",
                    "int"
                ],
                "increment": [
                    "bytes",
                    "Hashable",
                    "str",
                    "List[Dict]",
                    "int"
                ]
            }
        },
        "DoubleHash._colision_resolution": {
            "name": "_colision_resolution",
            "location": 23,
            "return": [
                "str",
                "Set[str]",
                "Iterable[Sequence[str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "Dict[str, Union[str, Any]]"
                ],
                "data": [
                    "bytes",
                    "Tuple[str, str]"
                ]
            }
        }
    },
    "PythonCode-master/data_structures/hashing/hash_table.py": {
        "HashTable.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "size_table": [
                    "str",
                    "Union[List[str], List[Any]]",
                    "Optional[\"Texte\"]",
                    "Optional[int]",
                    "Optional[object]"
                ],
                "charge_factor": [
                    "Union[List, Dict, None]",
                    "bool",
                    "str",
                    "Optional[object]",
                    "Tuple[int, int]",
                    "Sequence[str]"
                ],
                "lim_charge": [
                    "Union[List, Dict, None]",
                    "bool",
                    "str",
                    "Optional[object]",
                    "Tuple[int, int]",
                    "Sequence[str]"
                ]
            }
        },
        "HashTable.keys": {
            "name": "keys",
            "location": 18,
            "return": [
                "str",
                "List[str]",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashTable.balanced_factor": {
            "name": "balanced_factor",
            "location": 21,
            "return": [
                "str",
                "List[Dict[str, str]]",
                "Tuple[int, int]",
                "Optional[dict]",
                "list",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashTable.hash_function": {
            "name": "hash_function",
            "location": 25,
            "return": [
                "bool",
                "str",
                "Optional[bytes]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ]
            }
        },
        "HashTable._step_by_step": {
            "name": "_step_by_step",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "step_ord": [
                    "str",
                    "int",
                    "Tuple['cirq.Qid']"
                ]
            }
        },
        "HashTable.bulk_insert": {
            "name": "bulk_insert",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "values": [
                    "Optional[List]",
                    "T",
                    "str",
                    "int",
                    "Union[str, bytes]",
                    "List[str]",
                    "list"
                ]
            }
        },
        "HashTable._set_value": {
            "name": "_set_value",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "data": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "HashTable._colision_resolution": {
            "name": "_colision_resolution",
            "location": 46,
            "return": [
                "str",
                "Set[str]",
                "Iterable[Sequence[str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ],
                "data": [
                    "str",
                    "Iterable[str]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "HashTable.rehashing": {
            "name": "rehashing",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HashTable.insert_data": {
            "name": "insert_data",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "PythonCode-master/data_structures/hashing/hash_table_with_linked_list.py": {
        "HashTableWithLinkedList.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HashTableWithLinkedList._set_value": {
            "name": "_set_value",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[int]"
                ],
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "bool"
                ]
            }
        },
        "HashTableWithLinkedList.balanced_factor": {
            "name": "balanced_factor",
            "location": 14,
            "return": [
                "str",
                "int",
                "Iterable[Iterable[T]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "HashTableWithLinkedList._colision_resolution": {
            "name": "_colision_resolution",
            "location": 18,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "Optional[Callable]"
                ],
                "data": [
                    "str",
                    "bytes",
                    "Optional[bytes]",
                    "Optional[str]"
                ]
            }
        }
    },
    "PythonCode-master/data_structures/hashing/quadratic_probing.py": {
        "QuadraticProbing.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "QuadraticProbing._colision_resolution": {
            "name": "_colision_resolution",
            "location": 13,
            "return": [
                "str",
                "Set[str]",
                "Iterable[Sequence[str]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ],
                "data": [
                    "str",
                    "Iterable[str]",
                    "bytes",
                    "bool"
                ]
            }
        }
    },
    "PythonCode-master/data_structures/hashing/number_theory/prime_numbers.py": {
        "check_prime": {
            "name": "check_prime",
            "location": 7,
            "return": [
                "Optional[int]",
                "bool",
                "str",
                "Sequence[T]",
                "Sequence[Union[str, Any]]",
                "list",
                "List[str]"
            ],
            "arguments": {
                "number": [
                    "Union[bool, str, int]",
                    "float",
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "next_prime": {
            "name": "next_prime",
            "location": 20,
            "return": [
                "int",
                "float",
                "List[int]",
                "tuple",
                "bool",
                "str"
            ],
            "arguments": {
                "value": [
                    "int",
                    "str",
                    "T",
                    "Union[str, 'Type']"
                ],
                "factor": [
                    "str",
                    "int",
                    "Union[str, bytes]",
                    "Iterable"
                ]
            }
        }
    },
    "PythonCode-master/data_structures/hashing/number_theory/__init__.py": {},
    "PythonCode-master/data_structures/heap/heap.py": {
        "main": {
            "name": "main",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Heap.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Heap.leftChild": {
            "name": "leftChild",
            "location": 16,
            "return": [
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int"
                ]
            }
        },
        "Heap.rightChild": {
            "name": "rightChild",
            "location": 21,
            "return": [
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int"
                ]
            }
        },
        "Heap.maxHeapify": {
            "name": "maxHeapify",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": []
            }
        },
        "Heap.buildHeap": {
            "name": "buildHeap",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "a": [
                    "int",
                    "float",
                    "Sequence[T]",
                    "Union[int, float]"
                ]
            }
        },
        "Heap.getMax": {
            "name": "getMax",
            "location": 47,
            "return": [
                "Optional[int]",
                "bool",
                "str",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "dict",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Heap.heapSort": {
            "name": "heapSort",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Heap.insert": {
            "name": "insert",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Mapping[str, Any]",
                    "dict",
                    "Dict[str, Any]",
                    "float",
                    "List[List[Any]]"
                ]
            }
        },
        "Heap.display": {
            "name": "display",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PythonCode-master/data_structures/linked_list/doubly_linked_list.py": {
        "LinkedList.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.insertHead": {
            "name": "insertHead",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "T"
                ]
            }
        },
        "LinkedList.deleteHead": {
            "name": "deleteHead",
            "location": 24,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.insertTail": {
            "name": "insertTail",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "Dict[str, Any]",
                    "bool",
                    "T"
                ]
            }
        },
        "LinkedList.deleteTail": {
            "name": "deleteTail",
            "location": 39,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.delete": {
            "name": "delete",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "str",
                    "Callable",
                    "bytes",
                    "Exception"
                ]
            }
        },
        "LinkedList.isEmpty": {
            "name": "isEmpty",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.display": {
            "name": "display",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Link.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "List[str]",
                    "Tuple[int, int]",
                    "str",
                    "List['Token']"
                ]
            }
        },
        "Link.displayLink": {
            "name": "displayLink",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PythonCode-master/data_structures/linked_list/is_palindrome.py": {
        "is_palindrome": {
            "name": "is_palindrome",
            "location": 1,
            "return": [
                "bool"
            ],
            "arguments": {
                "head": [
                    "int",
                    "str"
                ]
            }
        },
        "is_palindrome_stack": {
            "name": "is_palindrome_stack",
            "location": 28,
            "return": [
                "bool"
            ],
            "arguments": {
                "head": [
                    "str",
                    "int"
                ]
            }
        },
        "is_palindrome_dict": {
            "name": "is_palindrome_dict",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "head": [
                    "str",
                    "Set[str]"
                ]
            }
        }
    },
    "PythonCode-master/data_structures/linked_list/singly_linked_list.py": {
        "main": {
            "name": "main",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "bytes",
                    "Dict[str, str]",
                    "list",
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "Linked_List.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Linked_List.insert_tail": {
            "name": "insert_tail",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Union[int, str]",
                    "int",
                    "Tuple[int, int, bytearray]",
                    "bool"
                ]
            }
        },
        "Linked_List.insert_head": {
            "name": "insert_head",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Union[int, str]",
                    "int",
                    "Tuple[int, int, bytearray]",
                    "bool"
                ]
            }
        },
        "Linked_List.printList": {
            "name": "printList",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Linked_List.delete_head": {
            "name": "delete_head",
            "location": 34,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Linked_List.delete_tail": {
            "name": "delete_tail",
            "location": 41,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Linked_List.isEmpty": {
            "name": "isEmpty",
            "location": 52,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Linked_List.reverse": {
            "name": "reverse",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PythonCode-master/data_structures/linked_list/swap_nodes.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "bytes",
                    "Dict[str, str]",
                    "list",
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "Linkedlist.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Linkedlist.print_list": {
            "name": "print_list",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Linkedlist.push": {
            "name": "push",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "new_data": [
                    "Dict[str, Any]",
                    "bool",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "Linkedlist.swapNodes": {
            "name": "swapNodes",
            "location": 24,
            "return": [
                "set",
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "d1": [
                    "int",
                    "bool",
                    "Type[T]",
                    "Type",
                    "Optional[str]",
                    "Optional[float]"
                ],
                "d2": [
                    "int",
                    "bool",
                    "Type[T]",
                    "Type",
                    "Optional[str]",
                    "Optional[float]"
                ]
            }
        }
    },
    "PythonCode-master/data_structures/linked_list/__init__.py": {
        "Node.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Mapping[str, Dict[str, Any]]",
                    "Dict[str, Dict[str, str]]",
                    "Dict[str, int]"
                ],
                "next": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Union[int, float]",
                    "List[str]",
                    "List[Dict]"
                ]
            }
        },
        "LinkedList.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.add": {
            "name": "add",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Iterable[Any]",
                    "list",
                    "int"
                ]
            }
        },
        "LinkedList.remove": {
            "name": "remove",
            "location": 13,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "LinkedList.is_empty": {
            "name": "is_empty",
            "location": 21,
            "return": [
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PythonCode-master/data_structures/queue/double_ended_queue.py": {},
    "PythonCode-master/data_structures/queue/queue_on_list.py": {
        "Queue.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.__str__": {
            "name": "__str__",
            "location": 8,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.put": {
            "name": "put",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "str",
                    "T",
                    "Callable"
                ]
            }
        },
        "Queue.get": {
            "name": "get",
            "location": 24,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.rotate": {
            "name": "rotate",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rotation": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Queue.front": {
            "name": "front",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.size": {
            "name": "size",
            "location": 45,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PythonCode-master/data_structures/queue/queue_on_pseudo_stack.py": {
        "Queue.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.__str__": {
            "name": "__str__",
            "location": 7,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.put": {
            "name": "put",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "item": [
                    "int",
                    "str",
                    "T",
                    "Callable"
                ]
            }
        },
        "Queue.get": {
            "name": "get",
            "location": 22,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.rotate": {
            "name": "rotate",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rotation": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Queue.front": {
            "name": "front",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.size": {
            "name": "size",
            "location": 49,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PythonCode-master/data_structures/stacks/balanced_parentheses.py": {
        "balanced_parentheses": {
            "name": "balanced_parentheses",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "parentheses": [
                    "str",
                    "list",
                    "Optional[str]",
                    "List[int]",
                    "bool"
                ]
            }
        }
    },
    "PythonCode-master/data_structures/stacks/infix_to_postfix_conversion.py": {
        "is_operand": {
            "name": "is_operand",
            "location": 10,
            "return": [
                "bool",
                "float",
                "Optional[Type]"
            ],
            "arguments": {
                "char": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "precedence": {
            "name": "precedence",
            "location": 14,
            "return": [
                "int",
                "Tuple[int, int]"
            ],
            "arguments": {
                "char": [
                    "str"
                ]
            }
        },
        "infix_to_postfix": {
            "name": "infix_to_postfix",
            "location": 26,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "expression": [
                    "str",
                    "List[int]",
                    "int",
                    "list",
                    "List[str]"
                ]
            }
        }
    },
    "PythonCode-master/data_structures/stacks/infix_to_prefix_conversion.py": {
        "infix_2_postfix": {
            "name": "infix_2_postfix",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "Infix": [
                    "Sequence[T]",
                    "List[int]",
                    "int",
                    "List[float]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "infix_2_prefix": {
            "name": "infix_2_prefix",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "Infix": [
                    "List[int]",
                    "str",
                    "list",
                    "List[List[Any]]",
                    "Sequence[str]"
                ]
            }
        }
    },
    "PythonCode-master/data_structures/stacks/next_greater_element.py": {
        "printNGE": {
            "name": "printNGE",
            "location": 3,
            "return": [
                ""
            ],
            "arguments": {
                "arr": [
                    "str",
                    "list",
                    "List[List[Any]]",
                    "List[int]",
                    "List[List[int]]"
                ]
            }
        }
    },
    "PythonCode-master/data_structures/stacks/postfix_evaluation.py": {
        "Solve": {
            "name": "Solve",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "Postfix": [
                    "int",
                    "Sequence[T]"
                ]
            }
        }
    },
    "PythonCode-master/data_structures/stacks/stack.py": {
        "Stack.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "limit": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Stack.__bool__": {
            "name": "__bool__",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.__str__": {
            "name": "__str__",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.push": {
            "name": "push",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Mapping[str, Any]",
                    "dict",
                    "Dict[str, Any]",
                    "float",
                    "List[List[Any]]"
                ]
            }
        },
        "Stack.pop": {
            "name": "pop",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.peek": {
            "name": "peek",
            "location": 38,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.is_empty": {
            "name": "is_empty",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.size": {
            "name": "size",
            "location": 47,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PythonCode-master/data_structures/stacks/stock_span_problem.py": {
        "calculateSpan": {
            "name": "calculateSpan",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "price": [
                    "int",
                    "List[int]",
                    "list",
                    "str",
                    "List[Tuple[str, str]]"
                ],
                "S": [
                    "int",
                    "str",
                    "Set[str]",
                    "List[int]",
                    "List[str]",
                    "Sequence[T]"
                ]
            }
        },
        "printArray": {
            "name": "printArray",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "arr": [
                    "int",
                    "str",
                    "float"
                ],
                "n": [
                    "int",
                    "bool",
                    "Iterable[T]"
                ]
            }
        }
    },
    "PythonCode-master/data_structures/stacks/__init__.py": {
        "Stack.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.is_empty": {
            "name": "is_empty",
            "location": 7,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stack.push": {
            "name": "push",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "dict",
                    "int",
                    "T"
                ]
            }
        },
        "Stack.pop": {
            "name": "pop",
            "location": 18,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PythonCode-master/data_structures/trie/trie.py": {
        "print_words": {
            "name": "print_words",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "node": [
                    "int",
                    "Optional[str]",
                    "List[int]"
                ],
                "word": [
                    "str",
                    "Callable[[T], T]"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TrieNode.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TrieNode.insert_many": {
            "name": "insert_many",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "words": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TrieNode.insert": {
            "name": "insert",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TrieNode.find": {
            "name": "find",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "List[str]",
                    "bool",
                    "List[object]",
                    "Sized",
                    "Optional[List]",
                    "str"
                ]
            }
        }
    },
    "PythonCode-master/digital_image_processing/change_contrast.py": {
        "change_contrast": {
            "name": "change_contrast",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "img": [
                    "int",
                    "Callable",
                    "str"
                ],
                "level": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "change_contrast.contrast": {
            "name": "contrast",
            "location": 20,
            "return": [
                "str",
                "List[str]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "c": [
                    "int",
                    "str",
                    "Counter",
                    "Iterable[Tuple[int, int]]"
                ]
            }
        }
    },
    "PythonCode-master/digital_image_processing/test_digital_image_processing.py": {
        "test_change_contrast": {
            "name": "test_change_contrast",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_gen_gaussian_kernel": {
            "name": "test_gen_gaussian_kernel",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_canny": {
            "name": "test_canny",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_gen_gaussian_kernel_filter": {
            "name": "test_gen_gaussian_kernel_filter",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_convolve_filter": {
            "name": "test_convolve_filter",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_median_filter": {
            "name": "test_median_filter",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sobel_filter": {
            "name": "test_sobel_filter",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/digital_image_processing/__init__.py": {},
    "PythonCode-master/digital_image_processing/edge_detection/canny.py": {
        "gen_gaussian_kernel": {
            "name": "gen_gaussian_kernel",
            "location": 9,
            "return": [],
            "arguments": {
                "k_size": [],
                "sigma": []
            }
        },
        "canny": {
            "name": "canny",
            "location": 16,
            "return": [],
            "arguments": {
                "image": [],
                "threshold_low": [],
                "threshold_high": [],
                "weak": [],
                "strong": []
            }
        }
    },
    "PythonCode-master/digital_image_processing/edge_detection/__init__.py": {},
    "PythonCode-master/digital_image_processing/filters/convolve.py": {
        "im2col": {
            "name": "im2col",
            "location": 8,
            "return": [],
            "arguments": {
                "image": [],
                "block_size": []
            }
        },
        "img_convolve": {
            "name": "img_convolve",
            "location": 23,
            "return": [],
            "arguments": {
                "image": [],
                "filter_kernel": []
            }
        }
    },
    "PythonCode-master/digital_image_processing/filters/gaussian_filter.py": {
        "gen_gaussian_kernel": {
            "name": "gen_gaussian_kernel",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "k_size": [
                    "int",
                    "Union[Tuple[int, int], int]",
                    "bool"
                ],
                "sigma": [
                    "int",
                    "float"
                ]
            }
        },
        "gaussian_filter": {
            "name": "gaussian_filter",
            "location": 15,
            "return": [
                "str",
                "dict",
                "bytes"
            ],
            "arguments": {
                "image": [
                    "int",
                    "bytes",
                    "float",
                    "numpy.ndarray",
                    "List[int]"
                ],
                "k_size": [
                    "int",
                    "float"
                ],
                "sigma": [
                    "int",
                    "Union[int, Tuple[int, int]]",
                    "str",
                    "bool",
                    "Optional[int]"
                ]
            }
        }
    },
    "PythonCode-master/digital_image_processing/filters/median_filter.py": {
        "median_filter": {
            "name": "median_filter",
            "location": 9,
            "return": [
                "str",
                "dict",
                "bytes"
            ],
            "arguments": {
                "gray_img": [
                    "int",
                    "bytes",
                    "List[List[T]]",
                    "float"
                ],
                "mask": [
                    "list",
                    "float",
                    "str"
                ]
            }
        }
    },
    "PythonCode-master/digital_image_processing/filters/sobel_filter.py": {
        "sobel_filter": {
            "name": "sobel_filter",
            "location": 9,
            "return": [],
            "arguments": {
                "image": []
            }
        }
    },
    "PythonCode-master/digital_image_processing/filters/__init__.py": {},
    "PythonCode-master/divide_and_conquer/closest_pair_of_points.py": {
        "euclidean_distance_sqr": {
            "name": "euclidean_distance_sqr",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "point1": [
                    "int",
                    "Callable",
                    "str"
                ],
                "point2": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "column_based_sort": {
            "name": "column_based_sort",
            "location": 31,
            "return": [
                "bool",
                "Sequence",
                "str",
                "int",
                "Hashable"
            ],
            "arguments": {
                "array": [
                    "float",
                    "bool",
                    "str"
                ],
                "column": [
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "dis_between_closest_pair": {
            "name": "dis_between_closest_pair",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "points": [
                    "Optional[Union[str, Any]]",
                    "Dict[str, T]",
                    "int",
                    "List[int]"
                ],
                "points_counts": [
                    "int",
                    "List[Tuple[int, int]]"
                ],
                "min_dis": [
                    "bool",
                    "str"
                ]
            }
        },
        "dis_between_closest_in_strip": {
            "name": "dis_between_closest_in_strip",
            "location": 62,
            "return": [
                "float",
                "Dict[str, str]",
                "List[str]",
                "str",
                "int"
            ],
            "arguments": {
                "points": [
                    "float",
                    "Optional[Union[str, Any]]",
                    "Dict[str, T]",
                    "int",
                    "List[int]"
                ],
                "points_counts": [
                    "int",
                    "str",
                    "Union[int, float]"
                ],
                "min_dis": [
                    "bool",
                    "str"
                ]
            }
        },
        "closest_pair_of_points_sqr": {
            "name": "closest_pair_of_points_sqr",
            "location": 84,
            "return": [
                "Sequence",
                "str"
            ],
            "arguments": {
                "points_sorted_on_x": [
                    "str",
                    "int",
                    "bool"
                ],
                "points_sorted_on_y": [
                    "Optional[Collection[int]]",
                    "int",
                    "List[List[int]]"
                ],
                "points_counts": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "closest_pair_of_points": {
            "name": "closest_pair_of_points",
            "location": 126,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "points": [
                    "float",
                    "int"
                ],
                "points_counts": [
                    "Sequence",
                    "str"
                ]
            }
        }
    },
    "PythonCode-master/divide_and_conquer/max_subarray_sum.py": {
        "max_sum_from_start": {
            "name": "max_sum_from_start",
            "location": 13,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "array": [
                    "Optional[Dict]",
                    "str",
                    "bool",
                    "List[Dict[str, str]]",
                    "Optional[dict]"
                ]
            }
        },
        "max_cross_array_sum": {
            "name": "max_cross_array_sum",
            "location": 32,
            "return": [
                "int",
                "Optional[int]",
                "List[int]"
            ],
            "arguments": {
                "array": [
                    "int",
                    "float"
                ],
                "left": [
                    "int",
                    "float"
                ],
                "mid": [
                    "int",
                    "float"
                ],
                "right": [
                    "int",
                    "float"
                ]
            }
        },
        "max_subarray_sum": {
            "name": "max_subarray_sum",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "array": [
                    "float",
                    "int",
                    "str"
                ],
                "left": [
                    "int",
                    "dict",
                    "List[int]"
                ],
                "right": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "PythonCode-master/dynamic_programming/abbreviation.py": {
        "abbr": {
            "name": "abbr",
            "location": 15,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "a": [
                    "int",
                    "List[int]",
                    "Union[int, float, str]",
                    "Union[str, float]"
                ],
                "b": [
                    "int",
                    "List[int]",
                    "list",
                    "Union[int, float]",
                    "bool",
                    "Sequence"
                ]
            }
        }
    },
    "PythonCode-master/dynamic_programming/bitmask.py": {
        "AssignmentUsingBitmask.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "task_performed": [
                    "int",
                    "str"
                ],
                "total": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "AssignmentUsingBitmask.CountWaysUtil": {
            "name": "CountWaysUtil",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "mask": [
                    "int",
                    "Callable",
                    "str"
                ],
                "taskno": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "AssignmentUsingBitmask.countNoOfWays": {
            "name": "countNoOfWays",
            "location": 64,
            "return": [
                "int",
                "Tuple[int]",
                "float",
                "tuple",
                "Tuple[str, str, str]",
                "Sequence"
            ],
            "arguments": {
                "self": [],
                "task_performed": [
                    "Dict[str, Any]",
                    "List[str]",
                    "dict",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "PythonCode-master/dynamic_programming/climbing_stairs.py": {
        "climb_stairs": {
            "name": "climb_stairs",
            "location": 4,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "n": [
                    "int",
                    "Optional[int]"
                ]
            }
        }
    },
    "PythonCode-master/dynamic_programming/coin_change.py": {
        "dp_count": {
            "name": "dp_count",
            "location": 11,
            "return": [
                "Optional[str]",
                "str",
                "Optional[T]"
            ],
            "arguments": {
                "S": [
                    "int",
                    "bool",
                    "Callable",
                    "List[int]",
                    "str"
                ],
                "m": [
                    "int",
                    "bool",
                    "Callable",
                    "List[int]",
                    "str"
                ],
                "n": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "PythonCode-master/dynamic_programming/edit_distance.py": {
        "min_distance_bottom_up": {
            "name": "min_distance_bottom_up",
            "location": 56,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "word1": [
                    "str",
                    "List[Dict]",
                    "int",
                    "list",
                    "Dict[str, Any]",
                    "Union[List[str], List[Any]]"
                ],
                "word2": [
                    "str"
                ]
            }
        },
        "EditDistance.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EditDistance.__prepare__": {
            "name": "__prepare__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "N": [
                    "int",
                    "Optional[int]"
                ],
                "M": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "EditDistance.__solveDP": {
            "name": "__solveDP",
            "location": 26,
            "return": [
                "int",
                "float",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "x": [],
                "y": []
            }
        },
        "EditDistance.solve": {
            "name": "solve",
            "location": 41,
            "return": [
                "int",
                "Iterable[Any]"
            ],
            "arguments": {
                "self": [],
                "A": [
                    "float",
                    "int",
                    "bytes"
                ],
                "B": [
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/dynamic_programming/factorial.py": {
        "factorial": {
            "name": "factorial",
            "location": 4,
            "return": [
                "str",
                "Optional[int]",
                "float"
            ],
            "arguments": {
                "num": [
                    "int",
                    "list",
                    "Sequence[Union[str, Any]]"
                ]
            }
        }
    },
    "PythonCode-master/dynamic_programming/fast_fibonacci.py": {
        "fibonacci": {
            "name": "fibonacci",
            "location": 13,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "_fib": {
            "name": "_fib",
            "location": 20,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "PythonCode-master/dynamic_programming/fibonacci.py": {
        "Fibonacci.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "N": [
                    "int"
                ]
            }
        },
        "Fibonacci.get": {
            "name": "get",
            "location": 20,
            "return": [
                "bool",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "sequence_no": [
                    "List[List[Callable]]",
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[Any]",
                    "Optional[List[Any]]"
                ]
            }
        }
    },
    "PythonCode-master/dynamic_programming/floyd_warshall.py": {
        "Graph.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "N": [
                    "int",
                    "List[List[int]]"
                ]
            }
        },
        "Graph.addEdge": {
            "name": "addEdge",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "u": [
                    "Callable[[T, T], T]",
                    "T",
                    "str"
                ],
                "v": [
                    "Callable[[T, T], T]",
                    "T",
                    "str"
                ],
                "w": [
                    "Callable[[T, T], T]",
                    "T",
                    "str"
                ]
            }
        },
        "Graph.floyd_warshall": {
            "name": "floyd_warshall",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.showMin": {
            "name": "showMin",
            "location": 19,
            "return": [
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "u": [
                    "int"
                ],
                "v": [
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/dynamic_programming/fractional_knapsack.py": {
        "fracKnapsack": {
            "name": "fracKnapsack",
            "location": 4,
            "return": [
                "int",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "vl": [
                    "list",
                    "float",
                    "Sequence[T]",
                    "Union[int, List[int]]"
                ],
                "wt": [
                    "list",
                    "float",
                    "Sequence[T]"
                ],
                "W": [
                    "int",
                    "Callable",
                    "float",
                    "list",
                    "Optional[str]"
                ],
                "n": [
                    "List[int]",
                    "Union[int, None]",
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/dynamic_programming/integer_partition.py": {
        "partition": {
            "name": "partition",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "m": [
                    "int",
                    "dict"
                ]
            }
        }
    },
    "PythonCode-master/dynamic_programming/knapsack.py": {
        "MF_knapsack": {
            "name": "MF_knapsack",
            "location": 4,
            "return": [
                "str",
                "float",
                "Optional[str]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "i": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "wt": [
                    "int",
                    "float",
                    "bool"
                ],
                "val": [
                    "float",
                    "int",
                    "bool",
                    "str"
                ],
                "j": [
                    "int",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "knapsack": {
            "name": "knapsack",
            "location": 19,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "W": [
                    "int",
                    "list",
                    "bool"
                ],
                "wt": [
                    "int",
                    "List[float]"
                ],
                "val": [
                    "str",
                    "Iterable[Any]"
                ],
                "n": [
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/dynamic_programming/k_means_clustering_tensorflow.py": {
        "TFKMeansCluster": {
            "name": "TFKMeansCluster",
            "location": 6,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "vectors": [
                    "int",
                    "List[float]",
                    "bool"
                ],
                "noofclusters": [
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "PythonCode-master/dynamic_programming/longest_common_subsequence.py": {
        "lcs_dp": {
            "name": "lcs_dp",
            "location": 13,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Iterable[T]",
                    "float"
                ],
                "y": [
                    "float",
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/dynamic_programming/longest_increasing_subsequence.py": {
        "longestSub": {
            "name": "longestSub",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ARRAY": [
                    "int",
                    "str",
                    "IO[str]",
                    "bool",
                    "Sequence['cirq.Qid']",
                    "List[float]"
                ]
            }
        }
    },
    "PythonCode-master/dynamic_programming/longest_increasing_subsequence_o(nlogn).py": {
        "CeilIndex": {
            "name": "CeilIndex",
            "location": 8,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "v": [
                    "str",
                    "Type",
                    "T"
                ],
                "l": [
                    "str",
                    "bool",
                    "bytes",
                    "Mapping[str, Any]"
                ],
                "r": [
                    "Tuple[int, int]",
                    "bytes"
                ],
                "key": [
                    "str",
                    "Type",
                    "T"
                ]
            }
        },
        "LongestIncreasingSubsequenceLength": {
            "name": "LongestIncreasingSubsequenceLength",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "v": [
                    "bool",
                    "int",
                    "List[str]",
                    "list",
                    "Sequence[T]"
                ]
            }
        }
    },
    "PythonCode-master/dynamic_programming/longest_sub_array.py": {
        "SubArray.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "arr": [
                    "str",
                    "list"
                ]
            }
        },
        "SubArray.solve_sub_array": {
            "name": "solve_sub_array",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PythonCode-master/dynamic_programming/matrix_chain_order.py": {
        "MatrixChainOrder": {
            "name": "MatrixChainOrder",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "array": [
                    "int",
                    "list",
                    "List[int]",
                    "Tuple[int]",
                    "List[float]"
                ]
            }
        },
        "PrintOptimalSolution": {
            "name": "PrintOptimalSolution",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "OptimalSolution": [
                    "float",
                    "str",
                    "bool",
                    "bytes"
                ],
                "i": [
                    "int",
                    "str",
                    "float"
                ],
                "j": [
                    "int",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/dynamic_programming/max_sub_array.py": {
        "find_max_sub_array": {
            "name": "find_max_sub_array",
            "location": 9,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "A": [
                    "float",
                    "list"
                ],
                "low": [
                    "int",
                    "List[str]"
                ],
                "high": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "find_max_cross_sum": {
            "name": "find_max_cross_sum",
            "location": 24,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "A": [
                    "float",
                    "int",
                    "List[int]"
                ],
                "low": [
                    "bool",
                    "Callable[[T], T]",
                    "str"
                ],
                "mid": [
                    "int",
                    "Callable[[T], T]",
                    "Iterable[T]"
                ],
                "high": [
                    "bool",
                    "Callable[[T], T]",
                    "str"
                ]
            }
        },
        "max_sub_array": {
            "name": "max_sub_array",
            "location": 41,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "nums": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "PythonCode-master/dynamic_programming/minimum_partition.py": {
        "findMin": {
            "name": "findMin",
            "location": 4,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "arr": [
                    "list",
                    "float",
                    "List[Tuple[int, int]]",
                    "List[int]",
                    "str",
                    "List[Dict]"
                ]
            }
        }
    },
    "PythonCode-master/dynamic_programming/rod_cutting.py": {
        "rod_cutting": {
            "name": "rod_cutting",
            "location": 3,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "prices": [
                    "List[int]",
                    "int",
                    "bytearray"
                ],
                "length": [
                    "int",
                    "str",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "rod_cutting_recursive": {
            "name": "rod_cutting_recursive",
            "location": 41,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "prices": [
                    "float",
                    "bool",
                    "Sequence['cirq.Qid']",
                    "Optional[int]"
                ],
                "length": [
                    "int",
                    "float"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/dynamic_programming/subset_generation.py": {
        "combinationUtil": {
            "name": "combinationUtil",
            "location": 7,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "arr": [
                    "int"
                ],
                "n": [
                    "int",
                    "Optional[int]",
                    "List[Dict[str, Any]]"
                ],
                "r": [
                    "int"
                ],
                "index": [
                    "bool",
                    "int"
                ],
                "data": [
                    "int"
                ],
                "i": [
                    "int"
                ]
            }
        },
        "printcombination": {
            "name": "printcombination",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "arr": [
                    "int",
                    "List[int]"
                ],
                "n": [
                    "int",
                    "List[int]"
                ],
                "r": [
                    "list",
                    "Dict[int, str]",
                    "int",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "PythonCode-master/dynamic_programming/sum_of_subset.py": {
        "isSumSubset": {
            "name": "isSumSubset",
            "location": 1,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "arr": [
                    "float",
                    "int"
                ],
                "arrLen": [
                    "int",
                    "List[int]",
                    "str",
                    "List[float]"
                ],
                "requiredSum": [
                    "int",
                    "List[int]",
                    "str",
                    "List[float]"
                ]
            }
        }
    },
    "PythonCode-master/file_transfer_protocol/ftp_send_receive.py": {
        "ReceiveFile": {
            "name": "ReceiveFile",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "SendFile": {
            "name": "SendFile",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/file_transfer_protocol/recieve_file.py": {},
    "PythonCode-master/file_transfer_protocol/send_file.py": {},
    "PythonCode-master/graphs/articulation_points.py": {
        "computeAP": {
            "name": "computeAP",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "l": [
                    "List[T]",
                    "List[str]",
                    "float",
                    "dict",
                    "Union[int, float]",
                    "list"
                ]
            }
        },
        "computeAP.dfs": {
            "name": "dfs",
            "location": 9,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "root": [
                    "int",
                    "Optional[int]",
                    "Iterable[List[str]]",
                    "Iterable[List[Any]]"
                ],
                "at": [
                    "Optional[Tuple[int, int]]",
                    "bool",
                    "str",
                    "List[AnyStr]"
                ],
                "parent": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "Optional[Dict[str, str]]"
                ],
                "outEdgeCount": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "PythonCode-master/graphs/a_star.py": {
        "search": {
            "name": "search",
            "location": 37,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "grid": [
                    "str",
                    "Sequence[str]",
                    "int",
                    "bytes",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "bool"
                ],
                "init": [
                    "str",
                    "Optional[int]",
                    "Dict[str, Any]",
                    "Callable",
                    "float"
                ],
                "goal": [
                    "int",
                    "Union[str, bool, None]",
                    "Optional[bool]",
                    "bool"
                ],
                "cost": [
                    "Optional[str]",
                    "List[str]",
                    "int",
                    "Optional[int]",
                    "List[Dict[str, Any]]"
                ],
                "heuristic": [
                    "float",
                    "Optional[int]",
                    "Optional[List[str]]",
                    "str"
                ]
            }
        }
    },
    "PythonCode-master/graphs/basic_graphs.py": {
        "dfs": {
            "name": "dfs",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "G": [
                    "int",
                    "str",
                    "List[str]",
                    "Tuple[int, int, int]",
                    "Tuple[int, int]",
                    "Callable[[T], bool]"
                ],
                "s": [
                    "Sequence[T]",
                    "int",
                    "T",
                    "Union[tuple, list]",
                    "Dict[str, Any]",
                    "List['Product']",
                    "Set[str]"
                ]
            }
        },
        "bfs": {
            "name": "bfs",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "G": [
                    "int",
                    "Type[\"SerializationDialect\"]",
                    "str",
                    "Type",
                    "list",
                    "callable",
                    "Union[int, float]"
                ],
                "s": [
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "dijk": {
            "name": "dijk",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "G": [
                    "int",
                    "List[int]",
                    "list",
                    "Sequence[T]",
                    "str",
                    "T"
                ],
                "s": [
                    "int",
                    "List[str]",
                    "List[bytes]"
                ]
            }
        },
        "topo": {
            "name": "topo",
            "location": 144,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "G": [
                    "list",
                    "List[float]",
                    "List[str]",
                    "List[int]",
                    "int"
                ],
                "ind": [
                    "Optional[\"Outcome\"]",
                    "int",
                    "Optional[float]"
                ],
                "Q": [
                    "List[str]",
                    "list",
                    "bytes",
                    "List[int]",
                    "List[List[int]]"
                ]
            }
        },
        "adjm": {
            "name": "adjm",
            "location": 172,
            "return": [
                "str",
                "int",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "floy": {
            "name": "floy",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "A_and_n": [
                    "int",
                    "Union[int, slice]",
                    "float"
                ]
            }
        },
        "prim": {
            "name": "prim",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "G": [
                    "int",
                    "List[int]",
                    "list",
                    "Sequence[T]",
                    "str",
                    "T"
                ],
                "s": [
                    "int",
                    "str",
                    "Mapping[str, str]",
                    "Tuple[List[str], List[str]]",
                    "List[List[Any]]",
                    "List[str]",
                    "bool",
                    "Mapping[str, Any]"
                ]
            }
        },
        "edglist": {
            "name": "edglist",
            "location": 247,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "krusk": {
            "name": "krusk",
            "location": 265,
            "return": [
                ""
            ],
            "arguments": {
                "E_and_n": [
                    "float",
                    "int",
                    "str",
                    "Union[float, int]",
                    "Union[int, float]"
                ]
            }
        },
        "find_isolated_nodes": {
            "name": "find_isolated_nodes",
            "location": 288,
            "return": [
                "dict"
            ],
            "arguments": {
                "graph": [
                    "dict"
                ]
            }
        }
    },
    "PythonCode-master/graphs/bellman_ford.py": {
        "printDist": {
            "name": "printDist",
            "location": 3,
            "return": [
                ""
            ],
            "arguments": {
                "dist": [
                    "int",
                    "float",
                    "Union[int, bool]",
                    "str"
                ],
                "V": [
                    "int"
                ]
            }
        },
        "BellmanFord": {
            "name": "BellmanFord",
            "location": 12,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "graph": [
                    "bool"
                ],
                "V": [
                    "int",
                    "bool"
                ],
                "E": [
                    "int",
                    "bool",
                    "Iterable[str]"
                ],
                "src": [
                    "int",
                    "Optional[List[str]]",
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "PythonCode-master/graphs/bfs.py": {
        "bfs": {
            "name": "bfs",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "graph": [
                    "int",
                    "dict"
                ],
                "start": [
                    "int",
                    "float",
                    "set",
                    "Optional[List[int]]",
                    "Iterable[T]",
                    "bool"
                ]
            }
        }
    },
    "PythonCode-master/graphs/bfs_shortest_path.py": {
        "bfs_shortest_path": {
            "name": "bfs_shortest_path",
            "location": 9,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "graph": [
                    "int",
                    "dict",
                    "List[int]"
                ],
                "start": [
                    "int",
                    "Optional[int]"
                ],
                "goal": [
                    "int",
                    "dict",
                    "List[int]"
                ]
            }
        }
    },
    "PythonCode-master/graphs/breadth_first_search.py": {
        "Graph.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Graph.printGraph": {
            "name": "printGraph",
            "location": 14,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Graph.addEdge": {
            "name": "addEdge",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "fromVertex": [],
                "toVertex": []
            }
        },
        "Graph.BFS": {
            "name": "BFS",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "startVertex": []
            }
        }
    },
    "PythonCode-master/graphs/check_bipartite_graph_bfs.py": {
        "checkBipartite": {
            "name": "checkBipartite",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "l": [
                    "str",
                    "int",
                    "List[int]",
                    "bool",
                    "list",
                    "List[float]"
                ]
            }
        },
        "checkBipartite.bfs": {
            "name": "bfs",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/graphs/check_bipartite_graph_dfs.py": {
        "check_bipartite_dfs": {
            "name": "check_bipartite_dfs",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "l": [
                    "str",
                    "List[List[Any]]",
                    "list",
                    "Tuple[float, int]"
                ]
            }
        },
        "check_bipartite_dfs.dfs": {
            "name": "dfs",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "v": [
                    "str",
                    "int"
                ],
                "c": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        }
    },
    "PythonCode-master/graphs/depth_first_search.py": {
        "Graph.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Graph.printGraph": {
            "name": "printGraph",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Graph.addEdge": {
            "name": "addEdge",
            "location": 19,
            "return": [],
            "arguments": {
                "self": [],
                "fromVertex": [],
                "toVertex": []
            }
        },
        "Graph.DFS": {
            "name": "DFS",
            "location": 27,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Graph.DFSRec": {
            "name": "DFSRec",
            "location": 36,
            "return": [],
            "arguments": {
                "self": [],
                "startVertex": [],
                "visited": []
            }
        }
    },
    "PythonCode-master/graphs/dfs.py": {
        "dfs": {
            "name": "dfs",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "graph": [
                    "int",
                    "dict"
                ],
                "start": [
                    "Set[str]",
                    "float",
                    "int",
                    "List[str]"
                ]
            }
        }
    },
    "PythonCode-master/graphs/dijkstra.py": {
        "dijkstra": {
            "name": "dijkstra",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "graph": [
                    "int",
                    "dict"
                ],
                "start": [
                    "int",
                    "dict"
                ],
                "end": [
                    "int",
                    "dict"
                ]
            }
        }
    },
    "PythonCode-master/graphs/dijkstra_2.py": {
        "printDist": {
            "name": "printDist",
            "location": 3,
            "return": [
                ""
            ],
            "arguments": {
                "dist": [
                    "int",
                    "float",
                    "Union[int, bool]",
                    "str"
                ],
                "V": [
                    "int"
                ]
            }
        },
        "minDist": {
            "name": "minDist",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "mdist": [
                    "int"
                ],
                "vset": [
                    "Optional[T]",
                    "Optional[Union[str, Any]]",
                    "Optional[Type[BaseException]]",
                    "Optional[int]",
                    "float",
                    "AsyncIterator[T]"
                ],
                "V": [
                    "int",
                    "str",
                    "Sequence[T]",
                    "List[List[int]]",
                    "list"
                ]
            }
        },
        "Dijkstra": {
            "name": "Dijkstra",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "graph": [
                    "str",
                    "int"
                ],
                "V": [
                    "int",
                    "str"
                ],
                "src": [
                    "str",
                    "list",
                    "List[str]",
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/graphs/dijkstra_algorithm.py": {
        "PriorityQueue.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PriorityQueue.isEmpty": {
            "name": "isEmpty",
            "location": 18,
            "return": [
                "int",
                "str",
                "bytes",
                "bytearray"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriorityQueue.min_heapify": {
            "name": "min_heapify",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "str",
                    "bool"
                ]
            }
        },
        "PriorityQueue.insert": {
            "name": "insert",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tup": [
                    "int",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "List[List[int]]",
                    "List[str]"
                ]
            }
        },
        "PriorityQueue.extract_min": {
            "name": "extract_min",
            "location": 41,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriorityQueue.left": {
            "name": "left",
            "location": 50,
            "return": [
                "int",
                "slice",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "slice",
                    "T",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "PriorityQueue.right": {
            "name": "right",
            "location": 54,
            "return": [
                "int",
                "slice",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "slice",
                    "T",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "PriorityQueue.par": {
            "name": "par",
            "location": 58,
            "return": [
                "List[str]",
                "str",
                "Iterable[T]",
                "float",
                "int",
                "List[\"DictDataLoader\"]",
                "type"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "str",
                    "float",
                    "List[int]",
                    "int"
                ]
            }
        },
        "PriorityQueue.swap": {
            "name": "swap",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "list"
                ],
                "j": [
                    "int"
                ]
            }
        },
        "PriorityQueue.decrease_key": {
            "name": "decrease_key",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tup": [
                    "Mapping[str, float]",
                    "str",
                    "List[str]",
                    "int"
                ],
                "new_d": [
                    "int",
                    "str",
                    "bool",
                    "AsyncIterator[T]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Graph.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "num": [
                    "int",
                    "Union[str, float]",
                    "float"
                ]
            }
        },
        "Graph.add_edge": {
            "name": "add_edge",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "u": [
                    "int",
                    "List[int]",
                    "type",
                    "str"
                ],
                "v": [
                    "int",
                    "T",
                    "type",
                    "List[int]"
                ],
                "w": [
                    "int",
                    "type"
                ]
            }
        },
        "Graph.show_graph": {
            "name": "show_graph",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.dijkstra": {
            "name": "dijkstra",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str"
                ]
            }
        },
        "Graph.show_distances": {
            "name": "show_distances",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str",
                    "int",
                    "FrozenSet[int]",
                    "float"
                ]
            }
        },
        "Graph.show_path": {
            "name": "show_path",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "src": [
                    "str",
                    "IO[str]"
                ],
                "dest": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "PythonCode-master/graphs/directed_and_undirected_(weighted)_graph.py": {
        "DirectedGraph.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectedGraph.add_pair": {
            "name": "add_pair",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "u": [
                    "str",
                    "int",
                    "dict"
                ],
                "v": [
                    "List[int]",
                    "T",
                    "int"
                ],
                "w": [
                    "Sequence[T]",
                    "List[int]"
                ]
            }
        },
        "DirectedGraph.all_nodes": {
            "name": "all_nodes",
            "location": 24,
            "return": [
                "str",
                "List[Dict]",
                "List[str]",
                "list",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectedGraph.remove_pair": {
            "name": "remove_pair",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "u": [
                    "dict",
                    "str",
                    "Type",
                    "MutableMapping"
                ],
                "v": [
                    "bool",
                    "int",
                    "Union[Callable, Type]",
                    "str",
                    "Dict[str, Dict[str, Any]]",
                    "Iterable[Tuple[Any, Any]]",
                    "Callable[[], None]"
                ]
            }
        },
        "DirectedGraph.dfs": {
            "name": "dfs",
            "location": 35,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "Union[int, str]",
                    "str",
                    "Union[tuple, list]",
                    "T"
                ],
                "d": [
                    "str",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "DirectedGraph.fill_graph_randomly": {
            "name": "fill_graph_randomly",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "c": [
                    "int",
                    "float",
                    "List[str]",
                    "Union[int, str]",
                    "list"
                ]
            }
        },
        "DirectedGraph.bfs": {
            "name": "bfs",
            "location": 87,
            "return": [
                "bool",
                "str",
                "BaseException",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "Union[int, str]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "DirectedGraph.in_degree": {
            "name": "in_degree",
            "location": 102,
            "return": [
                "int",
                "Callable[[Mapping], T]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "u": [
                    "float",
                    "int",
                    "Dict[str, str]",
                    "str"
                ]
            }
        },
        "DirectedGraph.out_degree": {
            "name": "out_degree",
            "location": 110,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "u": [
                    "bool",
                    "float"
                ]
            }
        },
        "DirectedGraph.topological_sort": {
            "name": "topological_sort",
            "location": 113,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "dict",
                    "list",
                    "Dict[str, Callable[[str], Any]]",
                    "Union[slice, List[slice], List[int]]"
                ]
            }
        },
        "DirectedGraph.cycle_nodes": {
            "name": "cycle_nodes",
            "location": 146,
            "return": [
                "List[str]",
                "str",
                "List[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectedGraph.has_cycle": {
            "name": "has_cycle",
            "location": 194,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "DirectedGraph.dfs_time": {
            "name": "dfs_time",
            "location": 243,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "Optional[str]",
                    "Callable[..., T]",
                    "dict"
                ],
                "e": [
                    "Optional[str]",
                    "Callable[..., T]",
                    "dict"
                ]
            }
        },
        "DirectedGraph.bfs_time": {
            "name": "bfs_time",
            "location": 249,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        },
        "Graph.__init__": {
            "name": "__init__",
            "location": 256,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.add_pair": {
            "name": "add_pair",
            "location": 262,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "u": [
                    "dict",
                    "str",
                    "T"
                ],
                "v": [
                    "List[int]",
                    "T",
                    "int"
                ],
                "w": [
                    "List[int]",
                    "int"
                ]
            }
        },
        "Graph.remove_pair": {
            "name": "remove_pair",
            "location": 281,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "u": [
                    "float",
                    "str",
                    "dict"
                ],
                "v": [
                    "Dict[str, Any]",
                    "List[str]",
                    "str",
                    "Iterable[T_co]"
                ]
            }
        },
        "Graph.dfs": {
            "name": "dfs",
            "location": 293,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "Union[int, str]",
                    "str",
                    "Union[tuple, list]",
                    "T"
                ],
                "d": [
                    "str",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "Graph.fill_graph_randomly": {
            "name": "fill_graph_randomly",
            "location": 333,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "c": [
                    "int",
                    "float",
                    "List[str]",
                    "Union[int, str]",
                    "list"
                ]
            }
        },
        "Graph.bfs": {
            "name": "bfs",
            "location": 345,
            "return": [
                "bool",
                "str",
                "BaseException",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "Union[int, str]",
                    "int",
                    "List[int]"
                ]
            }
        },
        "Graph.degree": {
            "name": "degree",
            "location": 360,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "u": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Graph.cycle_nodes": {
            "name": "cycle_nodes",
            "location": 363,
            "return": [
                "List[str]",
                "str",
                "List[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.has_cycle": {
            "name": "has_cycle",
            "location": 411,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.all_nodes": {
            "name": "all_nodes",
            "location": 459,
            "return": [
                "str",
                "List[Dict]",
                "List[str]",
                "list",
                "List[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Graph.dfs_time": {
            "name": "dfs_time",
            "location": 462,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "Optional[str]",
                    "Callable[..., T]",
                    "dict"
                ],
                "e": [
                    "Optional[str]",
                    "Callable[..., T]",
                    "dict"
                ]
            }
        },
        "Graph.bfs_time": {
            "name": "bfs_time",
            "location": 468,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        }
    },
    "PythonCode-master/graphs/edmonds_karp_multiple_source_and_sink.py": {
        "FlowNetwork.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "graph": [
                    "str",
                    "int",
                    "bool",
                    "bytes",
                    "list"
                ],
                "sources": [
                    "str"
                ],
                "sinks": [
                    "str"
                ]
            }
        },
        "FlowNetwork._normalizeGraph": {
            "name": "_normalizeGraph",
            "location": 12,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "sources": [
                    "str",
                    "dict",
                    "List[int]"
                ],
                "sinks": [
                    "int",
                    "list",
                    "bytes",
                    "Tuple[int, int]"
                ]
            }
        },
        "FlowNetwork.findMaximumFlow": {
            "name": "findMaximumFlow",
            "location": 49,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FlowNetwork.setMaximumFlowAlgorithm": {
            "name": "setMaximumFlowAlgorithm",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "Algorithm": [
                    "int",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "FlowNetworkAlgorithmExecutor.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "flowNetwork": []
            }
        },
        "FlowNetworkAlgorithmExecutor.execute": {
            "name": "execute",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FlowNetworkAlgorithmExecutor._algorithm": {
            "name": "_algorithm",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MaximumFlowAlgorithmExecutor.__init__": {
            "name": "__init__",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "flowNetwork": [
                    "int",
                    "tuple",
                    "dict"
                ]
            }
        },
        "MaximumFlowAlgorithmExecutor.getMaximumFlow": {
            "name": "getMaximumFlow",
            "location": 90,
            "return": [
                "int",
                "float",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PushRelabelExecutor.__init__": {
            "name": "__init__",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "flowNetwork": [
                    "bool",
                    "int",
                    "Callable",
                    "Dict[str, Any]",
                    "Dict[str, object]"
                ]
            }
        },
        "PushRelabelExecutor._algorithm": {
            "name": "_algorithm",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PushRelabelExecutor.processVertex": {
            "name": "processVertex",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "vertexIndex": [
                    "int",
                    "dict"
                ]
            }
        },
        "PushRelabelExecutor.push": {
            "name": "push",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fromIndex": [
                    "int",
                    "Tuple[int, int]"
                ],
                "toIndex": [
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "PushRelabelExecutor.relabel": {
            "name": "relabel",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "vertexIndex": [
                    "int",
                    "Tuple[int, int, int]",
                    "str",
                    "List[int]"
                ]
            }
        }
    },
    "PythonCode-master/graphs/eulerian_path_and_circuit_for_undirected_graph.py": {
        "dfs": {
            "name": "dfs",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "u": [
                    "str",
                    "int"
                ],
                "graph": [
                    "bool"
                ],
                "visited_edge": [],
                "path": [
                    "str",
                    "List[str]",
                    "dict",
                    "FrozenSet[str]"
                ]
            }
        },
        "check_circuit_or_path": {
            "name": "check_circuit_or_path",
            "location": 19,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "graph": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Pattern",
                    "T",
                    "dict",
                    "Set[int]"
                ],
                "max_node": [
                    "int"
                ]
            }
        },
        "check_euler": {
            "name": "check_euler",
            "location": 35,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "graph": [
                    "Optional[Callable]",
                    "str",
                    "int"
                ],
                "max_node": [
                    "int",
                    "Optional[int]",
                    "float"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/graphs/even_tree.py": {
        "dfs": {
            "name": "dfs",
            "location": 20,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "start": [
                    "int",
                    "str"
                ]
            }
        },
        "even_tree": {
            "name": "even_tree",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/graphs/finding_bridges.py": {
        "computeBridges": {
            "name": "computeBridges",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "l": [
                    "List[T]",
                    "List[str]",
                    "float",
                    "dict",
                    "Union[int, float]",
                    "list"
                ]
            }
        },
        "computeBridges.dfs": {
            "name": "dfs",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "at": [
                    "str"
                ],
                "parent": [
                    "int",
                    "Optional[str]"
                ],
                "bridges": [
                    "int",
                    "bool",
                    "Optional[int]",
                    "Optional[Union[int, Any]]",
                    "List[str]",
                    "List[Dict[str, Any]]"
                ],
                "id": [
                    "str",
                    "int",
                    "Optional[Union[int, Any]]",
                    "Optional[List[str]]",
                    "Optional[int]"
                ]
            }
        }
    },
    "PythonCode-master/graphs/graphs_floyd_warshall.py": {
        "_print_dist": {
            "name": "_print_dist",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "dist": [
                    "int",
                    "float",
                    "str",
                    "bool"
                ],
                "v": [
                    "int"
                ]
            }
        },
        "floyd_warshall": {
            "name": "floyd_warshall",
            "location": 22,
            "return": [
                "list",
                "int"
            ],
            "arguments": {
                "graph": [
                    "float",
                    "Optional[Type[BaseException]]"
                ],
                "v": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "PythonCode-master/graphs/graph_list.py": {
        "AdjacencyList.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AdjacencyList.addEdge": {
            "name": "addEdge",
            "location": 13,
            "return": [],
            "arguments": {
                "self": [],
                "fromVertex": [],
                "toVertex": []
            }
        },
        "AdjacencyList.printList": {
            "name": "printList",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "PythonCode-master/graphs/graph_matrix.py": {
        "Graph.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "vertex": [
                    "int",
                    "bytes"
                ]
            }
        },
        "Graph.add_edge": {
            "name": "add_edge",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "u": [
                    "Deque",
                    "Tuple[float, float]",
                    "float",
                    "str",
                    "list",
                    "int"
                ],
                "v": [
                    "Deque",
                    "Tuple[float, float]",
                    "float",
                    "str",
                    "list",
                    "int"
                ]
            }
        },
        "Graph.show": {
            "name": "show",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PythonCode-master/graphs/kahns_algorithm_long.py": {
        "longestDistance": {
            "name": "longestDistance",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "l": [
                    "int",
                    "list",
                    "List[Tuple[str, str]]",
                    "Sequence[T]",
                    "List[int]"
                ]
            }
        }
    },
    "PythonCode-master/graphs/kahns_algorithm_topo.py": {
        "topologicalSort": {
            "name": "topologicalSort",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "l": [
                    "List[int]",
                    "List[Tuple[str, str]]",
                    "str",
                    "dict"
                ]
            }
        }
    },
    "PythonCode-master/graphs/minimum_spanning_tree_kruskal.py": {
        "find_parent": {
            "name": "find_parent",
            "location": 16,
            "return": [
                "str",
                "Optional[\"Resource\"]",
                "int"
            ],
            "arguments": {
                "i": [
                    "int",
                    "bool",
                    "str",
                    "Optional[float]"
                ]
            }
        }
    },
    "PythonCode-master/graphs/minimum_spanning_tree_prims.py": {
        "PrimsAlgorithm": {
            "name": "PrimsAlgorithm",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "l": [
                    "list",
                    "Sequence[int]",
                    "tuple",
                    "Sequence[T]",
                    "List[int]",
                    "int"
                ]
            }
        },
        "PrimsAlgorithm.getPosition": {
            "name": "getPosition",
            "location": 7,
            "return": [
                "Tuple[str]",
                "Sequence[str]",
                "tuple"
            ],
            "arguments": {
                "vertex": [
                    "str",
                    "bool"
                ]
            }
        },
        "PrimsAlgorithm.setPosition": {
            "name": "setPosition",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "vertex": [
                    "bool",
                    "float"
                ],
                "pos": [
                    "bool",
                    "float"
                ]
            }
        },
        "PrimsAlgorithm.topToBottom": {
            "name": "topToBottom",
            "location": 13,
            "return": [
                "str",
                "dict",
                "Iterable[Hashable]"
            ],
            "arguments": {
                "heap": [
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "start": [
                    "int",
                    "float"
                ],
                "size": [
                    "int",
                    "float"
                ],
                "positions": [
                    "int",
                    "List[int]",
                    "list"
                ]
            }
        },
        "PrimsAlgorithm.bottomToTop": {
            "name": "bottomToTop",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "val": [
                    "bool",
                    "Callable[[None], bool]",
                    "int"
                ],
                "index": [
                    "dict"
                ],
                "heap": [
                    "int",
                    "bool"
                ],
                "position": [
                    "bool",
                    "Type['Frame']",
                    "str"
                ]
            }
        },
        "PrimsAlgorithm.heapify": {
            "name": "heapify",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "heap": [
                    "list",
                    "int",
                    "List[int]",
                    "List[float]",
                    "str"
                ],
                "positions": [
                    "list",
                    "List[float]",
                    "str",
                    "dict"
                ]
            }
        },
        "PrimsAlgorithm.deleteMinimum": {
            "name": "deleteMinimum",
            "location": 65,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "heap": [
                    "str",
                    "dict"
                ],
                "positions": [
                    "str",
                    "Callable[..., Awaitable]"
                ]
            }
        }
    },
    "PythonCode-master/graphs/multi_hueristic_astar.py": {
        "consistent_hueristic": {
            "name": "consistent_hueristic",
            "location": 60,
            "return": [
                "int",
                "Tuple[Any, Any, Any]",
                "str"
            ],
            "arguments": {
                "P": [
                    "numpy.ndarray",
                    "float",
                    "int"
                ],
                "goal": [
                    "Union[numpy.ndarray, numpy.void]",
                    "numpy.ndarray",
                    "float",
                    "List[float]"
                ]
            }
        },
        "hueristic_2": {
            "name": "hueristic_2",
            "location": 66,
            "return": [
                "Tuple[numpy.ndarray]",
                "str",
                "Tuple[Any, Any, Any]",
                "int"
            ],
            "arguments": {
                "P": [
                    "Iterable[List[T]]",
                    "numpy.ndarray",
                    "bool",
                    "Iterable[T]"
                ],
                "goal": [
                    "Iterable[List[T]]",
                    "numpy.ndarray",
                    "bool",
                    "Iterable[T]"
                ]
            }
        },
        "hueristic_1": {
            "name": "hueristic_1",
            "location": 70,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "P": [
                    "int",
                    "Callable",
                    "str"
                ],
                "goal": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "key": {
            "name": "key",
            "location": 74,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "start": [
                    "float",
                    "int",
                    "List[str]",
                    "numpy.array",
                    "bool",
                    "List[int]"
                ],
                "i": [
                    "float",
                    "int",
                    "List[str]",
                    "numpy.array",
                    "bool",
                    "List[int]"
                ],
                "goal": [
                    "float",
                    "int",
                    "List[str]",
                    "numpy.array",
                    "bool",
                    "List[int]"
                ],
                "g_function": [
                    "float",
                    "int",
                    "List[str]",
                    "numpy.array",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "do_something": {
            "name": "do_something",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "back_pointer": [
                    "int",
                    "str",
                    "numpy.ndarray"
                ],
                "goal": [
                    "int",
                    "float",
                    "Union[int, bool]"
                ],
                "start": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "valid": {
            "name": "valid",
            "location": 120,
            "return": [
                "bool"
            ],
            "arguments": {
                "p": [
                    "int",
                    "str"
                ]
            }
        },
        "expand_state": {
            "name": "expand_state",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "s": [
                    "int",
                    "Union[float, int]",
                    "bool",
                    "str",
                    "float"
                ],
                "j": [
                    "bool",
                    "float",
                    "int"
                ],
                "visited": [
                    "Optional[List[int]]",
                    "bool",
                    "Optional[Sequence[str]]",
                    "Hashable",
                    "int"
                ],
                "g_function": [
                    "bool",
                    "Sequence[int]",
                    "Callable",
                    "T"
                ],
                "close_list_anchor": [
                    "List[str]",
                    "str",
                    "Optional[int]",
                    "List[bool]"
                ],
                "close_list_inad": [
                    "List[str]",
                    "str",
                    "Optional[int]",
                    "List[bool]"
                ],
                "open_list": [
                    "int",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "back_pointer": []
            }
        },
        "make_common_ground": {
            "name": "make_common_ground",
            "location": 160,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {}
        },
        "multi_a_star": {
            "name": "multi_a_star",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {
                "start": [
                    "int",
                    "Optional[int]",
                    "float",
                    "Sequence[int]"
                ],
                "goal": [
                    "int",
                    "Optional[int]",
                    "float",
                    "Sequence[int]"
                ],
                "n_hueristic": [
                    "int",
                    "float"
                ]
            }
        },
        "PriorityQueue.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PriorityQueue.minkey": {
            "name": "minkey",
            "location": 16,
            "return": [
                "str",
                "Iterable[str]",
                "Dict[str, Any]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriorityQueue.empty": {
            "name": "empty",
            "location": 22,
            "return": [
                "str",
                "Set[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriorityQueue.put": {
            "name": "put",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Sequence[str]",
                    "bool",
                    "Iterator[str]",
                    "List[List[Any]]"
                ],
                "priority": [
                    "T",
                    "dict",
                    "bool"
                ]
            }
        },
        "PriorityQueue.remove_element": {
            "name": "remove_element",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Iterable[T]",
                    "dict",
                    "list",
                    "float",
                    "List[List[Any]]"
                ]
            }
        },
        "PriorityQueue.top_show": {
            "name": "top_show",
            "location": 52,
            "return": [
                "str",
                "Iterable[str]",
                "Dict[str, Any]",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "PriorityQueue.get": {
            "name": "get",
            "location": 55,
            "return": [
                "int",
                "bool",
                "str",
                "List[int]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PythonCode-master/graphs/page_rank.py": {
        "page_rank": {
            "name": "page_rank",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "nodes": [
                    "int",
                    "str",
                    "bool"
                ],
                "limit": [
                    "int",
                    "str",
                    "bool"
                ],
                "d": []
            }
        },
        "main": {
            "name": "main",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "Node.add_inbound": {
            "name": "add_inbound",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[str]",
                    "int",
                    "str"
                ]
            }
        },
        "Node.add_outbound": {
            "name": "add_outbound",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node": [
                    "List[str]",
                    "int",
                    "str"
                ]
            }
        },
        "Node.__repr__": {
            "name": "__repr__",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PythonCode-master/graphs/prim.py": {
        "prim": {
            "name": "prim",
            "location": 58,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Dict[str, Set[str]]",
                "str"
            ],
            "arguments": {
                "graph": [
                    "List[str]",
                    "list",
                    "List[Tuple[str, str]]",
                    "Set[str]",
                    "str"
                ],
                "root": [
                    "str",
                    "Exception",
                    "List[str]"
                ]
            }
        },
        "vertex.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "dict",
                    "Iterable[int]",
                    "Optional[int]",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "vertex.__lt__": {
            "name": "__lt__",
            "location": 41,
            "return": [
                "str",
                "Sequence[str]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "vertex.__repr__": {
            "name": "__repr__",
            "location": 45,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "vertex.addNeighbor": {
            "name": "addNeighbor",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "vertex": [
                    "float",
                    "int"
                ]
            }
        },
        "vertex.addEdge": {
            "name": "addEdge",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "vertex": [
                    "bool",
                    "Optional[int]",
                    "str",
                    "type"
                ],
                "weight": [
                    "bool",
                    "Optional[int]",
                    "str",
                    "type"
                ]
            }
        }
    },
    "PythonCode-master/graphs/scc_kosaraju.py": {
        "dfs": {
            "name": "dfs",
            "location": 4,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "u": []
            }
        },
        "dfs2": {
            "name": "dfs2",
            "location": 12,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "u": [
                    "float",
                    "Set[str]",
                    "int",
                    "Tuple['cirq.Qid']"
                ]
            }
        },
        "kosaraju": {
            "name": "kosaraju",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/graphs/tarjans_scc.py": {
        "tarjan": {
            "name": "tarjan",
            "location": 4,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "g": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "create_graph": {
            "name": "create_graph",
            "location": 63,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "n": [
                    "int",
                    "Optional[int]",
                    "bool"
                ],
                "edges": [
                    "int",
                    "bool"
                ]
            }
        },
        "tarjan.strong_connect": {
            "name": "strong_connect",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "v": [
                    "list",
                    "int",
                    "Union[int, str]"
                ],
                "index": [
                    "list",
                    "tuple",
                    "Union[int, str]",
                    "int"
                ],
                "components": [
                    "T",
                    "int",
                    "dict",
                    "str"
                ]
            }
        }
    },
    "PythonCode-master/hashes/chaos_machine.py": {
        "push": {
            "name": "push",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "seed": [
                    "int",
                    "bool"
                ]
            }
        },
        "pull": {
            "name": "pull",
            "location": 46,
            "return": [
                "int",
                "Optional[int]",
                "List[int]"
            ],
            "arguments": {}
        },
        "reset": {
            "name": "reset",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "pull.xorshift": {
            "name": "xorshift",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "X": [
                    "float",
                    "List[float]",
                    "int"
                ],
                "Y": [
                    "float",
                    "List[float]",
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/hashes/enigma_machine.py": {
        "rotator": {
            "name": "rotator",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "engine": {
            "name": "engine",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "input_character": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "PythonCode-master/hashes/md5.py": {
        "rearrange": {
            "name": "rearrange",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "bitString32": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "reformatHex": {
            "name": "reformatHex",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "i": [
                    "int"
                ]
            }
        },
        "pad": {
            "name": "pad",
            "location": 46,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "bitString": [
                    "str",
                    "List[str]",
                    "list"
                ]
            }
        },
        "getBlock": {
            "name": "getBlock",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "bitString": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "not32": {
            "name": "not32",
            "location": 85,
            "return": [
                "str",
                "Union[str, List[str]]",
                "int"
            ],
            "arguments": {
                "i": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "sum32": {
            "name": "sum32",
            "location": 96,
            "return": [
                "float",
                "Tuple[Any, Any, Any]",
                "bytearray",
                "int",
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ],
                "b": [
                    "int",
                    "float",
                    "bool",
                    "List[int]"
                ]
            }
        },
        "leftrot32": {
            "name": "leftrot32",
            "location": 102,
            "return": [
                "str",
                "Tuple[str, str]"
            ],
            "arguments": {
                "i": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "Set[int]"
                ],
                "s": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "Set[int]"
                ]
            }
        },
        "md5me": {
            "name": "md5me",
            "location": 106,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "testString": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/hashes/sha1.py": {
        "main": {
            "name": "main",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "SHA1Hash.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "bytes",
                    "Dict[str, str]",
                    "list",
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "SHA1Hash.rotate": {
            "name": "rotate",
            "location": 49,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "n": [
                    "int",
                    "Tuple[int, int]"
                ],
                "b": [
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "SHA1Hash.padding": {
            "name": "padding",
            "location": 57,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SHA1Hash.split_blocks": {
            "name": "split_blocks",
            "location": 65,
            "return": [
                "List[int]",
                "List[List[int]]",
                "bool",
                "Callable[[str, str], float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SHA1Hash.expand_block": {
            "name": "expand_block",
            "location": 72,
            "return": [
                "Mapping"
            ],
            "arguments": {
                "self": [],
                "block": [
                    "List['OverloadPart']",
                    "T"
                ]
            }
        },
        "SHA1Hash.final_hash": {
            "name": "final_hash",
            "location": 82,
            "return": [
                "bool",
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SHA1HashTest.testMatchHashes": {
            "name": "testMatchHashes",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PythonCode-master/linear_algebra_python/src/lib.py": {
        "zeroVector": {
            "name": "zeroVector",
            "location": 146,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dimension": [
                    "str",
                    "float",
                    "bool",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "unitBasisVector": {
            "name": "unitBasisVector",
            "location": 155,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "dimension": [
                    "str",
                    "Iterator",
                    "Callable",
                    "Iterator[T]",
                    "bool"
                ],
                "pos": [
                    "str",
                    "Iterator",
                    "Callable",
                    "Iterator[T]",
                    "bool"
                ]
            }
        },
        "axpy": {
            "name": "axpy",
            "location": 167,
            "return": [
                "str"
            ],
            "arguments": {
                "scalar": [
                    "Sequence[Any]",
                    "str"
                ],
                "x": [
                    "Sequence[Any]",
                    "str"
                ],
                "y": [
                    "Sequence[Any]",
                    "str"
                ]
            }
        },
        "randomVector": {
            "name": "randomVector",
            "location": 179,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "N": [
                    "int",
                    "Optional[int]",
                    "List[int]"
                ],
                "a": [
                    "int",
                    "Optional[int]",
                    "List[int]"
                ],
                "b": [
                    "int",
                    "Optional[int]",
                    "List[int]"
                ]
            }
        },
        "squareZeroMatrix": {
            "name": "squareZeroMatrix",
            "location": 306,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "N": [
                    "int",
                    "bool"
                ]
            }
        },
        "randomMatrix": {
            "name": "randomMatrix",
            "location": 314,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "W": [
                    "int"
                ],
                "H": [
                    "int"
                ],
                "a": [
                    "int"
                ],
                "b": [
                    "int"
                ]
            }
        },
        "Vector.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "components": [
                    "bool",
                    "str",
                    "int",
                    "List[Tuple]",
                    "Iterable[T]",
                    "Union[List[str], str]"
                ]
            }
        },
        "Vector.set": {
            "name": "set",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "components": [
                    "float",
                    "Optional[Union[str, Any]]",
                    "bool",
                    "str"
                ]
            }
        },
        "Vector.__str__": {
            "name": "__str__",
            "location": 64,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vector.component": {
            "name": "component",
            "location": 69,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "i": [
                    "int",
                    "List[List[str]]",
                    "Union[float, List[float]]"
                ]
            }
        },
        "Vector.__len__": {
            "name": "__len__",
            "location": 78,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vector.eulidLength": {
            "name": "eulidLength",
            "location": 83,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vector.__add__": {
            "name": "__add__",
            "location": 91,
            "return": [
                "str",
                "int",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "Vector.__sub__": {
            "name": "__sub__",
            "location": 103,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "list",
                    "str",
                    "tuple",
                    "Union[int, float]"
                ]
            }
        },
        "Vector.__mul__": {
            "name": "__mul__",
            "location": 115,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "Vector.copy": {
            "name": "copy",
            "location": 131,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vector.changeComponent": {
            "name": "changeComponent",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pos": [
                    "bytes",
                    "int",
                    "bytearray",
                    "bool",
                    "Callable"
                ],
                "value": [
                    "str",
                    "bytes",
                    "int",
                    "float"
                ]
            }
        },
        "Matrix.__init__": {
            "name": "__init__",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "matrix": [
                    "int",
                    "bool",
                    "float"
                ],
                "w": [
                    "int",
                    "bool",
                    "float"
                ],
                "h": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Matrix.__str__": {
            "name": "__str__",
            "location": 216,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.changeComponent": {
            "name": "changeComponent",
            "location": 230,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "list",
                    "bool"
                ],
                "y": [
                    "int",
                    "list",
                    "bool"
                ],
                "value": [
                    "int",
                    "float",
                    "Tuple[float, float]",
                    "T"
                ]
            }
        },
        "Matrix.component": {
            "name": "component",
            "location": 238,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "float",
                    "List[int]",
                    "List[float]"
                ],
                "y": [
                    "int",
                    "float",
                    "List[int]",
                    "List[float]"
                ]
            }
        },
        "Matrix.width": {
            "name": "width",
            "location": 246,
            "return": [
                "int",
                "bool",
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.height": {
            "name": "height",
            "location": 251,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Matrix.__mul__": {
            "name": "__mul__",
            "location": 256,
            "return": [
                "BaseException"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, float]",
                    "AbstractSet[Any]",
                    "int"
                ]
            }
        },
        "Matrix.__add__": {
            "name": "__add__",
            "location": 276,
            "return": [
                "int",
                "float",
                "str",
                "Sequence[float]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "list"
                ]
            }
        },
        "Matrix.__sub__": {
            "name": "__sub__",
            "location": 290,
            "return": [
                "str",
                "List[float]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "PythonCode-master/linear_algebra_python/src/tests.py": {
        "Test.test_component": {
            "name": "test_component",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.test_str": {
            "name": "test_str",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.test_size": {
            "name": "test_size",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.test_euclidLength": {
            "name": "test_euclidLength",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.test_add": {
            "name": "test_add",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.test_sub": {
            "name": "test_sub",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.test_mul": {
            "name": "test_mul",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.test_zeroVector": {
            "name": "test_zeroVector",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.test_unitBasisVector": {
            "name": "test_unitBasisVector",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.test_axpy": {
            "name": "test_axpy",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.test_copy": {
            "name": "test_copy",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.test_changeComponent": {
            "name": "test_changeComponent",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.test_str_matrix": {
            "name": "test_str_matrix",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.test__mul__matrix": {
            "name": "test__mul__matrix",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.test_changeComponent_matrix": {
            "name": "test_changeComponent_matrix",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.test_component_matrix": {
            "name": "test_component_matrix",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.test__add__matrix": {
            "name": "test__add__matrix",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.test__sub__matrix": {
            "name": "test__sub__matrix",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.test_squareZeroMatrix": {
            "name": "test_squareZeroMatrix",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PythonCode-master/machine_learning/decision_tree.py": {
        "main": {
            "name": "main",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Decision_Tree.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "depth": [
                    "float",
                    "numpy.ndarray",
                    "int"
                ],
                "min_leaf_size": [
                    "int",
                    "float",
                    "str",
                    "numpy.ndarray",
                    "Tuple[int, int]"
                ]
            }
        },
        "Decision_Tree.mean_squared_error": {
            "name": "mean_squared_error",
            "location": 19,
            "return": [
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "labels": [
                    "numpy.array",
                    "tuple",
                    "int",
                    "Dict[str, Any]",
                    "dict"
                ],
                "prediction": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "Decision_Tree.train": {
            "name": "train",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "X": [
                    "int",
                    "numpy.ndarray",
                    "float"
                ],
                "y": [
                    "str",
                    "numpy.ndarray"
                ]
            }
        },
        "Decision_Tree.predict": {
            "name": "predict",
            "location": 100,
            "return": [
                "numpy.ndarray",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "Iterable[T]",
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/machine_learning/gradient_descent.py": {
        "_error": {
            "name": "_error",
            "location": 16,
            "return": [
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "example_no": [
                    "dict",
                    "str",
                    "Callable[[Dict], None]"
                ],
                "data_set": [
                    "dict",
                    "str",
                    "Callable[[Dict], None]"
                ]
            }
        },
        "_hypothesis_value": {
            "name": "_hypothesis_value",
            "location": 25,
            "return": [
                "int",
                "str",
                "Tuple[int, int]",
                "numpy.ndarray",
                "Tuple[str, int]",
                "T",
                "float"
            ],
            "arguments": {
                "data_input_tuple": [
                    "bool",
                    "numpy.array",
                    "dict"
                ]
            }
        },
        "output": {
            "name": "output",
            "location": 41,
            "return": [
                "bytes",
                "numpy.ndarray",
                "Iterable[int]",
                "bool"
            ],
            "arguments": {
                "example_no": [
                    "Optional[Union[str, int]]",
                    "Dict[str, str]",
                    "bool"
                ],
                "data_set": [
                    "bool"
                ]
            }
        },
        "calculate_hypothesis_value": {
            "name": "calculate_hypothesis_value",
            "location": 53,
            "return": [
                "int",
                "Dict[str, Any]",
                "bool",
                "dict"
            ],
            "arguments": {
                "example_no": [
                    "int",
                    "dict",
                    "List[Tuple[str, ...]]",
                    "Dict[str, Any]",
                    "List[List[int]]",
                    "str"
                ],
                "data_set": [
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "summation_of_cost_derivative": {
            "name": "summation_of_cost_derivative",
            "location": 66,
            "return": [
                "str",
                "int",
                "tuple",
                "dict",
                "List[int]"
            ],
            "arguments": {
                "index": [],
                "end": [
                    "Iterable[T]",
                    "str",
                    "Callable[[T], bool]"
                ]
            }
        },
        "get_cost_derivative": {
            "name": "get_cost_derivative",
            "location": 83,
            "return": [
                "str",
                "Union[str, int]",
                "bool"
            ],
            "arguments": {
                "index": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "run_gradient_descent": {
            "name": "run_gradient_descent",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_gradient_descent": {
            "name": "test_gradient_descent",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/machine_learning/knn_sklearn.py": {},
    "PythonCode-master/machine_learning/k_means_clust.py": {
        "get_initial_centroids": {
            "name": "get_initial_centroids",
            "location": 55,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "data": [
                    "MutableMapping",
                    "bytes"
                ],
                "k": [
                    "int",
                    "numpy.ndarray",
                    "Sequence[int]"
                ],
                "seed": [
                    "Optional[bytes]",
                    "int",
                    "Optional[bool]",
                    "Optional[int]",
                    "List[Dict]",
                    "dict"
                ]
            }
        },
        "centroid_pairwise_dist": {
            "name": "centroid_pairwise_dist",
            "location": 71,
            "return": [
                "bool",
                "numpy.ndarray"
            ],
            "arguments": {
                "X": [
                    "float",
                    "int",
                    "numpy.ndarray",
                    "bytes"
                ],
                "centroids": [
                    "float",
                    "int",
                    "numpy.ndarray",
                    "bytes"
                ]
            }
        },
        "assign_clusters": {
            "name": "assign_clusters",
            "location": 74,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "centroids": [
                    "str",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "revise_centroids": {
            "name": "revise_centroids",
            "location": 86,
            "return": [
                "Iterable[str]",
                "int",
                "Callable",
                "numpy.ndarray",
                "str"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Mapping[str, object]"
                ],
                "k": [
                    "int",
                    "bool",
                    "numpy.ndarray",
                    "List[str]",
                    "Type",
                    "str"
                ],
                "cluster_assignment": [
                    "bytes",
                    "Mapping[str, object]"
                ]
            }
        },
        "compute_heterogeneity": {
            "name": "compute_heterogeneity",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Mapping[str, object]"
                ],
                "k": [
                    "int",
                    "bool",
                    "numpy.ndarray",
                    "List[str]",
                    "Type",
                    "str"
                ],
                "centroids": [
                    "int",
                    "float",
                    "Optional[int]",
                    "Iterable[bytes]",
                    "bytes"
                ],
                "cluster_assignment": [
                    "bytes",
                    "Mapping[str, object]"
                ]
            }
        },
        "plot_heterogeneity": {
            "name": "plot_heterogeneity",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "heterogeneity": [
                    "int",
                    "float",
                    "numpy.array",
                    "Iterable[T]",
                    "numpy.ndarray"
                ],
                "k": [
                    "str",
                    "float",
                    "Union[int, float, str]"
                ]
            }
        },
        "kmeans": {
            "name": "kmeans",
            "location": 124,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Callable[[bytes], bytes]",
                    "str",
                    "Dict[str, Any]",
                    "defaultdict"
                ],
                "k": [
                    "Dict[str, float]",
                    "Callable"
                ],
                "initial_centroids": [
                    "int",
                    "bool",
                    "numpy.ndarray",
                    "List[str]",
                    "Type",
                    "str"
                ],
                "maxiter": [
                    "int",
                    "bool",
                    "numpy.ndarray",
                    "List[str]",
                    "Type",
                    "str"
                ],
                "record_heterogeneity": [
                    "Optional[numpy.ndarray]",
                    "Dict[str, Any]",
                    "Optional[Tuple[int, int]]"
                ],
                "verbose": [
                    "bool",
                    "dict"
                ]
            }
        }
    },
    "PythonCode-master/machine_learning/linear_regression.py": {
        "collect_dataset": {
            "name": "collect_dataset",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "run_steep_gradient_descent": {
            "name": "run_steep_gradient_descent",
            "location": 34,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "data_x": [
                    "int",
                    "bool",
                    "List[str]"
                ],
                "data_y": [
                    "int",
                    "Sequence[str]",
                    "str",
                    "Exception",
                    "Dict[str, Any]",
                    "bytes",
                    "List[str]"
                ],
                "len_data": [
                    "dict",
                    "bytes"
                ],
                "alpha": [
                    "int",
                    "Union[int, str]",
                    "bool",
                    "List[str]"
                ],
                "theta": [
                    "bool",
                    "List[Tuple[int, int]]",
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "sum_of_square_error": {
            "name": "sum_of_square_error",
            "location": 54,
            "return": [
                "str",
                "List[str]",
                "Sequence[str]",
                "Dict[str, List[Any]]"
            ],
            "arguments": {
                "data_x": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "Union[int, Tuple[int, int]]",
                    "List[Tuple[int, int]]"
                ],
                "data_y": [
                    "int",
                    "Exception",
                    "Sequence[str]",
                    "dict",
                    "str"
                ],
                "len_data": [
                    "Dict[str, str]",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "dict",
                    "int",
                    "bool"
                ],
                "theta": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "Union[int, Tuple[int, int]]",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "run_linear_regression": {
            "name": "run_linear_regression",
            "location": 69,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "data_x": [
                    "\"SendRefundTransfer\"",
                    "int",
                    "bool",
                    "Dict[str, Union[bool, str]]"
                ],
                "data_y": [
                    "str",
                    "int",
                    "MutableMapping[str, Any]",
                    "Hashable",
                    "Optional[Dict]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/machine_learning/logistic_regression.py": {
        "sigmoid_function": {
            "name": "sigmoid_function",
            "location": 27,
            "return": [
                "int",
                "bool",
                "Iterator"
            ],
            "arguments": {
                "z": [
                    "int",
                    "bool",
                    "Iterator"
                ]
            }
        },
        "cost_function": {
            "name": "cost_function",
            "location": 31,
            "return": [
                "Dict[str, Any]",
                "dict",
                "numpy.ndarray",
                "Mapping[Tuple[str, str], Any]"
            ],
            "arguments": {
                "h": [
                    "BaseException",
                    "Optional[Dict[str, Any]]"
                ],
                "y": [
                    "BaseException",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "log_likelihood": {
            "name": "log_likelihood",
            "location": 34,
            "return": [
                "int",
                "bool",
                "numpy.ndarray"
            ],
            "arguments": {
                "X": [
                    "int",
                    "numpy.ndarray"
                ],
                "Y": [
                    "int",
                    "float",
                    "List[int]"
                ],
                "weights": [
                    "int",
                    "numpy.ndarray"
                ]
            }
        },
        "logistic_reg": {
            "name": "logistic_reg",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "alpha": [
                    "str",
                    "Callable[..., bool]",
                    "Container",
                    "int"
                ],
                "X": [
                    "numpy.ndarray"
                ],
                "y": [
                    "int",
                    "numpy.ndarray",
                    "str",
                    "list"
                ],
                "max_iterations": [
                    "List[AnyStr]",
                    "int",
                    "float"
                ]
            }
        },
        "predict_prob": {
            "name": "predict_prob",
            "location": 71,
            "return": [
                "numpy.ndarray",
                "List[int]",
                "Tuple[str]",
                "tuple"
            ],
            "arguments": {
                "X": [
                    "float",
                    "Union[pandas.DataFrame, numpy.ndarray]",
                    "Union[pandas.Series, numpy.ndarray]"
                ]
            }
        }
    },
    "PythonCode-master/machine_learning/perceptron.py": {
        "Perceptron.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sample": [
                    "int",
                    "str",
                    "bytes",
                    "List[int]",
                    "list"
                ],
                "exit": [
                    "int",
                    "bool",
                    "float"
                ],
                "learn_rate": [
                    "int",
                    "bool",
                    "float"
                ],
                "epoch_number": [
                    "int",
                    "bool",
                    "float"
                ],
                "bias": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Perceptron.trannig": {
            "name": "trannig",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Perceptron.sort": {
            "name": "sort",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sample": [
                    "float"
                ]
            }
        },
        "Perceptron.sign": {
            "name": "sign",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "u": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "PythonCode-master/machine_learning/scoring_functions.py": {
        "mae": {
            "name": "mae",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "predict": [
                    "Union[numpy.ndarray, numpy.void]",
                    "numpy.ndarray",
                    "float",
                    "List[float]"
                ],
                "actual": [
                    "Union[numpy.ndarray, numpy.void]",
                    "numpy.ndarray",
                    "float",
                    "List[float]"
                ]
            }
        },
        "mse": {
            "name": "mse",
            "location": 28,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "predict": [
                    "Union[numpy.ndarray, numpy.void]",
                    "numpy.ndarray",
                    "float",
                    "List[float]"
                ],
                "actual": [
                    "Union[numpy.ndarray, numpy.void]",
                    "numpy.ndarray",
                    "float",
                    "List[float]"
                ]
            }
        },
        "rmse": {
            "name": "rmse",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "predict": [
                    "Union[numpy.ndarray, numpy.void]",
                    "numpy.ndarray",
                    "float",
                    "List[float]"
                ],
                "actual": [
                    "Union[numpy.ndarray, numpy.void]",
                    "numpy.ndarray",
                    "float",
                    "List[float]"
                ]
            }
        },
        "rmsle": {
            "name": "rmsle",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "predict": [
                    "Dict[str, Tuple[int, int]]",
                    "numpy.ndarray",
                    "int"
                ],
                "actual": [
                    "Dict[str, Tuple[int, int]]",
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "mbd": {
            "name": "mbd",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "predict": [
                    "numpy.ndarray",
                    "float",
                    "int"
                ],
                "actual": [
                    "numpy.ndarray",
                    "float",
                    "Union[numpy.ndarray, numpy.void]",
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/machine_learning/random_forest_classification/random_forest_classification.py": {},
    "PythonCode-master/machine_learning/random_forest_regression/random_forest_regression.py": {},
    "PythonCode-master/maths/3n+1.py": {
        "n31": {
            "name": "n31",
            "location": 3,
            "return": [
                "str"
            ],
            "arguments": {
                "a": [
                    "list",
                    "float",
                    "Sequence[T]",
                    "Union[int, float]",
                    "str",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/maths/abs.py": {
        "abs_val": {
            "name": "abs_val",
            "location": 4,
            "return": [
                "int",
                "Optional[Dict[str, int]]",
                "List[List[int]]",
                "str",
                "bool"
            ],
            "arguments": {
                "num": [
                    "Optional[int]",
                    "int",
                    "List[float]",
                    "float"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/maths/abs_max.py": {
        "abs_max": {
            "name": "abs_max",
            "location": 3,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "abs_max_sort": {
            "name": "abs_max_sort",
            "location": 16,
            "return": [
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "x": [
                    "int",
                    "Sequence[Any]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/maths/abs_min.py": {
        "absMin": {
            "name": "absMin",
            "location": 4,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "str",
                    "T"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/maths/average_mean.py": {
        "average": {
            "name": "average",
            "location": 4,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "nums": [
                    "List[int]",
                    "list",
                    "bool",
                    "List[float]",
                    "str",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/maths/average_median.py": {
        "median": {
            "name": "median",
            "location": 1,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "nums": [
                    "Sequence[int]",
                    "str",
                    "Sequence[Any]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/maths/basic_maths.py": {
        "prime_factors": {
            "name": "prime_factors",
            "location": 5,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "number_of_divisors": {
            "name": "number_of_divisors",
            "location": 23,
            "return": [
                "Iterable[T]",
                "str",
                "Callable[[T], bool]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "Union[str, int]"
                ]
            }
        },
        "sum_of_divisors": {
            "name": "sum_of_divisors",
            "location": 43,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "n": [
                    "int",
                    "Union[str, int]"
                ]
            }
        },
        "euler_phi": {
            "name": "euler_phi",
            "location": 65,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/maths/binary_exponentiation.py": {
        "binary_exponentiation": {
            "name": "binary_exponentiation",
            "location": 7,
            "return": [
                "bytearray",
                "bytes",
                "List[dict]",
                "str",
                "int"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str",
                    "Tuple[int, int]"
                ],
                "n": [
                    "int",
                    "str",
                    "Tuple[int, int]"
                ]
            }
        }
    },
    "PythonCode-master/maths/collatz_sequence.py": {
        "collatz_sequence": {
            "name": "collatz_sequence",
            "location": 1,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/maths/extended_euclidean_algorithm.py": {
        "extended_euclidean_algorithm": {
            "name": "extended_euclidean_algorithm",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "m": [
                    "int"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/maths/factorial_python.py": {},
    "PythonCode-master/maths/factorial_recursive.py": {
        "fact": {
            "name": "fact",
            "location": 1,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/maths/fermat_little_theorem.py": {
        "binary_exponentiation": {
            "name": "binary_exponentiation",
            "location": 7,
            "return": [
                "Tuple[int]",
                "Tuple[float, float, float, float]",
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float"
                ],
                "n": [
                    "int",
                    "float"
                ],
                "mod": [
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/maths/fibonacci.py": {
        "timer_decorator": {
            "name": "timer_decorator",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "_check_number_input": {
            "name": "_check_number_input",
            "location": 48,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "str"
                ],
                "min_thresh": [
                    "int",
                    "Optional[int]"
                ],
                "max_thresh": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "fib_iterative": {
            "name": "fib_iterative",
            "location": 79,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "fib_formula": {
            "name": "fib_formula",
            "location": 96,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "timer_decorator.timer_wrapper": {
            "name": "timer_wrapper",
            "location": 19,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Sequence[str]]"
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/maths/fibonacci_sequence_recursion.py": {
        "recur_fibo": {
            "name": "recur_fibo",
            "location": 3,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "isPositiveInteger": {
            "name": "isPositiveInteger",
            "location": 9,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "limit": [
                    "str",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/maths/find_lcm.py": {
        "find_lcm": {
            "name": "find_lcm",
            "location": 6,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "num_1": [
                    "int",
                    "list"
                ],
                "num_2": [
                    "int",
                    "list"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/maths/find_max.py": {
        "find_max": {
            "name": "find_max",
            "location": 3,
            "return": [
                ""
            ],
            "arguments": {
                "nums": [
                    "int",
                    "set",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/maths/find_min.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main.find_min": {
            "name": "find_min",
            "location": 6,
            "return": [
                "str",
                "int",
                "bool",
                "List[Dict]"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/maths/gaussian.py": {
        "gaussian": {
            "name": "gaussian",
            "location": 13,
            "return": [
                "numpy.ndarray",
                "Callable"
            ],
            "arguments": {
                "x": [
                    "float",
                    "Union[pandas.DataFrame, numpy.ndarray]",
                    "Union[pandas.Series, numpy.ndarray]"
                ],
                "mu": [
                    "float",
                    "Union[pandas.DataFrame, numpy.ndarray]",
                    "Union[pandas.Series, numpy.ndarray]"
                ],
                "sigma": [
                    "float",
                    "Union[pandas.DataFrame, numpy.ndarray]",
                    "Union[pandas.Series, numpy.ndarray]"
                ]
            }
        }
    },
    "PythonCode-master/maths/greater_common_divisor.py": {
        "gcd": {
            "name": "gcd",
            "location": 8,
            "return": [
                "int",
                "Union[bytes, bytearray]",
                "str",
                "bytes"
            ],
            "arguments": {
                "a": [
                    "int",
                    "List[float]"
                ],
                "b": [
                    "int",
                    "List[float]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/maths/is_square_free.py": {
        "is_square_free": {
            "name": "is_square_free",
            "location": 9,
            "return": [
                "str",
                "bool",
                "int",
                "set"
            ],
            "arguments": {
                "factors": [
                    "List[int]",
                    "Union[List[float], List[int]]",
                    "List[float]",
                    "Tuple[int, int, int]"
                ]
            }
        }
    },
    "PythonCode-master/maths/largest_of_very_large_numbers.py": {
        "res": {
            "name": "res",
            "location": 6,
            "return": [
                "str",
                "bool",
                "dict",
                "type",
                "list"
            ],
            "arguments": {
                "x": [
                    "Union[int, slice]",
                    "tuple",
                    "Tuple['cirq.Qid']",
                    "str"
                ],
                "y": [
                    "Union[int, slice]",
                    "tuple",
                    "Tuple['cirq.Qid']",
                    "str"
                ]
            }
        }
    },
    "PythonCode-master/maths/lucas_lehmer_primality_test.py": {
        "lucas_lehmer_test": {
            "name": "lucas_lehmer_test",
            "location": 17,
            "return": [],
            "arguments": {
                "p": []
            }
        }
    },
    "PythonCode-master/maths/lucas_series.py": {
        "recur_luc": {
            "name": "recur_luc",
            "location": 3,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "PythonCode-master/maths/mobius_function.py": {
        "mobius": {
            "name": "mobius",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/maths/modular_exponential.py": {
        "modular_exponential": {
            "name": "modular_exponential",
            "location": 4,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "base": [
                    "List[str]",
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "callable"
                ],
                "power": [
                    "float",
                    "int",
                    "str",
                    "List[int]"
                ],
                "mod": [
                    "List[str]",
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "callable"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/maths/newton_raphson.py": {
        "calc_derivative": {
            "name": "calc_derivative",
            "location": 13,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "f": [],
                "a": [],
                "h": []
            }
        },
        "newton_raphson": {
            "name": "newton_raphson",
            "location": 20,
            "return": [
                "str",
                "dict",
                "List[AnyStr]"
            ],
            "arguments": {
                "f": [
                    "Sequence[Any]",
                    "str"
                ],
                "x0": [
                    "int",
                    "T",
                    "Callable[[], None]"
                ],
                "maxiter": [
                    "Callable",
                    "Awaitable[T]",
                    "float",
                    "bool",
                    "str"
                ],
                "step": [
                    "Sequence[Any]",
                    "str",
                    "int"
                ],
                "maxerror": [
                    "Callable",
                    "Awaitable[T]",
                    "float",
                    "bool",
                    "str"
                ],
                "logsteps": [
                    "bool",
                    "Iterable[Any]",
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/maths/prime_check.py": {
        "prime_check": {
            "name": "prime_check",
            "location": 7,
            "return": [
                "bool"
            ],
            "arguments": {
                "number": [
                    "int",
                    "float",
                    "List[Tuple[int, int]]",
                    "bool"
                ]
            }
        },
        "Test.test_primes": {
            "name": "test_primes",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Test.test_not_primes": {
            "name": "test_not_primes",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PythonCode-master/maths/prime_factors.py": {
        "prime_factors": {
            "name": "prime_factors",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float",
                    "list"
                ]
            }
        }
    },
    "PythonCode-master/maths/quadratic_equations_complex_numbers.py": {
        "QuadraticEquation": {
            "name": "QuadraticEquation",
            "location": 5,
            "return": [
                "str"
            ],
            "arguments": {
                "a": [
                    "Optional[Union[int, float]]",
                    "int",
                    "float"
                ],
                "b": [
                    "float",
                    "int"
                ],
                "c": [
                    "int",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/maths/segmented_sieve.py": {
        "sieve": {
            "name": "sieve",
            "location": 6,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "PythonCode-master/maths/sieve_of_eratosthenes.py": {
        "sieve": {
            "name": "sieve",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/maths/simpson_rule.py": {
        "method_2": {
            "name": "method_2",
            "location": 14,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "boundary": [
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ],
                "steps": [
                    "str",
                    "int"
                ]
            }
        },
        "make_points": {
            "name": "make_points",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "a": [
                    "str",
                    "Iterable",
                    "Iterable[str]",
                    "Sequence[T]",
                    "bool"
                ],
                "b": [
                    "Tuple[int, int]",
                    "Dict[str, Any]",
                    "bool",
                    "T"
                ],
                "h": [
                    "int",
                    "str"
                ]
            }
        },
        "f": {
            "name": "f",
            "location": 36,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "Union[int, bool]",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/maths/trapezoidal_rule.py": {
        "method_1": {
            "name": "method_1",
            "location": 12,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "boundary": [
                    "Optional[int]",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ],
                "steps": [
                    "str",
                    "int"
                ]
            }
        },
        "make_points": {
            "name": "make_points",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "a": [
                    "str",
                    "Iterable",
                    "Iterable[str]",
                    "Sequence[T]",
                    "bool"
                ],
                "b": [
                    "Tuple[int, int]",
                    "Dict[str, Any]",
                    "bool",
                    "T"
                ],
                "h": [
                    "int",
                    "str"
                ]
            }
        },
        "f": {
            "name": "f",
            "location": 33,
            "return": [
                "float",
                "int",
                "str"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float",
                    "Union[int, bool]",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/maths/volume.py": {
        "vol_cube": {
            "name": "vol_cube",
            "location": 10,
            "return": [
                "str",
                "bytes",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "side_length": [
                    "str",
                    "bytes",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "vol_cuboid": {
            "name": "vol_cuboid",
            "location": 16,
            "return": [
                "int",
                "bytes",
                "str"
            ],
            "arguments": {
                "width": [
                    "int",
                    "Iterator[int]"
                ],
                "height": [
                    "int",
                    "Iterator[int]"
                ],
                "length": [
                    "int",
                    "Iterator[int]"
                ]
            }
        },
        "vol_cone": {
            "name": "vol_cone",
            "location": 22,
            "return": [
                "str",
                "Type",
                "int",
                "Tuple[type]"
            ],
            "arguments": {
                "area_of_base": [
                    "bytes",
                    "str",
                    "IO[str]",
                    "T",
                    "int"
                ],
                "height": [
                    "bytes",
                    "str",
                    "IO[str]",
                    "T",
                    "int"
                ]
            }
        },
        "vol_right_circ_cone": {
            "name": "vol_right_circ_cone",
            "location": 32,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "radius": [
                    "int",
                    "list",
                    "bool"
                ],
                "height": [
                    "int",
                    "list",
                    "bool"
                ]
            }
        },
        "vol_prism": {
            "name": "vol_prism",
            "location": 43,
            "return": [
                "str",
                "Type",
                "int",
                "Tuple[type]"
            ],
            "arguments": {
                "area_of_base": [
                    "bytes",
                    "str",
                    "IO[str]",
                    "T",
                    "int"
                ],
                "height": [
                    "bytes",
                    "str",
                    "IO[str]",
                    "T",
                    "int"
                ]
            }
        },
        "vol_pyramid": {
            "name": "vol_pyramid",
            "location": 53,
            "return": [
                "str",
                "Type",
                "int",
                "Tuple[type]"
            ],
            "arguments": {
                "area_of_base": [
                    "bytes",
                    "str",
                    "IO[str]",
                    "T",
                    "int"
                ],
                "height": [
                    "bytes",
                    "str",
                    "IO[str]",
                    "T",
                    "int"
                ]
            }
        },
        "vol_sphere": {
            "name": "vol_sphere",
            "location": 63,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "radius": [
                    "int",
                    "list",
                    "bool"
                ]
            }
        },
        "vol_circular_cylinder": {
            "name": "vol_circular_cylinder",
            "location": 73,
            "return": [
                "int",
                "bytes",
                "float",
                "set"
            ],
            "arguments": {
                "radius": [
                    "int",
                    "list",
                    "bool"
                ],
                "height": [
                    "int",
                    "list",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/maths/zellers_congruence.py": {
        "zeller": {
            "name": "zeller",
            "location": 6,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "date_input": [
                    "str",
                    "int",
                    "datetime.date",
                    "float",
                    "datetime.timedelta"
                ]
            }
        }
    },
    "PythonCode-master/maths/__init__.py": {},
    "PythonCode-master/matrix/matrix_operation.py": {
        "add": {
            "name": "add",
            "location": 6,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "matrix_a": [
                    "List[list]",
                    "int"
                ],
                "matrix_b": [
                    "List[list]",
                    "int"
                ]
            }
        },
        "subtract": {
            "name": "subtract",
            "location": 19,
            "return": [
                "str",
                "List[str]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "matrix_a": [
                    "List[list]",
                    "List[AnyStr]",
                    "int",
                    "bytes",
                    "float"
                ],
                "matrix_b": [
                    "List[list]",
                    "List[AnyStr]",
                    "int",
                    "bytes",
                    "float"
                ]
            }
        },
        "scalar_multiply": {
            "name": "scalar_multiply",
            "location": 32,
            "return": [
                "List[str]",
                "list"
            ],
            "arguments": {
                "matrix": [
                    "int",
                    "List[list]"
                ],
                "n": [
                    "int",
                    "List[list]"
                ]
            }
        },
        "multiply": {
            "name": "multiply",
            "location": 36,
            "return": [
                "str",
                "List[str]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "matrix_a": [
                    "List[list]",
                    "List[AnyStr]",
                    "int",
                    "bytes",
                    "float"
                ],
                "matrix_b": [
                    "List[list]",
                    "List[AnyStr]",
                    "int",
                    "bytes",
                    "float"
                ]
            }
        },
        "identity": {
            "name": "identity",
            "location": 55,
            "return": [
                "Sequence[Union[str, Any]]",
                "Sequence[T]",
                "str",
                "list",
                "Iterable[int]",
                "int",
                "Callable[[str, str], float]",
                "Tuple[int]",
                "Iterator[str]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "Dict[str, int]"
                ]
            }
        },
        "transpose": {
            "name": "transpose",
            "location": 65,
            "return": [
                "str",
                "bytes",
                "Union[List[str], str]",
                "Tuple[int, int]",
                "Optional[Union[str, Any]]",
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "matrix": [
                    "List[str]",
                    "Union[tuple, list]",
                    "list",
                    "List[int]",
                    "bool",
                    "str",
                    "dict"
                ],
                "return_map": [
                    "bool",
                    "Exception",
                    "Literal[True]",
                    "Literal[False]"
                ]
            }
        },
        "minor": {
            "name": "minor",
            "location": 77,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "matrix": [
                    "int"
                ],
                "row": [
                    "int",
                    "Sequence[str]",
                    "List[str]"
                ],
                "column": [
                    "str",
                    "int",
                    "List[str]",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "determinant": {
            "name": "determinant",
            "location": 83,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "matrix": [
                    "str",
                    "List[int]",
                    "int",
                    "list",
                    "float",
                    "bool"
                ]
            }
        },
        "inverse": {
            "name": "inverse",
            "location": 93,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "matrix": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "_check_not_integer": {
            "name": "_check_not_integer",
            "location": 108,
            "return": [
                "bool"
            ],
            "arguments": {
                "matrix": [
                    "list",
                    "str",
                    "List[float]",
                    "List[str]",
                    "List[int]"
                ]
            }
        },
        "_shape": {
            "name": "_shape",
            "location": 117,
            "return": [
                "List[Dict]",
                "List[str]",
                "List[int]",
                "str",
                "List[List[Any]]"
            ],
            "arguments": {
                "matrix": [
                    "str",
                    "Sequence[T]",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "_verify_matrix_sizes": {
            "name": "_verify_matrix_sizes",
            "location": 121,
            "return": [
                "List[List[str]]"
            ],
            "arguments": {
                "matrix_a": [
                    "str",
                    "float",
                    "Optional[int]"
                ],
                "matrix_b": [
                    "str",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/matrix/nth_fibonacci_using_matrix_exponentiation.py": {
        "multiply": {
            "name": "multiply",
            "location": 19,
            "return": [
                "str",
                "List[str]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "matrix_a": [
                    "int",
                    "List[str]",
                    "str"
                ],
                "matrix_b": [
                    "int",
                    "float",
                    "bytes"
                ]
            }
        },
        "identity": {
            "name": "identity",
            "location": 33,
            "return": [
                "Sequence[Union[str, Any]]",
                "Sequence[T]",
                "str",
                "list",
                "Iterable[int]",
                "int",
                "Callable[[str, str], float]",
                "Tuple[int]",
                "Iterator[str]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "List[str]",
                    "str"
                ]
            }
        },
        "nth_fibonacci_matrix": {
            "name": "nth_fibonacci_matrix",
            "location": 37,
            "return": [
                "int",
                "str",
                "list"
            ],
            "arguments": {
                "n": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "nth_fibonacci_bruteforce": {
            "name": "nth_fibonacci_bruteforce",
            "location": 57,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/matrix/rotate_matrix.py": {
        "make_matrix": {
            "name": "make_matrix",
            "location": 10,
            "return": [
                "str",
                "Dict[int, int]",
                "int",
                "Set[str]",
                "List[str]",
                "Sequence[object]"
            ],
            "arguments": {
                "row_size": [
                    "int"
                ]
            }
        },
        "rotate_90": {
            "name": "rotate_90",
            "location": 27,
            "return": [
                "int",
                "bool",
                "float",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "matrix": [
                    "[[]]",
                    "str",
                    "Set[int]",
                    "List[str]",
                    "Optional[int]"
                ]
            }
        },
        "rotate_180": {
            "name": "rotate_180",
            "location": 39,
            "return": [
                "float",
                "str",
                "bool",
                "List[List[int]]"
            ],
            "arguments": {
                "matrix": [
                    "[[]]",
                    "str",
                    "Set[int]",
                    "List[str]",
                    "Optional[int]"
                ]
            }
        },
        "rotate_270": {
            "name": "rotate_270",
            "location": 51,
            "return": [
                "int",
                "List[List[int]]",
                "List[Tuple[int, float, float]]",
                "bool",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "matrix": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "transpose": {
            "name": "transpose",
            "location": 63,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "matrix": [
                    "[[]]",
                    "List[str]",
                    "str",
                    "int"
                ]
            }
        },
        "reverse_row": {
            "name": "reverse_row",
            "location": 68,
            "return": [
                "[[]]",
                "int",
                "float",
                "List[int]",
                "Union[bool, None]"
            ],
            "arguments": {
                "matrix": [
                    "[[]]",
                    "int",
                    "float",
                    "List[int]",
                    "Union[bool, None]"
                ]
            }
        },
        "reverse_column": {
            "name": "reverse_column",
            "location": 73,
            "return": [
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "matrix": [
                    "[[]]",
                    "List[str]",
                    "Tuple[FrozenSet[int]]",
                    "str",
                    "int"
                ]
            }
        },
        "print_matrix": {
            "name": "print_matrix",
            "location": 78,
            "return": [
                "[[]]"
            ],
            "arguments": {
                "matrix": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "PythonCode-master/matrix/searching_in_sorted_matrix.py": {
        "search_in_a_sorted_matrix": {
            "name": "search_in_a_sorted_matrix",
            "location": 1,
            "return": [
                "int",
                "DefaultDict",
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "mat": [
                    "List[list]",
                    "bytes",
                    "int",
                    "dict",
                    "Optional[Sequence[T]]"
                ],
                "m": [
                    "int",
                    "bool",
                    "str"
                ],
                "n": [
                    "int",
                    "bytes",
                    "str"
                ],
                "key": [
                    "Union[int, float]",
                    "str",
                    "Iterable[T_co]",
                    "Union[str, type]",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/matrix/spiral_print.py": {
        "checkMatrix": {
            "name": "checkMatrix",
            "location": 9,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "a": [
                    "Sequence[int]",
                    "Set[int]"
                ]
            }
        },
        "spiralPrint": {
            "name": "spiralPrint",
            "location": 29,
            "return": [],
            "arguments": {
                "a": [
                    "Sequence[int]",
                    "str"
                ]
            }
        }
    },
    "PythonCode-master/matrix/tests/test_matrix_operation.py": {
        "test_addition": {
            "name": "test_addition",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "mat1": [
                    "numpy.ndarray",
                    "Sequence[numpy.ndarray]"
                ],
                "mat2": [
                    "numpy.ndarray",
                    "Sequence[numpy.ndarray]"
                ]
            }
        },
        "test_subtraction": {
            "name": "test_subtraction",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "mat1": [
                    "numpy.ndarray",
                    "List[numpy.ndarray]",
                    "float",
                    "numpy.array",
                    "str",
                    "int"
                ],
                "mat2": [
                    "numpy.ndarray",
                    "List[numpy.ndarray]",
                    "float",
                    "numpy.array",
                    "str",
                    "int"
                ]
            }
        },
        "test_multiplication": {
            "name": "test_multiplication",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "mat1": [
                    "numpy.ndarray",
                    "Sequence[numpy.ndarray]"
                ],
                "mat2": [
                    "numpy.ndarray",
                    "Sequence[numpy.ndarray]"
                ]
            }
        },
        "test_scalar_multiply": {
            "name": "test_scalar_multiply",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_identity": {
            "name": "test_identity",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_transpose": {
            "name": "test_transpose",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "mat": [
                    "List[numpy.ndarray]",
                    "numpy.ndarray",
                    "str",
                    "numpy.array",
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/networking_flow/ford_fulkerson.py": {
        "BFS": {
            "name": "BFS",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "graph": [
                    "List[List[str]]",
                    "int",
                    "List[T]",
                    "List[Tuple[int, int, str]]"
                ],
                "s": [
                    "type",
                    "list",
                    "int",
                    "List[int]",
                    "List[Tuple[str, int]]",
                    "List[float]"
                ],
                "t": [
                    "str",
                    "float",
                    "T"
                ],
                "parent": [
                    "str",
                    "int"
                ]
            }
        },
        "FordFulkerson": {
            "name": "FordFulkerson",
            "location": 25,
            "return": [
                "int",
                "List[str]",
                "List[float]",
                "str"
            ],
            "arguments": {
                "graph": [
                    "str",
                    "IO[str]",
                    "dict",
                    "List[str]"
                ],
                "source": [
                    "str",
                    "float"
                ],
                "sink": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/networking_flow/minimum_cut.py": {
        "BFS": {
            "name": "BFS",
            "location": 3,
            "return": [
                "bool"
            ],
            "arguments": {
                "graph": [
                    "List[List[str]]",
                    "int",
                    "List[T]",
                    "List[Tuple[int, int, str]]"
                ],
                "s": [
                    "type",
                    "list",
                    "int",
                    "List[int]",
                    "List[Tuple[str, int]]",
                    "List[float]"
                ],
                "t": [
                    "str",
                    "float",
                    "T"
                ],
                "parent": [
                    "str",
                    "int"
                ]
            }
        },
        "mincut": {
            "name": "mincut",
            "location": 20,
            "return": [
                "List[int]",
                "Iterable[str]",
                "Iterable[T]",
                "int"
            ],
            "arguments": {
                "graph": [
                    "str",
                    "Iterable[Type]",
                    "list",
                    "int",
                    "List[int]"
                ],
                "source": [
                    "str",
                    "float"
                ],
                "sink": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/neural_network/back_propagation_neural_network.py": {
        "sigmoid": {
            "name": "sigmoid",
            "location": 26,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "example": {
            "name": "example",
            "location": 175,
            "return": [],
            "arguments": {}
        },
        "DenseLayer.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [],
            "arguments": {
                "self": [],
                "units": [],
                "activation": [],
                "learning_rate": [],
                "is_input_layer": []
            }
        },
        "DenseLayer.initializer": {
            "name": "initializer",
            "location": 50,
            "return": [],
            "arguments": {
                "self": [],
                "back_units": []
            }
        },
        "DenseLayer.cal_gradient": {
            "name": "cal_gradient",
            "location": 56,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "DenseLayer.forward_propagation": {
            "name": "forward_propagation",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "xdata": []
            }
        },
        "DenseLayer.back_propagation": {
            "name": "back_propagation",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "gradient": []
            }
        },
        "BPNN.__init__": {
            "name": "__init__",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BPNN.add_layer": {
            "name": "add_layer",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "layer": []
            }
        },
        "BPNN.build": {
            "name": "build",
            "location": 109,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BPNN.summary": {
            "name": "summary",
            "location": 116,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BPNN.train": {
            "name": "train",
            "location": 122,
            "return": [],
            "arguments": {
                "self": [],
                "xdata": [],
                "ydata": [],
                "train_round": [],
                "accuracy": []
            }
        },
        "BPNN.cal_loss": {
            "name": "cal_loss",
            "location": 156,
            "return": [],
            "arguments": {
                "self": [],
                "ydata": [],
                "ydata_": []
            }
        },
        "BPNN.plot_loss": {
            "name": "plot_loss",
            "location": 162,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "PythonCode-master/neural_network/convolution_neural_network.py": {
        "CNN.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [],
            "arguments": {
                "self": [],
                "conv1_get": [],
                "size_p1": [],
                "bp_num1": [],
                "bp_num2": [],
                "bp_num3": [],
                "rate_w": [],
                "rate_t": []
            }
        },
        "CNN.save_model": {
            "name": "save_model",
            "location": 52,
            "return": [],
            "arguments": {
                "self": [],
                "save_path": []
            }
        },
        "CNN.ReadModel": {
            "name": "ReadModel",
            "location": 74,
            "return": [],
            "arguments": {
                "cls": [],
                "model_path": []
            }
        },
        "CNN.sig": {
            "name": "sig",
            "location": 99,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "CNN.do_round": {
            "name": "do_round",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "CNN.convolute": {
            "name": "convolute",
            "location": 105,
            "return": [],
            "arguments": {
                "self": [],
                "data": [],
                "convs": [],
                "w_convs": [],
                "thre_convs": [],
                "conv_step": []
            }
        },
        "CNN.pooling": {
            "name": "pooling",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "featuremaps": [],
                "size_pooling": [],
                "type": []
            }
        },
        "CNN._expand": {
            "name": "_expand",
            "location": 155,
            "return": [],
            "arguments": {
                "self": [],
                "datas": []
            }
        },
        "CNN._expand_mat": {
            "name": "_expand_mat",
            "location": 166,
            "return": [],
            "arguments": {
                "self": [],
                "data_mat": []
            }
        },
        "CNN._calculate_gradient_from_pool": {
            "name": "_calculate_gradient_from_pool",
            "location": 173,
            "return": [],
            "arguments": {
                "self": [],
                "out_map": [],
                "pd_pool": [],
                "num_map": [],
                "size_map": [],
                "size_pooling": []
            }
        },
        "CNN.train": {
            "name": "train",
            "location": 192,
            "return": [],
            "arguments": {
                "self": [],
                "patterns": [],
                "datas_train": [],
                "datas_teach": [],
                "n_repeat": [],
                "error_accuracy": [],
                "draw_e": []
            }
        },
        "CNN.predict": {
            "name": "predict",
            "location": 270,
            "return": [],
            "arguments": {
                "self": [],
                "datas_test": []
            }
        },
        "CNN.convolution": {
            "name": "convolution",
            "location": 291,
            "return": [],
            "arguments": {
                "self": [],
                "data": []
            }
        },
        "CNN.train.draw_error": {
            "name": "draw_error",
            "location": 256,
            "return": [],
            "arguments": {}
        }
    },
    "PythonCode-master/neural_network/perceptron.py": {
        "Perceptron.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sample": [
                    "int",
                    "str",
                    "bytes",
                    "List[int]",
                    "list"
                ],
                "exit": [
                    "int",
                    "bool",
                    "float"
                ],
                "learn_rate": [
                    "int",
                    "bool",
                    "float"
                ],
                "epoch_number": [
                    "int",
                    "bool",
                    "float"
                ],
                "bias": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Perceptron.training": {
            "name": "training",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Perceptron.sort": {
            "name": "sort",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sample": [
                    "float"
                ]
            }
        },
        "Perceptron.sign": {
            "name": "sign",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "u": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "PythonCode-master/other/anagrams.py": {
        "signature": {
            "name": "signature",
            "location": 10,
            "return": [
                "bool",
                "float",
                "str"
            ],
            "arguments": {
                "word": [
                    "list",
                    "int",
                    "Sequence['cirq.Qid']",
                    "bool",
                    "Optional[List[float]]"
                ]
            }
        },
        "anagram": {
            "name": "anagram",
            "location": 17,
            "return": [
                "list",
                "str",
                "bytes"
            ],
            "arguments": {
                "myword": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "PythonCode-master/other/binary_exponentiation.py": {
        "b_expo": {
            "name": "b_expo",
            "location": 14,
            "return": [
                "str",
                "bool",
                "int",
                "Hashable"
            ],
            "arguments": {
                "a": [
                    "int",
                    "Tuple[int, int]",
                    "float"
                ],
                "b": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "b_expo_mod": {
            "name": "b_expo_mod",
            "location": 26,
            "return": [
                "str",
                "bool",
                "int",
                "Hashable"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "str",
                    "T",
                    "Optional[int]",
                    "1",
                    "float"
                ],
                "c": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "PythonCode-master/other/binary_exponentiation_2.py": {
        "b_expo": {
            "name": "b_expo",
            "location": 14,
            "return": [
                "str",
                "bool",
                "int",
                "Hashable"
            ],
            "arguments": {
                "a": [
                    "int",
                    "Tuple[int, int]",
                    "float"
                ],
                "b": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "b_expo_mod": {
            "name": "b_expo_mod",
            "location": 26,
            "return": [
                "str",
                "bool",
                "int",
                "Hashable"
            ],
            "arguments": {
                "a": [
                    "int",
                    "float"
                ],
                "b": [
                    "int",
                    "str",
                    "T",
                    "Optional[int]",
                    "1",
                    "float"
                ],
                "c": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "PythonCode-master/other/detecting_english_programmatically.py": {
        "loadDictionary": {
            "name": "loadDictionary",
            "location": 6,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "getEnglishCount": {
            "name": "getEnglishCount",
            "location": 16,
            "return": [
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "message": []
            }
        },
        "removeNonLetters": {
            "name": "removeNonLetters",
            "location": 31,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "message": [
                    "list",
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "isEnglish": {
            "name": "isEnglish",
            "location": 38,
            "return": [
                "str",
                "bool",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "message": [
                    "int",
                    "List[int]",
                    "float",
                    "Sequence[int]"
                ],
                "wordPercentage": [
                    "int",
                    "Optional[str]",
                    "List[int]"
                ],
                "letterPercentage": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/other/euclidean_gcd.py": {
        "euclidean_gcd": {
            "name": "euclidean_gcd",
            "location": 4,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "a": [
                    "int"
                ],
                "b": [
                    "int",
                    "Sequence[T]",
                    "float"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/other/fischer_yates_shuffle.py": {
        "FYshuffle": {
            "name": "FYshuffle",
            "location": 10,
            "return": [],
            "arguments": {
                "LIST": []
            }
        }
    },
    "PythonCode-master/other/frequency_finder.py": {
        "getLetterCount": {
            "name": "getLetterCount",
            "location": 13,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "message": [
                    "str",
                    "bool"
                ]
            }
        },
        "getItemAtIndexZero": {
            "name": "getItemAtIndexZero",
            "location": 24,
            "return": [
                "str",
                "bool",
                "List[int]",
                "int",
                "float"
            ],
            "arguments": {
                "x": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "getFrequencyOrder": {
            "name": "getFrequencyOrder",
            "location": 27,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "message": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "englishFreqMatchScore": {
            "name": "englishFreqMatchScore",
            "location": 49,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "bool",
                "int"
            ],
            "arguments": {
                "message": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "PythonCode-master/other/game_of_life.py": {
        "create_canvas": {
            "name": "create_canvas",
            "location": 40,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "size": [
                    "int",
                    "List[numpy.ndarray]",
                    "Tuple[int, int]"
                ]
            }
        },
        "seed": {
            "name": "seed",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "canvas": [
                    "bool",
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 49,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "canvas": [
                    "int"
                ]
            }
        },
        "__judge_point": {
            "name": "__judge_point",
            "location": 70,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "pt": [
                    "int",
                    "Callable",
                    "str"
                ],
                "neighbours": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "PythonCode-master/other/linear_congruential_generator.py": {
        "LinearCongruentialGenerator.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "multiplier": [
                    "int",
                    "bool",
                    "float"
                ],
                "increment": [
                    "int",
                    "bool",
                    "float"
                ],
                "modulo": [
                    "int",
                    "bool",
                    "float"
                ],
                "seed": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "LinearCongruentialGenerator.next_number": {
            "name": "next_number",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PythonCode-master/other/nested_brackets.py": {
        "is_balanced": {
            "name": "is_balanced",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "S": [
                    "str",
                    "int",
                    "List[Tuple[str]]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/other/palindrome.py": {
        "is_palindrome": {
            "name": "is_palindrome",
            "location": 2,
            "return": [
                "bool"
            ],
            "arguments": {
                "str": [
                    "int",
                    "str",
                    "Sequence[Any]",
                    "float"
                ]
            }
        },
        "recursive_palindrome": {
            "name": "recursive_palindrome",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "str": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/other/password_generator.py": {
        "password_generator": {
            "name": "password_generator",
            "location": 7,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "Optional[float]",
                "int"
            ],
            "arguments": {
                "length": [
                    "int",
                    "Tuple[int]"
                ]
            }
        },
        "alternative_password_generator": {
            "name": "alternative_password_generator",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "ctbi": [
                    "bool",
                    "int"
                ],
                "i": [
                    "bool",
                    "int"
                ]
            }
        },
        "random_number": {
            "name": "random_number",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "ctbi": [
                    "int",
                    "bool"
                ],
                "i": [
                    "int",
                    "bool"
                ]
            }
        },
        "random_letters": {
            "name": "random_letters",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "ctbi": [
                    "int",
                    "bool"
                ],
                "i": [
                    "int",
                    "bool"
                ]
            }
        },
        "random_characters": {
            "name": "random_characters",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "ctbi": [
                    "int",
                    "bool"
                ],
                "i": [
                    "int",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/other/primelib.py": {
        "isPrime": {
            "name": "isPrime",
            "location": 45,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "dict",
                "Optional[List[str]]",
                "int"
            ],
            "arguments": {
                "number": [
                    "int",
                    "List[List[str]]",
                    "Sequence[int]"
                ]
            }
        },
        "sieveEr": {
            "name": "sieveEr",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "N": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "getPrimeNumbers": {
            "name": "getPrimeNumbers",
            "location": 114,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "N": [
                    "int"
                ]
            }
        },
        "primeFactorization": {
            "name": "primeFactorization",
            "location": 142,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "number": [
                    "list",
                    "float",
                    "bool",
                    "int"
                ]
            }
        },
        "greatestPrimeFactor": {
            "name": "greatestPrimeFactor",
            "location": 187,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "number": [
                    "str",
                    "float",
                    "bool",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "smallestPrimeFactor": {
            "name": "smallestPrimeFactor",
            "location": 213,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "number": [
                    "str",
                    "float",
                    "bool",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "isEven": {
            "name": "isEven",
            "location": 238,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "number": [
                    "int",
                    "List[list]",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "isOdd": {
            "name": "isOdd",
            "location": 252,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "number": [
                    "int",
                    "List[list]",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "goldbach": {
            "name": "goldbach",
            "location": 267,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "number": [
                    "int",
                    "str"
                ]
            }
        },
        "gcd": {
            "name": "gcd",
            "location": 316,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "number1": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "float"
                ],
                "number2": [
                    "int",
                    "str",
                    "List[list]"
                ]
            }
        },
        "kgV": {
            "name": "kgV",
            "location": 344,
            "return": [
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "number1": [
                    "int",
                    "str",
                    "Union[int, List]",
                    "bool"
                ],
                "number2": [
                    "int",
                    "str",
                    "Union[int, List]",
                    "bool"
                ]
            }
        },
        "getPrime": {
            "name": "getPrime",
            "location": 418,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "getPrimesBetween": {
            "name": "getPrimesBetween",
            "location": 450,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "pNumber1": [
                    "Optional[int]",
                    "str",
                    "bool",
                    "float"
                ],
                "pNumber2": [
                    "Optional[int]",
                    "str",
                    "bool",
                    "float"
                ]
            }
        },
        "getDivisors": {
            "name": "getDivisors",
            "location": 491,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "isPerfectNumber": {
            "name": "isPerfectNumber",
            "location": 519,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "number": [
                    "int",
                    "List[int]"
                ]
            }
        },
        "simplifyFraction": {
            "name": "simplifyFraction",
            "location": 541,
            "return": [
                "int",
                "Optional[int]",
                "List[int]"
            ],
            "arguments": {
                "numerator": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "bool",
                    "float"
                ],
                "denominator": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "bool",
                    "float"
                ]
            }
        },
        "factorial": {
            "name": "factorial",
            "location": 565,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "list"
                ]
            }
        },
        "fib": {
            "name": "fib",
            "location": 583,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "list"
                ]
            }
        }
    },
    "PythonCode-master/other/sierpinski_triangle.py": {
        "getMid": {
            "name": "getMid",
            "location": 33,
            "return": [],
            "arguments": {
                "p1": [],
                "p2": []
            }
        },
        "triangle": {
            "name": "triangle",
            "location": 36,
            "return": [],
            "arguments": {
                "points": [],
                "depth": []
            }
        }
    },
    "PythonCode-master/other/tower_of_hanoi.py": {
        "moveTower": {
            "name": "moveTower",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "height": [
                    "int",
                    "float",
                    "str",
                    "Mapping",
                    "Tuple[int, int]"
                ],
                "fromPole": [
                    "str",
                    "int",
                    "bool",
                    "float"
                ],
                "toPole": [
                    "str",
                    "int",
                    "bool",
                    "float"
                ],
                "withPole": [
                    "int",
                    "float",
                    "str",
                    "Mapping",
                    "Tuple[int, int]"
                ]
            }
        },
        "moveDisk": {
            "name": "moveDisk",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "fp": [
                    "str",
                    "int"
                ],
                "tp": [
                    "str",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/other/two_sum.py": {
        "twoSum": {
            "name": "twoSum",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "nums": [
                    "int",
                    "Callable",
                    "str"
                ],
                "target": [
                    "Tuple['cirq.Qid']",
                    "List[str]"
                ]
            }
        }
    },
    "PythonCode-master/other/word_patterns.py": {
        "getWordPattern": {
            "name": "getWordPattern",
            "location": 4,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "word": [
                    "str",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/project_euler/problem_01/sol1.py": {
        "solution": {
            "name": "solution",
            "location": 15,
            "return": [
                "List[str]",
                "str",
                "Tuple[int, int]",
                "List[float]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "List[str]",
                    "Optional[int]"
                ]
            }
        }
    },
    "PythonCode-master/project_euler/problem_01/sol2.py": {
        "solution": {
            "name": "solution",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "PythonCode-master/project_euler/problem_01/sol3.py": {
        "solution": {
            "name": "solution",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "list"
                ]
            }
        }
    },
    "PythonCode-master/project_euler/problem_01/sol4.py": {
        "solution": {
            "name": "solution",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "List[Tuple[str, str]]",
                    "dict",
                    "List[Union[Any, Any, Any]]",
                    "Pattern[str]"
                ]
            }
        }
    },
    "PythonCode-master/project_euler/problem_01/sol5.py": {
        "solution": {
            "name": "solution",
            "location": 17,
            "return": [
                "Set[str]",
                "Tuple[int]",
                "str",
                "int",
                "Optional[dict]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        }
    },
    "PythonCode-master/project_euler/problem_01/sol6.py": {
        "solution": {
            "name": "solution",
            "location": 15,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "Optional[int]"
                ]
            }
        }
    },
    "PythonCode-master/project_euler/problem_01/__init__.py": {},
    "PythonCode-master/project_euler/problem_02/sol1.py": {
        "solution": {
            "name": "solution",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/project_euler/problem_02/sol2.py": {
        "solution": {
            "name": "solution",
            "location": 20,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/project_euler/problem_02/sol3.py": {
        "solution": {
            "name": "solution",
            "location": 20,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "str",
                    "float",
                    "Optional[int]"
                ]
            }
        }
    },
    "PythonCode-master/project_euler/problem_02/sol4.py": {
        "solution": {
            "name": "solution",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "PythonCode-master/project_euler/problem_02/__init__.py": {},
    "PythonCode-master/project_euler/problem_03/sol1.py": {
        "isprime": {
            "name": "isprime",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "no": [
                    "str",
                    "dict"
                ]
            }
        },
        "solution": {
            "name": "solution",
            "location": 29,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "Union[str, int]"
                ]
            }
        }
    },
    "PythonCode-master/project_euler/problem_03/sol2.py": {
        "solution": {
            "name": "solution",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/project_euler/problem_03/__init__.py": {},
    "PythonCode-master/project_euler/problem_04/sol1.py": {
        "solution": {
            "name": "solution",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/project_euler/problem_04/sol2.py": {
        "solution": {
            "name": "solution",
            "location": 17,
            "return": [
                "str",
                "List[str]",
                "list"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/project_euler/problem_04/__init__.py": {},
    "PythonCode-master/project_euler/problem_05/sol1.py": {
        "solution": {
            "name": "solution",
            "location": 17,
            "return": [
                "int",
                "slice",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "PythonCode-master/project_euler/problem_05/sol2.py": {
        "gcd": {
            "name": "gcd",
            "location": 19,
            "return": [
                "int",
                "float",
                "str",
                "List[int]"
            ],
            "arguments": {
                "x": [
                    "int",
                    "float"
                ],
                "y": [
                    "int",
                    "float"
                ]
            }
        },
        "lcm": {
            "name": "lcm",
            "location": 26,
            "return": [
                "int",
                "List[int]",
                "str"
            ],
            "arguments": {
                "x": [
                    "int"
                ],
                "y": [
                    "int"
                ]
            }
        },
        "solution": {
            "name": "solution",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/project_euler/problem_05/__init__.py": {},
    "PythonCode-master/project_euler/problem_06/sol1.py": {
        "solution": {
            "name": "solution",
            "location": 25,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "PythonCode-master/project_euler/problem_06/sol2.py": {
        "solution": {
            "name": "solution",
            "location": 25,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "PythonCode-master/project_euler/problem_06/sol3.py": {
        "solution": {
            "name": "solution",
            "location": 26,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "PythonCode-master/project_euler/problem_06/__init__.py": {},
    "PythonCode-master/project_euler/problem_07/sol1.py": {
        "isprime": {
            "name": "isprime",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "str"
                ]
            }
        },
        "solution": {
            "name": "solution",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "PythonCode-master/project_euler/problem_07/sol2.py": {
        "isprime": {
            "name": "isprime",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "number": [
                    "float",
                    "Union[float, str]",
                    "bool"
                ]
            }
        },
        "solution": {
            "name": "solution",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/project_euler/problem_07/sol3.py": {
        "primeCheck": {
            "name": "primeCheck",
            "location": 19,
            "return": [
                "bool"
            ],
            "arguments": {
                "number": [
                    "int",
                    "bool"
                ]
            }
        },
        "prime_generator": {
            "name": "prime_generator",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "solution": {
            "name": "solution",
            "location": 33,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/project_euler/problem_07/__init__.py": {},
    "PythonCode-master/project_euler/problem_08/sol1.py": {
        "solution": {
            "name": "solution",
            "location": 54,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "PythonCode-master/project_euler/problem_08/sol2.py": {
        "solution": {
            "name": "solution",
            "location": 57,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "PythonCode-master/project_euler/problem_08/__init__.py": {},
    "PythonCode-master/project_euler/problem_09/sol1.py": {
        "solution": {
            "name": "solution",
            "location": 13,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/project_euler/problem_09/sol2.py": {
        "solution": {
            "name": "solution",
            "location": 18,
            "return": [
                "bool",
                "List[Dict[str, Any]]",
                "List[int]",
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool",
                    "Collection[\"Issue\"]"
                ]
            }
        }
    },
    "PythonCode-master/project_euler/problem_09/sol3.py": {
        "solution": {
            "name": "solution",
            "location": 16,
            "return": [
                "str",
                "bytes",
                "Tuple[int]",
                "List[int]",
                "List[float]",
                "Callable",
                "Callable[[str, str], float]",
                "Mapping[str, Any]"
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/project_euler/problem_09/__init__.py": {},
    "PythonCode-master/project_euler/problem_10/sol1.py": {
        "is_prime": {
            "name": "is_prime",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "sum_of_primes": {
            "name": "sum_of_primes",
            "location": 29,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "solution": {
            "name": "solution",
            "location": 42,
            "return": [
                "str",
                "bytes",
                "Tuple[int, int]"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/project_euler/problem_10/sol2.py": {
        "primeCheck": {
            "name": "primeCheck",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "number": [
                    "int",
                    "bool"
                ]
            }
        },
        "prime_generator": {
            "name": "prime_generator",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "solution": {
            "name": "solution",
            "location": 31,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "n": [
                    "int",
                    "List[list]",
                    "list"
                ]
            }
        }
    },
    "PythonCode-master/project_euler/problem_10/sol3.py": {
        "prime_sum": {
            "name": "prime_sum",
            "location": 14,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "PythonCode-master/project_euler/problem_10/__init__.py": {},
    "PythonCode-master/project_euler/problem_11/sol1.py": {
        "largest_product": {
            "name": "largest_product",
            "location": 36,
            "return": [
                "int",
                "Optional[str]",
                "Tuple[str, int]",
                "bytearray"
            ],
            "arguments": {
                "grid": [
                    "list",
                    "List[int]",
                    "List[List[str]]"
                ]
            }
        },
        "solution": {
            "name": "solution",
            "location": 82,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/project_euler/problem_11/sol2.py": {
        "solution": {
            "name": "solution",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/project_euler/problem_11/__init__.py": {},
    "PythonCode-master/project_euler/problem_12/sol1.py": {
        "count_divisors": {
            "name": "count_divisors",
            "location": 33,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        },
        "solution": {
            "name": "solution",
            "location": 44,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/project_euler/problem_12/sol2.py": {
        "triangle_number_generator": {
            "name": "triangle_number_generator",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "count_divisors": {
            "name": "count_divisors",
            "location": 32,
            "return": [
                "List[str]",
                "List[int]",
                "list",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "bool"
                ]
            }
        },
        "solution": {
            "name": "solution",
            "location": 38,
            "return": [
                "int",
                "List[float]",
                "Tuple[int]"
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/project_euler/problem_12/__init__.py": {},
    "PythonCode-master/project_euler/problem_13/sol1.py": {
        "solution": {
            "name": "solution",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "array": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "PythonCode-master/project_euler/problem_13/__init__.py": {},
    "PythonCode-master/project_euler/problem_14/sol1.py": {
        "solution": {
            "name": "solution",
            "location": 27,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "PythonCode-master/project_euler/problem_14/sol2.py": {
        "collatz_sequence": {
            "name": "collatz_sequence",
            "location": 35,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "solution": {
            "name": "solution",
            "location": 47,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "PythonCode-master/project_euler/problem_14/__init__.py": {},
    "PythonCode-master/project_euler/problem_15/sol1.py": {
        "lattice_paths": {
            "name": "lattice_paths",
            "location": 9,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "PythonCode-master/project_euler/problem_15/__init__.py": {},
    "PythonCode-master/project_euler/problem_16/sol1.py": {
        "solution": {
            "name": "solution",
            "location": 8,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "power": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "PythonCode-master/project_euler/problem_16/sol2.py": {
        "solution": {
            "name": "solution",
            "location": 8,
            "return": [
                "List[str]",
                "bool",
                "List[Mapping[str, Any]]",
                "Tuple[type]",
                "str"
            ],
            "arguments": {
                "power": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "PythonCode-master/project_euler/problem_16/__init__.py": {},
    "PythonCode-master/project_euler/problem_17/sol1.py": {
        "solution": {
            "name": "solution",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/project_euler/problem_17/__init__.py": {},
    "PythonCode-master/project_euler/problem_19/sol1.py": {
        "solution": {
            "name": "solution",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/project_euler/problem_19/__init__.py": {},
    "PythonCode-master/project_euler/problem_20/sol1.py": {
        "factorial": {
            "name": "factorial",
            "location": 11,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "split_and_add": {
            "name": "split_and_add",
            "location": 18,
            "return": [],
            "arguments": {
                "number": []
            }
        },
        "solution": {
            "name": "solution",
            "location": 28,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "PythonCode-master/project_euler/problem_20/sol2.py": {
        "solution": {
            "name": "solution",
            "location": 12,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "PythonCode-master/project_euler/problem_20/__init__.py": {},
    "PythonCode-master/project_euler/problem_21/sol1.py": {
        "sum_of_divisors": {
            "name": "sum_of_divisors",
            "location": 25,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "solution": {
            "name": "solution",
            "location": 35,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "PythonCode-master/project_euler/problem_21/__init__.py": {},
    "PythonCode-master/project_euler/problem_22/sol1.py": {
        "solution": {
            "name": "solution",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/project_euler/problem_22/sol2.py": {
        "solution": {
            "name": "solution",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/project_euler/problem_22/__init__.py": {},
    "PythonCode-master/project_euler/problem_234/sol1.py": {
        "fib": {
            "name": "fib",
            "location": 20,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "n": []
            }
        },
        "solution": {
            "name": "solution",
            "location": 38,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "PythonCode-master/project_euler/problem_234/__init__.py": {},
    "PythonCode-master/project_euler/problem_24/sol1.py": {
        "solution": {
            "name": "solution",
            "location": 15,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/project_euler/problem_24/__init__.py": {},
    "PythonCode-master/project_euler/problem_25/sol1.py": {
        "fibonacci": {
            "name": "fibonacci",
            "location": 34,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "fibonacci_digits_index": {
            "name": "fibonacci_digits_index",
            "location": 47,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "solution": {
            "name": "solution",
            "location": 58,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "PythonCode-master/project_euler/problem_25/sol2.py": {
        "fibonacci_generator": {
            "name": "fibonacci_generator",
            "location": 29,
            "return": [],
            "arguments": {}
        },
        "solution": {
            "name": "solution",
            "location": 36,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "PythonCode-master/project_euler/problem_25/__init__.py": {},
    "PythonCode-master/project_euler/problem_28/sol1.py": {
        "diagonal_sum": {
            "name": "diagonal_sum",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "n": [
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        }
    },
    "PythonCode-master/project_euler/problem_28/__init__.py": {},
    "PythonCode-master/project_euler/problem_29/solution.py": {
        "solution": {
            "name": "solution",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/project_euler/problem_29/__init__.py": {},
    "PythonCode-master/project_euler/problem_31/sol1.py": {
        "one_pence": {
            "name": "one_pence",
            "location": 22,
            "return": [],
            "arguments": {}
        },
        "two_pence": {
            "name": "two_pence",
            "location": 26,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "five_pence": {
            "name": "five_pence",
            "location": 30,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "ten_pence": {
            "name": "ten_pence",
            "location": 34,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "twenty_pence": {
            "name": "twenty_pence",
            "location": 38,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "fifty_pence": {
            "name": "fifty_pence",
            "location": 42,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "one_pound": {
            "name": "one_pound",
            "location": 46,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "two_pound": {
            "name": "two_pound",
            "location": 50,
            "return": [],
            "arguments": {
                "x": []
            }
        },
        "solution": {
            "name": "solution",
            "location": 54,
            "return": [],
            "arguments": {
                "n": []
            }
        }
    },
    "PythonCode-master/project_euler/problem_31/__init__.py": {},
    "PythonCode-master/project_euler/problem_36/sol1.py": {
        "is_palindrome": {
            "name": "is_palindrome",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "n": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "Tuple[str, str]",
                    "List[str]"
                ]
            }
        },
        "solution": {
            "name": "solution",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "n": [
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/project_euler/problem_36/__init__.py": {},
    "PythonCode-master/project_euler/problem_40/sol1.py": {
        "solution": {
            "name": "solution",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/project_euler/problem_40/__init__.py": {},
    "PythonCode-master/project_euler/problem_48/sol1.py": {
        "solution": {
            "name": "solution",
            "location": 16,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/project_euler/problem_48/__init__.py": {},
    "PythonCode-master/project_euler/problem_52/sol1.py": {
        "solution": {
            "name": "solution",
            "location": 13,
            "return": [
                "int",
                "slice",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/project_euler/problem_52/__init__.py": {},
    "PythonCode-master/project_euler/problem_53/sol1.py": {
        "combinations": {
            "name": "combinations",
            "location": 29,
            "return": [],
            "arguments": {
                "n": [],
                "r": []
            }
        },
        "solution": {
            "name": "solution",
            "location": 33,
            "return": [],
            "arguments": {}
        }
    },
    "PythonCode-master/project_euler/problem_53/__init__.py": {},
    "PythonCode-master/project_euler/problem_76/sol1.py": {
        "partition": {
            "name": "partition",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "m": [
                    "int",
                    "dict"
                ]
            }
        }
    },
    "PythonCode-master/project_euler/problem_76/__init__.py": {},
    "PythonCode-master/scripts/build_directory_md.py": {
        "good_filepaths": {
            "name": "good_filepaths",
            "location": 9,
            "return": [
                "typing.Iterator[builtins.str]"
            ],
            "arguments": {
                "top_dir": [
                    "str"
                ]
            }
        },
        "md_prefix": {
            "name": "md_prefix",
            "location": 19,
            "return": [
                "str"
            ],
            "arguments": {
                "i": [
                    "int",
                    "bool"
                ]
            }
        },
        "print_path": {
            "name": "print_path",
            "location": 23,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "old_path": [
                    "str"
                ],
                "new_path": [
                    "str"
                ]
            }
        },
        "print_directory_md": {
            "name": "print_directory_md",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "top_dir": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "PythonCode-master/scripts/validate_filenames.py": {},
    "PythonCode-master/searches/binary_search.py": {
        "binary_search": {
            "name": "binary_search",
            "location": 21,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "sorted_collection": [
                    "str",
                    "int",
                    "Dict[str, Dict[str, Any]]",
                    "Sequence[str]",
                    "bytes",
                    "List[int]",
                    "Optional[str]"
                ],
                "item": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "binary_search_std_lib": {
            "name": "binary_search_std_lib",
            "location": 60,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "sorted_collection": [
                    "dict",
                    "List[int]",
                    "int",
                    "MutableMapping[str, str]",
                    "str"
                ],
                "item": [
                    "dict",
                    "List[int]",
                    "int",
                    "MutableMapping[str, str]",
                    "str"
                ]
            }
        },
        "binary_search_by_recursion": {
            "name": "binary_search_by_recursion",
            "location": 88,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "Optional[Dict]"
            ],
            "arguments": {
                "sorted_collection": [
                    "Callable",
                    "Dict[str, Set[str]]"
                ],
                "item": [
                    "Callable",
                    "Dict[str, Set[str]]"
                ],
                "left": [
                    "str",
                    "T"
                ],
                "right": [
                    "str",
                    "T"
                ]
            }
        },
        "__assert_sorted": {
            "name": "__assert_sorted",
            "location": 125,
            "return": [
                "bool"
            ],
            "arguments": {
                "collection": [
                    "list",
                    "int",
                    "Tuple[FrozenSet[int]]"
                ]
            }
        }
    },
    "PythonCode-master/searches/interpolation_search.py": {
        "interpolation_search": {
            "name": "interpolation_search",
            "location": 12,
            "return": [
                "bool",
                "Optional[float]",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "sorted_collection": [
                    "str",
                    "List[int]",
                    "list"
                ],
                "item": [
                    "str"
                ]
            }
        },
        "interpolation_search_by_recursion": {
            "name": "interpolation_search_by_recursion",
            "location": 54,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "sorted_collection": [
                    "str",
                    "float"
                ],
                "item": [
                    "str",
                    "Dict[str, Any]"
                ],
                "left": [
                    "str",
                    "float"
                ],
                "right": [
                    "Dict[str, bool]",
                    "dict",
                    "Mapping[str, Any]",
                    "str",
                    "bool"
                ]
            }
        },
        "__assert_sorted": {
            "name": "__assert_sorted",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "collection": [
                    "list",
                    "int",
                    "Tuple[FrozenSet[int]]"
                ]
            }
        }
    },
    "PythonCode-master/searches/jump_search.py": {
        "jump_search": {
            "name": "jump_search",
            "location": 3,
            "return": [
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "arr": [
                    "Union[int, str]",
                    "int",
                    "Sequence[int]",
                    "List['cirq.Qid']",
                    "bytes"
                ],
                "x": [
                    "int",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        }
    },
    "PythonCode-master/searches/linear_search.py": {
        "linear_search": {
            "name": "linear_search",
            "location": 19,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "sequence": [
                    "int",
                    "list",
                    "str"
                ],
                "target": [
                    "int",
                    "list",
                    "str"
                ]
            }
        }
    },
    "PythonCode-master/searches/quick_select.py": {
        "_partition": {
            "name": "_partition",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "data": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ],
                "pivot": [
                    "Union[int, str]",
                    "int",
                    "float",
                    "List[int]"
                ]
            }
        },
        "quickSelect": {
            "name": "quickSelect",
            "location": 25,
            "return": [
                "Optional[str]",
                "str",
                "type"
            ],
            "arguments": {
                "list": [
                    "List[int]",
                    "T",
                    "list"
                ],
                "k": [
                    "list",
                    "Callable"
                ]
            }
        }
    },
    "PythonCode-master/searches/sentinel_linear_search.py": {
        "sentinel_linear_search": {
            "name": "sentinel_linear_search",
            "location": 13,
            "return": [
                "Optional[int]",
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "sequence": [
                    "list",
                    "int",
                    "str",
                    "List[str]"
                ],
                "target": [
                    "dict",
                    "int",
                    "list"
                ]
            }
        }
    },
    "PythonCode-master/searches/tabu_search.py": {
        "generate_neighbours": {
            "name": "generate_neighbours",
            "location": 31,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "generate_first_solution": {
            "name": "generate_first_solution",
            "location": 69,
            "return": [
                "str",
                "DefaultDict[int, List[Any]]",
                "OrderedDict",
                "int"
            ],
            "arguments": {
                "path": [
                    "Optional[str]",
                    "str",
                    "Optional[bool]"
                ],
                "dict_of_neighbours": [
                    "int",
                    "dict",
                    "tuple",
                    "str"
                ]
            }
        },
        "find_neighborhood": {
            "name": "find_neighborhood",
            "location": 119,
            "return": [
                "str",
                "Dict[str, Any]",
                "set"
            ],
            "arguments": {
                "solution": [
                    "int",
                    "list",
                    "List[int]"
                ],
                "dict_of_neighbours": [
                    "str",
                    "Union[int, float]",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]",
                    "int"
                ]
            }
        },
        "tabu_search": {
            "name": "tabu_search",
            "location": 170,
            "return": [
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "first_solution": [
                    "int",
                    "Optional[Callable[[Any], None]]",
                    "str"
                ],
                "distance_of_first_solution": [
                    "int",
                    "Optional[Callable[[Any], None]]",
                    "str"
                ],
                "dict_of_neighbours": [
                    "str",
                    "Optional[List[str]]",
                    "Tuple[str, List[str]]"
                ],
                "iters": [
                    "int",
                    "Optional[Callable[[Any], None]]",
                    "str"
                ],
                "size": [
                    "list",
                    "tuple",
                    "List[dict]",
                    "str",
                    "List[str]",
                    "List[bytes]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "PythonCode-master/searches/ternary_search.py": {
        "lin_search": {
            "name": "lin_search",
            "location": 23,
            "return": [
                "int",
                "float",
                "Union[int, List]"
            ],
            "arguments": {
                "left": [
                    "int",
                    "List[int]"
                ],
                "right": [
                    "int",
                    "List[int]"
                ],
                "A": [
                    "int",
                    "str",
                    "bool"
                ],
                "target": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "ite_ternary_search": {
            "name": "ite_ternary_search",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "A": [
                    "int",
                    "List[int]",
                    "list",
                    "Optional[str]",
                    "str"
                ],
                "target": [
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "rec_ternary_search": {
            "name": "rec_ternary_search",
            "location": 58,
            "return": [
                "bool"
            ],
            "arguments": {
                "left": [
                    "float",
                    "bool"
                ],
                "right": [
                    "float",
                    "bool"
                ],
                "A": [
                    "list",
                    "int",
                    "str"
                ],
                "target": [
                    "list",
                    "int",
                    "str"
                ]
            }
        },
        "__assert_sorted": {
            "name": "__assert_sorted",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "collection": [
                    "list",
                    "int",
                    "Tuple[FrozenSet[int]]"
                ]
            }
        }
    },
    "PythonCode-master/sorts/bitonic_sort.py": {
        "compAndSwap": {
            "name": "compAndSwap",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "a": [
                    "float",
                    "str"
                ],
                "i": [
                    "float",
                    "str"
                ],
                "j": [
                    "float",
                    "str"
                ],
                "dire": [
                    "Tuple[int, int]",
                    "str",
                    "int",
                    "Tuple[int]"
                ]
            }
        },
        "bitonicMerge": {
            "name": "bitonicMerge",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "a": [],
                "low": [
                    "Type",
                    "type",
                    "tuple"
                ],
                "cnt": [
                    "str",
                    "int"
                ],
                "dire": []
            }
        },
        "bitonicSort": {
            "name": "bitonicSort",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "a": [
                    "int"
                ],
                "low": [
                    "int"
                ],
                "cnt": [
                    "bytes",
                    "Union[int, float]",
                    "float",
                    "int",
                    "bool",
                    "str"
                ],
                "dire": [
                    "Pattern",
                    "int",
                    "str",
                    "list"
                ]
            }
        },
        "sort": {
            "name": "sort",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "a": [
                    "int",
                    "bool"
                ],
                "N": [
                    "int",
                    "bool"
                ],
                "up": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "PythonCode-master/sorts/bogo_sort.py": {
        "bogo_sort": {
            "name": "bogo_sort",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "collection": [
                    "float",
                    "int"
                ]
            }
        },
        "bogo_sort.isSorted": {
            "name": "isSorted",
            "location": 29,
            "return": [
                "bool"
            ],
            "arguments": {
                "collection": [
                    "str",
                    "int",
                    "Tuple[str, str]"
                ]
            }
        }
    },
    "PythonCode-master/sorts/bubble_sort.py": {
        "bubble_sort": {
            "name": "bubble_sort",
            "location": 4,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "collection": [
                    "Sequence[T]",
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "List[int]",
                    "list"
                ]
            }
        }
    },
    "PythonCode-master/sorts/bucket_sort.py": {
        "bucket_sort": {
            "name": "bucket_sort",
            "location": 30,
            "return": [
                "int",
                "bool",
                "List[Tuple[int, str, str]]",
                "List[Dict[str, Any]]",
                "Optional[dict]"
            ],
            "arguments": {
                "my_list": [
                    "list",
                    "int",
                    "List[Tuple[str, int]]",
                    "List[\"ElementHandle\"]",
                    "List[dict]"
                ],
                "bucket_size": [
                    "int",
                    "bool",
                    "List[int]",
                    "List[List[str]]",
                    "Union[int, float]",
                    "Sequence[T]"
                ]
            }
        }
    },
    "PythonCode-master/sorts/cocktail_shaker_sort.py": {
        "cocktail_shaker_sort": {
            "name": "cocktail_shaker_sort",
            "location": 3,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "unsorted": [
                    "Sequence[T]",
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "List[int]",
                    "list"
                ]
            }
        }
    },
    "PythonCode-master/sorts/comb_sort.py": {
        "comb_sort": {
            "name": "comb_sort",
            "location": 15,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "bool",
                    "int",
                    "List['PlotInfo']",
                    "List[float]"
                ]
            }
        }
    },
    "PythonCode-master/sorts/counting_sort.py": {
        "counting_sort": {
            "name": "counting_sort",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "collection": [
                    "int",
                    "bool"
                ]
            }
        },
        "counting_sort_string": {
            "name": "counting_sort_string",
            "location": 60,
            "return": [
                "str",
                "bool",
                "int",
                "List['GridQubit']"
            ],
            "arguments": {
                "string": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/sorts/cycle_sort.py": {
        "cycle_sort": {
            "name": "cycle_sort",
            "location": 5,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "array": [
                    "int",
                    "list",
                    "List[List[int]]",
                    "List[Tuple[int, int]]",
                    "str",
                    "Sequence[int]"
                ]
            }
        }
    },
    "PythonCode-master/sorts/external_sort.py": {
        "parse_memory": {
            "name": "parse_memory",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {
                "string": [
                    "str",
                    "Dict[str, str]",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "FileSplitter.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "FileSplitter.write_block": {
            "name": "write_block",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Optional[bool]",
                    "bytes",
                    "bool",
                    "Optional[str]"
                ],
                "block_number": [
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "FileSplitter.get_block_filenames": {
            "name": "get_block_filenames",
            "location": 22,
            "return": [
                "type",
                "BaseException",
                "Exception",
                "str",
                "Type[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSplitter.split": {
            "name": "split",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "block_size": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "bytes"
                ],
                "sort_key": [
                    "Optional[str]",
                    "str",
                    "Union[None, str, int]"
                ]
            }
        },
        "FileSplitter.cleanup": {
            "name": "cleanup",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NWayMerge.select": {
            "name": "select",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "choices": [
                    "int",
                    "list",
                    "List[List[Any]]",
                    "Tuple[int]",
                    "List[str]"
                ]
            }
        },
        "FilesArray.__init__": {
            "name": "__init__",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "files": [
                    "int",
                    "List[str]",
                    "bool",
                    "BinaryIO",
                    "str"
                ]
            }
        },
        "FilesArray.get_dict": {
            "name": "get_dict",
            "location": 65,
            "return": [
                "Set[str]",
                "bool",
                "int",
                "List[str]",
                "list",
                "\"ImmutableSet[T]\""
            ],
            "arguments": {
                "self": []
            }
        },
        "FilesArray.refresh": {
            "name": "refresh",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FilesArray.unshift": {
            "name": "unshift",
            "location": 82,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "List[T]"
                ]
            }
        },
        "FileMerger.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "merge_strategy": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "FileMerger.merge": {
            "name": "merge",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filenames": [
                    "bool",
                    "str",
                    "int"
                ],
                "outfilename": [
                    "int",
                    "str",
                    "bytes"
                ],
                "buffer_size": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "FileMerger.get_file_handles": {
            "name": "get_file_handles",
            "location": 100,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "filenames": [
                    "str",
                    "int"
                ],
                "buffer_size": [
                    "str"
                ]
            }
        },
        "ExternalSort.__init__": {
            "name": "__init__",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "block_size": [
                    "int",
                    "Union[int, float]",
                    "str"
                ]
            }
        },
        "ExternalSort.sort": {
            "name": "sort",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Callable",
                    "int"
                ],
                "sort_key": [
                    "int",
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "ExternalSort.get_number_blocks": {
            "name": "get_number_blocks",
            "location": 125,
            "return": [
                "str",
                "Dict[str, str]",
                "IO",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "int"
                ],
                "block_size": [
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/sorts/gnome_sort.py": {
        "gnome_sort": {
            "name": "gnome_sort",
            "location": 6,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "unsorted": [
                    "list",
                    "List[List[int]]",
                    "Tuple['cirq.Qid']",
                    "int",
                    "float"
                ]
            }
        }
    },
    "PythonCode-master/sorts/heap_sort.py": {
        "heapify": {
            "name": "heapify",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "unsorted": [
                    "int",
                    "Tuple[int, int]",
                    "float",
                    "str"
                ],
                "index": [
                    "int"
                ],
                "heap_size": [
                    "int",
                    "Tuple[int, int]",
                    "float",
                    "str"
                ]
            }
        },
        "heap_sort": {
            "name": "heap_sort",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "unsorted": [
                    "List[int]",
                    "list",
                    "List[float]"
                ]
            }
        }
    },
    "PythonCode-master/sorts/insertion_sort.py": {
        "insertion_sort": {
            "name": "insertion_sort",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "collection": [
                    "Sequence[T]",
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "List[int]",
                    "list"
                ]
            }
        }
    },
    "PythonCode-master/sorts/merge_sort.py": {
        "merge_sort": {
            "name": "merge_sort",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "collection": [
                    "List[int]",
                    "List[str]",
                    "list",
                    "int",
                    "Sequence[T]"
                ]
            }
        },
        "merge_sort.merge": {
            "name": "merge",
            "location": 32,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "left": [
                    "int",
                    "float",
                    "Sequence[int]",
                    "List[str]",
                    "Sequence[Any]"
                ],
                "right": [
                    "int",
                    "float",
                    "Sequence[int]",
                    "List[str]",
                    "Sequence[Any]"
                ]
            }
        }
    },
    "PythonCode-master/sorts/merge_sort_fastest.py": {
        "merge_sort": {
            "name": "merge_sort",
            "location": 10,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "collection": [
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/sorts/odd_even_transposition_parallel.py": {
        "oeProcess": {
            "name": "oeProcess",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "position": [
                    "Optional[bytes]",
                    "float"
                ],
                "value": [
                    "T",
                    "Union[int, float]",
                    "str",
                    "dict",
                    "Optional[Tuple[float, float]]"
                ],
                "LSend": [
                    "bool",
                    "Optional[Dict[Any, Any]]",
                    "Optional[Callable[[Any], bool]]"
                ],
                "RSend": [
                    "bool",
                    "Optional[Dict[Any, Any]]",
                    "Optional[Callable[[Any], bool]]"
                ],
                "LRcv": [
                    "float",
                    "Exception",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "RRcv": [
                    "float",
                    "Exception",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "resultPipe": [
                    "dict",
                    "Dict[str, Tuple[Any, Any]]",
                    "bytes"
                ]
            }
        },
        "OddEvenTransposition": {
            "name": "OddEvenTransposition",
            "location": 70,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "arr": [
                    "list",
                    "int",
                    "Sequence[str]",
                    "Optional[str]",
                    "List[str]",
                    "Sequence[int]",
                    "Dict[str, str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/sorts/odd_even_transposition_single_threaded.py": {
        "OddEvenTransposition": {
            "name": "OddEvenTransposition",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "arr": [
                    "list",
                    "List[List[Any]]",
                    "str",
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/sorts/pancake_sort.py": {
        "pancake_sort": {
            "name": "pancake_sort",
            "location": 5,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "arr": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "PythonCode-master/sorts/pigeon_sort.py": {
        "pigeon_sort": {
            "name": "pigeon_sort",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "array": [
                    "list",
                    "str",
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/sorts/quick_sort.py": {
        "quick_sort": {
            "name": "quick_sort",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "collection": [
                    "Sequence[T]",
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "List[int]",
                    "list"
                ]
            }
        }
    },
    "PythonCode-master/sorts/quick_sort_3_partition.py": {
        "quick_sort_3partition": {
            "name": "quick_sort_3partition",
            "location": 3,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "sorting": [
                    "List[str]",
                    "Iterable[Any]",
                    "list",
                    "Set[str]"
                ],
                "left": [],
                "right": [
                    "int",
                    "List[int]",
                    "Tuple[int, int, int]"
                ]
            }
        }
    },
    "PythonCode-master/sorts/radix_sort.py": {
        "radix_sort": {
            "name": "radix_sort",
            "location": 1,
            "return": [
                ""
            ],
            "arguments": {
                "lst": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "PythonCode-master/sorts/random_normal_distribution_quicksort.py": {
        "_inPlaceQuickSort": {
            "name": "_inPlaceQuickSort",
            "location": 8,
            "return": [
                "int",
                "Callable[[Mapping], T]",
                "Dict[str, str]"
            ],
            "arguments": {
                "A": [
                    "int"
                ],
                "start": [
                    "int",
                    "Tuple[int, int]"
                ],
                "end": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "_inPlacePartition": {
            "name": "_inPlacePartition",
            "location": 21,
            "return": [
                "int",
                "Iterable[str]",
                "Sequence[str]",
                "numpy.ndarray",
                "str"
            ],
            "arguments": {
                "A": [
                    "int",
                    "float",
                    "Optional[float]"
                ],
                "start": [
                    "int",
                    "List[int]",
                    "Sequence[int]",
                    "bool"
                ],
                "end": [
                    "int",
                    "Optional[int]",
                    "Optional[float]",
                    "float"
                ]
            }
        }
    },
    "PythonCode-master/sorts/random_pivot_quick_sort.py": {
        "partition": {
            "name": "partition",
            "location": 6,
            "return": [
                "int",
                "slice",
                "str",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "A": [
                    "float",
                    "int"
                ],
                "left_index": [
                    "float",
                    "int"
                ],
                "right_index": [
                    "Callable[[T], T]",
                    "int"
                ]
            }
        },
        "quick_sort_random": {
            "name": "quick_sort_random",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "A": [
                    "float",
                    "int"
                ],
                "left": [
                    "int",
                    "list",
                    "bool",
                    "str",
                    "float"
                ],
                "right": [
                    "int"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/sorts/selection_sort.py": {
        "selection_sort": {
            "name": "selection_sort",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "collection": [
                    "list",
                    "int",
                    "List[int]",
                    "List[float]"
                ]
            }
        }
    },
    "PythonCode-master/sorts/shell_sort.py": {
        "shell_sort": {
            "name": "shell_sort",
            "location": 15,
            "return": [
                "int",
                "str",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "collection": [
                    "Collection[int]",
                    "List[int]",
                    "Dict[str, str]",
                    "List[Tuple[int, int]]",
                    "list",
                    "List[Tuple]",
                    "int"
                ]
            }
        }
    },
    "PythonCode-master/sorts/tim_sort.py": {
        "binary_search": {
            "name": "binary_search",
            "location": 1,
            "return": [
                "int",
                "FrozenSet[Any]",
                "str"
            ],
            "arguments": {
                "lst": [
                    "List[Type]",
                    "bool",
                    "Hashable",
                    "float",
                    "Sequence[Any]",
                    "Dict[str, object]"
                ],
                "item": [
                    "List[Type]",
                    "bool",
                    "Hashable",
                    "float",
                    "Sequence[Any]",
                    "Dict[str, object]"
                ],
                "start": [
                    "int"
                ],
                "end": [
                    "int",
                    "float"
                ]
            }
        },
        "insertion_sort": {
            "name": "insertion_sort",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "lst": [
                    "list",
                    "str",
                    "int",
                    "Optional[Union[str, Any, Any, Any]]"
                ]
            }
        },
        "merge": {
            "name": "merge",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "left": [
                    "int",
                    "Callable",
                    "str"
                ],
                "right": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "tim_sort": {
            "name": "tim_sort",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "lst": [
                    "List[int]",
                    "list",
                    "Sequence[Any]",
                    "Optional[Union[str, Any, Any, Any]]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "PythonCode-master/sorts/topological_sort.py": {
        "topological_sort": {
            "name": "topological_sort",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "start": [
                    "str",
                    "int"
                ],
                "visited": [
                    "str",
                    "bool",
                    "int",
                    "float",
                    "list",
                    "List[str]"
                ],
                "sort": [
                    "str",
                    "int",
                    "List[int]",
                    "bool"
                ]
            }
        }
    },
    "PythonCode-master/sorts/tree_sort.py": {
        "inorder": {
            "name": "inorder",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "root": [
                    "str",
                    "List[int]",
                    "int",
                    "list",
                    "Sequence[int]",
                    "bytes",
                    "Sequence[T]"
                ],
                "res": [
                    "str",
                    "List[int]",
                    "int",
                    "list",
                    "Sequence[int]",
                    "bytes",
                    "Sequence[T]"
                ]
            }
        },
        "tree_sort": {
            "name": "tree_sort",
            "location": 39,
            "return": [
                "bool",
                "type",
                "Tuple[int]",
                "Optional[str]"
            ],
            "arguments": {
                "arr": [
                    "str",
                    "bool"
                ]
            }
        },
        "node.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "val": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "node.insert": {
            "name": "insert",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "val": [
                    "int",
                    "Tuple[int, int, int]"
                ]
            }
        }
    },
    "PythonCode-master/sorts/wiggle_sort.py": {
        "wiggle_sort": {
            "name": "wiggle_sort",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "nums": [
                    "List[int]",
                    "list",
                    "List[float]",
                    "str"
                ]
            }
        }
    },
    "PythonCode-master/strings/boyer_moore_search.py": {
        "BoyerMooreSearch.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "List[str]"
                ],
                "pattern": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "BoyerMooreSearch.match_in_pattern": {
            "name": "match_in_pattern",
            "location": 30,
            "return": [
                "int",
                "str",
                "Optional[int]",
                "slice",
                "float",
                "Union[int, List]"
            ],
            "arguments": {
                "self": [],
                "char": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "BoyerMooreSearch.mismatch_in_text": {
            "name": "mismatch_in_text",
            "location": 47,
            "return": [
                "List[str]",
                "str",
                "Iterable[T]",
                "int",
                "List[\"DictDataLoader\"]"
            ],
            "arguments": {
                "self": [],
                "currentPos": [
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "BoyerMooreSearch.bad_character_heuristic": {
            "name": "bad_character_heuristic",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "PythonCode-master/strings/knuth_morris_pratt.py": {
        "kmp": {
            "name": "kmp",
            "location": 1,
            "return": [
                "bool"
            ],
            "arguments": {
                "pattern": [
                    "str",
                    "int"
                ],
                "text": [
                    "str",
                    "int"
                ]
            }
        },
        "get_failure_array": {
            "name": "get_failure_array",
            "location": 36,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "pattern": [
                    "int",
                    "str",
                    "list",
                    "bool"
                ]
            }
        }
    },
    "PythonCode-master/strings/levenshtein_distance.py": {
        "levenshtein_distance": {
            "name": "levenshtein_distance",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "first_word": [
                    "int",
                    "List['cirq.Qid']",
                    "bool"
                ],
                "second_word": [
                    "int",
                    "bool"
                ]
            }
        }
    },
    "PythonCode-master/strings/manacher.py": {
        "palindromic_length": {
            "name": "palindromic_length",
            "location": 2,
            "return": [],
            "arguments": {
                "center": [],
                "diff": [],
                "string": []
            }
        },
        "palindromic_string": {
            "name": "palindromic_string",
            "location": 7,
            "return": [],
            "arguments": {
                "input_string": []
            }
        }
    },
    "PythonCode-master/strings/min_cost_string_conversion.py": {
        "compute_transform_tables": {
            "name": "compute_transform_tables",
            "location": 16,
            "return": [
                "str",
                "Sequence"
            ],
            "arguments": {
                "X": [
                    "int",
                    "Dict[str, Any]",
                    "Union[int, List[int]]",
                    "Union[int, float]"
                ],
                "Y": [
                    "int",
                    "Tuple[int]",
                    "Union[int, List[int]]",
                    "Union[int, float]"
                ],
                "cC": [
                    "int",
                    "FrozenSet[Any]",
                    "float",
                    "List[List[int]]",
                    "Iterable[int]",
                    "List[str]"
                ],
                "cR": [
                    "int",
                    "FrozenSet[Any]",
                    "float",
                    "List[List[int]]",
                    "Iterable[int]",
                    "List[str]"
                ],
                "cD": [
                    "bool",
                    "str",
                    "int"
                ],
                "cI": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "assemble_transformation": {
            "name": "assemble_transformation",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ops": [
                    "int",
                    "Tuple[int, int, int]",
                    "Dict[str, Any]",
                    "bool",
                    "str"
                ],
                "i": [
                    "Dict[str, Any]",
                    "bool"
                ],
                "j": [
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        }
    },
    "PythonCode-master/strings/naive_string_search.py": {
        "naivePatternSearch": {
            "name": "naivePatternSearch",
            "location": 10,
            "return": [
                "int",
                "list"
            ],
            "arguments": {
                "mainString": [
                    "str",
                    "List[str]"
                ],
                "pattern": [
                    "str",
                    "List[str]",
                    "Sequence[str]"
                ]
            }
        }
    },
    "PythonCode-master/strings/rabin_karp.py": {
        "rabin_karp": {
            "name": "rabin_karp",
            "location": 7,
            "return": [],
            "arguments": {
                "pattern": [],
                "text": []
            }
        },
        "test_rabin_karp": {
            "name": "test_rabin_karp",
            "location": 51,
            "return": [],
            "arguments": {}
        }
    },
    "PythonCode-master/traversals/binary_tree_traversals.py": {
        "build_tree": {
            "name": "build_tree",
            "location": 21,
            "return": [
                "bool",
                "str",
                "list",
                "dict",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "pre_order": {
            "name": "pre_order",
            "location": 51,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "node": []
            }
        },
        "in_order": {
            "name": "in_order",
            "location": 59,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "node": []
            }
        },
        "post_order": {
            "name": "post_order",
            "location": 67,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "node": [
                    "str",
                    "int"
                ]
            }
        },
        "level_order": {
            "name": "level_order",
            "location": 75,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "node": []
            }
        },
        "level_order_actual": {
            "name": "level_order_actual",
            "location": 89,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "node": [
                    "str"
                ]
            }
        },
        "pre_order_iter": {
            "name": "pre_order_iter",
            "location": 109,
            "return": [
                "str"
            ],
            "arguments": {
                "node": [
                    "str"
                ]
            }
        },
        "in_order_iter": {
            "name": "in_order_iter",
            "location": 125,
            "return": [],
            "arguments": {
                "node": [
                    "str",
                    "int"
                ]
            }
        },
        "post_order_iter": {
            "name": "post_order_iter",
            "location": 139,
            "return": [
                "T",
                "float"
            ],
            "arguments": {
                "node": [
                    "str",
                    "int"
                ]
            }
        },
        "TreeNode.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "bytes",
                    "Dict[str, str]",
                    "list",
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        }
    }
}
{
    "Resume-Rater-master/main.py": {},
    "Resume-Rater-master/pre_requisites.py": {},
    "Resume-Rater-master/src/custom_filter.py": {
        "customFilter": {
            "name": "customFilter",
            "location": 1,
            "return": [
                "Dict[str, Any]",
                "Mapping",
                "Mapping[str, Any]",
                "bytes",
                "dict"
            ],
            "arguments": {
                "token": [
                    "List[str]",
                    "int",
                    "List[Tuple[int, int]]"
                ]
            }
        }
    },
    "Resume-Rater-master/src/info_extractor.py": {
        "InfoExtractor.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "spacy_nlp_model": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "parser": [
                    "str",
                    "Optional[Callable[[Dict], Any]]",
                    "bool"
                ]
            }
        },
        "InfoExtractor.extractFromFile": {
            "name": "extractFromFile",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "InfoExtractor.extractFromText": {
            "name": "extractFromText",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "doc": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[str]"
                ],
                "text": [
                    "str"
                ],
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "InfoExtractor.extractSkills": {
            "name": "extractSkills",
            "location": 80,
            "return": [
                "List[str]",
                "Set[str]",
                "int",
                "Optional[dict]",
                "Tuple[int]",
                "List[float]",
                "Dict[int, int]"
            ],
            "arguments": {
                "doc": [
                    "str",
                    "List[List[int]]",
                    "int"
                ]
            }
        },
        "InfoExtractor.extractCategories": {
            "name": "extractCategories",
            "location": 106,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "InfoExtractor.findWorkAndEducation": {
            "name": "findWorkAndEducation",
            "location": 148,
            "return": [
                "str",
                "List[Dict]",
                "List[str]",
                "List[int]",
                "list"
            ],
            "arguments": {
                "categories": [
                    "str",
                    "MutableMapping[str, Any]",
                    "bytes",
                    "Dict[str, str]"
                ],
                "doc": [
                    "str",
                    "float",
                    "List[str]",
                    "Optional[str]",
                    "Iterable[float]",
                    "Any"
                ],
                "text": [
                    "str",
                    "datetime.timezone"
                ],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "InfoExtractor.findNumber": {
            "name": "findNumber",
            "location": 224,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "doc": [
                    "int",
                    "set",
                    "str"
                ]
            }
        },
        "InfoExtractor.findEmail": {
            "name": "findEmail",
            "location": 241,
            "return": [
                "Optional[str]",
                "int",
                "bool",
                "Union[str, None]"
            ],
            "arguments": {
                "doc": [
                    "str"
                ]
            }
        },
        "InfoExtractor.findCity": {
            "name": "findCity",
            "location": 253,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "doc": [
                    "int",
                    "set",
                    "str"
                ]
            }
        },
        "InfoExtractor.findName": {
            "name": "findName",
            "location": 269,
            "return": [
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "doc": [
                    "str",
                    "List[str]",
                    "int",
                    "bool"
                ],
                "filename": [
                    "str",
                    "IO[bytes]"
                ]
            }
        },
        "InfoExtractor.getNumberOfMonths": {
            "name": "getNumberOfMonths",
            "location": 302,
            "return": [
                "str",
                "Set[str]"
            ],
            "arguments": {
                "datepair": [
                    "recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex",
                    "Union[datetime.datetime, str]",
                    "Optional[datetime.datetime]",
                    "Dict[int, dict]"
                ]
            }
        },
        "InfoExtractor.getTotalExperience": {
            "name": "getTotalExperience",
            "location": 380,
            "return": [
                "bool"
            ],
            "arguments": {
                "experience_list": [
                    "list",
                    "List[str]",
                    "List[Dict]",
                    "Iterable[str]",
                    "List[int]",
                    "bool",
                    "List[Dict[str, Any]]",
                    "List[List[str]]"
                ]
            }
        },
        "InfoExtractor.getTotalExperienceFormatted": {
            "name": "getTotalExperienceFormatted",
            "location": 425,
            "return": [
                "str"
            ],
            "arguments": {
                "exp_list": [
                    "int",
                    "Callable"
                ]
            }
        }
    },
    "Resume-Rater-master/src/model.py": {
        "RatingModel.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "_type": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Any]",
                    "str",
                    "Dict[str, Any]",
                    "Optional[List[str]]"
                ],
                "pre_trained_model_json": [
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]",
                    "Optional[Sequence[Any]]"
                ],
                "spacy_nlp": [
                    "Optional[Any]",
                    "Optional[str]",
                    "Callable",
                    "bool",
                    "Sequence[str]",
                    "str"
                ]
            }
        },
        "RatingModel.loadModelFixed": {
            "name": "loadModelFixed",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_json": [
                    "str",
                    "bool"
                ]
            }
        },
        "RatingModel.loadModelLDA": {
            "name": "loadModelLDA",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "model_json": [
                    "str",
                    "bool"
                ]
            }
        },
        "RatingModel.train": {
            "name": "train",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_dir_path": [
                    "str"
                ],
                "train_type": [
                    "str"
                ],
                "model_name": [
                    "str",
                    "dict"
                ],
                "keywords": [
                    "Optional[str]",
                    "Optional[List[str]]",
                    "Optional[List[Any]]",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[str, Any]]"
                ]
            }
        },
        "RatingModel.__keep_top_k_words": {
            "name": "__keep_top_k_words",
            "location": 195,
            "return": [
                "list",
                "str",
                "Optional[dict]",
                "Tuple[int, int]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "float",
                    "int",
                    "Callable"
                ]
            }
        },
        "RatingModel.__trainLDA": {
            "name": "__trainLDA",
            "location": 198,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "pdfs": [
                    "List[str]",
                    "str",
                    "bool",
                    "pandas.DataFrame",
                    "List[Union[int, Any]]",
                    "Optional[str]"
                ],
                "model_name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "RatingModel.__trainLDAModel": {
            "name": "__trainLDAModel",
            "location": 333,
            "return": [
                "pandas.DataFrame",
                "Callable",
                "subprocess.Popen",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "int",
                    "pandas.DataFrame",
                    "str"
                ],
                "num_topics": [
                    "List[int]",
                    "int",
                    "str",
                    "tuple",
                    "bytes"
                ]
            }
        },
        "RatingModel.__trainFixed": {
            "name": "__trainFixed",
            "location": 369,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pdfs": [
                    "List[str]",
                    "str",
                    "bool",
                    "pandas.DataFrame",
                    "List[Union[int, Any]]",
                    "Optional[str]"
                ],
                "model_name": [
                    "str"
                ],
                "keywords": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "RatingModel.__trainKMWM": {
            "name": "__trainKMWM",
            "location": 455,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "seen_chunks_words": [
                    "List[str]",
                    "float",
                    "str",
                    "List[Mapping[str, Any]]"
                ],
                "all_tokens_chunks": [
                    "list",
                    "Callable[[], int]",
                    "str",
                    "Sequence[str]",
                    "bool"
                ],
                "keywords": [
                    "bool",
                    "str",
                    "List[dict]",
                    "Iterable[str]"
                ]
            }
        },
        "RatingModel.test": {
            "name": "test",
            "location": 560,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Iterable[str]",
                    "Optional[str]"
                ],
                "info_extractor": [
                    "Optional[str]",
                    "Optional[Type[Exception]]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "Resume-Rater-master/src/utils.py": {
        "loadDefaultNLP": {
            "name": "loadDefaultNLP",
            "location": 11,
            "return": [
                "str",
                "int",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "is_big": [
                    "bool",
                    "str"
                ]
            }
        },
        "countWords": {
            "name": "countWords",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "line": [
                    "List[AnyStr]",
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "Iterable[Sequence[str]]"
                ]
            }
        },
        "getAllTokensAndChunks": {
            "name": "getAllTokensAndChunks",
            "location": 48,
            "return": [
                "int",
                "dict"
            ],
            "arguments": {
                "doc": [
                    "bool",
                    "Dict[str, Any]",
                    "pandas.Series"
                ]
            }
        },
        "findDocumentsRecursive": {
            "name": "findDocumentsRecursive",
            "location": 80,
            "return": [
                "Optional[str]",
                "Optional[float]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "base_dir": [
                    "str"
                ]
            }
        },
        "generateDFFromData": {
            "name": "generateDFFromData",
            "location": 103,
            "return": [
                "Dict[str, List[int]]",
                "str",
                "float",
                "Optional[Dict[str, Any]]",
                "bytes",
                "dict"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "str",
                    "pandas._FrameOrSeries",
                    "int",
                    "pandas.DataFrame",
                    "Dict[str, str]"
                ],
                "filename": [
                    "str",
                    "Iterable[bytes]",
                    "Iterable[str]"
                ],
                "save_csv": [
                    "bool",
                    "bytes",
                    "int"
                ]
            }
        },
        "getDocxText": {
            "name": "getDocxText",
            "location": 123,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "getPDFText": {
            "name": "getPDFText",
            "location": 137,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "parser": [
                    "str"
                ]
            }
        },
        "loadDocumentIntoSpacy": {
            "name": "loadDocumentIntoSpacy",
            "location": 152,
            "return": [
                "Optional[List[str]]",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "f": [
                    "str"
                ],
                "parser": [
                    "dict"
                ],
                "spacy_nlp": [
                    "Optional[bool]",
                    "dict",
                    "str",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "loadDefaultNLP.segment_on_newline": {
            "name": "segment_on_newline",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "doc": [
                    "bytes",
                    "Optional[int]"
                ]
            }
        }
    }
}
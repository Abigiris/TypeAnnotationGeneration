{
    "Robot2019-Vision-master/setup.py": {},
    "Robot2019-Vision-master/frc2019_vision/args.py": {
        "parse_args": {
            "name": "parse_args",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        },
        "target": {
            "name": "target",
            "location": 11,
            "return": [
                "str",
                "Optional[str]",
                "Optional[List[Any]]",
                "list",
                "Optional[BaseException]"
            ],
            "arguments": {
                "arg": [
                    "List[str]",
                    "list",
                    "int",
                    "str",
                    "Iterable[float]"
                ]
            }
        }
    },
    "Robot2019-Vision-master/frc2019_vision/core.py": {},
    "Robot2019-Vision-master/frc2019_vision/environment.py": {},
    "Robot2019-Vision-master/frc2019_vision/networking.py": {
        "RioConnectionHandler.handle": {
            "name": "handle",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RioConnectionFactoryThread.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RioConnectionFactoryThread.run": {
            "name": "run",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RioConnectionFactoryThread.stop": {
            "name": "stop",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DriverstationConnectionHandler.handle": {
            "name": "handle",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DriverstationConnectionFactoryThread.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DriverstationConnectionFactoryThread.run": {
            "name": "run",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DriverstationConnectionFactoryThread.stop": {
            "name": "stop",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Robot2019-Vision-master/frc2019_vision/threads.py": {
        "create": {
            "name": "create",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "start": {
            "name": "start",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "stop": {
            "name": "stop",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "Robot2019-Vision-master/frc2019_vision/__init__.py": {
        "OverwritingLifoQueue._get": {
            "name": "_get",
            "location": 31,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "OverwritingLifoQueue.put": {
            "name": "put",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "FrameQueue._get": {
            "name": "_get",
            "location": 44,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FrameQueue.put": {
            "name": "put",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "StoppableThread.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StoppableThread.stop": {
            "name": "stop",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StoppableThread.stopped": {
            "name": "stopped",
            "location": 67,
            "return": [
                "str",
                "Optional[int]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Robot2019-Vision-master/frc2019_vision/__main__.py": {
        "main": {
            "name": "main",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "Robot2019-Vision-master/frc2019_vision/__version__.py": {},
    "Robot2019-Vision-master/frc2019_vision/events/base_events.py": {
        "BaseEvent.event_id": {
            "name": "event_id",
            "location": 7,
            "return": [
                "builtins.str"
            ],
            "arguments": {}
        },
        "BaseGetEvent.event_id": {
            "name": "event_id",
            "location": 13,
            "return": [
                "str",
                "Callable",
                "List[int]"
            ],
            "arguments": {}
        },
        "BaseGetEvent.run": {
            "name": "run",
            "location": 18,
            "return": [
                "builtins.str"
            ],
            "arguments": {}
        },
        "BaseSetEvent.event_id": {
            "name": "event_id",
            "location": 24,
            "return": [
                "List[str]",
                "str",
                "set",
                "Dict[str, Set[str]]",
                "Callable[..., None]",
                "bool",
                "Set[str]"
            ],
            "arguments": {}
        },
        "BaseSetEvent.run": {
            "name": "run",
            "location": 29,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "arg": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "Robot2019-Vision-master/frc2019_vision/events/get_events.py": {
        "GetPing.event_id": {
            "name": "event_id",
            "location": 8,
            "return": [
                "Iterable[Any]",
                "Optional[Type]",
                "int"
            ],
            "arguments": {}
        },
        "GetPing.run": {
            "name": "run",
            "location": 12,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {}
        },
        "GetPosition.event_id": {
            "name": "event_id",
            "location": 18,
            "return": [
                "Iterable[Any]",
                "Optional[Type]",
                "int"
            ],
            "arguments": {}
        },
        "GetPosition.run": {
            "name": "run",
            "location": 22,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "Robot2019-Vision-master/frc2019_vision/events/handler.py": {
        "index": {
            "name": "index",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "parse": {
            "name": "parse",
            "location": 20,
            "return": [
                "Iterable[str]",
                "IO[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "data": [
                    "int",
                    "str",
                    "float"
                ]
            }
        }
    },
    "Robot2019-Vision-master/frc2019_vision/events/set_events.py": {
        "SetTarget.event_id": {
            "name": "event_id",
            "location": 10,
            "return": [
                "Iterable[Any]",
                "Optional[Type]",
                "int"
            ],
            "arguments": {}
        },
        "SetTarget.run": {
            "name": "run",
            "location": 14,
            "return": [
                "tuple",
                "str",
                "list",
                "int",
                "Awaitable[T_co]"
            ],
            "arguments": {
                "arg": [
                    "Callable",
                    "tuple",
                    "str",
                    "List[str]",
                    "Union"
                ]
            }
        },
        "SetCameraPort.event_id": {
            "name": "event_id",
            "location": 25,
            "return": [
                "Iterable[Any]",
                "Optional[Type]",
                "int"
            ],
            "arguments": {}
        },
        "SetCameraPort.run": {
            "name": "run",
            "location": 29,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "arg": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "Robot2019-Vision-master/frc2019_vision/events/__init__.py": {
        "assemble_message": {
            "name": "assemble_message",
            "location": 1,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "message": [
                    "str",
                    "int"
                ],
                "error": [
                    "bool"
                ]
            }
        }
    },
    "Robot2019-Vision-master/frc2019_vision/vendor/__init__.py": {},
    "Robot2019-Vision-master/frc2019_vision/vision/constants.py": {
        "_rot_mat": {
            "name": "_rot_mat",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "rad": [
                    "float",
                    "numpy.ndarray",
                    "Union[numpy.ndarray, numpy.void]",
                    "int",
                    "str"
                ]
            }
        },
        "linear_interpolate": {
            "name": "linear_interpolate",
            "location": 12,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[bool]",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {
                "point_a": [
                    "Optional[float]",
                    "bool",
                    "Union[str, Iterable[str]]",
                    "str"
                ],
                "point_b": [
                    "Optional[float]",
                    "bool",
                    "Union[str, Iterable[str]]",
                    "str"
                ],
                "num_points": [
                    "int",
                    "str",
                    "List[int]",
                    "float"
                ]
            }
        },
        "tape_corners_to_obj_points": {
            "name": "tape_corners_to_obj_points",
            "location": 117,
            "return": [
                "float",
                "int",
                "Union[bool, None]",
                "str"
            ],
            "arguments": {
                "top_left": [
                    "bool",
                    "int",
                    "numpy.ndarray",
                    "List[Dict[str, str]]"
                ],
                "top_right": [
                    "bool",
                    "int",
                    "numpy.ndarray",
                    "List[Dict[str, str]]"
                ],
                "bottom_left": [
                    "bool",
                    "int",
                    "numpy.ndarray",
                    "List[Dict[str, str]]"
                ],
                "bottom_right": [
                    "bool",
                    "int",
                    "numpy.ndarray",
                    "List[Dict[str, str]]"
                ],
                "k": [
                    "bool",
                    "List[str]",
                    "str",
                    "Dict[str, Any]",
                    "float"
                ]
            }
        },
        "line_intersect": {
            "name": "line_intersect",
            "location": 127,
            "return": [
                "List[int]",
                "numpy.dtype",
                "int",
                "list",
                "T"
            ],
            "arguments": {}
        },
        "linear_interpolate.line_func": {
            "name": "line_func",
            "location": 15,
            "return": [
                "Type[T]",
                "str",
                "bool",
                "float",
                "int"
            ],
            "arguments": {
                "t": [
                    "Tuple[int, int]",
                    "float",
                    "numpy.ndarray",
                    "str",
                    "int"
                ]
            }
        }
    },
    "Robot2019-Vision-master/frc2019_vision/vision/gui.py": {
        "imshow": {
            "name": "imshow",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict"
                ],
                "frame": [
                    "str",
                    "dict"
                ]
            }
        },
        "draw_crosshairs": {
            "name": "draw_crosshairs",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "frame": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "Robot2019-Vision-master/frc2019_vision/vision/pipeline.py": {
        "avg": {
            "name": "avg",
            "location": 39,
            "return": [
                "int",
                "T",
                "List[str]",
                "Optional[Dict]"
            ],
            "arguments": {
                "iter": [
                    "str",
                    "list",
                    "int"
                ]
            }
        },
        "save_calibration_results": {
            "name": "save_calibration_results",
            "location": 444,
            "return": [
                ""
            ],
            "arguments": {
                "camera_matrix": [
                    "bool",
                    "dict",
                    "int",
                    "Callable"
                ],
                "dist_coeffs": [
                    "bool",
                    "dict",
                    "int",
                    "Callable"
                ],
                "rvecs": [
                    "bool",
                    "dict",
                    "int",
                    "Callable"
                ],
                "tvecs": [
                    "bool",
                    "dict",
                    "int",
                    "Callable"
                ],
                "fisheye": [
                    "bool",
                    "dict",
                    "int",
                    "Callable"
                ],
                "fname": [
                    "str"
                ]
            }
        },
        "load_calibration_results": {
            "name": "load_calibration_results",
            "location": 457,
            "return": [
                "bool",
                "Callable[[Any], bool]"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "BallPipeline.contour": {
            "name": "contour",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "Optional[bool]",
                    "Optional[int]",
                    "Dict[str, Dict[str, int]]",
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "BallPipeline.detect_ball": {
            "name": "detect_ball",
            "location": 72,
            "return": [
                "str",
                "bool",
                "float",
                "Optional[str]",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "str",
                    "int"
                ],
                "cnts": [
                    "Mapping",
                    "List[Dict[str, Any]]",
                    "List[numpy.ndarray]"
                ]
            }
        },
        "BallPipeline.ball_val": {
            "name": "ball_val",
            "location": 112,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "frame": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "TapePipeline.__init__": {
            "name": "__init__",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "calib_fname": [
                    "Optional[bool]",
                    "Optional[Iterable[str]]",
                    "Optional[List[str]]"
                ]
            }
        },
        "TapePipeline.process_image": {
            "name": "process_image",
            "location": 127,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "numpy.ndarray",
                    "int"
                ]
            }
        },
        "TapePipeline.generate_bitmask_camera": {
            "name": "generate_bitmask_camera",
            "location": 151,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "image": [
                    "numpy.ndarray",
                    "int",
                    "numpy.array"
                ]
            }
        },
        "TapePipeline.get_contours": {
            "name": "get_contours",
            "location": 158,
            "return": [
                "str",
                "Iterable[str]",
                "Sequence[str]",
                "bool",
                "Deque[str]",
                "Counter[str]"
            ],
            "arguments": {
                "self": [],
                "bitmask": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "TapePipeline.get_corners": {
            "name": "get_corners",
            "location": 297,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "contours": [
                    "List[numpy.array]"
                ],
                "bitmask": [
                    "numpy.array"
                ]
            }
        },
        "TapePipeline.estimate_pose": {
            "name": "estimate_pose",
            "location": 384,
            "return": [
                "str",
                "int",
                "bytes",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "corners_subpixel": [
                    "List[numpy.array]",
                    "Iterable[int]",
                    "List[Tuple[Any, Any]]",
                    "List[tuple]",
                    "List[Tuple[int, Any]]",
                    "float",
                    "Tuple[FrozenSet[int]]"
                ]
            }
        },
        "TapePipeline.rodrigues_to_euler_angles": {
            "name": "rodrigues_to_euler_angles",
            "location": 424,
            "return": [
                "int",
                "List[int]",
                "float"
            ],
            "arguments": {
                "self": [],
                "rvec": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "TapePipeline.get_contours.not_touching_edge": {
            "name": "not_touching_edge",
            "location": 171,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cnt": [
                    "float",
                    "str"
                ]
            }
        },
        "TapePipeline.get_contours.get_centroid_x": {
            "name": "get_centroid_x",
            "location": 211,
            "return": [
                "Dict[str, int]",
                "Optional[int]",
                "int",
                "float",
                "List[int]"
            ],
            "arguments": {
                "cnt": [
                    "List[str]",
                    "str",
                    "int",
                    "Callable"
                ]
            }
        },
        "TapePipeline.get_contours.is_tape_on_left_side": {
            "name": "is_tape_on_left_side",
            "location": 217,
            "return": [
                "str",
                "numpy.ndarray",
                "int"
            ],
            "arguments": {
                "cnt": [
                    "int",
                    "str",
                    "Sequence[int]",
                    "Union[float, int]",
                    "List[int]"
                ]
            }
        },
        "TapePipeline.get_corners.get_corners_intpixel_alternate": {
            "name": "get_corners_intpixel_alternate",
            "location": 303,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cnt": [
                    "str",
                    "bytearray",
                    "int"
                ]
            }
        },
        "TapePipeline.get_corners.get_corners_intpixel": {
            "name": "get_corners_intpixel",
            "location": 351,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cnt": [
                    "str",
                    "bool"
                ]
            }
        },
        "TapePipeline.get_corners.get_corners_intpixel_alternate.removearray": {
            "name": "removearray",
            "location": 304,
            "return": [
                ""
            ],
            "arguments": {
                "L": [
                    "numpy.ndarray",
                    "int",
                    "List[int]",
                    "List[Tuple[str, str]]",
                    "Sequence[T]",
                    "numpy.ma.MaskedArray"
                ],
                "arr": [
                    "numpy.ndarray",
                    "Union[pandas.DataFrame, numpy.ndarray]"
                ]
            }
        }
    },
    "Robot2019-Vision-master/frc2019_vision/vision/vision.py": {
        "update_enviornment": {
            "name": "update_enviornment",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "distance": [
                    "str",
                    "int",
                    "bool",
                    "Hashable"
                ],
                "angle": [
                    "str",
                    "int",
                    "bool",
                    "List[str]",
                    "bytes",
                    "Optional[str]"
                ],
                "offset": [
                    "str",
                    "int",
                    "bool",
                    "List[str]",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "create_windows": {
            "name": "create_windows",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "VisionThread.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VisionThread.run": {
            "name": "run",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VisionThread.stop": {
            "name": "stop",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "Robot2019-Vision-master/frc2019_vision/vision/__init__.py": {},
    "Robot2019-Vision-master/scripts/calibrate.py": {},
    "Robot2019-Vision-master/scripts/color_range_finder.py": {
        "on_trackbar": {
            "name": "on_trackbar",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ],
                "val": [
                    "str",
                    "int"
                ],
                "low": [
                    "str",
                    "int"
                ],
                "high": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "Robot2019-Vision-master/tasks/__init__.py": {},
    "Robot2019-Vision-master/tasks/vendoring/__init__.py": {
        "mkdir_p": {
            "name": "mkdir_p",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "newdir": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "drop_dir": {
            "name": "drop_dir",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "str",
                    "Union[str, pathlib.Path]",
                    "pathlib.PurePath"
                ]
            }
        },
        "remove_all": {
            "name": "remove_all",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "paths": [
                    "str",
                    "pathlib.Path",
                    "Iterable[pathlib.Path]",
                    "int",
                    "List[Tuple[pathlib.PurePosixPath, parso.python.tree.Scope]]"
                ]
            }
        },
        "log": {
            "name": "log",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "msg": [
                    "str"
                ]
            }
        },
        "_get_git_root": {
            "name": "_get_git_root",
            "location": 74,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "ctx": [
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "_get_vendor_dir": {
            "name": "_get_vendor_dir",
            "location": 78,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "_get_patched_dir": {
            "name": "_get_patched_dir",
            "location": 82,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "BinaryIO"
                ]
            }
        },
        "clean_vendor": {
            "name": "clean_vendor",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "str",
                    "Optional[Sequence[str]]"
                ],
                "vendor_dir": [
                    "str",
                    "Callable[..., bool]",
                    "TextIO"
                ]
            }
        },
        "detect_vendored_libs": {
            "name": "detect_vendored_libs",
            "location": 99,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "vendor_dir": [
                    "str",
                    "pathlib.Path",
                    "FrozenSet[str]"
                ]
            }
        },
        "apply_patch": {
            "name": "apply_patch",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "List[int]",
                    "bool",
                    "Callable[..., bool]"
                ],
                "patch_file_path": [
                    "str",
                    "List[int]",
                    "BinaryIO",
                    "pathlib2.Path",
                    "TextIO"
                ]
            }
        },
        "write_backport_imports": {
            "name": "write_backport_imports",
            "location": 118,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "str",
                    "Optional[Sequence[str]]"
                ],
                "vendor_dir": [
                    "str",
                    "pathlib2.Path"
                ]
            }
        },
        "_ensure_package_in_requirements": {
            "name": "_ensure_package_in_requirements",
            "location": 133,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "str",
                    "List[pathlib.Path]",
                    "Optional[Sequence[str]]"
                ],
                "requirements_file": [
                    "str",
                    "BinaryIO",
                    "pathlib2.Path"
                ],
                "package": [
                    "bytes",
                    "int",
                    "str"
                ]
            }
        },
        "install": {
            "name": "install",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "vendor_dir": [
                    "str",
                    "TextIO",
                    "bool",
                    "Callable[..., bool]"
                ],
                "package": [
                    "str",
                    "bool",
                    "List[Tuple[pathlib.Path, pathlib.Path]]",
                    "bytes"
                ]
            }
        },
        "post_install_cleanup": {
            "name": "post_install_cleanup",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "bool",
                    "Tuple[str]",
                    "str",
                    "Optional[Sequence[str]]"
                ],
                "vendor_dir": [
                    "str",
                    "bool",
                    "Callable[..., bool]",
                    "int"
                ]
            }
        },
        "vendor": {
            "name": "vendor",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "str"
                ],
                "vendor_dir": [
                    "str",
                    "bool",
                    "List[str]",
                    "List[int]"
                ],
                "package": [
                    "str"
                ]
            }
        },
        "packages_missing_licenses": {
            "name": "packages_missing_licenses",
            "location": 217,
            "return": [
                "str"
            ],
            "arguments": {
                "ctx": [
                    "str"
                ],
                "vendor_dir": [
                    "float",
                    "pathlib.Path",
                    "str"
                ],
                "requirements_file": [
                    "str"
                ],
                "package": [
                    "bool",
                    "str",
                    "int",
                    "Tuple[str]"
                ]
            }
        },
        "download_licenses": {
            "name": "download_licenses",
            "location": 254,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "List[int]"
                ],
                "vendor_dir": [
                    "str",
                    "List[int]"
                ],
                "requirements_file": [
                    "str",
                    "int",
                    "BinaryIO"
                ],
                "package": [
                    "int",
                    "str",
                    "bytes"
                ],
                "only": [
                    "bool",
                    "str",
                    "int",
                    "List[str]",
                    "Tuple[str]"
                ],
                "patched": [
                    "bool",
                    "str",
                    "int",
                    "List[str]",
                    "Tuple[str]"
                ]
            }
        },
        "extract_license": {
            "name": "extract_license",
            "location": 293,
            "return": [
                ""
            ],
            "arguments": {
                "vendor_dir": [
                    "pathlib.Path",
                    "str",
                    "cerulean.Path"
                ],
                "sdist": [
                    "str",
                    "pathman.path.Path",
                    "pathlib.Path"
                ]
            }
        },
        "find_and_extract_license": {
            "name": "find_and_extract_license",
            "location": 309,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "vendor_dir": [
                    "bool",
                    "str",
                    "pathlib.Path"
                ],
                "tar": [
                    "bool",
                    "str",
                    "pathlib.Path"
                ],
                "members": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "license_fallback": {
            "name": "license_fallback",
            "location": 326,
            "return": [
                ""
            ],
            "arguments": {
                "vendor_dir": [
                    "str",
                    "Optional[str]"
                ],
                "sdist_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "libname_from_dir": {
            "name": "libname_from_dir",
            "location": 341,
            "return": [
                "str",
                "IO",
                "list",
                "bool"
            ],
            "arguments": {
                "dirname": [
                    "str"
                ]
            }
        },
        "license_destination": {
            "name": "license_destination",
            "location": 351,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "vendor_dir": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ],
                "libname": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ],
                "filename": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "extract_license_member": {
            "name": "extract_license_member",
            "location": 363,
            "return": [
                ""
            ],
            "arguments": {
                "vendor_dir": [
                    "bool",
                    "str",
                    "pathlib.Path"
                ],
                "tar": [
                    "str",
                    "int"
                ],
                "member": [
                    "str",
                    "int"
                ],
                "name": [
                    "pathlib.Path",
                    "str",
                    "int",
                    "Dict[str, pathlib.Path]"
                ]
            }
        },
        "generate_patch": {
            "name": "generate_patch",
            "location": 377,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "Optional[int]"
                ],
                "package_path": [
                    "str",
                    "Optional[str]",
                    "Tuple[int]"
                ],
                "patch_description": [
                    "str",
                    "int"
                ],
                "base": [
                    "str",
                    "bool",
                    "List[int]",
                    "Callable[..., bool]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 396,
            "return": [
                "bytes"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "List[int]"
                ],
                "package": [
                    "str"
                ]
            }
        }
    },
    "Robot2019-Vision-master/tests/TCP_Client.py": {},
    "Robot2019-Vision-master/tests/UDP_Client.py": {}
}
{
    "Shinra-master/scripts/evaluate_bilstmcrf.py": {},
    "Shinra-master/scripts/filter_sentence.py": {
        "filter_rule": {
            "name": "filter_rule",
            "location": 16,
            "return": [],
            "arguments": {
                "morphs": []
            }
        }
    },
    "Shinra-master/scripts/load_config.py": {
        "config_setup_print": {
            "name": "config_setup_print",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "b": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "Shinra-master/scripts/make_annotated_corpus.py": {
        "json_reformatting": {
            "name": "json_reformatting",
            "location": 23,
            "return": [],
            "arguments": {
                "json_dir": [],
                "json_class": []
            }
        },
        "slide_annotate_idx": {
            "name": "slide_annotate_idx",
            "location": 64,
            "return": [],
            "arguments": {
                "plus_lens": [],
                "i": []
            }
        },
        "annotation_to_line": {
            "name": "annotation_to_line",
            "location": 80,
            "return": [],
            "arguments": {
                "line": [],
                "start_idx": [],
                "end_idx": [],
                "labels": []
            }
        },
        "annotation_to_lines": {
            "name": "annotation_to_lines",
            "location": 107,
            "return": [],
            "arguments": {
                "answers": [],
                "html_contents": []
            }
        },
        "separate_sentences_and_others": {
            "name": "separate_sentences_and_others",
            "location": 140,
            "return": [],
            "arguments": {
                "html_content": [],
                "separate_others": []
            }
        },
        "pickup_content_from_html": {
            "name": "pickup_content_from_html",
            "location": 232,
            "return": [],
            "arguments": {
                "html_tag": [],
                "soup": [],
                "cls": []
            }
        },
        "saving_annotated_corpus": {
            "name": "saving_annotated_corpus",
            "location": 247,
            "return": [],
            "arguments": {
                "annotated_contents": [],
                "out_dir": [],
                "cls_name": []
            }
        },
        "main": {
            "name": "main",
            "location": 296,
            "return": [],
            "arguments": {
                "html_dir": [],
                "annotation_dir": [],
                "class_name": [],
                "out": []
            }
        }
    },
    "Shinra-master/scripts/make_dataset_from_corpus.py": {
        "return_ne_label": {
            "name": "return_ne_label",
            "location": 28,
            "return": [],
            "arguments": {
                "now_index": [],
                "places": [],
                "word_len": [],
                "bioul": []
            }
        },
        "request_morph_analysis_api": {
            "name": "request_morph_analysis_api",
            "location": 63,
            "return": [],
            "arguments": {
                "sentence": [],
                "algo": [],
                "mode": []
            }
        },
        "get_annotated_label_info": {
            "name": "get_annotated_label_info",
            "location": 86,
            "return": [],
            "arguments": {
                "sentence": []
            }
        },
        "get_mark_indexes_and_label": {
            "name": "get_mark_indexes_and_label",
            "location": 113,
            "return": [],
            "arguments": {
                "string": [],
                "mark": []
            }
        },
        "get_current_labeling_pos": {
            "name": "get_current_labeling_pos",
            "location": 135,
            "return": [],
            "arguments": {
                "stack_places": [],
                "sentence": []
            }
        },
        "annotation": {
            "name": "annotation",
            "location": 169,
            "return": [],
            "arguments": {
                "sentences": [],
                "algo": [],
                "mode": [],
                "bioul": [],
                "char_level": []
            }
        },
        "main": {
            "name": "main",
            "location": 260,
            "return": [],
            "arguments": {
                "corpus_path": [],
                "out_dir": [],
                "ksplit_num": [],
                "bioul": [],
                "char_level": [],
                "morph_analysis": [],
                "sudachim": []
            }
        }
    },
    "Shinra-master/scripts/morph_analysis_api.py": {
        "mecab": {
            "name": "mecab",
            "location": 22,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, dict]",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "mecab_neologd": {
            "name": "mecab_neologd",
            "location": 36,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, dict]",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "jumanpp": {
            "name": "jumanpp",
            "location": 50,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, dict]",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "sudachi": {
            "name": "sudachi",
            "location": 69,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "Dict[str, dict]",
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "Shinra-master/scripts/reformat_dataset.py": {
        "shape": {
            "name": "shape",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "line": [
                    "int",
                    "Optional[str]",
                    "Final"
                ],
                "parser": [
                    "argparse.ArgumentParser",
                    "str",
                    "dict",
                    "list",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "num": [
                    "argparse._ArgumentGroup",
                    "argparse.ArgumentParser",
                    "argparse.Namespace"
                ]
            }
        }
    },
    "Shinra-master/scripts/train_bilstmcrf.py": {
        "train": {
            "name": "train",
            "location": 48,
            "return": [],
            "arguments": {
                "dataset_dir": [],
                "word_vec_path": [],
                "epoch_size": [],
                "batch_size": [],
                "rnn_hidden_size": [],
                "es_patience": [],
                "dropout_rate": [],
                "clip_grad_num": [],
                "learning_rate": [],
                "pos_emb_dim": [],
                "opt_func": [],
                "rnn_type": [],
                "char_emb": [],
                "char_emb_dim": [],
                "char_hidden_dim": [],
                "model_name": [],
                "saved_model": []
            }
        }
    },
    "Shinra-master/scripts/train_crf.py": {
        "train": {
            "name": "train",
            "location": 29,
            "return": [],
            "arguments": {
                "dataset_dir": [],
                "word_length": [],
                "last_char": [],
                "model_name": []
            }
        }
    },
    "Shinra-master/scripts/train_nestedner.py": {
        "train": {
            "name": "train",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "dataset_dir": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "word_vec_path": [
                    "int",
                    "str",
                    "float"
                ],
                "epoch_size": [
                    "int",
                    "str",
                    "float"
                ],
                "batch_size": [
                    "int",
                    "str",
                    "float"
                ],
                "rnn_hidden_size": [
                    "int",
                    "str",
                    "float"
                ],
                "es_patience": [
                    "int",
                    "str",
                    "float"
                ],
                "dropout_rate": [
                    "int",
                    "str",
                    "float"
                ],
                "clip_grad_num": [
                    "int",
                    "str",
                    "float"
                ],
                "learning_rate": [
                    "int",
                    "str",
                    "float"
                ],
                "pos_emb_dim": [
                    "int",
                    "str",
                    "float"
                ],
                "opt_func": [
                    "int",
                    "str",
                    "float"
                ],
                "rnn_type": [
                    "int",
                    "str",
                    "float"
                ],
                "char_emb": [
                    "int",
                    "str",
                    "float"
                ],
                "char_emb_dim": [
                    "int",
                    "str",
                    "float"
                ],
                "char_hidden_dim": [
                    "int",
                    "str",
                    "float"
                ],
                "model_name": [
                    "int",
                    "str",
                    "float"
                ]
            }
        }
    },
    "Shinra-master/shinra/__init__.py": {},
    "Shinra-master/shinra/bilstm_crf/char_encoder.py": {
        "CNNEncoder.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "char_embedding": [
                    "str",
                    "int",
                    "List[int]",
                    "Tuple[float, float]",
                    "Optional[bool]"
                ],
                "embedding_dim": [
                    "int",
                    "str",
                    "Union[int, str]"
                ],
                "hidden_size": [
                    "int",
                    "str",
                    "Union[int, str]"
                ],
                "kernel_size": [
                    "int",
                    "str",
                    "Union[int, str]"
                ],
                "dropout_rate": [
                    "str",
                    "int",
                    "List[int]",
                    "Tuple[float, float]",
                    "Optional[bool]"
                ],
                "pad_idx": [
                    "int",
                    "str",
                    "Union[int, str]"
                ]
            }
        },
        "CNNEncoder.forward": {
            "name": "forward",
            "location": 16,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "torch.Tensor",
                    "int",
                    "float"
                ]
            }
        },
        "BiLSTMEncoder.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "char_embedding": [
                    "str",
                    "int",
                    "List[int]",
                    "Sequence[int]",
                    "Tuple[float, float]"
                ],
                "embedding_dim": [
                    "int",
                    "Tuple[int, int, int]",
                    "str"
                ],
                "hidden_size": [
                    "int",
                    "bool",
                    "Tuple[int, int, int]"
                ],
                "dropout_rate": [
                    "str",
                    "int",
                    "List[int]",
                    "Sequence[int]",
                    "Tuple[float, float]"
                ],
                "pad_idx": [
                    "bool",
                    "int",
                    "Tuple[int, int]",
                    "float",
                    "str"
                ]
            }
        },
        "BiLSTMEncoder.forward": {
            "name": "forward",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "torch.Tensor",
                    "float"
                ]
            }
        }
    },
    "Shinra-master/shinra/bilstm_crf/dataset.py": {
        "NestedNERDataset.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "text_file_dir": [
                    "str",
                    "bool",
                    "Optional[float]"
                ],
                "train_txt": [
                    "str",
                    "bool",
                    "Sequence[str]"
                ],
                "dev_txt": [
                    "str",
                    "bool"
                ],
                "test_txt": [
                    "str",
                    "bool"
                ],
                "wordemb_path": [
                    "bool",
                    "int",
                    "float",
                    "Callable(license)[[], None]"
                ],
                "word_min_freq": [
                    "bool",
                    "int",
                    "float",
                    "Callable(license)[[], None]"
                ],
                "pos_emb_dim": [
                    "int",
                    "float",
                    "bool"
                ],
                "char_emb_dim": [
                    "str",
                    "int",
                    "numpy.ndarray",
                    "numpy.dtype",
                    "Optional[numpy.dtype]",
                    "Iterable[Any]"
                ],
                "char_hidden_dim": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int",
                    "List[str]"
                ],
                "char_encoder": [
                    "int",
                    "bool",
                    "float",
                    "str",
                    "List[int]"
                ],
                "char_dropout_rate": [
                    "int",
                    "bool",
                    "float",
                    "str",
                    "List[int]"
                ],
                "use_char": [
                    "str",
                    "int",
                    "Optional[str]",
                    "List[str]"
                ],
                "use_pos": [
                    "bool",
                    "List[str]",
                    "Optional[List[str]]",
                    "str"
                ]
            }
        },
        "NestedNERDataset.get_batch": {
            "name": "get_batch",
            "location": 125,
            "return": [
                "bytes",
                "str",
                "Dict[str, Any]",
                "int",
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "str",
                    "int",
                    "float"
                ],
                "dataset_name": [
                    "str",
                    "Set[Union[Any, Any]]",
                    "bool",
                    "int"
                ]
            }
        },
        "NestedNERDataset.get_embedding_dim": {
            "name": "get_embedding_dim",
            "location": 151,
            "return": [
                "int",
                "bytes",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NestedNERDataset._random_embedding": {
            "name": "_random_embedding",
            "location": 165,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "vocab_size": [
                    "int",
                    "bool",
                    "torch.Tensor"
                ],
                "embedding_dim": [
                    "int",
                    "bool",
                    "str",
                    "Union[int, float]"
                ]
            }
        },
        "NestedNERDataset.get_batch_true_label": {
            "name": "get_batch_true_label",
            "location": 189,
            "return": [
                "bool",
                "List[Callable]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "Mapping[str, Any]",
                    "Callable"
                ],
                "nested": [
                    "int",
                    "bytes",
                    "list",
                    "numpy.ndarray",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "str"
                ],
                "device": [
                    "str",
                    "float",
                    "bool",
                    "List[Union[str, Any]]",
                    "dict",
                    "numpy.ndarray"
                ]
            }
        },
        "NestedNERDataset.to_vectors": {
            "name": "to_vectors",
            "location": 213,
            "return": [
                "numpy.ndarray",
                "float",
                "Dict[str, numpy.ndarray]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "str",
                    "numpy.ndarray",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ],
                "char": [
                    "str",
                    "Optional[str]",
                    "list",
                    "set",
                    "numpy.ndarray",
                    "Dict[Any, str]"
                ],
                "pos": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "subpos": [
                    "int",
                    "str",
                    "Optional[str]"
                ],
                "device": [
                    "int",
                    "torch.LongTensor",
                    "str",
                    "List[float]"
                ]
            }
        },
        "NestedNERDataset.wordid_to_sentence": {
            "name": "wordid_to_sentence",
            "location": 239,
            "return": [
                "str",
                "tuple",
                "list",
                "List[str]",
                "Optional[Iterable[str]]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "str",
                    "int",
                    "bool",
                    "Sequence[int]"
                ]
            }
        },
        "NestedNERDataset.labelid_to_labels": {
            "name": "labelid_to_labels",
            "location": 251,
            "return": [
                "str",
                "dict",
                "List[int]",
                "List[\"TaskNode\"]"
            ],
            "arguments": {
                "self": [],
                "ids": [
                    "str",
                    "int",
                    "bool",
                    "Sequence[int]"
                ]
            }
        }
    },
    "Shinra-master/shinra/bilstm_crf/early_stopping.py": {
        "EarlyStopping.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "patience": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "EarlyStopping.decision_stop": {
            "name": "decision_stop",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "metrics": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "Shinra-master/shinra/bilstm_crf/evaluator.py": {
        "Evaluator.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model": [
                    "Dict[str, Any]",
                    "bool"
                ],
                "dataset": [
                    "str",
                    "Optional[List[Any]]",
                    "bool",
                    "int"
                ],
                "model_path": [
                    "str",
                    "Dict[str, Any]",
                    "asyncpg_migrate.model.Config",
                    "dict"
                ],
                "use_gpu": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Evaluator.evaluate": {
            "name": "evaluate",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "bool",
                    "int",
                    "str",
                    "Iterable[str]"
                ]
            }
        }
    },
    "Shinra-master/shinra/bilstm_crf/model.py": {
        "BiLSTMCRF.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "num_labels": [
                    "int",
                    "str"
                ],
                "rnn_hidden_size": [
                    "int",
                    "list"
                ],
                "word_emb_dim": [
                    "List[Tuple[Any, float]]",
                    "List[int]",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "Optional[Sequence[str]]"
                ],
                "char_emb_dim": [
                    "List[Tuple[Any, float]]",
                    "List[int]",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "Optional[Sequence[str]]"
                ],
                "pos_emb_dim": [
                    "List[Tuple[Any, float]]",
                    "List[int]",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "Optional[Sequence[str]]"
                ],
                "dropout_rate": [
                    "bool",
                    "List[int]",
                    "int",
                    "list"
                ]
            }
        },
        "BiLSTMCRF.forward": {
            "name": "forward",
            "location": 47,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "input_embed": [
                    "int",
                    "torch.nn.Module",
                    "List[List[int]]",
                    "Iterable[T]",
                    "float"
                ],
                "mask": [
                    "int",
                    "List[List[int]]",
                    "str",
                    "bool",
                    "Union[int, float]"
                ],
                "labels": [
                    "torch.Tensor",
                    "bool",
                    "Sequence[str]",
                    "Optional[Dict[str, Dict]]",
                    "str",
                    "int"
                ],
                "train": [
                    "bool",
                    "int",
                    "Mapping"
                ]
            }
        },
        "BiLSTMCRF.predict": {
            "name": "predict",
            "location": 78,
            "return": [
                "str",
                "bool",
                "List[Dict]",
                "int"
            ],
            "arguments": {
                "self": [],
                "input_embed": [
                    "Callable[[T], T]",
                    "T",
                    "Callable[[List], None]"
                ],
                "mask": [
                    "Callable[[T], T]",
                    "T",
                    "Callable[[List], None]"
                ]
            }
        },
        "BiLSTMCRF.concat_embedding": {
            "name": "concat_embedding",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "args": []
            }
        },
        "BiLSTMCRF.load": {
            "name": "load",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "Shinra-master/shinra/bilstm_crf/trainer.py": {
        "Trainer.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int",
                    "float",
                    "Union[int, str]"
                ],
                "dataset": [
                    "bool",
                    "Sequence[Sequence[float]]",
                    "str"
                ],
                "lr": [
                    "str",
                    "Optional[float]",
                    "bool"
                ],
                "cg": [
                    "bool",
                    "Sequence[Sequence[float]]",
                    "str"
                ],
                "max_epoch": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "batch_size": [
                    "bool",
                    "Optional[int]",
                    "str",
                    "int",
                    "Tuple[int]"
                ],
                "dropout_rate": [
                    "float",
                    "bool",
                    "str",
                    "int"
                ],
                "optalgo": [
                    "str",
                    "Optional[float]",
                    "bool"
                ],
                "save_path": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "Trainer.train": {
            "name": "train",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Trainer.save": {
            "name": "save",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[str]",
                    "List[Tuple[int, str]]"
                ]
            }
        }
    },
    "Shinra-master/shinra/bilstm_crf/__init__.py": {},
    "Shinra-master/shinra/crf/dataset.py": {
        "Dataset.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "path": [],
                "target_class": [],
                "is_inbracket": [],
                "word_length": [],
                "contain_last_char": [],
                "ws": []
            }
        },
        "Dataset.load": {
            "name": "load",
            "location": 43,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.known_NEs": {
            "name": "known_NEs",
            "location": 57,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset.get_sentences": {
            "name": "get_sentences",
            "location": 68,
            "return": [],
            "arguments": {
                "self": [],
                "mode": []
            }
        },
        "Dataset.get_labels": {
            "name": "get_labels",
            "location": 90,
            "return": [],
            "arguments": {
                "self": [],
                "mode": []
            }
        },
        "Dataset._japlabel_to_englabel": {
            "name": "_japlabel_to_englabel",
            "location": 111,
            "return": [],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "Dataset._englabel_to_japlabel": {
            "name": "_englabel_to_japlabel",
            "location": 127,
            "return": [],
            "arguments": {
                "self": [],
                "label": []
            }
        },
        "Dataset._preprocess_dataset": {
            "name": "_preprocess_dataset",
            "location": 143,
            "return": [],
            "arguments": {
                "self": [],
                "mode": []
            }
        },
        "Dataset._get_features": {
            "name": "_get_features",
            "location": 163,
            "return": [],
            "arguments": {
                "self": [],
                "mode": []
            }
        },
        "Dataset._detect_label_num": {
            "name": "_detect_label_num",
            "location": 184,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Dataset._prepare_conv_label_pair": {
            "name": "_prepare_conv_label_pair",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Shinra-master/shinra/crf/model.py": {
        "Model.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "algo": [
                    "Optional[float]",
                    "str",
                    "float",
                    "int"
                ],
                "min_freq": [
                    "Callable"
                ],
                "all_states": [
                    "Optional[float]",
                    "str",
                    "float",
                    "int"
                ],
                "max_iter": [
                    "int",
                    "Optional[float]"
                ],
                "epsilon": [
                    "Optional[float]",
                    "str",
                    "float",
                    "int"
                ],
                "delta": [
                    "Optional[float]",
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "Model.train": {
            "name": "train",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "features": [
                    "float",
                    "List[str]",
                    "Sequence[str]"
                ],
                "labels": [
                    "float",
                    "List[str]",
                    "Sequence[str]"
                ]
            }
        },
        "Model.predict": {
            "name": "predict",
            "location": 47,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "features": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Model.predict_all": {
            "name": "predict_all",
            "location": 56,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "features": [
                    "int",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "Model.label_types": {
            "name": "label_types",
            "location": 66,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.hyper_param_tune": {
            "name": "hyper_param_tune",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "train_features": [
                    "str",
                    "Sequence[str]",
                    "List[str]",
                    "List[List[str]]",
                    "List[int]"
                ],
                "train_labels": [
                    "str",
                    "Sequence[str]",
                    "List[str]",
                    "List[List[str]]",
                    "List[int]"
                ],
                "dev_features": [
                    "str",
                    "Sequence[str]",
                    "List[str]",
                    "List[List[str]]",
                    "List[int]"
                ],
                "dev_labels": [
                    "int",
                    "bytes",
                    "List[List[str]]",
                    "Optional[Any]"
                ]
            }
        }
    },
    "Shinra-master/shinra/crf/trainer.py": {
        "Trainer.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "dataset": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ],
                "param_tune": [
                    "bool",
                    "int",
                    "Optional[Union[\"IPUtilityFunction\", \"UtilityDistribution\"]]"
                ]
            }
        },
        "Trainer.train": {
            "name": "train",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Trainer.report": {
            "name": "report",
            "location": 41,
            "return": [
                "int",
                "Optional[int]",
                "List[int]",
                "Tuple[Tuple[int, Any]]"
            ],
            "arguments": {
                "self": [],
                "show_flag": [
                    "bool",
                    "Dict[str, Any]",
                    "list",
                    "Optional[int]"
                ]
            }
        }
    },
    "Shinra-master/shinra/crf/transformer.py": {
        "Transformer.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [],
            "arguments": {
                "self": [],
                "ws": [],
                "is_inbracket": [],
                "word_length": [],
                "contain_last_char": [],
                "label_num": []
            }
        },
        "Transformer.sentence2features": {
            "name": "sentence2features",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "morphs": []
            }
        },
        "Transformer._get_near_morphs": {
            "name": "_get_near_morphs",
            "location": 75,
            "return": [],
            "arguments": {
                "self": [],
                "morphs": [],
                "i": []
            }
        },
        "Transformer._get_char_types": {
            "name": "_get_char_types",
            "location": 95,
            "return": [],
            "arguments": {
                "self": [],
                "token": []
            }
        },
        "Transformer._get_pos_info": {
            "name": "_get_pos_info",
            "location": 109,
            "return": [],
            "arguments": {
                "morph": []
            }
        },
        "Transformer._isInBracket": {
            "name": "_isInBracket",
            "location": 119,
            "return": [],
            "arguments": {
                "sentence": [],
                "idx": []
            }
        },
        "Transformer._char_type": {
            "name": "_char_type",
            "location": 145,
            "return": [],
            "arguments": {
                "self": [],
                "char": []
            }
        },
        "Transformer.__hiragana": {
            "name": "__hiragana",
            "location": 172,
            "return": [],
            "arguments": {
                "char": []
            }
        },
        "Transformer.__katakana": {
            "name": "__katakana",
            "location": 182,
            "return": [],
            "arguments": {
                "char": []
            }
        },
        "Transformer.__kanji": {
            "name": "__kanji",
            "location": 192,
            "return": [],
            "arguments": {
                "char": []
            }
        },
        "Transformer.__double_byte_symbol": {
            "name": "__double_byte_symbol",
            "location": 202,
            "return": [],
            "arguments": {
                "char": []
            }
        }
    },
    "Shinra-master/shinra/crf/__init__.py": {},
    "Shinra-master/shinra/layered_bilstm_crf/char_encoder.py": {
        "CNNEncoder.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "char_embedding": [
                    "str",
                    "int",
                    "List[int]",
                    "Tuple[float, float]",
                    "Optional[bool]"
                ],
                "embedding_dim": [
                    "int",
                    "str",
                    "Union[int, str]"
                ],
                "hidden_size": [
                    "int",
                    "str",
                    "Union[int, str]"
                ],
                "kernel_size": [
                    "int",
                    "str",
                    "Union[int, str]"
                ],
                "dropout_rate": [
                    "str",
                    "int",
                    "List[int]",
                    "Tuple[float, float]",
                    "Optional[bool]"
                ],
                "pad_idx": [
                    "int",
                    "str",
                    "Union[int, str]"
                ]
            }
        },
        "CNNEncoder.forward": {
            "name": "forward",
            "location": 16,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "Set[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "torch.Tensor",
                    "int",
                    "float"
                ]
            }
        },
        "BiLSTMEncoder.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "char_embedding": [
                    "str",
                    "int",
                    "List[int]",
                    "Sequence[int]",
                    "Tuple[float, float]"
                ],
                "embedding_dim": [
                    "int",
                    "Tuple[int, int, int]",
                    "str"
                ],
                "hidden_size": [
                    "int",
                    "bool",
                    "Tuple[int, int, int]"
                ],
                "dropout_rate": [
                    "str",
                    "int",
                    "List[int]",
                    "Sequence[int]",
                    "Tuple[float, float]"
                ],
                "pad_idx": [
                    "bool",
                    "int",
                    "Tuple[int, int]",
                    "float",
                    "str"
                ]
            }
        },
        "BiLSTMEncoder.forward": {
            "name": "forward",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int",
                    "torch.Tensor",
                    "float"
                ]
            }
        }
    },
    "Shinra-master/shinra/layered_bilstm_crf/dataset.py": {
        "NestedNERDataset.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "text_file_dir": [
                    "str",
                    "bool",
                    "Optional[float]"
                ],
                "train_txt": [
                    "str",
                    "bool",
                    "Sequence[str]"
                ],
                "dev_txt": [
                    "str",
                    "bool"
                ],
                "test_txt": [
                    "str",
                    "bool"
                ],
                "wordemb_path": [
                    "bool",
                    "int",
                    "float",
                    "Callable(license)[[], None]"
                ],
                "use_gpu": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "int",
                    "List[str]"
                ],
                "word_min_freq": [
                    "bool",
                    "int",
                    "float",
                    "Callable(license)[[], None]"
                ],
                "char_emb_dim": [
                    "numpy.ndarray",
                    "str",
                    "List[int]",
                    "int",
                    "List[str]"
                ],
                "pos_emb_dim": [
                    "numpy.ndarray",
                    "str",
                    "List[int]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "NestedNERDataset.get_batch": {
            "name": "get_batch",
            "location": 103,
            "return": [
                "bytes",
                "str",
                "Dict[str, Any]",
                "int",
                "torch.Tensor"
            ],
            "arguments": {
                "self": [],
                "batch_size": [
                    "str",
                    "int",
                    "float"
                ],
                "dataset_name": [
                    "str",
                    "Set[Union[Any, Any]]",
                    "bool",
                    "int"
                ]
            }
        },
        "NestedNERDataset.get_embedding_dim": {
            "name": "get_embedding_dim",
            "location": 129,
            "return": [
                "int",
                "bytes",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "NestedNERDataset._random_embedding": {
            "name": "_random_embedding",
            "location": 144,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "vocab_size": [
                    "int",
                    "bool",
                    "torch.Tensor"
                ],
                "embedding_dim": [
                    "int",
                    "bool",
                    "str",
                    "Union[int, float]"
                ]
            }
        },
        "NestedNERDataset.get_batch_true_label": {
            "name": "get_batch_true_label",
            "location": 168,
            "return": [
                "bool",
                "List[Callable]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "str",
                    "Mapping[str, Any]",
                    "Callable"
                ],
                "nested": [
                    "int",
                    "bytes",
                    "list",
                    "numpy.ndarray",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "str"
                ]
            }
        }
    },
    "Shinra-master/shinra/layered_bilstm_crf/model.py": {
        "NestedNERModel.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [],
            "arguments": {
                "self": [],
                "num_labels": [],
                "dropout_rate": [],
                "word_emb_dim": [],
                "char_emb_dim": [],
                "pos_emb_dim": [],
                "pad_idx": [],
                "other_idx": []
            }
        },
        "NestedNERModel.forward": {
            "name": "forward",
            "location": 55,
            "return": [],
            "arguments": {
                "self": [],
                "input_embed": [],
                "mask": [],
                "labels": [],
                "label_lens": []
            }
        },
        "NestedNERModel.predict": {
            "name": "predict",
            "location": 80,
            "return": [],
            "arguments": {
                "self": [],
                "input_embed": [],
                "mask": [],
                "label_lens": []
            }
        },
        "NestedNERModel._forward": {
            "name": "_forward",
            "location": 104,
            "return": [],
            "arguments": {
                "self": [],
                "input_embed": [],
                "mask": [],
                "labels": [],
                "train": []
            }
        },
        "NestedNERModel._prepare_next_forward": {
            "name": "_prepare_next_forward",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "out_embed": [],
                "predicted_labels": [],
                "label_lens": [],
                "mask": []
            }
        },
        "NestedNERModel._correct_predict": {
            "name": "_correct_predict",
            "location": 162,
            "return": [],
            "arguments": {
                "self": [],
                "predicted_labels": []
            }
        },
        "NestedNERModel.first_input_embedding": {
            "name": "first_input_embedding",
            "location": 201,
            "return": [],
            "arguments": {
                "self": [],
                "words": [],
                "chars": [],
                "pos": [],
                "subpos": []
            }
        },
        "NestedNERModel.merge_representation": {
            "name": "merge_representation",
            "location": 219,
            "return": [],
            "arguments": {
                "self": [],
                "bilstm_output": [],
                "merge_index": [],
                "label_lens": []
            }
        },
        "NestedNERModel.extend_label": {
            "name": "extend_label",
            "location": 256,
            "return": [],
            "arguments": {
                "self": [],
                "predicted_labels": [],
                "label_lens": [],
                "mask": []
            }
        },
        "NestedNERModel.shorten_label": {
            "name": "shorten_label",
            "location": 304,
            "return": [],
            "arguments": {
                "self": [],
                "labels": [],
                "next_label_lens": []
            }
        },
        "NestedNERModel.make_merge_index": {
            "name": "make_merge_index",
            "location": 328,
            "return": [],
            "arguments": {
                "predicted_labels": [],
                "mask": []
            }
        },
        "NestedNERModel._is_next_step": {
            "name": "_is_next_step",
            "location": 373,
            "return": [],
            "arguments": {
                "self": [],
                "predicted_labels": []
            }
        }
    },
    "Shinra-master/shinra/layered_bilstm_crf/trainer.py": {
        "Trainer.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "dataset": [
                    "int",
                    "bool"
                ],
                "lr": [
                    "int",
                    "str",
                    "List[model.SockeyeModel]"
                ],
                "cg": [
                    "int",
                    "Tuple[float, float, float, float]",
                    "Callable[..., None]",
                    "Optional[List[str]]",
                    "str"
                ],
                "max_epoch": [
                    "int",
                    "allennlp.nn.InitializerApplicator",
                    "List[int]",
                    "List[float]",
                    "List[str]"
                ],
                "batch_size": [
                    "int",
                    "List[float]",
                    "List[str]",
                    "Tuple[int, int, int]"
                ],
                "char_hidden_dim": [
                    "int",
                    "float",
                    "tuple",
                    "Optional[float]"
                ],
                "dropout_rate": [
                    "int",
                    "float",
                    "tuple",
                    "Optional[float]"
                ],
                "optalgo": [
                    "int",
                    "str",
                    "List[model.SockeyeModel]"
                ],
                "save_path": [
                    "str",
                    "bool"
                ]
            }
        },
        "Trainer.train": {
            "name": "train",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Trainer.save": {
            "name": "save",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[Sequence[str]]",
                    "Optional[str]"
                ]
            }
        }
    },
    "Shinra-master/shinra/layered_bilstm_crf/__init__.py": {},
    "Shinra-master/tests/test_dataset.py": {
        "NestedNERDatasetTest.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NestedNERDatasetTest.test_initialize_variables": {
            "name": "test_initialize_variables",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NestedNERDatasetTest.test_get_batch": {
            "name": "test_get_batch",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NestedNERDatasetTest.test_get_embedding_dim": {
            "name": "test_get_embedding_dim",
            "location": 68,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "NestedNERDatasetTest.test_random_embedding": {
            "name": "test_random_embedding",
            "location": 76,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "Shinra-master/tests/test_model.py": {
        "NestedNERModelTest.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NestedNERModelTest.test_correct_predict": {
            "name": "test_correct_predict",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NestedNERModelTest.test_make_merge_index": {
            "name": "test_make_merge_index",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NestedNERModelTest.test_merge_representation": {
            "name": "test_merge_representation",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NestedNERModelTest.test_extend_label": {
            "name": "test_extend_label",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NestedNERModelTest.test_shorten_label": {
            "name": "test_shorten_label",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NestedNERModelTest.test_next_step": {
            "name": "test_next_step",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NestedNERModelTest.test_forward": {
            "name": "test_forward",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Shinra-master/tests/test_trainer.py": {
        "TrainerTest.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TrainerTest.test_train": {
            "name": "test_train",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Shinra-master/tests/__init__.py": {}
}
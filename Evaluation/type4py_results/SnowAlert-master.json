{
    "SnowAlert-master/docs/src/conf.py": {},
    "SnowAlert-master/src/setup.py": {},
    "SnowAlert-master/src/__init__.py": {},
    "SnowAlert-master/src/baselines/percentiles.py": {
        "generate_baseline_sql": {
            "name": "generate_baseline_sql",
            "location": 244,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "base_table": [
                    "str",
                    "Optional[List[str]]",
                    "int",
                    "Optional[str]",
                    "Callable[..., Coroutine[Any, Any, Any]]"
                ],
                "groups": [
                    "str",
                    "Optional[List[str]]",
                    "int",
                    "Optional[str]",
                    "Callable[..., Coroutine[Any, Any, Any]]"
                ],
                "days": [
                    "str",
                    "Optional[List[str]]",
                    "int",
                    "Optional[str]",
                    "Callable[..., Coroutine[Any, Any, Any]]"
                ],
                "sparcity_reduction": [
                    "str",
                    "Optional[List[str]]",
                    "int",
                    "Optional[str]",
                    "Callable[..., Coroutine[Any, Any, Any]]"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 270,
            "return": [
                "bool",
                "bytes"
            ],
            "arguments": {
                "options": [
                    "List[Dict]",
                    "Callable",
                    "Mapping",
                    "str",
                    "dict",
                    "Optional[Any]"
                ]
            }
        }
    },
    "SnowAlert-master/src/baselines/__init__.py": {},
    "SnowAlert-master/src/connectors/airwatch_devices.py": {
        "get_data": {
            "name": "get_data",
            "location": 118,
            "return": [],
            "arguments": {
                "url": [],
                "cms_auth": [],
                "api_key": [],
                "params": []
            }
        },
        "connect": {
            "name": "connect",
            "location": 136,
            "return": [],
            "arguments": {
                "connection_name": [],
                "options": []
            }
        },
        "ingest": {
            "name": "ingest",
            "location": 158,
            "return": [],
            "arguments": {
                "table_name": [],
                "options": []
            }
        }
    },
    "SnowAlert-master/src/connectors/assetpanda.py": {
        "get_list_objects_and_total_from_get_object": {
            "name": "get_list_objects_and_total_from_get_object",
            "location": 51,
            "return": [
                "str",
                "List[Dict]",
                "List[List[Any]]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "result": [
                    "dict",
                    "list",
                    "str",
                    "List[raiden.utils.ChannelID]",
                    "Optional[str]"
                ]
            }
        },
        "reduce_fields": {
            "name": "reduce_fields",
            "location": 61,
            "return": [
                "Type[T]",
                "str",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "int",
                "dict",
                "bool"
            ],
            "arguments": {
                "accumulated_value": [
                    "dict",
                    "str",
                    "Hashable",
                    "List[str]"
                ],
                "field": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "replace_device_key": {
            "name": "replace_device_key",
            "location": 71,
            "return": [
                "List[str]",
                "List[Dict]",
                "str",
                "List[Tuple[str, str]]",
                "Optional[str]"
            ],
            "arguments": {
                "list_device": [
                    "list",
                    "str",
                    "bool",
                    "mode.utils.times.Seconds",
                    "List[bytes]"
                ],
                "replace_key": [
                    "dict",
                    "Dict[str, Any]",
                    "bytes",
                    "Mapping[str, str]",
                    "int",
                    "Optional[dict]",
                    "Optional[str]"
                ]
            }
        },
        "get_data": {
            "name": "get_data",
            "location": 103,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "token": [
                    "str",
                    "dict",
                    "Union[str, int]",
                    "Dict[type, Callable]"
                ],
                "url": [
                    "str",
                    "dict",
                    "bool"
                ],
                "params": [
                    "dict",
                    "str",
                    "float"
                ]
            }
        },
        "connect": {
            "name": "connect",
            "location": 118,
            "return": [
                "int",
                "Callable",
                "Iterable[str]"
            ],
            "arguments": {
                "connection_name": [
                    "str",
                    "Dict[str, Any]"
                ],
                "options": [
                    "str",
                    "dict"
                ]
            }
        },
        "ingest": {
            "name": "ingest",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "table_name": [
                    "str",
                    "Set[str]"
                ],
                "options": [
                    "str",
                    "Optional[int]",
                    "int",
                    "float"
                ]
            }
        }
    },
    "SnowAlert-master/src/connectors/aws_accounts.py": {
        "ingest": {
            "name": "ingest",
            "location": 54,
            "return": [
                "str",
                "bool",
                "Iterable[int]"
            ],
            "arguments": {
                "table_name": [
                    "int",
                    "dict",
                    "Dict[str, Any]",
                    "Mapping[str, str]",
                    "Optional[Dict]",
                    "str",
                    "List[str]",
                    "Dict[str, List[str]]"
                ],
                "options": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "SnowAlert-master/src/connectors/aws_cloudtrail.py": {
        "connect": {
            "name": "connect",
            "location": 107,
            "return": [],
            "arguments": {
                "connection_name": [],
                "options": []
            }
        },
        "finalize": {
            "name": "finalize",
            "location": 186,
            "return": [],
            "arguments": {
                "connection_name": []
            }
        }
    },
    "SnowAlert-master/src/connectors/aws_collect.py": {
        "connect": {
            "name": "connect",
            "location": 1113,
            "return": [],
            "arguments": {
                "connection_name": [],
                "options": []
            }
        },
        "process_response_lists": {
            "name": "process_response_lists",
            "location": 1148,
            "return": [],
            "arguments": {
                "coldict": [],
                "page": []
            }
        },
        "process_response_items": {
            "name": "process_response_items",
            "location": 1161,
            "return": [],
            "arguments": {
                "coldict": [],
                "page": [],
                "db_entry": []
            }
        },
        "process_aws_response": {
            "name": "process_aws_response",
            "location": 1182,
            "return": [],
            "arguments": {
                "task": [],
                "page": []
            }
        },
        "insert_list": {
            "name": "insert_list",
            "location": 1315,
            "return": [],
            "arguments": {
                "name": [],
                "values": [],
                "table_name": [],
                "dryrun": []
            }
        },
        "ingest": {
            "name": "ingest",
            "location": 1447,
            "return": [],
            "arguments": {
                "table_name": [],
                "options": [],
                "dryrun": []
            }
        },
        "main": {
            "name": "main",
            "location": 1453,
            "return": [],
            "arguments": {
                "table_name": [],
                "audit_assumer_arn": [],
                "reader_eid": [],
                "audit_reader_role": [],
                "collect_apis": [],
                "master_reader_arn": [],
                "org_account_ids": [],
                "dryrun": []
            }
        },
        "aioingest.add_task": {
            "name": "add_task",
            "location": 1419,
            "return": [],
            "arguments": {
                "t": []
            }
        }
    },
    "SnowAlert-master/src/connectors/aws_config.py": {
        "connect": {
            "name": "connect",
            "location": 80,
            "return": [
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "connection_name": [
                    "str",
                    "List[str]"
                ],
                "options": [
                    "str",
                    "dict",
                    "Callable[[str], str]"
                ]
            }
        },
        "finalize": {
            "name": "finalize",
            "location": 161,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, Any]]",
                "Set[str]",
                "Dict[str, Set[str]]",
                "int",
                "dict",
                "Dict[str, int]",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "connection_name": [
                    "str"
                ]
            }
        }
    },
    "SnowAlert-master/src/connectors/aws_flow_log.py": {
        "connect": {
            "name": "connect",
            "location": 86,
            "return": [
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "connection_name": [
                    "str",
                    "List[str]"
                ],
                "options": [
                    "str",
                    "dict",
                    "Callable[[str], str]"
                ]
            }
        },
        "finalize": {
            "name": "finalize",
            "location": 167,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, Any]]",
                "Set[str]",
                "Dict[str, Set[str]]",
                "int",
                "dict",
                "Dict[str, int]",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "connection_name": [
                    "str"
                ]
            }
        }
    },
    "SnowAlert-master/src/connectors/aws_inventory.py": {
        "create_asset_table": {
            "name": "create_asset_table",
            "location": 198,
            "return": [],
            "arguments": {
                "connection_name": [],
                "asset_type": [],
                "columns": [],
                "options": []
            }
        },
        "ingest": {
            "name": "ingest",
            "location": 222,
            "return": [],
            "arguments": {
                "table_name": [],
                "options": []
            }
        },
        "iam_dispatch": {
            "name": "iam_dispatch",
            "location": 279,
            "return": [],
            "arguments": {
                "landing_table": [],
                "aws_access_key": [],
                "aws_secret_key": [],
                "accounts": [],
                "source_role_arn": [],
                "destination_role_name": [],
                "external_id": []
            }
        },
        "ec2_dispatch": {
            "name": "ec2_dispatch",
            "location": 334,
            "return": [],
            "arguments": {
                "landing_table": [],
                "aws_access_key": [],
                "aws_secret_key": [],
                "accounts": [],
                "source_role_arn": [],
                "destination_role_name": [],
                "external_id": []
            }
        },
        "ami_dispatch": {
            "name": "ami_dispatch",
            "location": 389,
            "return": [],
            "arguments": {
                "landing_table": [],
                "aws_access_key": [],
                "aws_secret_key": [],
                "accounts": [],
                "source_role_arn": [],
                "destination_role_name": [],
                "external_id": []
            }
        },
        "sg_dispatch": {
            "name": "sg_dispatch",
            "location": 444,
            "return": [],
            "arguments": {
                "landing_table": [],
                "aws_access_key": [],
                "aws_secret_key": [],
                "accounts": [],
                "source_role_arn": [],
                "destination_role_name": [],
                "external_id": []
            }
        },
        "elb_dispatch": {
            "name": "elb_dispatch",
            "location": 497,
            "return": [],
            "arguments": {
                "landing_table": [],
                "aws_access_key": [],
                "aws_secret_key": [],
                "accounts": [],
                "source_role_arn": [],
                "destination_role_name": [],
                "external_id": []
            }
        },
        "ingest_iam": {
            "name": "ingest_iam",
            "location": 550,
            "return": [],
            "arguments": {
                "landing_table": [],
                "aws_access_key": [],
                "aws_secret_key": [],
                "session": [],
                "account": []
            }
        },
        "ingest_ec2": {
            "name": "ingest_ec2",
            "location": 585,
            "return": [],
            "arguments": {
                "landing_table": [],
                "aws_access_key": [],
                "aws_secret_key": [],
                "session": [],
                "account": []
            }
        },
        "ingest_ami": {
            "name": "ingest_ami",
            "location": 621,
            "return": [],
            "arguments": {
                "landing_table": [],
                "aws_access_key": [],
                "aws_secret_key": [],
                "session": [],
                "account": []
            }
        },
        "ingest_sg": {
            "name": "ingest_sg",
            "location": 668,
            "return": [],
            "arguments": {
                "landing_table": [],
                "aws_access_key": [],
                "aws_secret_key": [],
                "session": [],
                "account": []
            }
        },
        "ingest_elb": {
            "name": "ingest_elb",
            "location": 698,
            "return": [],
            "arguments": {
                "landing_table": [],
                "aws_access_key": [],
                "aws_secret_key": [],
                "session": [],
                "account": []
            }
        },
        "get_iam_users": {
            "name": "get_iam_users",
            "location": 733,
            "return": [],
            "arguments": {
                "aws_access_key": [],
                "aws_secret_key": [],
                "session": [],
                "account": []
            }
        },
        "get_ec2_instances": {
            "name": "get_ec2_instances",
            "location": 758,
            "return": [],
            "arguments": {
                "aws_access_key": [],
                "aws_secret_key": [],
                "session": [],
                "account": []
            }
        },
        "get_images": {
            "name": "get_images",
            "location": 803,
            "return": [],
            "arguments": {
                "aws_access_key": [],
                "aws_secret_key": [],
                "session": [],
                "account": []
            }
        },
        "get_ec2_instance_name": {
            "name": "get_ec2_instance_name",
            "location": 840,
            "return": [],
            "arguments": {
                "instance": []
            }
        },
        "get_all_security_groups": {
            "name": "get_all_security_groups",
            "location": 853,
            "return": [],
            "arguments": {
                "aws_access_key": [],
                "aws_secret_key": [],
                "session": [],
                "account": []
            }
        },
        "get_all_elbs": {
            "name": "get_all_elbs",
            "location": 896,
            "return": [],
            "arguments": {
                "aws_access_key": [],
                "aws_secret_key": [],
                "session": [],
                "account": []
            }
        },
        "get_all_v1_elbs": {
            "name": "get_all_v1_elbs",
            "location": 918,
            "return": [],
            "arguments": {
                "aws_access_key": [],
                "aws_secret_key": [],
                "session": [],
                "account": []
            }
        },
        "get_all_v2_elbs": {
            "name": "get_all_v2_elbs",
            "location": 959,
            "return": [],
            "arguments": {
                "aws_access_key": [],
                "aws_secret_key": [],
                "session": [],
                "account": []
            }
        },
        "datetime_serializer": {
            "name": "datetime_serializer",
            "location": 1003,
            "return": [],
            "arguments": {
                "obj": []
            }
        }
    },
    "SnowAlert-master/src/connectors/azure_collect.py": {
        "access_token_cache": {
            "name": "access_token_cache",
            "location": 26,
            "return": [],
            "arguments": {
                "cloud": [],
                "client_id": [],
                "tenant": [],
                "secret": [],
                "resource": [],
                "_creds": []
            }
        },
        "connect": {
            "name": "connect",
            "location": 730,
            "return": [],
            "arguments": {
                "connection_name": [],
                "options": []
            }
        },
        "GET": {
            "name": "GET",
            "location": 1793,
            "return": [],
            "arguments": {
                "kind": [],
                "params": [],
                "cred": [],
                "depth": []
            }
        },
        "ingest": {
            "name": "ingest",
            "location": 1912,
            "return": [],
            "arguments": {
                "table_name": [],
                "options": [],
                "dryrun": []
            }
        },
        "main": {
            "name": "main",
            "location": 2045,
            "return": [],
            "arguments": {
                "table_name": [],
                "tenant": [],
                "client": [],
                "secret": [],
                "cloud": [],
                "apis": [],
                "dryrun": [],
                "run_now": []
            }
        },
        "ingest.insert_results": {
            "name": "insert_results",
            "location": 1935,
            "return": [],
            "arguments": {
                "kind": [],
                "results": []
            }
        },
        "GET.response_values": {
            "name": "response_values",
            "location": 1859,
            "return": [],
            "arguments": {
                "result": []
            }
        }
    },
    "SnowAlert-master/src/connectors/azure_log.py": {
        "connect": {
            "name": "connect",
            "location": 200,
            "return": [],
            "arguments": {
                "connection_name": [],
                "options": []
            }
        }
    },
    "SnowAlert-master/src/connectors/azure_subscription.py": {
        "get_subscription_service": {
            "name": "get_subscription_service",
            "location": 84,
            "return": [
                "str",
                "int",
                "tuple"
            ],
            "arguments": {
                "options": [
                    "dict",
                    "Type",
                    "Optional[str]",
                    "Optional[int]"
                ],
                "cloud_type": [
                    "dict",
                    "int",
                    "Dict[str, Any]",
                    "cmk.utils.type_defs.CheckVariables"
                ]
            }
        },
        "connect": {
            "name": "connect",
            "location": 89,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "connection_name": [
                    "str",
                    "List[str]"
                ],
                "options": [
                    "str",
                    "dict"
                ]
            }
        },
        "ingest": {
            "name": "ingest",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "table_name": [
                    "str",
                    "dict",
                    "Type[T]"
                ],
                "options": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "type",
                    "Optional[str]"
                ]
            }
        }
    },
    "SnowAlert-master/src/connectors/azure_vm.py": {
        "get_vms": {
            "name": "get_vms",
            "location": 87,
            "return": [
                "str",
                "bool",
                "pricemonitor.config.Coin"
            ],
            "arguments": {
                "options": [
                    "str"
                ]
            }
        },
        "get_nics": {
            "name": "get_nics",
            "location": 95,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "options": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "enrich_vm_with_nics": {
            "name": "enrich_vm_with_nics",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "vm": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "nics": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "connect": {
            "name": "connect",
            "location": 108,
            "return": [
                "int",
                "Callable",
                "Iterable[str]"
            ],
            "arguments": {
                "connection_name": [
                    "str",
                    "List[str]"
                ],
                "options": [
                    "str",
                    "bool",
                    "Mapping[str, Any]",
                    "int"
                ]
            }
        },
        "ingest": {
            "name": "ingest",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "table_name": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "options": [
                    "str",
                    "T",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        }
    },
    "SnowAlert-master/src/connectors/cisco_umbrella.py": {
        "get_data": {
            "name": "get_data",
            "location": 60,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "organization_id": [
                    "str",
                    "Dict[str, Any]",
                    "int"
                ],
                "key": [
                    "str",
                    "bytes",
                    "dict",
                    "Union[str, Dict[str, Any]]"
                ],
                "secret": [
                    "str",
                    "bytes",
                    "dict",
                    "Union[str, Dict[str, Any]]"
                ],
                "params": [
                    "str",
                    "bytes",
                    "dict",
                    "Union[str, Dict[str, Any]]"
                ]
            }
        },
        "connect": {
            "name": "connect",
            "location": 89,
            "return": [
                "int",
                "Callable",
                "Iterable[str]"
            ],
            "arguments": {
                "connection_name": [
                    "str"
                ],
                "options": [
                    "str",
                    "dict"
                ]
            }
        },
        "ingest": {
            "name": "ingest",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "table_name": [
                    "str",
                    "Set[str]"
                ],
                "options": [
                    "str"
                ]
            }
        }
    },
    "SnowAlert-master/src/connectors/crowdstrike_devices.py": {
        "get_token_basic": {
            "name": "get_token_basic",
            "location": 91,
            "return": [
                "str",
                "cmk.utils.type_defs.CheckPluginName.Str",
                "bytes",
                "bool"
            ],
            "arguments": {
                "client_id": [
                    "str"
                ],
                "client_secret": [
                    "str"
                ]
            }
        },
        "get_offset_from_devices_results": {
            "name": "get_offset_from_devices_results",
            "location": 120,
            "return": [
                "int",
                "Tuple[bytes]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "result": [
                    "dict",
                    "str",
                    "List[str]",
                    "list",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_data": {
            "name": "get_data",
            "location": 134,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "token": [
                    "str",
                    "dict",
                    "Union[str, int]",
                    "Dict[type, Callable]"
                ],
                "url": [
                    "str",
                    "dict",
                    "bool"
                ],
                "params": [
                    "dict",
                    "str",
                    "float"
                ]
            }
        },
        "create_url_params_get_devices": {
            "name": "create_url_params_get_devices",
            "location": 156,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "url": [
                    "str"
                ],
                "resources": [
                    "list",
                    "str",
                    "Iterable[str]",
                    "Optional[Mapping[str, str]]"
                ]
            }
        },
        "connect": {
            "name": "connect",
            "location": 163,
            "return": [
                "int",
                "Callable",
                "Iterable[str]"
            ],
            "arguments": {
                "connection_name": [
                    "str"
                ],
                "options": [
                    "str",
                    "dict"
                ]
            }
        },
        "ingest": {
            "name": "ingest",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "table_name": [
                    "str",
                    "Set[str]"
                ],
                "options": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        }
    },
    "SnowAlert-master/src/connectors/duo_collect.py": {
        "connect": {
            "name": "connect",
            "location": 51,
            "return": [
                "int",
                "Callable",
                "Iterable[str]"
            ],
            "arguments": {
                "connection_name": [
                    "str"
                ],
                "options": [
                    "str",
                    "list",
                    "Callable"
                ]
            }
        },
        "ingest": {
            "name": "ingest",
            "location": 68,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "table_name": [
                    "str"
                ],
                "options": [
                    "MutableMapping",
                    "dict",
                    "str",
                    "utils.mssql_counters.Section",
                    "Iterable[str]",
                    "Dict[str, Any]"
                ],
                "dryrun": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 83,
            "return": [
                "str",
                "List[str]",
                "Dict[str, str]",
                "set"
            ],
            "arguments": {
                "table_name": [
                    "str",
                    "int"
                ],
                "domainkey": [
                    "str",
                    "int"
                ],
                "ikey": [
                    "str",
                    "int"
                ],
                "skey": [
                    "str",
                    "int"
                ],
                "dryrun": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "SnowAlert-master/src/connectors/github_webhooks_s3.py": {
        "connect": {
            "name": "connect",
            "location": 124,
            "return": [
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "connection_name": [
                    "str",
                    "List[str]"
                ],
                "options": [
                    "str",
                    "dict"
                ]
            }
        },
        "finalize": {
            "name": "finalize",
            "location": 197,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, Any]]",
                "Set[str]",
                "Dict[str, Set[str]]",
                "int",
                "dict",
                "Dict[str, int]",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "connection_name": [
                    "str"
                ]
            }
        }
    },
    "SnowAlert-master/src/connectors/gsuite_logs.py": {
        "connect": {
            "name": "connect",
            "location": 75,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "connection_name": [
                    "str",
                    "Optional[Any]"
                ],
                "options": [
                    "str",
                    "Sequence[str]",
                    "T"
                ]
            }
        },
        "get_logs": {
            "name": "get_logs",
            "location": 91,
            "return": [
                "str",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "service_account_info": [
                    "str",
                    "int"
                ],
                "with_subject": [
                    "Optional[str]",
                    "str",
                    "Optional[cmk.utils.type_defs.ServiceName]",
                    "bool"
                ],
                "event_name": [
                    "str"
                ],
                "start_time": [
                    "str"
                ]
            }
        },
        "ingest": {
            "name": "ingest",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "table_name": [
                    "str",
                    "Set[str]"
                ],
                "options": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        }
    },
    "SnowAlert-master/src/connectors/jamf_inventory.py": {
        "fetch_computer": {
            "name": "fetch_computer",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "s": [
                    "int"
                ],
                "cid": [
                    "int"
                ],
                "i": [
                    "int"
                ]
            }
        },
        "ingest": {
            "name": "ingest",
            "location": 76,
            "return": [
                "Union[str, List[str], Tuple[str, ...]]",
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "table_name": [
                    "str",
                    "dict",
                    "Optional[str]"
                ],
                "options": [
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        }
    },
    "SnowAlert-master/src/connectors/ldap_log.py": {
        "connect": {
            "name": "connect",
            "location": 72,
            "return": [
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "connection_name": [
                    "str"
                ],
                "options": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "finalize": {
            "name": "finalize",
            "location": 163,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, Any]]",
                "Set[str]",
                "Dict[str, Set[str]]",
                "int",
                "dict",
                "Dict[str, int]",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "connection_name": [
                    "str"
                ]
            }
        }
    },
    "SnowAlert-master/src/connectors/meraki_devices.py": {
        "get_data": {
            "name": "get_data",
            "location": 73,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "token": [
                    "str",
                    "dict",
                    "Union[str, int]"
                ],
                "params": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "bytes",
                    "float"
                ]
            }
        },
        "connect": {
            "name": "connect",
            "location": 91,
            "return": [
                "int",
                "Callable",
                "Iterable[str]"
            ],
            "arguments": {
                "connection_name": [
                    "str"
                ],
                "options": [
                    "str",
                    "dict"
                ]
            }
        },
        "ingest": {
            "name": "ingest",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "table_name": [
                    "str",
                    "Optional[str]"
                ],
                "options": [
                    "set",
                    "List[str]",
                    "List[List[str]]",
                    "Dict[str, int]",
                    "list"
                ]
            }
        }
    },
    "SnowAlert-master/src/connectors/nginx_log.py": {
        "connect": {
            "name": "connect",
            "location": 105,
            "return": [],
            "arguments": {
                "connection_name": [],
                "options": []
            }
        },
        "finalize": {
            "name": "finalize",
            "location": 202,
            "return": [],
            "arguments": {
                "connection_name": []
            }
        }
    },
    "SnowAlert-master/src/connectors/okta.py": {
        "connect": {
            "name": "connect",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "Iterable[str]"
            ],
            "arguments": {
                "connection_name": [
                    "str"
                ],
                "options": [
                    "str",
                    "dict"
                ]
            }
        },
        "ingest_users": {
            "name": "ingest_users",
            "location": 85,
            "return": [
                "float",
                "str",
                "DefaultDict",
                "bytes"
            ],
            "arguments": {
                "url": [
                    "str",
                    "dict",
                    "bytes",
                    "Mapping[str, str]"
                ],
                "headers": [
                    "str",
                    "requests.models.Response",
                    "Optional[dict]",
                    "requests.PreparedRequest"
                ],
                "landing_table": [
                    "dict",
                    "int"
                ],
                "now": [
                    "dict",
                    "int"
                ]
            }
        },
        "ingest": {
            "name": "ingest",
            "location": 113,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "table_name": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "options": [
                    "Dict[str, Any]",
                    "bytes",
                    "str"
                ]
            }
        }
    },
    "SnowAlert-master/src/connectors/osquery_log.py": {
        "connect": {
            "name": "connect",
            "location": 77,
            "return": [
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "connection_name": [
                    "str"
                ],
                "options": [
                    "str",
                    "int"
                ]
            }
        },
        "finalize": {
            "name": "finalize",
            "location": 166,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, Any]]",
                "Set[str]",
                "Dict[str, Set[str]]",
                "int",
                "dict",
                "Dict[str, int]",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "connection_name": [
                    "str"
                ]
            }
        }
    },
    "SnowAlert-master/src/connectors/salesforce_event_log.py": {
        "connect": {
            "name": "connect",
            "location": 61,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "connection_name": [
                    "str"
                ],
                "options": [
                    "str",
                    "dict"
                ]
            }
        },
        "ingest": {
            "name": "ingest",
            "location": 82,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "table_name": [
                    "str"
                ],
                "options": [
                    "dict",
                    "MutableMapping",
                    "type"
                ]
            }
        }
    },
    "SnowAlert-master/src/connectors/tenable_io.py": {
        "ingest_vulns": {
            "name": "ingest_vulns",
            "location": 74,
            "return": [],
            "arguments": {
                "table_name": []
            }
        },
        "ingest_users": {
            "name": "ingest_users",
            "location": 101,
            "return": [],
            "arguments": {
                "table_name": []
            }
        },
        "get_agent_data": {
            "name": "get_agent_data",
            "location": 150,
            "return": [],
            "arguments": {}
        },
        "ingest_agents": {
            "name": "ingest_agents",
            "location": 160,
            "return": [],
            "arguments": {
                "table_name": [],
                "options": []
            }
        },
        "connect": {
            "name": "connect",
            "location": 181,
            "return": [],
            "arguments": {
                "connection_name": [],
                "options": []
            }
        },
        "ingest": {
            "name": "ingest",
            "location": 200,
            "return": [],
            "arguments": {
                "table_name": [],
                "options": []
            }
        },
        "ingest.GET": {
            "name": "GET",
            "location": 208,
            "return": [],
            "arguments": {
                "resource": [],
                "key": [],
                "limit": [],
                "offset": []
            }
        }
    },
    "SnowAlert-master/src/connectors/utils.py": {
        "updated": {
            "name": "updated",
            "location": 11,
            "return": [
                "Exception",
                "Dict[str, bool]",
                "int",
                "str"
            ],
            "arguments": {
                "d": [
                    "dict",
                    "List[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "qmap_mp": {
            "name": "qmap_mp",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "num_threads": [
                    "int",
                    "float",
                    "bool",
                    "Optional[int]",
                    "Optional[float]",
                    "Optional[str]",
                    "str"
                ],
                "f": [
                    "bool",
                    "int",
                    "Optional[int]"
                ],
                "args": []
            }
        },
        "sts_assume_role": {
            "name": "sts_assume_role",
            "location": 50,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "src_role_arn": [
                    "str",
                    "int"
                ],
                "dest_role_arn": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "dest_external_id": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "yaml_dump": {
            "name": "yaml_dump",
            "location": 108,
            "return": [
                "Optional[int]",
                "int"
            ],
            "arguments": {}
        },
        "bytes_to_str": {
            "name": "bytes_to_str",
            "location": 112,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "x": [
                    "List[bytes]",
                    "bytes",
                    "str"
                ]
            }
        },
        "create_metadata_table": {
            "name": "create_metadata_table",
            "location": 116,
            "return": [
                "int",
                "Optional[bool]",
                "Union[tuple, list]",
                "Dict[str, str]",
                "Set[VT]"
            ],
            "arguments": {
                "table": [
                    "str"
                ],
                "cols": [
                    "str",
                    "Optional[int]",
                    "Mapping[str, int]"
                ],
                "addition": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "qmap_mp.add_task": {
            "name": "add_task",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "arg": [
                    "multiprocessing.Queue",
                    "dict"
                ]
            }
        },
        "qmap_mp.process_task": {
            "name": "process_task",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "SnowAlert-master/src/connectors/__init__.py": {},
    "SnowAlert-master/src/connectors/tests/test_aws_collect.py": {
        "test_process_aws_response": {
            "name": "test_process_aws_response",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "AnyDate.__eq__": {
            "name": "__eq__",
            "location": 13,
            "return": [
                "int",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        }
    },
    "SnowAlert-master/src/runners/alert_dispatcher.py": {
        "get_new_alerts": {
            "name": "get_new_alerts",
            "location": 19,
            "return": [
                "str",
                "Dict[str, Any]",
                "bytes",
                "Callable",
                "Optional[Dict[str, Any]]",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "ctx": []
            }
        },
        "record_status": {
            "name": "record_status",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "results": [
                    "int",
                    "str"
                ],
                "alert_id": [
                    "int",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "SnowAlert-master/src/runners/alert_processor.py": {
        "get_correlation_id": {
            "name": "get_correlation_id",
            "location": 42,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "ctx": [],
                "alert": [
                    "int",
                    "bool"
                ]
            }
        },
        "assess_correlation": {
            "name": "assess_correlation",
            "location": 80,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "ctx": [
                    "str",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "SnowAlert-master/src/runners/alert_queries_runner.py": {
        "merge_alerts": {
            "name": "merge_alerts",
            "location": 97,
            "return": [
                "django.db.models.QuerySet",
                "int"
            ],
            "arguments": {
                "query_name": [
                    "str",
                    "int"
                ],
                "from_time_sql": [
                    "str",
                    "Optional[str]",
                    "datetime.date"
                ]
            }
        },
        "create_alerts": {
            "name": "create_alerts",
            "location": 111,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "rule_name": [
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "rule_name": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "SnowAlert-master/src/runners/alert_suppressions_runner.py": {
        "run_suppression_query": {
            "name": "run_suppression_query",
            "location": 43,
            "return": [
                "bool",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "squelch_name": [
                    "str"
                ]
            }
        },
        "run_suppressions": {
            "name": "run_suppressions",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "squelch_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "squelch_name": [
                    "str"
                ]
            }
        }
    },
    "SnowAlert-master/src/runners/baseline_runner.py": {
        "format_code": {
            "name": "format_code",
            "location": 19,
            "return": [
                "str",
                "Dict[str, Any]",
                "Type[Any]",
                "Optional[int]"
            ],
            "arguments": {
                "code": [
                    "str"
                ],
                "vars": [
                    "dict",
                    "Dict[str, Any]",
                    "Mapping[str, Dict[str, Any]]",
                    "Iterable[str]",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "pack": {
            "name": "pack",
            "location": 25,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[int]",
                "Optional[float]",
                "Union[int, None]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "nanToNone": {
            "name": "nanToNone",
            "location": 30,
            "return": [
                "Optional[int]",
                "bool",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "x": [
                    "float",
                    "int"
                ]
            }
        },
        "unpack": {
            "name": "unpack",
            "location": 36,
            "return": [
                "str",
                "List[Dict]",
                "Optional[Union[str, Any]]",
                "List[str]",
                "int"
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, str]",
                    "Dict[AbstractSet[str], Set[Any]]",
                    "pandas.DataFrame"
                ]
            }
        },
        "query_log_source": {
            "name": "query_log_source",
            "location": 41,
            "return": [
                "MutableMapping[str, Any]",
                "str",
                "List[Pattern]",
                "List[Tuple[str, str]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "source": [
                    "str",
                    "Optional[str]"
                ],
                "time_filter": [
                    "Optional[str]",
                    "str"
                ],
                "time_column": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "run_baseline": {
            "name": "run_baseline",
            "location": 57,
            "return": [
                "Awaitable"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[str]",
                    "Type[BaseException]",
                    "Optional[Any]"
                ],
                "comment": [
                    "str",
                    "Callable[..., T]",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "baseline": [
                    "list",
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "SnowAlert-master/src/runners/config.py": {},
    "SnowAlert-master/src/runners/conftest.py": {
        "db_schemas": {
            "name": "db_schemas",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "str"
                ]
            }
        },
        "db_schemas_no_samples": {
            "name": "db_schemas_no_samples",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "int"
                ]
            }
        },
        "delete_results": {
            "name": "delete_results",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "db_schemas.fin": {
            "name": "fin",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "db_schemas_no_samples.fin": {
            "name": "fin",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "SnowAlert-master/src/runners/connectors_runner.py": {
        "do_ingest": {
            "name": "do_ingest",
            "location": 20,
            "return": [
                "mypy.types.Type",
                "tuple",
                "bool"
            ],
            "arguments": {
                "connector": [
                    "str",
                    "Optional[str]"
                ],
                "table_name": [
                    "str",
                    "Optional[str]"
                ],
                "options": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "time_to_run": {
            "name": "time_to_run",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "schedule": [
                    "str",
                    "bytes"
                ],
                "now": [
                    "str",
                    "int",
                    "Optional[float]",
                    "Optional[Tuple[str, int]]",
                    "Iterable[str]",
                    "Optional[int]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "connection_run": {
            "name": "connection_run",
            "location": 53,
            "return": [
                "Iterator[T]",
                "Iterator[str]",
                "Iterator",
                "Iterable[T]"
            ],
            "arguments": {
                "connection_table": [
                    "str",
                    "Optional[str]",
                    "tbump.config.Config",
                    "Dict[str, Any]",
                    "Dict[str, dict]",
                    "List[str]"
                ],
                "run_now": [
                    "Tuple[int, int]",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "connection_table": [
                    "Optional[str]",
                    "Optional[int]",
                    "str",
                    "Optional[Sequence[Any]]",
                    "Optional[Callable[[Dict], Any]]",
                    "Optional[Union[str, Any]]"
                ],
                "run_now": [
                    "str",
                    "bool",
                    "solo.config.app.Config",
                    "Tuple[str, str]",
                    "\"Config\""
                ]
            }
        }
    },
    "SnowAlert-master/src/runners/run.py": {
        "main": {
            "name": "main",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "target": [
                    "str"
                ]
            }
        }
    },
    "SnowAlert-master/src/runners/utils.py": {
        "groups_of": {
            "name": "groups_of",
            "location": 21,
            "return": [
                "int",
                "Dict[str, Dict[str, int]]",
                "Optional[int]",
                "Iterable"
            ],
            "arguments": {
                "n": [
                    "int",
                    "List[str]"
                ],
                "iterable": [
                    "int",
                    "List[str]"
                ],
                "fillvalue": [
                    "int",
                    "str"
                ]
            }
        },
        "format_exception": {
            "name": "format_exception",
            "location": 27,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "e": [
                    "Exception",
                    "BaseException",
                    "str",
                    "Callable",
                    "int",
                    "bool"
                ]
            }
        },
        "format_exception_only": {
            "name": "format_exception_only",
            "location": 31,
            "return": [
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "e": [
                    "Exception",
                    "Type",
                    "BaseException",
                    "str",
                    "Callable",
                    "bool",
                    "Sequence[str]"
                ]
            }
        },
        "json_dumps": {
            "name": "json_dumps",
            "location": 35,
            "return": [
                "str",
                "Dict[str, int]",
                "int"
            ],
            "arguments": {
                "obj": [
                    "List[str]"
                ]
            }
        },
        "apply_some": {
            "name": "apply_some",
            "location": 72,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "f": [
                    "int"
                ]
            }
        },
        "json_dumps.default_json_dumps": {
            "name": "default_json_dumps",
            "location": 38,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "x": [
                    "snorkel.types.DataPoint",
                    "float"
                ]
            }
        }
    },
    "SnowAlert-master/src/runners/violation_queries_runner.py": {
        "main": {
            "name": "main",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "rules_postfix": [
                    "str",
                    "List[str]",
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "SnowAlert-master/src/runners/violation_suppressions_runner.py": {
        "run_suppression": {
            "name": "run_suppression",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "squelch_name": [
                    "str",
                    "dict",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "SnowAlert-master/src/runners/__init__.py": {},
    "SnowAlert-master/src/runners/handlers/jira.py": {
        "jira_ticket_body": {
            "name": "jira_ticket_body",
            "location": 61,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "alert": [
                    "int",
                    "dict",
                    "List[str]"
                ],
                "project": [
                    "bool",
                    "str",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "escape_jira_strings": {
            "name": "escape_jira_strings",
            "location": 85,
            "return": [
                "bool",
                "int",
                "Optional[str]",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {
                "v": [
                    "str",
                    "int"
                ]
            }
        },
        "append_to_body": {
            "name": "append_to_body",
            "location": 94,
            "return": [
                "str",
                "Iterable[Hashable]",
                "int",
                "dict"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "Callable",
                    "Sequence",
                    "Mapping"
                ],
                "alert": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "project": [
                    "str",
                    "Sequence",
                    "List[str]",
                    "float",
                    "Optional[str]",
                    "Sequence[str]",
                    "Mapping[str, str]"
                ]
            }
        },
        "link_search_todos": {
            "name": "link_search_todos",
            "location": 116,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "description": [
                    "str",
                    "Optional[str]"
                ],
                "project": [
                    "Tuple[int, int]"
                ]
            }
        },
        "create_jira_ticket": {
            "name": "create_jira_ticket",
            "location": 125,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "alert": [
                    "str",
                    "bool"
                ],
                "assignee": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "custom_fields": [
                    "str",
                    "int"
                ],
                "project": [
                    "str",
                    "int",
                    "float"
                ],
                "issue_type": [
                    "str",
                    "bytes",
                    "dict"
                ]
            }
        },
        "check_ticket_status": {
            "name": "check_ticket_status",
            "location": 192,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "Sequence[Optional[str]]",
                    "Union[int, str]"
                ]
            }
        },
        "get_ticket_description": {
            "name": "get_ticket_description",
            "location": 198,
            "return": [
                "bool",
                "str",
                "Sequence",
                "set",
                "Tuple[str, List[str]]",
                "Optional[Callable]"
            ],
            "arguments": {
                "id": [
                    "Optional[\"FieldContainer\"]",
                    "str",
                    "Optional[Iterable]"
                ]
            }
        },
        "set_issue_done": {
            "name": "set_issue_done",
            "location": 204,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "issueId": [
                    "int",
                    "str"
                ]
            }
        },
        "record_ticket_id": {
            "name": "record_ticket_id",
            "location": 208,
            "return": [
                ""
            ],
            "arguments": {
                "ticket_id": [
                    "int",
                    "Optional[str]"
                ],
                "alert_id": [
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "handle": {
            "name": "handle",
            "location": 217,
            "return": [
                "str"
            ],
            "arguments": {
                "alert": [
                    "str",
                    "Union['AbstractSetIntStr', 'MappingIntStrAny']",
                    "bool"
                ],
                "correlation_id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "bool",
                    "raiden.utils.BlockIdentifier",
                    "Iterable[int]"
                ],
                "project": [
                    "int",
                    "str"
                ],
                "assignee": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Tuple[int, str]",
                    "bool"
                ],
                "custom_fields": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Tuple[int, str]",
                    "bool"
                ],
                "issue_type": [
                    "int",
                    "str",
                    "Optional[int]",
                    "Tuple[int, str]",
                    "bool"
                ],
                "jira_url": [
                    "Optional[int]",
                    "int",
                    "List[str]",
                    "str",
                    "Optional[str]"
                ],
                "starting_status": [
                    "str",
                    "bool",
                    "Union[int, str]",
                    "int"
                ]
            }
        }
    },
    "SnowAlert-master/src/runners/handlers/pd.py": {
        "handle": {
            "name": "handle",
            "location": 28,
            "return": [
                "Optional[str]",
                "Optional[List[Any]]",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "alert": [
                    "Optional[str]",
                    "List[bytes]",
                    "bool"
                ],
                "summary": [
                    "Optional[str]"
                ],
                "source": [
                    "str",
                    "bool",
                    "Optional[tuple]"
                ],
                "dedup_key": [
                    "int",
                    "str",
                    "bool"
                ],
                "severity": [
                    "Dict[str, Any]",
                    "List[Tuple[int, int]]",
                    "int"
                ],
                "custom_details": [
                    "Optional[str]",
                    "bool",
                    "str"
                ],
                "pd_api_token": [
                    "bool",
                    "Optional[int]",
                    "Optional[str]",
                    "Iterable[List[Any]]",
                    "Dict[str, int]",
                    "bytes"
                ]
            }
        }
    },
    "SnowAlert-master/src/runners/handlers/service_now.py": {
        "handle": {
            "name": "handle",
            "location": 37,
            "return": [
                "str",
                "bool",
                "Optional[Union[Any, Any]]"
            ],
            "arguments": {
                "alert": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "int",
                    "Dict[str, Dict[str, str]]"
                ],
                "assignee": [
                    "str",
                    "Dict[str, Any]",
                    "BaseException"
                ],
                "payload": [
                    "str",
                    "Dict[str, Any]",
                    "BaseException"
                ]
            }
        },
        "Bearer.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Bearer.__call__": {
            "name": "__call__",
            "location": 32,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "str",
                    "int",
                    "requests.PreparedRequest",
                    "dict",
                    "bytes"
                ]
            }
        }
    },
    "SnowAlert-master/src/runners/handlers/ses.py": {
        "handle": {
            "name": "handle",
            "location": 8,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "alert": [
                    "bool",
                    "int",
                    "Callable",
                    "Optional[float]",
                    "str"
                ],
                "type": [
                    "bool",
                    "int",
                    "Callable",
                    "Optional[float]",
                    "str"
                ],
                "recipient_email": [
                    "Optional[str]",
                    "str",
                    "Callable",
                    "int",
                    "Optional[Any]"
                ],
                "sender_email": [
                    "str",
                    "bool"
                ],
                "text": [
                    "Optional[bool]",
                    "Optional[str]",
                    "str",
                    "Optional[Union[str, int]]",
                    "Optional[int]",
                    "Optional[Union[int, float]]"
                ],
                "html": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[int, str]]",
                    "dict"
                ],
                "subject": [
                    "str",
                    "Optional[str]",
                    "Sequence[str]",
                    "Union[str, bytes]"
                ],
                "cc": [
                    "str",
                    "Optional[str]",
                    "Optional[bool]",
                    "bool"
                ],
                "bcc": [
                    "str",
                    "Optional[str]",
                    "Optional[bool]",
                    "bool"
                ],
                "reply_to": [
                    "str",
                    "Optional[str]",
                    "Optional[bool]",
                    "bool"
                ],
                "charset": [
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "dict",
                    "List[Tuple[str, str]]",
                    "Optional[str]"
                ]
            }
        }
    },
    "SnowAlert-master/src/runners/handlers/slack.py": {
        "message_template": {
            "name": "message_template",
            "location": 13,
            "return": [
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "vars": [
                    "str"
                ]
            }
        },
        "handle": {
            "name": "handle",
            "location": 52,
            "return": [
                "Optional[str]",
                "bool",
                "str",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "alert": [
                    "str",
                    "bool",
                    "float",
                    "Iterable[str]"
                ],
                "recipient_email": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "int",
                    "Optional[Union[str, Any]]",
                    "Optional[Dict[str, Any]]",
                    "Optional[bool]"
                ],
                "channel": [
                    "str",
                    "Optional[str]",
                    "Sequence"
                ],
                "template": [
                    "str",
                    "Optional[Callable[[], Any]]",
                    "Optional[Any]",
                    "Optional[dict]",
                    "dict",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "message": [
                    "Optional[str]",
                    "Optional[Tuple[str, str]]"
                ],
                "file_content": [
                    "Optional[str]",
                    "Optional[List[str]]",
                    "dict",
                    "Optional[Dict[str, str]]",
                    "int"
                ],
                "file_type": [
                    "str",
                    "Optional[str]"
                ],
                "file_name": [
                    "str",
                    "Optional[str]"
                ],
                "blocks": [
                    "str",
                    "Optional[dict]",
                    "Optional[Dict[str, str]]"
                ],
                "attachments": [
                    "str",
                    "Optional[dict]",
                    "Optional[Dict[str, str]]"
                ],
                "api_token": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "slack_api_token": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        }
    },
    "SnowAlert-master/src/runners/handlers/sms.py": {
        "handle": {
            "name": "handle",
            "location": 9,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "alert": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "recipient_phone": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "bool"
                ],
                "sender_phone": [
                    "str"
                ],
                "message": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "Callable",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "SnowAlert-master/src/runners/handlers/smtp.py": {
        "handle": {
            "name": "handle",
            "location": 19,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "alert": [
                    "bool",
                    "int",
                    "Callable",
                    "Optional[float]",
                    "str"
                ],
                "type": [
                    "bool",
                    "int",
                    "Callable",
                    "Optional[float]",
                    "str"
                ],
                "sender_email": [
                    "int",
                    "List[int]"
                ],
                "recipient_email": [
                    "Optional[str]",
                    "Optional[Union[int, float]]",
                    "Optional[bool]",
                    "str",
                    "Optional[List[str]]",
                    "Callable[[str], str]",
                    "bool",
                    "Optional[Union[str, int]]"
                ],
                "text": [
                    "str",
                    "Optional[str]",
                    "Optional[bool]",
                    "bool",
                    "Optional[Union[int, float]]"
                ],
                "html": [
                    "Optional[str]",
                    "Optional[bool]",
                    "bool"
                ],
                "subject": [
                    "str",
                    "bool",
                    "List[int]",
                    "Optional[str]"
                ],
                "reply_to": [
                    "Optional[str]",
                    "Optional[List[str]]",
                    "str",
                    "Dict[str, 'LabwareDefinition']",
                    "Optional[float]",
                    "int"
                ],
                "cc": [
                    "Optional[str]",
                    "Optional[Union[int, float]]",
                    "Optional[bool]",
                    "Mapping",
                    "Optional[int]"
                ],
                "bcc": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "Optional[bool]"
                ],
                "host": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "Union[str, object]",
                    "Optional[int]"
                ],
                "port": [
                    "int",
                    "str",
                    "bool",
                    "float",
                    "Union[str, object]",
                    "Optional[int]"
                ],
                "user": [
                    "str",
                    "bool",
                    "List[int]",
                    "Optional[str]"
                ],
                "password": [
                    "str",
                    "bool",
                    "List[int]",
                    "Optional[str]"
                ],
                "use_ssl": [
                    "bool",
                    "str"
                ],
                "use_tls": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "SnowAlert-master/src/runners/handlers/sns.py": {
        "handle": {
            "name": "handle",
            "location": 9,
            "return": [
                "bool",
                "Optional[str]",
                "str",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "alert": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "topic": [
                    "str",
                    "Optional[type]",
                    "Optional[int]"
                ],
                "target": [
                    "Optional[str]",
                    "str",
                    "Optional['Node']"
                ],
                "recipient_phone": [
                    "Optional[str]",
                    "Optional[type]",
                    "Optional[int]",
                    "Optional[Sequence[Any]]",
                    "Optional[List[str]]"
                ],
                "subject": [
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Dict]",
                    "Optional[type]",
                    "Dict[str, Any]",
                    "str",
                    "Optional[List[str]]"
                ],
                "message_structure": [
                    "Optional[int]",
                    "Optional[type]",
                    "Dict[str, Any]",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]"
                ],
                "message": [
                    "str",
                    "Optional[Set[str]]"
                ]
            }
        }
    },
    "SnowAlert-master/src/runners/handlers/sp.py": {
        "call_procedure": {
            "name": "call_procedure",
            "location": 5,
            "return": [
                "Callable",
                "int",
                "float"
            ],
            "arguments": {
                "procedure": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "parameters": [
                    "Optional[List[Type]]",
                    "Callable[..., T]",
                    "Optional[str]",
                    "Optional[T]"
                ]
            }
        },
        "handle": {
            "name": "handle",
            "location": 43,
            "return": [
                "Optional[str]",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "alert": [
                    "bool",
                    "str",
                    "float",
                    "Tuple['cirq.Qid']"
                ],
                "procedure": [
                    "str",
                    "bool"
                ],
                "parameters": [
                    "str",
                    "bool",
                    "int",
                    "float"
                ]
            }
        }
    },
    "SnowAlert-master/src/runners/handlers/__init__.py": {},
    "SnowAlert-master/src/runners/helpers/auth.py": {
        "load_pkb_rsa": {
            "name": "load_pkb_rsa",
            "location": 22,
            "return": [
                "str",
                "Set[str]",
                "Optional[str]",
                "bytes"
            ],
            "arguments": {
                "p8_private_key": [
                    "Optional[bytes]",
                    "bytes",
                    "int"
                ],
                "passphrase": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "oauth_refresh": {
            "name": "oauth_refresh",
            "location": 36,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]",
                "Optional[str]"
            ],
            "arguments": {
                "account": [
                    "str"
                ],
                "refresh_token": [
                    "str"
                ]
            }
        },
        "load_pkb": {
            "name": "load_pkb",
            "location": 57,
            "return": [
                "bytes",
                "dict",
                "bool",
                "str"
            ],
            "arguments": {
                "p8_private_key": [
                    "str",
                    "bytes"
                ],
                "passphrase": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "SnowAlert-master/src/runners/helpers/db.py": {
        "retry": {
            "name": "retry",
            "location": 43,
            "return": [],
            "arguments": {
                "f": [],
                "E": [],
                "n": [],
                "log_errors": [],
                "handlers": [],
                "loggers": [],
                "sleep_seconds_btw_retry": []
            }
        },
        "connect": {
            "name": "connect",
            "location": 78,
            "return": [],
            "arguments": {
                "flush_cache": [],
                "set_cache": [],
                "oauth": []
            }
        },
        "fetch": {
            "name": "fetch",
            "location": 168,
            "return": [],
            "arguments": {
                "ctx": [],
                "query": [],
                "fix_errors": [],
                "params": []
            }
        },
        "execute": {
            "name": "execute",
            "location": 192,
            "return": [],
            "arguments": {
                "ctx": [],
                "query": [],
                "fix_errors": [],
                "params": []
            }
        },
        "connect_and_execute": {
            "name": "connect_and_execute",
            "location": 217,
            "return": [],
            "arguments": {
                "queries": []
            }
        },
        "connect_and_fetchall": {
            "name": "connect_and_fetchall",
            "location": 230,
            "return": [],
            "arguments": {
                "query": [],
                "params": []
            }
        },
        "fetch_latest": {
            "name": "fetch_latest",
            "location": 235,
            "return": [],
            "arguments": {
                "table": [],
                "col": [],
                "where": []
            }
        },
        "fetch_props": {
            "name": "fetch_props",
            "location": 243,
            "return": [],
            "arguments": {
                "sql": [],
                "filter": []
            }
        },
        "is_valid_rule_name": {
            "name": "is_valid_rule_name",
            "location": 271,
            "return": [],
            "arguments": {
                "rule_name": []
            }
        },
        "load_rules": {
            "name": "load_rules",
            "location": 286,
            "return": [],
            "arguments": {
                "postfix": []
            }
        },
        "sql_value_placeholders": {
            "name": "sql_value_placeholders",
            "location": 311,
            "return": [],
            "arguments": {
                "n": []
            }
        },
        "derive_insert_select": {
            "name": "derive_insert_select",
            "location": 315,
            "return": [],
            "arguments": {
                "table_definition": []
            }
        },
        "derive_insert_columns": {
            "name": "derive_insert_columns",
            "location": 341,
            "return": [],
            "arguments": {
                "table_definition": []
            }
        },
        "determine_cols": {
            "name": "determine_cols",
            "location": 360,
            "return": [],
            "arguments": {
                "values": []
            }
        },
        "insert": {
            "name": "insert",
            "location": 390,
            "return": [],
            "arguments": {
                "table": [],
                "values": [],
                "overwrite": [],
                "select": [],
                "columns": [],
                "dryrun": []
            }
        },
        "do_insert": {
            "name": "do_insert",
            "location": 404,
            "return": [],
            "arguments": {
                "table": [],
                "values": [],
                "overwrite": [],
                "select": [],
                "columns": [],
                "dryrun": []
            }
        },
        "insert_alerts": {
            "name": "insert_alerts",
            "location": 450,
            "return": [],
            "arguments": {
                "alerts": [],
                "ctx": []
            }
        },
        "insert_violations_query_run": {
            "name": "insert_violations_query_run",
            "location": 495,
            "return": [],
            "arguments": {
                "query_name": [],
                "ctx": []
            }
        },
        "dict_to_sql": {
            "name": "dict_to_sql",
            "location": 517,
            "return": [],
            "arguments": {
                "d": [],
                "indent": []
            }
        },
        "value_to_sql": {
            "name": "value_to_sql",
            "location": 533,
            "return": [],
            "arguments": {
                "v": []
            }
        },
        "get_alerts": {
            "name": "get_alerts",
            "location": 550,
            "return": [],
            "arguments": {}
        },
        "record_metadata": {
            "name": "record_metadata",
            "location": 556,
            "return": [],
            "arguments": {
                "metadata": [],
                "table": [],
                "e": []
            }
        },
        "record_failed_ingestion": {
            "name": "record_failed_ingestion",
            "location": 601,
            "return": [],
            "arguments": {
                "table": [],
                "r": [],
                "timestamp": []
            }
        },
        "get_pipes": {
            "name": "get_pipes",
            "location": 615,
            "return": [],
            "arguments": {
                "schema": []
            }
        },
        "create_table_and_upload_csv": {
            "name": "create_table_and_upload_csv",
            "location": 619,
            "return": [],
            "arguments": {
                "name": [],
                "columns": [],
                "file_path": [],
                "file_format": [],
                "ifnotexists": []
            }
        },
        "copy_file_to_table_stage": {
            "name": "copy_file_to_table_stage",
            "location": 628,
            "return": [],
            "arguments": {
                "table_name": [],
                "file_path": []
            }
        },
        "load_from_table_stage": {
            "name": "load_from_table_stage",
            "location": 632,
            "return": [],
            "arguments": {
                "table_name": []
            }
        },
        "create_stage": {
            "name": "create_stage",
            "location": 636,
            "return": [],
            "arguments": {
                "name": [],
                "url": [],
                "prefix": [],
                "cloud": [],
                "credentials": [],
                "file_format": [],
                "replace": [],
                "comment": [],
                "temporary": []
            }
        },
        "create_table": {
            "name": "create_table",
            "location": 673,
            "return": [],
            "arguments": {
                "name": [],
                "cols": [],
                "replace": [],
                "comment": [],
                "ifnotexists": [],
                "rw_role": [],
                "stage_file_format": [],
                "stage_copy_options": []
            }
        },
        "create_external_table": {
            "name": "create_external_table",
            "location": 704,
            "return": [],
            "arguments": {
                "name": [],
                "location": [],
                "cols": [],
                "partition": [],
                "refresh": [],
                "replace": [],
                "file_format": [],
                "comment": [],
                "ifnotexists": [],
                "copygrants": []
            }
        },
        "create_stream": {
            "name": "create_stream",
            "location": 733,
            "return": [],
            "arguments": {
                "name": [],
                "target": [],
                "replace": [],
                "comment": []
            }
        },
        "create_pipe": {
            "name": "create_pipe",
            "location": 740,
            "return": [],
            "arguments": {
                "name": [],
                "sql": [],
                "replace": [],
                "autoingest": [],
                "comment": []
            }
        },
        "create_task": {
            "name": "create_task",
            "location": 748,
            "return": [],
            "arguments": {
                "name": [],
                "schedule": [],
                "warehouse": [],
                "sql": [],
                "replace": [],
                "comment": [],
                "auto_resume": []
            }
        },
        "create_stored_procedure": {
            "name": "create_stored_procedure",
            "location": 762,
            "return": [],
            "arguments": {
                "name": [],
                "args": [],
                "return_type": [],
                "executor": [],
                "definition": [],
                "replace": [],
                "comment": []
            }
        },
        "connect.connect": {
            "name": "connect",
            "location": 127,
            "return": [],
            "arguments": {}
        },
        "TypeOptions.__init__": {
            "name": "__init__",
            "location": 259,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TypeOptions.__str__": {
            "name": "__str__",
            "location": 262,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "derive_insert_select.get_col_transformation": {
            "name": "get_col_transformation",
            "location": 318,
            "return": [],
            "arguments": {
                "idx": [],
                "col": []
            }
        },
        "derive_insert_columns.filter_auto_populating_cols": {
            "name": "filter_auto_populating_cols",
            "location": 344,
            "return": [],
            "arguments": {
                "col": []
            }
        },
        "fetch.parse_field": {
            "name": "parse_field",
            "location": 180,
            "return": [],
            "arguments": {
                "value": [],
                "field_type": []
            }
        }
    },
    "SnowAlert-master/src/runners/helpers/dbconfig.py": {
        "random_string": {
            "name": "random_string",
            "location": 8,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "n": [
                    "int",
                    "float"
                ],
                "alphabet": [
                    "int",
                    "float"
                ]
            }
        },
        "format_p8_from_key": {
            "name": "format_p8_from_key",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bytes"
                ],
                "encrypted": [
                    "str",
                    "Type",
                    "int"
                ]
            }
        }
    },
    "SnowAlert-master/src/runners/helpers/dbconnect.py": {
        "newer_open_new": {
            "name": "newer_open_new",
            "location": 7,
            "return": [
                "bool"
            ],
            "arguments": {
                "url": [
                    "bool",
                    "str",
                    "MutableMapping",
                    "Type['Declared']",
                    "dict"
                ]
            }
        },
        "snowflake_connect": {
            "name": "snowflake_connect",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "BetterSocket.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BetterSocket.close": {
            "name": "close",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BetterSocket.bind": {
            "name": "bind",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "address": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "SnowAlert-master/src/runners/helpers/exception_tracker.py": {
        "ExceptionTracker.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ExceptionTracker.notify": {
            "name": "notify",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "SnowAlert-master/src/runners/helpers/log.py": {
        "write": {
            "name": "write",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "debug": {
            "name": "debug",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "info": {
            "name": "info",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "error": {
            "name": "error",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "fatal": {
            "name": "fatal",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "metric": {
            "name": "metric",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "metric": [
                    "int",
                    "str",
                    "datetime.timedelta",
                    "datetime.datetime"
                ],
                "namespace": [
                    "int",
                    "str",
                    "datetime.timedelta",
                    "datetime.datetime"
                ],
                "dimensions": [
                    "int",
                    "str",
                    "datetime.timedelta",
                    "datetime.datetime"
                ],
                "value": [
                    "int",
                    "str",
                    "datetime.timedelta",
                    "datetime.datetime"
                ]
            }
        },
        "write.fmt": {
            "name": "fmt",
            "location": 20,
            "return": [
                "str",
                "bool",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "fs": [
                    "str",
                    "IO[bytes]",
                    "Mapping",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "SnowAlert-master/src/runners/helpers/vault.py": {
        "decrypt_if_encrypted": {
            "name": "decrypt_if_encrypted",
            "location": 16,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "ct": [
                    "int",
                    "Optional[float]",
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "envar": [
                    "str",
                    "dict"
                ]
            }
        },
        "encrypt": {
            "name": "encrypt",
            "location": 59,
            "return": [
                "bytes",
                "Union[bytes, bytearray]",
                "str"
            ],
            "arguments": {
                "pt": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "SnowAlert-master/src/runners/helpers/__init__.py": {},
    "SnowAlert-master/src/runners/tests/db.py": {
        "test_db_derive_insert_select": {
            "name": "test_db_derive_insert_select",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_db_derive_insert_columns": {
            "name": "test_db_derive_insert_columns",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "SnowAlert-master/src/runners/tests/run_alerts.py": {
        "sample_alert_rules": {
            "name": "sample_alert_rules",
            "location": 144,
            "return": [],
            "arguments": {
                "db_schemas": []
            }
        },
        "update_jira_issue_status_done": {
            "name": "update_jira_issue_status_done",
            "location": 173,
            "return": [],
            "arguments": {
                "request": []
            }
        },
        "assert_dict_is_subset": {
            "name": "assert_dict_is_subset",
            "location": 189,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "assert_dict_has_subset": {
            "name": "assert_dict_has_subset",
            "location": 195,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_alert_runners_processor_and_dispatcher": {
            "name": "test_alert_runners_processor_and_dispatcher",
            "location": 201,
            "return": [],
            "arguments": {
                "sample_alert_rules": [],
                "update_jira_issue_status_done": [],
                "delete_results": []
            }
        },
        "update_jira_issue_status_done.fin": {
            "name": "fin",
            "location": 177,
            "return": [],
            "arguments": {}
        },
        "update_jira_issue_status_done.mark_done": {
            "name": "mark_done",
            "location": 183,
            "return": [],
            "arguments": {
                "jira_id": []
            }
        }
    },
    "SnowAlert-master/src/runners/tests/run_violations.py": {
        "json_like_snowflake": {
            "name": "json_like_snowflake",
            "location": 70,
            "return": [
                "str"
            ],
            "arguments": {
                "o": [
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "dict",
                    "db.models.taxon.FillDataLevel"
                ]
            }
        },
        "json_like_connector": {
            "name": "json_like_connector",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "o": [
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "dict",
                    "db.models.taxon.FillDataLevel"
                ]
            }
        },
        "violation_queries": {
            "name": "violation_queries",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "db_schemas": [
                    "id3c.db.session.DatabaseSession",
                    "int"
                ]
            }
        },
        "test_violation_tags_in_rule_tags_view": {
            "name": "test_violation_tags_in_rule_tags_view",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "violation_queries": [
                    "str"
                ]
            }
        },
        "test_run_violations": {
            "name": "test_run_violations",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "violation_queries": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_schemas": {
            "name": "test_schemas",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {
                "db_schemas": [
                    "bool",
                    "id3c.db.session.DatabaseSession"
                ]
            }
        }
    },
    "SnowAlert-master/src/runners/tests/regression/SP1099_missing_jira_env_vars.py": {
        "sample_alert_rule": {
            "name": "sample_alert_rule",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "db_schemas": [
                    "bool"
                ]
            }
        },
        "without_jira_vars": {
            "name": "without_jira_vars",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_missing_jira_env_regression": {
            "name": "test_missing_jira_env_regression",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "sample_alert_rule": [
                    "bool",
                    "List[str]",
                    "List[Tuple[str, Any]]",
                    "int",
                    "Callable"
                ],
                "without_jira_vars": [
                    "bool",
                    "List[str]",
                    "List[Tuple[str, Any]]",
                    "int",
                    "Callable"
                ],
                "delete_results": [
                    "bool",
                    "List[str]",
                    "List[Tuple[str, Any]]",
                    "int",
                    "Callable"
                ]
            }
        }
    },
    "SnowAlert-master/src/runners/tests/regression/SP1288_snowflake_url_parsing.py": {
        "test_url_parsing": {
            "name": "test_url_parsing",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "SnowAlert-master/src/runners/tests/regression/SP1513_correlating_array_actions.py": {
        "sample_alert_rules": {
            "name": "sample_alert_rules",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "db_schemas": [
                    "bool"
                ]
            }
        },
        "test_correlating_array_actions": {
            "name": "test_correlating_array_actions",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "sample_alert_rules": [
                    "bool",
                    "List[str]",
                    "int"
                ],
                "delete_results": [
                    "bool",
                    "List[str]",
                    "int"
                ]
            }
        }
    },
    "SnowAlert-master/src/runners/tests/unit/service_now_handler.py": {
        "with_oauth_envar": {
            "name": "with_oauth_envar",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_handler_simpleauth": {
            "name": "test_handler_simpleauth",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_handler_oauth": {
            "name": "test_handler_oauth",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "with_oauth_envar": [
                    "str",
                    "tests.async_mock.MagicMock",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "SnowAlert-master/src/sars/run.py": {
        "pull_aws_data": {
            "name": "pull_aws_data",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "grab_osquery_details": {
            "name": "grab_osquery_details",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "deployments": [
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "query_snowflake": {
            "name": "query_snowflake",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "query": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "init": {
            "name": "init",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "l": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "SnowAlert-master/src/sars/writeBack.py": {},
    "SnowAlert-master/src/scripts/install.py": {
        "read_queries": {
            "name": "read_queries",
            "location": 39,
            "return": [],
            "arguments": {
                "file": [],
                "tmpl_vars": []
            }
        },
        "parse_snowflake_url": {
            "name": "parse_snowflake_url",
            "location": 144,
            "return": [],
            "arguments": {
                "url": []
            }
        },
        "login": {
            "name": "login",
            "location": 165,
            "return": [],
            "arguments": {
                "configuration": []
            }
        },
        "load_aws_config": {
            "name": "load_aws_config",
            "location": 265,
            "return": [],
            "arguments": {}
        },
        "setup_warehouse_and_db": {
            "name": "setup_warehouse_and_db",
            "location": 277,
            "return": [],
            "arguments": {
                "do_attempt": []
            }
        },
        "setup_schemas_and_tables": {
            "name": "setup_schemas_and_tables",
            "location": 282,
            "return": [],
            "arguments": {
                "do_attempt": [],
                "database": []
            }
        },
        "setup_user_and_role": {
            "name": "setup_user_and_role",
            "location": 290,
            "return": [],
            "arguments": {
                "do_attempt": []
            }
        },
        "find_share_db_name": {
            "name": "find_share_db_name",
            "location": 306,
            "return": [],
            "arguments": {
                "do_attempt": []
            }
        },
        "setup_samples": {
            "name": "setup_samples",
            "location": 327,
            "return": [],
            "arguments": {
                "do_attempt": [],
                "share_db_name": []
            }
        },
        "jira_integration": {
            "name": "jira_integration",
            "location": 338,
            "return": [],
            "arguments": {
                "setup_jira": []
            }
        },
        "genrsa": {
            "name": "genrsa",
            "location": 370,
            "return": [],
            "arguments": {
                "passwd": []
            }
        },
        "setup_authentication": {
            "name": "setup_authentication",
            "location": 394,
            "return": [],
            "arguments": {
                "jira_password": [],
                "region": [],
                "pk_passphrase": []
            }
        },
        "gen_envs": {
            "name": "gen_envs",
            "location": 431,
            "return": [],
            "arguments": {
                "jira_user": [],
                "jira_project": [],
                "jira_url": [],
                "jira_password": [],
                "account": [],
                "region": [],
                "private_key": [],
                "pk_passphrase": [],
                "aws_key": [],
                "aws_secret": []
            }
        },
        "do_kms_encrypt": {
            "name": "do_kms_encrypt",
            "location": 472,
            "return": [],
            "arguments": {
                "kms": []
            }
        },
        "main": {
            "name": "main",
            "location": 494,
            "return": [],
            "arguments": {
                "admin_role": [],
                "samples": [],
                "_samples": [],
                "pk_passphrase": [],
                "jira": [],
                "config_account": [],
                "config_region": [],
                "config_port": [],
                "config_protocol": [],
                "config_username": [],
                "config_password": [],
                "connection_name": [],
                "uninstall": [],
                "set_env_vars": [],
                "verbose": []
            }
        },
        "login.attempt": {
            "name": "attempt",
            "location": 235,
            "return": [],
            "arguments": {
                "message": [],
                "todo": [],
                "fail_silently": []
            }
        }
    },
    "SnowAlert-master/src/scripts/jira_bulk_changes.py": {
        "connect_jira": {
            "name": "connect_jira",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "close_all_tickets": {
            "name": "close_all_tickets",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "jira_api": [
                    "bool",
                    "dict",
                    "bytes",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "SnowAlert-master/src/scripts/jira_bulk_done.py": {
        "connect_jira": {
            "name": "connect_jira",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "find_issues": {
            "name": "find_issues",
            "location": 32,
            "return": [
                "List[Callable]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "query": [
                    "str",
                    "jgikbase.idmapping.core.user.AuthsourceID"
                ]
            }
        },
        "transition_issues_to_done": {
            "name": "transition_issues_to_done",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "query": [
                    "str",
                    "bool",
                    "Optional[Callable]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "query": [
                    "str",
                    "Optional[int]"
                ]
            }
        }
    },
    "SnowAlert-master/src/scripts/list_ec2_instances.py": {
        "os_touch": {
            "name": "os_touch",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "file": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "convert_dt": {
            "name": "convert_dt",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "dt": [
                    "datetime.datetime",
                    "datetime.date"
                ]
            }
        },
        "write_to_firehose": {
            "name": "write_to_firehose",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "firehose_client": [
                    "str",
                    "Optional[str]",
                    "Union[Sequence[str], Sequence[int]]"
                ],
                "stream_name": [
                    "str",
                    "Optional[str]",
                    "Union[Sequence[str], Sequence[int]]"
                ],
                "instances": [
                    "str",
                    "List[str]",
                    "Union[str, List[str]]"
                ],
                "snapshot_at": [
                    "str",
                    "int",
                    "bool",
                    "Union[int, str]",
                    "Callable"
                ]
            }
        },
        "get_ec2_client": {
            "name": "get_ec2_client",
            "location": 64,
            "return": [
                "dict"
            ],
            "arguments": {
                "parent_arn": [
                    "str",
                    "dict",
                    "bool",
                    "Optional[Mapping[str, str]]",
                    "Mapping[str, Any]"
                ],
                "child_arn": [
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ],
                "child_session_name": [
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ],
                "aws_service": [
                    "str",
                    "Dict[str, Any]",
                    "bytes",
                    "dict"
                ],
                "aws_region": [
                    "str",
                    "Dict[str, Any]",
                    "bytes",
                    "dict"
                ]
            }
        },
        "get_service_client": {
            "name": "get_service_client",
            "location": 105,
            "return": [
                "dict"
            ],
            "arguments": {
                "arn": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "session_name": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "aws_service": [
                    "str",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "aws_region": [
                    "str",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "worker": {
            "name": "worker",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "thread_num": [
                    "str",
                    "Iterable[str]"
                ],
                "firehose_client": [
                    "str",
                    "float",
                    "bool"
                ],
                "snapshot_at": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "SnowAlert-master/src/scripts/__init__.py": {},
    "SnowAlert-master/src/webui/backend/setup.py": {},
    "SnowAlert-master/src/webui/backend/__init__.py": {},
    "SnowAlert-master/src/webui/backend/webui/app.py": {
        "clear_cache": {
            "name": "clear_cache",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "bool"
                ]
            }
        },
        "error_handler": {
            "name": "error_handler",
            "location": 55,
            "return": [
                "Callable[[Union, Union], Tuple[Any, ...],]",
                "Callable"
            ],
            "arguments": {
                "ex": [
                    "str",
                    "bool",
                    "List[object]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "SAJSONEncoder.default": {
            "name": "default",
            "location": 20,
            "return": [
                "Callable[[Mapping], T]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "SAFlask.json_encoder": {
            "name": "json_encoder",
            "location": 25,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SAFlask.get_send_file_max_age": {
            "name": "get_send_file_max_age",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "tuple"
                ]
            }
        }
    },
    "SnowAlert-master/src/webui/backend/webui/config.py": {},
    "SnowAlert-master/src/webui/backend/webui/gunicorn_conf.py": {
        "post_fork": {
            "name": "post_fork",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "server": [
                    "str",
                    "Exception",
                    "bool"
                ],
                "worker": [
                    "IO[str]"
                ]
            }
        }
    },
    "SnowAlert-master/src/webui/backend/webui/views.py": {
        "index": {
            "name": "index",
            "location": 12,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {}
        },
        "serve_resources": {
            "name": "serve_resources",
            "location": 17,
            "return": [
                "dict",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        }
    },
    "SnowAlert-master/src/webui/backend/webui/__init__.py": {},
    "SnowAlert-master/src/webui/backend/webui/api/data.py": {
        "cache_oauth_connection": {
            "name": "cache_oauth_connection",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "jsonified": {
            "name": "jsonified",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "get_data": {
            "name": "get_data",
            "location": 53,
            "return": [
                "int",
                "bytes",
                "str"
            ],
            "arguments": {}
        },
        "post_connector": {
            "name": "post_connector",
            "location": 60,
            "return": [
                "bool"
            ],
            "arguments": {
                "connector": [
                    "str",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "dict"
                ]
            }
        },
        "post_connector_finalize": {
            "name": "post_connector_finalize",
            "location": 105,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "connector": [
                    "str"
                ],
                "name": [
                    "str",
                    "Iterable[Any]"
                ]
            }
        },
        "post_connector_test": {
            "name": "post_connector_test",
            "location": 113,
            "return": [
                "str",
                "Tuple[Any, Any, Any]",
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "connector": [
                    "str",
                    "dict",
                    "Optional[Sequence[str]]"
                ],
                "name": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "create_baseline": {
            "name": "create_baseline",
            "location": 121,
            "return": [
                "bool"
            ],
            "arguments": {
                "baseline": [
                    "str",
                    "Exception",
                    "dict"
                ]
            }
        },
        "cache_oauth_connection.wrapper": {
            "name": "wrapper",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "jsonified.wrapper": {
            "name": "wrapper",
            "location": 36,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {}
        }
    },
    "SnowAlert-master/src/webui/backend/webui/api/oauth.py": {
        "oauth_redirect": {
            "name": "oauth_redirect",
            "location": 23,
            "return": [
                "Optional[Dict]",
                "str",
                "Dict[str, Any]",
                "Mapping[str, Any]"
            ],
            "arguments": {}
        },
        "oauth_return": {
            "name": "oauth_return",
            "location": 52,
            "return": [
                "List[str]",
                "int",
                "Optional[str]",
                "dict",
                "bytes"
            ],
            "arguments": {}
        }
    },
    "SnowAlert-master/src/webui/backend/webui/api/rules.py": {
        "unindent": {
            "name": "unindent",
            "location": 20,
            "return": [
                "str",
                "Dict[str, int]",
                "int",
                "OrderedDict",
                "DefaultDict[int, List[Any]]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "get_rules": {
            "name": "get_rules",
            "location": 27,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "create_rule": {
            "name": "create_rule",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "delete_rule": {
            "name": "delete_rule",
            "location": 122,
            "return": [
                "bool",
                "Union[str, Pattern]"
            ],
            "arguments": {}
        },
        "rename_rule": {
            "name": "rename_rule",
            "location": 152,
            "return": [
                "bool"
            ],
            "arguments": {}
        }
    },
    "SnowAlert-master/src/webui/backend/webui/api/__init__.py": {}
}
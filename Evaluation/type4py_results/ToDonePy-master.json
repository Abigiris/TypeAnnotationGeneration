{
    "ToDonePy-master/docs/source/conf.py": {},
    "ToDonePy-master/tests/conftest.py": {
        "doctest_filer_example": {
            "name": "doctest_filer_example",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "doctest_namespace": [
                    "pathlib.Path",
                    "str",
                    "Dict[str, str]",
                    "Optional[Pattern[str]]"
                ],
                "tmp_path": [
                    "pathlib.Path",
                    "str",
                    "Dict[str, str]",
                    "Optional[Pattern[str]]"
                ]
            }
        },
        "tmp_file": {
            "name": "tmp_file",
            "location": 29,
            "return": [
                "pathlib.Path",
                "str",
                "bool"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "list",
                    "Iterable[str]"
                ]
            }
        }
    },
    "ToDonePy-master/tests/test_do.py": {
        "test_to_do": {
            "name": "test_to_do",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "sort": [
                    "str",
                    "helpers.filer.Filer"
                ],
                "expected": [
                    "str",
                    "TextIO",
                    "IO",
                    "bool"
                ],
                "tmp_file": [
                    "helpers.filer.Filer",
                    "str",
                    "ValueError"
                ],
                "capsys": [
                    "str",
                    "List[str]",
                    "type",
                    "bool",
                    "Callable"
                ]
            }
        }
    },
    "ToDonePy-master/tests/test_doing.py": {
        "test_to_doing": {
            "name": "test_to_doing",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "sort": [
                    "str",
                    "helpers.filer.Filer"
                ],
                "expected": [
                    "str",
                    "List[str]"
                ],
                "tmp_file": [
                    "helpers.filer.Filer",
                    "str",
                    "Callable"
                ],
                "capsys": [
                    "str",
                    "List[str]",
                    "type",
                    "bool",
                    "Callable"
                ]
            }
        },
        "test_to_doing_custom_file_edit_flag": {
            "name": "test_to_doing_custom_file_edit_flag",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_file": [
                    "helpers.filer.Filer",
                    "str"
                ],
                "capsys": [
                    "bool",
                    "str"
                ]
            }
        },
        "test_to_doing_custom_file_graphic_flag": {
            "name": "test_to_doing_custom_file_graphic_flag",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_file": [
                    "helpers.filer.Filer",
                    "str"
                ],
                "capsys": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "ToDonePy-master/tests/test_done.py": {
        "test_to_done": {
            "name": "test_to_done",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_file": [
                    "helpers.filer.Filer",
                    "str"
                ],
                "capsys": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "ToDonePy-master/tests/test_external_command.py": {
        "test_ec_successful": {
            "name": "test_ec_successful",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ec_OSError": {
            "name": "test_ec_OSError",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_ec_ProcessError": {
            "name": "test_ec_ProcessError",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ToDonePy-master/tests/test_filer.py": {
        "test_Filer_create": {
            "name": "test_Filer_create",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "path.Path",
                    "bool",
                    "pypi2nix.path.Path"
                ],
                "create": [
                    "pathlib.Path",
                    "path.Path",
                    "bool",
                    "pypi2nix.path.Path"
                ],
                "expected": [
                    "List[List[Any]]",
                    "str",
                    "bool",
                    "List[bytes]",
                    "pathlib.Path"
                ]
            }
        },
        "test_Filer_read_existing_file": {
            "name": "test_Filer_read_existing_file",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_file": [
                    "helpers.filer.Filer",
                    "str",
                    "TextIO"
                ]
            }
        },
        "test_Filer_write_existing_file": {
            "name": "test_Filer_write_existing_file",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_file": [
                    "helpers.filer.Filer"
                ]
            }
        },
        "test_Filer_append_existing_file": {
            "name": "test_Filer_append_existing_file",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_file": [
                    "helpers.filer.Filer",
                    "list"
                ]
            }
        },
        "test_Filer_write_col_error": {
            "name": "test_Filer_write_col_error",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_file": [
                    "helpers.filer.Filer",
                    "pathlib.Path",
                    "pypi2nix.path.Path",
                    "bool"
                ]
            }
        },
        "test_Filer_sort_existing_file": {
            "name": "test_Filer_sort_existing_file",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_file": [
                    "helpers.filer.Filer",
                    "str",
                    "bytes",
                    "Tuple[str, str, str]",
                    "pathlib.Path"
                ],
                "header": [
                    "bool",
                    "str",
                    "helpers.filer.Filer"
                ],
                "expected": [
                    "List[List[str]]",
                    "str",
                    "dict",
                    "helpers.filer.Filer",
                    "bool",
                    "List[List[Any]]"
                ]
            }
        },
        "test_Filer_delete_existing_file": {
            "name": "test_Filer_delete_existing_file",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_file": [
                    "helpers.filer.Filer",
                    "bytes",
                    "pathlib.Path",
                    "pypi2nix.path.Path",
                    "Dict[str, Sequence[str]]",
                    "str",
                    "Tuple[int, int]"
                ],
                "to_del": [
                    "str",
                    "Callable",
                    "path.Path",
                    "bool",
                    "Optional[str]",
                    "pypi2nix.path.Path"
                ],
                "expected": [
                    "List[List[str]]",
                    "str",
                    "dict",
                    "helpers.filer.Filer",
                    "bool",
                    "List[List[Any]]",
                    "IO[bytes]"
                ]
            }
        }
    },
    "ToDonePy-master/tests/test_itemsetter.py": {
        "test_itemsetter": {
            "name": "test_itemsetter",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "ToDonePy-master/tests/__init__.py": {},
    "ToDonePy-master/todonepy/__init__.py": {
        "to": {
            "name": "to",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "ToDonePy-master/todonepy/commands/to.py": {},
    "ToDonePy-master/todonepy/commands/__init__.py": {},
    "ToDonePy-master/todonepy/helpers/external_command.py": {
        "external_command": {
            "name": "external_command",
            "location": 6,
            "return": [
                "int",
                "dict",
                "bool",
                "str",
                "tuple"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "ToDonePy-master/todonepy/helpers/filer.py": {
        "Filer.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Union[pathlib.Path, str]",
                    "Optional[str]",
                    "Sequence[str]",
                    "pathlib.Path",
                    "IO[bytes]"
                ],
                "create": [
                    "bool",
                    "int",
                    "str"
                ],
                "delimiter": [
                    "int",
                    "Iterator[int]",
                    "bool",
                    "Tuple[int]",
                    "float",
                    "str"
                ]
            }
        },
        "Filer.append": {
            "name": "append",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rows": [
                    "int",
                    "List[Dict]",
                    "Dict[str, str]",
                    "List[T]",
                    "List[str]"
                ]
            }
        },
        "Filer.delete": {
            "name": "delete",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "contains": [
                    "str",
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "Filer.read": {
            "name": "read",
            "location": 130,
            "return": [
                "str",
                "list",
                "Sequence[str]",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Filer.sort": {
            "name": "sort",
            "location": 159,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "cols": [
                    "List[int]",
                    "List[dict]",
                    "List[str]",
                    "Union[str, List[str]]",
                    "dict"
                ],
                "header": [
                    "bool",
                    "bytes",
                    "Mapping[str, Optional[float]]",
                    "List[Tuple[bytes, bytes]]"
                ]
            }
        },
        "Filer.write": {
            "name": "write",
            "location": 193,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rows": [
                    "int",
                    "List[Dict]",
                    "Dict[str, str]",
                    "List[T]",
                    "List[str]"
                ]
            }
        },
        "Filer.write_col": {
            "name": "write_col",
            "location": 224,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "col": [
                    "int",
                    "List[int]",
                    "List[Tuple[int, int]]"
                ],
                "index": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "ToDonePy-master/todonepy/helpers/itemsetter.py": {
        "itemsetter": {
            "name": "itemsetter",
            "location": 4,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "itemsetter.g": {
            "name": "g",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "obj": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, int]"
                ]
            }
        }
    },
    "ToDonePy-master/todonepy/helpers/__init__.py": {},
    "ToDonePy-master/todonepy/subcommands/do.py": {
        "do": {
            "name": "do",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "ToDonePy-master/todonepy/subcommands/doing.py": {
        "doing": {
            "name": "doing",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "ToDonePy-master/todonepy/subcommands/done.py": {
        "done": {
            "name": "done",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "ToDonePy-master/todonepy/subcommands/__init__.py": {}
}
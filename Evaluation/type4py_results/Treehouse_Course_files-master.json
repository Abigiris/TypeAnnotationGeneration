{
    "Treehouse_Course_files-master/prototype.py": {},
    "Treehouse_Course_files-master/classes/book.py": {
        "Book.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "title": [
                    "int",
                    "bool",
                    "float"
                ],
                "author": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Book.__str__": {
            "name": "__str__",
            "location": 6,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Bookcase.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "books": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Bookcase.crete_bookcase": {
            "name": "crete_bookcase",
            "location": 15,
            "return": [
                "Dict[str, Any]",
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "cls": [
                    "Pattern",
                    "str",
                    "int",
                    "List[int]"
                ],
                "book_list": [
                    "List[str]",
                    "Type",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "Treehouse_Course_files-master/classes/circle.py": {
        "Circle.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "diameter": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Circle.radius": {
            "name": "radius",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "radius": [
                    "int",
                    "List[int]",
                    "float"
                ]
            }
        }
    },
    "Treehouse_Course_files-master/classes/classes_training.py": {
        "Person.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "first": [
                    "int",
                    "Callable",
                    "List[List[int]]"
                ],
                "last": [
                    "int",
                    "Callable",
                    "List[List[int]]"
                ],
                "age": [
                    "int",
                    "Callable",
                    "List[List[int]]"
                ]
            }
        },
        "Person.email": {
            "name": "email",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.__str__": {
            "name": "__str__",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.__repr__": {
            "name": "__repr__",
            "location": 14,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.from_string": {
            "name": "from_string",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "person_str": [
                    "str"
                ]
            }
        },
        "Person.fullname": {
            "name": "fullname",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.add_year": {
            "name": "add_year",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Shooter.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "first": [
                    "str",
                    "int",
                    "bool"
                ],
                "last": [
                    "str",
                    "int",
                    "bool"
                ],
                "age": [
                    "str",
                    "int",
                    "bool"
                ],
                "weapon_type": [
                    "bool",
                    "AsyncContextManager[None]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "Shooter.__str__": {
            "name": "__str__",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shooter.__repr__": {
            "name": "__repr__",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trainer.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "first": [
                    "int",
                    "bool"
                ],
                "last": [
                    "int",
                    "bool"
                ],
                "age": [
                    "int",
                    "bool"
                ],
                "shooters": [
                    "int",
                    "Optional[Type[Any]]",
                    "Optional[int]",
                    "Optional[str]",
                    "float",
                    "bool",
                    "Optional[Callable[[str], bool]]"
                ]
            }
        },
        "Trainer.__str__": {
            "name": "__str__",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trainer.__repr__": {
            "name": "__repr__",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Trainer.add_trainer": {
            "name": "add_trainer",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "shooter": []
            }
        },
        "Trainer.remove_trainer": {
            "name": "remove_trainer",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "shooter": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Trainer.print_trainer": {
            "name": "print_trainer",
            "location": 76,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Treehouse_Course_files-master/classes/morse.py": {
        "Letter.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "pattern": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Letter.__iter__": {
            "name": "__iter__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Letter.__str__": {
            "name": "__str__",
            "location": 8,
            "return": [
                "str",
                "List[int]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Letter.from_string": {
            "name": "from_string",
            "location": 18,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "Callable",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "int"
                ],
                "message_text": [
                    "str"
                ]
            }
        },
        "S.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Treehouse_Course_files-master/classes/protected.py": {
        "Protected.__method": {
            "name": "__method",
            "location": 4,
            "return": [
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Treehouse_Course_files-master/databases/students.py": {
        "add_students": {
            "name": "add_students",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "top_student": {
            "name": "top_student",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "Treehouse_Course_files-master/date_time/date_time_proto.py": {
        "to_timezone": {
            "name": "to_timezone",
            "location": 185,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "time_zone_name": [
                    "str"
                ]
            }
        }
    },
    "Treehouse_Course_files-master/date_time/meetings.py": {
        "create_timezone_list": {
            "name": "create_timezone_list",
            "location": 6,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[Callable]"
            ],
            "arguments": {}
        }
    },
    "Treehouse_Course_files-master/date_time/questions.py": {
        "Add.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "num1": [
                    "List[List[int]]",
                    "int",
                    "list",
                    "List[int]",
                    "str",
                    "List[Dict[str, Any]]",
                    "bool"
                ],
                "num2": [
                    "List[List[int]]",
                    "int",
                    "list",
                    "List[int]",
                    "str",
                    "List[Dict[str, Any]]",
                    "bool"
                ]
            }
        },
        "Multiply.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "num1": [
                    "List[List[int]]",
                    "int",
                    "list",
                    "List[int]",
                    "str",
                    "List[Dict[str, Any]]",
                    "bool"
                ],
                "num2": [
                    "List[List[int]]",
                    "int",
                    "list",
                    "List[int]",
                    "str",
                    "List[Dict[str, Any]]",
                    "bool"
                ]
            }
        }
    },
    "Treehouse_Course_files-master/date_time/quiz.py": {
        "Quiz.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Quiz.take_quiz": {
            "name": "take_quiz",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Quiz.ask": {
            "name": "ask",
            "location": 30,
            "return": [
                "Tuple[Tuple[int, Any]]"
            ],
            "arguments": {
                "self": [],
                "question": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "Quiz.total_correct": {
            "name": "total_correct",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Quiz.summary": {
            "name": "summary",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Treehouse_Course_files-master/date_time/wiki.py": {},
    "Treehouse_Course_files-master/diary/diary.py": {
        "clear_screen": {
            "name": "clear_screen",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "initialize": {
            "name": "initialize",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "menu_loop": {
            "name": "menu_loop",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "add_entry": {
            "name": "add_entry",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "view_entries": {
            "name": "view_entries",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "search_query": [
                    "int",
                    "bytes",
                    "Optional[float]",
                    "List[str]",
                    "Optional[bool]",
                    "float"
                ]
            }
        },
        "search_entries": {
            "name": "search_entries",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "delete_entry": {
            "name": "delete_entry",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "entry": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "Treehouse_Course_files-master/dictionaries/luggage.py": {
        "packer": {
            "name": "packer",
            "location": 1,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "unpacker": {
            "name": "unpacker",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "first_name": [
                    "str",
                    "Tuple[str]",
                    "Set[str]"
                ],
                "last_name": [
                    "str",
                    "Tuple[str]",
                    "Set[str]"
                ]
            }
        }
    },
    "Treehouse_Course_files-master/file_processing/art.py": {},
    "Treehouse_Course_files-master/file_processing/read_csv.py": {},
    "Treehouse_Course_files-master/file_processing/remember.py": {
        "rememberer": {
            "name": "rememberer",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "thing": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "show": {
            "name": "show",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "Treehouse_Course_files-master/file_processing/teachers.py": {},
    "Treehouse_Course_files-master/lists/disemvowel.py": {
        "disemvowel": {
            "name": "disemvowel",
            "location": 1,
            "return": [
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "word": [
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "Treehouse_Course_files-master/lists/shopping_list_3.py": {
        "clear_screen": {
            "name": "clear_screen",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "show_help": {
            "name": "show_help",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "add_to_list": {
            "name": "add_to_list",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "item": [
                    "str",
                    "bool"
                ]
            }
        },
        "show_list": {
            "name": "show_list",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "remove_from_list": {
            "name": "remove_from_list",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "Treehouse_Course_files-master/lists/vending_machine.py": {},
    "Treehouse_Course_files-master/regular_expressions/proto.py": {
        "Person.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.__str__": {
            "name": "__str__",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Person.construct": {
            "name": "construct",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Tuple[str]",
                    "Union[str, int]",
                    "int"
                ],
                "list": [
                    "dict",
                    "Tuple[str]",
                    "Union[str, int]",
                    "int"
                ],
                "expr": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Type"
                ],
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Type"
                ]
            }
        },
        "AdressBook.search": {
            "name": "search",
            "location": 64,
            "return": [
                "dict",
                "str",
                "bool",
                "set"
            ],
            "arguments": {
                "self": [],
                "term": [
                    "Optional[str]",
                    "str",
                    "dict",
                    "MutableMapping"
                ]
            }
        }
    },
    "Treehouse_Course_files-master/sets/dungeon_game.py": {
        "clear_screen": {
            "name": "clear_screen",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "get_location": {
            "name": "get_location",
            "location": 18,
            "return": [
                "List[List[int]]",
                "str",
                "Callable"
            ],
            "arguments": {}
        },
        "move_player": {
            "name": "move_player",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "player": [
                    "int",
                    "list",
                    "str"
                ],
                "move": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "get_moves": {
            "name": "get_moves",
            "location": 36,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "player": [
                    "str",
                    "int"
                ]
            }
        },
        "draw_map": {
            "name": "draw_map",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "player": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "Treehouse_Course_files-master/sets/out_of_this_word.py": {
        "clear_screen": {
            "name": "clear_screen",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "prompt_for_words": {
            "name": "prompt_for_words",
            "location": 16,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "challenge": [
                    "str",
                    "bytes"
                ]
            }
        },
        "output_results": {
            "name": "output_results",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "results": [
                    "Optional[List[str]]"
                ]
            }
        },
        "statistics": {
            "name": "statistics",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "words_player1": [
                    "Collection[int]",
                    "int",
                    "float",
                    "List[List[int]]"
                ],
                "words_player2": [
                    "Collection[int]",
                    "int",
                    "float",
                    "List[List[int]]"
                ]
            }
        }
    },
    "Treehouse_Course_files-master/sets/sets.py": {
        "covers": {
            "name": "covers",
            "location": 46,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "covers_all": {
            "name": "covers_all",
            "location": 54,
            "return": [
                "str",
                "Optional[str]",
                "Set[str]"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "list",
                    "str"
                ]
            }
        }
    },
    "Treehouse_Course_files-master/testing/dd_game.py": {
        "clear": {
            "name": "clear",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "build_cells": {
            "name": "build_cells",
            "location": 22,
            "return": [
                "bool"
            ],
            "arguments": {
                "width": [
                    "int",
                    "Union[str, float]"
                ],
                "height": [
                    "int",
                    "Union[str, float]"
                ]
            }
        },
        "get_locations": {
            "name": "get_locations",
            "location": 44,
            "return": [
                "List[List[int]]",
                "str",
                "Callable"
            ],
            "arguments": {
                "cells": [
                    "int"
                ]
            }
        },
        "get_moves": {
            "name": "get_moves",
            "location": 71,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "player": [
                    "str",
                    "int"
                ]
            }
        },
        "move_player": {
            "name": "move_player",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "player": [
                    "float",
                    "Iterable[int]",
                    "Union[int, float]",
                    "int"
                ],
                "move": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "draw_map": {
            "name": "draw_map",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "play": {
            "name": "play",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "Treehouse_Course_files-master/testing/dice.py": {
        "Die.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sides": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Die.roll": {
            "name": "roll",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Die.__int__": {
            "name": "__int__",
            "location": 22,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Die.__repr__": {
            "name": "__repr__",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Die.__add__": {
            "name": "__add__",
            "location": 28,
            "return": [
                "bool",
                "Optional[int]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "List[str]",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "str"
                ]
            }
        },
        "Die.__radd__": {
            "name": "__radd__",
            "location": 31,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "Die.__eq__": {
            "name": "__eq__",
            "location": 34,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Roll.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "description": [
                    "str"
                ]
            }
        },
        "Roll.__int__": {
            "name": "__int__",
            "location": 56,
            "return": [
                "List[int]",
                "Dict[str, int]",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Roll.__repr__": {
            "name": "__repr__",
            "location": 59,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Roll.__add__": {
            "name": "__add__",
            "location": 62,
            "return": [
                "bool",
                "Optional[int]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "List[str]",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "str"
                ]
            }
        },
        "Roll.__radd__": {
            "name": "__radd__",
            "location": 65,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "Roll.__contains__": {
            "name": "__contains__",
            "location": 68,
            "return": [
                "Tuple[int]",
                "tuple",
                "Sequence['cirq.Qid']",
                "bool",
                "List[float]",
                "List[Tuple]",
                "list"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "T",
                    "Iterable[Any]",
                    "dict",
                    "int",
                    "list"
                ]
            }
        },
        "Roll.__getitem__": {
            "name": "__getitem__",
            "location": 71,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "index": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "Treehouse_Course_files-master/testing/game.py": {
        "Game.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "player": [
                    "int",
                    "bool",
                    "float"
                ],
                "rounds": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Game._convert_move": {
            "name": "_convert_move",
            "location": 14,
            "return": [
                "str",
                "List[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "move": [
                    "bytes",
                    "str",
                    "int"
                ]
            }
        },
        "Game.summary": {
            "name": "summary",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "title": [
                    "str",
                    "int",
                    "list"
                ]
            }
        },
        "Game.get_move": {
            "name": "get_move",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "move": [
                    "str",
                    "Dict[str, Any]",
                    "bytes"
                ]
            }
        },
        "Game.game_round": {
            "name": "game_round",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.game_over": {
            "name": "game_over",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Treehouse_Course_files-master/testing/moves.py": {
        "Move.__gt__": {
            "name": "__gt__",
            "location": 5,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "T",
                    "int"
                ]
            }
        },
        "Move.__lt__": {
            "name": "__lt__",
            "location": 10,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "T",
                    "int"
                ]
            }
        },
        "Move.__eq__": {
            "name": "__eq__",
            "location": 15,
            "return": [
                "Type",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        },
        "Move.__ne__": {
            "name": "__ne__",
            "location": 20,
            "return": [
                "Type",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Optional[\"Cell\"]"
                ]
            }
        }
    },
    "Treehouse_Course_files-master/testing/tests.py": {
        "MoveTests.setUp": {
            "name": "setUp",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MoveTests.test_five_plus_five": {
            "name": "test_five_plus_five",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MoveTests.test_one_plus_one": {
            "name": "test_one_plus_one",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MoveTests.test_equal": {
            "name": "test_equal",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MoveTests.test_not_equal": {
            "name": "test_not_equal",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MoveTests.test_rock_better_than_scissors": {
            "name": "test_rock_better_than_scissors",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MoveTests.test_paper_worse_than_scissors": {
            "name": "test_paper_worse_than_scissors",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Treehouse_Course_files-master/testing/tests_dice.py": {
        "DieTests.setUp": {
            "name": "setUp",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DieTests.test_creation": {
            "name": "test_creation",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DieTests.test_add": {
            "name": "test_add",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DieTests.test_bad_sides": {
            "name": "test_bad_sides",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RollTests.setUp": {
            "name": "setUp",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RollTests.test_lower": {
            "name": "test_lower",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RollTests.test_upper": {
            "name": "test_upper",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RollTests.test_membership": {
            "name": "test_membership",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RollTests.test_bad_description": {
            "name": "test_bad_description",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RollTests.test_small_die": {
            "name": "test_small_die",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RollTests.test_adding": {
            "name": "test_adding",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Treehouse_Course_files-master/testing/__init__.py": {},
    "Treehouse_Course_files-master/tuples/tuples.py": {
        "combo": {
            "name": "combo",
            "location": 25,
            "return": [
                "str",
                "bool",
                "Sequence[Sequence[str]]",
                "List[bytes]",
                "Optional[str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "data1": [
                    "int",
                    "bytes",
                    "bool"
                ],
                "data2": [
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        }
    },
    "Treehouse_Course_files-master/yatzy/dice.py": {
        "Die.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "sides": [
                    "List[float]",
                    "Optional[int]",
                    "list"
                ],
                "value": [
                    "list",
                    "str",
                    "List[List[Any]]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "Die.__int__": {
            "name": "__int__",
            "location": 12,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Die.__eq__": {
            "name": "__eq__",
            "location": 15,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "Die.__ne__": {
            "name": "__ne__",
            "location": 18,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "Die.__gt__": {
            "name": "__gt__",
            "location": 21,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "Die.__lt__": {
            "name": "__lt__",
            "location": 24,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "Die.__ge__": {
            "name": "__ge__",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsInt",
                    "Any"
                ]
            }
        },
        "Die.__le__": {
            "name": "__le__",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "SupportsInt",
                    "Any"
                ]
            }
        },
        "Die.__add__": {
            "name": "__add__",
            "location": 33,
            "return": [
                "bool",
                "Optional[int]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "List[str]",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]",
                    "str"
                ]
            }
        },
        "Die.__radd__": {
            "name": "__radd__",
            "location": 36,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        },
        "Die.__repr__": {
            "name": "__repr__",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "D6.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "sides": [
                    "int"
                ],
                "value": [
                    "int"
                ]
            }
        },
        "D6.sides": {
            "name": "sides",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Treehouse_Course_files-master/yatzy/hands.py": {
        "Hand.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "size": [
                    "Optional[str]",
                    "int",
                    "float",
                    "Optional[\"Node\"]",
                    "Hashable",
                    "bool"
                ],
                "die_class": [
                    "Optional[str]",
                    "int",
                    "float",
                    "Optional[\"Node\"]",
                    "Hashable",
                    "bool"
                ]
            }
        },
        "Hand._by_value": {
            "name": "_by_value",
            "location": 14,
            "return": [
                "int",
                "str",
                "Tuple[int, int]",
                "Tuple[str, int]",
                "T",
                "float"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Iterable[Any]",
                    "bytes",
                    "Iterable[str]"
                ]
            }
        },
        "YatzyHand.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "bool",
                "BaseException",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "YatzyHand.ones": {
            "name": "ones",
            "location": 28,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "YatzyHand.twos": {
            "name": "twos",
            "location": 32,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "YatzyHand.threes": {
            "name": "threes",
            "location": 36,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "YatzyHand.fours": {
            "name": "fours",
            "location": 40,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "YatzyHand.fives": {
            "name": "fives",
            "location": 44,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "YatzyHand.sixes": {
            "name": "sixes",
            "location": 48,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "YatzyHand._sets": {
            "name": "_sets",
            "location": 52,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Treehouse_Course_files-master/yatzy/review.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "Treehouse_Course_files-master/yatzy/scoresheets.py": {
        "YatzyScoresheet.score_ones": {
            "name": "score_ones",
            "location": 2,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "hand": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "YatzyScoresheet.score_twos": {
            "name": "score_twos",
            "location": 5,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "hand": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "YatzyScoresheet.score_threes": {
            "name": "score_threes",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "hand": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "YatzyScoresheet.score_fours": {
            "name": "score_fours",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "hand": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "YatzyScoresheet.score_fives": {
            "name": "score_fives",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "hand": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "YatzyScoresheet.score_sixes": {
            "name": "score_sixes",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "hand": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "YatzyScoresheet._score_set": {
            "name": "_score_set",
            "location": 20,
            "return": [
                "str",
                "bool",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "hand": [
                    "List[Dict[str, Any]]",
                    "Set[str]",
                    "str",
                    "Optional[str]",
                    "dict",
                    "int",
                    "tuple"
                ],
                "set_size": [
                    "int",
                    "List[int]",
                    "Callable[[str, str], float]"
                ]
            }
        },
        "YatzyScoresheet._score_straights": {
            "name": "_score_straights",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "hand": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "YatzyScoresheet.score_one_pair": {
            "name": "score_one_pair",
            "location": 36,
            "return": [
                "str",
                "Set[str]",
                "bool",
                "int",
                "set"
            ],
            "arguments": {
                "self": [],
                "hand": [
                    "T",
                    "int",
                    "Iterable[T]",
                    "str"
                ]
            }
        },
        "YatzyScoresheet.score_two_pairs": {
            "name": "score_two_pairs",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "hand": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "type",
                    "Mapping[Any, Any]",
                    "Set[str]",
                    "Optional[str]",
                    "Dict[str, str]"
                ],
                "set_size": [
                    "int"
                ]
            }
        },
        "YatzyScoresheet.score_small_straight": {
            "name": "score_small_straight",
            "location": 46,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "hand": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "YatzyScoresheet.score_large_straight": {
            "name": "score_large_straight",
            "location": 49,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "hand": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "YatzyScoresheet.score_four_of_a_kind": {
            "name": "score_four_of_a_kind",
            "location": 52,
            "return": [
                "Set[str]",
                "set",
                "Optional[Dict]",
                "str"
            ],
            "arguments": {
                "self": [],
                "hand": [
                    "T",
                    "Iterable[str]",
                    "str",
                    "int"
                ]
            }
        },
        "YatzyScoresheet.score_three_of_a_kind": {
            "name": "score_three_of_a_kind",
            "location": 55,
            "return": [
                "Set[str]",
                "set",
                "Optional[Dict]",
                "str"
            ],
            "arguments": {
                "self": [],
                "hand": [
                    "T",
                    "Iterable[str]",
                    "str",
                    "int"
                ]
            }
        },
        "YatzyScoresheet.score_chance": {
            "name": "score_chance",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "hand": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "YatzyScoresheet.score_full_house": {
            "name": "score_full_house",
            "location": 61,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "hand": [
                    "list",
                    "Awaitable"
                ]
            }
        },
        "YatzyScoresheet.score_yatzy": {
            "name": "score_yatzy",
            "location": 66,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "hand": [
                    "str",
                    "Optional[bool]",
                    "Optional[int]",
                    "List[str]",
                    "int",
                    "dict"
                ]
            }
        }
    },
    "Treehouse_Course_files-master/yatzy/tests/test_dice.py": {
        "DiceTests.test_die": {
            "name": "test_die",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DiceTests.test_die_value": {
            "name": "test_die_value",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DiceTests.test_d6": {
            "name": "test_d6",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DiceTests.test_d6_value": {
            "name": "test_d6_value",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "Treehouse_Course_files-master/yatzy/tests/test_hands.py": {
        "DiceTests.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DiceTests._seed": {
            "name": "_seed",
            "location": 15,
            "return": [
                "Iterator[Collection[T]]",
                "Dict[int, int]",
                "Set[int]",
                "List[str]",
                "list",
                "int",
                "List[List[str]]"
            ],
            "arguments": {
                "self": [],
                "nums": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "HandTests.test_hand": {
            "name": "test_hand",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HandTests.test_hand_sort": {
            "name": "test_hand_sort",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ScoresheetTests.setUp": {
            "name": "setUp",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ScoresheetTests.test_ones": {
            "name": "test_ones",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ScoresheetTests.test_twos": {
            "name": "test_twos",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ScoresheetTests.test_threes": {
            "name": "test_threes",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ScoresheetTests.test_fours": {
            "name": "test_fours",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ScoresheetTests.test_fives": {
            "name": "test_fives",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ScoresheetTests.test_sixes": {
            "name": "test_sixes",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ScoresheetTests.test_one_pair": {
            "name": "test_one_pair",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ScoresheetTests.test_one_pair_no_pairs": {
            "name": "test_one_pair_no_pairs",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ScoresheetTests.test_two_pairs": {
            "name": "test_two_pairs",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ScoresheetTests.test_two_pairs_no_pairs": {
            "name": "test_two_pairs_no_pairs",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ScoresheetTests.test_two_pairs_one_pair": {
            "name": "test_two_pairs_one_pair",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ScoresheetTests.test_three_of_a_kind": {
            "name": "test_three_of_a_kind",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ScoresheetTests.test_four_of_a_kind": {
            "name": "test_four_of_a_kind",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ScoresheetTests.test_yatzy": {
            "name": "test_yatzy",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ScoresheetTests.test_small_straight": {
            "name": "test_small_straight",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ScoresheetTests.test_large_straight": {
            "name": "test_large_straight",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ScoresheetTests.test_full_house": {
            "name": "test_full_house",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ScoresheetTests.test_chance": {
            "name": "test_chance",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
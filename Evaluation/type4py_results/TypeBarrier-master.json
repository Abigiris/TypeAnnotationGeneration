{
    "TypeBarrier-master/setup.py": {},
    "TypeBarrier-master/scripts/runner.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                "str",
                "tuple",
                "\"Pipeline\""
            ],
            "arguments": {}
        }
    },
    "TypeBarrier-master/scripts/setup.py": {},
    "TypeBarrier-master/typebarrier/codegen.py": {
        "esq": {
            "name": "esq",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "whatevs": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "convert_dictionary_to_kwargs": {
            "name": "convert_dictionary_to_kwargs",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "code": [
                    "list",
                    "str",
                    "Dict[str, Union[Any, str]]",
                    "Dict[str, Any]",
                    "Tuple[int]"
                ],
                "target": [
                    "str",
                    "int",
                    "Iterable[str]",
                    "Optional[Mapping[str, Any]]",
                    "Optional[str]"
                ],
                "arg_var": [
                    "str",
                    "Callable"
                ]
            }
        },
        "convert_list_to_kwargs": {
            "name": "convert_list_to_kwargs",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "code": [
                    "str",
                    "Optional[List[str]]",
                    "dict"
                ],
                "target": [
                    "str",
                    "bool",
                    "Callable[[str, Any], None]"
                ],
                "arg_var": [
                    "str",
                    "bool",
                    "Callable[[str, Any], None]"
                ]
            }
        },
        "_convert_dictionary_to_target": {
            "name": "_convert_dictionary_to_target",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "code": [
                    "str",
                    "dict"
                ],
                "target": [
                    "str"
                ],
                "arg_var": [
                    "str"
                ]
            }
        },
        "convert_list": {
            "name": "convert_list",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "code": [
                    "str",
                    "dict"
                ],
                "target": [
                    "str",
                    "Optional[str]"
                ],
                "arg_var": [
                    "str",
                    "dict"
                ]
            }
        },
        "convert_dictionary": {
            "name": "convert_dictionary",
            "location": 322,
            "return": [
                "None"
            ],
            "arguments": {
                "code": [
                    "str"
                ],
                "target": [
                    "str",
                    "int",
                    "Optional[Any]",
                    "dict",
                    "Dict[str, Any]"
                ],
                "arg_var": [
                    "str"
                ]
            }
        },
        "convert_value": {
            "name": "convert_value",
            "location": 374,
            "return": [
                "str",
                "Dict[str, Any]",
                "dict",
                "Callable"
            ],
            "arguments": {
                "code": [
                    "str"
                ],
                "target": [
                    "str",
                    "int"
                ],
                "arg_var": [
                    "str"
                ]
            }
        },
        "CodeGen.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeGen.dedent": {
            "name": "dedent",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeGen.indent": {
            "name": "indent",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeGen.inject_closure_var": {
            "name": "inject_closure_var",
            "location": 31,
            "return": [],
            "arguments": {
                "self": [],
                "var": []
            }
        },
        "CodeGen.make_var": {
            "name": "make_var",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeGen.add_line": {
            "name": "add_line",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str",
                    "bytes"
                ]
            }
        },
        "CodeGen.add_lines": {
            "name": "add_lines",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "List[str]",
                    "str",
                    "bool",
                    "Iterable[str]",
                    "tuple"
                ]
            }
        },
        "CodeGen.add_return": {
            "name": "add_return",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "expr": [
                    "str",
                    "Dict[str, str]",
                    "BaseException"
                ]
            }
        },
        "CodeGen.start_inline_func": {
            "name": "start_inline_func",
            "location": 60,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Type[Any]"
            ],
            "arguments": {
                "self": [],
                "return_var": [
                    "int",
                    "List[List[Any]]",
                    "Dict[str, bool]",
                    "list"
                ]
            }
        },
        "CodeGen.end_inline_func": {
            "name": "end_inline_func",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeGen.render": {
            "name": "render",
            "location": 75,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CodeGen.namespace": {
            "name": "namespace",
            "location": 79,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "TypeBarrier-master/typebarrier/dynamic.py": {
        "convert_dictionary_to_kwargs": {
            "name": "convert_dictionary_to_kwargs",
            "location": 14,
            "return": [
                "List[str]",
                "Tuple[int, Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "target": [
                    "str",
                    "int"
                ],
                "value": [
                    "dict",
                    "Iterable[T]",
                    "OrderedDict"
                ]
            }
        },
        "convert_list_to_kwargs": {
            "name": "convert_list_to_kwargs",
            "location": 57,
            "return": [
                "Dict[str, Any]",
                "dict",
                "set",
                "list"
            ],
            "arguments": {
                "target": [
                    "int",
                    "T",
                    "KT",
                    "List[Set[str]]",
                    "Type"
                ],
                "value": []
            }
        },
        "convert_list": {
            "name": "convert_list",
            "location": 101,
            "return": [
                "Set[str]",
                "str",
                "object",
                "set",
                "list"
            ],
            "arguments": {
                "target": [
                    "str",
                    "Sequence[str]",
                    "type",
                    "Callable"
                ],
                "value": [
                    "list",
                    "str",
                    "bool",
                    "Union[None, str, bytes]",
                    "T",
                    "dict"
                ]
            }
        },
        "convert_dictionary": {
            "name": "convert_dictionary",
            "location": 117,
            "return": [
                "bool",
                "Union[type, Tuple[type, ...]]",
                "int",
                "Dict[str, Any]",
                "type"
            ],
            "arguments": {
                "target": [
                    "str",
                    "dict",
                    "bool"
                ],
                "value": [
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Union[bytes, str]",
                    "int",
                    "str"
                ]
            }
        },
        "convert_value": {
            "name": "convert_value",
            "location": 137,
            "return": [
                "bool",
                "Optional[List[int]]",
                "int",
                "float",
                "List[str]",
                "Optional[int]"
            ],
            "arguments": {
                "target": [
                    "Callable[..., None]",
                    "list",
                    "Optional[str]",
                    "Optional[List]"
                ],
                "value": [
                    "float",
                    "int",
                    "Iterable"
                ]
            }
        }
    },
    "TypeBarrier-master/typebarrier/inline.py": {
        "convert_dictionary_to_kwargs": {
            "name": "convert_dictionary_to_kwargs",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {
                "target": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "dict",
                    "Mapping[str, Any]"
                ]
            }
        },
        "convert_list": {
            "name": "convert_list",
            "location": 27,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "target": [
                    "str",
                    "tuple"
                ]
            }
        },
        "convert_value": {
            "name": "convert_value",
            "location": 76,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "target": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "dict"
                ]
            }
        }
    },
    "TypeBarrier-master/typebarrier/__init__.py": {},
    "TypeBarrier-master/typebarrier/tests/test_dynamic.py": {
        "everything": {
            "name": "everything",
            "location": 36,
            "return": [
                "Optional[int]",
                "Optional[bool]"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[[T], bool]",
                    "float"
                ]
            }
        },
        "test_primitives_str": {
            "name": "test_primitives_str",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "cnv": []
            }
        },
        "test_primitives_int": {
            "name": "test_primitives_int",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "cnv": []
            }
        },
        "test_primitives_bool": {
            "name": "test_primitives_bool",
            "location": 200,
            "return": [
                ""
            ],
            "arguments": {
                "cnv": []
            }
        },
        "test_primitives_raises": {
            "name": "test_primitives_raises",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {
                "cnv": [
                    "Iterable[Any]"
                ]
            }
        },
        "test_list_1": {
            "name": "test_list_1",
            "location": 214,
            "return": [
                ""
            ],
            "arguments": {
                "cnv": [
                    "str"
                ]
            }
        },
        "test_list_2": {
            "name": "test_list_2",
            "location": 220,
            "return": [
                ""
            ],
            "arguments": {
                "cnv": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "test_list_3": {
            "name": "test_list_3",
            "location": 226,
            "return": [
                ""
            ],
            "arguments": {
                "cnv": [
                    "str"
                ]
            }
        },
        "test_list_4": {
            "name": "test_list_4",
            "location": 232,
            "return": [
                ""
            ],
            "arguments": {
                "cnv": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "test_list_failures": {
            "name": "test_list_failures",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "cnv": [
                    "bytes",
                    "str"
                ]
            }
        },
        "test_dictionary": {
            "name": "test_dictionary",
            "location": 255,
            "return": [
                ""
            ],
            "arguments": {
                "cnv": []
            }
        },
        "test_dictionary_type": {
            "name": "test_dictionary_type",
            "location": 261,
            "return": [
                ""
            ],
            "arguments": {
                "cnv": []
            }
        },
        "test_dictionary_failures": {
            "name": "test_dictionary_failures",
            "location": 267,
            "return": [
                ""
            ],
            "arguments": {
                "cnv": [
                    "str"
                ]
            }
        },
        "test_new_type": {
            "name": "test_new_type",
            "location": 285,
            "return": [
                ""
            ],
            "arguments": {
                "cnv": [
                    "bool",
                    "str",
                    "Iterable",
                    "List[str]"
                ]
            }
        },
        "test_invalid_conversions": {
            "name": "test_invalid_conversions",
            "location": 291,
            "return": [
                ""
            ],
            "arguments": {
                "cnv": [
                    "str",
                    "int",
                    "Dict[str, float]"
                ]
            }
        },
        "test_single_arg_func": {
            "name": "test_single_arg_func",
            "location": 302,
            "return": [
                ""
            ],
            "arguments": {
                "cnv": []
            }
        },
        "test_single_arg_func_from_wrong_type_fails": {
            "name": "test_single_arg_func_from_wrong_type_fails",
            "location": 312,
            "return": [
                ""
            ],
            "arguments": {
                "cnv": [
                    "int",
                    "str"
                ]
            }
        },
        "test_single_arg_class_init": {
            "name": "test_single_arg_class_init",
            "location": 325,
            "return": [
                ""
            ],
            "arguments": {
                "cnv": []
            }
        },
        "test_single_arg_class_init_from_wrong_type_fails": {
            "name": "test_single_arg_class_init_from_wrong_type_fails",
            "location": 332,
            "return": [
                ""
            ],
            "arguments": {
                "cnv": [
                    "str"
                ]
            }
        },
        "test_two_arg_func": {
            "name": "test_two_arg_func",
            "location": 346,
            "return": [
                ""
            ],
            "arguments": {
                "cnv": [
                    "Type",
                    "int"
                ]
            }
        },
        "test_convert_list_to_kwargs": {
            "name": "test_convert_list_to_kwargs",
            "location": 357,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_convert_list_arg_1": {
            "name": "test_convert_list_arg_1",
            "location": 407,
            "return": [
                ""
            ],
            "arguments": {
                "cnv": []
            }
        },
        "test_convert_list_arg_2": {
            "name": "test_convert_list_arg_2",
            "location": 416,
            "return": [
                ""
            ],
            "arguments": {
                "cnv": []
            }
        },
        "test_convert_list_arg_3": {
            "name": "test_convert_list_arg_3",
            "location": 427,
            "return": [
                ""
            ],
            "arguments": {
                "cnv": []
            }
        },
        "test_convert_list_arg_unhappy": {
            "name": "test_convert_list_arg_unhappy",
            "location": 436,
            "return": [
                ""
            ],
            "arguments": {
                "cnv": [
                    "int",
                    "Iterable[Iterable[Any]]"
                ]
            }
        },
        "test_convert_list_arg_to_type_when_possible": {
            "name": "test_convert_list_arg_to_type_when_possible",
            "location": 452,
            "return": [
                ""
            ],
            "arguments": {
                "cnv": [
                    "int"
                ]
            }
        },
        "test_convert_to_dict_of_dicts": {
            "name": "test_convert_to_dict_of_dicts",
            "location": 509,
            "return": [
                ""
            ],
            "arguments": {
                "cnv": [
                    "Callable"
                ]
            }
        },
        "test_convert_dictionary_to_kwargs": {
            "name": "test_convert_dictionary_to_kwargs",
            "location": 531,
            "return": [
                ""
            ],
            "arguments": {
                "cnv": [
                    "str"
                ]
            }
        },
        "test_convert_dict_to_class": {
            "name": "test_convert_dict_to_class",
            "location": 593,
            "return": [
                ""
            ],
            "arguments": {
                "cnv": [
                    "dict",
                    "bool"
                ]
            }
        },
        "DynamicCall.convert_value": {
            "name": "convert_value",
            "location": 13,
            "return": [
                "int",
                "Union[int, Tuple[int, ...]]",
                "Optional[int]",
                "tuple"
            ],
            "arguments": {
                "target": [
                    "Type",
                    "int",
                    "float"
                ],
                "value": [
                    "Type",
                    "int",
                    "float"
                ]
            }
        },
        "DynamicCall.convert_dictionary_to_kwargs": {
            "name": "convert_dictionary_to_kwargs",
            "location": 18,
            "return": [
                "Dict[str, int]",
                "int",
                "str"
            ],
            "arguments": {
                "target": [
                    "Type",
                    "str",
                    "int",
                    "Union[str, int, float]",
                    "float"
                ],
                "value": [
                    "Type",
                    "str",
                    "int",
                    "Union[str, int, float]",
                    "float"
                ]
            }
        },
        "InlineCall.convert_value": {
            "name": "convert_value",
            "location": 26,
            "return": [
                "int",
                "Union[int, Tuple[int, ...]]",
                "Optional[int]",
                "tuple"
            ],
            "arguments": {
                "target": [
                    "Type",
                    "int",
                    "float"
                ],
                "value": [
                    "Type",
                    "int",
                    "float"
                ]
            }
        },
        "InlineCall.convert_dictionary_to_kwargs": {
            "name": "convert_dictionary_to_kwargs",
            "location": 31,
            "return": [
                "Dict[str, int]",
                "int",
                "str"
            ],
            "arguments": {
                "target": [
                    "Type",
                    "str",
                    "int",
                    "Union[str, int, float]",
                    "float"
                ],
                "value": [
                    "Type",
                    "str",
                    "int",
                    "Union[str, int, float]",
                    "float"
                ]
            }
        },
        "DynamicProxyBM.__init__": {
            "name": "__init__",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "benchmark": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DynamicProxyBM.convert_value": {
            "name": "convert_value",
            "location": 45,
            "return": [
                "str",
                "Dict[str, Any]",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Type",
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "DynamicProxyBM.convert_dictionary_to_kwargs": {
            "name": "convert_dictionary_to_kwargs",
            "location": 53,
            "return": [
                "Type",
                "int"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Type",
                    "bool",
                    "List[Tuple[int, int, str]]",
                    "IO[str]"
                ]
            }
        },
        "InlineProxyBM.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "benchmark": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "InlineProxyBM.convert_value": {
            "name": "convert_value",
            "location": 68,
            "return": [
                "str",
                "Dict[str, Any]",
                "float",
                "int"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Type",
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "InlineProxyBM.convert_dictionary_to_kwargs": {
            "name": "convert_dictionary_to_kwargs",
            "location": 78,
            "return": [
                "Type",
                "int"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "Type",
                    "bool",
                    "List[Tuple[int, int, str]]",
                    "IO[str]"
                ]
            }
        },
        "DynamicProxy.convert_value": {
            "name": "convert_value",
            "location": 92,
            "return": [
                "int",
                "Optional[int]",
                "Union[int, Tuple[int, ...]]",
                "str"
            ],
            "arguments": {
                "target": [
                    "Type",
                    "bool",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "DynamicProxy.convert_dictionary_to_kwargs": {
            "name": "convert_dictionary_to_kwargs",
            "location": 96,
            "return": [
                "Dict[str, int]",
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "target": [
                    "Type",
                    "dict",
                    "int",
                    "bool"
                ]
            }
        },
        "InlineProxy.convert_value": {
            "name": "convert_value",
            "location": 104,
            "return": [
                "dict",
                "Dict[Tuple[str, str], Tuple[float, float]]",
                "int",
                "str"
            ],
            "arguments": {
                "target": [
                    "Type",
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "InlineProxy.convert_dictionary_to_kwargs": {
            "name": "convert_dictionary_to_kwargs",
            "location": 108,
            "return": [
                "str"
            ],
            "arguments": {
                "target": [
                    "Type",
                    "int"
                ]
            }
        },
        "do_both": {
            "name": "do_both",
            "location": 124,
            "return": [
                "Dict[str, Dict[str, int]]",
                "str",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ]
            }
        },
        "Guid.__init__": {
            "name": "__init__",
            "location": 142,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "Guid.__eq__": {
            "name": "__eq__",
            "location": 145,
            "return": [
                "Optional[int]",
                "bool",
                "Optional[bool]",
                "int",
                "Optional[List[Any]]",
                "str",
                "Tuple[float, float]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Guid.__hash__": {
            "name": "__hash__",
            "location": 148,
            "return": [
                "int",
                "Optional[int]",
                "bool",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Track.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "Track.__hash__": {
            "name": "__hash__",
            "location": 156,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Track.__eq__": {
            "name": "__eq__",
            "location": 159,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "T"
                ]
            }
        },
        "Track.__repr__": {
            "name": "__repr__",
            "location": 162,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Disc.__init__": {
            "name": "__init__",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tracks": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Disc.__eq__": {
            "name": "__eq__",
            "location": 173,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "Disc.__repr__": {
            "name": "__repr__",
            "location": 176,
            "return": [
                "str",
                "int",
                "tuple",
                "List[str]",
                "list",
                "Union[List[str], str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "test_invalid_conversions.some_func": {
            "name": "some_func",
            "location": 292,
            "return": [],
            "arguments": {}
        },
        "test_single_arg_func.some_func": {
            "name": "some_func",
            "location": 304,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "test_single_arg_func_from_wrong_type_fails.some_func": {
            "name": "some_func",
            "location": 314,
            "return": [],
            "arguments": {
                "i": []
            }
        },
        "test_two_arg_func.some_func": {
            "name": "some_func",
            "location": 348,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_convert_list_to_kwargs.func": {
            "name": "func",
            "location": 360,
            "return": [],
            "arguments": {
                "a": [],
                "b": []
            }
        },
        "test_convert_list_to_kwargs.func2": {
            "name": "func2",
            "location": 365,
            "return": [],
            "arguments": {
                "a": [],
                "b": [],
                "c": []
            }
        },
        "test_convert_list_to_kwargs.func3": {
            "name": "func3",
            "location": 382,
            "return": [],
            "arguments": {}
        },
        "test_convert_list_to_kwargs.func4": {
            "name": "func4",
            "location": 389,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "test_convert_list_to_kwargs.func0": {
            "name": "func0",
            "location": 400,
            "return": [],
            "arguments": {}
        },
        "test_convert_list_arg_1.some_func": {
            "name": "some_func",
            "location": 408,
            "return": [],
            "arguments": {
                "s_list": []
            }
        },
        "test_convert_list_arg_2.some_func": {
            "name": "some_func",
            "location": 417,
            "return": [],
            "arguments": {
                "s_list": []
            }
        },
        "test_convert_list_arg_3.some_func": {
            "name": "some_func",
            "location": 428,
            "return": [],
            "arguments": {
                "s_list": []
            }
        },
        "test_convert_list_arg_unhappy.some_func": {
            "name": "some_func",
            "location": 437,
            "return": [],
            "arguments": {
                "s_list": []
            }
        },
        "test_convert_list_arg_to_type_when_possible.some_func": {
            "name": "some_func",
            "location": 453,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "g_list": [
                    "List[float]",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "TestConvertToListOfLists.test_convert_to_typed_list": {
            "name": "test_convert_to_typed_list",
            "location": 478,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cnv": []
            }
        },
        "TestConvertToListOfLists.test_convert_to_list_of_typed_list": {
            "name": "test_convert_to_list_of_typed_list",
            "location": 490,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cnv": [
                    "Dict[str, Any]"
                ]
            }
        },
        "test_convert_dictionary_to_kwargs.func": {
            "name": "func",
            "location": 533,
            "return": [
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str",
                    "float"
                ],
                "b": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "test_convert_dictionary_to_kwargs.func2": {
            "name": "func2",
            "location": 539,
            "return": [
                "str"
            ],
            "arguments": {
                "a": [
                    "int",
                    "bool",
                    "str"
                ],
                "b": [
                    "int",
                    "bool",
                    "str"
                ],
                "c": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "test_convert_dictionary_to_kwargs.func3": {
            "name": "func3",
            "location": 557,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "test_convert_dictionary_to_kwargs.func3_kwargs": {
            "name": "func3_kwargs",
            "location": 564,
            "return": [
                "Dict[str, Any]",
                "Dict[int, Dict[int, int]]",
                "dict"
            ],
            "arguments": {}
        },
        "test_convert_dictionary_to_kwargs.func4_str_kwargs": {
            "name": "func4_str_kwargs",
            "location": 571,
            "return": [
                "str",
                "Dict[str, str]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {}
        },
        "test_convert_dictionary_to_kwargs.func0": {
            "name": "func0",
            "location": 586,
            "return": [
                "Exception",
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "DynamicProxyBM.convert_value.cb": {
            "name": "cb",
            "location": 46,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "DynamicProxyBM.convert_dictionary_to_kwargs.cb": {
            "name": "cb",
            "location": 54,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "value": [
                    "float",
                    "bool",
                    "int"
                ]
            }
        },
        "InlineProxyBM.convert_value.cb": {
            "name": "cb",
            "location": 71,
            "return": [],
            "arguments": {
                "value": []
            }
        },
        "InlineProxyBM.convert_dictionary_to_kwargs.cb": {
            "name": "cb",
            "location": 81,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Union[bool, str]",
                    "bool",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "do_both.new_func": {
            "name": "new_func",
            "location": 126,
            "return": [
                "bool",
                "list",
                "List[Dict[str, Any]]",
                "Dict[str, Any]",
                "float",
                "Mapping[str, str]"
            ],
            "arguments": {
                "cnv": [
                    "int",
                    "str",
                    "List[List[Any]]",
                    "List[\"Block\"]"
                ]
            }
        },
        "test_single_arg_class_init_from_wrong_type_fails.Guid.__init__": {
            "name": "__init__",
            "location": 335,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        }
    },
    "TypeBarrier-master/typebarrier/tests/test_inline.py": {
        "test_convert_list": {
            "name": "test_convert_list",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_noop": {
            "name": "test_noop",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_one_param_callable": {
            "name": "test_one_param_callable",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_one_param_callable.func": {
            "name": "func",
            "location": 24,
            "return": [
                "float",
                "List[str]"
            ],
            "arguments": {
                "a": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        }
    }
}
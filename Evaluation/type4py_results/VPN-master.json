{
    "VPN-master/manage.py": {
        "main": {
            "name": "main",
            "location": 7,
            "return": [],
            "arguments": {}
        }
    },
    "VPN-master/main/admin.py": {},
    "VPN-master/main/apps.py": {},
    "VPN-master/main/models.py": {
        "Company.__str__": {
            "name": "__str__",
            "location": 8,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.__str__": {
            "name": "__str__",
            "location": 18,
            "return": [
                "str",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": []
            }
        },
        "Transfer.__str__": {
            "name": "__str__",
            "location": 28,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "VPN-master/main/serializers.py": {
        "CompanySerializer.get_DT_RowID": {
            "name": "get_DT_RowID",
            "location": 11,
            "return": [
                "List[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "company": [
                    "bytes",
                    "str",
                    "int",
                    "list",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "CompanySerializer.get_DT_RowAttr": {
            "name": "get_DT_RowAttr",
            "location": 14,
            "return": [
                "dict",
                "str",
                "Callable",
                "Dict[str, float]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "transfer": [
                    "str",
                    "bytes",
                    "list",
                    "bool",
                    "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]"
                ]
            }
        },
        "UserSerializer.get_DT_RowID": {
            "name": "get_DT_RowID",
            "location": 29,
            "return": [
                "User",
                "Type",
                "amundsen_application.models.user.User",
                "zerver.models.UserProfile",
                "Dict[str, Any]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "models.User",
                    "user.transfer.models.User",
                    "flask_appbuilder.security.sqla.models.User",
                    "bob_emploi.frontend.api.user_pb2.User",
                    "tracim.models.auth.User",
                    "zerver.models.UserProfile",
                    "users.models.JustfixUser",
                    "bool"
                ]
            }
        },
        "UserSerializer.get_DT_RowAttr": {
            "name": "get_DT_RowAttr",
            "location": 32,
            "return": [
                "Iterable[models.Entry]",
                "str",
                "IO",
                "Iterable",
                "dict",
                "bytes",
                "django.db.models.Model"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "models.User",
                    "zerver.models.UserProfile",
                    "flask_appbuilder.security.sqla.models.User",
                    "user.transfer.models.User",
                    "bob_emploi.frontend.api.user_pb2.User",
                    "tracim.models.auth.User",
                    "users.models.JustfixUser"
                ]
            }
        },
        "TransferSerializer.get_date": {
            "name": "get_date",
            "location": 49,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "transfer": [
                    "int"
                ]
            }
        },
        "TransferSerializer.get_DT_RowID": {
            "name": "get_DT_RowID",
            "location": 52,
            "return": [
                "List[int]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "transfer": [
                    "bytes",
                    "str",
                    "int",
                    "list",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "TransferSerializer.get_DT_RowAttr": {
            "name": "get_DT_RowAttr",
            "location": 55,
            "return": [
                "dict",
                "str",
                "Callable",
                "Dict[str, float]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "transfer": [
                    "str",
                    "bytes",
                    "list",
                    "bool",
                    "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]"
                ]
            }
        }
    },
    "VPN-master/main/tests.py": {},
    "VPN-master/main/utils.py": {
        "DataGenerator.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DataGenerator.get_date": {
            "name": "get_date",
            "location": 17,
            "return": [
                "str",
                "Optional[datetime.date]",
                "int",
                "salon.models.Stylist",
                "datetime.datetime"
            ],
            "arguments": {
                "self": []
            }
        },
        "DataGenerator.process": {
            "name": "process",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "VPN-master/main/views.py": {
        "report": {
            "name": "report",
            "location": 33,
            "return": [
                "Optional[str]",
                "List[str]",
                "Dict[str, Any]",
                "List[DefaultDict]"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "generate": {
            "name": "generate",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "request": [
                    "rest_framework.requesRequest",
                    "bool"
                ]
            }
        }
    },
    "VPN-master/main/__init__.py": {},
    "VPN-master/main/migrations/0001_initial.py": {},
    "VPN-master/main/migrations/__init__.py": {},
    "VPN-master/VPN/settings.py": {},
    "VPN-master/VPN/urls.py": {},
    "VPN-master/VPN/wsgi.py": {},
    "VPN-master/VPN/__init__.py": {}
}
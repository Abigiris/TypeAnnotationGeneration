{
    "Woodland-master/setup.py": {},
    "Woodland-master/tests/conftest.py": {},
    "Woodland-master/tests/test_tree_classes.py": {
        "TestTreeNodeGetterFunctions.test_id_type": {
            "name": "test_id_type",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tree_node_instance": []
            }
        },
        "TestTreeNodeGetterFunctions.test_id_value": {
            "name": "test_id_value",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tree_node_instance": [
                    "List[str]",
                    "str",
                    "tuple"
                ],
                "tree_node_instance_data": [
                    "List[str]",
                    "str",
                    "tuple"
                ]
            }
        },
        "TestTreeNodeGetterFunctions.test_payload_type": {
            "name": "test_payload_type",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tree_node_instance": [
                    "str",
                    "MutableMapping[str, str]"
                ]
            }
        },
        "TestTreeNodeGetterFunctions.test_payload_value": {
            "name": "test_payload_value",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tree_node_instance": [
                    "str",
                    "tuple",
                    "List[str]",
                    "Dict[str, List[int]]"
                ],
                "tree_node_instance_data": [
                    "str",
                    "tuple",
                    "List[str]",
                    "Dict[str, List[int]]"
                ]
            }
        },
        "TestTreeNodeGetterFunctions.test_children_type": {
            "name": "test_children_type",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tree_node_instance": [
                    "str",
                    "memoryview",
                    "list"
                ]
            }
        },
        "TestTreeNodeGetterFunctions.test_children_value": {
            "name": "test_children_value",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tree_node_instance": [
                    "bool",
                    "Callable",
                    "int"
                ]
            }
        },
        "TestTreeNodeGetterFunctions.test_parent_type": {
            "name": "test_parent_type",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tree_node_instance": [
                    "MutableMapping[str, str]"
                ]
            }
        },
        "TestTreeNodeGetterFunctions.test_parent_value": {
            "name": "test_parent_value",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tree_node_instance": [
                    "str",
                    "tuple",
                    "List[str]",
                    "Dict[str, List[int]]"
                ],
                "tree_node_instance_data": [
                    "str",
                    "tuple",
                    "List[str]",
                    "Dict[str, List[int]]"
                ]
            }
        },
        "TestTreeNodeGetterFunctions.test_repr_type": {
            "name": "test_repr_type",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tree_node_instance": [
                    "str",
                    "bool"
                ]
            }
        },
        "TestTreeNodeGetterFunctions.test_repr_value": {
            "name": "test_repr_value",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tree_node_instance": [
                    "str"
                ]
            }
        },
        "TestTreeNodeSetterFunctions.test_id_type": {
            "name": "test_id_type",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "str",
                    "Union[int, str]"
                ],
                "tree_node_instance": [
                    "Dict[str, Any]",
                    "List[str]",
                    "Type",
                    "dict",
                    "type",
                    "Dict[Tuple[int, int], str]",
                    "Exception"
                ]
            }
        },
        "TestTreeNodeSetterFunctions.test_id_value": {
            "name": "test_id_value",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "node_id": [
                    "Optional[str]",
                    "bool",
                    "Dict[str, float]",
                    "set"
                ],
                "tree_node_instance": [
                    "Optional[str]",
                    "bool",
                    "Dict[str, float]",
                    "set"
                ]
            }
        },
        "TestTreeNodeSetterFunctions.test_payload_type": {
            "name": "test_payload_type",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "float"
                ],
                "expected": [
                    "bool"
                ],
                "tree_node_instance": [
                    "Optional[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "TestTreeNodeSetterFunctions.test_payload_value": {
            "name": "test_payload_value",
            "location": 216,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "List[dict]"
                ],
                "tree_node_instance": [
                    "List[dict]"
                ]
            }
        },
        "TestTreeNodeSetterFunctions.test_children_type": {
            "name": "test_children_type",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "children": [
                    "bool"
                ],
                "tree_node_instance": [
                    "Optional[Dict[str, Any]]",
                    "dict"
                ]
            }
        },
        "TestTreeNodeSetterFunctions.test_children_value": {
            "name": "test_children_value",
            "location": 246,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "children": [
                    "bool"
                ],
                "tree_node_instance": [
                    "List[dict]"
                ]
            }
        },
        "TestTreeNodeSetterFunctions.test_parent_type": {
            "name": "test_parent_type",
            "location": 261,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "bool"
                ],
                "tree_node_instance": []
            }
        },
        "TestTreeNodeSetterFunctions.test_parent_value": {
            "name": "test_parent_value",
            "location": 281,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parent": [
                    "bool"
                ],
                "expected": [
                    "bool",
                    "MutableMapping[str, str]",
                    "int",
                    "dict",
                    "Callable"
                ],
                "tree_node_instance": []
            }
        },
        "TestTreeNodeMethods.test_add_child_type": {
            "name": "test_add_child_type",
            "location": 307,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tree_node_instance": [
                    "str"
                ]
            }
        },
        "TestTreeNodeMethods.test_add_child_value": {
            "name": "test_add_child_value",
            "location": 321,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tree_node_instance": [
                    "str",
                    "dict"
                ]
            }
        },
        "TestTreeNodeErrors.test_set_id_raises_error": {
            "name": "test_set_id_raises_error",
            "location": 343,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tree_node_instance": [
                    "str",
                    "dict",
                    "Optional[List[Any]]"
                ]
            }
        },
        "TestTreeNodeErrors.test_set_payload_raises_error": {
            "name": "test_set_payload_raises_error",
            "location": 355,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tree_node_instance": [
                    "float",
                    "Optional[\"TreeNode\"]"
                ]
            }
        },
        "TestTreeNodeErrors.test_set_children_raises_error": {
            "name": "test_set_children_raises_error",
            "location": 367,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tree_node_instance": [
                    "float",
                    "Optional[\"TreeNode\"]"
                ]
            }
        },
        "TestTreeNodeErrors.test_set_parent_raises_error": {
            "name": "test_set_parent_raises_error",
            "location": 379,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tree_node_instance": []
            }
        },
        "TestTreeNodeErrors.test_add_child_raise_error": {
            "name": "test_add_child_raise_error",
            "location": 391,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tree_node_instance": [
                    "str"
                ]
            }
        }
    },
    "Woodland-master/tests/__init__.py": {},
    "Woodland-master/tests/fixtures/tree_classes.py": {
        "tree_node_instance_data": {
            "name": "tree_node_instance_data",
            "location": 10,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "request": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "tree_node_instance": {
            "name": "tree_node_instance",
            "location": 24,
            "return": [
                "str",
                "dict",
                "list",
                "Dict[Tuple[int, int], str]",
                "Union[str, int]",
                "List[Union[\"PipeChain\", str]]",
                "Optional[int]"
            ],
            "arguments": {
                "tree_node_instance_data": [
                    "List[str]",
                    "str",
                    "int",
                    "Dict[str, str]",
                    "tuple"
                ]
            }
        }
    },
    "Woodland-master/tests/fixtures/__init__.py": {},
    "Woodland-master/woodland/tree_classes.py": {
        "SingleChildTreeNode.parent": {
            "name": "parent",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "new_parent": [
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "Optional[bool]"
                ]
            }
        },
        "SingleChildTreeNode.child": {
            "name": "child",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "new_child": [
                    "str"
                ]
            }
        },
        "SingleChildTreeNode.has_parent": {
            "name": "has_parent",
            "location": 50,
            "return": [
                "bool",
                "Dict[str, Union[str, int]]",
                "Tuple[bool, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingleChildTreeNode.has_child": {
            "name": "has_child",
            "location": 53,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SingleChildTreeNode.from_dict": {
            "name": "from_dict",
            "location": 57,
            "return": [
                "str",
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "Iterator[Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "bool",
                    "Optional[str]",
                    "Optional[Union[str, int]]"
                ],
                "d": [
                    "str",
                    "bytes",
                    "bool",
                    "Optional[str]",
                    "Optional[Union[str, int]]"
                ],
                "id_key": [
                    "str",
                    "bytes",
                    "bool",
                    "Optional[str]",
                    "Optional[Union[str, int]]"
                ],
                "payload_key": [
                    "str",
                    "bytes",
                    "bool",
                    "Optional[str]",
                    "Optional[Union[str, int]]"
                ],
                "parent_key": [
                    "str",
                    "bytes",
                    "bool",
                    "Optional[str]",
                    "Optional[Union[str, int]]"
                ],
                "child_key": [
                    "str",
                    "bytes",
                    "bool",
                    "Optional[str]",
                    "Optional[Union[str, int]]"
                ]
            }
        },
        "SingleChildTreeNode.__repr__": {
            "name": "__repr__",
            "location": 67,
            "return": [
                "str",
                "Union[int, float]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TreeNode.parent": {
            "name": "parent",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "new_parent": [
                    "str",
                    "type",
                    "Optional[bool]"
                ]
            }
        },
        "TreeNode.add_child": {
            "name": "add_child",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "child": [
                    "bool",
                    "Optional[int]",
                    "str",
                    "type"
                ]
            }
        }
    },
    "Woodland-master/woodland/__init__.py": {}
}
{
    "ab-testing-master/api_starter.py": {},
    "ab-testing-master/tests_worker.py": {},
    "ab-testing-master/src/webapp.py": {
        "create_app": {
            "name": "create_app",
            "location": 9,
            "return": [
                "Tuple[Callable, Callable]",
                "dict"
            ],
            "arguments": {}
        }
    },
    "ab-testing-master/src/__init__.py": {},
    "ab-testing-master/src/backend/auth_lib.py": {
        "load_user": {
            "name": "load_user",
            "location": 28,
            "return": [
                "set",
                "int",
                "bool"
            ],
            "arguments": {
                "user_id": [
                    "int"
                ]
            }
        },
        "insert_new_user": {
            "name": "insert_new_user",
            "location": 35,
            "return": [],
            "arguments": {
                "datalake_connection": [
                    "src.backend.database_service.DatabaseConnection",
                    "str",
                    "dict"
                ],
                "email": [
                    "str",
                    "List[str]",
                    "datetime.date",
                    "Optional[str]"
                ],
                "password": [
                    "str",
                    "int"
                ]
            }
        },
        "confirm_user": {
            "name": "confirm_user",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "db_engine": [
                    "str",
                    "sqlalchemy.engine.Engine",
                    "int",
                    "datetime.datetime",
                    "List[str]"
                ],
                "email": [
                    "str",
                    "sqlalchemy.engine.Engine",
                    "int",
                    "datetime.datetime",
                    "List[str]"
                ]
            }
        },
        "login_user": {
            "name": "login_user",
            "location": 76,
            "return": [
                "str",
                "src.config.user_config.UserConfig",
                "Callable",
                "Optional[str]",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "datalake_connection": [
                    "src.backend.database_service.DatabaseConnection",
                    "str",
                    "dict"
                ],
                "email": [
                    "str",
                    "Optional[str]"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "update_user_password": {
            "name": "update_user_password",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "datalake_connection": [
                    "str",
                    "src.backend.database_service.DatabaseConnection",
                    "bytes",
                    "int"
                ],
                "email": [
                    "str",
                    "sqlalchemy.orm.Session",
                    "List[str]"
                ],
                "new_password": [
                    "int",
                    "Union[int, str]",
                    "str",
                    "dict"
                ]
            }
        }
    },
    "ab-testing-master/src/backend/config.py": {},
    "ab-testing-master/src/backend/database_service.py": {
        "get_datalake_connection": {
            "name": "get_datalake_connection",
            "location": 22,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {}
        },
        "get_pumpkin_connection": {
            "name": "get_pumpkin_connection",
            "location": 31,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {}
        }
    },
    "ab-testing-master/src/backend/db_models.py": {
        "_create_table_if_not_exists": {
            "name": "_create_table_if_not_exists",
            "location": 308,
            "return": [],
            "arguments": {
                "db_engine": [],
                "table_model_instance": []
            }
        },
        "_create_schema": {
            "name": "_create_schema",
            "location": 322,
            "return": [],
            "arguments": {
                "db_engine": []
            }
        },
        "_create_missing_tables": {
            "name": "_create_missing_tables",
            "location": 326,
            "return": [],
            "arguments": {
                "db_engine": []
            }
        },
        "initialize_db": {
            "name": "initialize_db",
            "location": 349,
            "return": [],
            "arguments": {
                "db_engine": []
            }
        },
        "ABTestResult.upsert_test_results": {
            "name": "upsert_test_results",
            "location": 101,
            "return": [],
            "arguments": {
                "cls": [],
                "db_engine": [],
                "test_id": [],
                "test_type": [],
                "kpi_name": [],
                "first_population_name": [],
                "second_population_name": [],
                "first_population_avg": [],
                "second_population_avg": [],
                "pvalue": [],
                "updated_at": []
            }
        },
        "KPI.upsert_test_results": {
            "name": "upsert_test_results",
            "location": 160,
            "return": [],
            "arguments": {
                "cls": [],
                "db_engine": [],
                "test_id": [],
                "test_type": [],
                "kpi_name": [],
                "first_population_name": [],
                "second_population_name": [],
                "first_population_avg": [],
                "second_population_avg": [],
                "pvalue": [],
                "updated_at": []
            }
        },
        "TestedUser.get_users_ids_from_db": {
            "name": "get_users_ids_from_db",
            "location": 228,
            "return": [],
            "arguments": {
                "cls": [],
                "db_engine": [],
                "test_name": [],
                "population_name": []
            }
        },
        "PattUser.upsert_admin": {
            "name": "upsert_admin",
            "location": 256,
            "return": [],
            "arguments": {
                "cls": [],
                "db_engine": []
            }
        },
        "PattUser.update_status": {
            "name": "update_status",
            "location": 283,
            "return": [],
            "arguments": {
                "cls": [],
                "db_engine": [],
                "email": [],
                "status": [],
                "updated_at": []
            }
        },
        "PattUser.delete": {
            "name": "delete",
            "location": 297,
            "return": [],
            "arguments": {
                "cls": [],
                "db_engine": [],
                "email": []
            }
        }
    },
    "ab-testing-master/src/backend/khi_two_test.py": {
        "KhiTwoTest._get_total_std": {
            "name": "_get_total_std",
            "location": 18,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Type[T]",
                    "List[str]",
                    "numpy.dtype"
                ],
                "serie_1": [
                    "numpy.array",
                    "List[Tuple[int, int]]",
                    "List[\"Issue\"]",
                    "List['cirq.Circuit']",
                    "Dict[int, bool]",
                    "List[str]",
                    "int",
                    "pandas.DataFrame",
                    "List[int]"
                ],
                "serie_2": [
                    "numpy.array",
                    "List[Tuple[int, int]]",
                    "List[\"Issue\"]",
                    "List['cirq.Circuit']",
                    "Dict[int, bool]",
                    "List[str]",
                    "int",
                    "pandas.DataFrame",
                    "List[int]"
                ]
            }
        },
        "KhiTwoTest._compute_p_value": {
            "name": "_compute_p_value",
            "location": 28,
            "return": [
                "int",
                "str",
                "Tuple[int, int]",
                "numpy.ndarray",
                "Tuple[str, int]"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "Type['AbstractIntegrationConversation']",
                    "int",
                    "list"
                ],
                "serie_1": [],
                "serie_2": []
            }
        },
        "KhiTwoTest.compute_test": {
            "name": "compute_test",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Dict[str, str]",
                    "List[str]",
                    "bool",
                    "datetime.datetime"
                ],
                "datalake_engine": [
                    "sqlalchemy.engine.Engine",
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[Dict[str, str]]",
                    "Optional[bool]"
                ],
                "test": [
                    "str",
                    "src.backend.db_models.ABTest",
                    "sqlalchemy.engine.Engine",
                    "Optional[str]",
                    "int",
                    "Optional[Dict[str, str]]"
                ],
                "kpi_name": [
                    "str",
                    "src.backend.db_models.ABTest",
                    "sqlalchemy.engine.Engine",
                    "Optional[str]",
                    "int",
                    "Optional[Dict[str, str]]"
                ],
                "kpi_res_per_population": [
                    "Optional[Dict[str, str]]",
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "ab-testing-master/src/backend/kpi.py": {
        "get_kpis": {
            "name": "get_kpis",
            "location": 143,
            "return": [
                "str",
                "bool",
                "Optional[int]",
                "int"
            ],
            "arguments": {}
        },
        "get_kpi_by_name": {
            "name": "get_kpi_by_name",
            "location": 153,
            "return": [
                "Optional[str]",
                "bool",
                "dict",
                "list"
            ],
            "arguments": {
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "AbstractKPI.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "AbstractKPI.compute_values_for_population": {
            "name": "compute_values_for_population",
            "location": 21,
            "return": [
                "pandas.DataFrame"
            ],
            "arguments": {
                "self": [],
                "pumpkin_connection": [
                    "src.backend.database_service.DatabaseConnection",
                    "datetime.datetime",
                    "numpy.array",
                    "bool"
                ],
                "datalake_connection": [
                    "src.backend.database_service.DatabaseConnection",
                    "datetime.datetime",
                    "numpy.array",
                    "bool"
                ],
                "users_ids": [
                    "src.backend.database_service.DatabaseConnection",
                    "datetime.datetime",
                    "numpy.array",
                    "bool"
                ],
                "start_date": [
                    "src.backend.database_service.DatabaseConnection",
                    "datetime.datetime",
                    "numpy.array",
                    "bool"
                ],
                "end_date": [
                    "src.backend.database_service.DatabaseConnection",
                    "datetime.datetime",
                    "numpy.array",
                    "bool"
                ]
            }
        },
        "AbstractKPI.compute_values_for_populations": {
            "name": "compute_values_for_populations",
            "location": 38,
            "return": [
                "int",
                "List[int]",
                "backend.src.sheets_commands.sheeGrid"
            ],
            "arguments": {
                "self": [],
                "pumpkin_connection": [
                    "datetime.datetime",
                    "src.backend.database_service.DatabaseConnection",
                    "Optional[str]",
                    "datetime.date",
                    "str",
                    "int"
                ],
                "datalake_connection": [
                    "datetime.datetime",
                    "src.backend.database_service.DatabaseConnection",
                    "Optional[str]",
                    "datetime.date",
                    "str",
                    "int"
                ],
                "populations": [
                    "Dict[str, pandas.DataFrame]",
                    "bool",
                    "Mapping[str, utils.mssql_counters.Section]",
                    "dict",
                    "Dict[str, Dict[int, str]]",
                    "Dict[str, str]",
                    "str"
                ],
                "start_date": [
                    "datetime.datetime",
                    "src.backend.database_service.DatabaseConnection",
                    "Optional[str]",
                    "datetime.date",
                    "str",
                    "int"
                ],
                "end_date": [
                    "datetime.datetime",
                    "src.backend.database_service.DatabaseConnection",
                    "Optional[str]",
                    "datetime.date",
                    "str",
                    "int"
                ]
            }
        },
        "TransactionsNumberKPI.__init__": {
            "name": "__init__",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "ownership_is_must": [
                    "bool",
                    "Sequence",
                    "int",
                    "str"
                ]
            }
        },
        "TransactionsNumberKPI.compute_values_for_population": {
            "name": "compute_values_for_population",
            "location": 68,
            "return": [
                "str",
                "cmk.utils.type_defs.HostName",
                "Type",
                "Type[T]"
            ],
            "arguments": {
                "self": [],
                "pumpkin_connection": [
                    "datetime.datetime",
                    "numpy.array",
                    "src.backend.database_service.DatabaseConnection",
                    "int"
                ],
                "datalake_connection": [
                    "src.backend.database_service.DatabaseConnection",
                    "datetime.datetime",
                    "numpy.array",
                    "bool"
                ],
                "users_ids": [
                    "datetime.datetime",
                    "numpy.array",
                    "src.backend.database_service.DatabaseConnection",
                    "int"
                ],
                "start_date": [
                    "datetime.datetime",
                    "numpy.array",
                    "src.backend.database_service.DatabaseConnection",
                    "int"
                ],
                "end_date": [
                    "datetime.datetime",
                    "numpy.array",
                    "src.backend.database_service.DatabaseConnection",
                    "int"
                ]
            }
        },
        "TransactionsNumberWithOwnership.__init__": {
            "name": "__init__",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AllTransactionsNumber.__init__": {
            "name": "__init__",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ActivationKPI.__init__": {
            "name": "__init__",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "ownership_is_must": [
                    "bool",
                    "Sequence",
                    "int",
                    "str"
                ]
            }
        },
        "ActivationKPI.compute_values_for_population": {
            "name": "compute_values_for_population",
            "location": 110,
            "return": [
                "Optional[str]",
                "str",
                "Optional[cmk.utils.diagnostics.DiagnosticsOptionalParameters]",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "pumpkin_connection": [
                    "datetime.datetime",
                    "int",
                    "numpy.array",
                    "src.backend.database_service.DatabaseConnection"
                ],
                "datalake_connection": [
                    "src.backend.database_service.DatabaseConnection",
                    "datetime.datetime",
                    "numpy.array",
                    "bool"
                ],
                "users_ids": [
                    "datetime.datetime",
                    "int",
                    "numpy.array",
                    "src.backend.database_service.DatabaseConnection"
                ],
                "start_date": [
                    "datetime.datetime",
                    "int",
                    "numpy.array",
                    "src.backend.database_service.DatabaseConnection"
                ],
                "end_date": [
                    "datetime.datetime",
                    "int",
                    "numpy.array",
                    "src.backend.database_service.DatabaseConnection"
                ]
            }
        },
        "ActivationWithOwnership.__init__": {
            "name": "__init__",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SimpleActivation.__init__": {
            "name": "__init__",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "ab-testing-master/src/backend/logger.py": {
        "_configure_root_logger": {
            "name": "_configure_root_logger",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_replace_event_key_by_message": {
            "name": "_replace_event_key_by_message",
            "location": 32,
            "return": [
                "Dict[str, Any]",
                "\"Step\""
            ],
            "arguments": {
                "logger": [
                    "str"
                ],
                "method_name": [
                    "str"
                ],
                "event_dict": [
                    "str",
                    "Mapping[str, Dict[str, Any]]",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "_add_log_level": {
            "name": "_add_log_level",
            "location": 47,
            "return": [
                "dict",
                "logging.Logger",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "_": [
                    "str",
                    "bytes",
                    "Mapping[str, Optional[float]]",
                    "List[Tuple[bytes, bytes]]",
                    "int"
                ],
                "method_name": [
                    "str"
                ],
                "event_dict": [
                    "str"
                ]
            }
        },
        "_add_time": {
            "name": "_add_time",
            "location": 57,
            "return": [
                "dict"
            ],
            "arguments": {
                "_": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "__": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "event_dict": [
                    "dict",
                    "datetime.datetime.datetime",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "_get_structlog_logger": {
            "name": "_get_structlog_logger",
            "location": 67,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "getLogger": {
            "name": "getLogger",
            "location": 104,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        }
    },
    "ab-testing-master/src/backend/worker.py": {
        "compute_kpis_for_test": {
            "name": "compute_kpis_for_test",
            "location": 14,
            "return": [
                "dict",
                "set"
            ],
            "arguments": {
                "pumpkin_connection": [
                    "src.backend.database_service.DatabaseConnection",
                    "int",
                    "str",
                    "Sequence[Hashable]",
                    "bool"
                ],
                "datalake_connection": [
                    "src.backend.database_service.DatabaseConnection",
                    "src.backend.db_models.ABTest",
                    "app.db_models.user.User",
                    "raiden.utils.SecretRegistryAddress",
                    "raiden.utils.MonitoringServiceAddress",
                    "raiden.utils.BlockIdentifier"
                ],
                "test": [
                    "src.backend.database_service.DatabaseConnection",
                    "src.backend.db_models.ABTest",
                    "app.db_models.user.User",
                    "raiden.utils.SecretRegistryAddress",
                    "raiden.utils.MonitoringServiceAddress",
                    "raiden.utils.BlockIdentifier"
                ]
            }
        },
        "_run_test": {
            "name": "_run_test",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "datalake_connection": [
                    "str",
                    "float"
                ],
                "pumpkin_connection": [
                    "str",
                    "float"
                ],
                "test": [
                    "str",
                    "float"
                ]
            }
        },
        "update_test_status": {
            "name": "update_test_status",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "datalake_connection": [
                    "str",
                    "int"
                ],
                "test_id": [
                    "int",
                    "str"
                ]
            }
        },
        "run_tests": {
            "name": "run_tests",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "datalake_connection": [
                    "int",
                    "str",
                    "src.backend.database_service.DatabaseConnection",
                    "Optional[str]"
                ],
                "pumpkin_connection": [
                    "src.backend.database_service.DatabaseConnection",
                    "int",
                    "str",
                    "Optional[str]",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "ab-testing-master/src/backend/__init__.py": {},
    "ab-testing-master/src/backend/utils/db_utils.py": {
        "get_test_by_id": {
            "name": "get_test_by_id",
            "location": 19,
            "return": [
                "dict",
                "Dict[str, bool]",
                "bool"
            ],
            "arguments": {
                "datalake_connection": [
                    "str"
                ],
                "test_id": [
                    "str"
                ]
            }
        },
        "get_kpis_by_test": {
            "name": "get_kpis_by_test",
            "location": 26,
            "return": [
                "bool",
                "Dict[str, bool]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "datalake_connection": [
                    "str",
                    "Union['KspNativeControl', int]"
                ],
                "test_id": [
                    "str",
                    "Union['KspNativeControl', int]"
                ]
            }
        },
        "insert_new_test": {
            "name": "insert_new_test",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "datalake_connection": [
                    "int",
                    "datetime.timedelta",
                    "List[int]"
                ],
                "ab_test": [
                    "str",
                    "int"
                ],
                "populations": [
                    "bool",
                    "list",
                    "Sequence[str]"
                ],
                "kpis": [
                    "bool",
                    "list",
                    "Sequence[str]"
                ]
            }
        },
        "read_populations_file": {
            "name": "read_populations_file",
            "location": 62,
            "return": [
                "bool",
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "test_id": [
                    "str",
                    "int",
                    "List[str]"
                ],
                "populations_df": [
                    "str",
                    "int"
                ]
            }
        },
        "get_all_tests": {
            "name": "get_all_tests",
            "location": 76,
            "return": [
                "str",
                "bool",
                "dict",
                "Dict[str, bool]"
            ],
            "arguments": {
                "datalake_connection": [
                    "str",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "get_tests_to_compute": {
            "name": "get_tests_to_compute",
            "location": 81,
            "return": [
                "Dict[str, Any]",
                "str",
                "Exception"
            ],
            "arguments": {
                "datalake_connection": [
                    "dict",
                    "datetime.date",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "delete_test_by_id": {
            "name": "delete_test_by_id",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "datalake_connection": [
                    "str",
                    "int"
                ],
                "test_id": [
                    "int",
                    "str",
                    "bool",
                    "datetime.datetime"
                ]
            }
        },
        "get_test_populations": {
            "name": "get_test_populations",
            "location": 107,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "datalake_connection": [
                    "str",
                    "int"
                ],
                "test_id": [
                    "int",
                    "str",
                    "datetime.datetime",
                    "List[int]"
                ]
            }
        }
    },
    "ab-testing-master/src/backend/utils/tests_utils.py": {
        "_flatten_transactions": {
            "name": "_flatten_transactions",
            "location": 11,
            "return": [
                "bool",
                "Callable",
                "bytes",
                "str"
            ],
            "arguments": {
                "transactions_df": [
                    "str",
                    "Dict[str, str]",
                    "int",
                    "bool"
                ]
            }
        },
        "_get_valid_transactions": {
            "name": "_get_valid_transactions",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "pumpkin_engine": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "start_date": [
                    "int",
                    "datetime.datetime",
                    "datetime.timezone",
                    "str",
                    "datetime.date",
                    "Optional[str]"
                ],
                "end_date": [
                    "int",
                    "datetime.datetime",
                    "datetime.timezone",
                    "str",
                    "datetime.date",
                    "Optional[str]"
                ]
            }
        },
        "get_valid_transactions_per_user": {
            "name": "get_valid_transactions_per_user",
            "location": 50,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "pumpkin_engine": [
                    "datetime.datetime",
                    "sqlalchemy.engine.Engine",
                    "datetime.date",
                    "Optional[str]",
                    "Optional[datetime.date]",
                    "str"
                ],
                "ownership_is_must": [
                    "bool",
                    "datetime.datetime",
                    "int",
                    "src.backend.database_service.DatabaseConnection",
                    "datetime.date",
                    "str"
                ],
                "start_date": [
                    "datetime.datetime",
                    "sqlalchemy.engine.Engine",
                    "datetime.date",
                    "Optional[str]",
                    "Optional[datetime.date]",
                    "str"
                ],
                "end_date": [
                    "datetime.datetime",
                    "sqlalchemy.engine.Engine",
                    "datetime.date",
                    "Optional[str]",
                    "Optional[datetime.date]",
                    "str"
                ]
            }
        },
        "get_population_transactions": {
            "name": "get_population_transactions",
            "location": 78,
            "return": [
                "int",
                "bool",
                "Union[int, float, complex]",
                "List[Dict[str, str]]"
            ],
            "arguments": {
                "pumpkin_engine": [
                    "datetime.datetime",
                    "bool",
                    "sqlalchemy.engine.Engine",
                    "Optional[float]",
                    "float",
                    "Optional[str]"
                ],
                "users_ids": [
                    "int",
                    "Optional[List[str]]",
                    "str"
                ],
                "ownership_is_must": [
                    "datetime.datetime",
                    "bool",
                    "sqlalchemy.engine.Engine",
                    "Optional[float]",
                    "float",
                    "Optional[str]"
                ],
                "start_date": [
                    "datetime.datetime",
                    "bool",
                    "sqlalchemy.engine.Engine",
                    "Optional[float]",
                    "float",
                    "Optional[str]"
                ],
                "end_date": [
                    "datetime.datetime",
                    "bool",
                    "sqlalchemy.engine.Engine",
                    "Optional[float]",
                    "float",
                    "Optional[str]"
                ]
            }
        }
    },
    "ab-testing-master/src/backend/utils/__init__.py": {},
    "ab-testing-master/src/frontend/flask_app.py": {
        "build_app": {
            "name": "build_app",
            "location": 17,
            "return": [
                "flask.Flask"
            ],
            "arguments": {}
        }
    },
    "ab-testing-master/src/frontend/forms.py": {
        "TestCreationForm.validate_populations_file": {
            "name": "validate_populations_file",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "populations_file": [
                    "IO",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "ab-testing-master/src/frontend/__init__.py": {},
    "ab-testing-master/src/frontend/routing/all_routes.py": {
        "add_routes": {
            "name": "add_routes",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "flask.Flask",
                    "src.backend.database_service.DatabaseConnection"
                ],
                "datalake_connection": [
                    "flask.Flask",
                    "src.backend.database_service.DatabaseConnection"
                ]
            }
        }
    },
    "ab-testing-master/src/frontend/routing/general_routing.py": {
        "add_routes": {
            "name": "add_routes",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "src.backend.database_service.DatabaseConnection",
                    "flask.Flask"
                ],
                "datalake_connection": [
                    "src.backend.database_service.DatabaseConnection",
                    "flask.Flask"
                ]
            }
        },
        "add_routes.home": {
            "name": "home",
            "location": 13,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "int",
                "dict",
                "str"
            ],
            "arguments": {}
        },
        "add_routes.about": {
            "name": "about",
            "location": 18,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {}
        },
        "add_routes.register": {
            "name": "register",
            "location": 23,
            "return": [
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "add_routes.login": {
            "name": "login",
            "location": 40,
            "return": [
                "Dict[str, Any]",
                "str",
                "Optional[bool]",
                "int"
            ],
            "arguments": {}
        },
        "add_routes.logout": {
            "name": "logout",
            "location": 61,
            "return": [
                "str",
                "Dict[str, str]",
                "bool",
                "int"
            ],
            "arguments": {}
        }
    },
    "ab-testing-master/src/frontend/routing/tests_routing.py": {
        "add_routes": {
            "name": "add_routes",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "src.backend.database_service.DatabaseConnection",
                    "flask.Flask"
                ],
                "datalake_connection": [
                    "src.backend.database_service.DatabaseConnection",
                    "flask.Flask"
                ]
            }
        },
        "add_routes.tests": {
            "name": "tests",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "add_routes.new_test": {
            "name": "new_test",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "add_routes.edit_test": {
            "name": "edit_test",
            "location": 66,
            "return": [
                "str",
                "Dict[str, Optional[str]]"
            ],
            "arguments": {
                "test_id": [
                    "str",
                    "bool",
                    "int",
                    "dict"
                ]
            }
        },
        "add_routes.delete_test": {
            "name": "delete_test",
            "location": 120,
            "return": [
                "dict",
                "int",
                "cmk.utils.type_defs.UserId",
                "Optional[Dict]",
                "str"
            ],
            "arguments": {
                "test_id": [
                    "int",
                    "str"
                ]
            }
        },
        "add_routes.get_test_results": {
            "name": "get_test_results",
            "location": 135,
            "return": [
                "str"
            ],
            "arguments": {
                "test_id": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        }
    },
    "ab-testing-master/src/frontend/routing/user_routing.py": {
        "add_routes": {
            "name": "add_routes",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "src.backend.database_service.DatabaseConnection",
                    "flask.Flask"
                ],
                "datalake_connection": [
                    "src.backend.database_service.DatabaseConnection",
                    "flask.Flask"
                ]
            }
        },
        "add_routes.get_users": {
            "name": "get_users",
            "location": 14,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "add_routes.confirm_user": {
            "name": "confirm_user",
            "location": 24,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "add_routes.delete_user": {
            "name": "delete_user",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "user_id": [
                    "str"
                ]
            }
        },
        "add_routes.reset_password": {
            "name": "reset_password",
            "location": 49,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        }
    },
    "ab-testing-master/src/frontend/routing/__init__.py": {},
    "ab-testing-master/tests/conftest.py": {
        "database": {
            "name": "database",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "app": {
            "name": "app",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "ab-testing-master/tests/test_features_flipping.py": {
        "test_feature_flipping_insertion": {
            "name": "test_feature_flipping_insertion",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "database": [],
                "app": []
            }
        }
    },
    "ab-testing-master/tests/__init__.py": {}
}
{
    "acres-master/setup.py": {},
    "acres-master/acres/constants.py": {},
    "acres-master/acres/__init__.py": {},
    "acres-master/acres/evaluation/evaluation.py": {
        "test_input": {
            "name": "test_input",
            "location": 30,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "true_expansions": [
                    "List[str]",
                    "Set[str]",
                    "bool",
                    "List[List[Any]]"
                ],
                "possible_expansions": [
                    "List[str]",
                    "Set[str]",
                    "bool",
                    "List[List[Any]]"
                ],
                "max_tries": [
                    "int",
                    "float"
                ]
            }
        },
        "analyze": {
            "name": "analyze",
            "location": 54,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "contextualized_acronym": [
                    "Optional[str]",
                    "Any",
                    "bytes",
                    "float"
                ],
                "true_expansions": [
                    "denite.util.UserContext",
                    "Union[int, str]",
                    "Sequence[Hashable]",
                    "bool"
                ],
                "strategy": [
                    "Callable",
                    "str"
                ],
                "max_tries": [
                    "Optional[int]",
                    "int",
                    "float"
                ]
            }
        },
        "_valid": {
            "name": "_valid",
            "location": 100,
            "return": [
                "Sequence[str]"
            ],
            "arguments": {
                "topics": [
                    "List[acres.util.acronym.Acronym]",
                    "bool",
                    "str"
                ],
                "valid_standard": [
                    "Set[str]",
                    "str",
                    "Dict[str, str]"
                ],
                "level": [
                    "Exception",
                    "type",
                    "str"
                ]
            }
        },
        "evaluate": {
            "name": "evaluate",
            "location": 129,
            "return": [
                "int",
                "Iterable[T]",
                "str"
            ],
            "arguments": {
                "topics": [
                    "bytes",
                    "Callable",
                    "bool",
                    "Collection[str]",
                    "str"
                ],
                "valid_standard": [
                    "int",
                    "bytes",
                    "Iterable[float]"
                ],
                "standard": [
                    "str",
                    "T",
                    "bool",
                    "int"
                ],
                "strategy": [
                    "dict",
                    "bool",
                    "Callable"
                ],
                "level": [
                    "int",
                    "bytes",
                    "Iterable[float]"
                ],
                "max_tries": [
                    "dict",
                    "bool",
                    "Callable"
                ],
                "lenient": [
                    "str",
                    "T",
                    "bool",
                    "int"
                ]
            }
        },
        "do_analysis": {
            "name": "do_analysis",
            "location": 174,
            "return": [
                "int",
                "Iterable[T]",
                "str"
            ],
            "arguments": {
                "topics_file": [
                    "Tuple[str, str]",
                    "bool",
                    "str",
                    "List[str]",
                    "list"
                ],
                "detection_file": [
                    "str"
                ],
                "expansion_file": [
                    "str",
                    "Container[str]",
                    "Callable[[int, int], None]",
                    "bool",
                    "List[Tuple[str, str, str]]"
                ],
                "strategy": [
                    "bool",
                    "acres.resolution.resolver.Strategy",
                    "int"
                ],
                "level": [
                    "int",
                    "bool",
                    "List[Tuple[str, str]]",
                    "List[str]",
                    "float"
                ],
                "max_tries": [
                    "int",
                    "bool"
                ],
                "lenient": [
                    "bool",
                    "acres.resolution.resolver.Strategy",
                    "int"
                ]
            }
        },
        "plot_data": {
            "name": "plot_data",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {
                "topics_file": [
                    "str",
                    "int"
                ],
                "detection_file": [
                    "str",
                    "int"
                ],
                "expansion_file": [
                    "str",
                    "int"
                ]
            }
        },
        "summary": {
            "name": "summary",
            "location": 241,
            "return": [
                ""
            ],
            "arguments": {
                "topics_file": [
                    "bool",
                    "Sequence[str]",
                    "str"
                ],
                "detection_file": [
                    "str",
                    "Container[str]"
                ],
                "expansion_file": [
                    "int",
                    "str",
                    "bool"
                ],
                "level": [
                    "str",
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "max_tries": [
                    "int",
                    "str",
                    "bool"
                ],
                "lenient": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "acres-master/acres/evaluation/metrics.py": {
        "calculate_precision": {
            "name": "calculate_precision",
            "location": 6,
            "return": [
                "int",
                "str",
                "Tuple[float, float]",
                "bool"
            ],
            "arguments": {
                "total_correct": [
                    "int",
                    "float"
                ],
                "total_found": [
                    "int",
                    "float"
                ]
            }
        },
        "calculate_recall": {
            "name": "calculate_recall",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "total_correct": [
                    "int",
                    "Callable",
                    "str"
                ],
                "total_acronyms": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "calculate_f1": {
            "name": "calculate_f1",
            "location": 28,
            "return": [
                "float",
                "bool",
                "int"
            ],
            "arguments": {
                "precision": [
                    "float",
                    "bool",
                    "int"
                ],
                "recall": [
                    "float",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "acres-master/acres/evaluation/__init__.py": {},
    "acres-master/acres/fastngram/fastngram.py": {
        "baseline": {
            "name": "baseline",
            "location": 95,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "acronym": [
                    "int",
                    "Callable",
                    "str"
                ],
                "left_context": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "right_context": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "fastngram": {
            "name": "fastngram",
            "location": 107,
            "return": [
                "typing.Iterator[builtins.str]"
            ],
            "arguments": {
                "acronym": [
                    "Tuple[int, int]"
                ],
                "left_context": [
                    "Tuple[int, int]"
                ],
                "right_context": [
                    "Tuple[int, int]"
                ],
                "min_freq": [
                    "int"
                ],
                "max_rank": [
                    "int"
                ]
            }
        },
        "fasttype": {
            "name": "fasttype",
            "location": 128,
            "return": [
                "typing.Iterator[builtins.str]"
            ],
            "arguments": {
                "acronym": [
                    "denite.util.UserContext",
                    "bool"
                ],
                "left_context": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "right_context": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "min_freq": [
                    "bool",
                    "int"
                ],
                "max_rank": [
                    "int"
                ]
            }
        },
        "_find_contexts": {
            "name": "_find_contexts",
            "location": 147,
            "return": [
                "set",
                "str",
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "acronym": [
                    "Optional[dict]",
                    "str"
                ],
                "min_freq": [
                    "int",
                    "set",
                    "str"
                ]
            }
        },
        "_center_provider": {
            "name": "_center_provider",
            "location": 172,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "contexts": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "min_freq": [
                    "int",
                    "Callable",
                    "str"
                ],
                "max_rank": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "create_map": {
            "name": "create_map",
            "location": 205,
            "return": [
                "str",
                "denite.util.UserContext",
                "Dict[int, dict]"
            ],
            "arguments": {
                "ngrams": [
                    "list",
                    "List[Dict]",
                    "List[str]"
                ],
                "model": [
                    "bytes",
                    "list",
                    "Dict[str, Any]"
                ],
                "partition": [
                    "str",
                    "Mapping[str, str]",
                    "Callable",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "_generate_ngram_contexts": {
            "name": "_generate_ngram_contexts",
            "location": 229,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "ngram": [
                    "str"
                ]
            }
        },
        "_generate_acronym_contexts": {
            "name": "_generate_acronym_contexts",
            "location": 259,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "contextualized_acronym": []
            }
        },
        "ContextMap.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextMap.add": {
            "name": "add",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "center": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "left_context": [
                    "str",
                    "bytes",
                    "bool",
                    "List[str]",
                    "Callable[[str], None]"
                ],
                "right_context": [
                    "str",
                    "bytes",
                    "bool",
                    "List[str]",
                    "Callable[[str], None]"
                ],
                "freq": []
            }
        },
        "ContextMap.centers": {
            "name": "centers",
            "location": 46,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "left_context": [
                    "IO",
                    "bytes",
                    "bool",
                    "str",
                    "List[str]"
                ],
                "right_context": [
                    "IO",
                    "bytes",
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "CenterMap.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CenterMap.add": {
            "name": "add",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "center": [
                    "Optional[Dict[str, str]]",
                    "Set[str]",
                    "Iterable[Type]"
                ],
                "left_context": [
                    "str",
                    "bytes",
                    "bool",
                    "List[str]",
                    "Callable[[str], None]"
                ],
                "right_context": [
                    "str",
                    "bytes",
                    "bool",
                    "List[str]",
                    "Callable[[str], None]"
                ],
                "freq": [
                    "str"
                ]
            }
        },
        "CenterMap.contexts": {
            "name": "contexts",
            "location": 83,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "center": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "acres-master/acres/fastngram/__init__.py": {},
    "acres-master/acres/model/detection_standard.py": {
        "parse": {
            "name": "parse",
            "location": 19,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "filter_valid": {
            "name": "filter_valid",
            "location": 41,
            "return": [],
            "arguments": {
                "standard": []
            }
        },
        "parse_valid": {
            "name": "parse_valid",
            "location": 71,
            "return": [],
            "arguments": {
                "filename": []
            }
        },
        "update": {
            "name": "update",
            "location": 81,
            "return": [],
            "arguments": {
                "previous": [],
                "acronyms": []
            }
        },
        "write": {
            "name": "write",
            "location": 96,
            "return": [],
            "arguments": {
                "filename": [],
                "standard": []
            }
        }
    },
    "acres-master/acres/model/expansion_standard.py": {
        "parse": {
            "name": "parse",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "_write_expansions": {
            "name": "_write_expansions",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "acronym": [
                    "str",
                    "BinaryIO",
                    "List[str]",
                    "TextIO",
                    "IO[bytes]"
                ],
                "expansions": [
                    "Dict[str, int]",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "bytes"
                ],
                "file": [
                    "TextIO",
                    "IO[str]",
                    "IO",
                    "str"
                ]
            }
        },
        "write": {
            "name": "write",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Callable[[str], None]",
                    "bool"
                ],
                "previous": [
                    "Dict[str, Set[str]]",
                    "Mapping[int, str]",
                    "static_frame.core.util.DtypeSpecifier",
                    "static_frame.core.util.NameType",
                    "Dict[Hashable, Any]",
                    "dict"
                ],
                "valid": [
                    "Set[str]",
                    "str",
                    "List[Tuple[int, int]]",
                    "Optional[bool]",
                    "Sequence[Dict[str, str]]"
                ],
                "topics": [
                    "List[acres.util.acronym.Acronym]",
                    "str",
                    "List[str]",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "acres-master/acres/model/ngrams.py": {
        "filter_acronym_contexts": {
            "name": "filter_acronym_contexts",
            "location": 51,
            "return": [
                "'Iterator[acronym.Acronym]'"
            ],
            "arguments": {
                "ngrams": [
                    "logging.LogRecord",
                    "denite.util.UserContext",
                    "str",
                    "bool",
                    "list"
                ]
            }
        },
        "FilteredNGramStat.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ngram_size": [
                    "int",
                    "bool"
                ]
            }
        },
        "FilteredNGramStat.__iter__": {
            "name": "__iter__",
            "location": 32,
            "return": [
                "typing.Generator[typing.List[builtins.str], None, None]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "acres-master/acres/model/topic_list.py": {
        "parse": {
            "name": "parse",
            "location": 15,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "unique_types": {
            "name": "unique_types",
            "location": 38,
            "return": [],
            "arguments": {
                "topics": [
                    "Exception"
                ]
            }
        },
        "create": {
            "name": "create",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool"
                ],
                "chance": [
                    "int",
                    "Optional[bool]",
                    "str"
                ],
                "ngram_size": [
                    "int",
                    "Tuple[float, float, float]",
                    "bool",
                    "float",
                    "Optional[int]"
                ]
            }
        }
    },
    "acres-master/acres/model/__init__.py": {},
    "acres-master/acres/preprocess/dumps.py": {
        "create_corpus_ngramstat_dump": {
            "name": "create_corpus_ngramstat_dump",
            "location": 16,
            "return": [],
            "arguments": {
                "corpus_path": [],
                "min_freq": [],
                "min_length": [],
                "max_length": []
            }
        },
        "_filter_frequency": {
            "name": "_filter_frequency",
            "location": 81,
            "return": [],
            "arguments": {
                "ngrams": [],
                "min_freq": []
            }
        },
        "create_indexed_ngrams": {
            "name": "create_indexed_ngrams",
            "location": 96,
            "return": [],
            "arguments": {
                "ngrams": []
            }
        }
    },
    "acres-master/acres/preprocess/resource_factory.py": {
        "get_word_ngrams": {
            "name": "get_word_ngrams",
            "location": 41,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "get_ngramstat": {
            "name": "get_ngramstat",
            "location": 73,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "get_nn_model": {
            "name": "get_nn_model",
            "location": 103,
            "return": [
                "str"
            ],
            "arguments": {
                "ngram_size": [
                    "int",
                    "bool",
                    "float"
                ],
                "min_count": [
                    "int",
                    "bool",
                    "float"
                ],
                "net_size": [
                    "int",
                    "bool",
                    "float"
                ],
                "alpha": [
                    "int",
                    "bool",
                    "float"
                ],
                "sg": [
                    "int",
                    "bool",
                    "float"
                ],
                "hs": [
                    "int",
                    "bool",
                    "float"
                ],
                "negative": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "get_dictionary": {
            "name": "get_dictionary",
            "location": 135,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "get_context_map": {
            "name": "get_context_map",
            "location": 149,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "partition": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "get_center_map": {
            "name": "get_center_map",
            "location": 176,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "partition": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "reset": {
            "name": "reset",
            "location": 203,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "warmup_cache": {
            "name": "warmup_cache",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "write_txt": {
            "name": "write_txt",
            "location": 226,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "resource": [
                    "Dict[str, int]",
                    "List[dict]",
                    "dict",
                    "str",
                    "Mapping[str, Any]",
                    "List[str]"
                ],
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "_dump": {
            "name": "_dump",
            "location": 252,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "str",
                    "Dict[str, str]",
                    "Optional[Dict[str, Any]]",
                    "bytes"
                ],
                "filename": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "Optional[Union[Dict, str, int, bytes]]"
                ]
            }
        },
        "_load": {
            "name": "_load",
            "location": 267,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "_log_file_not_found": {
            "name": "_log_file_not_found",
            "location": 278,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_log_file_found": {
            "name": "_log_file_found",
            "location": 282,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "acres-master/acres/preprocess/__init__.py": {},
    "acres-master/acres/rater/expansion.py": {
        "_is_schwarzt_hearst_valid": {
            "name": "_is_schwarzt_hearst_valid",
            "location": 9,
            "return": [
                "bool"
            ],
            "arguments": {
                "acro": [
                    "str",
                    "Optional[str]",
                    "dict"
                ],
                "full": [
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "_is_relative_length_valid": {
            "name": "_is_relative_length_valid",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "acro": [
                    "str",
                    "list"
                ],
                "full": [
                    "str",
                    "list"
                ]
            }
        },
        "_is_levenshtein_distance_too_high": {
            "name": "_is_levenshtein_distance_too_high",
            "location": 51,
            "return": [
                "bool"
            ],
            "arguments": {
                "acro": [
                    "float",
                    "str",
                    "int"
                ],
                "full": [
                    "Optional[str]",
                    "bool",
                    "AbstractSet[str]"
                ]
            }
        },
        "_is_possible_expansion": {
            "name": "_is_possible_expansion",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "acro": [
                    "str",
                    "int",
                    "bytes",
                    "Optional[bool]"
                ],
                "full": [
                    "str",
                    "Sequence[T]",
                    "List[int]",
                    "list",
                    "bytearray"
                ]
            }
        },
        "_is_acronym_tail_on_last_word": {
            "name": "_is_acronym_tail_on_last_word",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "acro": [
                    "str",
                    "int",
                    "MutableMapping[str, Any]"
                ],
                "full": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "_is_expansion_initial_acronym": {
            "name": "_is_expansion_initial_acronym",
            "location": 129,
            "return": [
                "bool"
            ],
            "arguments": {
                "acro": [
                    "str",
                    "Dict[str, Any]",
                    "Set[int]",
                    "[[]]"
                ],
                "full": [
                    "str"
                ]
            }
        },
        "_compute_expansion_valid": {
            "name": "_compute_expansion_valid",
            "location": 155,
            "return": [
                "str",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "acro": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "bool"
                ],
                "full": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "is_expansion_valid": {
            "name": "is_expansion_valid",
            "location": 196,
            "return": [
                "str",
                "dict",
                "Optional[str]",
                "Iterable[int]",
                "bool"
            ],
            "arguments": {
                "acro": [
                    "str",
                    "float"
                ],
                "full": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "acres-master/acres/rater/full.py": {
        "_has_parenthesis": {
            "name": "_has_parenthesis",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "full": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_is_full_too_short": {
            "name": "_is_full_too_short",
            "location": 20,
            "return": [
                "bool"
            ],
            "arguments": {
                "full": [
                    "str",
                    "int"
                ]
            }
        },
        "_starts_with_stopword": {
            "name": "_starts_with_stopword",
            "location": 35,
            "return": [
                "bool"
            ],
            "arguments": {
                "full": [
                    "str",
                    "bool"
                ]
            }
        },
        "_has_capitals": {
            "name": "_has_capitals",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {
                "full": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_contain_acronym": {
            "name": "_contain_acronym",
            "location": 59,
            "return": [
                "bool"
            ],
            "arguments": {
                "full": [
                    "str"
                ]
            }
        },
        "_compute_full_valid": {
            "name": "_compute_full_valid",
            "location": 72,
            "return": [
                "str",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "full": [
                    "str",
                    "int",
                    "Iterable[Any]"
                ]
            }
        },
        "is_full_valid": {
            "name": "is_full_valid",
            "location": 105,
            "return": [
                "str",
                "dict",
                "Optional[str]",
                "Iterable[int]",
                "bool"
            ],
            "arguments": {
                "full": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "acres-master/acres/rater/rater.py": {
        "_is_short_form": {
            "name": "_is_short_form",
            "location": 14,
            "return": [
                "bool"
            ],
            "arguments": {
                "acro": [
                    "str"
                ],
                "full": [
                    "str"
                ]
            }
        },
        "_calc_score": {
            "name": "_calc_score",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "acro": [
                    "str",
                    "bytes",
                    "IO",
                    "int"
                ],
                "full": [
                    "str",
                    "Sequence[str]",
                    "List[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "get_acronym_score": {
            "name": "get_acronym_score",
            "location": 64,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "acro": [
                    "str",
                    "Union[Literal, Literal]"
                ],
                "full": [
                    "str",
                    "int",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "acres-master/acres/rater/__init__.py": {},
    "acres-master/acres/resolution/resolver.py": {
        "filtered_resolve": {
            "name": "filtered_resolve",
            "location": 27,
            "return": [
                "typing.Iterator[builtins.str]"
            ],
            "arguments": {
                "acronym": [
                    "Optional[Exception]",
                    "Callable",
                    "int",
                    "str",
                    "Optional[List[Dict]]"
                ],
                "left_context": [
                    "bool"
                ],
                "right_context": [
                    "bool"
                ],
                "strategy": [
                    "bool"
                ]
            }
        },
        "resolve": {
            "name": "resolve",
            "location": 49,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "acronym": [
                    "bool",
                    "List[str]"
                ],
                "left_context": [
                    "bool",
                    "List[str]"
                ],
                "right_context": [
                    "bool",
                    "List[str]"
                ],
                "strategy": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "int",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        }
    },
    "acres-master/acres/resolution/__init__.py": {},
    "acres-master/acres/stats/dictionary.py": {
        "expand": {
            "name": "expand",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "acronym": [
                    "int",
                    "Callable",
                    "str"
                ],
                "left_context": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "right_context": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_tuple2dictionary": {
            "name": "_tuple2dictionary",
            "location": 30,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "senses": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 47,
            "return": [
                "str",
                "int",
                "bytes"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "_dump_sample": {
            "name": "_dump_sample",
            "location": 57,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "max_len": [
                    "int",
                    "Optional[int]",
                    "str"
                ],
                "min_len": [
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "show_extremes": {
            "name": "show_extremes",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "txt": [
                    "str",
                    "float",
                    "int"
                ],
                "lst": [
                    "list",
                    "int",
                    "List[int]",
                    "bool",
                    "str"
                ],
                "lowest_n": [
                    "int",
                    "str",
                    "list",
                    "List[int]"
                ],
                "highest_n": [
                    "int",
                    "str",
                    "list",
                    "List[int]"
                ]
            }
        },
        "ratio_acro_words": {
            "name": "ratio_acro_words",
            "location": 106,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "acro": [
                    "int",
                    "list",
                    "bool",
                    "List[str]",
                    "str"
                ],
                "full": [
                    "str",
                    "bytes"
                ]
            }
        },
        "edit_distance_generated_acro": {
            "name": "edit_distance_generated_acro",
            "location": 121,
            "return": [
                "bool",
                "List[str]",
                "Set[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "acro": [
                    "tuple",
                    "int",
                    "List[str]",
                    "Mapping[str, Any]",
                    "str",
                    "Mapping[str, List[str]]"
                ],
                "full": [
                    "IO[str]",
                    "bytes",
                    "str"
                ]
            }
        },
        "analyze_file": {
            "name": "analyze_file",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        }
    },
    "acres-master/acres/stats/senses.py": {
        "bucketize": {
            "name": "bucketize",
            "location": 10,
            "return": [
                "str",
                "Set[str]",
                "int"
            ],
            "arguments": {
                "acronyms": [
                    "Dict[str, object]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, int]]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "map_senses_acronym": {
            "name": "map_senses_acronym",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "standard": [
                    "Dict[str, object]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, int]]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]"
                ],
                "lenient": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "get_sense_buckets": {
            "name": "get_sense_buckets",
            "location": 43,
            "return": [
                "List[str]",
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "print_ambiguous": {
            "name": "print_ambiguous",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "int"
                ]
            }
        },
        "print_undefined": {
            "name": "print_undefined",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "int"
                ]
            }
        },
        "print_senses": {
            "name": "print_senses",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "acres-master/acres/stats/stats.py": {
        "get_stats": {
            "name": "get_stats",
            "location": 143,
            "return": [
                "str",
                "Iterable[Tuple[str, str]]"
            ],
            "arguments": {
                "corpus_path": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "print_stats": {
            "name": "print_stats",
            "location": 165,
            "return": [
                "Optional[str]",
                "type",
                "Optional[List[Any]]",
                "list"
            ],
            "arguments": {}
        },
        "Stats.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stats.calc_stats": {
            "name": "calc_stats",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Stats.count_chars": {
            "name": "count_chars",
            "location": 41,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "Stats.count_types": {
            "name": "count_types",
            "location": 51,
            "return": [],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "Stats.count_tokens": {
            "name": "count_tokens",
            "location": 64,
            "return": [
                "str",
                "Type[Any]",
                "List[str]"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "Stats.count_acronyms": {
            "name": "count_acronyms",
            "location": 74,
            "return": [
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "Stats.count_acronyms_types": {
            "name": "count_acronyms_types",
            "location": 86,
            "return": [
                "bool",
                "Optional[List[\"custom_index\"]]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "Stats.count_sentences": {
            "name": "count_sentences",
            "location": 98,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "Stats._get_acronyms": {
            "name": "_get_acronyms",
            "location": 113,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "text": [
                    "str"
                ]
            }
        },
        "Stats.__str__": {
            "name": "__str__",
            "location": 120,
            "return": [
                "int",
                "float",
                "str",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Stats.__add__": {
            "name": "__add__",
            "location": 130,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "str",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "Stats.__radd__": {
            "name": "__radd__",
            "location": 139,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "dict",
                    "AbstractSet[T]",
                    "AbstractSet[T_co]"
                ]
            }
        }
    },
    "acres-master/acres/stats/__init__.py": {},
    "acres-master/acres/util/acronym.py": {
        "is_acronym": {
            "name": "is_acronym",
            "location": 15,
            "return": [],
            "arguments": {
                "str_probe": [],
                "max_length": []
            }
        },
        "create_german_acronym": {
            "name": "create_german_acronym",
            "location": 39,
            "return": [],
            "arguments": {
                "full": []
            }
        },
        "trim_plural": {
            "name": "trim_plural",
            "location": 59,
            "return": [],
            "arguments": {
                "acronym": []
            }
        }
    },
    "acres-master/acres/util/functions.py": {
        "import_conf": {
            "name": "import_conf",
            "location": 15,
            "return": [],
            "arguments": {
                "key": []
            }
        },
        "create_ngram_statistics": {
            "name": "create_ngram_statistics",
            "location": 29,
            "return": [],
            "arguments": {
                "input_string": [],
                "n_min": [],
                "n_max": []
            }
        },
        "is_stopword": {
            "name": "is_stopword",
            "location": 67,
            "return": [],
            "arguments": {
                "str_in": []
            }
        },
        "robust_text_import_from_dir": {
            "name": "robust_text_import_from_dir",
            "location": 110,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "partition": {
            "name": "partition",
            "location": 139,
            "return": [],
            "arguments": {
                "word": [],
                "partitions": []
            }
        },
        "sample": {
            "name": "sample",
            "location": 158,
            "return": [],
            "arguments": {
                "iterable": [],
                "chance": []
            }
        }
    },
    "acres-master/acres/util/text.py": {
        "clear_digits": {
            "name": "clear_digits",
            "location": 9,
            "return": [],
            "arguments": {
                "str_in": [],
                "substitute_char": []
            }
        },
        "reduce_repeated_chars": {
            "name": "reduce_repeated_chars",
            "location": 29,
            "return": [],
            "arguments": {
                "str_in": [],
                "char": [],
                "remaining_chars": []
            }
        },
        "remove_duplicated_whitespaces": {
            "name": "remove_duplicated_whitespaces",
            "location": 50,
            "return": [],
            "arguments": {
                "whitespaced": []
            }
        },
        "clean_whitespaces": {
            "name": "clean_whitespaces",
            "location": 61,
            "return": [],
            "arguments": {
                "whitespaced": []
            }
        },
        "clean": {
            "name": "clean",
            "location": 71,
            "return": [],
            "arguments": {
                "text": [],
                "preserve_linebreaks": []
            }
        }
    },
    "acres-master/acres/util/__init__.py": {},
    "acres-master/acres/word2vec/test.py": {
        "find_candidates": {
            "name": "find_candidates",
            "location": 14,
            "return": [
                "bool",
                "str",
                "int",
                "zam_repondeur.models.Lecture",
                "complex"
            ],
            "arguments": {
                "acronym": [
                    "str"
                ],
                "left_context": [
                    "str",
                    "bool",
                    "T"
                ],
                "right_context": [
                    "str",
                    "bool",
                    "T"
                ],
                "min_distance": [
                    "int",
                    "float",
                    "Tuple[int]"
                ],
                "max_rank": [
                    "int",
                    "float",
                    "Tuple[int]"
                ]
            }
        },
        "_most_similar": {
            "name": "_most_similar",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "model": [
                    "int",
                    "models.cf_recommend_models.ICfRecommendationModel",
                    "List[Tuple[int, int, float]]",
                    "allennlp.models.Model"
                ],
                "positive": [
                    "int",
                    "models.cf_recommend_models.ICfRecommendationModel",
                    "List[Tuple[int, int, float]]",
                    "allennlp.models.Model"
                ]
            }
        }
    },
    "acres-master/acres/word2vec/train.py": {
        "train": {
            "name": "train",
            "location": 21,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "ngram_size": [
                    "Optional[int]",
                    "int",
                    "List[str]"
                ],
                "min_count": [
                    "int",
                    "Tuple[int, int]",
                    "float"
                ],
                "net_size": [
                    "int",
                    "Tuple[int, int]",
                    "float"
                ],
                "alpha": [
                    "int",
                    "Tuple[int, int]",
                    "float"
                ],
                "sg": [
                    "int",
                    "Tuple[int, int]",
                    "float"
                ],
                "hs": [
                    "int",
                    "Tuple[int, int]",
                    "float"
                ],
                "negative": [
                    "int",
                    "Tuple[int, int]",
                    "float"
                ]
            }
        }
    },
    "acres-master/acres/word2vec/__init__.py": {},
    "acres-master/docs/conf.py": {},
    "acres-master/tests/conftest.py": {
        "delete_models": {
            "name": "delete_models",
            "location": 10,
            "return": [],
            "arguments": {}
        },
        "_delete_contents": {
            "name": "_delete_contents",
            "location": 16,
            "return": [],
            "arguments": {
                "folder": []
            }
        },
        "path_resource_factory": {
            "name": "path_resource_factory",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "word2vec_workers": {
            "name": "word2vec_workers",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "ngramstat": {
            "name": "ngramstat",
            "location": 37,
            "return": [],
            "arguments": {}
        },
        "word_ngrams": {
            "name": "word_ngrams",
            "location": 56,
            "return": [],
            "arguments": {}
        }
    },
    "acres-master/tests/test_config.py": {
        "test_config": {
            "name": "test_config",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "acres-master/tests/__init__.py": {},
    "acres-master/tests/benchmark/conftest.py": {
        "path_resource_factory": {
            "name": "path_resource_factory",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "real_data": {
            "name": "real_data",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "acres-master/tests/benchmark/test_benchmark.py": {
        "test_fixture": {
            "name": "test_fixture",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_word_ngrams": {
            "name": "test_get_word_ngrams",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_evaluation": {
            "name": "test_evaluation",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "acres-master/tests/benchmark/__init__.py": {},
    "acres-master/tests/evaluation/test_evaluation.py": {
        "test_do_analysis": {
            "name": "test_do_analysis",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "ngramstat": [
                    "List[str]"
                ],
                "capsys": [
                    "Type",
                    "Iterable[Any]"
                ]
            }
        }
    },
    "acres-master/tests/evaluation/__init__.py": {},
    "acres-master/tests/fastngram/test_fastngram.py": {
        "test_expand": {
            "name": "test_expand",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "word_ngrams": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test_expand_type": {
            "name": "test_expand_type",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "word_ngrams": [
                    "str",
                    "int"
                ]
            }
        },
        "test_baseline": {
            "name": "test_baseline",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "word_ngrams": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "test__generate_ngram_contexts": {
            "name": "test__generate_ngram_contexts",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test__generate_acronym_contexts": {
            "name": "test__generate_acronym_contexts",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "acres-master/tests/model/test_detection_standard.py": {
        "test_parse": {
            "name": "test_parse",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_parse_valid": {
            "name": "test_parse_valid",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_update": {
            "name": "test_update",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_write": {
            "name": "test_write",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "acres-master/tests/model/test_expansion_standard.py": {
        "test_write_results": {
            "name": "test_write_results",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "ngramstat": [
                    "util.photolib.workspace.Workspace"
                ]
            }
        }
    },
    "acres-master/tests/model/test_ngrams.py": {
        "test_filter_acronym_contexts": {
            "name": "test_filter_acronym_contexts",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "acres-master/tests/model/test_topic_list.py": {
        "test_parse": {
            "name": "test_parse",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_create_topic_list": {
            "name": "test_create_topic_list",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "ngramstat": []
            }
        }
    },
    "acres-master/tests/model/__init__.py": {},
    "acres-master/tests/preprocess/test_dumps.py": {
        "test_create_corpus_ngramstat_dump": {
            "name": "test_create_corpus_ngramstat_dump",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "acres-master/tests/preprocess/test_resource_factory.py": {
        "test_fixture": {
            "name": "test_fixture",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_get_ngramstat": {
            "name": "test_get_ngramstat",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": [
                    "str"
                ],
                "ngramstat": [
                    "str",
                    "bool"
                ]
            }
        },
        "test_get_ngramstat.mockreturn": {
            "name": "mockreturn",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "word_ngrams": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "acres-master/tests/preprocess/__init__.py": {},
    "acres-master/tests/rater/test_expansion.py": {
        "test__is_possible_expansion": {
            "name": "test__is_possible_expansion",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test__is_acronym_tail_on_last_word": {
            "name": "test__is_acronym_tail_on_last_word",
            "location": 39,
            "return": [],
            "arguments": {}
        },
        "test__is_expansion_initial_acronym": {
            "name": "test__is_expansion_initial_acronym",
            "location": 52,
            "return": [],
            "arguments": {}
        },
        "test__compute_expansion_valid": {
            "name": "test__compute_expansion_valid",
            "location": 66,
            "return": [],
            "arguments": {}
        }
    },
    "acres-master/tests/rater/test_full.py": {
        "test__contain_acronym": {
            "name": "test__contain_acronym",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test__compute_full_valid": {
            "name": "test__compute_full_valid",
            "location": 14,
            "return": [],
            "arguments": {}
        }
    },
    "acres-master/tests/rater/test_rater.py": {
        "test__calc_score": {
            "name": "test__calc_score",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test_get_acronym_score": {
            "name": "test_get_acronym_score",
            "location": 23,
            "return": [],
            "arguments": {}
        }
    },
    "acres-master/tests/stats/test_dictionary.py": {
        "test_dump_sample": {
            "name": "test_dump_sample",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test_show_extremes": {
            "name": "test_show_extremes",
            "location": 10,
            "return": [],
            "arguments": {
                "capsys": []
            }
        },
        "test_ratio_acro_words": {
            "name": "test_ratio_acro_words",
            "location": 24,
            "return": [],
            "arguments": {}
        },
        "test_edit_distance_generated_acro": {
            "name": "test_edit_distance_generated_acro",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "test_analyze_file": {
            "name": "test_analyze_file",
            "location": 45,
            "return": [],
            "arguments": {
                "capsys": []
            }
        }
    },
    "acres-master/tests/stats/test_senses.py": {
        "test_print_senses": {
            "name": "test_print_senses",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "capsys": [
                    "str",
                    "float"
                ]
            }
        },
        "test_print_ambiguous": {
            "name": "test_print_ambiguous",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "capsys": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "acres-master/tests/stats/test_stats.py": {
        "test_get_stats": {
            "name": "test_get_stats",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_print_stats": {
            "name": "test_print_stats",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "capsys": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "acres-master/tests/util/test_acronym.py": {
        "test_is_acronym": {
            "name": "test_is_acronym",
            "location": 4,
            "return": [],
            "arguments": {}
        },
        "test_create_german_acronym": {
            "name": "test_create_german_acronym",
            "location": 31,
            "return": [],
            "arguments": {}
        },
        "test_trim_plural": {
            "name": "test_trim_plural",
            "location": 59,
            "return": [],
            "arguments": {}
        }
    },
    "acres-master/tests/util/test_functions.py": {
        "test_import_conf": {
            "name": "test_import_conf",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_create_ngram_statistics": {
            "name": "test_create_ngram_statistics",
            "location": 11,
            "return": [],
            "arguments": {}
        },
        "test_robust_text_import_from_dir": {
            "name": "test_robust_text_import_from_dir",
            "location": 45,
            "return": [],
            "arguments": {}
        },
        "test__partition": {
            "name": "test__partition",
            "location": 51,
            "return": [],
            "arguments": {}
        },
        "test_sample": {
            "name": "test_sample",
            "location": 69,
            "return": [],
            "arguments": {}
        }
    },
    "acres-master/tests/util/test_text.py": {
        "test_remove_duplicated_whitespaces": {
            "name": "test_remove_duplicated_whitespaces",
            "location": 5,
            "return": [],
            "arguments": {}
        },
        "test_clean": {
            "name": "test_clean",
            "location": 11,
            "return": [],
            "arguments": {}
        }
    },
    "acres-master/tests/util/__init__.py": {},
    "acres-master/tests/word2vec/test_word2vec.py": {
        "test_nn": {
            "name": "test_nn",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "ngramstat": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "acres-master/tests/word2vec/__init__.py": {}
}
{
    "actioner-master/actioner/clients.py": {
        "get_todoist_client": {
            "name": "get_todoist_client",
            "location": 9,
            "return": [
                "dict",
                "str",
                "Dict[str, Any]",
                "float",
                "int"
            ],
            "arguments": {}
        }
    },
    "actioner-master/actioner/main.py": {
        "cli": {
            "name": "cli",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "start": {
            "name": "start",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "once": {
            "name": "once",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "actioner-master/actioner/settings.py": {},
    "actioner-master/actioner/__init__.py": {},
    "actioner-master/actioner/__main__.py": {},
    "actioner-master/actioner/cli/__init__.py": {
        "list_todoist_projects": {
            "name": "list_todoist_projects",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "actioner-master/actioner/scheduler/todoist_assigned_issues.py": {
        "get_status_for_issue": {
            "name": "get_status_for_issue",
            "location": 15,
            "return": [
                "Callable",
                "float",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "issue": [
                    "dict",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "cmk.utils.type_defs.UserId",
                    "str"
                ]
            }
        },
        "issue_to_task_name": {
            "name": "issue_to_task_name",
            "location": 20,
            "return": [
                "str",
                "Union[str, int]",
                "Set[str]",
                "list",
                "Optional[int]"
            ],
            "arguments": {
                "issue": [
                    "str",
                    "dict",
                    "tuple"
                ]
            }
        },
        "todoist_assigned_issues": {
            "name": "todoist_assigned_issues",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "actioner-master/actioner/scheduler/todoist_repo_prs.py": {
        "pr_to_task_name": {
            "name": "pr_to_task_name",
            "location": 13,
            "return": [
                "bool",
                "str",
                "cmk.utils.type_defs.UserId",
                "bytes",
                "int"
            ],
            "arguments": {
                "pr": [
                    "str",
                    "dict",
                    "tuple"
                ]
            }
        },
        "get_my_review": {
            "name": "get_my_review",
            "location": 17,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "me": [
                    "Sequence[str]",
                    "str",
                    "int",
                    "List[str]"
                ],
                "pr": [
                    "str",
                    "float"
                ]
            }
        },
        "get_my_review_requested": {
            "name": "get_my_review_requested",
            "location": 23,
            "return": [
                "bool"
            ],
            "arguments": {
                "me": [
                    "int",
                    "List[str]",
                    "bytes",
                    "str"
                ],
                "pr": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "todoist_repo_prs": {
            "name": "todoist_repo_prs",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "actioner-master/actioner/scheduler/__init__.py": {
        "create_scheduler": {
            "name": "create_scheduler",
            "location": 9,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        }
    },
    "actioner-master/actioner/utils/github.py": {
        "get_issue_link": {
            "name": "get_issue_link",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "issue_or_pr": [
                    "dict",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "get_existing_task": {
            "name": "get_existing_task",
            "location": 13,
            "return": [
                "str",
                "Optional[str]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "tasks": [
                    "Dict[int, str]",
                    "dict",
                    "str",
                    "Union[str, dict]"
                ],
                "issue_or_pr": []
            }
        },
        "get_relevant_issues": {
            "name": "get_relevant_issues",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "get_relevant_prs": {
            "name": "get_relevant_prs",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "actioner-master/actioner/utils/todoist.py": {
        "is_task_completed": {
            "name": "is_task_completed",
            "location": 4,
            "return": [
                "Dict[str, Any]",
                "str",
                "List[str]",
                "Callable",
                "viewer.models.Gallery",
                "int"
            ],
            "arguments": {
                "task": [
                    "taskiapplication.models.task.Task",
                    "bool",
                    "dict",
                    "Dict[str, Any]",
                    "Callable"
                ]
            }
        },
        "get_existing_tasks": {
            "name": "get_existing_tasks",
            "location": 14,
            "return": [
                "List[str]",
                "dict",
                "List[List[Any]]",
                "List[int]",
                "Set[int]"
            ],
            "arguments": {
                "project_id": [
                    "str",
                    "Optional[str]",
                    "int",
                    "List[\"libkol.Item\"]"
                ],
                "todoist": [
                    "str",
                    "Optional[str]",
                    "int",
                    "List[\"libkol.Item\"]"
                ]
            }
        }
    },
    "actioner-master/actioner/utils/__init__.py": {
        "get_todoist_project_from_repo": {
            "name": "get_todoist_project_from_repo",
            "location": 9,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "Tuple[str]"
            ],
            "arguments": {
                "repo_name": [
                    "str"
                ]
            }
        }
    },
    "actioner-master/actioner/web/healthcheck.py": {},
    "actioner-master/actioner/web/__init__.py": {
        "get_server": {
            "name": "get_server",
            "location": 23,
            "return": [],
            "arguments": {}
        },
        "run_server": {
            "name": "run_server",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "server": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "actioner-master/tests/__init__.py": {},
    "actioner-master/tests/test_utils/test_github.py": {
        "IssueLinkTestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "IssueLinkTestCase.test_creates_link": {
            "name": "test_creates_link",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ExistingTaskTestCase.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ExistingTaskTestCase.test_finds_existing_repos": {
            "name": "test_finds_existing_repos",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ExistingTaskTestCase.test_not_existing_repo": {
            "name": "test_not_existing_repo",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "actioner-master/tests/test_utils/test_init.py": {
        "TodoistProjectToRepoTestCase.test_repos_exist": {
            "name": "test_repos_exist",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TodoistProjectToRepoTestCase.test_gets_correct_project": {
            "name": "test_gets_correct_project",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TodoistProjectToRepoTestCase.test_gets_correct_project_for_org": {
            "name": "test_gets_correct_project_for_org",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TodoistProjectToRepoTestCase.test_organization_exists": {
            "name": "test_organization_exists",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TodoistProjectToRepoTestCase.test_project_exists": {
            "name": "test_project_exists",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
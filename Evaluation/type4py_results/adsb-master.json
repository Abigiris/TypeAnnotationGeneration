{
    "adsb-master/setup.py": {},
    "adsb-master/docs/source/conf.py": {
        "run_apidoc": {
            "name": "run_apidoc",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "_": [
                    "str",
                    "bool"
                ]
            }
        },
        "setup": {
            "name": "setup",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "dict"
                ]
            }
        }
    },
    "adsb-master/examples/sbs/sbs-client.py": {
        "handle_raw_msg": {
            "name": "handle_raw_msg",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "msg": [
                    "str",
                    "bytes"
                ]
            }
        },
        "handle_parsed_msg": {
            "name": "handle_parsed_msg",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "msg": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "signal_handler": {
            "name": "signal_handler",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "signame": [
                    "bool",
                    "float",
                    "int",
                    "str"
                ],
                "client": [
                    "bool",
                    "str",
                    "List[Tuple[int, str]]",
                    "Callable"
                ],
                "loop": [
                    "bool",
                    "float"
                ]
            }
        }
    },
    "adsb-master/examples/sbs/sbs-session.py": {
        "handle_raw_msg": {
            "name": "handle_raw_msg",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "msg": [
                    "str",
                    "bytes"
                ]
            }
        },
        "handle_parsed_msg": {
            "name": "handle_parsed_msg",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "msg": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "signal_handler": {
            "name": "signal_handler",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "signame": [
                    "float",
                    "Dict[str, str]"
                ],
                "session": [
                    "str",
                    "asyncio.Semaphore"
                ],
                "loop": [
                    "str",
                    "bool",
                    "Tuple[float, float]"
                ]
            }
        }
    },
    "adsb-master/examples/sbs/kml/server.py": {
        "KMLServer.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "import_name": [
                    "str"
                ],
                "sbs_host": [
                    "str",
                    "bool",
                    "Tuple[str]"
                ],
                "sbs_port": [
                    "bool",
                    "str",
                    "float",
                    "list",
                    "Optional[bool]"
                ],
                "location": [
                    "str",
                    "bool",
                    "Tuple[str]"
                ],
                "refresh_interval": [
                    "str",
                    "bool",
                    "Tuple[str]"
                ],
                "kmz": [
                    "bool",
                    "str",
                    "List[int]"
                ]
            }
        }
    },
    "adsb-master/src/adsb/constants.py": {},
    "adsb-master/src/adsb/mypy_types.py": {},
    "adsb-master/src/adsb/utils.py": {
        "haversine_distance": {
            "name": "haversine_distance",
            "location": 8,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "origin": [
                    "mypy_types.PositionType",
                    "Optional[bool]",
                    "bool",
                    "Optional[float]"
                ],
                "destination": [
                    "mypy_types.PositionType",
                    "Optional[bool]",
                    "bool",
                    "Optional[float]"
                ]
            }
        },
        "feet_to_meters": {
            "name": "feet_to_meters",
            "location": 36,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "feet": [
                    "int",
                    "float",
                    "str",
                    "List[int]",
                    "List[List[str]]"
                ]
            }
        },
        "knots_to_kmh": {
            "name": "knots_to_kmh",
            "location": 45,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "str"
            ],
            "arguments": {
                "knots": [
                    "int",
                    "float",
                    "str",
                    "List[int]",
                    "List[List[str]]"
                ]
            }
        },
        "knots_to_mps": {
            "name": "knots_to_mps",
            "location": 56,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "knots": [
                    "bytes",
                    "int",
                    "IO",
                    "List[str]",
                    "str"
                ]
            }
        },
        "make_geodesic_circle": {
            "name": "make_geodesic_circle",
            "location": 67,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "center": [
                    "mypy_types.PositionType",
                    "bool",
                    "Union['IndexBase', 'Series']"
                ],
                "radius": [
                    "int",
                    "float",
                    "Union[str, float]"
                ],
                "num_points": [
                    "int",
                    "Iterator[int]",
                    "float"
                ]
            }
        }
    },
    "adsb-master/src/adsb/__init__.py": {},
    "adsb-master/src/adsb/sbs/aircraft.py": {
        "Aircraft.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hex_ident": [
                    "float",
                    "int"
                ],
                "history_size": [
                    "float",
                    "int"
                ],
                "history_interval": [
                    "int",
                    "datetime.date",
                    "float",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]",
                    "Optional[datetime.timedelta]"
                ]
            }
        },
        "Aircraft.position": {
            "name": "position",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aircraft.distance": {
            "name": "distance",
            "location": 78,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aircraft.__str__": {
            "name": "__str__",
            "location": 87,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "Aircraft.update_ident": {
            "name": "update_ident",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "callsign": [
                    "float",
                    "str",
                    "datetime.timedelta",
                    "int",
                    "bool"
                ],
                "timestamp": [
                    "float",
                    "str",
                    "datetime.timedelta",
                    "int",
                    "bool"
                ]
            }
        },
        "Aircraft.update_motion": {
            "name": "update_motion",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ground_speed": [
                    "float",
                    "str",
                    "datetime.timedelta",
                    "int",
                    "bool"
                ],
                "track": [
                    "float",
                    "str",
                    "datetime.timedelta",
                    "int",
                    "bool"
                ],
                "vertical_rate": [
                    "float",
                    "str",
                    "datetime.timedelta",
                    "int",
                    "bool"
                ],
                "timestamp": [
                    "float",
                    "str",
                    "datetime.timedelta",
                    "int",
                    "bool"
                ]
            }
        },
        "Aircraft.update_position": {
            "name": "update_position",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "alt": [
                    "float",
                    "Sequence['cirq.Qid']"
                ],
                "lat": [
                    "float",
                    "Sequence['cirq.Qid']"
                ],
                "lon": [
                    "float",
                    "Sequence['cirq.Qid']"
                ],
                "timestamp": [
                    "List[Mapping[str, Any]]",
                    "str"
                ]
            }
        },
        "Aircraft.update_altitude": {
            "name": "update_altitude",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "alt": [
                    "float",
                    "str",
                    "datetime.timedelta",
                    "int",
                    "bool"
                ],
                "timestamp": [
                    "float",
                    "str",
                    "datetime.timedelta",
                    "int",
                    "bool"
                ]
            }
        },
        "Aircraft.update_details": {
            "name": "update_details",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "details": [
                    "float",
                    "str",
                    "datetime.timedelta",
                    "int",
                    "bool"
                ]
            }
        },
        "Aircraft.path": {
            "name": "path",
            "location": 155,
            "return": [
                "str",
                "List[Dict]",
                "list",
                "Optional[Type]",
                "List[str]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adsb-master/src/adsb/sbs/archive.py": {
        "read_archive": {
            "name": "read_archive",
            "location": 202,
            "return": [
                ""
            ],
            "arguments": {
                "archive_file": [
                    "str",
                    "bool"
                ]
            }
        },
        "RotatingArchiveFileHandler.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "mode": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "Iterable[Iterable]",
                    "Iterable",
                    "float"
                ],
                "maxBytes": [
                    "int",
                    "float",
                    "bool",
                    "Union[int, float]",
                    "str"
                ],
                "backupCount": [
                    "int",
                    "str",
                    "List[str]",
                    "List[int]",
                    "bool"
                ],
                "encoding": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "Iterable[Iterable]",
                    "Iterable",
                    "float"
                ]
            }
        },
        "RotatingArchiveFileHandler.flush": {
            "name": "flush",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RotatingArchiveFileHandler.close": {
            "name": "close",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RotatingArchiveFileHandler._open": {
            "name": "_open",
            "location": 89,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "RotatingArchiveFileHandler.emit": {
            "name": "emit",
            "location": 96,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "RotatingArchiveFileHandler.rotation_filename": {
            "name": "rotation_filename",
            "location": 125,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Tuple[Any, Any]]",
                "List[Tuple[str, str]]",
                "Pattern[str]"
            ],
            "arguments": {
                "self": [],
                "default_name": [
                    "str",
                    "Dict[str, 'LabwareDefinition']",
                    "Mapping[str, Any]"
                ]
            }
        },
        "RotatingArchiveFileHandler.rotate": {
            "name": "rotate",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "source": [
                    "str",
                    "Optional[str]"
                ],
                "dest": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "RotatingArchiveFileHandler.doRollover": {
            "name": "doRollover",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RotatingArchiveFileHandler.shouldRollover": {
            "name": "shouldRollover",
            "location": 185,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "adsb-master/src/adsb/sbs/client.py": {
        "Client.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "bool",
                    "float"
                ],
                "port": [
                    "int",
                    "bool",
                    "float"
                ],
                "on_raw_msg_callback": [
                    "asyncio.StreamReader",
                    "asyncio.StreamWriter",
                    "str",
                    "int",
                    "Optional[asyncio.AbstractEventLoop]",
                    "confluent_kafka_helpers.message.Message"
                ],
                "on_msg_callback": [
                    "int",
                    "bool",
                    "float"
                ],
                "record": [
                    "dict",
                    "bytes",
                    "List[str]"
                ],
                "record_file": [
                    "Optional[str]",
                    "str",
                    "Optional[int]",
                    "Optional[Iterable[str]]",
                    "int"
                ],
                "loop": [
                    "str"
                ]
            }
        },
        "Client.start_recording": {
            "name": "start_recording",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record_file": [
                    "str",
                    "Dict[int, Set[str]]",
                    "int",
                    "bool"
                ],
                "maxBytes": [
                    "int",
                    "bool",
                    "Union[None, bytes]"
                ],
                "backupCount": [
                    "int",
                    "bool",
                    "Union[None, bytes]"
                ]
            }
        },
        "Client.stop_recording": {
            "name": "stop_recording",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Client._on_sbs_message": {
            "name": "_on_sbs_message",
            "location": 133,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": [],
                "msg_data": [
                    "bytes",
                    "dict",
                    "str"
                ]
            }
        }
    },
    "adsb-master/src/adsb/sbs/json_utils.py": {
        "loads": {
            "name": "loads",
            "location": 77,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "line": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "dumps": {
            "name": "dumps",
            "location": 86,
            "return": [
                "Dict[str, Any]",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "m": [
                    "int",
                    "bool",
                    "str",
                    "Iterable[Sequence[Any]]",
                    "Iterable[Tuple[str, ...]]",
                    "dict"
                ],
                "indent": [
                    "int",
                    "bool",
                    "str",
                    "Iterable[Sequence[Any]]",
                    "Iterable[Tuple[str, ...]]",
                    "dict"
                ],
                "sort_keys": [
                    "int",
                    "bool",
                    "str",
                    "Iterable[Sequence[Any]]",
                    "Iterable[Tuple[str, ...]]",
                    "dict"
                ]
            }
        },
        "DateTimeAwareEncoder.default": {
            "name": "default",
            "location": 15,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[str]",
                    "str",
                    "int",
                    "datetime.timedelta"
                ]
            }
        },
        "DateTimeAwareDecoder.__init__": {
            "name": "__init__",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DateTimeAwareDecoder.dict_to_object": {
            "name": "dict_to_object",
            "location": 59,
            "return": [
                "datetime.datetime",
                "Union[datetime.datetime, str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "d": [
                    "Optional[datetime.datetime]",
                    "Month.datetime",
                    "Dict[str, Any]",
                    "datetime.datetime",
                    "float",
                    "pymap.parsing.message.AppendMessage"
                ]
            }
        }
    },
    "adsb-master/src/adsb/sbs/message.py": {
        "fromString": {
            "name": "fromString",
            "location": 162,
            "return": [
                "str",
                "int",
                "Optional[Dict]",
                "float",
                "Optional[int]"
            ],
            "arguments": {
                "line": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "toString": {
            "name": "toString",
            "location": 216,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "m": [
                    "str",
                    "Dict[str, Tuple[str, Any]]"
                ]
            }
        }
    },
    "adsb-master/src/adsb/sbs/protocol.py": {
        "SBSProtocol.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "on_msg_callback": [
                    "int",
                    "bool",
                    "float"
                ],
                "loop": [
                    "str"
                ]
            }
        },
        "SBSProtocol.connection_made": {
            "name": "connection_made",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "asyncio.BaseTransport",
                    "bool"
                ]
            }
        },
        "SBSProtocol.connection_lost": {
            "name": "connection_lost",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "str",
                    "bytes",
                    "Exception"
                ]
            }
        },
        "SBSProtocol.data_received": {
            "name": "data_received",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "float",
                    "Mapping[str, Any]",
                    "list",
                    "bytes"
                ]
            }
        },
        "SBSProtocol.close": {
            "name": "close",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SBSServerProtocol.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "server": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SBSServerProtocol.connection_made": {
            "name": "connection_made",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "transport": [
                    "str",
                    "dict",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "SBSServerProtocol.connection_lost": {
            "name": "connection_lost",
            "location": 108,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "SBSServerProtocol.close": {
            "name": "close",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SBSServerProtocol.data_received": {
            "name": "data_received",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "SBSServerProtocol.send_message": {
            "name": "send_message",
            "location": 133,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "T",
                    "bytes",
                    "Dict[str, Any]"
                ],
                "add_delimiter": [
                    "bool"
                ]
            }
        }
    },
    "adsb-master/src/adsb/sbs/server.py": {
        "Server.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "int",
                    "bool",
                    "float"
                ],
                "port": [
                    "int",
                    "Optional[int]",
                    "float"
                ],
                "backlog": [
                    "int",
                    "bool",
                    "float"
                ],
                "loop": [
                    "str"
                ]
            }
        },
        "Server.register_protocol": {
            "name": "register_protocol",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "peer": [
                    "int",
                    "Callable",
                    "str"
                ],
                "prot": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Server.deregister_protocol": {
            "name": "deregister_protocol",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "peer": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Server.send_message": {
            "name": "send_message",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "List[str]",
                    "bytes"
                ],
                "peer": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "adsb-master/src/adsb/sbs/session.py": {
        "Session.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "record": [
                    "bool",
                    "str",
                    "Optional[int]",
                    "dict"
                ],
                "record_file": [
                    "Optional[str]",
                    "str",
                    "int"
                ],
                "cache_enabled": [
                    "str"
                ],
                "cache_file": [
                    "str",
                    "float"
                ],
                "session_threshold_minutes": [
                    "int",
                    "str",
                    "datetime.datetime",
                    "bool"
                ],
                "check_interval": [
                    "bool",
                    "List[int]",
                    "Set[str]"
                ],
                "origin": [
                    "bool",
                    "float",
                    "str",
                    "int"
                ],
                "loop": [
                    "bool",
                    "int"
                ]
            }
        },
        "Session.start_recording": {
            "name": "start_recording",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "record_file": [
                    "str",
                    "Dict[int, Set[str]]",
                    "int",
                    "bool"
                ],
                "maxBytes": [
                    "int",
                    "bool",
                    "Union[None, bytes]"
                ],
                "backupCount": [
                    "int",
                    "bool",
                    "Union[None, bytes]"
                ]
            }
        },
        "Session.stop_recording": {
            "name": "stop_recording",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Session.on_sbs_message": {
            "name": "on_sbs_message",
            "location": 205,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "msg_str": [
                    "str",
                    "int",
                    "IO[str]",
                    "Optional[str]"
                ]
            }
        },
        "Session.load_aircraft_cache": {
            "name": "load_aircraft_cache",
            "location": 269,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Session.discard_lost_aircraft": {
            "name": "discard_lost_aircraft",
            "location": 288,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "aircraft_dict": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "adsb-master/src/adsb/sbs/__init__.py": {},
    "adsb-master/tests/test_basic.py": {
        "BasicTestCase.test_basic": {
            "name": "test_basic",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "BasicTestCase.test_version": {
            "name": "test_version",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "adsb-master/tests/test_client_server.py": {},
    "adsb-master/tests/test_json_utils.py": {
        "JsonUtilsTestCase.test_json_roundtrip": {
            "name": "test_json_roundtrip",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adsb-master/tests/test_message.py": {
        "MessageTestCase.test_message_roundtrip": {
            "name": "test_message_roundtrip",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adsb-master/tests/test_server.py": {}
}
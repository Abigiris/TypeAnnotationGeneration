{
    "adventofcode-main/2018/aoc/__init__.py": {},
    "adventofcode-main/2018/aoc/d1/main.py": {
        "sum_up": {
            "name": "sum_up",
            "location": 1,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "first_repetition": {
            "name": "first_repetition",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "read_input": {
            "name": "read_input",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "adventofcode-main/2018/aoc/d1/test.py": {
        "ActuatorTestCase.test_sum_up": {
            "name": "test_sum_up",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActuatorTestCase.test_first_repetition_a": {
            "name": "test_first_repetition_a",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActuatorTestCase.test_first_repetition_b": {
            "name": "test_first_repetition_b",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActuatorTestCase.test_first_repetition_c": {
            "name": "test_first_repetition_c",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "ActuatorTestCase.test_first_repetition_d": {
            "name": "test_first_repetition_d",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d1/__init__.py": {},
    "adventofcode-main/2018/aoc/d10/main.py": {
        "_parse_coordinates": {
            "name": "_parse_coordinates",
            "location": 65,
            "return": [
                "int",
                "str",
                "Tuple[int, int]",
                "Set[str]",
                "List[str]"
            ],
            "arguments": {}
        },
        "_parse_coordinate": {
            "name": "_parse_coordinate",
            "location": 70,
            "return": [
                "str",
                "int",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "numbers": [
                    "int",
                    "Tuple[int, int, int, int]",
                    "Iterable[Any]",
                    "dict"
                ]
            }
        },
        "_read_input": {
            "name": "_read_input",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "main": {
            "name": "main",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Light.step": {
            "name": "step",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Light.unstep": {
            "name": "unstep",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Simulator.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Simulator.__str__": {
            "name": "__str__",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Simulator.run": {
            "name": "run",
            "location": 35,
            "return": [
                "str",
                "int",
                "bool",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Simulator.simulate_step": {
            "name": "simulate_step",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Simulator.unsimulate_step": {
            "name": "unsimulate_step",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Simulator._interesting_lights": {
            "name": "_interesting_lights",
            "location": 52,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d10/test.py": {
        "readlines": {
            "name": "readlines",
            "location": 7,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "TestCase.test_initial_step": {
            "name": "test_initial_step",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_simulation": {
            "name": "test_simulation",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_run": {
            "name": "test_run",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d10/__init__.py": {},
    "adventofcode-main/2018/aoc/d11/main.py": {
        "largest_grid_value_coords": {
            "name": "largest_grid_value_coords",
            "location": 6,
            "return": [
                "int",
                "str",
                "Tuple[int, int]",
                "Tuple[str, int]"
            ],
            "arguments": {
                "serial_number": [
                    "str",
                    "int"
                ]
            }
        },
        "largest_grid_value_coords_of_3x3": {
            "name": "largest_grid_value_coords_of_3x3",
            "location": 18,
            "return": [
                "int",
                "float",
                "Type[BaseException]",
                "str",
                "Generator",
                "Type"
            ],
            "arguments": {
                "serial_number": [
                    "int",
                    "dict",
                    "str"
                ]
            }
        },
        "_matrix": {
            "name": "_matrix",
            "location": 22,
            "return": [
                "str",
                "int",
                "Callable[[Mapping], T]",
                "List[int]"
            ],
            "arguments": {
                "serial_number": [
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "_largest_grid_value_coords_of": {
            "name": "_largest_grid_value_coords_of",
            "location": 32,
            "return": [
                "int"
            ],
            "arguments": {
                "cache": [
                    "bool",
                    "int",
                    "float"
                ],
                "matrix": [
                    "bool",
                    "int",
                    "float"
                ],
                "size": [
                    "int",
                    "Sequence",
                    "float"
                ]
            }
        },
        "_sum_in_square": {
            "name": "_sum_in_square",
            "location": 44,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "cache": [
                    "Dict[Any, int]",
                    "List[List[int]]"
                ],
                "matrix": [
                    "List[List[int]]",
                    "bytearray",
                    "bytes"
                ],
                "position": [
                    "int",
                    "Union[IO[str], int]",
                    "bytes",
                    "tuple",
                    "str"
                ],
                "size": [
                    "int",
                    "Tuple[int, int]",
                    "bytes",
                    "slice",
                    "bool",
                    "str"
                ]
            }
        },
        "_sum_horizontal_line": {
            "name": "_sum_horizontal_line",
            "location": 60,
            "return": [
                "str",
                "float",
                "Tuple[int, int]",
                "int",
                "tuple"
            ],
            "arguments": {
                "cache": [
                    "Dict[Any, int]",
                    "int",
                    "List[List[int]]"
                ],
                "matrix": [
                    "List[List[int]]",
                    "Dict[Any, int]"
                ],
                "position": [
                    "Tuple[int, int]",
                    "int",
                    "bool"
                ],
                "size": [
                    "int",
                    "Tuple[int, int]",
                    "bytes",
                    "str"
                ]
            }
        },
        "_sum_vertical_line": {
            "name": "_sum_vertical_line",
            "location": 76,
            "return": [
                "int",
                "float"
            ],
            "arguments": {
                "cache": [
                    "Dict[Any, int]",
                    "T",
                    "int"
                ],
                "matrix": [
                    "List[List[int]]",
                    "bytearray",
                    "str",
                    "Union[bytearray, bytes]"
                ],
                "position": [
                    "Tuple[int, int]",
                    "int",
                    "bytes"
                ],
                "size": [
                    "int",
                    "Tuple[int, int]",
                    "bytes",
                    "slice",
                    "bool"
                ]
            }
        },
        "_calculate_value": {
            "name": "_calculate_value",
            "location": 92,
            "return": [
                "int",
                "str",
                "Tuple[int, int]",
                "Tuple[str, int]",
                "T",
                "float"
            ],
            "arguments": {
                "serial_number": [
                    "int",
                    "str",
                    "Tuple[int, int]",
                    "Tuple[str, int]",
                    "T",
                    "float"
                ],
                "position": [
                    "int",
                    "str",
                    "Tuple[int, int]",
                    "Tuple[str, int]",
                    "T",
                    "float"
                ]
            }
        }
    },
    "adventofcode-main/2018/aoc/d11/test.py": {
        "TestCase.test_cell_value": {
            "name": "test_cell_value",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_max_grid_value_of_3x3": {
            "name": "test_max_grid_value_of_3x3",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_max_grid_value_of_any_size_18": {
            "name": "test_max_grid_value_of_any_size_18",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_max_grid_value_of_any_size_42": {
            "name": "test_max_grid_value_of_any_size_42",
            "location": 20,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d11/__init__.py": {},
    "adventofcode-main/2018/aoc/d12/main.py": {
        "sum_pot_numbers_containing_plants": {
            "name": "sum_pot_numbers_containing_plants",
            "location": 6,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "generations": [
                    "int",
                    "Callable",
                    "str"
                ],
                "fast": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "verbose": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_read_cellar": {
            "name": "_read_cellar",
            "location": 34,
            "return": [
                "Optional[bytes]",
                "Optional[Any]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {}
        },
        "_parse_rule": {
            "name": "_parse_rule",
            "location": 43,
            "return": [
                "Union[str, int]",
                "float",
                "str"
            ],
            "arguments": {
                "raw_rule": [
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "_read_input": {
            "name": "_read_input",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Cellar.__init__": {
            "name": "__init__",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": [
                    "int",
                    "Sequence[T]",
                    "List[FrozenSet[str]]",
                    "List[list]",
                    "Dict[int, bool]",
                    "Sequence"
                ],
                "rules": [
                    "str"
                ]
            }
        },
        "Cellar.simulate": {
            "name": "simulate",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Cellar.sum_pot_numbers_containing_plants": {
            "name": "sum_pot_numbers_containing_plants",
            "location": 93,
            "return": [
                "bool",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Cellar.__str__": {
            "name": "__str__",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d12/test.py": {
        "TestCase.test_sum_pot_numbers_containing_plants_after_20_iterations": {
            "name": "test_sum_pot_numbers_containing_plants_after_20_iterations",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_sum_pot_numbers_containing_plants_after_40_000_iterations": {
            "name": "test_sum_pot_numbers_containing_plants_after_40_000_iterations",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d12/__init__.py": {},
    "adventofcode-main/2018/aoc/d13/main.py": {
        "surviving_cart": {
            "name": "surviving_cart",
            "location": 8,
            "return": [
                "Dict[str, Any]",
                "Dict[str, int]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "first_crash_location": {
            "name": "first_crash_location",
            "location": 17,
            "return": [
                "int",
                "dict",
                "Tuple[int, int, int, int]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_read_input": {
            "name": "_read_input",
            "location": 25,
            "return": [
                "List[str]",
                "int",
                "list",
                "Optional[List[str]]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "_is_cart": {
            "name": "_is_cart",
            "location": 106,
            "return": [
                "bool"
            ],
            "arguments": {
                "field": [
                    "str",
                    "bool",
                    "List['PydanticModelField']"
                ]
            }
        },
        "Track.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "str",
                    "list",
                    "int",
                    "set",
                    "Dict[str, str]",
                    "List[Union[int, str]]",
                    "Set[str]"
                ]
            }
        },
        "Track._fix_track": {
            "name": "_fix_track",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cart": [
                    "int",
                    "Tuple[float, float, float]"
                ]
            }
        },
        "Track.__str__": {
            "name": "__str__",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Track.tick": {
            "name": "tick",
            "location": 65,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "list",
                "bool"
            ],
            "arguments": {
                "self": [],
                "stop_on_crash": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Track._move_cart": {
            "name": "_move_cart",
            "location": 81,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "cart": [
                    "float"
                ]
            }
        },
        "Cart.cross_turn": {
            "name": "cross_turn",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Cart.normal_turn": {
            "name": "normal_turn",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "track_field": [
                    "str"
                ]
            }
        },
        "Cart.tick": {
            "name": "tick",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Cart.crash": {
            "name": "crash",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Cart.crashed": {
            "name": "crashed",
            "location": 142,
            "return": [
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d13/test.py": {
        "TestCase.test_first_crash_location": {
            "name": "test_first_crash_location",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_surviving_cart": {
            "name": "test_surviving_cart",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d13/__init__.py": {},
    "adventofcode-main/2018/aoc/d14/main-fast-optimized.py": {
        "time_to_produce": {
            "name": "time_to_produce",
            "location": 1,
            "return": [
                "float",
                "str",
                "int",
                "Union[str, int, float]"
            ],
            "arguments": {
                "goal_recipies_str": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "adventofcode-main/2018/aoc/d14/main.py": {
        "time_to_produce": {
            "name": "time_to_produce",
            "location": 6,
            "return": [
                "float",
                "str",
                "int",
                "Union[str, int, float]"
            ],
            "arguments": {
                "goal_recipies_str": [
                    "int",
                    "list",
                    "List[str]",
                    "str",
                    "List[float]"
                ]
            }
        },
        "time_to_produce_slow": {
            "name": "time_to_produce_slow",
            "location": 23,
            "return": [
                "float",
                "str",
                "int",
                "Union[str, int, float]"
            ],
            "arguments": {
                "goal_recipies": [
                    "int",
                    "str",
                    "List[int]",
                    "Union[int, List[int]]",
                    "List[List[int]]",
                    "List[Dict]"
                ]
            }
        },
        "scores_after": {
            "name": "scores_after",
            "location": 37,
            "return": [
                "str"
            ],
            "arguments": {
                "num_recipies": [
                    "int",
                    "Optional[int]",
                    "str",
                    "float"
                ]
            }
        },
        "_make_recipies": {
            "name": "_make_recipies",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "elf_positions": [
                    "str"
                ],
                "recipies": [
                    "str",
                    "List[Mapping[str, Any]]",
                    "List[List[Any]]"
                ]
            }
        }
    },
    "adventofcode-main/2018/aoc/d14/test.py": {
        "TestCase.test_scores_after_9": {
            "name": "test_scores_after_9",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_scores_after_5": {
            "name": "test_scores_after_5",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_scores_after_18": {
            "name": "test_scores_after_18",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_scores_after_2018": {
            "name": "test_scores_after_2018",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_time_to_produce_51589": {
            "name": "test_time_to_produce_51589",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_time_to_produce_01245": {
            "name": "test_time_to_produce_01245",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_time_to_produce_92510": {
            "name": "test_time_to_produce_92510",
            "location": 25,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_time_to_produce_59414": {
            "name": "test_time_to_produce_59414",
            "location": 28,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d14/__init__.py": {},
    "adventofcode-main/2018/aoc/d15/fields.py": {
        "parse_field": {
            "name": "parse_field",
            "location": 9,
            "return": [
                "int"
            ],
            "arguments": {
                "position": [
                    "str",
                    "Collection[str]"
                ],
                "raw_field": [
                    "str",
                    "Union[str, None]"
                ],
                "elf_attack_power": [
                    "str",
                    "List[str]",
                    "bool",
                    "int",
                    "Set[str]"
                ]
            }
        },
        "FieldBase.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "position": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "FieldBase.is_wall": {
            "name": "is_wall",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "FieldBase.is_free": {
            "name": "is_free",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "FieldBase.has_unit": {
            "name": "has_unit",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "FieldBase.display": {
            "name": "display",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Wall.is_wall": {
            "name": "is_wall",
            "location": 44,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "Wall.display": {
            "name": "display",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "position": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "unit": [
                    "list",
                    "str"
                ]
            }
        },
        "Field.has_unit": {
            "name": "has_unit",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.is_free": {
            "name": "is_free",
            "location": 60,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.display": {
            "name": "display",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d15/main.py": {
        "lowest_required_attack_power": {
            "name": "lowest_required_attack_power",
            "location": 10,
            "return": [
                "str",
                "Iterable[T]",
                "List[str]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "List[str]",
                    "List[Tuple[int, int]]",
                    "List[Tuple[int, int, int, int]]"
                ]
            }
        },
        "simulate": {
            "name": "simulate",
            "location": 18,
            "return": [
                "str",
                "Iterable[T]",
                "List[str]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "_simulate": {
            "name": "_simulate",
            "location": 23,
            "return": [
                "str",
                "Iterable[T]",
                "List[str]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "int"
                ],
                "elf_attack_power": [
                    "str",
                    "int"
                ]
            }
        },
        "_load_game": {
            "name": "_load_game",
            "location": 30,
            "return": [
                "str",
                "bool",
                "dict",
                "List[str]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "int"
                ],
                "elf_attack_power": [
                    "str",
                    "int"
                ]
            }
        },
        "_read_input": {
            "name": "_read_input",
            "location": 34,
            "return": [
                "List[str]",
                "int",
                "list",
                "Optional[List[str]]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "Game.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "lines": [
                    "int",
                    "bool",
                    "List[str]",
                    "dict"
                ],
                "attack_power": [
                    "str",
                    "int",
                    "Tuple[str, str]",
                    "float"
                ]
            }
        },
        "Game.__str__": {
            "name": "__str__",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.alive_units": {
            "name": "alive_units",
            "location": 55,
            "return": [
                "int",
                "list",
                "List[Dict]",
                "List[Tuple[int, float]]",
                "List[dict]",
                "List[str]",
                "Iterator[str]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.has_enimies": {
            "name": "has_enimies",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.fields_as_str": {
            "name": "fields_as_str",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.tick": {
            "name": "tick",
            "location": 69,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game._sort_units_by_reading_order": {
            "name": "_sort_units_by_reading_order",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Game._identify_enemies": {
            "name": "_identify_enemies",
            "location": 89,
            "return": [
                "str",
                "Optional[int]",
                "Union[List[float], List[int]]",
                "Sequence['cirq.Qid']",
                "Tuple[List[int], List[int]]",
                "Tuple[int]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "unit": [
                    "float"
                ]
            }
        },
        "Game._move_towards_nearest_enemy": {
            "name": "_move_towards_nearest_enemy",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "unit": [
                    "int",
                    "Callable"
                ]
            }
        },
        "Game._move_unit_to": {
            "name": "_move_unit_to",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "unit": [
                    "float",
                    "Dict[str, Any]"
                ],
                "position": [
                    "str"
                ]
            }
        },
        "Game._nearest_attackable_enemy_position": {
            "name": "_nearest_attackable_enemy_position",
            "location": 107,
            "return": [
                "str",
                "Exception",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "unit": [
                    "List[int]",
                    "list",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Game._has_neighbor_with_attackable_unit": {
            "name": "_has_neighbor_with_attackable_unit",
            "location": 122,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "unit": [
                    "aoc.d15.units.Unit",
                    "int",
                    "List[Dict[str, Any]]",
                    "dict"
                ],
                "position": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Game._position_to_move_next": {
            "name": "_position_to_move_next",
            "location": 129,
            "return": [
                "str",
                "Callable[[List], List[str]]"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int",
                    "bool"
                ],
                "destination": [
                    "int",
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "List['Token']"
                ]
            }
        },
        "Game._positions_reachable_from": {
            "name": "_positions_reachable_from",
            "location": 140,
            "return": [
                "int",
                "str",
                "bool",
                "list"
            ],
            "arguments": {
                "self": [],
                "positions": [
                    "bool",
                    "Set[aoc.d15.poinPoint]",
                    "str",
                    "Callable[[], object]"
                ]
            }
        },
        "Game._attack_lowest_hp_enemy": {
            "name": "_attack_lowest_hp_enemy",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "attacker": [
                    "str",
                    "aoc.d15.units.Unit",
                    "Union[units.Units, Iterable[Point2]]"
                ],
                "enemies": [
                    "str",
                    "aoc.d15.units.Unit",
                    "Union[units.Units, Iterable[Point2]]"
                ]
            }
        },
        "Game.score": {
            "name": "score",
            "location": 157,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Game.flawless_elf_victory": {
            "name": "flawless_elf_victory",
            "location": 161,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d15/point.py": {
        "next_to_each_other": {
            "name": "next_to_each_other",
            "location": 6,
            "return": [
                "bool"
            ],
            "arguments": {
                "point_a": [
                    "str",
                    "bool"
                ],
                "point_b": [
                    "str",
                    "bool"
                ]
            }
        },
        "neighbors": {
            "name": "neighbors",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "point": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "adventofcode-main/2018/aoc/d15/test.py": {
        "TestCase.test_scenario_1_start": {
            "name": "test_scenario_1_start",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_scenario_1_tick_1": {
            "name": "test_scenario_1_tick_1",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_scenario_1_tick_2": {
            "name": "test_scenario_1_tick_2",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_scenario_1_tick_3": {
            "name": "test_scenario_1_tick_3",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_scenario_1_tick_4": {
            "name": "test_scenario_1_tick_4",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_scenario_1_tick_10": {
            "name": "test_scenario_1_tick_10",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_scenario_1_tick_200": {
            "name": "test_scenario_1_tick_200",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_scenario_2": {
            "name": "test_scenario_2",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_scenario_3": {
            "name": "test_scenario_3",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_scenario_4": {
            "name": "test_scenario_4",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_scenario_5": {
            "name": "test_scenario_5",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_scenario_6": {
            "name": "test_scenario_6",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_scenario_7": {
            "name": "test_scenario_7",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_lowest_required_attack_power_scenario_3": {
            "name": "test_lowest_required_attack_power_scenario_3",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_lowest_required_attack_power_scenario_4": {
            "name": "test_lowest_required_attack_power_scenario_4",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_lowest_required_attack_power_scenario_5": {
            "name": "test_lowest_required_attack_power_scenario_5",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_lowest_required_attack_power_scenario_6": {
            "name": "test_lowest_required_attack_power_scenario_6",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_lowest_required_attack_power_scenario_7": {
            "name": "test_lowest_required_attack_power_scenario_7",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d15/units.py": {
        "Unit.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "position": [
                    "int",
                    "bool",
                    "float"
                ],
                "attack_power": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Unit.display": {
            "name": "display",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.alive": {
            "name": "alive",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.dead": {
            "name": "dead",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Unit.attacked_by": {
            "name": "attacked_by",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "unit": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Unit.can_attack": {
            "name": "can_attack",
            "location": 27,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "unit": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Unit.can_be_attacked_from": {
            "name": "can_be_attacked_from",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "unit": [
                    "Type",
                    "dict",
                    "list"
                ],
                "position": [
                    "Type",
                    "dict",
                    "list"
                ]
            }
        },
        "Unit.can_attack_if_near": {
            "name": "can_attack_if_near",
            "location": 35,
            "return": [
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "unit": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Unit.elf": {
            "name": "elf",
            "location": 39,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Goblin.__str__": {
            "name": "__str__",
            "location": 44,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Goblin.display": {
            "name": "display",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Elf.__str__": {
            "name": "__str__",
            "location": 53,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Elf.display": {
            "name": "display",
            "location": 57,
            "return": [
                "str",
                "dict",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Elf.elf": {
            "name": "elf",
            "location": 61,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d15/__init__.py": {},
    "adventofcode-main/2018/aoc/d16/main.py": {
        "execute_test_program": {
            "name": "execute_test_program",
            "location": 7,
            "return": [
                "int",
                "str",
                "Dict[str, int]"
            ],
            "arguments": {}
        },
        "_read_operations": {
            "name": "_read_operations",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "mapping": [
                    "str",
                    "dict",
                    "int",
                    "bytes"
                ]
            }
        },
        "_map_opcodes": {
            "name": "_map_opcodes",
            "location": 21,
            "return": [
                "str",
                "AsyncGenerator",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "count_operations_with_3_or_more_matches": {
            "name": "count_operations_with_3_or_more_matches",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "_read_recordings": {
            "name": "_read_recordings",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_read_lines": {
            "name": "_read_lines",
            "location": 54,
            "return": [
                "List[str]",
                "bool",
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "_parse_numbers": {
            "name": "_parse_numbers",
            "location": 59,
            "return": [
                "Tuple[Any, Any, Any]",
                "str"
            ],
            "arguments": {
                "numbers_str": [
                    "str",
                    "tuple",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "adventofcode-main/2018/aoc/d16/operations.py": {
        "matching_operations": {
            "name": "matching_operations",
            "location": 11,
            "return": [
                "List[str]",
                "Set[str]",
                "str",
                "FrozenSet[str]"
            ],
            "arguments": {
                "recording": [
                    "List[str]",
                    "list",
                    "str"
                ]
            }
        },
        "_matches": {
            "name": "_matches",
            "location": 15,
            "return": [
                "IO[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "recording": [
                    "int",
                    "bytes",
                    "Deque",
                    "str"
                ],
                "operation": [
                    "IO[str]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "adventofcode-main/2018/aoc/d16/operators.py": {
        "addr": {
            "name": "addr",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "reg": [],
                "params": []
            }
        },
        "addi": {
            "name": "addi",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "reg": [],
                "params": []
            }
        },
        "mulr": {
            "name": "mulr",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "reg": [],
                "params": []
            }
        },
        "muli": {
            "name": "muli",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "reg": [],
                "params": []
            }
        },
        "banr": {
            "name": "banr",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "reg": [],
                "params": []
            }
        },
        "bani": {
            "name": "bani",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "reg": [],
                "params": []
            }
        },
        "borr": {
            "name": "borr",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "reg": [],
                "params": []
            }
        },
        "bori": {
            "name": "bori",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "reg": [],
                "params": []
            }
        },
        "setr": {
            "name": "setr",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "reg": [
                    "str"
                ],
                "params": [
                    "str"
                ]
            }
        },
        "seti": {
            "name": "seti",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "reg": [
                    "int",
                    "Dict[str, Any]"
                ],
                "params": [
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "gtir": {
            "name": "gtir",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "reg": [],
                "params": []
            }
        },
        "gtri": {
            "name": "gtri",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "reg": [],
                "params": []
            }
        },
        "gtrr": {
            "name": "gtrr",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "reg": [],
                "params": []
            }
        },
        "eqir": {
            "name": "eqir",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "reg": [],
                "params": []
            }
        },
        "eqri": {
            "name": "eqri",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "reg": [],
                "params": []
            }
        },
        "eqrr": {
            "name": "eqrr",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "reg": [],
                "params": []
            }
        },
        "OperationParams.__str__": {
            "name": "__str__",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d16/test.py": {
        "OperatorTestCase.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OperatorTestCase.test_addr": {
            "name": "test_addr",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OperatorTestCase.test_addi": {
            "name": "test_addi",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OperatorTestCase.test_mulr": {
            "name": "test_mulr",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OperatorTestCase.test_muli": {
            "name": "test_muli",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OperatorTestCase.test_banr": {
            "name": "test_banr",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OperatorTestCase.test_bani": {
            "name": "test_bani",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OperatorTestCase.test_borr": {
            "name": "test_borr",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OperatorTestCase.test_bori": {
            "name": "test_bori",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OperatorTestCase.test_setr": {
            "name": "test_setr",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OperatorTestCase.test_seti": {
            "name": "test_seti",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OperatorTestCase.test_gtir_if_a_gt_b": {
            "name": "test_gtir_if_a_gt_b",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OperatorTestCase.test_gtir_if_a_eq_b": {
            "name": "test_gtir_if_a_eq_b",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OperatorTestCase.test_gtir_if_a_sm_b": {
            "name": "test_gtir_if_a_sm_b",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OperatorTestCase.test_gtri_if_a_gt_b": {
            "name": "test_gtri_if_a_gt_b",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OperatorTestCase.test_gtri_if_a_eq_b": {
            "name": "test_gtri_if_a_eq_b",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OperatorTestCase.test_gtri_if_a_sm_b": {
            "name": "test_gtri_if_a_sm_b",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OperatorTestCase.test_gtrr_if_a_gt_b": {
            "name": "test_gtrr_if_a_gt_b",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OperatorTestCase.test_gtrr_if_a_eq_b": {
            "name": "test_gtrr_if_a_eq_b",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OperatorTestCase.test_gtrr_if_a_sm_b": {
            "name": "test_gtrr_if_a_sm_b",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OperatorTestCase.test_eqir_if_equal": {
            "name": "test_eqir_if_equal",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OperatorTestCase.test_eqir_if_different": {
            "name": "test_eqir_if_different",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OperatorTestCase.test_eqri_if_equal": {
            "name": "test_eqri_if_equal",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OperatorTestCase.test_eqri_if_different": {
            "name": "test_eqri_if_different",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OperatorTestCase.test_eqrr_if_equal": {
            "name": "test_eqrr_if_equal",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OperatorTestCase.test_eqrr_if_different": {
            "name": "test_eqrr_if_different",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OperatorTestCase.test_number_of_all_operators": {
            "name": "test_number_of_all_operators",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OperatironsTestCase.test_number_of_matching_operators": {
            "name": "test_number_of_matching_operators",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d16/__init__.py": {},
    "adventofcode-main/2018/aoc/d17/main.py": {
        "count_reachable_tiles": {
            "name": "count_reachable_tiles",
            "location": 6,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "count_still_water_tiles": {
            "name": "count_still_water_tiles",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "_simulate": {
            "name": "_simulate",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "_read_maze": {
            "name": "_read_maze",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "_read_clay_coordinates": {
            "name": "_read_clay_coordinates",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "_read_file_contents": {
            "name": "_read_file_contents",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "_parse_coordinates": {
            "name": "_parse_coordinates",
            "location": 42,
            "return": [
                "typing.Iterable[Coordinate]"
            ],
            "arguments": {
                "line": [
                    "str"
                ]
            }
        },
        "_parse_range": {
            "name": "_parse_range",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "range_str": [
                    "str",
                    "dict"
                ]
            }
        },
        "_parse_coordinate": {
            "name": "_parse_coordinate",
            "location": 57,
            "return": [
                "str",
                "Optional[bool]"
            ],
            "arguments": {
                "coordinate": [
                    "str",
                    "List[float]",
                    "Dict[str, Any]",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "_left": {
            "name": "_left",
            "location": 165,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "coord": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_right": {
            "name": "_right",
            "location": 169,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "coord": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_below": {
            "name": "_below",
            "location": 173,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "coord": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_above": {
            "name": "_above",
            "location": 177,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "coord": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_line_range": {
            "name": "_line_range",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "left": [
                    "int",
                    "str",
                    "bool"
                ],
                "right": [
                    "int",
                    "List[str]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Maze.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "coordinates": [
                    "Type[Any]"
                ]
            }
        },
        "Maze.__str__": {
            "name": "__str__",
            "location": 75,
            "return": [
                "str",
                "bool",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maze.simulate_step": {
            "name": "simulate_step",
            "location": 83,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maze._simulate_running_water": {
            "name": "_simulate_running_water",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Maze._fill_sideways": {
            "name": "_fill_sideways",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "coord": [
                    "List[Tuple[int, int]]",
                    "str",
                    "Callable",
                    "Optional[Union[str, Any]]"
                ]
            }
        },
        "Maze._is_sand": {
            "name": "_is_sand",
            "location": 131,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "coord": [
                    "float",
                    "str",
                    "bool",
                    "Union[int, float]",
                    "List[List[int]]"
                ]
            }
        },
        "Maze._is_penetrable": {
            "name": "_is_penetrable",
            "location": 134,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "coord": [
                    "IO",
                    "dict",
                    "Optional[bool]",
                    "bool",
                    "int",
                    "Optional[List]"
                ]
            }
        },
        "Maze._is_clay": {
            "name": "_is_clay",
            "location": 137,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "coord": [
                    "str",
                    "int"
                ]
            }
        },
        "Maze._captures_water": {
            "name": "_captures_water",
            "location": 140,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "coord": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Maze.wet_tiles": {
            "name": "wet_tiles",
            "location": 143,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maze.still_water_tiles": {
            "name": "still_water_tiles",
            "location": 146,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Maze._count_relevant_tiles": {
            "name": "_count_relevant_tiles",
            "location": 149,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "tiles": [
                    "Optional[Any]",
                    "tuple",
                    "bool"
                ]
            }
        },
        "Maze._at": {
            "name": "_at",
            "location": 153,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "coordinate": [
                    "dict",
                    "str"
                ]
            }
        }
    },
    "adventofcode-main/2018/aoc/d17/test.py": {
        "TestCase.test_count_reachable_tiles": {
            "name": "test_count_reachable_tiles",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_count_still_water_tiles": {
            "name": "test_count_still_water_tiles",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d18/main.py": {
        "resource_values": {
            "name": "resource_values",
            "location": 13,
            "return": [
                "int",
                "str",
                "bytes",
                "float",
                "tuple"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "List[str]"
                ],
                "turns": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "simulate": {
            "name": "simulate",
            "location": 19,
            "return": [
                "List[str]",
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "turns": [
                    "int",
                    "str"
                ],
                "cache": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "_values": {
            "name": "_values",
            "location": 48,
            "return": [
                "str",
                "list",
                "Counter",
                "List[Dict[str, Any]]",
                "frozenset",
                "List[int]"
            ],
            "arguments": {
                "fields": [
                    "str",
                    "dict"
                ]
            }
        },
        "_fields_str": {
            "name": "_fields_str",
            "location": 55,
            "return": [
                "str"
            ],
            "arguments": {
                "fields": [
                    "str",
                    "Sequence[str]",
                    "List[str]"
                ]
            }
        },
        "_read_magical_fields": {
            "name": "_read_magical_fields",
            "location": 59,
            "return": [
                "int",
                "str",
                "Iterable",
                "Optional[dict]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "_read_file_contents": {
            "name": "_read_file_contents",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "_turn": {
            "name": "_turn",
            "location": 71,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "fields": [
                    "List[dict]"
                ],
                "cache": [
                    "List[dict]"
                ]
            }
        },
        "_next_value": {
            "name": "_next_value",
            "location": 80,
            "return": [
                "float",
                "Optional[Callable]",
                "str"
            ],
            "arguments": {
                "fields": [
                    "int",
                    "dict",
                    "str"
                ],
                "x": [
                    "int",
                    "dict",
                    "str"
                ],
                "y": [
                    "int",
                    "dict",
                    "str"
                ]
            }
        },
        "_neighbors": {
            "name": "_neighbors",
            "location": 91,
            "return": [
                "bool"
            ],
            "arguments": {
                "fields": [
                    "bool",
                    "T"
                ],
                "x": [
                    "str",
                    "Sequence[Any]",
                    "int"
                ],
                "y": [
                    "str",
                    "Sequence[Any]",
                    "int"
                ]
            }
        }
    },
    "adventofcode-main/2018/aoc/d18/test.py": {
        "readlines": {
            "name": "readlines",
            "location": 6,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "TestCase.test_simulate_1_turn": {
            "name": "test_simulate_1_turn",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_simulate_10_turns": {
            "name": "test_simulate_10_turns",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_resource_values_after_10_turns": {
            "name": "test_resource_values_after_10_turns",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d19/input.1.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "adventofcode-main/2018/aoc/d19/input.py": {
        "main": {
            "name": "main",
            "location": 1,
            "return": [
                "str",
                "List[str]",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        }
    },
    "adventofcode-main/2018/aoc/d19/input_a.py": {
        "main": {
            "name": "main",
            "location": 1,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "adventofcode-main/2018/aoc/d19/input_b.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "str",
                "FrozenSet[str]",
                "Optional[Sequence[str]]",
                "Dict[str, str]",
                "List[str]",
                "int"
            ],
            "arguments": {}
        }
    },
    "adventofcode-main/2018/aoc/d19/input_c.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "Set[str]",
                "Dict[str, str]",
                "Optional[bool]",
                "List[List[str]]"
            ],
            "arguments": {}
        }
    },
    "adventofcode-main/2018/aoc/d19/input_d.py": {
        "main": {
            "name": "main",
            "location": 4,
            "return": [
                "Set[str]"
            ],
            "arguments": {}
        }
    },
    "adventofcode-main/2018/aoc/d19/main.py": {
        "simulate": {
            "name": "simulate",
            "location": 11,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "dict"
                ],
                "register_0_value": [
                    "str",
                    "int",
                    "Optional[bytes]",
                    "IO"
                ]
            }
        },
        "_read_instructions": {
            "name": "_read_instructions",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "int"
                ],
                "day": [
                    "str",
                    "int"
                ]
            }
        },
        "_parse_instruction": {
            "name": "_parse_instruction",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "instruction_str": [
                    "str",
                    "Mapping[str, int]",
                    "Iterator[bytes]"
                ]
            }
        },
        "_read_file_contents": {
            "name": "_read_file_contents",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool",
                    "bytes"
                ],
                "day": [
                    "str",
                    "bool",
                    "bytes"
                ]
            }
        },
        "part2": {
            "name": "part2",
            "location": 75,
            "return": [
                "Sequence",
                "list",
                "str",
                "List[Dict[str, Any]]",
                "frozenset"
            ],
            "arguments": {}
        },
        "Simulator.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "instruction_pointer_regiser": [
                    "bool",
                    "str"
                ],
                "instructions": [
                    "bool",
                    "str"
                ],
                "register_0_value": [
                    "bool",
                    "str"
                ]
            }
        },
        "Simulator.points_to_instruction": {
            "name": "points_to_instruction",
            "location": 51,
            "return": [
                "str",
                "dict",
                "int",
                "Dict[str, Any]",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Simulator.instruction_pointer_value": {
            "name": "instruction_pointer_value",
            "location": 55,
            "return": [
                "str",
                "dict",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Simulator.register_0_value": {
            "name": "register_0_value",
            "location": 59,
            "return": [
                "int",
                "str",
                "Tuple[int, int]",
                "Tuple[str, int]",
                "T",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Simulator.run_instruction": {
            "name": "run_instruction",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Simulator.increase_instruction_pointer": {
            "name": "increase_instruction_pointer",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d19/test.py": {
        "TestCase.test_simulate": {
            "name": "test_simulate",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d2/main.py": {
        "checksum": {
            "name": "checksum",
            "location": 5,
            "return": [
                "bytes",
                "str",
                "List[List[str]]",
                "int",
                "tuple"
            ],
            "arguments": {}
        },
        "_count_occurrences": {
            "name": "_count_occurrences",
            "location": 16,
            "return": [
                "set",
                "str",
                "int"
            ],
            "arguments": {
                "line": [
                    "List[AnyStr]",
                    "str",
                    "List[str]",
                    "Iterable[str]",
                    "Iterable[Sequence[str]]"
                ]
            }
        },
        "find_near_duplicate": {
            "name": "find_near_duplicate",
            "location": 23,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {}
        },
        "_variants": {
            "name": "_variants",
            "location": 33,
            "return": [
                "typing.Iterator[builtins.str]"
            ],
            "arguments": {
                "line": [
                    "str",
                    "bytes"
                ]
            }
        },
        "read_input": {
            "name": "read_input",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "adventofcode-main/2018/aoc/d2/test.py": {
        "ActuatorTestCase.test_checksum": {
            "name": "test_checksum",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorTestCase.test_find_near_duplicate": {
            "name": "test_find_near_duplicate",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d2/__init__.py": {},
    "adventofcode-main/2018/aoc/d20/main.py": {
        "main": {
            "name": "main",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "longest_path": {
            "name": "longest_path",
            "location": 13,
            "return": [
                "int",
                "bytes",
                "List[int]",
                "Iterable[int]"
            ],
            "arguments": {
                "regex": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "count_farther_away_than": [
                    "int",
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "_doors_from_position": {
            "name": "_doors_from_position",
            "location": 38,
            "return": [
                "float",
                "Sequence[float]",
                "Tuple[int, int]",
                "tuple"
            ],
            "arguments": {
                "position": [
                    "float",
                    "Sequence[float]",
                    "Tuple[int, int]",
                    "tuple"
                ]
            }
        }
    },
    "adventofcode-main/2018/aoc/d20/maze.py": {
        "build_maze": {
            "name": "build_maze",
            "location": 8,
            "return": [
                "bool"
            ],
            "arguments": {
                "regex": [
                    "str",
                    "Optional[str]",
                    "int",
                    "float"
                ]
            }
        },
        "_build_maze_rec": {
            "name": "_build_maze_rec",
            "location": 15,
            "return": [
                "bool",
                "str",
                "Optional[T]",
                "Optional[Any]"
            ],
            "arguments": {
                "starting_points": [
                    "str",
                    "int",
                    "bool"
                ],
                "maze": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "node": [
                    "str",
                    "int",
                    "dict",
                    "bool"
                ]
            }
        },
        "Maze.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Maze.add_path": {
            "name": "add_path",
            "location": 40,
            "return": [
                "str",
                "float",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "starting_points": [
                    "int",
                    "str"
                ],
                "directions": [
                    "int",
                    "str"
                ]
            }
        },
        "Maze._add_doors_to": {
            "name": "_add_doors_to",
            "location": 55,
            "return": [
                "str",
                "wdom.node.Node",
                "type",
                "float"
            ],
            "arguments": {
                "self": [],
                "starting_point": [
                    "List[str]",
                    "dict"
                ],
                "movement": [
                    "int",
                    "bool",
                    "Optional[float]",
                    "Optional[int]"
                ]
            }
        },
        "Maze._add_door": {
            "name": "_add_door",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "room_a": [
                    "int",
                    "Dict[int, List[Any]]",
                    "Optional[Node]"
                ],
                "room_b": [
                    "int",
                    "Dict[int, List[Any]]",
                    "Optional[Node]"
                ]
            }
        },
        "Maze.__str__": {
            "name": "__str__",
            "location": 66,
            "return": [
                "str",
                "Sequence[str]",
                "list",
                "Set[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d20/parser.py": {
        "parse": {
            "name": "parse",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "regex": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Node.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d20/test.py": {
        "_read_file": {
            "name": "_read_file",
            "location": 9,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "TokenizerTestCase.test_tokenize_simple": {
            "name": "test_tokenize_simple",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenizerTestCase.test_tokenize_brackets": {
            "name": "test_tokenize_brackets",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenizerTestCase.test_tokenize_partly_empty_bracket": {
            "name": "test_tokenize_partly_empty_bracket",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TokenizerTestCase.test_tokenize_complex": {
            "name": "test_tokenize_complex",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_parse_simple": {
            "name": "test_parse_simple",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_parse_brackets": {
            "name": "test_parse_brackets",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_parse_brackets_multi_roots": {
            "name": "test_parse_brackets_multi_roots",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_parse_deep": {
            "name": "test_parse_deep",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTestCase.test_parse_deeper": {
            "name": "test_parse_deeper",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MazeTestCase.test_build_maze_abc": {
            "name": "test_build_maze_abc",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MazeTestCase.test_build_maze_a_or_bc": {
            "name": "test_build_maze_a_or_bc",
            "location": 98,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MazeTestCase.test_build_maze_a_or_b_or_c": {
            "name": "test_build_maze_a_or_b_or_c",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MazeTestCase.test_build_maze_ab_or_c": {
            "name": "test_build_maze_ab_or_c",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MazeTestCase.test_build_maze_example_1": {
            "name": "test_build_maze_example_1",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MazeTestCase.test_build_maze_example_2": {
            "name": "test_build_maze_example_2",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MazeTestCase.test_build_maze_example_3": {
            "name": "test_build_maze_example_3",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LongestPathTestCase.test_longest_path_abc": {
            "name": "test_longest_path_abc",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LongestPathTestCase.test_longest_path_example_1": {
            "name": "test_longest_path_example_1",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LongestPathTestCase.test_longest_path_example_2": {
            "name": "test_longest_path_example_2",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LongestPathTestCase.test_longest_path_example_3": {
            "name": "test_longest_path_example_3",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LongestPathTestCase.test_longest_path_example_4": {
            "name": "test_longest_path_example_4",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LongestPathTestCase.test_longest_path_example_5": {
            "name": "test_longest_path_example_5",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d20/tokenizer.py": {
        "tokenize": {
            "name": "tokenize",
            "location": 1,
            "return": [
                "List[Dict]",
                "List[str]",
                "List[int]",
                "str",
                "List[List[Any]]"
            ],
            "arguments": {
                "regex": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_tokenize": {
            "name": "_tokenize",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "regex": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "adventofcode-main/2018/aoc/d21/annotated_input_v4.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                "str",
                "dict",
                "bool",
                "Optional[Sequence[str]]",
                "Optional[str]"
            ],
            "arguments": {
                "magic_number": [
                    "str",
                    "List[str]",
                    "bool",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "determine_r4": {
            "name": "determine_r4",
            "location": 28,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "dict",
                "set",
                "bool"
            ],
            "arguments": {
                "r4": [
                    "int"
                ]
            }
        }
    },
    "adventofcode-main/2018/aoc/d21/main.py": {
        "simulate": {
            "name": "simulate",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        }
    },
    "adventofcode-main/2018/aoc/d22/main.py": {
        "shortest_path": {
            "name": "shortest_path",
            "location": 27,
            "return": [
                "str",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "depth": [
                    "int",
                    "bool",
                    "List[dict]",
                    "List[str]"
                ],
                "target": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "_has_shorter_route_to_check": {
            "name": "_has_shorter_route_to_check",
            "location": 38,
            "return": [
                "bool"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "goal": [
                    "str",
                    "bool"
                ]
            }
        },
        "_step": {
            "name": "_step",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "cave": [
                    "str",
                    "bool"
                ],
                "path": [
                    "str",
                    "dict"
                ]
            }
        },
        "_next_steps": {
            "name": "_next_steps",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "cave": [
                    "bool",
                    "List[str]"
                ],
                "step": [
                    "int",
                    "str"
                ],
                "current_minutes": [
                    "int"
                ]
            }
        },
        "_can_go_to": {
            "name": "_can_go_to",
            "location": 75,
            "return": [
                "int"
            ],
            "arguments": {
                "cave": [
                    "bool",
                    "str",
                    "Optional[Dict]"
                ],
                "coord": [
                    "bool",
                    "str",
                    "Optional[Dict]"
                ],
                "tool": [
                    "bool",
                    "str",
                    "Optional[Dict]"
                ]
            }
        },
        "_can_use_tool": {
            "name": "_can_use_tool",
            "location": 79,
            "return": [
                "str",
                "Callable",
                "float",
                "int",
                "dict"
            ],
            "arguments": {
                "cave": [
                    "bytes",
                    "list",
                    "str",
                    "float"
                ],
                "coord": [
                    "bytes",
                    "list",
                    "str",
                    "float"
                ],
                "tool": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "total_risk_level": {
            "name": "total_risk_level",
            "location": 90,
            "return": [
                "str",
                "int",
                "tuple",
                "List[str]",
                "list",
                "Union[List[str], str]",
                "float"
            ],
            "arguments": {
                "depth": [
                    "int",
                    "List[str]",
                    "bool",
                    "float"
                ],
                "target": [
                    "bool",
                    "int",
                    "str",
                    "List[Tuple[int, int]]"
                ]
            }
        },
        "_risk_level": {
            "name": "_risk_level",
            "location": 97,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cave": [
                    "int",
                    "Callable",
                    "str"
                ],
                "coord": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_terrain": {
            "name": "_terrain",
            "location": 102,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cave": [
                    "int",
                    "Callable",
                    "str"
                ],
                "coord": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_terrain_short": {
            "name": "_terrain_short",
            "location": 110,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cave": [
                    "int",
                    "Callable",
                    "str"
                ],
                "coord": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_geo_index": {
            "name": "_geo_index",
            "location": 114,
            "return": [
                "str"
            ],
            "arguments": {
                "cave": [
                    "int",
                    "float",
                    "Optional[int]"
                ],
                "coord": [
                    "float",
                    "int"
                ]
            }
        },
        "_erosion_levels": {
            "name": "_erosion_levels",
            "location": 137,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cave": [
                    "int",
                    "Callable",
                    "str"
                ],
                "geo_index": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_print_risk_levels": {
            "name": "_print_risk_levels",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "cave": [
                    "int",
                    "Dict[str, Tuple[int, int]]"
                ]
            }
        },
        "Path.__init__": {
            "name": "__init__",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d22/test.py": {
        "TestCase.test_simulate_1_turn": {
            "name": "test_simulate_1_turn",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_shortest_path": {
            "name": "test_shortest_path",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d23/main.py": {
        "best_position_distance": {
            "name": "best_position_distance",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "count_bots_in_range": {
            "name": "count_bots_in_range",
            "location": 47,
            "return": [
                "int",
                "Dict[str, str]",
                "Iterable[Iterable[T]]"
            ],
            "arguments": {
                "nanobots": [
                    "bool",
                    "int"
                ],
                "x": [
                    "int",
                    "float",
                    "str"
                ],
                "y": [
                    "int",
                    "float",
                    "str"
                ],
                "z": [
                    "int",
                    "float",
                    "str"
                ],
                "dist": [
                    "float",
                    "int"
                ]
            }
        },
        "nanobots_in_radius": {
            "name": "nanobots_in_radius",
            "location": 64,
            "return": [
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "List[str]",
                    "bool",
                    "Callable[[str], str]"
                ]
            }
        },
        "nanobots_in_range_of": {
            "name": "nanobots_in_range_of",
            "location": 70,
            "return": [
                "List[List[int]]",
                "float",
                "List[str]",
                "tuple",
                "List[int]",
                "bool"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "_read_nanobots": {
            "name": "_read_nanobots",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "_read_lines": {
            "name": "_read_lines",
            "location": 83,
            "return": [
                "str",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "Nanobot.in_range_of": {
            "name": "in_range_of",
            "location": 93,
            "return": [
                "str",
                "dict",
                "int",
                "Optional[int]",
                "List[Callable]"
            ],
            "arguments": {
                "self": [],
                "other_position": [
                    "dict",
                    "bool"
                ]
            }
        },
        "Nanobot.distance_to": {
            "name": "distance_to",
            "location": 96,
            "return": [
                "str",
                "Optional[bool]",
                "int",
                "Optional[List[Any]]",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other_position": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "bool",
                    "Tuple[str, str]",
                    "int"
                ]
            }
        }
    },
    "adventofcode-main/2018/aoc/d23/test.py": {
        "TestCase.test_nanobots_in_radius": {
            "name": "test_nanobots_in_radius",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_best_position": {
            "name": "test_best_position",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d24/main.py": {
        "alive_after_minimum_boost_required": {
            "name": "alive_after_minimum_boost_required",
            "location": 14,
            "return": [
                "Optional[str]",
                "type",
                "Optional[int]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool",
                    "int",
                    "float",
                    "list",
                    "Optional[str]"
                ]
            }
        },
        "count_alive_units": {
            "name": "count_alive_units",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "List[int]",
                    "Sequence[str]",
                    "set",
                    "Tuple[str]",
                    "Dict[str, Any]"
                ],
                "boost": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "_alive_armies": {
            "name": "_alive_armies",
            "location": 39,
            "return": [
                "int",
                "list",
                "List[Dict]",
                "List[Tuple[int, float]]",
                "List[dict]",
                "List[str]",
                "Iterator[str]",
                "List[int]"
            ],
            "arguments": {
                "armies": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_opponents_are_alive": {
            "name": "_opponents_are_alive",
            "location": 43,
            "return": [
                "bool"
            ],
            "arguments": {
                "armies": [
                    "int",
                    "str"
                ]
            }
        },
        "_simulate_turn": {
            "name": "_simulate_turn",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "armies": [
                    "Iterable[int]",
                    "List[Tuple[Any, Any]]",
                    "List[tuple]",
                    "List[Tuple[int, Any]]",
                    "float",
                    "List[float]",
                    "Tuple[int, int, int]"
                ]
            }
        },
        "_armies_by_group": {
            "name": "_armies_by_group",
            "location": 72,
            "return": [
                "int",
                "list",
                "List[Dict]",
                "List[Tuple[int, float]]",
                "List[dict]",
                "List[str]",
                "Iterator[str]",
                "List[int]"
            ],
            "arguments": {
                "armies": [
                    "str",
                    "AsyncGenerator",
                    "bool",
                    "bytes"
                ],
                "group": [
                    "str",
                    "AsyncGenerator",
                    "bool",
                    "bytes"
                ]
            }
        },
        "_choose_target": {
            "name": "_choose_target",
            "location": 76,
            "return": [
                "Optional[str]",
                "type",
                "Optional[List[Any]]",
                "list"
            ],
            "arguments": {
                "army": [
                    "List[Tuple[int, int]]",
                    "List[Tuple[Any, Any]]",
                    "List[tuple]",
                    "List[str]",
                    "List[dict]",
                    "set",
                    "list",
                    "Tuple[FrozenSet[int]]"
                ],
                "opponents": [
                    "List[Tuple[int, int]]",
                    "List[Tuple[Any, Any]]",
                    "List[tuple]",
                    "List[str]",
                    "List[dict]",
                    "set",
                    "list",
                    "Tuple[FrozenSet[int]]"
                ]
            }
        },
        "_read_armies": {
            "name": "_read_armies",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "_readlines": {
            "name": "_readlines",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "_parse_army": {
            "name": "_parse_army",
            "location": 111,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "army_number": [
                    "int",
                    "bool",
                    "str",
                    "Optional[int]",
                    "Container[\"Taxon\"]"
                ],
                "group": [
                    "str",
                    "int"
                ],
                "line": [
                    "str",
                    "int"
                ]
            }
        },
        "_parse_weaknesses_and_immunities": {
            "name": "_parse_weaknesses_and_immunities",
            "location": 129,
            "return": [
                "str",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "weaknesses_and_immunities": [
                    "str",
                    "bool"
                ],
                "weak_or_immune": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Army.__init__": {
            "name": "__init__",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Army.effective_power": {
            "name": "effective_power",
            "location": 161,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Army.potential_damage_to": {
            "name": "potential_damage_to",
            "location": 164,
            "return": [
                "float",
                "int",
                "Union[bool, None]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Dict[str, Any]",
                    "str",
                    "Optional[List[str]]",
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "Army.attack": {
            "name": "attack",
            "location": 171,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]",
                    "int",
                    "list"
                ]
            }
        }
    },
    "adventofcode-main/2018/aoc/d24/test.py": {
        "TestCase.test_count_alive_units": {
            "name": "test_count_alive_units",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_boost_immune_winning": {
            "name": "test_boost_immune_winning",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_boost_infection_winning": {
            "name": "test_boost_infection_winning",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_minimum_boost_required": {
            "name": "test_minimum_boost_required",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d25/main.py": {
        "count_clusters": {
            "name": "count_clusters",
            "location": 9,
            "return": [
                "str",
                "Set[str]",
                "bool",
                "int",
                "set"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "_build_neighbors": {
            "name": "_build_neighbors",
            "location": 20,
            "return": [
                "Tuple[Hashable]",
                "str",
                "Set[str]",
                "Iterable[T]",
                "List[str]"
            ],
            "arguments": {
                "points": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "_find_neighbors": {
            "name": "_find_neighbors",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "needle": [
                    "int",
                    "bytes"
                ],
                "points": [
                    "int",
                    "set",
                    "str"
                ]
            }
        },
        "_read_points": {
            "name": "_read_points",
            "location": 32,
            "return": [
                "typing.Iterable[Point]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        }
    },
    "adventofcode-main/2018/aoc/d25/test.py": {
        "TestCase.test_count_clusters1": {
            "name": "test_count_clusters1",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_count_clusters2": {
            "name": "test_count_clusters2",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_count_clusters3": {
            "name": "test_count_clusters3",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_count_clusters4": {
            "name": "test_count_clusters4",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_count_clusters5": {
            "name": "test_count_clusters5",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d3/main.py": {
        "multi_claimed_square_inches": {
            "name": "multi_claimed_square_inches",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "find_intact_claim": {
            "name": "find_intact_claim",
            "location": 12,
            "return": [
                "int",
                "Union[str, int]",
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "_fill_fabric": {
            "name": "_fill_fabric",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "_read_input": {
            "name": "_read_input",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_parse_claim": {
            "name": "_parse_claim",
            "location": 86,
            "return": [
                "str",
                "float",
                "bytearray",
                "Dict[str, int]",
                "List[int]"
            ],
            "arguments": {
                "line": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "Claim.top": {
            "name": "top",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Claim.right": {
            "name": "right",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Claim.bottom": {
            "name": "bottom",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Claim.left": {
            "name": "left",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fabric.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "size": [
                    "int",
                    "List[int]",
                    "List[list]"
                ]
            }
        },
        "Fabric.fill": {
            "name": "fill",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "claim": [
                    "int",
                    "slice"
                ]
            }
        },
        "Fabric.count_multi_claimed_square_inches": {
            "name": "count_multi_claimed_square_inches",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fabric.find_intact_claim": {
            "name": "find_intact_claim",
            "location": 64,
            "return": [
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Fabric.__repr__": {
            "name": "__repr__",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d3/test.py": {
        "ActuatorTestCase.test_multi_claimed_square_inches": {
            "name": "test_multi_claimed_square_inches",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ActuatorTestCase.test_find_intact_claim": {
            "name": "test_find_intact_claim",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d3/__init__.py": {},
    "adventofcode-main/2018/aoc/d4/main.py": {
        "find_most_spleepy_guard": {
            "name": "find_most_spleepy_guard",
            "location": 9,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {}
        },
        "find_most_spleepy_timeslot": {
            "name": "find_most_spleepy_timeslot",
            "location": 26,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {}
        },
        "_extract_most_common_minute": {
            "name": "_extract_most_common_minute",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "counter": [
                    "int",
                    "str",
                    "List[int]",
                    "List[float]"
                ],
                "guard": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_parse_shifts": {
            "name": "_parse_shifts",
            "location": 44,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "_read_input": {
            "name": "_read_input",
            "location": 55,
            "return": [
                "List[str]",
                "int",
                "list",
                "Optional[List[str]]"
            ],
            "arguments": {}
        },
        "_parse_line": {
            "name": "_parse_line",
            "location": 60,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "line": [
                    "str",
                    "Union[str, int]",
                    "bytes"
                ]
            }
        },
        "_extract_day_and_time": {
            "name": "_extract_day_and_time",
            "location": 72,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "line": [
                    "str",
                    "Iterator[str]",
                    "Optional[str]"
                ]
            }
        },
        "_parse_time": {
            "name": "_parse_time",
            "location": 78,
            "return": [
                "float",
                "Optional[int]",
                "int"
            ],
            "arguments": {
                "time_str": [
                    "str",
                    "Callable[[str], str]",
                    "List[Tuple[str, int]]",
                    "List[str]"
                ]
            }
        },
        "_extract_guard": {
            "name": "_extract_guard",
            "location": 83,
            "return": [
                "List[int]",
                "int"
            ],
            "arguments": {
                "rest": [
                    "str",
                    "IO[str]"
                ]
            }
        },
        "Time.diff": {
            "name": "diff",
            "location": 92,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "Action.is_start": {
            "name": "is_start",
            "location": 102,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "Action.is_wake": {
            "name": "is_wake",
            "location": 106,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Action.is_sleep": {
            "name": "is_sleep",
            "location": 110,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Shift.add_action": {
            "name": "add_action",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "action": [
                    "float",
                    "int"
                ]
            }
        },
        "Shift.count_sleep_minutes": {
            "name": "count_sleep_minutes",
            "location": 123,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shift.sleep_minutes": {
            "name": "sleep_minutes",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d4/test.py": {
        "TestCase.test_find_most_spleepy_guard": {
            "name": "test_find_most_spleepy_guard",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_find_most_spleepy_timeslot": {
            "name": "test_find_most_spleepy_timeslot",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d4/__init__.py": {},
    "adventofcode-main/2018/aoc/d5/main.py": {
        "calculate_shortest_polymer_length": {
            "name": "calculate_shortest_polymer_length",
            "location": 6,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {}
        },
        "_trigger_all_reactions_without": {
            "name": "_trigger_all_reactions_without",
            "location": 12,
            "return": [
                "str",
                "int",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "polymer": [
                    "str",
                    "bool",
                    "dict",
                    "bytes"
                ],
                "letter_filter": [
                    "str",
                    "bool"
                ]
            }
        },
        "calculate_polymer_length": {
            "name": "calculate_polymer_length",
            "location": 18,
            "return": [
                "Dict[int, Tuple[int, int]]",
                "List[str]",
                "Dict[str, Any]",
                "str",
                "float"
            ],
            "arguments": {}
        },
        "_trigger_all_reactions": {
            "name": "_trigger_all_reactions",
            "location": 23,
            "return": [
                "int",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "polymer": [
                    "List[int]",
                    "bool",
                    "list",
                    "str",
                    "int"
                ]
            }
        },
        "_read_input": {
            "name": "_read_input",
            "location": 29,
            "return": [
                "str",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {}
        },
        "_react_on": {
            "name": "_react_on",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "polymer": [
                    "int",
                    "list",
                    "List[List[int]]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "_can_react": {
            "name": "_can_react",
            "location": 46,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "char_a": [
                    "int",
                    "str",
                    "List[int]"
                ],
                "char_b": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        }
    },
    "adventofcode-main/2018/aoc/d5/test.py": {
        "TestCase.test_calculate_polymer_length": {
            "name": "test_calculate_polymer_length",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_calculate_shortest_polymer_length": {
            "name": "test_calculate_shortest_polymer_length",
            "location": 12,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d5/__init__.py": {},
    "adventofcode-main/2018/aoc/d6/main.py": {
        "find_largest_area": {
            "name": "find_largest_area",
            "location": 9,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "Type[T]"
            ],
            "arguments": {}
        },
        "_read_input": {
            "name": "_read_input",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_fill_matrix": {
            "name": "_fill_matrix",
            "location": 47,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "matrix": [
                    "Generator",
                    "Union['IndexBase', 'Series']",
                    "Dict[str, Any]"
                ],
                "iteration": [
                    "dict",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "_get_field_value": {
            "name": "_get_field_value",
            "location": 67,
            "return": [
                "Tuple[int, int]",
                "bool",
                "Type[T]",
                "int",
                "Callable"
            ],
            "arguments": {
                "matrix": [
                    "int",
                    "bool",
                    "List[str]",
                    "Mapping[str, str]"
                ],
                "y_coord": [
                    "int",
                    "bool",
                    "List[str]",
                    "Mapping[str, str]"
                ],
                "x_coord": [
                    "int",
                    "bool",
                    "List[str]",
                    "Mapping[str, str]"
                ],
                "iteration": [
                    "int",
                    "Dict[str, Dict[str, int]]",
                    "Dict[str, Tuple[int, int]]"
                ]
            }
        },
        "_print": {
            "name": "_print",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "matrix": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_convert_number": {
            "name": "_convert_number",
            "location": 82,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "count_fields_within": {
            "name": "count_fields_within",
            "location": 111,
            "return": [
                "int",
                "List[int]",
                "str",
                "List[str]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "distance": [
                    "int",
                    "List[int]",
                    "str",
                    "List[str]",
                    "Tuple[int, int]"
                ]
            }
        },
        "_count_distance": {
            "name": "_count_distance",
            "location": 131,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "pairs": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "coord": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Field.mark": {
            "name": "mark",
            "location": 95,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "float",
                    "Union[str, int, float]"
                ],
                "iteration": [
                    "float",
                    "int",
                    "str",
                    "Tuple[int, int]"
                ]
            }
        }
    },
    "adventofcode-main/2018/aoc/d6/test.py": {
        "TestCase.test_find_largest_area": {
            "name": "test_find_largest_area",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_count_fields_within": {
            "name": "test_count_fields_within",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d6/__init__.py": {},
    "adventofcode-main/2018/aoc/d7/main.py": {
        "step_order": {
            "name": "step_order",
            "location": 7,
            "return": [
                "Optional[bool]",
                "Optional[int]",
                "float",
                "Tuple[Tuple[int, Any]]"
            ],
            "arguments": {}
        },
        "_assemble_sledge_simple": {
            "name": "_assemble_sledge_simple",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "requirements": [
                    "int",
                    "str",
                    "List[str]",
                    "Tuple[int, int]"
                ],
                "following": [
                    "int",
                    "Sequence[str]",
                    "tuple"
                ],
                "starting_steps": [
                    "Dict[Any, list]",
                    "List[str]",
                    "dict",
                    "int"
                ]
            }
        },
        "time_required": {
            "name": "time_required",
            "location": 29,
            "return": [
                "int",
                "float",
                "str"
            ],
            "arguments": {
                "seconds_per_step": [
                    "list",
                    "int",
                    "float"
                ],
                "workers": [
                    "list",
                    "int",
                    "float"
                ]
            }
        },
        "_assemble_sledge_concurrent": {
            "name": "_assemble_sledge_concurrent",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "fixed_seconds_per_step": [
                    "int",
                    "bool",
                    "Optional[int]",
                    "float"
                ],
                "workers": [
                    "bool",
                    "int",
                    "str",
                    "Callable",
                    "float"
                ],
                "requirements": [
                    "int",
                    "bool"
                ],
                "following": [
                    "int",
                    "bool",
                    "str",
                    "Iterable[int]",
                    "Optional[bool]"
                ],
                "starting_steps": [
                    "str",
                    "Union[None, str]"
                ]
            }
        },
        "_seconds_per_step": {
            "name": "_seconds_per_step",
            "location": 66,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "letter": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_prepare_datastructures": {
            "name": "_prepare_datastructures",
            "location": 70,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "assembly_steps": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "_read_input": {
            "name": "_read_input",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "adventofcode-main/2018/aoc/d7/test.py": {
        "TestCase.test_step_order": {
            "name": "test_step_order",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_time_required": {
            "name": "test_time_required",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d7/__init__.py": {},
    "adventofcode-main/2018/aoc/d8/main.py": {
        "metadata_sum": {
            "name": "metadata_sum",
            "location": 8,
            "return": [
                "str",
                "BaseException",
                "Optional[BaseException]"
            ],
            "arguments": {}
        },
        "supervalue": {
            "name": "supervalue",
            "location": 12,
            "return": [
                "str",
                "BaseException",
                "Optional[BaseException]"
            ],
            "arguments": {}
        },
        "_parse_tree": {
            "name": "_parse_tree",
            "location": 16,
            "return": [
                "Optional[\"TreeNode\"]",
                "Optional[Dict[str, Any]]",
                "str",
                "BaseException"
            ],
            "arguments": {}
        },
        "_parse_node": {
            "name": "_parse_node",
            "location": 22,
            "return": [
                "int",
                "Union[Sequence, 'SweepFixedValues']"
            ],
            "arguments": {
                "unparsed_input": [
                    "List[int]",
                    "str",
                    "int"
                ]
            }
        },
        "_read_input": {
            "name": "_read_input",
            "location": 33,
            "return": [
                "List[str]",
                "List[dict]",
                "list"
            ],
            "arguments": {}
        },
        "Node.metadata_sum": {
            "name": "metadata_sum",
            "location": 43,
            "return": [
                "int",
                "str",
                "list",
                "List[T]",
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Node.supervalue": {
            "name": "supervalue",
            "location": 46,
            "return": [
                "int",
                "str",
                "list",
                "List[T]",
                "List[float]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d8/test.py": {
        "TestCase.test_metadata_sum": {
            "name": "test_metadata_sum",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_supervalue": {
            "name": "test_supervalue",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d8/__init__.py": {},
    "adventofcode-main/2018/aoc/d9/main.py": {
        "highscore": {
            "name": "highscore",
            "location": 10,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "players": [
                    "Type",
                    "int",
                    "str",
                    "float"
                ],
                "last_marble_value": [
                    "int",
                    "float",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "_init_game": {
            "name": "_init_game",
            "location": 27,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "_print_game": {
            "name": "_print_game",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "current_node": [
                    "int"
                ]
            }
        },
        "Node.advance": {
            "name": "advance",
            "location": 56,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "times": [
                    "int",
                    "float"
                ]
            }
        },
        "Node.back": {
            "name": "back",
            "location": 62,
            "return": [
                "int",
                "Iterable[str]",
                "Union[int, slice]",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "times": [
                    "int",
                    "float"
                ]
            }
        },
        "Node.insert": {
            "name": "insert",
            "location": 68,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "T",
                    "type"
                ]
            }
        },
        "Node.remove": {
            "name": "remove",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d9/test.py": {
        "TestCase.test_highscore_with_25_marbles": {
            "name": "test_highscore_with_25_marbles",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_highscore_with_1618_marbles": {
            "name": "test_highscore_with_1618_marbles",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_highscore_with_7999_marbles": {
            "name": "test_highscore_with_7999_marbles",
            "location": 13,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_highscore_with_1104_marbles": {
            "name": "test_highscore_with_1104_marbles",
            "location": 16,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_highscore_with_6111_marbles": {
            "name": "test_highscore_with_6111_marbles",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestCase.test_highscore_with_5807_marbles": {
            "name": "test_highscore_with_5807_marbles",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "adventofcode-main/2018/aoc/d9/__init__.py": {}
}
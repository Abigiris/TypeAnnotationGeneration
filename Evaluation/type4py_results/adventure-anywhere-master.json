{
    "adventure-anywhere-master/adventure/data.py": {
        "make_object": {
            "name": "make_object",
            "location": 44,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "dictionary": [
                    "int",
                    "float"
                ],
                "klass": [
                    "int"
                ],
                "n": [
                    "int",
                    "List[int]",
                    "list"
                ]
            }
        },
        "expand_tabs": {
            "name": "expand_tabs",
            "location": 50,
            "return": [
                "str",
                "list",
                "Sequence[str]",
                "List[str]",
                "Set[str]"
            ],
            "arguments": {
                "segments": [
                    "bool",
                    "str",
                    "float",
                    "int",
                    "Sequence[int]"
                ]
            }
        },
        "accumulate_message": {
            "name": "accumulate_message",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "dictionary": [
                    "int",
                    "List[str]"
                ],
                "n": [
                    "int",
                    "List[str]"
                ],
                "line": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "section1": {
            "name": "section1",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "int",
                    "str",
                    "dict"
                ],
                "n": [
                    "bytes",
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "section2": {
            "name": "section2",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "int",
                    "Union[int, float]",
                    "list"
                ],
                "n": [
                    "int",
                    "Union[int, float]",
                    "list"
                ],
                "line": [
                    "int",
                    "Union[int, float]",
                    "list"
                ]
            }
        },
        "section3": {
            "name": "section3",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "int",
                    "dict",
                    "float"
                ],
                "x": [
                    "Tuple[int]",
                    "gluonts.model.common.Tensor"
                ],
                "y": [
                    "int",
                    "List[Dict[str, Any]]",
                    "str",
                    "Optional[int]",
                    "List[str]"
                ]
            }
        },
        "section4": {
            "name": "section4",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "str",
                    "Iterable[T]",
                    "int"
                ],
                "n": [
                    "int",
                    "str"
                ],
                "text": [
                    "str",
                    "int",
                    "Type[object]"
                ]
            }
        },
        "section5": {
            "name": "section5",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "str",
                    "int"
                ],
                "n": [
                    "int",
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "section6": {
            "name": "section6",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "int"
                ],
                "n": [
                    "int"
                ]
            }
        },
        "section7": {
            "name": "section7",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "int",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "str",
                    "list",
                    "dict"
                ],
                "n": [
                    "int",
                    "list",
                    "Dict[str, Union[Any, None, Any, Any, bool]]",
                    "Type[tuple]"
                ],
                "room_n": [
                    "int",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "bool"
                ],
                "fixed": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "section8": {
            "name": "section8",
            "location": 163,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "data": [
                    "int",
                    "dict",
                    "float",
                    "str",
                    "Mapping[str, str]"
                ],
                "word_n": [
                    "Optional[int]",
                    "int"
                ],
                "message_n": [
                    "str",
                    "int",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "section9": {
            "name": "section9",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Dict[str, Any]",
                    "dict",
                    "Mapping[str, Any]",
                    "List[Dict[str, Any]]"
                ],
                "bit": [
                    "dict",
                    "bytes",
                    "Union[str, bytes, None]",
                    "Dict[str, Any]"
                ]
            }
        },
        "section10": {
            "name": "section10",
            "location": 186,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "Sequence[str]",
                    "bytes",
                    "T",
                    "int"
                ],
                "score": [
                    "Sequence[str]",
                    "bytes",
                    "T",
                    "int"
                ],
                "line": [
                    "Sequence[str]",
                    "bytes",
                    "T",
                    "int"
                ]
            }
        },
        "section11": {
            "name": "section11",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "bool",
                    "str"
                ],
                "n": [
                    "Sequence[Sequence[Any]]",
                    "bool",
                    "List[str]",
                    "int",
                    "Dict[str, Any]"
                ],
                "turns_needed": [
                    "int",
                    "float",
                    "Optional[int]",
                    "bool"
                ],
                "penalty": [
                    "int",
                    "float",
                    "Optional[int]",
                    "bool"
                ],
                "question_n": [
                    "str",
                    "int",
                    "bool",
                    "list"
                ],
                "message_n": [
                    "bool",
                    "int"
                ]
            }
        },
        "section12": {
            "name": "section12",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "str",
                    "Optional[str]"
                ],
                "n": [
                    "str",
                    "Optional[str]"
                ],
                "line": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "parse": {
            "name": "parse",
            "location": 201,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "List[int]",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "datafile": [
                    "dict",
                    "str",
                    "Type",
                    "T",
                    "Dict[str, Callable]",
                    "Dict[str, str]"
                ]
            }
        },
        "Data.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Data.referent": {
            "name": "referent",
            "location": 38,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "word": [
                    "int",
                    "Tuple[int, int]",
                    "float"
                ]
            }
        }
    },
    "adventure-anywhere-master/adventure/game.py": {
        "Game.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [],
            "arguments": {
                "self": [],
                "seed": []
            }
        },
        "Game.random": {
            "name": "random",
            "location": 61,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.choice": {
            "name": "choice",
            "location": 64,
            "return": [],
            "arguments": {
                "self": [],
                "seq": []
            }
        },
        "Game.write": {
            "name": "write",
            "location": 67,
            "return": [],
            "arguments": {
                "self": [],
                "more": []
            }
        },
        "Game.write_message": {
            "name": "write_message",
            "location": 73,
            "return": [],
            "arguments": {
                "self": [],
                "n": []
            }
        },
        "Game.yesno": {
            "name": "yesno",
            "location": 76,
            "return": [],
            "arguments": {
                "self": [],
                "s": [],
                "yesno_callback": [],
                "casual": []
            }
        },
        "Game.is_dark": {
            "name": "is_dark",
            "location": 85,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.inventory": {
            "name": "inventory",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.treasures": {
            "name": "treasures",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.objects_here": {
            "name": "objects_here",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.objects_at": {
            "name": "objects_at",
            "location": 103,
            "return": [],
            "arguments": {
                "self": [],
                "room": []
            }
        },
        "Game.is_here": {
            "name": "is_here",
            "location": 106,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Game.is_finished": {
            "name": "is_finished",
            "location": 113,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.start": {
            "name": "start",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.start2": {
            "name": "start2",
            "location": 134,
            "return": [],
            "arguments": {
                "self": [],
                "yes": []
            }
        },
        "Game.move_to": {
            "name": "move_to",
            "location": 157,
            "return": [],
            "arguments": {
                "self": [],
                "newloc": []
            }
        },
        "Game.move_dwarves": {
            "name": "move_dwarves",
            "location": 192,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.describe_location": {
            "name": "describe_location",
            "location": 327,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.say_okay_and_finish": {
            "name": "say_okay_and_finish",
            "location": 383,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.finish_turn": {
            "name": "finish_turn",
            "location": 391,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Game.do_command": {
            "name": "do_command",
            "location": 434,
            "return": [],
            "arguments": {
                "self": [],
                "words": []
            }
        },
        "Game._do_command": {
            "name": "_do_command",
            "location": 440,
            "return": [],
            "arguments": {
                "self": [],
                "words": []
            }
        },
        "Game.dispatch_command": {
            "name": "dispatch_command",
            "location": 508,
            "return": [],
            "arguments": {
                "self": [],
                "words": []
            }
        },
        "Game.dont_understand": {
            "name": "dont_understand",
            "location": 619,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.i_see_no": {
            "name": "i_see_no",
            "location": 630,
            "return": [],
            "arguments": {
                "self": [],
                "thing": []
            }
        },
        "Game.do_motion": {
            "name": "do_motion",
            "location": 636,
            "return": [],
            "arguments": {
                "self": [],
                "word": []
            }
        },
        "Game.die_here": {
            "name": "die_here",
            "location": 774,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.die": {
            "name": "die",
            "location": 779,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.ask_verb_what": {
            "name": "ask_verb_what",
            "location": 812,
            "return": [],
            "arguments": {
                "self": [],
                "verb": []
            }
        },
        "Game.write_default_message": {
            "name": "write_default_message",
            "location": 829,
            "return": [],
            "arguments": {
                "self": [],
                "verb": []
            }
        },
        "Game.i_carry": {
            "name": "i_carry",
            "location": 841,
            "return": [],
            "arguments": {
                "self": [],
                "verb": []
            }
        },
        "Game.t_carry": {
            "name": "t_carry",
            "location": 849,
            "return": [],
            "arguments": {
                "self": [],
                "verb": [],
                "obj": []
            }
        },
        "Game.t_drop": {
            "name": "t_drop",
            "location": 903,
            "return": [],
            "arguments": {
                "self": [],
                "verb": [],
                "obj": []
            }
        },
        "Game.t_say": {
            "name": "t_say",
            "location": 969,
            "return": [],
            "arguments": {
                "self": [],
                "verb": [],
                "word": []
            }
        },
        "Game.i_unlock": {
            "name": "i_unlock",
            "location": 976,
            "return": [],
            "arguments": {
                "self": [],
                "verb": []
            }
        },
        "Game.t_unlock": {
            "name": "t_unlock",
            "location": 989,
            "return": [],
            "arguments": {
                "self": [],
                "verb": [],
                "obj": []
            }
        },
        "Game.t_light": {
            "name": "t_light",
            "location": 1060,
            "return": [],
            "arguments": {
                "self": [],
                "verb": [],
                "obj": []
            }
        },
        "Game.t_extinguish": {
            "name": "t_extinguish",
            "location": 1074,
            "return": [],
            "arguments": {
                "self": [],
                "verb": [],
                "obj": []
            }
        },
        "Game.t_wave": {
            "name": "t_wave",
            "location": 1086,
            "return": [],
            "arguments": {
                "self": [],
                "verb": [],
                "obj": []
            }
        },
        "Game.i_attack": {
            "name": "i_attack",
            "location": 1101,
            "return": [],
            "arguments": {
                "self": [],
                "verb": []
            }
        },
        "Game.t_attack": {
            "name": "t_attack",
            "location": 1122,
            "return": [],
            "arguments": {
                "self": [],
                "verb": [],
                "obj": []
            }
        },
        "Game.i_pour": {
            "name": "i_pour",
            "location": 1170,
            "return": [],
            "arguments": {
                "self": [],
                "verb": []
            }
        },
        "Game.t_pour": {
            "name": "t_pour",
            "location": 1176,
            "return": [],
            "arguments": {
                "self": [],
                "verb": [],
                "obj": []
            }
        },
        "Game.i_eat": {
            "name": "i_eat",
            "location": 1203,
            "return": [],
            "arguments": {
                "self": [],
                "verb": []
            }
        },
        "Game.t_eat": {
            "name": "t_eat",
            "location": 1209,
            "return": [],
            "arguments": {
                "self": [],
                "verb": [],
                "obj": []
            }
        },
        "Game.i_drink": {
            "name": "i_drink",
            "location": 1221,
            "return": [],
            "arguments": {
                "self": [],
                "verb": []
            }
        },
        "Game.t_drink": {
            "name": "t_drink",
            "location": 1227,
            "return": [],
            "arguments": {
                "self": [],
                "verb": [],
                "obj": []
            }
        },
        "Game.t_rub": {
            "name": "t_rub",
            "location": 1239,
            "return": [],
            "arguments": {
                "self": [],
                "verb": [],
                "obj": []
            }
        },
        "Game.t_throw": {
            "name": "t_throw",
            "location": 1246,
            "return": [],
            "arguments": {
                "self": [],
                "verb": [],
                "obj": []
            }
        },
        "Game.i_quit": {
            "name": "i_quit",
            "location": 1310,
            "return": [],
            "arguments": {
                "self": [],
                "verb": []
            }
        },
        "Game.t_find": {
            "name": "t_find",
            "location": 1317,
            "return": [],
            "arguments": {
                "self": [],
                "verb": [],
                "obj": []
            }
        },
        "Game.i_inventory": {
            "name": "i_inventory",
            "location": 1332,
            "return": [],
            "arguments": {
                "self": [],
                "verb": []
            }
        },
        "Game.t_feed": {
            "name": "t_feed",
            "location": 1346,
            "return": [],
            "arguments": {
                "self": [],
                "verb": [],
                "obj": []
            }
        },
        "Game.i_fill": {
            "name": "i_fill",
            "location": 1388,
            "return": [],
            "arguments": {
                "self": [],
                "verb": []
            }
        },
        "Game.t_fill": {
            "name": "t_fill",
            "location": 1393,
            "return": [],
            "arguments": {
                "self": [],
                "verb": [],
                "obj": []
            }
        },
        "Game.t_blast": {
            "name": "t_blast",
            "location": 1424,
            "return": [],
            "arguments": {
                "self": [],
                "verb": [],
                "obj": []
            }
        },
        "Game.i_score": {
            "name": "i_score",
            "location": 1440,
            "return": [],
            "arguments": {
                "self": [],
                "verb": []
            }
        },
        "Game.i_fee": {
            "name": "i_fee",
            "location": 1450,
            "return": [],
            "arguments": {
                "self": [],
                "verb": []
            }
        },
        "Game.i_brief": {
            "name": "i_brief",
            "location": 1481,
            "return": [],
            "arguments": {
                "self": [],
                "verb": []
            }
        },
        "Game.i_read": {
            "name": "i_read",
            "location": 1487,
            "return": [],
            "arguments": {
                "self": [],
                "verb": []
            }
        },
        "Game.t_read": {
            "name": "t_read",
            "location": 1497,
            "return": [],
            "arguments": {
                "self": [],
                "verb": [],
                "obj": []
            }
        },
        "Game.t_break": {
            "name": "t_break",
            "location": 1521,
            "return": [],
            "arguments": {
                "self": [],
                "verb": [],
                "obj": []
            }
        },
        "Game.t_wake": {
            "name": "t_wake",
            "location": 1538,
            "return": [],
            "arguments": {
                "self": [],
                "verb": [],
                "obj": []
            }
        },
        "Game.i_suspend": {
            "name": "i_suspend",
            "location": 1546,
            "return": [],
            "arguments": {
                "self": [],
                "verb": []
            }
        },
        "Game.t_suspend": {
            "name": "t_suspend",
            "location": 1551,
            "return": [],
            "arguments": {
                "self": [],
                "verb": [],
                "obj": []
            }
        },
        "Game.i_hours": {
            "name": "i_hours",
            "location": 1570,
            "return": [],
            "arguments": {
                "self": [],
                "verb": []
            }
        },
        "Game.resume": {
            "name": "resume",
            "location": 1574,
            "return": [],
            "arguments": {
                "self": [],
                "obj": []
            }
        },
        "Game.should_offer_hint": {
            "name": "should_offer_hint",
            "location": 1589,
            "return": [],
            "arguments": {
                "self": [],
                "hint": [],
                "obj": []
            }
        },
        "Game.start_closing_cave": {
            "name": "start_closing_cave",
            "location": 1612,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.close_cave": {
            "name": "close_cave",
            "location": 1627,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.wake_repository_dwarves": {
            "name": "wake_repository_dwarves",
            "location": 1652,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.compute_score": {
            "name": "compute_score",
            "location": 1656,
            "return": [],
            "arguments": {
                "self": [],
                "for_score_command": []
            }
        },
        "Game.score_and_exit": {
            "name": "score_and_exit",
            "location": 1705,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Game.die.callback": {
            "name": "callback",
            "location": 788,
            "return": [],
            "arguments": {
                "yes": []
            }
        },
        "Game.i_quit.callback": {
            "name": "callback",
            "location": 1311,
            "return": [],
            "arguments": {
                "yes": []
            }
        },
        "Game.i_score.callback": {
            "name": "callback",
            "location": 1444,
            "return": [],
            "arguments": {
                "yes": []
            }
        },
        "Game.t_read.callback": {
            "name": "callback",
            "location": 1502,
            "return": [],
            "arguments": {
                "yes": []
            }
        },
        "Game.finish_turn.callback": {
            "name": "callback",
            "location": 408,
            "return": [],
            "arguments": {
                "yes": []
            }
        },
        "Game.t_attack.callback": {
            "name": "callback",
            "location": 1145,
            "return": [],
            "arguments": {
                "yes": []
            }
        }
    },
    "adventure-anywhere-master/adventure/model.py": {
        "Move.__repr__": {
            "name": "__repr__",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Room.__init__": {
            "name": "__init__",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Room.__repr__": {
            "name": "__repr__",
            "location": 63,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Room.is_forced": {
            "name": "is_forced",
            "location": 67,
            "return": [
                "bool",
                "Optional[str]",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Room.is_aboveground": {
            "name": "is_aboveground",
            "location": 71,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Room.is_before_hall_of_mists": {
            "name": "is_before_hall_of_mists",
            "location": 75,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Room.is_after_hall_of_mists": {
            "name": "is_after_hall_of_mists",
            "location": 79,
            "return": [
                "str",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Room.is_dark": {
            "name": "is_dark",
            "location": 83,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Word.__repr__": {
            "name": "__repr__",
            "location": 96,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Word.__eq__": {
            "name": "__eq__",
            "location": 99,
            "return": [
                "bool",
                "Iterable[str]",
                "Hashable"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "List[str]",
                    "str",
                    "Callable",
                    "Callable[[], Any]"
                ]
            }
        },
        "Word.add_synonym": {
            "name": "add_synonym",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "Object.__init__": {
            "name": "__init__",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.__repr__": {
            "name": "__repr__",
            "location": 122,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "float",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.__hash__": {
            "name": "__hash__",
            "location": 125,
            "return": [
                "int",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.__eq__": {
            "name": "__eq__",
            "location": 128,
            "return": [],
            "arguments": {
                "self": [],
                "other": [
                    "Type"
                ]
            }
        },
        "Object.is_at": {
            "name": "is_at",
            "location": 131,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "room": [
                    "str",
                    "int"
                ]
            }
        },
        "Object.carry": {
            "name": "carry",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.drop": {
            "name": "drop",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "room": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Object.hide": {
            "name": "hide",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Object.destroy": {
            "name": "destroy",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.__str__": {
            "name": "__str__",
            "location": 153,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Hint.__init__": {
            "name": "__init__",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Dwarf.__init__": {
            "name": "__init__",
            "location": 173,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "room": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Dwarf.start_at": {
            "name": "start_at",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "room": [
                    "int",
                    "Tuple[str, str]",
                    "str",
                    "list"
                ]
            }
        },
        "Dwarf.can_move": {
            "name": "can_move",
            "location": 181,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "move": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "adventure-anywhere-master/adventure/prompt.py": {
        "install_words": {
            "name": "install_words",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "game": [
                    "str",
                    "int",
                    "Callable[[str], None]",
                    "List[str]",
                    "bytes",
                    "Optional[str]"
                ]
            }
        },
        "ReprTriggeredPhrase.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "game": [
                    "Tuple[int, int]",
                    "str"
                ],
                "words": [
                    "bool",
                    "Iterable[Any]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "ReprTriggeredPhrase.__repr__": {
            "name": "__repr__",
            "location": 16,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReprTriggeredPhrase.__call__": {
            "name": "__call__",
            "location": 21,
            "return": [
                "str",
                "List[str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "arg": [
                    "Optional[str]",
                    "Optional[Sequence[float]]"
                ]
            }
        },
        "ReprTriggeredPhrase.__getattr__": {
            "name": "__getattr__",
            "location": 28,
            "return": [
                "str",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "adventure-anywhere-master/adventure/__init__.py": {
        "load_advent_dat": {
            "name": "load_advent_dat",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "data": [
                    "str",
                    "Optional[Union[Dict, str, int, bytes]]",
                    "bytes",
                    "Iterable[bytes]"
                ]
            }
        },
        "play": {
            "name": "play",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "seed": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "resume": {
            "name": "resume",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "savefile": [
                    "int",
                    "Callable",
                    "str"
                ],
                "quiet": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "adventure-anywhere-master/adventure/__main__.py": {
        "baudout": {
            "name": "baudout",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "s": [
                    "AnyStr",
                    "Union[bytes, bytearray]",
                    "Iterable[T]",
                    "bool",
                    "str"
                ]
            }
        },
        "loop": {
            "name": "loop",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "adventure-anywhere-master/adventure/tests/test_commands.py": {
        "CommandTest.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandTest.test_intransitive_commands_should_not_throw_exceptions": {
            "name": "test_intransitive_commands_should_not_throw_exceptions",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandTest.test_transitive_commands_should_not_throw_exceptions": {
            "name": "test_transitive_commands_should_not_throw_exceptions",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventure-anywhere-master/adventure/tests/test_data.py": {
        "DataTest.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DataTest.test_long_description": {
            "name": "test_long_description",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DataTest.test_long_description_expands_tabs": {
            "name": "test_long_description_expands_tabs",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DataTest.test_short_description": {
            "name": "test_short_description",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DataTest.test_object_message_expands_tabs": {
            "name": "test_object_message_expands_tabs",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DataTest.test_hint": {
            "name": "test_hint",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReprTest.setUp": {
            "name": "setUp",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReprTest.assertMove": {
            "name": "assertMove",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "room_i": [
                    "int",
                    "str",
                    "float",
                    "bool",
                    "Union[float, int]"
                ],
                "entry_i": [
                    "int",
                    "str",
                    "float",
                    "bool",
                    "Union[float, int]"
                ],
                "s": [
                    "str",
                    "int",
                    "bytes",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "ReprTest.test_move_repr_look_good": {
            "name": "test_move_repr_look_good",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReprTest.test_move_repr_works_on_all_moves": {
            "name": "test_move_repr_works_on_all_moves",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReprTest.test_room_repr": {
            "name": "test_room_repr",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReprTest.test_object_repr": {
            "name": "test_object_repr",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ReprTest.test_word_repr": {
            "name": "test_word_repr",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventure-anywhere-master/adventure/tests/test_walks.py": {
        "load_tests": {
            "name": "load_tests",
            "location": 12,
            "return": [
                "str",
                "dict",
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "loader": [
                    "bool",
                    "str"
                ],
                "tests": [
                    "str"
                ],
                "pattern": [
                    "bool",
                    "str"
                ]
            }
        },
        "ChdirTemp.setup": {
            "name": "setup",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "doctest_object": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ChdirTemp.teardown": {
            "name": "teardown",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "doctest_object": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "adventure-anywhere-master/adventure/tests/__init__.py": {},
    "adventure-anywhere-master/adventure_anywhere/definitions.py": {
        "SavesGateway.fetch_save": {
            "name": "fetch_save",
            "location": 11,
            "return": [
                "typing.Optional[io.BytesIO]"
            ],
            "arguments": {
                "self": [],
                "player_id": [
                    "str",
                    "dict",
                    "int",
                    "bool"
                ]
            }
        },
        "SavesGateway.update_save": {
            "name": "update_save",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "player_id": [
                    "bool",
                    "str",
                    "Optional[\"UtilityFunction\"]"
                ],
                "save": [
                    "bool",
                    "str",
                    "Optional[\"UtilityFunction\"]"
                ]
            }
        },
        "GameEngine.resume": {
            "name": "resume",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "save": [
                    "bool",
                    "str",
                    "Set[str]"
                ]
            }
        },
        "GameEngine.start": {
            "name": "start",
            "location": 25,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameEngine.do_command": {
            "name": "do_command",
            "location": 29,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "bool",
                    "int",
                    "set"
                ]
            }
        },
        "GameEngine.save": {
            "name": "save",
            "location": 33,
            "return": [
                "io.BytesIO"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameEngine.last_output": {
            "name": "last_output",
            "location": 37,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "adventure-anywhere-master/adventure_anywhere/exceptions.py": {},
    "adventure-anywhere-master/adventure_anywhere/file_system_saves.py": {
        "FileSystemSavesGateway.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "saves_directory": [
                    "str",
                    "bool"
                ]
            }
        },
        "FileSystemSavesGateway.fetch_save": {
            "name": "fetch_save",
            "location": 17,
            "return": [
                "str",
                "Optional[int]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "player_id": [
                    "Optional[str]",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "FileSystemSavesGateway.update_save": {
            "name": "update_save",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "player_id": [
                    "str",
                    "pathlib.Path",
                    "bool"
                ],
                "save": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "adventure-anywhere-master/adventure_anywhere/game.py": {
        "GameEngine.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameEngine.start": {
            "name": "start",
            "location": 17,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[float]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameEngine.resume": {
            "name": "resume",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "save": [
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "GameEngine.do_command": {
            "name": "do_command",
            "location": 32,
            "return": [
                "T",
                "List[str]",
                "definitions.OverridesT",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "command": [
                    "int",
                    "str"
                ]
            }
        },
        "GameEngine.save": {
            "name": "save",
            "location": 39,
            "return": [
                "dict",
                "IO[bytes]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameEngine.last_output": {
            "name": "last_output",
            "location": 47,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "GameEngine.help_prompt": {
            "name": "help_prompt",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "adventure-anywhere-master/adventure_anywhere/policies.py": {
        "command.invalid_reason": {
            "name": "invalid_reason",
            "location": 7,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "command_text": [
                    "str"
                ]
            }
        },
        "command._one_line_policy": {
            "name": "_one_line_policy",
            "location": 15,
            "return": [
                "Optional[str]",
                "bool",
                "Tuple[float, float]",
                "Optional[Sequence[str]]",
                "Optional[Callable]"
            ],
            "arguments": {
                "command_text": [
                    "str"
                ]
            }
        },
        "command._prohibited_adventure_commands": {
            "name": "_prohibited_adventure_commands",
            "location": 21,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]",
                "bytes",
                "Iterable[str]"
            ],
            "arguments": {
                "command_text": [
                    "str"
                ]
            }
        },
        "command._includes_words_policy": {
            "name": "_includes_words_policy",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "command_text": [
                    "str",
                    "int"
                ]
            }
        },
        "command._policies": {
            "name": "_policies",
            "location": 46,
            "return": [
                "bool",
                "float",
                "int"
            ],
            "arguments": {}
        }
    },
    "adventure-anywhere-master/adventure_anywhere/s3_bucket_saves.py": {
        "S3BucketSavesGateway.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "bucket_name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "S3BucketSavesGateway.fetch_save": {
            "name": "fetch_save",
            "location": 18,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "player_id": [
                    "str"
                ]
            }
        },
        "S3BucketSavesGateway.update_save": {
            "name": "update_save",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "player_id": [
                    "str",
                    "bool",
                    "int"
                ],
                "save": [
                    "io.BytesIO",
                    "str",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "adventure-anywhere-master/adventure_anywhere/special_sms_functionality.py": {
        "add_after_start_notices": {
            "name": "add_after_start_notices",
            "location": 13,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "start_text": [
                    "Optional[str]",
                    "Iterable[str]",
                    "List[str]",
                    "list",
                    "Dict[str, bool]"
                ],
                "config": [
                    "Optional[str]",
                    "Iterable[str]",
                    "List[str]",
                    "list",
                    "Dict[str, bool]"
                ]
            }
        },
        "preprocess_command": {
            "name": "preprocess_command",
            "location": 23,
            "return": [
                "str"
            ],
            "arguments": {
                "command_text": [
                    "str",
                    "int"
                ],
                "config": [
                    "str",
                    "robotica.types.Config"
                ]
            }
        },
        "_lower": {
            "name": "_lower",
            "location": 45,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "string": [
                    "str"
                ]
            }
        },
        "is_restart_command": {
            "name": "is_restart_command",
            "location": 49,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "command_text": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "adventure-anywhere-master/adventure_anywhere/use_adventure.py": {
        "do_command": {
            "name": "do_command",
            "location": 7,
            "return": [
                "str"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "IO[str]"
                ],
                "command_text": [
                    "int",
                    "str",
                    "IO[str]"
                ],
                "player_id": [
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "last_output": {
            "name": "last_output",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "context": [
                    "str",
                    "int",
                    "bytes"
                ],
                "player_id": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        }
    },
    "adventure-anywhere-master/adventure_anywhere/utils.py": {
        "pipe": {
            "name": "pipe",
            "location": 11,
            "return": [
                "Dict[str, int]",
                "dict",
                "Iterable[str]",
                "int"
            ],
            "arguments": {
                "value": [
                    "T",
                    "Dict[str, Any]",
                    "Iterable[Any]"
                ],
                "funcs": [
                    "T",
                    "Dict[str, Any]",
                    "Iterable[Any]"
                ]
            }
        },
        "without_none_values": {
            "name": "without_none_values",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "values": [
                    "Iterable",
                    "Optional[str]",
                    "str",
                    "float",
                    "T",
                    "bool",
                    "Union[type, Tuple[type, ...]]"
                ]
            }
        },
        "with_delimiter": {
            "name": "with_delimiter",
            "location": 29,
            "return": [
                "typing.Iterable[T]"
            ],
            "arguments": {
                "values": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ],
                "delimiter": [
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        },
        "notice": {
            "name": "notice",
            "location": 49,
            "return": [],
            "arguments": {
                "notice_text": [
                    "str"
                ]
            }
        }
    },
    "adventure-anywhere-master/adventure_anywhere/__init__.py": {},
    "adventure-anywhere-master/adventure_anywhere/__main__.py": {},
    "adventure-anywhere-master/alexa_adventure/handler.py": {
        "_handle_help_request": {
            "name": "_handle_help_request",
            "location": 22,
            "return": [
                "Mapping[str, Any]",
                "Dict[str, Union[str, Set]]",
                "Exception",
                "Callable"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "ashpy.contexts.Context",
                    "str"
                ],
                "context": [
                    "dict",
                    "ashpy.contexts.Context",
                    "str"
                ]
            }
        },
        "_handle_stop_request": {
            "name": "_handle_stop_request",
            "location": 29,
            "return": [
                "Dict[str, Any]",
                "str",
                "Exception"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "ashpy.contexts.Context",
                    "str"
                ],
                "context": [
                    "dict",
                    "ashpy.contexts.Context",
                    "str"
                ]
            }
        },
        "_handle_session_ended_request": {
            "name": "_handle_session_ended_request",
            "location": 34,
            "return": [
                "Dict[str, Any]",
                "Mapping[str, Any]",
                "Dict[str, Union[str, Set]]",
                "Callable",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "event": [
                    "Callable",
                    "Dict[str, Any]",
                    "\"keras.models.Sequential\""
                ],
                "context": [
                    "str"
                ]
            }
        },
        "_handle_launch_request": {
            "name": "_handle_launch_request",
            "location": 48,
            "return": [
                "Mapping[str, Any]",
                "Dict[str, Union[str, Set]]",
                "Exception",
                "Callable"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "cdp.util.T_JSON_DICT"
                ],
                "context": [
                    "dict"
                ]
            }
        },
        "_handle_command_intent_request": {
            "name": "_handle_command_intent_request",
            "location": 62,
            "return": [
                "bool",
                "Mapping",
                "int"
            ],
            "arguments": {
                "event": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "context": [
                    "str"
                ]
            }
        },
        "_build_response": {
            "name": "_build_response",
            "location": 80,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "response_text": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "_pluck_command": {
            "name": "_pluck_command",
            "location": 90,
            "return": [
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "event": [
                    "Callable",
                    "Dict[str, Any]",
                    "\"keras.models.Sequential\""
                ]
            }
        },
        "_replace_type_with_say": {
            "name": "_replace_type_with_say",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "adventure-anywhere-master/alexa_adventure/util.py": {
        "Skill.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Skill.intent": {
            "name": "intent",
            "location": 19,
            "return": [
                "tuple",
                "str"
            ],
            "arguments": {
                "self": [],
                "intent_name": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Skill.request": {
            "name": "request",
            "location": 22,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Mapping[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request_type": [
                    "str",
                    "bool"
                ]
            }
        },
        "Skill._invocation": {
            "name": "_invocation",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "request_type": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "intent_name": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "Skill.handle": {
            "name": "handle",
            "location": 39,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "bool",
                    "Dict[str, Any]",
                    "List[List[int]]"
                ],
                "context": [
                    "dict"
                ]
            }
        },
        "Skill._pluck_invocation_details": {
            "name": "_pluck_invocation_details",
            "location": 49,
            "return": [
                "bool",
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "event": [
                    "dict"
                ]
            }
        },
        "Skill._invocation_details_invalid_reason": {
            "name": "_invocation_details_invalid_reason",
            "location": 56,
            "return": [
                "List[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "invocation_details": [
                    "str",
                    "dict",
                    "bool",
                    "Callable"
                ]
            }
        },
        "Skill._invocation.decorator": {
            "name": "decorator",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "handler": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "adventure-anywhere-master/alexa_adventure/__init__.py": {},
    "adventure-anywhere-master/sms_adventure/handler.py": {
        "preprocess_command": {
            "name": "preprocess_command",
            "location": 19,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "command": [
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "handle_sms": {
            "name": "handle_sms",
            "location": 28,
            "return": [
                "str",
                "bytes",
                "Optional[str]",
                "os.PathLike"
            ],
            "arguments": {
                "event": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ],
                "context": [
                    "dict",
                    "Config"
                ]
            }
        }
    },
    "adventure-anywhere-master/sms_adventure/__init__.py": {}
}
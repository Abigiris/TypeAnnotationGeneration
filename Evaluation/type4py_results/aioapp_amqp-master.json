{
    "aioapp_amqp-master/setup.py": {},
    "aioapp_amqp-master/travis_pypi_setup.py": {
        "load_key": {
            "name": "load_key",
            "location": 28,
            "return": [
                "bytes",
                "str",
                "Dict[str, str]",
                "Optional[str]"
            ],
            "arguments": {
                "pubkey": [
                    "str"
                ]
            }
        },
        "encrypt": {
            "name": "encrypt",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "pubkey": [
                    "str",
                    "List[str]",
                    "Callable[[T], bool]",
                    "Optional[bytes]"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "fetch_public_key": {
            "name": "fetch_public_key",
            "location": 55,
            "return": [
                "str",
                "dict",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "repo": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "prepend_line": {
            "name": "prepend_line",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "Optional[str]"
                ],
                "line": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "Iterator[str]",
                    "Iterable"
                ]
            }
        },
        "load_yaml_config": {
            "name": "load_yaml_config",
            "location": 80,
            "return": [
                "bytes",
                "Callable",
                "Dict[str, Dict[str, str]]",
                "IO",
                "str",
                "dict"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "save_yaml_config": {
            "name": "save_yaml_config",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "filepath": [
                    "Dict[str, Any]",
                    "str"
                ],
                "config": [
                    "Dict[str, Any]"
                ]
            }
        },
        "update_travis_deploy_password": {
            "name": "update_travis_deploy_password",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "encrypted_password": [
                    "str",
                    "dict"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "aioapp_amqp-master/aioapp_amqp/__init__.py": {
        "AmqpTracerConfig.on_publish_start": {
            "name": "on_publish_start",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "bool",
                    "str",
                    "int",
                    "Optional[bool]",
                    "float"
                ],
                "channel": [
                    "bool",
                    "str",
                    "int",
                    "Optional[bool]",
                    "float"
                ],
                "payload": [
                    "bool",
                    "str",
                    "int",
                    "Optional[bool]",
                    "float"
                ],
                "exchange_name": [
                    "bool",
                    "str",
                    "int",
                    "Optional[bool]",
                    "float"
                ],
                "routing_key": [
                    "bool",
                    "str",
                    "int",
                    "Optional[bool]",
                    "float"
                ],
                "properties": [
                    "bool",
                    "str",
                    "int",
                    "Optional[bool]",
                    "float"
                ],
                "mandatory": [
                    "bool",
                    "str",
                    "int",
                    "Optional[bool]",
                    "float"
                ],
                "immediate": [
                    "bool",
                    "str",
                    "int",
                    "Optional[bool]",
                    "float"
                ]
            }
        },
        "AmqpTracerConfig.on_publish_end": {
            "name": "on_publish_end",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "Span"
                ],
                "channel": [
                    "list",
                    "str"
                ],
                "err": [
                    "Optional[Exception]",
                    "bool",
                    "List[str]",
                    "str"
                ]
            }
        },
        "AmqpTracerConfig.on_ack_start": {
            "name": "on_ack_start",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "span": [
                    "bool",
                    "Optional[str]",
                    "float",
                    "List[Dict[str, str]]",
                    "List[str]",
                    "bytes",
                    "Optional[bool]"
                ],
                "channel": [
                    "bool",
                    "Optional[str]",
                    "float",
                    "List[Dict[str, str]]",
                    "List[str]",
                    "bytes",
                    "Optional[bool]"
                ],
                "delivery_tag": [
                    "bool",
                    "Optional[str]",
                    "float",
                    "List[Dict[str, str]]",
                    "List[str]",
                    "bytes",
                    "Optional[bool]"
                ],
                "multiple": [
                    "bool",
                    "Optional[str]",
                    "float",
                    "List[Dict[str, str]]",
                    "List[str]",
                    "bytes",
                    "Optional[bool]"
                ]
            }
        },
        "AmqpTracerConfig.on_ack_end": {
            "name": "on_ack_end",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "span": [
                    "Callable",
                    "Tuple[str]",
                    "List[str]"
                ],
                "channel": [
                    "str",
                    "bool",
                    "Callable",
                    "Optional[Any]"
                ],
                "err": [
                    "Callable",
                    "Tuple[str]"
                ]
            }
        },
        "AmqpTracerConfig.on_nack_start": {
            "name": "on_nack_start",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "span": [
                    "bool",
                    "Optional[str]",
                    "float",
                    "List[Dict[str, str]]",
                    "List[str]",
                    "bytes",
                    "Optional[bool]"
                ],
                "channel": [
                    "bool",
                    "Optional[str]",
                    "float",
                    "List[Dict[str, str]]",
                    "List[str]",
                    "bytes",
                    "Optional[bool]"
                ],
                "delivery_tag": [
                    "bool",
                    "Optional[str]",
                    "float",
                    "List[Dict[str, str]]",
                    "List[str]",
                    "bytes",
                    "Optional[bool]"
                ],
                "multiple": [
                    "bool",
                    "Optional[str]",
                    "float",
                    "List[Dict[str, str]]",
                    "List[str]",
                    "bytes",
                    "Optional[bool]"
                ]
            }
        },
        "AmqpTracerConfig.on_nack_end": {
            "name": "on_nack_end",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "span": [
                    "Callable",
                    "Tuple[str]",
                    "List[str]"
                ],
                "channel": [
                    "str",
                    "bool",
                    "Callable",
                    "Optional[Any]"
                ],
                "err": [
                    "Callable",
                    "Tuple[str]"
                ]
            }
        },
        "Amqp.__init__": {
            "name": "__init__",
            "location": 346,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "list",
                    "int",
                    "Tuple[int, int]",
                    "List[str]"
                ],
                "channels": [
                    "Dict[str, str]",
                    "bool",
                    "int",
                    "Dict[str, Dict[str, Any]]",
                    "Optional[Union[Any, Any]]",
                    "Dict[str, Iterable[Any]]",
                    "dict",
                    "Dict[str, Any]"
                ],
                "heartbeat": [
                    "str",
                    "list",
                    "int",
                    "Tuple[int, int]",
                    "List[str]"
                ],
                "connect_max_attempts": [
                    "float",
                    "bool",
                    "str"
                ],
                "connect_retry_delay": [
                    "float",
                    "bool",
                    "str"
                ]
            }
        },
        "Amqp._masked_url": {
            "name": "_masked_url",
            "location": 369,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Amqp.channel": {
            "name": "channel",
            "location": 452,
            "return": [
                "Optional[int]",
                "Optional[bool]",
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "aioapp_amqp-master/examples/amqp.py": {},
    "aioapp_amqp-master/tests/conftest.py": {
        "event_loop": {
            "name": "event_loop",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "loop": {
            "name": "loop",
            "location": 24,
            "return": [
                "str",
                "solo.config.app.Config",
                "app.models.dto.ClientInfo",
                "List[str]"
            ],
            "arguments": {
                "event_loop": [
                    "str"
                ]
            }
        },
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "str"
                ]
            }
        },
        "rabbitmq_override_addr": {
            "name": "rabbitmq_override_addr",
            "location": 39,
            "return": [
                "Dict[str, str]",
                "dict",
                "bool",
                "Sequence"
            ],
            "arguments": {
                "request": []
            }
        },
        "rabbitmq": {
            "name": "rabbitmq",
            "location": 123,
            "return": [
                "asyncio.Lock",
                "aiohttp.web.Application",
                "str",
                "int",
                "bool",
                "Mapping[str, str]"
            ],
            "arguments": {
                "docker_compose": [
                    "bool"
                ]
            }
        },
        "get_free_port": {
            "name": "get_free_port",
            "location": 127,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "protocol": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        }
    },
    "aioapp_amqp-master/tests/test_amqp.py": {
        "_create_span": {
            "name": "_create_span",
            "location": 28,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "app": [
                    "app.App",
                    "aiohttp.web.Application"
                ]
            }
        },
        "test_amqp.Pubchannel.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exchange": [
                    "int",
                    "bool",
                    "float"
                ],
                "queue": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "test_amqp.SubChannel.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "queue": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "aioapp_amqp-master/tests/__init__.py": {}
}
{
    "aioapp_pg-master/setup.py": {},
    "aioapp_pg-master/travis_pypi_setup.py": {
        "load_key": {
            "name": "load_key",
            "location": 28,
            "return": [
                "bytes",
                "str",
                "Dict[str, str]",
                "Optional[str]"
            ],
            "arguments": {
                "pubkey": [
                    "str"
                ]
            }
        },
        "encrypt": {
            "name": "encrypt",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "pubkey": [
                    "str",
                    "List[str]",
                    "Callable[[T], bool]",
                    "Optional[bytes]"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "fetch_public_key": {
            "name": "fetch_public_key",
            "location": 55,
            "return": [
                "str",
                "dict",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "repo": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "prepend_line": {
            "name": "prepend_line",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "Optional[str]"
                ],
                "line": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "Iterator[str]",
                    "Iterable"
                ]
            }
        },
        "load_yaml_config": {
            "name": "load_yaml_config",
            "location": 80,
            "return": [
                "bytes",
                "Callable",
                "Dict[str, Dict[str, str]]",
                "IO",
                "str",
                "dict"
            ],
            "arguments": {
                "filepath": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "save_yaml_config": {
            "name": "save_yaml_config",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "filepath": [
                    "Dict[str, Any]",
                    "str"
                ],
                "config": [
                    "Dict[str, Any]"
                ]
            }
        },
        "update_travis_deploy_password": {
            "name": "update_travis_deploy_password",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "encrypted_password": [
                    "str",
                    "dict"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "aioapp_pg-master/aioapp_pg/__init__.py": {
        "PostgresTracerConfig.on_acquire_start": {
            "name": "on_acquire_start",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "Span"
                ]
            }
        },
        "PostgresTracerConfig.on_acquire_end": {
            "name": "on_acquire_end",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "Span"
                ],
                "err": [
                    "Optional[Exception]"
                ]
            }
        },
        "PostgresTracerConfig.on_query_start": {
            "name": "on_query_start",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "str",
                    "tuple",
                    "Optional[float]",
                    "Span",
                    "bool",
                    "Tuple[str]"
                ],
                "id": [
                    "str",
                    "tuple",
                    "Optional[float]",
                    "Span",
                    "bool",
                    "Tuple[str]"
                ],
                "query": [
                    "str",
                    "tuple",
                    "Optional[float]",
                    "Span",
                    "bool",
                    "Tuple[str]"
                ],
                "args": [],
                "timeout": [
                    "str",
                    "tuple",
                    "Optional[float]",
                    "Span",
                    "bool",
                    "Tuple[str]"
                ]
            }
        },
        "PostgresTracerConfig.on_query_end": {
            "name": "on_query_end",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "Span"
                ],
                "err": [
                    "Optional[Exception]",
                    "str",
                    "bool"
                ],
                "result": [
                    "bool",
                    "Span",
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "PostgresTracerConfig.on_xact_begin_start": {
            "name": "on_xact_begin_start",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "bool",
                    "Span",
                    "str"
                ],
                "isolation_level": [
                    "bool",
                    "Span",
                    "str"
                ],
                "readonly": [
                    "bool",
                    "Span",
                    "str"
                ],
                "deferrable": [
                    "bool",
                    "Span",
                    "str"
                ]
            }
        },
        "PostgresTracerConfig.on_xact_begin_end": {
            "name": "on_xact_begin_end",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "Span"
                ],
                "err": [
                    "Optional[Exception]"
                ]
            }
        },
        "PostgresTracerConfig.on_xact_finish_start": {
            "name": "on_xact_finish_start",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "type",
                    "Span",
                    "BaseException",
                    "aioapp.tracer.Span"
                ],
                "exc_type": [
                    "type",
                    "Span",
                    "BaseException",
                    "aioapp.tracer.Span"
                ],
                "exc": [
                    "type",
                    "Span",
                    "BaseException",
                    "aioapp.tracer.Span"
                ],
                "tb": [
                    "type",
                    "Span",
                    "BaseException",
                    "aioapp.tracer.Span"
                ]
            }
        },
        "PostgresTracerConfig.on_xact_finish_end": {
            "name": "on_xact_finish_end",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "Span"
                ],
                "err": [
                    "Optional[Exception]"
                ]
            }
        },
        "Postgres.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "Optional[List[str]]",
                    "Optional[dict]",
                    "bool",
                    "List['cirq.Circuit']",
                    "str"
                ],
                "pool_min_size": [
                    "int",
                    "bool"
                ],
                "pool_max_size": [
                    "int",
                    "bool"
                ],
                "pool_max_queries": [
                    "bool",
                    "Optional[int]",
                    "str",
                    "Dict[int, int]"
                ],
                "pool_max_inactive_connection_lifetime": [
                    "Optional[List[str]]",
                    "Optional[dict]",
                    "bool",
                    "List['cirq.Circuit']",
                    "str"
                ],
                "connect_max_attempts": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ],
                "connect_retry_delay": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Postgres.pool": {
            "name": "pool",
            "location": 89,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Postgres._masked_url": {
            "name": "_masked_url",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Postgres.connection": {
            "name": "connection",
            "location": 185,
            "return": [
                "Optional[bool]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "aioapp.tracer.Span",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "bytes"
                ],
                "acquire_timeout": [
                    "aioapp.tracer.Span",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "bytes"
                ],
                "tracer_config": [
                    "aioapp.tracer.Span",
                    "bool",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "ConnectionContextManager.__init__": {
            "name": "__init__",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "Dict[str, Tuple[str, int, int]]",
                    "Dict[str, Tuple[str, str, Any]]",
                    "str",
                    "bool",
                    "int"
                ],
                "ctx": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "acquire_timeout": [
                    "int",
                    "bool",
                    "str",
                    "float",
                    "asyncio.Transport"
                ],
                "tracer_config": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "TransactionContextManager.__init__": {
            "name": "__init__",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "conn": [
                    "str",
                    "bool"
                ],
                "isolation_level": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Callable[[Optional], None]",
                    "bool",
                    "rflx.error.Location"
                ],
                "readonly": [
                    "str",
                    "bool"
                ],
                "deferrable": [
                    "str",
                    "bool"
                ],
                "xact_lock": [
                    "str",
                    "bool"
                ],
                "tracer_config": [
                    "bool",
                    "Dict[str, int]"
                ]
            }
        },
        "Connection.__init__": {
            "name": "__init__",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "db": [
                    "Callable",
                    "Hashable",
                    "int"
                ],
                "conn": [
                    "Set[str]"
                ]
            }
        },
        "Connection.in_transaction": {
            "name": "in_transaction",
            "location": 401,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Connection.xact": {
            "name": "xact",
            "location": 404,
            "return": [
                "Sequence['cirq.Qid']"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "str",
                    "bool"
                ],
                "isolation_level": [
                    "str",
                    "bool"
                ],
                "readonly": [
                    "str",
                    "bool"
                ],
                "deferrable": [
                    "str",
                    "bool"
                ],
                "tracer_config": [
                    "str",
                    "bool"
                ]
            }
        },
        "Postgres._conn_init._json_encoder": {
            "name": "_json_encoder",
            "location": 116,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "dict",
                "Callable[[Mapping], T]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "list",
                    "dict"
                ]
            }
        },
        "Postgres._conn_init._json_decoder": {
            "name": "_json_decoder",
            "location": 119,
            "return": [
                "int",
                "List[int]",
                "str",
                "Dict[Tuple[str, str], Tuple[float, float]]"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        },
        "Postgres._conn_init._jsonb_encoder": {
            "name": "_jsonb_encoder",
            "location": 127,
            "return": [
                "bool",
                "int",
                "str",
                "bytes",
                "Union[bytes, bytearray]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "SupportsBytes",
                    "Sequence[str]",
                    "bool",
                    "complex"
                ]
            }
        },
        "Postgres._conn_init._jsonb_decoder": {
            "name": "_jsonb_decoder",
            "location": 130,
            "return": [
                "int",
                "List[int]",
                "str",
                "Dict[Tuple[str, str], Tuple[float, float]]"
            ],
            "arguments": {
                "value": [
                    "bytes",
                    "bool",
                    "str",
                    "Union[bytes, str]",
                    "dict"
                ]
            }
        }
    },
    "aioapp_pg-master/examples/pg.py": {},
    "aioapp_pg-master/tests/conftest.py": {
        "event_loop": {
            "name": "event_loop",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "loop": {
            "name": "loop",
            "location": 24,
            "return": [
                "str",
                "solo.config.app.Config",
                "app.models.dto.ClientInfo",
                "List[str]"
            ],
            "arguments": {
                "event_loop": [
                    "str"
                ]
            }
        },
        "pytest_addoption": {
            "name": "pytest_addoption",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "str"
                ]
            }
        },
        "postgres_override_addr": {
            "name": "postgres_override_addr",
            "location": 39,
            "return": [
                "Dict[str, str]",
                "dict",
                "bool",
                "Sequence"
            ],
            "arguments": {
                "request": []
            }
        },
        "postgres": {
            "name": "postgres",
            "location": 124,
            "return": [
                "asyncio.Lock",
                "aiohttp.web.Application",
                "str",
                "int",
                "bool",
                "Mapping[str, str]"
            ],
            "arguments": {
                "docker_compose": [
                    "bool"
                ]
            }
        },
        "get_free_port": {
            "name": "get_free_port",
            "location": 128,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "protocol": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        }
    },
    "aioapp_pg-master/tests/test_db.py": {
        "_create_span": {
            "name": "_create_span",
            "location": 23,
            "return": [
                "bool",
                "Callable[[List, bool], None]",
                "Optional[str]",
                "aioapp.tracer.Span"
            ],
            "arguments": {
                "app": [
                    "aiohttp.web.Application",
                    "abilian.app.Application"
                ]
            }
        }
    },
    "aioapp_pg-master/tests/__init__.py": {}
}
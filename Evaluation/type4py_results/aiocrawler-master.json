{
    "aiocrawler-master/aiocrawler.py": {
        "InvalidContentTypeError.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "response": [
                    "List[dict]",
                    "Dict[str, Any]"
                ]
            }
        },
        "AIOCrawler.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "init_url": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[int]"
                ],
                "depth": [
                    "bool",
                    "str",
                    "Dict[str, str]",
                    "Optional[str]",
                    "int"
                ],
                "concurrency": [
                    "bool",
                    "str",
                    "Dict[str, str]",
                    "Optional[str]",
                    "int"
                ],
                "max_retries": [
                    "int",
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "user_agent": [
                    "bool",
                    "int",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "AIOCrawler.normalize_urls": {
            "name": "normalize_urls",
            "location": 101,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "urls": [
                    "str"
                ]
            }
        },
        "AIOCrawler.find_links": {
            "name": "find_links",
            "location": 113,
            "return": [
                "str",
                "bool",
                "bs4.Tag"
            ],
            "arguments": {
                "self": [],
                "html": [
                    "bool",
                    "float"
                ]
            }
        },
        "AIOCrawler.parse": {
            "name": "parse",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool",
                    "Iterable[Any]"
                ],
                "links": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool",
                    "Iterable[Any]"
                ],
                "html": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool",
                    "Iterable[Any]"
                ]
            }
        },
        "SitemapCrawler.parse": {
            "name": "parse",
            "location": 232,
            "return": [
                "str",
                "int",
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Set[str]"
                ],
                "links": [
                    "str",
                    "Set[str]"
                ],
                "html": [
                    "str",
                    "Set[str]",
                    "List[str]",
                    "bool",
                    "Iterable[Any]"
                ]
            }
        }
    },
    "aiocrawler-master/setup.py": {},
    "aiocrawler-master/test_aiocrawler.py": {
        "crawler": {
            "name": "crawler",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "html": {
            "name": "html",
            "location": 20,
            "return": [
                "str",
                "float"
            ],
            "arguments": {}
        },
        "create_mock_coroutine": {
            "name": "create_mock_coroutine",
            "location": 34,
            "return": [
                "str",
                "IO",
                "Dict[str, Any]",
                "dict",
                "Iterable"
            ],
            "arguments": {
                "mocker": [
                    "int",
                    "str"
                ],
                "monkeypatch": [
                    "int",
                    "str"
                ]
            }
        },
        "mock_make_request": {
            "name": "mock_make_request",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": [
                    "str",
                    "Optional[int]",
                    "int",
                    "Dict[str, str]"
                ],
                "html": [
                    "bool",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "mock_make_request_generic": {
            "name": "mock_make_request_generic",
            "location": 58,
            "return": [
                "str",
                "bytes",
                "Dict[str, Sequence[Any]]",
                "Tuple[int, int]",
                "List[str]"
            ],
            "arguments": {
                "create_mock_coroutine": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "mock_queue": {
            "name": "mock_queue",
            "location": 66,
            "return": [
                "str",
                "bool",
                "List[int]",
                "int"
            ],
            "arguments": {
                "mocker": [
                    "float",
                    "Callable[[bytes], None]",
                    "bool",
                    "str"
                ],
                "monkeypatch": [
                    "List[Dict]",
                    "int",
                    "str",
                    "Dict[str, int]",
                    "Set[str]"
                ]
            }
        },
        "mock_put_nowait": {
            "name": "mock_put_nowait",
            "location": 73,
            "return": [
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "mock_queue": [
                    "str",
                    "bytes",
                    "List[str]"
                ],
                "create_mock_coroutine": [
                    "str"
                ]
            }
        },
        "mock_join": {
            "name": "mock_join",
            "location": 80,
            "return": [
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "mock_queue": [
                    "List[str]",
                    "str",
                    "Sequence[Any]"
                ],
                "create_mock_coroutine": [
                    "str"
                ]
            }
        },
        "test_task_queue_message": {
            "name": "test_task_queue_message",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_initial_default_depth": {
            "name": "test_initial_default_depth",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "crawler": [
                    "asyncio.StreamWriter"
                ]
            }
        },
        "test_initial_default_concurrency": {
            "name": "test_initial_default_concurrency",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "crawler": [
                    "asyncio.StreamWriter"
                ]
            }
        },
        "test_initial_default_max_retries": {
            "name": "test_initial_default_max_retries",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "crawler": [
                    "int",
                    "str"
                ]
            }
        },
        "test_initial_default_user_agent": {
            "name": "test_initial_default_user_agent",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "crawler": []
            }
        },
        "test_initial_crawled_urls": {
            "name": "test_initial_crawled_urls",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "crawler": [
                    "Iterable[Any]",
                    "Callable",
                    "Sequence[Any]",
                    "str"
                ]
            }
        },
        "test_initial_results": {
            "name": "test_initial_results",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "crawler": []
            }
        },
        "test_base_url": {
            "name": "test_base_url",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "crawler": [
                    "str",
                    "Dict[str, Sequence[Any]]"
                ]
            }
        },
        "test_setting_initial_url": {
            "name": "test_setting_initial_url",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "crawler": [
                    "dict",
                    "str"
                ]
            }
        },
        "test_setting_depth": {
            "name": "test_setting_depth",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_setting_concurrency": {
            "name": "test_setting_concurrency",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_setting_max_retries": {
            "name": "test_setting_max_retries",
            "location": 145,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_setting_user_agent": {
            "name": "test_setting_user_agent",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_find_links": {
            "name": "test_find_links",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "html": [],
                "crawler": []
            }
        },
        "test_parse_raises_not_implemented": {
            "name": "test_parse_raises_not_implemented",
            "location": 187,
            "return": [
                ""
            ],
            "arguments": {
                "crawler": [
                    "str",
                    "bytes"
                ],
                "html": [
                    "str",
                    "bytes"
                ]
            }
        },
        "test_sitemap_crawler_parse": {
            "name": "test_sitemap_crawler_parse",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "html": [
                    "str"
                ]
            }
        },
        "create_mock_coroutine._create_mock_patch_coro": {
            "name": "_create_mock_patch_coro",
            "location": 35,
            "return": [],
            "arguments": {
                "to_patch": [
                    "str",
                    "float",
                    "Optional[str]",
                    "Dict[str, str]"
                ]
            }
        }
    }
}
{
    "aioexec-master/make.py": {
        "build": {
            "name": "build",
            "location": 31,
            "return": [
                "bytes",
                "bool",
                "Tuple[str, str]",
                "str"
            ],
            "arguments": {
                "cfg": [
                    "bool",
                    "list",
                    "Iterable[str]"
                ]
            }
        },
        "push": {
            "name": "push",
            "location": 35,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "cfg": [
                    "int",
                    "Dict[str, List[Any]]",
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "cfg": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "bump": {
            "name": "bump",
            "location": 44,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "cfg": [
                    "List[Tuple[Any, Any]]",
                    "List[tuple]",
                    "dict",
                    "float"
                ]
            }
        },
        "run": {
            "name": "run",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "aioexec-master/setup.py": {
        "load_yaml": {
            "name": "load_yaml",
            "location": 6,
            "return": [
                "Union[str, IO]",
                "Dict[str, Any]",
                "Callable[[str], T]",
                "Callable",
                "dict",
                "IO[str]"
            ],
            "arguments": {
                "file": [
                    "str",
                    "IO[str]"
                ],
                "keep_order": [
                    "bool",
                    "IO[str]",
                    "IO[Any]",
                    "List[str]",
                    "List[Callable]"
                ]
            }
        }
    },
    "aioexec-master/aioexec/__init__.py": {
        "_call_async": {
            "name": "_call_async",
            "location": 21,
            "return": [
                "bool",
                "dict",
                "Union",
                "str",
                "starlette.types.Receive",
                "starlette.types.Send"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "tuple",
                    "List[str]",
                    "List[Dict[str, str]]"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "_call": {
            "name": "_call",
            "location": 31,
            "return": [
                "bool"
            ],
            "arguments": {
                "fn": [
                    "str",
                    "Callable"
                ],
                "args": [],
                "kwargs": [],
                "loop": [
                    "Dict[str, Any]",
                    "str",
                    "Callable"
                ],
                "pool": [
                    "Dict[str, Any]",
                    "str",
                    "Callable"
                ]
            }
        },
        "_batch_get_calls": {
            "name": "_batch_get_calls",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "raw_calls": [
                    "Callable",
                    "bool",
                    "str"
                ]
            }
        },
        "Call.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "ConcurrentBase.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "Executor": [
                    "int",
                    "str",
                    "bool"
                ],
                "n": [
                    "int",
                    "str",
                    "bool"
                ],
                "loop": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "ConcurrentBase.__enter__": {
            "name": "__enter__",
            "location": 65,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConcurrentBase.__exit__": {
            "name": "__exit__",
            "location": 69,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[types.TracebackType]",
                    "Optional[Type[BaseException]]",
                    "str",
                    "types.TracebackType",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "ConcurrentBase.call": {
            "name": "call",
            "location": 73,
            "return": [
                "bool",
                "mypy.types.Type"
            ],
            "arguments": {
                "self": [],
                "fn": [
                    "Callable",
                    "Union",
                    "tuple",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "ConcurrentBase.batch": {
            "name": "batch",
            "location": 84,
            "return": [
                "typing.Iterator[typing.Awaitable[typing.Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Threads.__init__": {
            "name": "__init__",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "loop": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "Procs.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "bool",
                    "Final"
                ],
                "loop": [
                    "int",
                    "bool",
                    "Final"
                ]
            }
        }
    },
    "aioexec-master/tests/__init__.py": {},
    "aioexec-master/tests/__main__.py": {
        "get_values_sync": {
            "name": "get_values_sync",
            "location": 18,
            "return": [
                "str",
                "Tuple[int, int]",
                "int"
            ],
            "arguments": {}
        },
        "run": {
            "name": "run",
            "location": 179,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    }
}
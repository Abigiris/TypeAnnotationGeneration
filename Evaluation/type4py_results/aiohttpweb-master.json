{
    "aiohttpweb-master/aiohttp-demos/demos/__init__.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/blog/db_helpers.py": {
        "setup_db": {
            "name": "setup_db",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "executor_config": [
                    "str",
                    "Dict[str, Any]",
                    "Union[bool, str]"
                ],
                "target_config": [
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "teardown_db": {
            "name": "teardown_db",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "executor_config": [
                    "str",
                    "Dict[str, Any]"
                ],
                "target_config": [
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_engine": {
            "name": "get_engine",
            "location": 43,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "db_config": [
                    "dict",
                    "Dict[str, Any]",
                    "Mapping[str, str]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "create_tables": {
            "name": "create_tables",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "target_config": [
                    "str",
                    "dict"
                ]
            }
        },
        "drop_tables": {
            "name": "drop_tables",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "target_config": [
                    "dict",
                    "str"
                ]
            }
        },
        "create_sample_data": {
            "name": "create_sample_data",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "target_config": [
                    "str"
                ]
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/blog/setup.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/blog/aiohttpdemo_blog/db.py": {
        "construct_db_url": {
            "name": "construct_db_url",
            "location": 43,
            "return": [
                "str"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/blog/aiohttpdemo_blog/db_auth.py": {
        "DBAuthorizationPolicy.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "db_pool": [
                    "Set[str]"
                ]
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/blog/aiohttpdemo_blog/forms.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/blog/aiohttpdemo_blog/main.py": {
        "main": {
            "name": "main",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "configpath": [
                    "bool",
                    "Dict[str, str]",
                    "str"
                ]
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/blog/aiohttpdemo_blog/routes.py": {
        "setup_routes": {
            "name": "setup_routes",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/blog/aiohttpdemo_blog/security.py": {
        "generate_password_hash": {
            "name": "generate_password_hash",
            "location": 4,
            "return": [
                "int",
                "Union[int, List]",
                "List[List[int]]",
                "str"
            ],
            "arguments": {
                "password": [
                    "str",
                    "bytes"
                ]
            }
        },
        "check_password_hash": {
            "name": "check_password_hash",
            "location": 10,
            "return": [
                "bool",
                "Tuple[bool, str]"
            ],
            "arguments": {
                "plain_password": [
                    "str"
                ],
                "password_hash": [
                    "str"
                ]
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/blog/aiohttpdemo_blog/settings.py": {
        "load_config": {
            "name": "load_config",
            "location": 8,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "path": [
                    "pathlib.Path",
                    "str",
                    "Union[str, bytes, int]"
                ]
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/blog/aiohttpdemo_blog/views.py": {
        "redirect": {
            "name": "redirect",
            "location": 9,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "router": [
                    "str",
                    "Tuple[int, int]",
                    "int"
                ],
                "route_name": [
                    "str",
                    "Tuple[int, int]",
                    "int"
                ]
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/blog/aiohttpdemo_blog/__init__.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/blog/tests/conftest.py": {
        "database": {
            "name": "database",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "tables_and_data": {
            "name": "tables_and_data",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "database": [
                    "str",
                    "Mapping[str, Any]",
                    "List[dict]",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/blog/tests/test_stuff.py": {
        "test_security": {
            "name": "test_security",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/blog/tests/__init__.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/chat/setup.py": {
        "read_version": {
            "name": "read_version",
            "location": 7,
            "return": [
                "str",
                "Iterable[Tuple[str, str]]",
                "Dict[str, Any]",
                "Dict[int, str]"
            ],
            "arguments": {}
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/chat/aiohttpdemo_chat/main.py": {
        "main": {
            "name": "main",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/chat/aiohttpdemo_chat/views.py": {
        "get_random_name": {
            "name": "get_random_name",
            "location": 11,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/chat/aiohttpdemo_chat/__init__.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/chat/tests/conftest.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/chat/tests/test_chat.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/chat/tests/__init__.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/graphql/prepare_database.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/graphql/setup.py": {
        "read_version": {
            "name": "read_version",
            "location": 10,
            "return": [
                "str",
                "Iterable[Tuple[str, str]]",
                "Dict[str, Any]",
                "Dict[int, str]"
            ],
            "arguments": {}
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/graphql/__init__.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/app.py": {
        "init_jinja2": {
            "name": "init_jinja2",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "aiohttp.web.Application"
                ]
            }
        },
        "init_app": {
            "name": "init_app",
            "location": 87,
            "return": [
                "aiohttp.web.Application",
                "\"App\""
            ],
            "arguments": {}
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/conftest.py": {
        "get_db_url": {
            "name": "get_db_url",
            "location": 28,
            "return": [
                "str",
                "Tuple[str, str]",
                "int"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "setup_test_db": {
            "name": "setup_test_db",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "engine": [
                    "bool",
                    "list",
                    "raiden.utils.PaymentAmount",
                    "raiden.utils.FeeAmount",
                    "str",
                    "Optional[bool]",
                    "int",
                    "Optional[List[Any]]"
                ]
            }
        },
        "teardown_test_db": {
            "name": "teardown_test_db",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "engine": [
                    "int",
                    "float",
                    "tuple",
                    "Tuple[str, str, str]"
                ]
            }
        },
        "init_sample_data": {
            "name": "init_sample_data",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "engine": [
                    "bool",
                    "str",
                    "List[str]",
                    "Generator"
                ]
            }
        },
        "db": {
            "name": "db",
            "location": 172,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "tables": {
            "name": "tables",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "db": [
                    "bool"
                ]
            }
        },
        "client": {
            "name": "client",
            "location": 193,
            "return": [
                "dict"
            ],
            "arguments": {
                "tables": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/constants.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/db.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/routes.py": {
        "init_routes": {
            "name": "init_routes",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "app": []
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/types.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/utils.py": {
        "get_config": {
            "name": "get_config",
            "location": 35,
            "return": [
                "str",
                "Optional[str]",
                "ChainMap",
                "Union[pathlib.Path, str]",
                "Union[Literal, str]"
            ],
            "arguments": {
                "argv": [
                    "pathlib.Path",
                    "dict",
                    "str",
                    "Dict[str, str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "init_config": {
            "name": "init_config",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "aiohttp.web.Application",
                    "pathlib.Path"
                ]
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/__init__.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/__main__.py": {
        "main": {
            "name": "main",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/api/contrib.py": {
        "simple_renderer": {
            "name": "simple_renderer",
            "location": 146,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "template": [
                    "str",
                    "Type['Declared']",
                    "Optional[int]",
                    "Callable[[str], str]"
                ]
            }
        },
        "CustomGraphQLView.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomAiohttpSubscriptionServer.get_graphql_params": {
            "name": "get_graphql_params",
            "location": 182,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "connection_context": [
                    "dict",
                    "bool",
                    "Dict[str, List[str]]",
                    "int"
                ]
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/api/dataloaders.py": {
        "BaseAIODataLoader.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "engine": [
                    "int",
                    "bool",
                    "apistar.types.RouteConfig",
                    "float"
                ]
            }
        },
        "BaseAIODataLoader.sorted_by_keys": {
            "name": "sorted_by_keys",
            "location": 23,
            "return": [
                "List[str]",
                "dict",
                "bool",
                "List[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "items": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Callable]"
                ],
                "keys": [
                    "str",
                    "dict",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/api/views.py": {
        "GQL": {
            "name": "GQL",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "graphiql": []
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/api/__init__.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/api/models/room.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/api/models/user.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/api/models/__init__.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/api/mutations/messages.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/api/mutations/__init__.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/api/queries/rooms.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/api/queries/user.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/api/queries/__init__.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/api/subscriptions/messages.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/api/subscriptions/__init__.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/api/tests/test_messages.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/api/tests/test_messages_mutations.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/api/tests/test_rooms.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/api/tests/test_viewer.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/auth/db_utils.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/auth/enums.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/auth/tables.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/auth/__init__.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/auth/tests/test_auth_db_utils.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/auth/tests/__init__.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/chat/db_utils.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/chat/tables.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/chat/__init__.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/chat/tests/test_chat_db_utils.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/chat/tests/__init__.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/main/views.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/graphql/graph/main/__init__.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/imagetagger/setup.py": {
        "read_version": {
            "name": "read_version",
            "location": 10,
            "return": [
                "str",
                "Iterable[Tuple[str, str]]",
                "Dict[str, Any]",
                "Dict[int, str]"
            ],
            "arguments": {}
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/imagetagger/imagetagger/app.py": {
        "init_jinja2": {
            "name": "init_jinja2",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "aiohttp.web.Application"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "args": []
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/imagetagger/imagetagger/constants.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/imagetagger/imagetagger/routes.py": {
        "init_routes": {
            "name": "init_routes",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "aiohttp.web.Application"
                ],
                "handler": [
                    "dict"
                ]
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/imagetagger/imagetagger/types.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/imagetagger/imagetagger/utils.py": {
        "config_from_dict": {
            "name": "config_from_dict",
            "location": 51,
            "return": [
                "str",
                "Optional[dict]",
                "Dict[str, str]",
                "bool",
                "dict"
            ],
            "arguments": {
                "d": [
                    "str",
                    "int",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "get_config": {
            "name": "get_config",
            "location": 62,
            "return": [
                "str",
                "bool",
                "pathlib.Path"
            ],
            "arguments": {
                "argv": [
                    "pathlib.Path",
                    "dict",
                    "str",
                    "Dict[str, str]",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "init_config": {
            "name": "init_config",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "aiohttp.web.Application",
                    "type",
                    "dict"
                ],
                "config": [
                    "aiohttp.web.Application",
                    "type",
                    "dict"
                ]
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/imagetagger/imagetagger/views.py": {
        "SiteHandler.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "int",
                    "bool",
                    "float"
                ],
                "executor": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/imagetagger/imagetagger/worker.py": {
        "warm": {
            "name": "warm",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "model_path": [
                    "str"
                ]
            }
        },
        "clean": {
            "name": "clean",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "prepare_image": {
            "name": "prepare_image",
            "location": 31,
            "return": [
                "int",
                "tuple"
            ],
            "arguments": {
                "image": [
                    "PIL.Image",
                    "numpy.ndarray",
                    "io.BytesIO",
                    "PIL.Image.Image"
                ],
                "target": [
                    "Tuple[int, int]",
                    "numpy.ndarray",
                    "PIL.Image.Image"
                ]
            }
        },
        "predict": {
            "name": "predict",
            "location": 42,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "raw_data": [
                    "bytes",
                    "io.StringIO",
                    "str",
                    "bool"
                ],
                "model": [
                    "List[Dict]",
                    "Type",
                    "Sequence[str]"
                ]
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/imagetagger/imagetagger/__init__.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/imagetagger/imagetagger/__main__.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/imagetagger/tests/conftest.py": {
        "loop": {
            "name": "loop",
            "location": 8,
            "return": [
                "str",
                "solo.config.app.Config",
                "app.models.dto.ClientInfo",
                "List[str]"
            ],
            "arguments": {
                "event_loop": [
                    "str"
                ]
            }
        },
        "conf": {
            "name": "conf",
            "location": 13,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "api": {
            "name": "api",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "loop": [
                    "Dict[str, str]"
                ],
                "aiohttp_client": [
                    "str",
                    "dict",
                    "Callable"
                ],
                "conf": [
                    "dict"
                ]
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/imagetagger/tests/test_views.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/moderator/setup.py": {
        "read_version": {
            "name": "read_version",
            "location": 7,
            "return": [
                "str",
                "Iterable[Tuple[str, str]]",
                "Dict[str, Any]",
                "Dict[int, str]"
            ],
            "arguments": {}
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/moderator/moderator/build_model.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/moderator/moderator/consts.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/moderator/moderator/exceptions.py": {
        "AdminRESTError.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "Mapping",
                    "int",
                    "ClassVar"
                ],
                "status_code": [
                    "int",
                    "Optional[int]",
                    "float"
                ]
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/moderator/moderator/handlers.py": {
        "SiteHandler.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "conf": [
                    "Optional[str]",
                    "str"
                ],
                "executor": [
                    "Optional[str]",
                    "str"
                ],
                "project_root": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/moderator/moderator/main.py": {
        "main": {
            "name": "main",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/moderator/moderator/routes.py": {
        "setup_routes": {
            "name": "setup_routes",
            "location": 1,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "str",
                    "Callable"
                ],
                "handler": [
                    "Tuple[str, str]",
                    "bool",
                    "int"
                ],
                "project_root": [
                    "str",
                    "Tuple[str]"
                ]
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/moderator/moderator/utils.py": {
        "load_config": {
            "name": "load_config",
            "location": 13,
            "return": [
                "Mapping[str, Any]",
                "str",
                "dict",
                "Callable"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "validate_payload": {
            "name": "validate_payload",
            "location": 36,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "raw_payload": [
                    "str",
                    "float",
                    "dict"
                ],
                "schema": [
                    "str"
                ]
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/moderator/moderator/worker.py": {
        "warm": {
            "name": "warm",
            "location": 7,
            "return": [
                "bool"
            ],
            "arguments": {
                "model_path": [
                    "str"
                ]
            }
        },
        "predict_probability": {
            "name": "predict_probability",
            "location": 16,
            "return": [
                "Optional[int]",
                "str",
                "int"
            ],
            "arguments": {
                "comments": [
                    "str",
                    "List[Dict[str, Any]]",
                    "List[List[Any]]"
                ]
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/moderator/moderator/__init__.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/moderator/moderator/__main__.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/moderator/moderator/model/pipeline.py": {
        "read_data": {
            "name": "read_data",
            "location": 12,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "dataset_path": [
                    "str"
                ]
            }
        },
        "build_pipeline": {
            "name": "build_pipeline",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "build_model": {
            "name": "build_model",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "dataset_path": [
                    "str",
                    "int"
                ],
                "model_path": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/moderator/moderator/model/__init__.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/moderator/tests/conftest.py": {
        "loop": {
            "name": "loop",
            "location": 8,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "event_loop": [
                    "str"
                ]
            }
        },
        "conf": {
            "name": "conf",
            "location": 13,
            "return": [
                "Mapping[str, str]",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.ServiceName",
                "bool"
            ],
            "arguments": {}
        },
        "api": {
            "name": "api",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "loop": [
                    "dict",
                    "bool"
                ],
                "aiohttp_client": [
                    "str",
                    "dict",
                    "Callable"
                ],
                "conf": [
                    "bool",
                    "List[str]",
                    "raiden.utils.List[raiden.raiden_service.RaidenService]"
                ]
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/moderator/tests/test_basic.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/moderator/tests/test_pipeline.py": {
        "test_build_pipeline": {
            "name": "test_build_pipeline",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_train_model": {
            "name": "test_train_model",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/motortwit/setup.py": {
        "read_version": {
            "name": "read_version",
            "location": 7,
            "return": [
                "str",
                "Iterable[Tuple[str, str]]",
                "Dict[str, Any]",
                "Dict[int, str]"
            ],
            "arguments": {}
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/motortwit/motortwit/db.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/motortwit/motortwit/generate_data.py": {
        "main": {
            "name": "main",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/motortwit/motortwit/main.py": {
        "setup_jinja": {
            "name": "setup_jinja",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "Exception",
                    "Dict[str, Any]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/motortwit/motortwit/routes.py": {
        "setup_routes": {
            "name": "setup_routes",
            "location": 1,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "str",
                    "Callable"
                ],
                "handler": [
                    "Tuple[str, str]",
                    "bool",
                    "int"
                ],
                "project_root": [
                    "str",
                    "Tuple[str]"
                ]
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/motortwit/motortwit/security.py": {
        "generate_password_hash": {
            "name": "generate_password_hash",
            "location": 11,
            "return": [
                "float",
                "bool",
                "str",
                "Callable[[None], bool]"
            ],
            "arguments": {
                "password": [
                    "str",
                    "bytes"
                ],
                "salt_rounds": [
                    "str",
                    "bytes"
                ]
            }
        },
        "check_password_hash": {
            "name": "check_password_hash",
            "location": 18,
            "return": [
                "bool",
                "Tuple[bool, str]"
            ],
            "arguments": {
                "encoded": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "auth_required": {
            "name": "auth_required",
            "location": 43,
            "return": [
                "str",
                "int",
                "bool",
                "Dict[str, bool]",
                "Dict[str, str]"
            ],
            "arguments": {
                "f": [
                    "str",
                    "Iterable[Tuple[int, int]]",
                    "Dict[str, str]"
                ]
            }
        },
        "AuthorizationPolicy.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mongo": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/motortwit/motortwit/utils.py": {
        "load_config": {
            "name": "load_config",
            "location": 13,
            "return": [
                "Mapping[str, Any]",
                "str",
                "dict",
                "Callable"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "robo_avatar_url": {
            "name": "robo_avatar_url",
            "location": 32,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "user_data": [
                    "str",
                    "Dict[str, Union[str, bool]]",
                    "Mapping[str, Any]",
                    "bytes"
                ],
                "size": [
                    "str",
                    "Callable[[], Any]",
                    "int",
                    "Optional[Tuple[int, int]]"
                ]
            }
        },
        "format_datetime": {
            "name": "format_datetime",
            "location": 40,
            "return": [
                "list",
                "int",
                "List[str]",
                "str",
                "bytes"
            ],
            "arguments": {
                "timestamp": [
                    "str"
                ]
            }
        },
        "redirect": {
            "name": "redirect",
            "location": 46,
            "return": [
                "Optional[float]",
                "rotkehlchen.db.dbhandler.DBHandler",
                "List[str]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "request": [
                    "str"
                ],
                "name": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/motortwit/motortwit/views.py": {
        "SiteHandler.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mongo": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SiteHandler.mongo": {
            "name": "mongo",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/motortwit/motortwit/__init__.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/motortwit/motortwit/__main__.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/polls/init_db.py": {
        "setup_db": {
            "name": "setup_db",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "teardown_db": {
            "name": "teardown_db",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "dict"
                ]
            }
        },
        "create_tables": {
            "name": "create_tables",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "engine": [
                    "bool",
                    "str",
                    "int",
                    "set"
                ]
            }
        },
        "drop_tables": {
            "name": "drop_tables",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "engine": [
                    "int",
                    "list",
                    "str",
                    "bool"
                ]
            }
        },
        "sample_data": {
            "name": "sample_data",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "engine": [
                    "str",
                    "int",
                    "Generator",
                    "bool"
                ]
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/polls/setup.py": {
        "read_version": {
            "name": "read_version",
            "location": 7,
            "return": [
                "str",
                "Iterable[Tuple[str, str]]",
                "Dict[str, Any]",
                "Dict[int, str]"
            ],
            "arguments": {}
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/polls/aiohttpdemo_polls/db.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/polls/aiohttpdemo_polls/main.py": {
        "main": {
            "name": "main",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "argv": [
                    "str",
                    "Iterable[str]",
                    "aiohttp.web.Application"
                ]
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/polls/aiohttpdemo_polls/middlewares.py": {
        "create_error_middleware": {
            "name": "create_error_middleware",
            "location": 14,
            "return": [
                "str",
                "List[str]",
                "Optional[Set[str]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "overrides": [
                    "BaseException",
                    "str"
                ]
            }
        },
        "setup_middlewares": {
            "name": "setup_middlewares",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "aiohttp.web.Application",
                    "dict",
                    "Callable"
                ]
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/polls/aiohttpdemo_polls/routes.py": {
        "setup_routes": {
            "name": "setup_routes",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "app": []
            }
        },
        "setup_static_routes": {
            "name": "setup_static_routes",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "dict"
                ]
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/polls/aiohttpdemo_polls/settings.py": {
        "get_config": {
            "name": "get_config",
            "location": 14,
            "return": [
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "argv": [
                    "List[str]",
                    "str"
                ]
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/polls/aiohttpdemo_polls/utils.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/polls/aiohttpdemo_polls/views.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/polls/aiohttpdemo_polls/__init__.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/polls/aiohttpdemo_polls/__main__.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/polls/tests/conftest.py": {
        "db": {
            "name": "db",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "tables_and_data": {
            "name": "tables_and_data",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/polls/tests/test_integration.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/polls/tests/__init__.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/shortify/setup.py": {
        "read_version": {
            "name": "read_version",
            "location": 7,
            "return": [
                "str",
                "Iterable[Tuple[str, str]]",
                "Dict[str, Any]",
                "Dict[int, str]"
            ],
            "arguments": {}
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/shortify/shortify/main.py": {
        "setup_jinja": {
            "name": "setup_jinja",
            "location": 30,
            "return": [
                "asyncio.Transport",
                "bool",
                "Iterable[int]",
                "int",
                "str"
            ],
            "arguments": {
                "app": [
                    "Callable[[list], None]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/shortify/shortify/routes.py": {
        "setup_routes": {
            "name": "setup_routes",
            "location": 1,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "str",
                    "Callable"
                ],
                "handler": [
                    "Tuple[str, str]",
                    "bool",
                    "int"
                ],
                "project_root": [
                    "str",
                    "Tuple[str]"
                ]
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/shortify/shortify/utils.py": {
        "load_config": {
            "name": "load_config",
            "location": 7,
            "return": [
                "Mapping[str, Any]",
                "str",
                "dict",
                "Callable"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "encode": {
            "name": "encode",
            "location": 27,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "num": [
                    "int",
                    "Optional[int]"
                ],
                "alphabet": [
                    "str",
                    "float",
                    "list",
                    "bool"
                ]
            }
        },
        "fetch_url": {
            "name": "fetch_url",
            "location": 44,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "dict",
                    "Callable",
                    "Mapping[str, Any]",
                    "List[str]",
                    "Mapping"
                ]
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/shortify/shortify/views.py": {
        "SiteHandler.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "redis": [
                    "int",
                    "bool",
                    "float"
                ],
                "conf": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "aiohttpweb-master/aiohttp-demos/demos/shortify/shortify/__init__.py": {},
    "aiohttpweb-master/aiohttp-demos/demos/shortify/shortify/__main__.py": {},
    "aiohttpweb-master/aiohttp-demos/docs/conf.py": {}
}
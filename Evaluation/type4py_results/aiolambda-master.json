{
    "aiolambda-master/setup.py": {
        "read_file": {
            "name": "read_file",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ]
            }
        }
    },
    "aiolambda-master/aiolambda/app.py": {
        "get_app": {
            "name": "get_app",
            "location": 15,
            "return": [],
            "arguments": {
                "init_db": [],
                "init_mq": [
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "aiolambda-master/aiolambda/config.py": {},
    "aiolambda-master/aiolambda/db.py": {},
    "aiolambda-master/aiolambda/errors.py": {},
    "aiolambda-master/aiolambda/logger.py": {
        "critical": {
            "name": "critical",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "T",
                    "Callable"
                ]
            }
        },
        "error": {
            "name": "error",
            "location": 30,
            "return": [
                "str",
                "int",
                "bool",
                "List[int]"
            ],
            "arguments": {
                "x": [
                    "T",
                    "str",
                    "int",
                    "Iterable[Any]",
                    "logging.Logger"
                ]
            }
        },
        "warning": {
            "name": "warning",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "x": [
                    "T",
                    "bool",
                    "str",
                    "float"
                ]
            }
        },
        "info": {
            "name": "info",
            "location": 40,
            "return": [
                "str",
                "int",
                "List[int]",
                "float"
            ],
            "arguments": {
                "x": [
                    "T",
                    "str",
                    "Optional[str]",
                    "bool",
                    "Callable"
                ]
            }
        },
        "debug": {
            "name": "debug",
            "location": 45,
            "return": [
                "List[int]",
                "int",
                "Iterable[int]",
                "bool",
                "str"
            ],
            "arguments": {
                "x": [
                    "T",
                    "str",
                    "int",
                    "logging.Logger",
                    "Tuple[str, str]"
                ]
            }
        }
    },
    "aiolambda-master/aiolambda/mq.py": {},
    "aiolambda-master/aiolambda/security.py": {
        "decode_token": {
            "name": "decode_token",
            "location": 9,
            "return": [
                "bytes",
                "str",
                "OrderedDict",
                "dict",
                "int",
                "Mapping[str, int]"
            ],
            "arguments": {
                "token": [
                    "str"
                ],
                "required_scopes": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "validate_scope": {
            "name": "validate_scope",
            "location": 17,
            "return": [
                "bool"
            ],
            "arguments": {
                "required_scopes": [
                    "Sequence[str]",
                    "bool"
                ],
                "token_scopes": [
                    "Sequence[str]",
                    "bool"
                ]
            }
        }
    },
    "aiolambda-master/aiolambda/typing.py": {},
    "aiolambda-master/aiolambda/__init__.py": {},
    "aiolambda-master/aiolambda_cli/check.py": {},
    "aiolambda-master/aiolambda_cli/file.py": {
        "ensure_blank_line": {
            "name": "ensure_blank_line",
            "location": 4,
            "return": [
                "str"
            ],
            "arguments": {
                "file_content": [
                    "str",
                    "List[str]",
                    "pathlib.Path",
                    "BinaryIO"
                ]
            }
        },
        "save_to_file": {
            "name": "save_to_file",
            "location": 10,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "content": [
                    "str",
                    "pathlib.Path",
                    "BinaryIO"
                ],
                "path": [
                    "pathlib.Path",
                    "IO[bytes]",
                    "Union[pathlib.Path, str]"
                ]
            }
        }
    },
    "aiolambda-master/aiolambda_cli/path.py": {
        "dest_from_template": {
            "name": "dest_from_template",
            "location": 10,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "template_base": [
                    "pathlib.Path",
                    "str"
                ],
                "dest_dir": [
                    "pathlib.Path",
                    "str"
                ],
                "template_path": [
                    "pathlib.Path",
                    "str"
                ]
            }
        },
        "dest_from_template.remove": {
            "name": "remove",
            "location": 12,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "remove": [
                    "str",
                    "ImportError"
                ],
                "base": [
                    "str",
                    "ImportError"
                ]
            }
        },
        "dest_from_template.replace": {
            "name": "replace",
            "location": 16,
            "return": [
                "str",
                "bytearray"
            ],
            "arguments": {
                "replace_src": [
                    "str"
                ],
                "replace_dest": [
                    "str"
                ],
                "base": [
                    "str"
                ]
            }
        },
        "dest_from_template.add_path": {
            "name": "add_path",
            "location": 20,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "base": [
                    "pathlib.Path",
                    "str",
                    "List[Tuple[int, int]]",
                    "Type['GenericList']",
                    "int"
                ],
                "tail": [
                    "pathlib.Path",
                    "str",
                    "List[Tuple[int, int]]",
                    "Type['GenericList']",
                    "int"
                ]
            }
        }
    },
    "aiolambda-master/aiolambda_cli/templates.py": {
        "render_from_file": {
            "name": "render_from_file",
            "location": 12,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ],
                "vars_dict": [
                    "dict",
                    "Dict[str, List[str]]",
                    "str"
                ]
            }
        },
        "render_all": {
            "name": "render_all",
            "location": 23,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "vars_dict": [
                    "dict",
                    "bool",
                    "int",
                    "str",
                    "Type"
                ]
            }
        },
        "render_all.filter_templates": {
            "name": "filter_templates",
            "location": 37,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "template_path": [
                    "pathlib.Path"
                ]
            }
        },
        "render_all.generate_template": {
            "name": "generate_template",
            "location": 47,
            "return": [
                "bytes",
                "str"
            ],
            "arguments": {
                "template_path": [
                    "pathlib.Path",
                    "str",
                    "path.Path"
                ]
            }
        }
    },
    "aiolambda-master/aiolambda_cli/__init__.py": {},
    "aiolambda-master/docs/conf.py": {},
    "aiolambda-master/examples/jwt/jwt/config.py": {},
    "aiolambda-master/examples/jwt/jwt/errors.py": {},
    "aiolambda-master/examples/jwt/jwt/handlers.py": {},
    "aiolambda-master/examples/jwt/jwt/jwt.py": {
        "generate_token": {
            "name": "generate_token",
            "location": 10,
            "return": [
                "str",
                "int",
                "Optional[str]",
                "float"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        }
    },
    "aiolambda-master/examples/jwt/jwt/main.py": {
        "main": {
            "name": "main",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "aiolambda-master/examples/jwt/jwt/response.py": {
        "return_error": {
            "name": "return_error",
            "location": 8,
            "return": [
                "Iterable['Notification']",
                "Dict[str, Any]"
            ],
            "arguments": {
                "error": [
                    "str",
                    "List[Dict[str, Any]]",
                    "mypy.errors.Errors",
                    "errors.Error",
                    "Optional[str]",
                    "Exception"
                ]
            }
        },
        "return_200": {
            "name": "return_200",
            "location": 14,
            "return": [
                "str",
                "dict",
                "OrderedDict",
                "Dict[str, Dict[str, Any]]",
                "List[dict]"
            ],
            "arguments": {
                "maybe_json": [
                    "str",
                    "Optional[int]",
                    "List[str]"
                ]
            }
        },
        "return_201": {
            "name": "return_201",
            "location": 20,
            "return": [
                "str",
                "dict",
                "OrderedDict",
                "Dict[str, Dict[str, Any]]",
                "List[dict]"
            ],
            "arguments": {
                "maybe_json": [
                    "str",
                    "Optional[int]",
                    "List[str]"
                ]
            }
        },
        "return_204": {
            "name": "return_204",
            "location": 26,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "List['PydanticModelField']",
                "str",
                "dict"
            ],
            "arguments": {
                "maybe_json": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "aiolambda-master/examples/jwt/jwt/utils.py": {
        "current_timestamp": {
            "name": "current_timestamp",
            "location": 4,
            "return": [
                "float",
                "int",
                "bool",
                "Callable"
            ],
            "arguments": {}
        },
        "get_secret": {
            "name": "get_secret",
            "location": 8,
            "return": [
                "str",
                "Callable",
                "bool"
            ],
            "arguments": {
                "request": [
                    "str",
                    "Set[str]"
                ]
            }
        }
    },
    "aiolambda-master/examples/jwt/jwt/__init__.py": {},
    "aiolambda-master/examples/jwt/jwt/__main__.py": {},
    "aiolambda-master/examples/jwt/test/test_handlers.py": {
        "cli": {
            "name": "cli",
            "location": 7,
            "return": [
                "bool",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "loop": [
                    "int"
                ],
                "aiohttp_client": [
                    "int"
                ]
            }
        }
    },
    "aiolambda-master/examples/jwt/test/__init__.py": {},
    "aiolambda-master/test/test_errors.py": {
        "test_all_errors_are_exceptions": {
            "name": "test_all_errors_are_exceptions",
            "location": 9,
            "return": [],
            "arguments": {}
        }
    },
    "aiolambda-master/test/test_templates.py": {
        "input_vars_list": {
            "name": "input_vars_list",
            "location": 10,
            "return": [
                "Dict[str, str]",
                "Dict[str, Union[str, Any]]",
                "Union[type, Tuple[type, ...]]",
                "Dict[str, List[Callable]]",
                "Optional[Match]"
            ],
            "arguments": {}
        },
        "test_render": {
            "name": "test_render",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "input_vars": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "aiolambda-master/test/__init__.py": {}
}
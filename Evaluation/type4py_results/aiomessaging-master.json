{
    "aiomessaging-master/run.py": {},
    "aiomessaging-master/setup.py": {},
    "aiomessaging-master/aiomessaging/actions.py": {
        "Action.get_output": {
            "name": "get_output",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Action.execute": {
            "name": "execute",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "retry": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "SendOutputAction.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "output": [
                    "bool",
                    "int",
                    "set",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "SendOutputAction.get_output": {
            "name": "get_output",
            "location": 44,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendOutputAction.execute": {
            "name": "execute",
            "location": 47,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "bool",
                    "str"
                ],
                "retry": [
                    "bool",
                    "str"
                ]
            }
        },
        "CheckOutputAction.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "output": [
                    "bool",
                    "int",
                    "set",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "CheckOutputAction.get_output": {
            "name": "get_output",
            "location": 61,
            "return": [
                "str",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckOutputAction.execute": {
            "name": "execute",
            "location": 64,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "Callable",
                    "str"
                ],
                "retry": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "aiomessaging-master/aiomessaging/app.py": {
        "apply_logging_configuration": {
            "name": "apply_logging_configuration",
            "location": 13,
            "return": [],
            "arguments": {
                "config": []
            }
        },
        "AiomessagingApp.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [],
            "arguments": {
                "self": [],
                "config": [],
                "loop": []
            }
        },
        "AiomessagingApp.start": {
            "name": "start",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "loop": []
            }
        },
        "AiomessagingApp.configure_logging": {
            "name": "configure_logging",
            "location": 95,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AiomessagingApp.set_event_loop": {
            "name": "set_event_loop",
            "location": 101,
            "return": [],
            "arguments": {
                "self": [],
                "loop": []
            }
        },
        "AiomessagingApp.stop": {
            "name": "stop",
            "location": 107,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "aiomessaging-master/aiomessaging/cli.py": {
        "cli": {
            "name": "cli",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "init": {
            "name": "init",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "worker": {
            "name": "worker",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Optional[List[str]]",
                    "type",
                    "asyncio.AbstractEventLoop"
                ]
            }
        },
        "send": {
            "name": "send",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "event_type": [
                    "str",
                    "Callable",
                    "dict"
                ],
                "payload": [
                    "str",
                    "dict",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "aiomessaging-master/aiomessaging/cluster.py": {
        "Cluster.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "queue": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "loop": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "Cluster.on_start_consume": {
            "name": "on_start_consume",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "int",
                    "bool"
                ]
            }
        },
        "Cluster.on_output_observed": {
            "name": "on_output_observed",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "int",
                    "bool",
                    "Generator",
                    "List[int]",
                    "Union[None, bytes]",
                    "libcloud.common.base.BaseDriver",
                    "List[str]"
                ]
            }
        },
        "Cluster.add_action_handler": {
            "name": "add_action_handler",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "action": [
                    "List[str]",
                    "List[Dict[str, str]]",
                    "str",
                    "Callable",
                    "tuple",
                    "Dict[str, Any]"
                ],
                "handler": [
                    "List[str]",
                    "str",
                    "Pattern",
                    "list",
                    "Iterable[str]"
                ]
            }
        },
        "Cluster.on_output_observed.wrapper": {
            "name": "wrapper",
            "location": 57,
            "return": [
                "str",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "event_type": [
                    "str",
                    "Optional[Dict]",
                    "Optional[str]"
                ],
                "output": [
                    "List[str]",
                    "Sequence[str]",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "aiomessaging-master/aiomessaging/config.py": {
        "ConfigLoader.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigLoader.create_class": {
            "name": "create_class",
            "location": 34,
            "return": [
                "str",
                "Callable[..., T]",
                "bool",
                "int"
            ],
            "arguments": {
                "loader": [
                    "dict"
                ],
                "node": [
                    "int"
                ]
            }
        },
        "BaseConfig.from_file": {
            "name": "from_file",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str"
                ]
            }
        },
        "BaseConfig.from_fp": {
            "name": "from_fp",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fp": [
                    "bytes"
                ]
            }
        },
        "BaseConfig.from_string": {
            "name": "from_string",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "dict"
                ]
            }
        },
        "BaseConfig.from_dict": {
            "name": "from_dict",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Config.events": {
            "name": "events",
            "location": 90,
            "return": [
                "Optional[str]",
                "cmk.utils.type_defs.EventRule",
                "List[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.get_logging_dict": {
            "name": "get_logging_dict",
            "location": 94,
            "return": [
                "Dict[str, Any]",
                "Dict[str, float]",
                "int",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Config.get_event_pipeline": {
            "name": "get_event_pipeline",
            "location": 125,
            "return": [
                "List[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "event_type": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "Config.get_generators": {
            "name": "get_generators",
            "location": 134,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "event_type": [
                    "str",
                    "Optional[str]",
                    "Callable"
                ]
            }
        },
        "Config.get_event_config": {
            "name": "get_event_config",
            "location": 143,
            "return": [
                "str",
                "bool",
                "cmk.utils.type_defs.OptionalConfigSerial"
            ],
            "arguments": {
                "self": [],
                "event_type": [
                    "str",
                    "dict"
                ]
            }
        },
        "Config.get_queue_backend": {
            "name": "get_queue_backend",
            "location": 148,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiomessaging-master/aiomessaging/effects.py": {
        "register_effect": {
            "name": "register_effect",
            "location": 23,
            "return": [
                "str",
                "Pattern",
                "int",
                "OrderedDict"
            ],
            "arguments": {
                "effect_cls": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "Type[serious.utils.Dataclass]",
                    "List[str]"
                ]
            }
        },
        "load_effect": {
            "name": "load_effect",
            "location": 36,
            "return": [
                "bool",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "bytes",
                    "List[str]"
                ]
            }
        },
        "get_class_instance": {
            "name": "get_class_instance",
            "location": 43,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls_name": [
                    "str",
                    "Optional[str]"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "Effect.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Effect.next_action": {
            "name": "next_action",
            "location": 93,
            "return": [
                "typing.Optional[actions.Action]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "Effect.apply": {
            "name": "apply",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Effect.serialize_state": {
            "name": "serialize_state",
            "location": 110,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Dict[str, str]",
                    "raiden.utils.List[str]",
                    "int"
                ]
            }
        },
        "Effect.load_state": {
            "name": "load_state",
            "location": 115,
            "return": [
                "dict",
                "str",
                "Callable",
                "Sequence"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Optional[dict]",
                    "dict",
                    "str",
                    "List[Dict[str, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "Effect.pretty": {
            "name": "pretty",
            "location": 120,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str"
                ]
            }
        },
        "Effect.__eq__": {
            "name": "__eq__",
            "location": 125,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "raiden.utils.Any",
                    "Type"
                ]
            }
        },
        "SendEffect.next_action": {
            "name": "next_action",
            "location": 141,
            "return": [
                "Optional[bool]",
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "SendEffect.next_action_pos": {
            "name": "next_action_pos",
            "location": 155,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "Callable"
                ]
            }
        },
        "SendEffect.reset_state": {
            "name": "reset_state",
            "location": 174,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "Dict[\"core.Edge\", \"state.State\"]",
                    "Mapping"
                ],
                "reset_pending": [
                    "int",
                    "List[int]",
                    "Tuple[int]"
                ]
            }
        },
        "SendEffect.apply": {
            "name": "apply",
            "location": 195,
            "return": [
                "Callable",
                "List[str]",
                "dict",
                "int",
                "SendCh[trio.abc.Stream]"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "Optional[str]"
                ]
            }
        },
        "SendEffect.load_state": {
            "name": "load_state",
            "location": 223,
            "return": [
                "dict",
                "tuple",
                "Dict[str, str]",
                "cmk.utils.type_defs.CheckVariables"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Dict[str, Any]",
                    "dict",
                    "OrderedDict"
                ]
            }
        },
        "SendEffect.serialize_state": {
            "name": "serialize_state",
            "location": 228,
            "return": [
                "List[str]",
                "Set[str]",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "List[str]",
                    "int"
                ]
            }
        },
        "SendEffect.serialize_args": {
            "name": "serialize_args",
            "location": 233,
            "return": [
                "int",
                "Union[Dict, List]",
                "bytes",
                "List[List[int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SendEffect.load_args": {
            "name": "load_args",
            "location": 237,
            "return": [
                "bool",
                "Optional[str]",
                "Callable[[Type, str], bool]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]",
                    "Callable[..., None]"
                ],
                "args": []
            }
        },
        "SendEffect.pretty": {
            "name": "pretty",
            "location": 240,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "state": [
                    "str",
                    "Callable",
                    "bytes",
                    "dataworkspaces.utils.lineage_utils.ResourceRef",
                    "IO",
                    "dict"
                ]
            }
        }
    },
    "aiomessaging-master/aiomessaging/event.py": {
        "Event.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event_type": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "payload": [
                    "str",
                    "bool"
                ],
                "event_id": [
                    "str",
                    "bool",
                    "int",
                    "Optional[List[int]]"
                ]
            }
        },
        "Event.to_dict": {
            "name": "to_dict",
            "location": 23,
            "return": [
                "Mapping[str, Any]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Event.from_dict": {
            "name": "from_dict",
            "location": 33,
            "return": [
                "int",
                "Dict[str, Any]",
                "cmk.utils.type_defs.UserId",
                "Dict[str, Union[str, Set]]",
                "str",
                "dict",
                "cmk.utils.type_defs.EventRule"
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "aiomessaging-master/aiomessaging/exceptions.py": {
        "Retry.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "str",
                    "Exception"
                ],
                "delay": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "CheckDelivery.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "delay": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "aiomessaging-master/aiomessaging/logging.py": {
        "ConsumerLoggerAdapter.process": {
            "name": "process",
            "location": 13,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "Type[T]",
                    "int"
                ],
                "kwargs": []
            }
        },
        "QueueLoggerAdapter.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "logger": [
                    "logging.Logger",
                    "Optional[Mapping[str, Any]]",
                    "List[Dict[str, float]]",
                    "Optional[logging.Logger]"
                ],
                "queue": [
                    "dict",
                    "cmk.utils.type_defs.EventRule",
                    "str"
                ],
                "color": [
                    "int",
                    "bool"
                ]
            }
        },
        "QueueLoggerAdapter.process": {
            "name": "process",
            "location": 30,
            "return": [
                "trezor.utils.Writer",
                "str"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bool"
                ],
                "kwargs": []
            }
        },
        "MessageLoggerAdapter.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "color": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MessageLoggerAdapter.process": {
            "name": "process",
            "location": 50,
            "return": [
                "trezor.utils.Writer",
                "str"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bool"
                ],
                "kwargs": []
            }
        },
        "EventLoggerAdapter.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str",
                    "Dict[str, Any]"
                ],
                "color": [
                    "float",
                    "\"Step\"",
                    "bool",
                    "Tuple[List, List]",
                    "Dict[str, Any]"
                ]
            }
        },
        "EventLoggerAdapter.process": {
            "name": "process",
            "location": 70,
            "return": [
                "trezor.utils.Writer",
                "str"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "str",
                    "bool"
                ],
                "kwargs": []
            }
        }
    },
    "aiomessaging-master/aiomessaging/message.py": {
        "Message.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "event_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "event_type": [
                    "int",
                    "str",
                    "Optional[Sequence[str]]",
                    "bool",
                    "Union[None, str, int]"
                ],
                "content": [
                    "Dict[str, Any]",
                    "Optional[str]",
                    "str",
                    "List['Query']",
                    "Dict[str, List[str]]",
                    "list"
                ],
                "meta": [
                    "str",
                    "bool",
                    "list"
                ],
                "route": [
                    "str",
                    "bool",
                    "list"
                ]
            }
        },
        "Message.type": {
            "name": "type",
            "location": 55,
            "return": [
                "str",
                "Callable[..., T]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.get_route_status": {
            "name": "get_route_status",
            "location": 60,
            "return": [
                "cmk.utils.type_defs.UserId",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "effect": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Message.set_route_status": {
            "name": "set_route_status",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "effect": [
                    "List[str]",
                    "bool",
                    "List[Union[int, float]]",
                    "Set[int]",
                    "int"
                ],
                "status": [
                    "Union['KspNativeControl', int]",
                    "Iterable[str]",
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, Dict[str, str]]"
                ]
            }
        },
        "Message.get_route_state": {
            "name": "get_route_state",
            "location": 80,
            "return": [
                "bool",
                "Optional[bool]",
                "Optional[str]",
                "str",
                "Optional[cmk.utils.diagnostics.DiagnosticsOptionalParameters]"
            ],
            "arguments": {
                "self": [],
                "effect": [
                    "tuple",
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Message.set_route_state": {
            "name": "set_route_state",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "effect": [
                    "List[str]",
                    "int",
                    "str",
                    "list"
                ],
                "state": [
                    "List[str]",
                    "int",
                    "str",
                    "list"
                ]
            }
        },
        "Message.get_route_retry": {
            "name": "get_route_retry",
            "location": 100,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "effect": [
                    "str",
                    "bool"
                ]
            }
        },
        "Message.set_route_retry": {
            "name": "set_route_retry",
            "location": 108,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "bytes",
                "raiden.utils.Signature"
            ],
            "arguments": {
                "self": [],
                "effect": [
                    "bool",
                    "float"
                ],
                "retry_count": [
                    "int",
                    "Tuple[int]",
                    "float"
                ]
            }
        },
        "Message.to_dict": {
            "name": "to_dict",
            "location": 116,
            "return": [
                "Dict[str, Any]",
                "str",
                "Dict[str, Union[str, Set]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.from_dict": {
            "name": "from_dict",
            "location": 130,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Message.pretty": {
            "name": "pretty",
            "location": 140,
            "return": [
                "int",
                "bool",
                "float",
                "List[Tuple[str, str]]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Message.__repr__": {
            "name": "__repr__",
            "location": 156,
            "return": [
                "bool",
                "Optional[Any]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Route.__init__": {
            "name": "__init__",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "effect": [
                    "bool",
                    "Sequence",
                    "str"
                ],
                "status": [
                    "bool",
                    "Sequence",
                    "str"
                ],
                "state": [
                    "bool",
                    "Sequence",
                    "str"
                ],
                "retry_count": [
                    "int",
                    "List[int]",
                    "bytes"
                ]
            }
        },
        "Route.serialize": {
            "name": "serialize",
            "location": 186,
            "return": [
                "str",
                "int",
                "bytes",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Route.load": {
            "name": "load",
            "location": 197,
            "return": [
                "str",
                "Mapping[int, str]",
                "bool",
                "List[int]",
                "Union[int, float, complex]",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bytes",
                    "List[dict]"
                ],
                "data": [
                    "dict",
                    "int"
                ]
            }
        },
        "Route.pretty": {
            "name": "pretty",
            "location": 206,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiomessaging-master/aiomessaging/outputs.py": {
        "AbstractOutputBackend.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractOutputBackend.send": {
            "name": "send",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "retry": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "AbstractOutputBackend.check": {
            "name": "check",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "aiomessaging-master/aiomessaging/pipeline.py": {
        "EventPipeline.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "list",
                    "bytes",
                    "float",
                    "str",
                    "List[Dict]",
                    "int"
                ]
            }
        },
        "GenerationPipeline.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "list",
                    "bytes",
                    "float",
                    "str",
                    "List[Dict]",
                    "int"
                ]
            }
        }
    },
    "aiomessaging-master/aiomessaging/router.py": {
        "generator_from_backend_list": {
            "name": "generator_from_backend_list",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "backends": [
                    "bool"
                ]
            }
        },
        "Router.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "output_pipeline": [
                    "int",
                    "bool",
                    "Iterable[int]",
                    "Union[Dict[str, Any], List[Any]]",
                    "bytes",
                    "str"
                ]
            }
        },
        "Router.next_effect": {
            "name": "next_effect",
            "location": 17,
            "return": [
                "Optional[str]",
                "list",
                "str"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "telebotypes.Message",
                    "Dict[str, Any]",
                    "bytes",
                    "str"
                ]
            }
        },
        "Router.apply_next_effect": {
            "name": "apply_next_effect",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "MutableMapping[str, Any]",
                    "Union[object, type]"
                ]
            }
        },
        "Router.get_pipeline": {
            "name": "get_pipeline",
            "location": 46,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "google.protobuf.message.Message",
                    "message.header.Command"
                ]
            }
        }
    },
    "aiomessaging-master/aiomessaging/utils.py": {
        "gen_id": {
            "name": "gen_id",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "prefix": [
                    "List[str]",
                    "str",
                    "Optional[str]"
                ],
                "sep": [
                    "List[str]",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "short_id": {
            "name": "short_id",
            "location": 24,
            "return": [
                "int",
                "Iterable[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "some_id": [
                    "Optional[str]",
                    "str",
                    "List[int]",
                    "Optional[int]",
                    "List[\"ResourceTypeId\"]"
                ],
                "length": [
                    "int",
                    "str"
                ],
                "right_add": [
                    "Optional[str]",
                    "str",
                    "List[int]",
                    "Optional[int]",
                    "List[\"ResourceTypeId\"]"
                ],
                "sep": [
                    "Optional[str]",
                    "str",
                    "List[int]",
                    "Optional[int]",
                    "List[\"ResourceTypeId\"]"
                ]
            }
        },
        "class_from_string": {
            "name": "class_from_string",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "class_string": [
                    "str",
                    "Type[T]"
                ],
                "base": [
                    "str",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "Serializable.serialize": {
            "name": "serialize",
            "location": 97,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serializable.serialize_type": {
            "name": "serialize_type",
            "location": 106,
            "return": [
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serializable.serialize_args": {
            "name": "serialize_args",
            "location": 114,
            "return": [
                "List[str]",
                "Iterable[str]",
                "Optional[Iterable[str]]",
                "Callable[[None], None]",
                "str",
                "Tuple[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serializable.serialize_kwargs": {
            "name": "serialize_kwargs",
            "location": 119,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Set[str]]",
                "Optional[Union[str, Any, Any, Any]]",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "Serializable.load": {
            "name": "load",
            "location": 125,
            "return": [
                "str",
                "int",
                "bytes",
                "list",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "str",
                    "list"
                ],
                "args": [],
                "kwargs": []
            }
        },
        "Serializable.load_args": {
            "name": "load_args",
            "location": 131,
            "return": [
                "str",
                "set",
                "int",
                "Iterable[str]",
                "Optional[Iterable[str]]",
                "List[str]",
                "Tuple[str]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "List[Dict[str, Any]]",
                    "Callable[..., None]"
                ],
                "args": []
            }
        },
        "Serializable.load_kwargs": {
            "name": "load_kwargs",
            "location": 137,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "Optional[Match]",
                "str",
                "dict",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Type[object]",
                    "int",
                    "str"
                ],
                "kwargs": []
            }
        },
        "NamedSerializable.serialize_type": {
            "name": "serialize_type",
            "location": 151,
            "return": [
                "str",
                "List[str]",
                "type"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiomessaging-master/aiomessaging/__init__.py": {},
    "aiomessaging-master/aiomessaging/__main__.py": {},
    "aiomessaging-master/aiomessaging/consumers/base.py": {
        "AbstractConsumer.consume": {
            "name": "consume",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "queue": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "AbstractConsumer.cancel": {
            "name": "cancel",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "queue": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "BaseConsumer.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "Optional[asyncio.AbstractEventLoop]",
                    "Dict[str, Tuple[str, str, Any]]",
                    "Dict[str, Tuple[str, int, int]]",
                    "bool",
                    "int",
                    "str",
                    "Dict[int, str]"
                ],
                "debug": [
                    "int",
                    "List[int]",
                    "float",
                    "bool",
                    "List[float]",
                    "List[List[int]]"
                ],
                "last_messages_size": [
                    "int",
                    "Tuple[int, int]",
                    "str",
                    "Tuple[float, float]",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "BaseConsumer.consume": {
            "name": "consume",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "queue": [
                    "str",
                    "dict"
                ]
            }
        },
        "BaseConsumer.cancel": {
            "name": "cancel",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "queue": [
                    "int",
                    "logging.Logger",
                    "asyncio.StreamReader"
                ]
            }
        },
        "BaseConsumer._handler": {
            "name": "_handler",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "queue": [
                    "int",
                    "FrozenSet[int]",
                    "bool"
                ],
                "channel": [
                    "int",
                    "Dict[str, str]"
                ],
                "basic_deliver": [
                    "int",
                    "Dict[str, str]"
                ],
                "properties": [
                    "int",
                    "FrozenSet[int]",
                    "bool"
                ],
                "body": [
                    "dict",
                    "Dict[str, Any]",
                    "logging.Logger",
                    "bool",
                    "str"
                ]
            }
        },
        "SingleQueueConsumer.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "queue": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SingleQueueConsumer.consume_default": {
            "name": "consume_default",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiomessaging-master/aiomessaging/consumers/event.py": {
        "EventConsumer.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event_type": [
                    "Callable",
                    "bool",
                    "int"
                ],
                "event_pipeline": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "generators": [
                    "bool",
                    "Union[str, int]",
                    "int",
                    "str",
                    "List[Dict]"
                ],
                "queue_service": [
                    "bool",
                    "Union[str, int]",
                    "int",
                    "str",
                    "List[Dict]"
                ]
            }
        },
        "EventConsumer.on_generation_complete": {
            "name": "on_generation_complete",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "str",
                    "Exception",
                    "Optional[int]"
                ]
            }
        }
    },
    "aiomessaging-master/aiomessaging/consumers/generation.py": {
        "GenerationConsumer.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "messages_queue": [
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "Optional[\"ShippingInfo\"]",
                    "int"
                ],
                "cleanup_timeout": [
                    "int",
                    "str"
                ]
            }
        },
        "GenerationConsumer.consume": {
            "name": "consume",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "queue": [
                    "float",
                    "str"
                ]
            }
        },
        "GenerationConsumer.cancel": {
            "name": "cancel",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "queue": [
                    "float",
                    "int"
                ]
            }
        },
        "GenerationConsumer._handler": {
            "name": "_handler",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "queue": [
                    "str",
                    "int",
                    "bool",
                    "dict"
                ]
            }
        },
        "GenerationConsumer._start_consumer_monitoring": {
            "name": "_start_consumer_monitoring",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aiomessaging-master/aiomessaging/consumers/manager.py": {
        "ConsumersManager.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config": [
                    "sphinx.config.Config",
                    "message.header.Command",
                    "model.Config",
                    "virgene.config.Config",
                    "config.Config"
                ],
                "queue": [
                    "Dict[str, Any]",
                    "config.Config",
                    "Mapping[str, Any]"
                ],
                "loop": [
                    "Dict[str, Any]",
                    "config.Config",
                    "Mapping[str, Any]"
                ]
            }
        },
        "ConsumersManager.event_types": {
            "name": "event_types",
            "location": 187,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsumersManager.get_router": {
            "name": "get_router",
            "location": 194,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "event_type": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "aiomessaging-master/aiomessaging/consumers/message.py": {
        "MessageConsumer.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event_type": [
                    "bool",
                    "Optional[bool]",
                    "int",
                    "str"
                ],
                "router": [
                    "int",
                    "Optional[str]",
                    "bool"
                ],
                "output_queue": [
                    "int",
                    "Callable",
                    "interfaces.message.LoadedMessageInterface"
                ]
            }
        },
        "MessageConsumer.on_output_observed": {
            "name": "on_output_observed",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "str",
                    "Exception",
                    "Optional[int]"
                ]
            }
        }
    },
    "aiomessaging-master/aiomessaging/consumers/output.py": {
        "OutputConsumer.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [],
            "arguments": {
                "self": [],
                "event_type": [],
                "router": [],
                "messages_queue": []
            }
        }
    },
    "aiomessaging-master/aiomessaging/consumers/__init__.py": {},
    "aiomessaging-master/aiomessaging/contrib/dummy/filters.py": {
        "NoopFilter.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NoopFilter.__call__": {
            "name": "__call__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ]
            }
        }
    },
    "aiomessaging-master/aiomessaging/contrib/dummy/generators.py": {
        "DummyGenerator.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "msg_count": [
                    "int"
                ]
            }
        }
    },
    "aiomessaging-master/aiomessaging/contrib/dummy/output.py": {
        "NullOutput.send": {
            "name": "send",
            "location": 24,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "retry": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ConsoleOutput.send": {
            "name": "send",
            "location": 37,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "aiomessaging.message.Message",
                    "int",
                    "logging.LogRecord"
                ],
                "retry": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "FailingOutput.send": {
            "name": "send",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "retry": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "NeverDeliveredOutput.send": {
            "name": "send",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "retry": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "CheckOutput.send": {
            "name": "send",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "retry": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "CheckOutput.check": {
            "name": "check",
            "location": 86,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "RetryOutput.send": {
            "name": "send",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "retry": [
                    "str",
                    "Dict[str, Any]",
                    "List[List[int]]",
                    "int",
                    "list"
                ]
            }
        }
    },
    "aiomessaging-master/aiomessaging/contrib/dummy/pipelines.py": {
        "simple_pipeline": {
            "name": "simple_pipeline",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "sequence_pipeline": {
            "name": "sequence_pipeline",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "failing_output_pipeline": {
            "name": "failing_output_pipeline",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "message": [
                    "int",
                    "bool",
                    "Generator",
                    "List[int]",
                    "Union[None, bytes]",
                    "List[str]"
                ]
            }
        },
        "all_dummy_pipeline": {
            "name": "all_dummy_pipeline",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "message": [
                    "bool",
                    "Union[int, str]",
                    "float",
                    "int"
                ]
            }
        },
        "example_pipeline": {
            "name": "example_pipeline",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "message": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "aiomessaging-master/aiomessaging/contrib/dummy/__init__.py": {},
    "aiomessaging-master/aiomessaging/queues/backend.py": {
        "QueueBackend.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "Optional[str]",
                    "Iterable[str]",
                    "bool"
                ],
                "port": [
                    "str",
                    "Optional[str]",
                    "Iterable[str]",
                    "bool"
                ],
                "username": [
                    "str",
                    "Optional[str]",
                    "Iterable[str]",
                    "bool"
                ],
                "password": [
                    "str",
                    "Optional[str]",
                    "Iterable[str]",
                    "bool"
                ],
                "virtual_host": [
                    "str",
                    "Optional[str]",
                    "Iterable[str]",
                    "bool"
                ],
                "loop": [
                    "str",
                    "Optional[str]",
                    "Iterable[str]",
                    "bool"
                ],
                "reconnect_timeout": [
                    "str",
                    "Optional[str]",
                    "Optional[Tuple[str, str, str]]"
                ]
            }
        },
        "QueueBackend.get_url": {
            "name": "get_url",
            "location": 62,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueBackend.connect": {
            "name": "connect",
            "location": 75,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "loop": [
                    "bytes"
                ]
            }
        },
        "QueueBackend.is_open": {
            "name": "is_open",
            "location": 96,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueBackend.on_channel_closed": {
            "name": "on_channel_closed",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "str",
                    "bool",
                    "int"
                ],
                "reply_code": [
                    "bool",
                    "Optional[str]",
                    "Sequence[str]",
                    "Mapping"
                ],
                "reply_text": [
                    "bool",
                    "Optional[str]",
                    "Sequence[str]",
                    "Mapping"
                ]
            }
        },
        "QueueBackend.on_open_error_callback": {
            "name": "on_open_error_callback",
            "location": 141,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueBackend.on_connection_open": {
            "name": "on_connection_open",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "List[Dict[str, str]]",
                    "bool"
                ]
            }
        },
        "QueueBackend.on_connection_closed": {
            "name": "on_connection_closed",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "connection": [
                    "bool",
                    "Optional[str]",
                    "Sequence[str]",
                    "Mapping"
                ],
                "reply_code": [
                    "str",
                    "float"
                ],
                "reply_text": [
                    "str",
                    "float"
                ]
            }
        },
        "QueueBackend.reconnect": {
            "name": "reconnect",
            "location": 174,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueBackend.close": {
            "name": "close",
            "location": 185,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueBackend._create_future": {
            "name": "_create_future",
            "location": 256,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueueBackend.channel.on_channel": {
            "name": "on_channel",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "channel": [
                    "str"
                ]
            }
        }
    },
    "aiomessaging-master/aiomessaging/queues/queue.py": {
        "AbstractQueue.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractQueue.name": {
            "name": "name",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AbstractQueue.consume": {
            "name": "consume",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "AbstractQueue.cancel": {
            "name": "cancel",
            "location": 50,
            "return": [
                "asyncio.Future"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "backend": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[List[Any]]"
                ],
                "name": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "exchange": [
                    "Callable",
                    "List[str]",
                    "dict",
                    "bool",
                    "Hashable"
                ],
                "exchange_type": [
                    "Optional[float]",
                    "Iterable[str]",
                    "int",
                    "Optional[str]",
                    "str",
                    "bool"
                ],
                "routing_key": [
                    "bool",
                    "Dict[str, str]",
                    "list",
                    "Optional[List[Any]]",
                    "Set[str]",
                    "List[Dict[str, Any]]"
                ],
                "auto_delete": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[List[Any]]"
                ],
                "durable": [
                    "Optional[str]",
                    "str",
                    "int",
                    "Optional[List[Any]]"
                ]
            }
        },
        "Queue.name": {
            "name": "name",
            "location": 109,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.consume": {
            "name": "consume",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Callable",
                    "str",
                    "asyncio.streams.StreamWriter",
                    "asyncio.streams.StreamReader"
                ]
            }
        },
        "Queue.declare_queue": {
            "name": "declare_queue",
            "location": 216,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.bind_queue": {
            "name": "bind_queue",
            "location": 236,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.on_channel_closed": {
            "name": "on_channel_closed",
            "location": 252,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.on_consume_cancelled": {
            "name": "on_consume_cancelled",
            "location": 265,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.reconnect": {
            "name": "reconnect",
            "location": 277,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.close": {
            "name": "close",
            "location": 298,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.cancel": {
            "name": "cancel",
            "location": 305,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.__repr__": {
            "name": "__repr__",
            "location": 322,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Queue.delete.on_delete": {
            "name": "on_delete",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "method_frame": [
                    "str",
                    "bool",
                    "Dict[str, bool]",
                    "Callable",
                    "List[Dict]",
                    "list"
                ]
            }
        },
        "Queue.declare_exchange.on_declare_exchange": {
            "name": "on_declare_exchange",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {
                "frame": [
                    "Callable[[Any], bool]",
                    "List[Dict[str, Any]]",
                    "str",
                    "float",
                    "Dict[str, List[str]]"
                ]
            }
        },
        "Queue.declare_queue.on_queue_declare": {
            "name": "on_queue_declare",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "method_frame": [
                    "str",
                    "dict"
                ]
            }
        },
        "Queue.bind_queue.on_bindok": {
            "name": "on_bindok",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "unused_frame": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Queue.cancel.on_cancelok": {
            "name": "on_cancelok",
            "location": 308,
            "return": [
                ""
            ],
            "arguments": {
                "method_frame": [
                    "Optional[dict]",
                    "dict",
                    "str"
                ]
            }
        }
    },
    "aiomessaging-master/aiomessaging/queues/__init__.py": {},
    "aiomessaging-master/docs/conf.py": {},
    "aiomessaging-master/tests/fixtures.py": {},
    "aiomessaging-master/tests/helpers.py": {
        "has_log_message": {
            "name": "has_log_message",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {
                "caplog": [
                    "str",
                    "List[bytes]",
                    "Iterable[float]",
                    "type",
                    "int"
                ],
                "message": [
                    "List[str]",
                    "bool",
                    "str"
                ],
                "level": [
                    "int",
                    "bool",
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "log_count": {
            "name": "log_count",
            "location": 104,
            "return": [
                "int",
                "List[bool]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "caplog": [
                    "str",
                    "List[bytes]",
                    "Iterable[float]",
                    "int",
                    "float"
                ],
                "message": [
                    "AbstractSet[str]",
                    "bool",
                    "str"
                ],
                "level": [
                    "bool",
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "mock_coro": {
            "name": "mock_coro",
            "location": 122,
            "return": [
                "List[str]",
                "Iterable",
                "str"
            ],
            "arguments": {
                "return_value": [
                    "str",
                    "int",
                    "Optional[Union[float, int]]",
                    "List[str]",
                    "list",
                    "Optional[str]"
                ]
            }
        },
        "OutputConsumerContext.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "backend": [
                    "str",
                    "bool",
                    "dict",
                    "Dict[str, Union[str, Any]]",
                    "Set[Tuple[str, str]]"
                ],
                "output": [
                    "str",
                    "bool",
                    "dict",
                    "Dict[str, Union[str, Any]]",
                    "Set[Tuple[str, str]]"
                ],
                "pipeline": [
                    "str",
                    "bool",
                    "dict",
                    "Dict[str, Union[str, Any]]",
                    "Set[Tuple[str, str]]"
                ]
            }
        },
        "MessageConsumerContext.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "backend": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ],
                "pipeline": [
                    "int",
                    "apistar.interfaces.Router",
                    "bool",
                    "float"
                ]
            }
        },
        "mock_coro.mock_coro": {
            "name": "mock_coro",
            "location": 124,
            "return": [],
            "arguments": {}
        }
    },
    "aiomessaging-master/tests/test_app.py": {
        "test_sync": {
            "name": "test_sync",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "event_loop": [
                    "bool"
                ],
                "app": [
                    "bool"
                ]
            }
        },
        "app": {
            "name": "app",
            "location": 40,
            "return": [
                "app.App",
                "abilian.app.Application"
            ],
            "arguments": {}
        }
    },
    "aiomessaging-master/tests/test_cluster.py": {},
    "aiomessaging-master/tests/test_config.py": {
        "test_get_logging_dict": {
            "name": "test_get_logging_dict",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_class_from_string": {
            "name": "test_class_from_string",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "aiomessaging-master/tests/test_consumer.py": {
        "test_fail.ExampleFailHandler._handler": {
            "name": "_handler",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "queue": [
                    "int",
                    "FrozenSet[int]",
                    "bool"
                ],
                "channel": [
                    "int",
                    "FrozenSet[int]",
                    "bool"
                ],
                "basic_deliver": [
                    "int",
                    "FrozenSet[int]",
                    "bool"
                ],
                "properties": [
                    "int",
                    "FrozenSet[int]",
                    "bool"
                ],
                "body": [
                    "int",
                    "FrozenSet[int]",
                    "bool"
                ]
            }
        }
    },
    "aiomessaging-master/tests/test_effects.py": {
        "test_send_simple": {
            "name": "test_send_simple",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_failing_action": {
            "name": "test_failing_action",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_never_delivered": {
            "name": "test_never_delivered",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_next_action": {
            "name": "test_next_action",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "caplog": [
                    "str",
                    "phial.Message",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "aiomessaging-master/tests/test_event.py": {
        "test_simple": {
            "name": "test_simple",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_to_dict": {
            "name": "test_to_dict",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "aiomessaging-master/tests/test_event_consumer.py": {
        "test_start.test_callable": {
            "name": "test_callable",
            "location": 27,
            "return": [],
            "arguments": {
                "event": [
                    "asyncio.AbstractEventLoop",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "aiomessaging-master/tests/test_generation_consumer.py": {},
    "aiomessaging-master/tests/test_message.py": {
        "test_message_repr": {
            "name": "test_message_repr",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_route": {
            "name": "test_route",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_route_serialize": {
            "name": "test_route_serialize",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_update_state": {
            "name": "test_update_state",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_set_status": {
            "name": "test_set_status",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "aiomessaging-master/tests/test_message_consumer.py": {},
    "aiomessaging-master/tests/test_output_consumer.py": {},
    "aiomessaging-master/tests/test_queue_backend.py": {
        "test_reconnect.test_handler": {
            "name": "test_handler",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "aiomessaging-master/tests/test_router.py": {
        "test_simple_pipeline": {
            "name": "test_simple_pipeline",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_sequence_send": {
            "name": "test_sequence_send",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_string_configuration": {
            "name": "test_string_configuration",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_send_effect": {
            "name": "test_send_effect",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_string_list_init": {
            "name": "test_string_list_init",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "aiomessaging-master/tests/__init__.py": {}
}
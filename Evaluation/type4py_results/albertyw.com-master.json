{
    "albertyw.com-master/app/data.py": {
        "get_projects": {
            "name": "get_projects",
            "location": 81,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "get_shelf": {
            "name": "get_shelf",
            "location": 137,
            "return": [
                "int",
                "str",
                "List[List[int]]"
            ],
            "arguments": {}
        },
        "Projects.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Projects.load_from_file": {
            "name": "load_from_file",
            "location": 14,
            "return": [
                "bool",
                "str",
                "Set[str]"
            ],
            "arguments": {}
        },
        "Projects.load": {
            "name": "load",
            "location": 23,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Language.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Language.load": {
            "name": "load",
            "location": 37,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "key": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "dict",
                    "List[str]"
                ],
                "data": [
                    "bytes",
                    "Dict[str, Any]",
                    "T",
                    "dict"
                ]
            }
        },
        "Project.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Project.load": {
            "name": "load",
            "location": 57,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Iterable[str]",
                    "dict"
                ],
                "data": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[Dict, str, int, bytes]]"
                ]
            }
        },
        "Project.links": {
            "name": "links",
            "location": 68,
            "return": [
                "str",
                "list",
                "bool",
                "Iterable[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shelf.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Shelf.load_from_file": {
            "name": "load_from_file",
            "location": 91,
            "return": [
                "str",
                "List[str]",
                "dict",
                "Optional[Dict]"
            ],
            "arguments": {}
        },
        "Shelf.load": {
            "name": "load",
            "location": 100,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "shelf_data": [
                    "dict",
                    "allennlp.common.util.JsonDict",
                    "Dict[int, Dict]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Section.__init__": {
            "name": "__init__",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Section.load": {
            "name": "load",
            "location": 114,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict"
                ],
                "data": [
                    "str",
                    "bool",
                    "Optional[float]",
                    "Optional[int]"
                ]
            }
        },
        "Item.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Item.load": {
            "name": "load",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "Dict[str, str]",
                    "dict",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        }
    },
    "albertyw.com-master/app/note_util.py": {
        "prune_note_files": {
            "name": "prune_note_files",
            "location": 87,
            "return": [
                "str",
                "pathlib.Path",
                "paradigm.catalog.Path"
            ],
            "arguments": {
                "note_files": [
                    "List[str]",
                    "os.stat_result",
                    "pathlib.Path",
                    "Optional[str]",
                    "IO[Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "get_note_files": {
            "name": "get_note_files",
            "location": 98,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "get_notes": {
            "name": "get_notes",
            "location": 110,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "directory": [
                    "str",
                    "bytes",
                    "BinaryIO",
                    "int"
                ]
            }
        },
        "get_note_from_slug": {
            "name": "get_note_from_slug",
            "location": 122,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "bool",
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "directory": [
                    "int"
                ],
                "slug": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "Note.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "note_file": [
                    "str",
                    "IO",
                    "TextIO",
                    "AsyncGenerator",
                    "Coroutine",
                    "List[str]"
                ]
            }
        },
        "Note.__eq__": {
            "name": "__eq__",
            "location": 35,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "int",
                    "Union[int, float]"
                ]
            }
        },
        "Note.__repr__": {
            "name": "__repr__",
            "location": 43,
            "return": [
                "Callable",
                "str",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "Note.get_note_file_data": {
            "name": "get_note_file_data",
            "location": 49,
            "return": [
                "str",
                "Optional[str]",
                "List[Dict[str, Any]]",
                "Optional[List[str]]",
                "Optional[pathlib.Path]",
                "Optional[bool]"
            ],
            "arguments": {
                "note_file": [
                    "List[str]",
                    "path.Path",
                    "Sequence[str]",
                    "pathlib.Path",
                    "str",
                    "List[int]"
                ]
            }
        },
        "Note.parse_time": {
            "name": "parse_time",
            "location": 65,
            "return": [
                "datetime.datetime",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "timestamp_str": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Note.parse_markdown": {
            "name": "parse_markdown",
            "location": 72,
            "return": [
                "str"
            ],
            "arguments": {
                "markdown": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "Note.write_note": {
            "name": "write_note",
            "location": 77,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "prune_note_files.is_valid_note": {
            "name": "is_valid_note",
            "location": 88,
            "return": [
                "bool"
            ],
            "arguments": {
                "note_file": [
                    "pathlib.Path",
                    "str",
                    "BinaryIO",
                    "IO[bytes]"
                ]
            }
        }
    },
    "albertyw.com-master/app/routes.py": {
        "index": {
            "name": "index",
            "location": 24,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {}
        },
        "resume": {
            "name": "resume",
            "location": 29,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {}
        },
        "projects": {
            "name": "projects",
            "location": 34,
            "return": [
                "bytes",
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "notes": {
            "name": "notes",
            "location": 40,
            "return": [
                "str",
                "int",
                "float"
            ],
            "arguments": {}
        },
        "shelf": {
            "name": "shelf",
            "location": 46,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {}
        },
        "note": {
            "name": "note",
            "location": 52,
            "return": [
                "str",
                "Dict[str, str]",
                "bool",
                "int"
            ],
            "arguments": {
                "slug": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "references": {
            "name": "references",
            "location": 62,
            "return": [
                "str",
                "Callable",
                "allennlp.data.vocabulary.Vocabulary"
            ],
            "arguments": {}
        },
        "reference": {
            "name": "reference",
            "location": 68,
            "return": [
                "Dict[str, Any]",
                "Response"
            ],
            "arguments": {
                "slug": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "about": {
            "name": "about",
            "location": 78,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {}
        },
        "atom_feed": {
            "name": "atom_feed",
            "location": 83,
            "return": [
                "List[str]",
                "Optional[str]",
                "int",
                "Dict[str, Any]",
                "data.Index",
                "data.Library"
            ],
            "arguments": {}
        },
        "sitemap_urls": {
            "name": "sitemap_urls",
            "location": 108,
            "return": [
                "typing.Any"
            ],
            "arguments": {}
        }
    },
    "albertyw.com-master/app/serve.py": {
        "robots": {
            "name": "robots",
            "location": 60,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "health": {
            "name": "health",
            "location": 65,
            "return": [
                "Optional[int]",
                "Dict[str, str]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "page_not_found": {
            "name": "page_not_found",
            "location": 71,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "e": [
                    "Exception",
                    "int",
                    "str",
                    "type",
                    "bool"
                ]
            }
        },
        "init_rollbar": {
            "name": "init_rollbar",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "albertyw.com-master/app/util.py": {
        "cached_function": {
            "name": "cached_function",
            "location": 10,
            "return": [
                "int",
                "bool",
                "Iterator"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "bool"
                ]
            }
        },
        "cached_function.wrapper": {
            "name": "wrapper",
            "location": 13,
            "return": [
                "bool",
                "int",
                "Tuple[Any, int]"
            ],
            "arguments": {}
        }
    },
    "albertyw.com-master/app/__init__.py": {},
    "albertyw.com-master/app/tests/test_data.py": {
        "TestProjects.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjects.tearDown": {
            "name": "tearDown",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjects.test_load_from_file": {
            "name": "test_load_from_file",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProjects.test_get_projects": {
            "name": "test_get_projects",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShelf.setUp": {
            "name": "setUp",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShelf.tearDown": {
            "name": "tearDown",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShelf.test_load_from_file": {
            "name": "test_load_from_file",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestShelf.test_get_shelf": {
            "name": "test_get_shelf",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "albertyw.com-master/app/tests/test_note.py": {
        "make_check_grammar": {
            "name": "make_check_grammar",
            "location": 166,
            "return": [
                "bool",
                "List[str]",
                "Union[int, float, complex]",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {
                "note": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "make_check_style": {
            "name": "make_check_style",
            "location": 172,
            "return": [
                "bool",
                "List[str]",
                "Union[int, float, complex]",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {
                "note": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "make_check_page": {
            "name": "make_check_page",
            "location": 178,
            "return": [
                "bool",
                "List[str]",
                "Union[int, float, complex]",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {
                "directory": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "note": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "make_check_slug": {
            "name": "make_check_slug",
            "location": 186,
            "return": [
                "bool",
                "List[str]",
                "Union[int, float, complex]",
                "Tuple[int, int]",
                "str"
            ],
            "arguments": {
                "note": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestNote.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNote.test_parse_time": {
            "name": "test_parse_time",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNote.test_parse_markdown": {
            "name": "test_parse_markdown",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNote.test_get_malformed_note": {
            "name": "test_get_malformed_note",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNote.test_write_note": {
            "name": "test_write_note",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilCase.check_prune_note_files": {
            "name": "check_prune_note_files",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str"
                ],
                "assert_contains": [
                    "bool",
                    "str"
                ]
            }
        },
        "UtilCase.test_normal_notes": {
            "name": "test_normal_notes",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilCase.test_prune_tilde_notes": {
            "name": "test_prune_tilde_notes",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilCase.test_prune_dotfile_notes": {
            "name": "test_prune_dotfile_notes",
            "location": 73,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilCase.test_get_note_from_unknown_slug": {
            "name": "test_get_note_from_unknown_slug",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UtilCase.test_slug_lower_case": {
            "name": "test_slug_lower_case",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGrammar.check_grammar": {
            "name": "check_grammar",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "TestStyle.check_title_case": {
            "name": "check_title_case",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "note": [
                    "int"
                ]
            }
        },
        "TestPage.setUp": {
            "name": "setUp",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPage.check_page_loads": {
            "name": "check_page_loads",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "directory": [
                    "bool",
                    "Dict[str, int]",
                    "float",
                    "datetime.date",
                    "str"
                ],
                "note": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TestSlug.check_slug": {
            "name": "check_slug",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "note": [
                    "List[str]",
                    "Iterable[Any]",
                    "str",
                    "pathlib.Path",
                    "Optional[str]",
                    "List[Tuple[bool, str]]"
                ]
            }
        },
        "make_check_grammar.test": {
            "name": "test",
            "location": 167,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "make_check_style.test": {
            "name": "test",
            "location": 173,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "make_check_page.test": {
            "name": "test",
            "location": 181,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "make_check_slug.test": {
            "name": "test",
            "location": 187,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [
                    "str",
                    "bytes"
                ]
            }
        },
        "TestIntegration.test_varsnap": {
            "name": "test_varsnap",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "albertyw.com-master/app/tests/test_serve.py": {
        "PageCase.setUp": {
            "name": "setUp",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageCase.test_index_load": {
            "name": "test_index_load",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageCase.test_resume_load": {
            "name": "test_resume_load",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageCase.test_projects_load": {
            "name": "test_projects_load",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageCase.test_notes_load": {
            "name": "test_notes_load",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageCase.test_shelf_load": {
            "name": "test_shelf_load",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageCase.test_reference": {
            "name": "test_reference",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageCase.test_about_load": {
            "name": "test_about_load",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageCase.test_robots_load": {
            "name": "test_robots_load",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageCase.test_health_load": {
            "name": "test_health_load",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageCase.test_sitemap_load": {
            "name": "test_sitemap_load",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageCase.test_not_found": {
            "name": "test_not_found",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageCase.test_note_load": {
            "name": "test_note_load",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageCase.test_note_capital_load": {
            "name": "test_note_capital_load",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageCase.test_atom_feed_load": {
            "name": "test_atom_feed_load",
            "location": 55,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageCase.test_nonexistent_note_load": {
            "name": "test_nonexistent_note_load",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PageCase.page_test": {
            "name": "page_test",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "IO",
                    "Dict[str, str]"
                ],
                "string": [
                    "bytes",
                    "str",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "albertyw.com-master/app/tests/test_util.py": {
        "rand": {
            "name": "rand",
            "location": 7,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "base": [
                    "int"
                ]
            }
        },
        "cached_rand": {
            "name": "cached_rand",
            "location": 12,
            "return": [
                "str",
                "Iterable[int]",
                "float"
            ],
            "arguments": {
                "base": [
                    "float",
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "TestCachedFunction.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCachedFunction.tearDown": {
            "name": "tearDown",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCachedFunction.test_noncached_function": {
            "name": "test_noncached_function",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCachedFunction.test_cached_function": {
            "name": "test_cached_function",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCachedFunction.test_cached_nonmatching_function": {
            "name": "test_cached_nonmatching_function",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "albertyw.com-master/app/tests/__init__.py": {},
    "albertyw.com-master/bin/newpost.py": {
        "get_reference_slug": {
            "name": "get_reference_slug",
            "location": 17,
            "return": [
                "List[str]",
                "bool",
                "str",
                "List[Optional[str]]"
            ],
            "arguments": {}
        },
        "generate_note": {
            "name": "generate_note",
            "location": 25,
            "return": [
                "str",
                "pathlib.Path",
                "List[str]"
            ],
            "arguments": {
                "reference_name": [
                    "str"
                ]
            }
        },
        "edit_note": {
            "name": "edit_note",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "note_path": [
                    "pathlib.Path",
                    "Union[pathlib.Path, str]"
                ]
            }
        }
    },
    "albertyw.com-master/config/uwsgi/websiterunner.py": {}
}
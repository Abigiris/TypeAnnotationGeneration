{
    "alerta-master/setup.py": {
        "read": {
            "name": "read",
            "location": 10,
            "return": [
                "str",
                "Tuple[str]",
                "List[int]",
                "Optional[str]"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        }
    },
    "alerta-master/wsgi.py": {},
    "alerta-master/alerta/app.py": {
        "create_app": {
            "name": "create_app",
            "location": 48,
            "return": [
                "flask.Flask"
            ],
            "arguments": {
                "config_override": [
                    "Dict[str, Any]",
                    "meier.config.Config",
                    "str",
                    "config.Config",
                    "Config",
                    "type",
                    "sphinx.config.Config",
                    "dict"
                ],
                "environment": [
                    "str",
                    "zaimcsvconverter.config.SFCardViewerConfig",
                    "logging.Logger",
                    "entity_embeddings.Config",
                    "Optional[str]",
                    "pyramid.config.Configurator",
                    "dict",
                    "Config"
                ]
            }
        },
        "create_celery_app": {
            "name": "create_celery_app",
            "location": 101,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "app": [
                    "flask.Flask",
                    "Optional[\"Game\"]",
                    "bool"
                ]
            }
        },
        "create_celery_app.ContextTask.__call__": {
            "name": "__call__",
            "location": 117,
            "return": [
                "str",
                "Optional[zerver.models.Realm]",
                "suitable.api.Api",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/alerta/commands.py": {
        "_create_app": {
            "name": "_create_app",
            "location": 17,
            "return": [
                "flask.Flask"
            ],
            "arguments": {
                "config_override": [
                    "Dict[str, Any]",
                    "meier.config.Config",
                    "str",
                    "config.Config",
                    "type",
                    "sphinx.config.Config",
                    "dict"
                ],
                "environment": [
                    "str",
                    "zaimcsvconverter.config.SFCardViewerConfig",
                    "Optional[str]",
                    "pyramid.config.Configurator",
                    "dict"
                ]
            }
        },
        "cli": {
            "name": "cli",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "click.Context"
                ]
            }
        },
        "key": {
            "name": "key",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "username": [
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "int",
                    "Union[str, int]",
                    "str",
                    "tuple",
                    "Tuple[List[str], List[Any]]",
                    "bool"
                ],
                "want_key": [
                    "dict",
                    "bytearray",
                    "str",
                    "Dict[int, str]",
                    "bool",
                    "bytes"
                ],
                "scopes": [
                    "bool",
                    "datetime.datetime",
                    "Dict[str, str]",
                    "tuple",
                    "Optional[str]"
                ],
                "duration": [
                    "bool",
                    "List[str]",
                    "Union[models.scenes.scenes_base.EffectType, Sequence[models.scenes.scenes_base.EffectType]]"
                ],
                "text": [
                    "bool",
                    "List[str]",
                    "Union[models.scenes.scenes_base.EffectType, Sequence[models.scenes.scenes_base.EffectType]]"
                ],
                "customer": [
                    "bool",
                    "List[str]",
                    "Union[models.scenes.scenes_base.EffectType, Sequence[models.scenes.scenes_base.EffectType]]"
                ],
                "all": [
                    "bool",
                    "List[str]",
                    "Union[models.scenes.scenes_base.EffectType, Sequence[models.scenes.scenes_base.EffectType]]"
                ],
                "force": [
                    "str",
                    "bool",
                    "float",
                    "dict",
                    "int"
                ]
            }
        },
        "keys": {
            "name": "keys",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "user": {
            "name": "user",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "name": [
                    "str",
                    "Optional[int]",
                    "Sequence[str]",
                    "zerver.models.UserProfile",
                    "zerver.models.Message"
                ],
                "email": [
                    "str",
                    "bool"
                ],
                "password": [
                    "str",
                    "bool",
                    "Callable[[], Iterable[Any]]",
                    "Optional[str]",
                    "Sequence[str]"
                ],
                "text": [
                    "str",
                    "bool",
                    "Callable[[], Iterable[Any]]",
                    "Optional[str]",
                    "Sequence[str]"
                ],
                "all": [
                    "str",
                    "bool",
                    "Callable[[], Iterable[Any]]",
                    "Optional[str]",
                    "Sequence[str]"
                ]
            }
        },
        "users": {
            "name": "users",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "key.create_key": {
            "name": "create_key",
            "location": 69,
            "return": [
                "str",
                "aaLogbook.models.logbookTranslationModel.Logbook",
                "int"
            ],
            "arguments": {
                "admin": [
                    "str",
                    "Optional[AnyStr]",
                    "Dict[str, bool]"
                ],
                "key": [
                    "str",
                    "Dict[str, Any]",
                    "set",
                    "dict"
                ]
            }
        },
        "CommandWithOptionalPassword.parse_args": {
            "name": "parse_args",
            "location": 134,
            "return": [
                "cmk.utils.type_defs.HostName",
                "str",
                "cmk.utils.type_defs.ServiceName",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "ctx": [
                    "str",
                    "Optional[str]"
                ],
                "args": []
            }
        },
        "user.create_user": {
            "name": "create_user",
            "location": 168,
            "return": [
                "zam_repondeur.models.Lecture",
                "core.models.UserPreferences",
                "set",
                "int",
                "user_models.User",
                "bool",
                "django.db.models.QuerySet"
            ],
            "arguments": {
                "name": [
                    "str",
                    "int"
                ],
                "login": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "alerta-master/alerta/dev.py": {},
    "alerta-master/alerta/exceptions.py": {
        "handle_http_error": {
            "name": "handle_http_error",
            "location": 83,
            "return": [
                "str",
                "type",
                "Mapping[Tuple[str, str], Any]",
                "bool",
                "dict"
            ],
            "arguments": {
                "error": [
                    "Exception",
                    "bool",
                    "dict",
                    "List[openapi_core.exceptions.OpenAPIError]",
                    "werkzeug.exceptions.Unauthorized",
                    "werkzeug.exceptions.Forbidden",
                    "str",
                    "werkzeug.exceptions.InternalServerError"
                ]
            }
        },
        "handle_api_error": {
            "name": "handle_api_error",
            "location": 98,
            "return": [
                "Dict[str, Any]",
                "Mapping[Tuple[str, str], Any]",
                "int",
                "bool",
                "Callable[..., None]"
            ],
            "arguments": {
                "error": [
                    "Exception",
                    "jsonrpc.exceptions.JSONRPCError"
                ]
            }
        },
        "handle_basic_auth_error": {
            "name": "handle_basic_auth_error",
            "location": 110,
            "return": [
                "Dict[str, Any]",
                "int",
                "Mapping[Tuple[str, str], Any]",
                "bool"
            ],
            "arguments": {
                "error": [
                    "werkzeug.exceptions.InternalServerError",
                    "BaseException",
                    "Exception",
                    "List[openapi_core.exceptions.OpenAPIError]",
                    "str",
                    "werkzeug.exceptions.Forbidden"
                ]
            }
        },
        "handle_exception": {
            "name": "handle_exception",
            "location": 120,
            "return": [
                "str",
                "int",
                "bool",
                "List[str]",
                "Optional[Callable]",
                "T"
            ],
            "arguments": {
                "error": [
                    "BaseException",
                    "werkzeug.exceptions.InternalServerError",
                    "Exception",
                    "List[openapi_core.exceptions.OpenAPIError]",
                    "str"
                ]
            }
        },
        "BaseError.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "str",
                    "bool"
                ],
                "code": [
                    "Optional[str]",
                    "Optional[List[Dict]]",
                    "Optional[Dict[str, str]]",
                    "Optional[Dict[str, Any]]"
                ],
                "errors": [
                    "Set[str]",
                    "Optional[bytes]",
                    "bool",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "HeartbeatReceived.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "Sequence[str]"
                ]
            }
        },
        "ExceptionHandlers.register": {
            "name": "register",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "alerta-master/alerta/settings.py": {},
    "alerta-master/alerta/tasks.py": {
        "action_alerts": {
            "name": "action_alerts",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "alerts": [
                    "List[str]",
                    "int",
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, Any]]"
                ],
                "action": [
                    "str"
                ],
                "text": [
                    "str",
                    "Optional[int]",
                    "Optional[str]",
                    "Optional[Any]"
                ],
                "timeout": [
                    "Optional[int]",
                    "str",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "alerta-master/alerta/version.py": {},
    "alerta-master/alerta/__init__.py": {},
    "alerta-master/alerta/auth/basic.py": {
        "signup": {
            "name": "signup",
            "location": 15,
            "return": [
                "str",
                "dict",
                "ajapaik.ajapaik.models.Album",
                "List[str]",
                "int"
            ],
            "arguments": {}
        },
        "login": {
            "name": "login",
            "location": 66,
            "return": [
                "str",
                "dict",
                "ajapaik.ajapaik.models.Album",
                "List[str]",
                "int"
            ],
            "arguments": {}
        },
        "verify_email": {
            "name": "verify_email",
            "location": 109,
            "return": [
                "int",
                "cmk.utils.type_defs.UserId",
                "bool",
                "Optional[str]",
                "Optional[bool]",
                "bytes"
            ],
            "arguments": {
                "hash": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "forgot": {
            "name": "forgot",
            "location": 128,
            "return": [
                "bool",
                "List[List[int]]"
            ],
            "arguments": {}
        },
        "reset": {
            "name": "reset",
            "location": 151,
            "return": [
                "bool",
                "List[List[int]]"
            ],
            "arguments": {
                "hash": [
                    "bytes",
                    "str",
                    "list"
                ]
            }
        }
    },
    "alerta-master/alerta/auth/basic_ldap.py": {
        "login": {
            "name": "login",
            "location": 11,
            "return": [
                "str",
                "dict",
                "ajapaik.ajapaik.models.Album",
                "List[str]",
                "int"
            ],
            "arguments": {}
        }
    },
    "alerta-master/alerta/auth/decorators.py": {
        "permission": {
            "name": "permission",
            "location": 24,
            "return": [
                "str"
            ],
            "arguments": {
                "scope": [
                    "Tuple[str, str]",
                    "str",
                    "List[str]"
                ]
            }
        },
        "permission.decorated": {
            "name": "decorated",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "permission.decorated.wrapped": {
            "name": "wrapped",
            "location": 27,
            "return": [
                "str",
                "int",
                "bytes",
                "Dict[str, Any]",
                "Iterable[str]"
            ],
            "arguments": {}
        }
    },
    "alerta-master/alerta/auth/github.py": {
        "github": {
            "name": "github",
            "location": 16,
            "return": [
                "str",
                "dict",
                "ajapaik.ajapaik.models.Album",
                "List[str]",
                "int"
            ],
            "arguments": {}
        }
    },
    "alerta-master/alerta/auth/hmac.py": {
        "get_credentials": {
            "name": "get_credentials",
            "location": 5,
            "return": [
                "str",
                "Optional[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "key_id": [
                    "str",
                    "int"
                ]
            }
        },
        "HmacAuth.authenticate": {
            "name": "authenticate",
            "location": 22,
            "return": [
                "Optional[str]",
                "T"
            ],
            "arguments": {
                "r": [
                    "flask.Request",
                    "Dict[str, Dict[str, int]]",
                    "str",
                    "dict"
                ]
            }
        }
    },
    "alerta-master/alerta/auth/login.py": {
        "login": {
            "name": "login",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "alerta-master/alerta/auth/logout.py": {
        "logout": {
            "name": "logout",
            "location": 9,
            "return": [
                "dict"
            ],
            "arguments": {}
        }
    },
    "alerta-master/alerta/auth/oidc.py": {
        "get_oidc_configuration": {
            "name": "get_oidc_configuration",
            "location": 20,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "Dict[str, str]",
                "int",
                "bool"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "openid": {
            "name": "openid",
            "location": 67,
            "return": [
                "str",
                "dict",
                "ajapaik.ajapaik.models.Album",
                "List[str]",
                "int"
            ],
            "arguments": {}
        }
    },
    "alerta-master/alerta/auth/saml.py": {
        "get_saml2_config": {
            "name": "get_saml2_config",
            "location": 21,
            "return": [
                "Dict[str, Any]",
                "str",
                "List[str]",
                "bool",
                "Optional[str]",
                "Optional[dict]",
                "dict"
            ],
            "arguments": {}
        },
        "saml_client": {
            "name": "saml_client",
            "location": 58,
            "return": [
                "Optional[str]",
                "dict"
            ],
            "arguments": {}
        },
        "saml_redirect_to_idp": {
            "name": "saml_redirect_to_idp",
            "location": 65,
            "return": [
                "Optional[str]",
                "str",
                "Response"
            ],
            "arguments": {}
        },
        "saml_response_from_idp": {
            "name": "saml_response_from_idp",
            "location": 72,
            "return": [
                "Dict[str, Any]",
                "Mapping[str, Any]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {}
        },
        "saml_metadata": {
            "name": "saml_metadata",
            "location": 122,
            "return": [
                "Optional[str]",
                "str",
                "int",
                "cmk.utils.type_defs.UserId",
                "dict"
            ],
            "arguments": {}
        }
    },
    "alerta-master/alerta/auth/userinfo.py": {
        "userinfo": {
            "name": "userinfo",
            "location": 17,
            "return": [
                "dict",
                "ajapaik.ajapaik.models.Album"
            ],
            "arguments": {}
        }
    },
    "alerta-master/alerta/auth/utils.py": {
        "not_authorized": {
            "name": "not_authorized",
            "location": 33,
            "return": [
                "Dict[str, Dict[str, Any]]",
                "bool",
                "Optional[str]",
                "str",
                "int",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.ServiceName"
            ],
            "arguments": {
                "allowed_setting": [
                    "str",
                    "List[str]",
                    "dict"
                ],
                "groups": [
                    "str",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "get_customers": {
            "name": "get_customers",
            "location": 39,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "login": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "groups": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "create_token": {
            "name": "create_token",
            "location": 49,
            "return": [
                "bool",
                "models.Channel",
                "Tuple[flask.Response, int]",
                "dict",
                "int"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "name": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "login": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "provider": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "customers": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "scopes": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "email": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "email_verified": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "picture": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "link": {
            "name": "link",
            "location": 73,
            "return": [
                "str"
            ],
            "arguments": {
                "base_url": [
                    "str",
                    "list"
                ]
            }
        },
        "send_confirmation": {
            "name": "send_confirmation",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "str",
                    "List[Tuple[str, str]]"
                ],
                "token": [
                    "dict",
                    "ultron8.api.models.trigger.TriggerCreate",
                    "Dict[str, str]",
                    "str",
                    "Optional[MutableMapping]"
                ]
            }
        },
        "send_password_reset": {
            "name": "send_password_reset",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "User",
                    "str",
                    "models.User",
                    "Optional[str]",
                    "Optional[int]",
                    "raiden.utils.Address"
                ],
                "token": [
                    "str",
                    "Optional[int]",
                    "annofabapi.models.LabelV1",
                    "List[int]"
                ]
            }
        },
        "generate_email_token": {
            "name": "generate_email_token",
            "location": 103,
            "return": [
                "str",
                "zerver.models.Realm",
                "Dict[str, Any]",
                "bytes",
                "Iterable[str]"
            ],
            "arguments": {
                "email": [
                    "str"
                ],
                "salt": [
                    "str"
                ]
            }
        },
        "confirm_email_token": {
            "name": "confirm_email_token",
            "location": 108,
            "return": [
                "str",
                "Optional[str]",
                "Optional[zerver.models.Realm]"
            ],
            "arguments": {
                "token": [
                    "int",
                    "List[str]",
                    "Union[List[str], List[Any]]",
                    "dict",
                    "str",
                    "Tuple[str]"
                ],
                "salt": [
                    "int",
                    "List[str]",
                    "Union[List[str], List[Any]]",
                    "dict",
                    "str",
                    "Tuple[str]"
                ],
                "expiration": [
                    "int",
                    "List[str]",
                    "Union[List[str], List[Any]]",
                    "dict",
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "generate_password_hash": {
            "name": "generate_password_hash",
            "location": 21,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "password": [
                    "str"
                ]
            }
        },
        "check_password_hash": {
            "name": "check_password_hash",
            "location": 26,
            "return": [
                "int",
                "str",
                "Tuple[type]",
                "db.models.Taxon",
                "Callable[[KT], VT]"
            ],
            "arguments": {
                "pwhash": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        }
    },
    "alerta-master/alerta/auth/__init__.py": {
        "only_json": {
            "name": "only_json",
            "location": 43,
            "return": [
                "Iterator"
            ],
            "arguments": {}
        },
        "AuthBlueprint.register": {
            "name": "register",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask",
                    "Optional[flask.Flask]"
                ],
                "options": [
                    "flask.Flask"
                ]
            }
        }
    },
    "alerta-master/alerta/database/base.py": {
        "get_backend": {
            "name": "get_backend",
            "location": 20,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "load_backend": {
            "name": "load_backend",
            "location": 31,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "backend": [
                    "str",
                    "int",
                    "Union[int, str]"
                ]
            }
        },
        "Database.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask",
                    "Optional[str]",
                    "Optional[flask.Flask]"
                ]
            }
        },
        "Database.init_db": {
            "name": "init_db",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "Database.create_engine": {
            "name": "create_engine",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "bool",
                    "str"
                ],
                "uri": [
                    "bool",
                    "str"
                ],
                "dbname": [
                    "bool",
                    "str"
                ],
                "raise_on_error": [
                    "bool",
                    "str"
                ]
            }
        },
        "Database.connect": {
            "name": "connect",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.name": {
            "name": "name",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.version": {
            "name": "version",
            "location": 71,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.is_alive": {
            "name": "is_alive",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.close": {
            "name": "close",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "db": [
                    "bool"
                ]
            }
        },
        "Database.destroy": {
            "name": "destroy",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.get_db": {
            "name": "get_db",
            "location": 84,
            "return": [
                "Callable[[list], None]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.teardown_db": {
            "name": "teardown_db",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc": [
                    "str"
                ]
            }
        },
        "Database.get_severity": {
            "name": "get_severity",
            "location": 96,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "Database.get_status": {
            "name": "get_status",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "Database.is_duplicate": {
            "name": "is_duplicate",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "int"
                ]
            }
        },
        "Database.is_correlated": {
            "name": "is_correlated",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "int"
                ]
            }
        },
        "Database.is_flapping": {
            "name": "is_flapping",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "bool",
                    "Optional[List]"
                ],
                "window": [
                    "bool",
                    "Optional[List]"
                ],
                "count": [
                    "bool",
                    "Optional[List]"
                ]
            }
        },
        "Database.dedup_alert": {
            "name": "dedup_alert",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "history": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Database.correlate_alert": {
            "name": "correlate_alert",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "history": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Database.create_alert": {
            "name": "create_alert",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "Iterator[str]",
                    "bool",
                    "float"
                ]
            }
        },
        "Database.set_alert": {
            "name": "set_alert",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "severity": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "status": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "tags": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "attributes": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "timeout": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "previous_severity": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "update_time": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ],
                "history": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "Database.get_alert": {
            "name": "get_alert",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str"
                ],
                "customers": [
                    "int",
                    "str"
                ]
            }
        },
        "Database.set_status": {
            "name": "set_status",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "status": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "timeout": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "update_time": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "str"
                ],
                "history": [
                    "bool",
                    "Optional[str]",
                    "int",
                    "str"
                ]
            }
        },
        "Database.tag_alert": {
            "name": "tag_alert",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "bool",
                    "float",
                    "Optional[bool]"
                ],
                "tags": [
                    "str",
                    "bool",
                    "float",
                    "Optional[bool]"
                ]
            }
        },
        "Database.untag_alert": {
            "name": "untag_alert",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "float",
                    "bool"
                ],
                "tags": [
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "Database.update_tags": {
            "name": "update_tags",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "float"
                ],
                "tags": [
                    "str",
                    "float"
                ]
            }
        },
        "Database.update_attributes": {
            "name": "update_attributes",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "bool",
                    "int"
                ],
                "old_attrs": [
                    "bool",
                    "int"
                ],
                "new_attrs": [
                    "bool",
                    "int"
                ]
            }
        },
        "Database.add_history": {
            "name": "add_history",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "bool",
                    "Optional[float]",
                    "float",
                    "Union[int, str]",
                    "Optional[Union[float, int]]",
                    "Optional[int]"
                ],
                "history": [
                    "str",
                    "bool",
                    "Optional[float]",
                    "float",
                    "Union[int, str]",
                    "Optional[Union[float, int]]",
                    "Optional[int]"
                ]
            }
        },
        "Database.delete_alert": {
            "name": "delete_alert",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "Set[str]"
                ]
            }
        },
        "Database.tag_alerts": {
            "name": "tag_alerts",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "List[Dict[str, Any]]",
                    "list"
                ],
                "tags": [
                    "bool",
                    "str",
                    "Iterable[str]",
                    "List[Dict[str, Any]]",
                    "list"
                ]
            }
        },
        "Database.untag_alerts": {
            "name": "untag_alerts",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query": [
                    "dict",
                    "tuple",
                    "List[str]"
                ],
                "tags": [
                    "dict",
                    "tuple",
                    "List[str]"
                ]
            }
        },
        "Database.update_attributes_by_query": {
            "name": "update_attributes_by_query",
            "location": 157,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[int]",
                    "Dict[str, bool]",
                    "bool"
                ],
                "attributes": [
                    "str",
                    "Optional[int]",
                    "Dict[str, bool]",
                    "bool"
                ]
            }
        },
        "Database.delete_alerts": {
            "name": "delete_alerts",
            "location": 160,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "Database.get_alerts": {
            "name": "get_alerts",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query": [
                    "bool",
                    "List[Sequence[int]]",
                    "Sequence",
                    "Optional[bool]",
                    "Set[str]"
                ],
                "raw_data": [
                    "bool",
                    "List[Sequence[int]]",
                    "Sequence",
                    "Optional[bool]",
                    "Set[str]"
                ],
                "history": [
                    "bool",
                    "List[Sequence[int]]",
                    "Sequence",
                    "Optional[bool]",
                    "Set[str]"
                ],
                "page": [
                    "bool",
                    "List[Sequence[int]]",
                    "Sequence",
                    "Optional[bool]",
                    "Set[str]"
                ],
                "page_size": [
                    "bool",
                    "List[Sequence[int]]",
                    "Sequence",
                    "Optional[bool]",
                    "Set[str]"
                ]
            }
        },
        "Database.get_alert_history": {
            "name": "get_alert_history",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "bool",
                    "int"
                ],
                "page": [
                    "bool",
                    "int"
                ],
                "page_size": [
                    "bool",
                    "int"
                ]
            }
        },
        "Database.get_history": {
            "name": "get_history",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query": [
                    "bool",
                    "str",
                    "Callable[[int], None]",
                    "List[str]",
                    "Optional[int]",
                    "int"
                ],
                "page": [
                    "bool",
                    "str",
                    "Callable[[int], None]",
                    "List[str]",
                    "Optional[int]",
                    "int"
                ],
                "page_size": [
                    "bool",
                    "str",
                    "Callable[[int], None]",
                    "List[str]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "Database.get_count": {
            "name": "get_count",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[int]",
                    "Optional[dict]"
                ]
            }
        },
        "Database.get_counts": {
            "name": "get_counts",
            "location": 179,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[int]",
                    "Optional[dict]"
                ],
                "group": [
                    "str",
                    "Optional[int]",
                    "Optional[dict]"
                ]
            }
        },
        "Database.get_counts_by_severity": {
            "name": "get_counts_by_severity",
            "location": 182,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[int]",
                    "Optional[dict]"
                ]
            }
        },
        "Database.get_counts_by_status": {
            "name": "get_counts_by_status",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query": [
                    "bool",
                    "dict"
                ]
            }
        },
        "Database.get_topn_count": {
            "name": "get_topn_count",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[int]",
                    "Optional[dict]"
                ],
                "group": [
                    "str",
                    "Optional[int]",
                    "Optional[dict]"
                ],
                "topn": [
                    "str",
                    "Optional[int]",
                    "Optional[dict]"
                ]
            }
        },
        "Database.get_topn_flapping": {
            "name": "get_topn_flapping",
            "location": 191,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[int]",
                    "Optional[dict]"
                ],
                "group": [
                    "str",
                    "Optional[int]",
                    "Optional[dict]"
                ],
                "topn": [
                    "str",
                    "Optional[int]",
                    "Optional[dict]"
                ]
            }
        },
        "Database.get_topn_standing": {
            "name": "get_topn_standing",
            "location": 194,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[int]",
                    "Optional[dict]"
                ],
                "group": [
                    "str",
                    "Optional[int]",
                    "Optional[dict]"
                ],
                "topn": [
                    "str",
                    "Optional[int]",
                    "Optional[dict]"
                ]
            }
        },
        "Database.get_environments": {
            "name": "get_environments",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[int]",
                    "Optional[dict]"
                ],
                "topn": [
                    "str",
                    "Optional[int]",
                    "Optional[dict]"
                ]
            }
        },
        "Database.get_services": {
            "name": "get_services",
            "location": 204,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[int]",
                    "Optional[dict]"
                ],
                "topn": [
                    "str",
                    "Optional[int]",
                    "Optional[dict]"
                ]
            }
        },
        "Database.get_alert_groups": {
            "name": "get_alert_groups",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[int]",
                    "Optional[dict]"
                ],
                "topn": [
                    "str",
                    "Optional[int]",
                    "Optional[dict]"
                ]
            }
        },
        "Database.get_alert_tags": {
            "name": "get_alert_tags",
            "location": 214,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Iterable"
                ],
                "topn": [
                    "str",
                    "Iterable"
                ]
            }
        },
        "Database.create_blackout": {
            "name": "create_blackout",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "blackout": [
                    "str",
                    "Iterator[str]",
                    "bool",
                    "float"
                ]
            }
        },
        "Database.get_blackout": {
            "name": "get_blackout",
            "location": 222,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str"
                ],
                "customers": [
                    "int",
                    "str"
                ]
            }
        },
        "Database.get_blackouts": {
            "name": "get_blackouts",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query": [
                    "bool",
                    "str",
                    "Callable[[int], None]",
                    "List[str]",
                    "Optional[int]",
                    "int"
                ],
                "page": [
                    "bool",
                    "str",
                    "Callable[[int], None]",
                    "List[str]",
                    "Optional[int]",
                    "int"
                ],
                "page_size": [
                    "bool",
                    "str",
                    "Callable[[int], None]",
                    "List[str]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "Database.get_blackouts_count": {
            "name": "get_blackouts_count",
            "location": 228,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[int]",
                    "Optional[dict]"
                ]
            }
        },
        "Database.is_blackout_period": {
            "name": "is_blackout_period",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "int"
                ]
            }
        },
        "Database.update_blackout": {
            "name": "update_blackout",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "Database.delete_blackout": {
            "name": "delete_blackout",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "Set[str]"
                ]
            }
        },
        "Database.upsert_heartbeat": {
            "name": "upsert_heartbeat",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "heartbeat": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Database.get_heartbeat": {
            "name": "get_heartbeat",
            "location": 245,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str"
                ],
                "customers": [
                    "int",
                    "str"
                ]
            }
        },
        "Database.get_heartbeats": {
            "name": "get_heartbeats",
            "location": 248,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query": [
                    "bool",
                    "str",
                    "Callable[[int], None]",
                    "List[str]",
                    "Optional[int]",
                    "int"
                ],
                "page": [
                    "bool",
                    "str",
                    "Callable[[int], None]",
                    "List[str]",
                    "Optional[int]",
                    "int"
                ],
                "page_size": [
                    "bool",
                    "str",
                    "Callable[[int], None]",
                    "List[str]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "Database.get_heartbeats_by_status": {
            "name": "get_heartbeats_by_status",
            "location": 251,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "status": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "Callable",
                    "Optional[str]",
                    "BinaryIO",
                    "Optional[int]"
                ],
                "query": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "Callable",
                    "Optional[str]",
                    "BinaryIO",
                    "Optional[int]"
                ],
                "page": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "Callable",
                    "Optional[str]",
                    "BinaryIO",
                    "Optional[int]"
                ],
                "page_size": [
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "Callable",
                    "Optional[str]",
                    "BinaryIO",
                    "Optional[int]"
                ]
            }
        },
        "Database.get_heartbeats_count": {
            "name": "get_heartbeats_count",
            "location": 254,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[int]",
                    "Optional[dict]"
                ]
            }
        },
        "Database.delete_heartbeat": {
            "name": "delete_heartbeat",
            "location": 257,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "Set[str]"
                ]
            }
        },
        "Database.create_key": {
            "name": "create_key",
            "location": 262,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "int",
                    "KT",
                    "list"
                ]
            }
        },
        "Database.get_key": {
            "name": "get_key",
            "location": 265,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "bool",
                    "Optional[int]",
                    "List[dict]"
                ],
                "user": [
                    "str",
                    "int",
                    "bool",
                    "Optional[int]",
                    "List[dict]"
                ]
            }
        },
        "Database.get_keys": {
            "name": "get_keys",
            "location": 268,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query": [
                    "int",
                    "List[str]",
                    "bool"
                ],
                "page": [
                    "int",
                    "List[str]",
                    "bool"
                ],
                "page_size": [
                    "int",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "Database.get_keys_by_user": {
            "name": "get_keys_by_user",
            "location": 271,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "bool",
                    "str",
                    "List[str]"
                ]
            }
        },
        "Database.get_keys_count": {
            "name": "get_keys_count",
            "location": 274,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query": [
                    "int",
                    "bool"
                ]
            }
        },
        "Database.update_key": {
            "name": "update_key",
            "location": 277,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "bytes",
                    "str",
                    "int",
                    "KT",
                    "list"
                ]
            }
        },
        "Database.update_key_last_used": {
            "name": "update_key_last_used",
            "location": 280,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Database.delete_key": {
            "name": "delete_key",
            "location": 283,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "KT",
                    "bytes",
                    "list"
                ]
            }
        },
        "Database.create_user": {
            "name": "create_user",
            "location": 288,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "Iterable[int]",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "Database.get_user": {
            "name": "get_user",
            "location": 291,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "Database.get_users": {
            "name": "get_users",
            "location": 294,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "bool",
                    "float",
                    "List[str]",
                    "Callable[[], str]",
                    "int",
                    "Optional[str]"
                ],
                "page": [
                    "str",
                    "bool",
                    "float",
                    "List[str]",
                    "Callable[[], str]",
                    "int",
                    "Optional[str]"
                ],
                "page_size": [
                    "str",
                    "bool",
                    "float",
                    "List[str]",
                    "Callable[[], str]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Database.get_users_count": {
            "name": "get_users_count",
            "location": 297,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[int]",
                    "Optional[dict]",
                    "Union[str, bytes]",
                    "bool"
                ]
            }
        },
        "Database.get_user_by_username": {
            "name": "get_user_by_username",
            "location": 300,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "bool"
                ]
            }
        },
        "Database.get_user_by_email": {
            "name": "get_user_by_email",
            "location": 303,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "int",
                    "Mapping[str, Any]"
                ]
            }
        },
        "Database.get_user_by_hash": {
            "name": "get_user_by_hash",
            "location": 306,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "hash": [
                    "Dict[str, Any]"
                ]
            }
        },
        "Database.update_last_login": {
            "name": "update_last_login",
            "location": 309,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "Database.update_user": {
            "name": "update_user",
            "location": 312,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "Database.update_user_attributes": {
            "name": "update_user_attributes",
            "location": 315,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "bool"
                ],
                "old_attrs": [
                    "int",
                    "bool"
                ],
                "new_attrs": [
                    "int",
                    "bool"
                ]
            }
        },
        "Database.delete_user": {
            "name": "delete_user",
            "location": 318,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Set[str]",
                    "int"
                ]
            }
        },
        "Database.set_email_hash": {
            "name": "set_email_hash",
            "location": 321,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "dict",
                    "tuple"
                ],
                "hash": [
                    "str",
                    "dict",
                    "tuple"
                ]
            }
        },
        "Database.create_group": {
            "name": "create_group",
            "location": 326,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "group": [
                    "str",
                    "Iterator[str]",
                    "bool",
                    "float"
                ]
            }
        },
        "Database.get_group": {
            "name": "get_group",
            "location": 329,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str"
                ]
            }
        },
        "Database.get_group_users": {
            "name": "get_group_users",
            "location": 332,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "Database.get_groups": {
            "name": "get_groups",
            "location": 335,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query": [
                    "bool",
                    "str",
                    "Callable[[int], None]",
                    "List[str]",
                    "Optional[int]",
                    "int"
                ],
                "page": [
                    "bool",
                    "str",
                    "Callable[[int], None]",
                    "List[str]",
                    "Optional[int]",
                    "int"
                ],
                "page_size": [
                    "bool",
                    "str",
                    "Callable[[int], None]",
                    "List[str]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "Database.get_groups_count": {
            "name": "get_groups_count",
            "location": 338,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[int]",
                    "Optional[dict]"
                ]
            }
        },
        "Database.update_group": {
            "name": "update_group",
            "location": 341,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "Database.add_user_to_group": {
            "name": "add_user_to_group",
            "location": 344,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "group": [
                    "str",
                    "Iterable[str]"
                ],
                "user": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "Database.remove_user_from_group": {
            "name": "remove_user_from_group",
            "location": 347,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "group": [
                    "list"
                ],
                "user": [
                    "list"
                ]
            }
        },
        "Database.delete_group": {
            "name": "delete_group",
            "location": 350,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "Set[str]"
                ]
            }
        },
        "Database.get_groups_by_user": {
            "name": "get_groups_by_user",
            "location": 353,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "bool"
                ]
            }
        },
        "Database.create_perm": {
            "name": "create_perm",
            "location": 358,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "perm": [
                    "str",
                    "Iterator[str]",
                    "bool",
                    "float"
                ]
            }
        },
        "Database.get_perm": {
            "name": "get_perm",
            "location": 361,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str"
                ]
            }
        },
        "Database.get_perms": {
            "name": "get_perms",
            "location": 364,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query": [
                    "bool",
                    "str",
                    "Callable[[int], None]",
                    "List[str]",
                    "Optional[int]",
                    "int"
                ],
                "page": [
                    "bool",
                    "str",
                    "Callable[[int], None]",
                    "List[str]",
                    "Optional[int]",
                    "int"
                ],
                "page_size": [
                    "bool",
                    "str",
                    "Callable[[int], None]",
                    "List[str]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "Database.get_perms_count": {
            "name": "get_perms_count",
            "location": 367,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[int]",
                    "Optional[dict]"
                ]
            }
        },
        "Database.update_perm": {
            "name": "update_perm",
            "location": 370,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "Database.delete_perm": {
            "name": "delete_perm",
            "location": 373,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "Set[str]"
                ]
            }
        },
        "Database.get_scopes_by_match": {
            "name": "get_scopes_by_match",
            "location": 376,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "login": [
                    "bool",
                    "List[str]",
                    "str",
                    "List[dict]",
                    "Iterable"
                ],
                "matches": [
                    "bool",
                    "List[str]",
                    "str",
                    "List[dict]",
                    "Iterable"
                ]
            }
        },
        "Database.create_customer": {
            "name": "create_customer",
            "location": 381,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "customer": [
                    "str",
                    "Iterator[str]",
                    "bool",
                    "float"
                ]
            }
        },
        "Database.get_customer": {
            "name": "get_customer",
            "location": 384,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str"
                ]
            }
        },
        "Database.get_customers": {
            "name": "get_customers",
            "location": 387,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query": [
                    "bool",
                    "str",
                    "Callable[[int], None]",
                    "List[str]",
                    "Optional[int]",
                    "int"
                ],
                "page": [
                    "bool",
                    "str",
                    "Callable[[int], None]",
                    "List[str]",
                    "Optional[int]",
                    "int"
                ],
                "page_size": [
                    "bool",
                    "str",
                    "Callable[[int], None]",
                    "List[str]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "Database.get_customers_count": {
            "name": "get_customers_count",
            "location": 390,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Optional[int]",
                    "Optional[dict]"
                ]
            }
        },
        "Database.update_customer": {
            "name": "update_customer",
            "location": 393,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "Database.delete_customer": {
            "name": "delete_customer",
            "location": 396,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "Set[str]"
                ]
            }
        },
        "Database.get_customers_by_match": {
            "name": "get_customers_by_match",
            "location": 399,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "login": [
                    "bool",
                    "List[str]",
                    "str",
                    "List[dict]",
                    "Iterable"
                ],
                "matches": [
                    "bool",
                    "List[str]",
                    "str",
                    "List[dict]",
                    "Iterable"
                ]
            }
        },
        "Database.create_note": {
            "name": "create_note",
            "location": 404,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "note": [
                    "str",
                    "Iterator[str]",
                    "bool",
                    "float"
                ]
            }
        },
        "Database.get_note": {
            "name": "get_note",
            "location": 407,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str"
                ]
            }
        },
        "Database.get_notes": {
            "name": "get_notes",
            "location": 410,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "query": [
                    "bool",
                    "str",
                    "Callable[[int], None]",
                    "List[str]",
                    "Optional[int]",
                    "int"
                ],
                "page": [
                    "bool",
                    "str",
                    "Callable[[int], None]",
                    "List[str]",
                    "Optional[int]",
                    "int"
                ],
                "page_size": [
                    "bool",
                    "str",
                    "Callable[[int], None]",
                    "List[str]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "Database.get_alert_notes": {
            "name": "get_alert_notes",
            "location": 413,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "bool",
                    "Optional[List[str]]",
                    "int"
                ],
                "page": [
                    "bool",
                    "Optional[List[str]]",
                    "int"
                ],
                "page_size": [
                    "bool",
                    "Optional[List[str]]",
                    "int"
                ]
            }
        },
        "Database.get_customer_notes": {
            "name": "get_customer_notes",
            "location": 416,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "bool",
                    "Optional[List[str]]",
                    "int"
                ],
                "page": [
                    "bool",
                    "Optional[List[str]]",
                    "int"
                ],
                "page_size": [
                    "bool",
                    "Optional[List[str]]",
                    "int"
                ]
            }
        },
        "Database.update_note": {
            "name": "update_note",
            "location": 419,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "Database.delete_note": {
            "name": "delete_note",
            "location": 422,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "Set[str]"
                ]
            }
        },
        "Database.get_metrics": {
            "name": "get_metrics",
            "location": 427,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type": [
                    "str",
                    "Optional[Any]",
                    "Sequence[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "Database.set_gauge": {
            "name": "set_gauge",
            "location": 430,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "gauge": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Database.inc_counter": {
            "name": "inc_counter",
            "location": 433,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "counter": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Database.update_timer": {
            "name": "update_timer",
            "location": 436,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "timer": [
                    "int",
                    "str",
                    "Optional[bool]",
                    "bool"
                ]
            }
        },
        "Database.get_expired": {
            "name": "get_expired",
            "location": 441,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "expired_threshold": [
                    "str",
                    "int"
                ],
                "info_threshold": [
                    "str",
                    "int"
                ]
            }
        },
        "Database.get_unshelve": {
            "name": "get_unshelve",
            "location": 444,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.get_unack": {
            "name": "get_unack",
            "location": 447,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryBuilder.__init__": {
            "name": "__init__",
            "location": 453,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask",
                    "Optional[str]",
                    "Optional[flask.Flask]"
                ]
            }
        },
        "QueryBuilder.init_app": {
            "name": "init_app",
            "location": 458,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "str"
                ]
            }
        },
        "QueryBuilder.Alerts.from_params": {
            "name": "from_params",
            "location": 474,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ],
                "customers": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ],
                "query_time": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ]
            }
        },
        "QueryBuilder.Blackouts.from_params": {
            "name": "from_params",
            "location": 480,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ],
                "customers": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ],
                "query_time": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ]
            }
        },
        "QueryBuilder.Heartbeats.from_params": {
            "name": "from_params",
            "location": 486,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ],
                "customers": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ],
                "query_time": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ]
            }
        },
        "QueryBuilder.ApiKeys.from_params": {
            "name": "from_params",
            "location": 492,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ],
                "customers": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ],
                "query_time": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ]
            }
        },
        "QueryBuilder.Users.from_params": {
            "name": "from_params",
            "location": 498,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ],
                "customers": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ],
                "query_time": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ]
            }
        },
        "QueryBuilder.Groups.from_params": {
            "name": "from_params",
            "location": 504,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ],
                "customers": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ],
                "query_time": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ]
            }
        },
        "QueryBuilder.Permissions.from_params": {
            "name": "from_params",
            "location": 510,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ],
                "customers": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ],
                "query_time": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ]
            }
        },
        "QueryBuilder.Customers.from_params": {
            "name": "from_params",
            "location": 516,
            "return": [
                ""
            ],
            "arguments": {
                "params": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ],
                "customers": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ],
                "query_time": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ]
            }
        }
    },
    "alerta-master/alerta/database/__init__.py": {},
    "alerta-master/alerta/database/backends/__init__.py": {},
    "alerta-master/alerta/database/backends/mongodb/base.py": {
        "Backend.create_engine": {
            "name": "create_engine",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "str",
                    "Optional[bool]"
                ],
                "uri": [
                    "bool",
                    "str"
                ],
                "dbname": [
                    "bool",
                    "str"
                ],
                "raise_on_error": [
                    "bool",
                    "str"
                ]
            }
        },
        "Backend.connect": {
            "name": "connect",
            "location": 42,
            "return": [
                "bool",
                "metrics_backend.utils.Address",
                "abilian.app.Application"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backend._create_indexes": {
            "name": "_create_indexes",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "db": [
                    "str",
                    "app.db_models.user.User",
                    "tnadmin.models.GvOrganisation",
                    "myaku.datastore.database.ArticleIndexDb"
                ]
            }
        },
        "Backend._update_lookups": {
            "name": "_update_lookups",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "db": [
                    "Mapping",
                    "Optional[str]",
                    "Mapping[str, List[Any]]",
                    "deeplearning.ml4pl.models.log_database.Database.SessionType"
                ]
            }
        },
        "Backend.name": {
            "name": "name",
            "location": 85,
            "return": [
                "str",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backend.version": {
            "name": "version",
            "location": 89,
            "return": [
                "zerver.models.UserProfile",
                "str",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.ServiceName",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backend.is_alive": {
            "name": "is_alive",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backend.close": {
            "name": "close",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "db": [
                    "pymongo.database.Database",
                    "Database",
                    "bool"
                ]
            }
        },
        "Backend.destroy": {
            "name": "destroy",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Backend.get_severity": {
            "name": "get_severity",
            "location": 109,
            "return": [
                "str",
                "Optional[str]",
                "models.Project",
                "List[zerver.models.UserProfile]",
                "List[str]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str"
                ]
            }
        },
        "Backend.get_status": {
            "name": "get_status",
            "location": 130,
            "return": [
                "bool",
                "List[str]",
                "zerver.models.UserProfile",
                "zerver.models.Attachment",
                "str",
                "models.User",
                "Optional[bytes]"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "cmk.utils.type_defs.UserId",
                    "list"
                ]
            }
        },
        "Backend.is_duplicate": {
            "name": "is_duplicate",
            "location": 150,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "Dict[str, Any]",
                    "core.models.User"
                ]
            }
        },
        "Backend.is_correlated": {
            "name": "is_correlated",
            "location": 160,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "int",
                    "Optional[float]"
                ]
            }
        },
        "Backend.is_flapping": {
            "name": "is_flapping",
            "location": 177,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "dict",
                    "List[str]",
                    "Dict[str, Any]",
                    "raiden.utils.Address",
                    "Optional[str]",
                    "zerver.models.Message"
                ],
                "window": [
                    "str",
                    "dict",
                    "List[str]",
                    "Dict[str, Any]",
                    "raiden.utils.Address",
                    "Optional[str]",
                    "zerver.models.Message"
                ],
                "count": [
                    "int",
                    "str"
                ]
            }
        },
        "Backend.dedup_alert": {
            "name": "dedup_alert",
            "location": 201,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "Mapping[str, Any]"
                ],
                "history": [
                    "int",
                    "float",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Backend.correlate_alert": {
            "name": "correlate_alert",
            "location": 253,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "history": [
                    "zerver.models.Realm",
                    "dict"
                ]
            }
        },
        "Backend.create_alert": {
            "name": "create_alert",
            "location": 315,
            "return": [
                "dict",
                "Callable",
                "OrderedDict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "cmk.utils.type_defs.HostName",
                    "Dict[str, models.DeviceRow]",
                    "dict"
                ]
            }
        },
        "Backend.set_alert": {
            "name": "set_alert",
            "location": 349,
            "return": [
                "Optional[bool]",
                "str",
                "Optional[str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "List[int]",
                    "tildes.models.group.Group",
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "List[Tuple[str, Any]]",
                    "str",
                    "list",
                    "Optional[int]"
                ],
                "severity": [
                    "Sequence[int]",
                    "bytes",
                    "List[dict]",
                    "str",
                    "Optional[datetime.datetime]",
                    "bool"
                ],
                "status": [
                    "Sequence[int]",
                    "bytes",
                    "List[dict]",
                    "str",
                    "Optional[datetime.datetime]",
                    "bool"
                ],
                "tags": [
                    "Sequence[int]",
                    "bytes",
                    "List[dict]",
                    "str",
                    "Optional[datetime.datetime]",
                    "bool"
                ],
                "attributes": [
                    "Sequence[int]",
                    "bytes",
                    "List[dict]",
                    "str",
                    "Optional[datetime.datetime]",
                    "bool"
                ],
                "timeout": [
                    "Sequence[int]",
                    "bytes",
                    "List[dict]",
                    "str",
                    "Optional[datetime.datetime]",
                    "bool"
                ],
                "previous_severity": [
                    "Sequence[int]",
                    "bytes",
                    "List[dict]",
                    "str",
                    "Optional[datetime.datetime]",
                    "bool"
                ],
                "update_time": [
                    "Sequence[int]",
                    "bytes",
                    "List[dict]",
                    "str",
                    "Optional[datetime.datetime]",
                    "bool"
                ],
                "history": [
                    "Sequence[int]",
                    "bytes",
                    "List[dict]",
                    "str",
                    "Optional[datetime.datetime]",
                    "bool"
                ]
            }
        },
        "Backend.get_alert": {
            "name": "get_alert",
            "location": 377,
            "return": [
                "str",
                "Optional[List[str]]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ],
                "customers": [
                    "str",
                    "int",
                    "Set[str]"
                ]
            }
        },
        "Backend.set_status": {
            "name": "set_status",
            "location": 390,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "raiden.utils.Address"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "List[int]",
                    "str",
                    "int",
                    "List[\"DeliveryItem\"]",
                    "Optional[str]",
                    "list"
                ],
                "status": [
                    "str",
                    "int",
                    "Union[str, int]",
                    "bool"
                ],
                "timeout": [
                    "str",
                    "int",
                    "Union[str, int]",
                    "bool"
                ],
                "update_time": [
                    "str",
                    "int",
                    "Union[str, int]",
                    "bool"
                ],
                "history": [
                    "str",
                    "int",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "Backend.tag_alert": {
            "name": "tag_alert",
            "location": 412,
            "return": [
                "dict",
                "bytes",
                "golem_messages.message.base.Message",
                "core.models.User",
                "tartare.core.models.Job",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "tags": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "Backend.untag_alert": {
            "name": "untag_alert",
            "location": 420,
            "return": [
                "int",
                "Dict[str, str]",
                "List[str]",
                "bool",
                "dict",
                "Dict[str, Any]",
                "Union[str, List[str]]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str"
                ],
                "tags": [
                    "str"
                ]
            }
        },
        "Backend.update_tags": {
            "name": "update_tags",
            "location": 427,
            "return": [
                "Dict[str, Any]",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "bool"
                ],
                "tags": [
                    "str",
                    "bool"
                ]
            }
        },
        "Backend.update_attributes": {
            "name": "update_attributes",
            "location": 431,
            "return": [
                "str",
                "app.models.GameMember",
                "app.models.course.Course",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "Callable[[], str]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "bytes",
                    "Dict[str, Any]",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ],
                "old_attrs": [
                    "bool",
                    "utils.types.Id",
                    "List[app.schemas.farm.Farm]",
                    "app.db.session.Session",
                    "app.db_models.user.User",
                    "int"
                ],
                "new_attrs": [
                    "bool",
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "int",
                    "str"
                ]
            }
        },
        "Backend.delete_alert": {
            "name": "delete_alert",
            "location": 448,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "Backend.tag_alerts": {
            "name": "tag_alerts",
            "location": 454,
            "return": [
                "int",
                "dict",
                "type",
                "bool"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Optional[str]",
                    "int"
                ],
                "tags": [
                    "str",
                    "dict",
                    "grouper.models.permission.Permission",
                    "Optional[docker.models.containers.Container]"
                ]
            }
        },
        "Backend.untag_alerts": {
            "name": "untag_alerts",
            "location": 460,
            "return": [
                "bool",
                "Optional[str]",
                "BaseException"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "List[dict]",
                    "piccolo.query.base.Query",
                    "str"
                ],
                "tags": [
                    "pymongo.collection.Collection",
                    "faustypes.app.AppT",
                    "asgard.clients.chronos.models.job.ChronosContainerVolumeSpec",
                    "Optional[\"TaskNode\"]"
                ]
            }
        },
        "Backend.update_attributes_by_query": {
            "name": "update_attributes_by_query",
            "location": 466,
            "return": [
                "models.characters.mods_base.SlotTypes",
                "models.characters.chassis.Chassis",
                "bool",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "dict",
                    "str",
                    "Union['HTMLSession', 'AsyncHTMLSession']"
                ],
                "attributes": [
                    "dict",
                    "Dict[str, Any]",
                    "Callable",
                    "Dict[str, float]",
                    "Dict[str, str]"
                ]
            }
        },
        "Backend.delete_alerts": {
            "name": "delete_alerts",
            "location": 480,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "ulauncher.search.Query.Query",
                    "piccolo.query.base.Query",
                    "str",
                    "core_lib.core.models.Venue",
                    "models.Pkg",
                    "int"
                ]
            }
        },
        "Backend.add_history": {
            "name": "add_history",
            "location": 488,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "List[int]"
                ],
                "history": [
                    "str",
                    "Optional[bool]",
                    "int"
                ]
            }
        },
        "Backend.get_alerts": {
            "name": "get_alerts",
            "location": 506,
            "return": [
                "bool",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Optional[Set[int]]",
                    "Dict[str, str]",
                    "bool"
                ],
                "raw_data": [
                    "bool",
                    "List[Sequence[int]]",
                    "Sequence",
                    "Optional[bool]",
                    "Set[str]"
                ],
                "history": [
                    "bool",
                    "List[Sequence[int]]",
                    "Sequence",
                    "Optional[bool]",
                    "Set[str]"
                ],
                "page": [
                    "int"
                ],
                "page_size": [
                    "int"
                ]
            }
        },
        "Backend.get_alert_history": {
            "name": "get_alert_history",
            "location": 538,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "bool",
                    "int"
                ],
                "page": [
                    "int"
                ],
                "page_size": [
                    "int"
                ]
            }
        },
        "Backend.get_history": {
            "name": "get_history",
            "location": 603,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Union[str, None]",
                    "Optional[Set[int]]",
                    "int",
                    "Union[server.models.Bike, int]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "Optional[List[Any]]",
                    "Sequence[str]"
                ],
                "page": [
                    "int",
                    "Tuple[int, int]",
                    "List[str]",
                    "stiff.models.Tagging",
                    "bool"
                ],
                "page_size": [
                    "int",
                    "Tuple[int, int]",
                    "List[str]",
                    "stiff.models.Tagging",
                    "bool"
                ]
            }
        },
        "Backend.get_count": {
            "name": "get_count",
            "location": 660,
            "return": [
                "bool",
                "app.models.GameMember",
                "app.models.course.Course",
                "zerver.models.UserProfile",
                "cmk.utils.type_defs.UserId",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Union[int, slice]",
                    "str",
                    "alerta.database.base.Query",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "Backend.get_counts": {
            "name": "get_counts",
            "location": 667,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Union[int, slice]",
                    "Query",
                    "alerta.database.base.Query",
                    "str",
                    "int",
                    "supersemodels.sql_lab.Query"
                ],
                "group": [
                    "Optional[str]",
                    "str",
                    "Type[T]",
                    "int"
                ]
            }
        },
        "Backend.get_counts_by_severity": {
            "name": "get_counts_by_severity",
            "location": 683,
            "return": [
                "str",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "authentication.session.models.current_user.CurrentUser",
                    "Query",
                    "Dict[str, str]",
                    "models.Tag",
                    "bytes"
                ]
            }
        },
        "Backend.get_counts_by_status": {
            "name": "get_counts_by_status",
            "location": 687,
            "return": [
                "zerver.models.UserProfile",
                "bool",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "authentication.session.models.current_user.CurrentUser",
                    "models.Tag",
                    "bytes"
                ]
            }
        },
        "Backend.get_topn_count": {
            "name": "get_topn_count",
            "location": 691,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Union[int, slice]",
                    "Query",
                    "alerta.database.base.Query",
                    "str",
                    "int",
                    "supersemodels.sql_lab.Query"
                ],
                "group": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ],
                "topn": [
                    "str",
                    "List[str]",
                    "Query",
                    "Optional[int]"
                ]
            }
        },
        "Backend.get_topn_flapping": {
            "name": "get_topn_flapping",
            "location": 726,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Union[int, slice]",
                    "Query",
                    "alerta.database.base.Query",
                    "str",
                    "int",
                    "supersemodels.sql_lab.Query"
                ],
                "group": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ],
                "topn": [
                    "str",
                    "List[str]",
                    "Query",
                    "Optional[int]"
                ]
            }
        },
        "Backend.get_topn_standing": {
            "name": "get_topn_standing",
            "location": 763,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Union[int, slice]",
                    "Query",
                    "alerta.database.base.Query",
                    "str",
                    "int",
                    "supersemodels.sql_lab.Query"
                ],
                "group": [
                    "str",
                    "Dict[str, Any]",
                    "dict"
                ],
                "topn": [
                    "str",
                    "List[str]",
                    "Query",
                    "Optional[int]"
                ]
            }
        },
        "Backend.get_environments": {
            "name": "get_environments",
            "location": 800,
            "return": [
                "int",
                "cmk.base.core_config.MonitoringCore"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "ulauncher.search.Query.Query",
                    "Optional[int]",
                    "triplestore.query.Query",
                    "Optional[dict]"
                ],
                "topn": [
                    "str",
                    "ulauncher.search.Query.Query",
                    "Optional[int]",
                    "triplestore.query.Query",
                    "Optional[dict]"
                ]
            }
        },
        "Backend.get_services": {
            "name": "get_services",
            "location": 837,
            "return": [
                "int",
                "zerver.models.Realm",
                "article.transfer.models.ArticleNumber",
                "salon.models.Stylist",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "ulauncher.search.Query.Query",
                    "Optional[int]",
                    "triplestore.query.Query",
                    "Optional[dict]"
                ],
                "topn": [
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "Backend.get_alert_groups": {
            "name": "get_alert_groups",
            "location": 881,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Union[int, slice]",
                    "alerta.database.base.Query",
                    "Union[int, str]"
                ],
                "topn": [
                    "str",
                    "List[str]",
                    "query.Query[T]",
                    "bool"
                ]
            }
        },
        "Backend.get_alert_tags": {
            "name": "get_alert_tags",
            "location": 904,
            "return": [
                "str",
                "List[cmk.gui.plugins.views.utils.JoinCell]",
                "List[cmk.gui.plugins.views.utils.Cell]",
                "Tuple[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Union[int, slice]",
                    "ulauncher.search.Query.Query"
                ],
                "topn": [
                    "str",
                    "List[str]",
                    "Query"
                ]
            }
        },
        "Backend.create_blackout": {
            "name": "create_blackout",
            "location": 928,
            "return": [
                "dict",
                "Callable",
                "OrderedDict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "blackout": [
                    "int",
                    "datetime.datetime",
                    "Optional[str]",
                    "str",
                    "cmk.utils.type_defs.Ruleset",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "Backend.get_blackout": {
            "name": "get_blackout",
            "location": 958,
            "return": [
                "str",
                "Optional[List[str]]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "List[int]"
                ],
                "customers": [
                    "str",
                    "int",
                    "Set[str]"
                ]
            }
        },
        "Backend.get_blackouts": {
            "name": "get_blackouts",
            "location": 966,
            "return": [
                "str",
                "Optional[str]",
                "Optional[Any]",
                "Callable[[], T]",
                "app.GrpyApp",
                "Type[recidiviz.persistence.database.database_entity.DatabaseEntity]",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "bool"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "transfer.models.TopicID",
                    "authentication.session.models.current_user.CurrentUser",
                    "str",
                    "transfer.models.TicketID",
                    "myaku.datastore.Query"
                ],
                "page": [
                    "T",
                    "Set[T]",
                    "Tuple[float, float]",
                    "bool"
                ],
                "page_size": [
                    "T",
                    "Set[T]",
                    "Tuple[float, float]",
                    "bool"
                ]
            }
        },
        "Backend.get_blackouts_count": {
            "name": "get_blackouts_count",
            "location": 970,
            "return": [
                "bool",
                "app.models.GameMember",
                "app.models.course.Course",
                "zerver.models.UserProfile",
                "cmk.utils.type_defs.UserId",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Union[int, slice]",
                    "str",
                    "alerta.database.base.Query",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "Backend.is_blackout_period": {
            "name": "is_blackout_period",
            "location": 974,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "Optional[str]",
                    "bool",
                    "tuple",
                    "dict"
                ]
            }
        },
        "Backend.update_blackout": {
            "name": "update_blackout",
            "location": 1053,
            "return": [
                "str",
                "app.models.GameMember",
                "app.models.course.Course",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "Callable[[], str]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "Union[int, float]",
                    "str",
                    "dict",
                    "faustypes.models.ModelT",
                    "float"
                ]
            }
        },
        "Backend.delete_blackout": {
            "name": "delete_blackout",
            "location": 1060,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "Backend.upsert_heartbeat": {
            "name": "upsert_heartbeat",
            "location": 1066,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "heartbeat": [
                    "List[app.models.Question]",
                    "app.models.Question",
                    "Optional[int]",
                    "Union[int, slice]"
                ]
            }
        },
        "Backend.get_heartbeat": {
            "name": "get_heartbeat",
            "location": 1091,
            "return": [
                "str",
                "Optional[List[str]]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ],
                "customers": [
                    "str",
                    "int",
                    "Set[str]"
                ]
            }
        },
        "Backend.get_heartbeats": {
            "name": "get_heartbeats",
            "location": 1102,
            "return": [
                "str",
                "Optional[str]",
                "Optional[Any]",
                "Callable[[], T]",
                "app.GrpyApp",
                "Type[recidiviz.persistence.database.database_entity.DatabaseEntity]",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "bool"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "transfer.models.TopicID",
                    "authentication.session.models.current_user.CurrentUser",
                    "str",
                    "transfer.models.TicketID",
                    "myaku.datastore.Query"
                ],
                "page": [
                    "T",
                    "Set[T]",
                    "Tuple[float, float]",
                    "bool"
                ],
                "page_size": [
                    "T",
                    "Set[T]",
                    "Tuple[float, float]",
                    "bool"
                ]
            }
        },
        "Backend.get_heartbeats_by_status": {
            "name": "get_heartbeats_by_status",
            "location": 1106,
            "return": [
                "bool",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "Dict[str, Any]",
                "Optional['Job']",
                "Dict[str, str]",
                "List[tracim.models.data.Content]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "int",
                    "bool",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]",
                    "str"
                ],
                "query": [
                    "int",
                    "List[int]",
                    "raiden.utils.Address",
                    "Optional[int]",
                    "float",
                    "bytes"
                ],
                "page": [
                    "bool",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "dict",
                    "Dict[str, datetime.datetime]"
                ],
                "page_size": [
                    "bool",
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "dict",
                    "Dict[str, datetime.datetime]"
                ]
            }
        },
        "Backend.get_heartbeats_count": {
            "name": "get_heartbeats_count",
            "location": 1135,
            "return": [
                "bool",
                "app.models.GameMember",
                "app.models.course.Course",
                "zerver.models.UserProfile",
                "cmk.utils.type_defs.UserId",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Union[int, slice]",
                    "str",
                    "alerta.database.base.Query",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "Backend.delete_heartbeat": {
            "name": "delete_heartbeat",
            "location": 1139,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "Backend.create_key": {
            "name": "create_key",
            "location": 1146,
            "return": [
                "str",
                "Dict[str, Any]",
                "Callable",
                "IO",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Optional[bytes]",
                    "Iterable[Hashable]"
                ]
            }
        },
        "Backend.get_key": {
            "name": "get_key",
            "location": 1164,
            "return": [
                "str",
                "dict",
                "bool",
                "tests.models.Customer"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT",
                    "Union[str, bytes]"
                ],
                "user": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Backend.get_keys": {
            "name": "get_keys",
            "location": 1171,
            "return": [
                "List[str]",
                "Optional[str]",
                "List[Dict[str, Any]]",
                "games.models.Game",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Optional[datetime.datetime]",
                    "Union[str, None]",
                    "transfer.models.TopicID",
                    "authentication.session.models.current_user.CurrentUser",
                    "app.models.User"
                ],
                "page": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[Sequence[Any]]"
                ],
                "page_size": [
                    "str",
                    "int",
                    "List[str]",
                    "Optional[Sequence[Any]]"
                ]
            }
        },
        "Backend.get_keys_by_user": {
            "name": "get_keys_by_user",
            "location": 1175,
            "return": [
                "Optional[\"permissions_doc\"]",
                "Union[utils.CWLObjectType, MutableSequence[utils.CWLObjectType], None]",
                "str",
                "Dict[str, Any]",
                "T",
                "dict",
                "games.models.Game"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "Sequence[user.models.user.User]",
                    "Dict[str, Any]",
                    "core.models.User",
                    "cmk.utils.type_defs.HostName",
                    "users.models.JustfixUser"
                ]
            }
        },
        "Backend.get_keys_count": {
            "name": "get_keys_count",
            "location": 1178,
            "return": [
                "str",
                "Dict[str, str]",
                "core.models.GroupingKey",
                "List[str]",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "app.models.RenewToken",
                    "bytes",
                    "grouper.models.base.session.Session",
                    "str"
                ]
            }
        },
        "Backend.update_key": {
            "name": "update_key",
            "location": 1182,
            "return": [
                "str",
                "tracim.models.data.Content",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT"
                ]
            }
        },
        "Backend.update_key_last_used": {
            "name": "update_key_last_used",
            "location": 1190,
            "return": [
                "dict",
                "Dict[str, Any]",
                "games.models.Game",
                "Dict[str, Union[str, int]]",
                "List[List[str]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "List[Optional[Any]]",
                    "Optional[List[str]]",
                    "Optional[Callable]"
                ]
            }
        },
        "Backend.delete_key": {
            "name": "delete_key",
            "location": 1200,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[str, Iterable[str]]",
                    "int",
                    "tuple"
                ]
            }
        },
        "Backend.create_user": {
            "name": "create_user",
            "location": 1207,
            "return": [
                "dict",
                "str",
                "Optional[float]",
                "int",
                "Union[shap.utils._legacy.Data, pandas.DataFrame, numpy.ndarray, scipy.sparse.spmatrix]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "bool",
                    "zerver.models.UserProfile",
                    "tildes.models.user.User",
                    "Optional[Dict[str, str]]",
                    "app.models.models.User"
                ]
            }
        },
        "Backend.get_user": {
            "name": "get_user",
            "location": 1227,
            "return": [
                "str",
                "zerver.models.UserProfile",
                "app.models.GameMember",
                "app.models.course.Course",
                "dict"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "Backend.get_users": {
            "name": "get_users",
            "location": 1232,
            "return": [
                "str",
                "Optional[Any]",
                "Dict[str, Any]",
                "zerver.models.UserProfile",
                "medtagger.database.models.Scan",
                "tracim.models.User"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "transfer.models.TopicID",
                    "authentication.session.models.current_user.CurrentUser",
                    "transfer.models.TicketID",
                    "myaku.datastore.Query",
                    "str"
                ],
                "page": [
                    "T",
                    "str",
                    "bool",
                    "dict"
                ],
                "page_size": [
                    "T",
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "Backend.get_users_count": {
            "name": "get_users_count",
            "location": 1236,
            "return": [
                "bool",
                "zerver.models.UserProfile",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Union[int, slice]",
                    "alerta.database.base.Query",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Backend.get_user_by_username": {
            "name": "get_user_by_username",
            "location": 1240,
            "return": [
                "str",
                "zerver.models.Realm",
                "zerver.models.UserProfile",
                "Dict[str, Any]",
                "[dict]",
                "bool",
                "models.UserAuth"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "Callable",
                    "List[List[int]]"
                ]
            }
        },
        "Backend.get_user_by_email": {
            "name": "get_user_by_email",
            "location": 1246,
            "return": [
                "str",
                "zerver.models.Realm",
                "zerver.models.UserProfile",
                "[dict]",
                "models.UserAuth"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "List[str]",
                    "Callable[..., T]",
                    "str",
                    "datetime.datetime",
                    "list",
                    "int"
                ]
            }
        },
        "Backend.get_user_by_hash": {
            "name": "get_user_by_hash",
            "location": 1252,
            "return": [
                "bool",
                "zerver.models.UserProfile",
                "app.models.GameMember",
                "app.models.course.Course",
                "str"
            ],
            "arguments": {
                "self": [],
                "hash": [
                    "str",
                    "sqlalchemy.orm.Query",
                    "List[Dict]"
                ]
            }
        },
        "Backend.update_last_login": {
            "name": "update_last_login",
            "location": 1256,
            "return": [
                "bool",
                "dict",
                "Set[int]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Dict[str, int]",
                    "datetime.datetime"
                ]
            }
        },
        "Backend.update_user": {
            "name": "update_user",
            "location": 1262,
            "return": [
                "app.models.GameMember",
                "app.models.course.Course",
                "zerver.models.UserProfile",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "abilian.core.models.subjects.User",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "bool",
                    "list",
                    "str",
                    "raiden.utils.PaymentID",
                    "cmk.gui.plugins.views.utils.ABCDataSource"
                ]
            }
        },
        "Backend.update_user_attributes": {
            "name": "update_user_attributes",
            "location": 1281,
            "return": [
                "int",
                "Dict[str, str]",
                "dict",
                "bool",
                "bytes",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "List[str]",
                    "datetime.datetime",
                    "List[dict]",
                    "lms.lmsdb.models.User",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "old_attrs": [
                    "str",
                    "bool",
                    "Union[str, Iterable[str]]",
                    "Optional[Sequence[str]]",
                    "Optional[int]"
                ],
                "new_attrs": [
                    "int",
                    "float"
                ]
            }
        },
        "Backend.delete_user": {
            "name": "delete_user",
            "location": 1294,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Iterable[str]"
                ]
            }
        },
        "Backend.set_email_hash": {
            "name": "set_email_hash",
            "location": 1298,
            "return": [
                "tuple",
                "Set[int]",
                "List[models.User]",
                "recidiviz.persistence.database.database_entity.DatabaseEntity",
                "List[str]",
                "Tuple[List[Any], int]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "zerver.models.UserProfile",
                    "zerver.models.Message",
                    "dict",
                    "models.User"
                ],
                "hash": [
                    "str",
                    "int",
                    "zerver.models.UserProfile",
                    "zerver.models.Message",
                    "dict",
                    "models.User"
                ]
            }
        },
        "Backend.create_group": {
            "name": "create_group",
            "location": 1306,
            "return": [
                "dict",
                "Callable",
                "OrderedDict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "dict",
                    "app.models.Journey",
                    "app.models.Stage",
                    "app.models.GameMember",
                    "app.models.Tweet",
                    "app.models.Position",
                    "sqlalchemy.orm.query.Query"
                ]
            }
        },
        "Backend.get_group": {
            "name": "get_group",
            "location": 1315,
            "return": [
                "str",
                "Optional[List[str]]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "Backend.get_groups": {
            "name": "get_groups",
            "location": 1319,
            "return": [
                "str",
                "Optional[str]",
                "Optional[Any]",
                "Callable[[], T]",
                "app.GrpyApp",
                "Type[recidiviz.persistence.database.database_entity.DatabaseEntity]",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "bool"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "int",
                    "Union[str, int]",
                    "bool",
                    "dict",
                    "str",
                    "Optional[List[str]]"
                ],
                "page": [
                    "Tuple[float, float]",
                    "str",
                    "int"
                ],
                "page_size": [
                    "Tuple[float, float]",
                    "str",
                    "int"
                ]
            }
        },
        "Backend.get_groups_count": {
            "name": "get_groups_count",
            "location": 1323,
            "return": [
                "bool",
                "app.models.GameMember",
                "app.models.course.Course",
                "zerver.models.UserProfile",
                "cmk.utils.type_defs.UserId",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Union[int, slice]",
                    "alerta.database.base.Query",
                    "str",
                    "dict"
                ]
            }
        },
        "Backend.get_group_users": {
            "name": "get_group_users",
            "location": 1327,
            "return": [
                "tracim.models.auth.User",
                "zam_repondeur.models.Lecture",
                "Iterable[str]",
                "zerver.models.UserProfile",
                "metaswitch_tinder.database.models.User",
                "set"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "Backend.update_group": {
            "name": "update_group",
            "location": 1354,
            "return": [
                "str",
                "app.models.GameMember",
                "app.models.course.Course",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "Callable[[], str]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "Optional[raiden.utils.BlockNumber]",
                    "bool",
                    "str"
                ]
            }
        },
        "Backend.add_user_to_group": {
            "name": "add_user_to_group",
            "location": 1361,
            "return": [
                "flask.testing.FlaskClient",
                "str",
                "Dict[str, str]",
                "flask.wrappers.Response",
                "int"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "str",
                    "zerver.models.UserProfile"
                ],
                "user": [
                    "str",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "Backend.remove_user_from_group": {
            "name": "remove_user_from_group",
            "location": 1366,
            "return": [
                "Dict[str, str]",
                "flask.testing.FlaskClient",
                "str",
                "Dict[str, Any]",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "str",
                    "zerver.models.UserProfile"
                ],
                "user": [
                    "str",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "Backend.delete_group": {
            "name": "delete_group",
            "location": 1370,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "Backend.get_groups_by_user": {
            "name": "get_groups_by_user",
            "location": 1374,
            "return": [
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "str",
                "app.models.GameMember",
                "app.models.course.Course",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "zerver.models.UserProfile",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "Backend.create_perm": {
            "name": "create_perm",
            "location": 1379,
            "return": [
                "dict",
                "Callable",
                "OrderedDict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "perm": [
                    "Callable",
                    "recidiviz.persistence.database.database_entity.DatabaseEntity",
                    "bool",
                    "Iterable[T]"
                ]
            }
        },
        "Backend.get_perm": {
            "name": "get_perm",
            "location": 1388,
            "return": [
                "str",
                "Optional[List[str]]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "Backend.get_perms": {
            "name": "get_perms",
            "location": 1392,
            "return": [
                "str",
                "Optional[str]",
                "Optional[Any]",
                "Callable[[], T]",
                "app.GrpyApp",
                "Type[recidiviz.persistence.database.database_entity.DatabaseEntity]",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "bool"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "transfer.models.TopicID",
                    "authentication.session.models.current_user.CurrentUser",
                    "str",
                    "transfer.models.TicketID",
                    "myaku.datastore.Query"
                ],
                "page": [
                    "T",
                    "Set[T]",
                    "Tuple[float, float]",
                    "bool"
                ],
                "page_size": [
                    "T",
                    "Set[T]",
                    "Tuple[float, float]",
                    "bool"
                ]
            }
        },
        "Backend.get_perms_count": {
            "name": "get_perms_count",
            "location": 1396,
            "return": [
                "bool",
                "app.models.GameMember",
                "app.models.course.Course",
                "zerver.models.UserProfile",
                "cmk.utils.type_defs.UserId",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Union[int, slice]",
                    "str",
                    "alerta.database.base.Query",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "Backend.update_perm": {
            "name": "update_perm",
            "location": 1400,
            "return": [
                "str",
                "app.models.GameMember",
                "app.models.course.Course",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "Callable[[], str]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "Union[int, float]",
                    "str",
                    "dict",
                    "faustypes.models.ModelT",
                    "float"
                ]
            }
        },
        "Backend.delete_perm": {
            "name": "delete_perm",
            "location": 1407,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "Backend.get_scopes_by_match": {
            "name": "get_scopes_by_match",
            "location": 1411,
            "return": [
                "str",
                "bytes",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "login": [
                    "dict",
                    "int",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "matches": [
                    "bool",
                    "List[str]",
                    "str",
                    "List[dict]",
                    "Iterable"
                ]
            }
        },
        "Backend.create_customer": {
            "name": "create_customer",
            "location": 1430,
            "return": [
                "dict",
                "Callable",
                "OrderedDict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "customer": [
                    "zerver.models.Realm",
                    "projects.models.Project",
                    "dict"
                ]
            }
        },
        "Backend.get_customer": {
            "name": "get_customer",
            "location": 1439,
            "return": [
                "str",
                "Optional[List[str]]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "Backend.get_customers": {
            "name": "get_customers",
            "location": 1443,
            "return": [
                "Optional[str]",
                "Optional[Any]",
                "str",
                "Callable[[], T]",
                "app.GrpyApp",
                "Type[recidiviz.persistence.database.database_entity.DatabaseEntity]",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "bool",
                "models.User"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "transfer.models.TopicID",
                    "authentication.session.models.current_user.CurrentUser",
                    "transfer.models.TicketID",
                    "int"
                ],
                "page": [
                    "bytes",
                    "int",
                    "Dict[str, Any]",
                    "str",
                    "Sequence[str]",
                    "Optional[str]"
                ],
                "page_size": [
                    "bytes",
                    "int",
                    "Dict[str, Any]",
                    "str",
                    "Sequence[str]",
                    "Optional[str]"
                ]
            }
        },
        "Backend.get_customers_count": {
            "name": "get_customers_count",
            "location": 1447,
            "return": [
                "bool",
                "app.models.GameMember",
                "app.models.course.Course",
                "zerver.models.UserProfile",
                "cmk.utils.type_defs.UserId",
                "List[dict]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Union[int, slice]",
                    "str",
                    "Optional[str]",
                    "alerta.database.base.Query",
                    "bool",
                    "dict"
                ]
            }
        },
        "Backend.update_customer": {
            "name": "update_customer",
            "location": 1451,
            "return": [
                "str",
                "app.models.GameMember",
                "app.models.course.Course",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "Callable[[], str]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "raiden.utils.PaymentNetworkID",
                    "raiden.utils.Address"
                ]
            }
        },
        "Backend.delete_customer": {
            "name": "delete_customer",
            "location": 1458,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "transfer.models.Catalog.ID"
                ]
            }
        },
        "Backend.get_customers_by_match": {
            "name": "get_customers_by_match",
            "location": 1462,
            "return": [
                "salon.models.Stylist",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "login": [
                    "str",
                    "List[str]"
                ],
                "matches": [
                    "str"
                ]
            }
        },
        "Backend.create_note": {
            "name": "create_note",
            "location": 1481,
            "return": [
                "dict",
                "Callable",
                "OrderedDict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "note": [
                    "type",
                    "models.Credentials",
                    "bool",
                    "Dict[str, cmk.gui.plugins.views.utils.Painter]"
                ]
            }
        },
        "Backend.get_note": {
            "name": "get_note",
            "location": 1498,
            "return": [
                "str",
                "Optional[List[str]]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "Backend.get_notes": {
            "name": "get_notes",
            "location": 1502,
            "return": [
                "str",
                "Optional[str]",
                "Optional[Any]",
                "Callable[[], T]",
                "app.GrpyApp",
                "Type[recidiviz.persistence.database.database_entity.DatabaseEntity]",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "bool"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "transfer.models.TopicID",
                    "authentication.session.models.current_user.CurrentUser",
                    "myaku.datastore.Query",
                    "str",
                    "transfer.models.TicketID"
                ],
                "page": [
                    "str",
                    "int",
                    "bool",
                    "Tuple[float, float]"
                ],
                "page_size": [
                    "str",
                    "int",
                    "bool",
                    "Tuple[float, float]"
                ]
            }
        },
        "Backend.get_alert_notes": {
            "name": "get_alert_notes",
            "location": 1506,
            "return": [
                "str",
                "Optional[str]",
                "Optional[Any]",
                "Callable[[], T]",
                "app.GrpyApp",
                "Type[recidiviz.persistence.database.database_entity.DatabaseEntity]",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "bool"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str",
                    "Optional[int]"
                ],
                "page": [
                    "int",
                    "str",
                    "bool"
                ],
                "page_size": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Backend.get_customer_notes": {
            "name": "get_customer_notes",
            "location": 1513,
            "return": [
                "str",
                "Optional[Dict[str, Any]]",
                "cmk.utils.type_defs.ServiceName",
                "Optional[Any]",
                "Optional[List[Any]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "customer": [
                    "int",
                    "Set[int]",
                    "Sequence[int]"
                ],
                "page": [
                    "int",
                    "Set[int]",
                    "Sequence[int]"
                ],
                "page_size": [
                    "int",
                    "Set[int]",
                    "Sequence[int]"
                ]
            }
        },
        "Backend.update_note": {
            "name": "update_note",
            "location": 1516,
            "return": [
                "str",
                "app.models.GameMember",
                "app.models.course.Course",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "Callable[[], str]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "float",
                    "Optional[str]",
                    "datetime.datetime"
                ]
            }
        },
        "Backend.delete_note": {
            "name": "delete_note",
            "location": 1524,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "Backend.get_metrics": {
            "name": "get_metrics",
            "location": 1530,
            "return": [
                "str",
                "Optional[cmk.utils.type_defs.HostAddress]",
                "dict",
                "bool",
                "cmk.utils.type_defs.HostName",
                "Optional[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "str",
                    "Tuple[type]"
                ]
            }
        },
        "Backend.set_gauge": {
            "name": "set_gauge",
            "location": 1534,
            "return": [
                "Optional[bool]",
                "str",
                "Optional[str]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "gauge": [
                    "dict",
                    "int"
                ]
            }
        },
        "Backend.inc_counter": {
            "name": "inc_counter",
            "location": 1555,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "counter": [
                    "int",
                    "str"
                ]
            }
        },
        "Backend.update_timer": {
            "name": "update_timer",
            "location": 1576,
            "return": [
                "str",
                "app.models.GameMember",
                "app.models.course.Course",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "Callable[[], str]"
            ],
            "arguments": {
                "self": [],
                "timer": [
                    "int"
                ]
            }
        },
        "Backend.get_expired": {
            "name": "get_expired",
            "location": 1598,
            "return": [
                "bool",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "expired_threshold": [
                    "datetime.datetime",
                    "int",
                    "str",
                    "datetime.timedelta",
                    "Dict[str, int]"
                ],
                "info_threshold": [
                    "datetime.datetime",
                    "int",
                    "str",
                    "datetime.timedelta",
                    "Dict[str, int]"
                ]
            }
        },
        "Backend.get_unshelve": {
            "name": "get_unshelve",
            "location": 1624,
            "return": [
                "bool",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backend.get_unack": {
            "name": "get_unack",
            "location": 1674,
            "return": [
                "bool",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backend.get_environments.pipeline": {
            "name": "pipeline",
            "location": 803,
            "return": [],
            "arguments": {
                "group_by": []
            }
        },
        "Backend.get_services.pipeline": {
            "name": "pipeline",
            "location": 840,
            "return": [
                "str"
            ],
            "arguments": {
                "group_by": [
                    "int",
                    "bool",
                    "float",
                    "Match[str]"
                ]
            }
        }
    },
    "alerta-master/alerta/database/backends/mongodb/queryparser.py": {
        "UnaryOperation.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "BinaryOperation.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "bytes",
                    "str",
                    "Sequence[Sequence[str]]",
                    "Sequence[str]"
                ]
            }
        },
        "SearchModifier.__repr__": {
            "name": "__repr__",
            "location": 28,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchAnd.__repr__": {
            "name": "__repr__",
            "location": 34,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchOr.__repr__": {
            "name": "__repr__",
            "location": 40,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchNot.__repr__": {
            "name": "__repr__",
            "location": 48,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchTerm.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "SearchTerm.__repr__": {
            "name": "__repr__",
            "location": 61,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryParser.parse": {
            "name": "parse",
            "location": 197,
            "return": [
                "str",
                "Tuple[int]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "bool",
                    "Optional[Callable[[Any, Any], None]]"
                ],
                "default_field": [],
                "default_operator": []
            }
        },
        "SearchTerm.__repr__.range_term": {
            "name": "range_term",
            "location": 83,
            "return": [
                "str"
            ],
            "arguments": {
                "field": [
                    "str",
                    "bool",
                    "Iterable[Hashable]",
                    "type"
                ],
                "operator": [
                    "AbstractSet[str]",
                    "Container[str]",
                    "Dict[str, Any]",
                    "str",
                    "Callable",
                    "List[str]"
                ],
                "range": [
                    "int",
                    "float",
                    "List[str]"
                ]
            }
        }
    },
    "alerta-master/alerta/database/backends/mongodb/utils.py": {
        "QueryBuilder.sort_by_columns": {
            "name": "sort_by_columns",
            "location": 31,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "params": [
                    "Dict[str, Any]",
                    "dict",
                    "tracim.models.auth.User",
                    "Dict[str, Dict[str, Any]]",
                    "str"
                ],
                "valid_params": [
                    "dict",
                    "Sized",
                    "django.utils.safestring.SafeText",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "QueryBuilder.filter_query": {
            "name": "filter_query",
            "location": 57,
            "return": [
                "OrderedDict",
                "dict",
                "bytes"
            ],
            "arguments": {
                "params": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "bool",
                    "Callable",
                    "Optional[str]"
                ],
                "valid_params": [
                    "str",
                    "Dict[str, List[str]]"
                ],
                "query": [
                    "str",
                    "int",
                    "type",
                    "Type[T]"
                ]
            }
        },
        "Alerts.from_params": {
            "name": "from_params",
            "location": 139,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "str",
                    "werkzeug.datastructures.MultiDict"
                ],
                "customers": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "query_time": [
                    "Optional[str]",
                    "str",
                    "\"Date\"",
                    "bool",
                    "core_lib.core.models.Venue",
                    "datetime"
                ]
            }
        },
        "Blackouts.from_params": {
            "name": "from_params",
            "location": 221,
            "return": [
                "Dict[str, bool]",
                "dict",
                "int",
                "str",
                "Exception",
                "tartare.core.models.Job",
                "Dict[str, str]"
            ],
            "arguments": {
                "params": [
                    "str",
                    "int",
                    "dict"
                ],
                "customers": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "query_time": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ]
            }
        },
        "Heartbeats.from_params": {
            "name": "from_params",
            "location": 273,
            "return": [
                "Dict[str, bool]",
                "dict",
                "int",
                "str",
                "Exception",
                "tartare.core.models.Job",
                "Dict[str, str]"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "werkzeug.datastructures.MultiDict"
                ],
                "customers": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "query_time": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ]
            }
        },
        "ApiKeys.from_params": {
            "name": "from_params",
            "location": 316,
            "return": [
                "Dict[str, bool]",
                "dict",
                "int",
                "str",
                "Exception",
                "tartare.core.models.Job",
                "Dict[str, str]"
            ],
            "arguments": {
                "params": [
                    "str",
                    "int",
                    "dict"
                ],
                "customers": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "query_time": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ]
            }
        },
        "Users.from_params": {
            "name": "from_params",
            "location": 367,
            "return": [
                "Dict[str, bool]",
                "dict",
                "int",
                "str",
                "Exception",
                "tartare.core.models.Job",
                "Dict[str, str]"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "Dict[str, Any]",
                    "werkzeug.datastructures.MultiDict"
                ],
                "customers": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ],
                "query_time": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ]
            }
        },
        "Groups.from_params": {
            "name": "from_params",
            "location": 390,
            "return": [
                "Dict[str, bool]",
                "dict",
                "int",
                "str",
                "Exception",
                "tartare.core.models.Job",
                "Dict[str, str]"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "int",
                    "Dict[str, Any]",
                    "raiden.utils.Dict[str, raiden.utils.Any]"
                ],
                "customers": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ],
                "query_time": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ]
            }
        },
        "Permissions.from_params": {
            "name": "from_params",
            "location": 413,
            "return": [
                "Dict[str, bool]",
                "dict",
                "int",
                "str",
                "Exception",
                "tartare.core.models.Job",
                "Dict[str, str]"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "Dict[str, Any]",
                    "int",
                    "raiden.utils.Dict[str, raiden.utils.Any]"
                ],
                "customers": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ],
                "query_time": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ]
            }
        },
        "Customers.from_params": {
            "name": "from_params",
            "location": 435,
            "return": [
                "Dict[str, bool]",
                "dict",
                "int",
                "str",
                "Exception",
                "tartare.core.models.Job",
                "Dict[str, str]"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "int",
                    "Dict[str, Any]",
                    "float"
                ],
                "customers": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ],
                "query_time": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ]
            }
        }
    },
    "alerta-master/alerta/database/backends/mongodb/__init__.py": {},
    "alerta-master/alerta/database/backends/postgres/base.py": {
        "HistoryAdapter.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "history": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "HistoryAdapter.prepare": {
            "name": "prepare",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "conn": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "HistoryAdapter.getquoted": {
            "name": "getquoted",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "HistoryAdapter.__str__": {
            "name": "__str__",
            "location": 52,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backend.create_engine": {
            "name": "create_engine",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask"
                ],
                "uri": [
                    "bool",
                    "str"
                ],
                "dbname": [
                    "bool",
                    "str"
                ],
                "raise_on_error": [
                    "bool",
                    "str"
                ]
            }
        },
        "Backend.connect": {
            "name": "connect",
            "location": 91,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backend._adapt_datetime": {
            "name": "_adapt_datetime",
            "location": 119,
            "return": [
                "bool",
                "int",
                "Union[models.scenes.scenes_base.EffectType, Sequence[models.scenes.scenes_base.EffectType]]",
                "str"
            ],
            "arguments": {
                "dt": [
                    "int",
                    "datetime.datetime",
                    "datetime.timedelta",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "Backend.name": {
            "name": "name",
            "location": 123,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "Iterator",
                "Container[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backend.version": {
            "name": "version",
            "location": 129,
            "return": [
                "str",
                "list",
                "int",
                "recidiviz.persistence.database.schema.state.schema.StateSentenceGroup"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backend.is_alive": {
            "name": "is_alive",
            "location": 135,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backend.close": {
            "name": "close",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "db": [
                    "str",
                    "int",
                    "Optional[str]",
                    "List[bytes]",
                    "List[recidiviz.persistence.database.schema.state.schema.StatePerson]"
                ]
            }
        },
        "Backend.destroy": {
            "name": "destroy",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Backend.get_severity": {
            "name": "get_severity",
            "location": 153,
            "return": [
                "models.Profile",
                "str",
                "Iterable[int]",
                "Dict[Optional[str], Set[abilian.services.security.models.Role]]",
                "abilian.core.models.subjects.Principal"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "BinaryIO",
                    "Dict[str, Any]"
                ]
            }
        },
        "Backend.get_status": {
            "name": "get_status",
            "location": 163,
            "return": [
                "str",
                "salon.models.Stylist",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "Type",
                    "Type[T]"
                ]
            }
        },
        "Backend.is_duplicate": {
            "name": "is_duplicate",
            "location": 172,
            "return": [
                "str",
                "bool",
                "int",
                "bytes",
                "OrderedDict",
                "Dict[Tuple[cmk.utils.type_defs.UserId, DashboardName], DashboardConfig]"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "Exception",
                    "type",
                    "Type"
                ]
            }
        },
        "Backend.is_correlated": {
            "name": "is_correlated",
            "location": 183,
            "return": [
                "str",
                "bool",
                "int",
                "bytes",
                "OrderedDict",
                "Dict[Tuple[cmk.utils.type_defs.UserId, DashboardName], DashboardConfig]"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "Exception",
                    "type",
                    "Type"
                ]
            }
        },
        "Backend.is_flapping": {
            "name": "is_flapping",
            "location": 193,
            "return": [
                "str",
                "bool",
                "int",
                "bytes",
                "OrderedDict",
                "Dict[Tuple[cmk.utils.type_defs.UserId, DashboardName], DashboardConfig]"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "List[cmk.base.api.agent_based.type_defs.CheckPlugin]",
                    "List[dict]",
                    "str",
                    "bytes",
                    "List[List[str]]",
                    "Dict[str, str]"
                ],
                "window": [
                    "list",
                    "bool",
                    "Union[str, List[str], None]",
                    "Set[int]",
                    "Tuple[List, List, List]",
                    "List[cmk.base.check_utils.Service]"
                ],
                "count": [
                    "int",
                    "list",
                    "str",
                    "float"
                ]
            }
        },
        "Backend.dedup_alert": {
            "name": "dedup_alert",
            "location": 209,
            "return": [
                "bool",
                "Optional[cmk.base.api.agent_based.type_defs.CheckPlugin]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "Optional[int]",
                    "dict",
                    "flask.Flask",
                    "int"
                ],
                "history": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "Backend.correlate_alert": {
            "name": "correlate_alert",
            "location": 235,
            "return": [
                "bool",
                "Optional[cmk.base.api.agent_based.type_defs.CheckPlugin]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "Optional[int]",
                    "dict",
                    "flask.Flask",
                    "int"
                ],
                "history": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "Backend.create_alert": {
            "name": "create_alert",
            "location": 257,
            "return": [
                "Optional[str]",
                "Dict[Optional[str], Set[abilian.services.security.models.Role]]",
                "abilian.core.models.subjects.Principal",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "bool",
                    "float"
                ]
            }
        },
        "Backend.set_alert": {
            "name": "set_alert",
            "location": 272,
            "return": [
                "str",
                "Callable",
                "zerver.models.Realm",
                "List[Dict[str, Any]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "Dict[str, int]",
                    "datetime.datetime",
                    "Any",
                    "Union[str, int]"
                ],
                "severity": [
                    "int",
                    "Dict[str, int]",
                    "datetime.datetime",
                    "Any",
                    "Union[str, int]"
                ],
                "status": [
                    "int",
                    "Dict[str, int]",
                    "datetime.datetime",
                    "Any",
                    "Union[str, int]"
                ],
                "tags": [
                    "int",
                    "Dict[str, int]",
                    "datetime.datetime",
                    "Any",
                    "Union[str, int]"
                ],
                "attributes": [
                    "int",
                    "Dict[str, int]",
                    "datetime.datetime",
                    "Any",
                    "Union[str, int]"
                ],
                "timeout": [
                    "int",
                    "Dict[str, int]",
                    "datetime.datetime",
                    "Any",
                    "Union[str, int]"
                ],
                "previous_severity": [
                    "int",
                    "Dict[str, int]",
                    "datetime.datetime",
                    "Any",
                    "Union[str, int]"
                ],
                "update_time": [
                    "int",
                    "Dict[str, int]",
                    "datetime.datetime",
                    "Any",
                    "Union[str, int]"
                ],
                "history": [
                    "int",
                    "Dict[str, int]",
                    "datetime.datetime",
                    "Any",
                    "Union[str, int]"
                ]
            }
        },
        "Backend.get_alert": {
            "name": "get_alert",
            "location": 286,
            "return": [
                "str",
                "cmk.utils.type_defs.UserId",
                "Optional[int]",
                "zerver.models.DefaultStreamGroup"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "T",
                    "Union[None, int, str]"
                ],
                "customers": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "Backend.set_status": {
            "name": "set_status",
            "location": 296,
            "return": [
                "str",
                "dict",
                "Callable",
                "List[Dict[str, Any]]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "bytes",
                    "bool",
                    "Optional[int]"
                ],
                "status": [
                    "str",
                    "int",
                    "bytes",
                    "bool",
                    "Optional[int]"
                ],
                "timeout": [
                    "str",
                    "int",
                    "bytes",
                    "bool",
                    "Optional[int]"
                ],
                "update_time": [
                    "str",
                    "int",
                    "bytes",
                    "bool",
                    "Optional[int]"
                ],
                "history": [
                    "str",
                    "int",
                    "bytes",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "Backend.tag_alert": {
            "name": "tag_alert",
            "location": 305,
            "return": [
                "str",
                "cmk.utils.type_defs.UserId",
                "Callable",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Optional[str]",
                    "transfer.models.SnippetID",
                    "Sequence[str]"
                ],
                "tags": [
                    "str",
                    "Optional[str]",
                    "transfer.models.SnippetID",
                    "Sequence[str]"
                ]
            }
        },
        "Backend.untag_alert": {
            "name": "untag_alert",
            "location": 314,
            "return": [
                "str",
                "Union[str, Dict]",
                "Callable",
                "models.seat_group.SeatGroup",
                "ticketing.models.ticket_bundle.TicketBundle"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "annofabapi.models.TaskPhase",
                    "int",
                    "Sequence[str]",
                    "Dict[str, Any]"
                ],
                "tags": [
                    "str",
                    "annofabapi.models.TaskPhase",
                    "int",
                    "Sequence[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Backend.update_tags": {
            "name": "update_tags",
            "location": 323,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Optional[str]",
                    "transfer.models.SnippetID",
                    "Sequence[str]"
                ],
                "tags": [
                    "str",
                    "Optional[str]",
                    "transfer.models.SnippetID",
                    "Sequence[str]"
                ]
            }
        },
        "Backend.update_attributes": {
            "name": "update_attributes",
            "location": 332,
            "return": [
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Optional[str]",
                    "Optional[qiskiproviders.ibmq.utils.utils.RefreshQueue]",
                    "Optional[float]",
                    "bytes",
                    "Optional[Dict[str, str]]",
                    "Sequence[str]"
                ],
                "old_attrs": [
                    "str",
                    "Optional[Dict]",
                    "Mapping[str, Any]",
                    "dict",
                    "Optional[str]"
                ],
                "new_attrs": [
                    "Optional[int]",
                    "Optional[str]",
                    "Dict[str, Dict[str, Any]]",
                    "order.transfer.models.OrderNumberSequenceID",
                    "Optional[\"TrackingData\"]",
                    "Optional[bytes]",
                    "dict"
                ]
            }
        },
        "Backend.delete_alert": {
            "name": "delete_alert",
            "location": 344,
            "return": [
                "str",
                "bool",
                "Callable",
                "Optional[nativecards.lib.dicts.models.DictionaryEntry]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "Optional[str]",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "Backend.tag_alerts": {
            "name": "tag_alerts",
            "location": 354,
            "return": [
                "Set[str]",
                "Optional[dict]",
                "Iterable[int]",
                "int",
                "Counter"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "app.models.User",
                    "models.Tag",
                    "Type[T]"
                ],
                "tags": [
                    "str",
                    "bool",
                    "Iterable[str]",
                    "List[str]",
                    "Optional[T]"
                ]
            }
        },
        "Backend.untag_alerts": {
            "name": "untag_alerts",
            "location": 364,
            "return": [
                "Set[str]",
                "Dict[int, int]",
                "List[list]",
                "List[str]",
                "bool",
                "List[T]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "T",
                    "faustypes.app.AppT",
                    "asgard.models.spec.container.ContainerSpec",
                    "Dict[str, Any]"
                ],
                "tags": [
                    "Mapping[str, str]",
                    "bool",
                    "List[Callable]",
                    "Iterable[str]",
                    "str",
                    "List[recidiviz.persistence.database.schema.state.schema.StatePerson]",
                    "models.DotBotContainer"
                ]
            }
        },
        "Backend.update_attributes_by_query": {
            "name": "update_attributes_by_query",
            "location": 374,
            "return": [
                "List[str]",
                "List[int]",
                "Set[str]",
                "List[Tuple[str, str, str, str]]",
                "List[Tuple[str, str, str]]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "alerta.database.base.Query",
                    "Optional[str]"
                ],
                "attributes": [
                    "str",
                    "Optional[Dict]",
                    "Optional[str]",
                    "Optional",
                    "datetime.datetime"
                ]
            }
        },
        "Backend.delete_alerts": {
            "name": "delete_alerts",
            "location": 383,
            "return": [
                "List[str]",
                "Optional[dict]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "ulauncher.search.Query.Query",
                    "Query"
                ]
            }
        },
        "Backend.add_history": {
            "name": "add_history",
            "location": 394,
            "return": [
                "str",
                "Callable",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "history": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Backend.get_alerts": {
            "name": "get_alerts",
            "location": 403,
            "return": [
                "str",
                "dict",
                "Callable",
                "Mapping[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Optional[Set[int]]",
                    "Set[str]",
                    "Query",
                    "List[magic.models.Deck]",
                    "set",
                    "dict",
                    "Dict[cmk.utils.type_defs.SectionName, Set[cmk.utils.type_defs.SectionName]]"
                ],
                "raw_data": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "int"
                ],
                "history": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "int"
                ],
                "page": [
                    "int",
                    "str"
                ],
                "page_size": [
                    "int",
                    "str"
                ]
            }
        },
        "Backend.get_alert_history": {
            "name": "get_alert_history",
            "location": 435,
            "return": [
                "bool",
                "cmk.utils.type_defs.UserId",
                "Dict[str, Any]",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "int",
                    "Iterable[str]",
                    "str",
                    "bool"
                ],
                "page": [
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "page_size": [
                    "int",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "Backend.get_history": {
            "name": "get_history",
            "location": 470,
            "return": [
                "bool",
                "cmk.utils.type_defs.UserId",
                "Dict[str, Any]",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Query",
                    "int",
                    "Iterable[Mapping[str, Any]]"
                ],
                "page": [
                    "Union[str, None]",
                    "Optional[Iterable]",
                    "Union[int, None]",
                    "Optional[int]",
                    "str",
                    "Optional[Callable]"
                ],
                "page_size": [
                    "Union[str, None]",
                    "Optional[Iterable]",
                    "Union[int, None]",
                    "Optional[int]",
                    "str",
                    "Optional[Callable]"
                ]
            }
        },
        "Backend.get_count": {
            "name": "get_count",
            "location": 512,
            "return": [
                "str",
                "dict",
                "int",
                "Mapping[str, Any]",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Union[int, slice]",
                    "Query",
                    "alerta.database.base.Query",
                    "Union[int, str]"
                ]
            }
        },
        "Backend.get_counts": {
            "name": "get_counts",
            "location": 520,
            "return": [
                "str",
                "Iterator[Tuple[str, Any, Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Union[int, slice]",
                    "query.Query[T]",
                    "alerta.database.base.Query",
                    "Query",
                    "Union[int, str]"
                ],
                "group": [
                    "Optional[str]",
                    "Type[T]",
                    "Optional[Sequence]",
                    "int",
                    "Callable[[], datetime.datetime]",
                    "Tuple[int, int]",
                    "golem_messages.message.base.Message"
                ]
            }
        },
        "Backend.get_counts_by_severity": {
            "name": "get_counts_by_severity",
            "location": 531,
            "return": [
                "str",
                "Iterator[Tuple[str, Any, Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Query",
                    "str",
                    "ulauncher.search.Query.Query",
                    "django.db.models.QuerySet"
                ]
            }
        },
        "Backend.get_counts_by_status": {
            "name": "get_counts_by_status",
            "location": 540,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "List[Dict[str, Any]]",
                "List[str]",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, Dict[str, float]]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "app.models.User",
                    "Union[int, slice]",
                    "alerta.database.base.Query",
                    "Type[T]"
                ]
            }
        },
        "Backend.get_topn_count": {
            "name": "get_topn_count",
            "location": 549,
            "return": [
                "bool",
                "int",
                "psycopg2.extensions.connection"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Query",
                    "int"
                ],
                "group": [
                    "str",
                    "Database",
                    "int",
                    "Dict[str, Any]",
                    "Match[str]"
                ],
                "topn": [
                    "dict",
                    "Union[int, str]",
                    "Database",
                    "alerta.database.base.Query",
                    "models.User",
                    "str"
                ]
            }
        },
        "Backend.get_topn_flapping": {
            "name": "get_topn_flapping",
            "location": 571,
            "return": [
                "bool",
                "int",
                "psycopg2.extensions.connection"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Dict[str, Any]"
                ],
                "group": [
                    "str",
                    "Type[object]",
                    "Union[Type, Tuple[Type, ...]]",
                    "List[str]"
                ],
                "topn": [
                    "dict",
                    "Union[int, str]",
                    "bytes",
                    "int",
                    "models.User",
                    "Database"
                ]
            }
        },
        "Backend.get_topn_standing": {
            "name": "get_topn_standing",
            "location": 594,
            "return": [
                "bool",
                "int",
                "psycopg2.extensions.connection"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Dict[str, Any]"
                ],
                "group": [
                    "str",
                    "Type[object]",
                    "Union[Type, Tuple[Type, ...]]",
                    "List[str]"
                ],
                "topn": [
                    "dict",
                    "Union[int, str]",
                    "bytes",
                    "int",
                    "models.User",
                    "Database"
                ]
            }
        },
        "Backend.get_environments": {
            "name": "get_environments",
            "location": 620,
            "return": [
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Union[int, slice]",
                    "str",
                    "Query",
                    "Union[int, str]"
                ],
                "topn": [
                    "str",
                    "Set[str]",
                    "supersemodels.sql_lab.Query"
                ]
            }
        },
        "Backend.get_services": {
            "name": "get_services",
            "location": 653,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Union[int, slice]",
                    "Query",
                    "query.Query[T]",
                    "supersemodels.sql_lab.Query"
                ],
                "topn": [
                    "str",
                    "Set[str]",
                    "supersemodels.sql_lab.Query"
                ]
            }
        },
        "Backend.get_alert_groups": {
            "name": "get_alert_groups",
            "location": 687,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "alerta.database.base.Query",
                    "str",
                    "grouper.models.base.session.Session"
                ],
                "topn": [
                    "str",
                    "bytes",
                    "purplship.core.utils.xml.Element",
                    "myaku.datastore.Query",
                    "Dict[str, Any]"
                ]
            }
        },
        "Backend.get_alert_tags": {
            "name": "get_alert_tags",
            "location": 703,
            "return": [
                "Callable",
                "Mapping[str, Any]",
                "dict",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "int",
                    "Query"
                ],
                "topn": [
                    "app.db_models.survey.Survey",
                    "Dict[str, Any]",
                    "fal.models.Season",
                    "str"
                ]
            }
        },
        "Backend.create_blackout": {
            "name": "create_blackout",
            "location": 714,
            "return": [
                "Optional[str]",
                "Dict[Optional[str], Set[abilian.services.security.models.Role]]",
                "abilian.core.models.subjects.Principal",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "blackout": [
                    "bool",
                    "float"
                ]
            }
        },
        "Backend.get_blackout": {
            "name": "get_blackout",
            "location": 726,
            "return": [
                "str",
                "cmk.utils.type_defs.UserId",
                "Optional[int]",
                "zerver.models.DefaultStreamGroup"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "T",
                    "Union[None, int, str]"
                ],
                "customers": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "Backend.get_blackouts": {
            "name": "get_blackouts",
            "location": 735,
            "return": [
                "str",
                "dict",
                "Callable",
                "Mapping[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "bytes",
                    "int",
                    "Optional[str]",
                    "recidiviz.persistence.database.session.Session"
                ],
                "page": [
                    "int",
                    "bool",
                    "str",
                    "datetime.datetime",
                    "float"
                ],
                "page_size": [
                    "int",
                    "bool",
                    "str",
                    "datetime.datetime",
                    "float"
                ]
            }
        },
        "Backend.get_blackouts_count": {
            "name": "get_blackouts_count",
            "location": 745,
            "return": [
                "str",
                "dict",
                "int",
                "Mapping[str, Any]",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Union[int, slice]",
                    "Query",
                    "alerta.database.base.Query",
                    "Union[int, str]"
                ]
            }
        },
        "Backend.is_blackout_period": {
            "name": "is_blackout_period",
            "location": 753,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "int"
                ]
            }
        },
        "Backend.update_blackout": {
            "name": "update_blackout",
            "location": 832,
            "return": [
                "cmk.utils.type_defs.UserId",
                "models.User",
                "int",
                "bool",
                "Sequence[str]",
                "Optional[str]",
                "app.models.GameMember"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "Backend.delete_blackout": {
            "name": "delete_blackout",
            "location": 870,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "bool",
                    "int"
                ]
            }
        },
        "Backend.upsert_heartbeat": {
            "name": "upsert_heartbeat",
            "location": 880,
            "return": [
                "utils.Node",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "trezor.utils.Writer",
                "OrderedDict",
                "Dict[Tuple[cmk.utils.type_defs.UserId, DashboardName], DashboardConfig]",
                "DefaultDict[int, List[Any]]"
            ],
            "arguments": {
                "self": [],
                "heartbeat": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "Backend.get_heartbeat": {
            "name": "get_heartbeat",
            "location": 892,
            "return": [
                "str",
                "cmk.utils.type_defs.UserId",
                "Callable",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "str",
                    "datetime.datetime",
                    "Optional[str]"
                ],
                "customers": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "Backend.get_heartbeats": {
            "name": "get_heartbeats",
            "location": 903,
            "return": [
                "str",
                "dict",
                "Callable",
                "Mapping[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "bytes",
                    "int",
                    "Optional[str]",
                    "recidiviz.persistence.database.session.Session"
                ],
                "page": [
                    "int",
                    "bool",
                    "str",
                    "datetime.datetime",
                    "float"
                ],
                "page_size": [
                    "int",
                    "bool",
                    "str",
                    "datetime.datetime",
                    "float"
                ]
            }
        },
        "Backend.get_heartbeats_by_status": {
            "name": "get_heartbeats_by_status",
            "location": 915,
            "return": [
                "Mapping[str, Any]",
                "str",
                "Dict[str, Any]",
                "cmk.utils.type_defs.EventRule"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "int",
                    "bool",
                    "List[str]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]",
                    "str"
                ],
                "query": [
                    "str",
                    "bytes",
                    "Union[str, None]",
                    "raiden.utils.Address",
                    "Optional[int]",
                    "Optional[str]"
                ],
                "page": [
                    "int",
                    "Optional[Union[float, int]]",
                    "raiden.utils.BlockNumber"
                ],
                "page_size": [
                    "int",
                    "Optional[Union[float, int]]",
                    "raiden.utils.BlockNumber"
                ]
            }
        },
        "Backend.get_heartbeats_count": {
            "name": "get_heartbeats_count",
            "location": 950,
            "return": [
                "str",
                "dict",
                "int",
                "Mapping[str, Any]",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Union[int, slice]",
                    "Query",
                    "alerta.database.base.Query",
                    "Union[int, str]"
                ]
            }
        },
        "Backend.delete_heartbeat": {
            "name": "delete_heartbeat",
            "location": 958,
            "return": [
                "str",
                "bool",
                "Callable",
                "Optional[nativecards.lib.dicts.models.DictionaryEntry]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "Optional[str]",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "Backend.create_key": {
            "name": "create_key",
            "location": 968,
            "return": [
                "str",
                "Tuple[str, str]",
                "django.db.models.Model",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "KT",
                    "bool",
                    "List[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "Backend.get_key": {
            "name": "get_key",
            "location": 976,
            "return": [
                "str",
                "List[str]",
                "dict",
                "Optional[bool]",
                "bool",
                "List[List[str]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[List[str]]",
                    "db.models.Cowboy",
                    "bytes",
                    "List[Optional[Any]]",
                    "Optional[bool]",
                    "Optional[int]"
                ],
                "user": [
                    "str",
                    "Dict[Any, list]",
                    "dict",
                    "Union[str, bytes]",
                    "Optional[Callable]"
                ]
            }
        },
        "Backend.get_keys": {
            "name": "get_keys",
            "location": 984,
            "return": [
                "Optional[str]",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, str]",
                "bool",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "int",
                    "List[Dict[str, Any]]",
                    "bool",
                    "datetime.datetime"
                ],
                "page": [
                    "int",
                    "bool",
                    "str"
                ],
                "page_size": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "Backend.get_keys_by_user": {
            "name": "get_keys_by_user",
            "location": 993,
            "return": [
                "bool",
                "str",
                "Tuple[float, float]",
                "salon.models.Stylist"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "tracim.models.auth.User",
                    "models.User",
                    "flask_appbuilder.security.sqla.models.User",
                    "asgard.models.agenAgent",
                    "zerver.models.UserProfile",
                    "Optional[str]",
                    "users.models.JustfixUser",
                    "bool"
                ]
            }
        },
        "Backend.get_keys_count": {
            "name": "get_keys_count",
            "location": 1000,
            "return": [
                "dict",
                "str",
                "int",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "bytes",
                    "str"
                ]
            }
        },
        "Backend.update_key": {
            "name": "update_key",
            "location": 1008,
            "return": [
                "bool",
                "Mapping[str, Any]",
                "Optional[cmk.utils.type_defs.HostAddress]",
                "cmk.utils.type_defs.HostName",
                "str",
                "int",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Dict[str, str]",
                    "Type[RuntimeError]",
                    "Optional[str]",
                    "int",
                    "Callable[[KT], VT]",
                    "tuple"
                ]
            }
        },
        "Backend.update_key_last_used": {
            "name": "update_key_last_used",
            "location": 1031,
            "return": [
                "dict",
                "bytes",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict",
                    "T"
                ]
            }
        },
        "Backend.delete_key": {
            "name": "delete_key",
            "location": 1039,
            "return": [
                "bool",
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Iterable[Hashable]",
                    "Optional[str]",
                    "Optional[bytes]"
                ]
            }
        },
        "Backend.create_user": {
            "name": "create_user",
            "location": 1049,
            "return": [
                "str",
                "int",
                "recidiviz.utils.regions.Region",
                "Iterable[str]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "server.models.User",
                    "bool",
                    "Optional[str]",
                    "models.User",
                    "users.models.JustfixUser",
                    "str",
                    "tracim.models.data.Workspace"
                ]
            }
        },
        "Backend.get_user": {
            "name": "get_user",
            "location": 1059,
            "return": [
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "List[int]",
                    "str",
                    "bool"
                ]
            }
        },
        "Backend.get_users": {
            "name": "get_users",
            "location": 1063,
            "return": [
                "str",
                "dict",
                "zerver.models.Realm",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "int",
                    "datetime.datetime",
                    "ticketing.transfer.models.TicketCategoryID",
                    "transfer.models.ItemID",
                    "Set[int]"
                ],
                "page": [
                    "int",
                    "Callable[..., None]",
                    "Sequence[int]",
                    "bool",
                    "str"
                ],
                "page_size": [
                    "int",
                    "Callable[..., None]",
                    "Sequence[int]",
                    "bool",
                    "str"
                ]
            }
        },
        "Backend.get_users_count": {
            "name": "get_users_count",
            "location": 1072,
            "return": [
                "dict",
                "int",
                "Mapping[str, Any]",
                "str",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Union[int, slice]",
                    "Query",
                    "alerta.database.base.Query",
                    "Union[int, str]"
                ]
            }
        },
        "Backend.get_user_by_username": {
            "name": "get_user_by_username",
            "location": 1080,
            "return": [
                "str",
                "Callable",
                "List[List[int]]"
            ],
            "arguments": {
                "self": [],
                "username": [
                    "str",
                    "Callable",
                    "List[List[int]]"
                ]
            }
        },
        "Backend.get_user_by_email": {
            "name": "get_user_by_email",
            "location": 1084,
            "return": [],
            "arguments": {
                "self": [],
                "email": [
                    "List[str]",
                    "Callable[..., T]",
                    "str",
                    "datetime.datetime",
                    "list",
                    "psycopg2.extensions.connection",
                    "int"
                ]
            }
        },
        "Backend.get_user_by_hash": {
            "name": "get_user_by_hash",
            "location": 1088,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "hash": [
                    "str",
                    "sqlalchemy.orm.Query",
                    "List[Dict]"
                ]
            }
        },
        "Backend.update_last_login": {
            "name": "update_last_login",
            "location": 1092,
            "return": [
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Backend.update_user": {
            "name": "update_user",
            "location": 1100,
            "return": [
                "bool",
                "str",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "Backend.update_user_attributes": {
            "name": "update_user_attributes",
            "location": 1131,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "Optional[\"ShippingInfo\"]",
                    "Optional[\"PaymentInfo\"]"
                ],
                "old_attrs": [
                    "str",
                    "bool",
                    "Union[str, Iterable[str]]",
                    "Optional[Sequence[str]]",
                    "Optional[int]"
                ],
                "new_attrs": [
                    "int",
                    "float"
                ]
            }
        },
        "Backend.delete_user": {
            "name": "delete_user",
            "location": 1143,
            "return": [
                "bool",
                "Optional[Callable]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "Backend.set_email_hash": {
            "name": "set_email_hash",
            "location": 1151,
            "return": [
                "str",
                "esm.models.last_operation.LastOperation",
                "Optional[int]",
                "Optional[str]",
                "Union[server.models.Bike, int]",
                "transfer.models.ListID"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "Dict[str, Any]"
                ],
                "hash": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Backend.create_group": {
            "name": "create_group",
            "location": 1161,
            "return": [
                "Optional[str]",
                "Dict[Optional[str], Set[abilian.services.security.models.Role]]",
                "abilian.core.models.subjects.Principal",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "bool",
                    "float"
                ]
            }
        },
        "Backend.get_group": {
            "name": "get_group",
            "location": 1169,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "List[int]",
                    "str",
                    "bool"
                ]
            }
        },
        "Backend.get_groups": {
            "name": "get_groups",
            "location": 1173,
            "return": [
                "str",
                "dict",
                "Callable",
                "Mapping[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "bytes",
                    "int",
                    "Optional[str]",
                    "recidiviz.persistence.database.session.Session"
                ],
                "page": [
                    "int",
                    "bool",
                    "str",
                    "datetime.datetime",
                    "float"
                ],
                "page_size": [
                    "int",
                    "bool",
                    "str",
                    "datetime.datetime",
                    "float"
                ]
            }
        },
        "Backend.get_groups_count": {
            "name": "get_groups_count",
            "location": 1182,
            "return": [
                "str",
                "dict",
                "int",
                "Mapping[str, Any]",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Union[int, slice]",
                    "Query",
                    "alerta.database.base.Query",
                    "Union[int, str]"
                ]
            }
        },
        "Backend.get_group_users": {
            "name": "get_group_users",
            "location": 1190,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        },
        "Backend.update_group": {
            "name": "update_group",
            "location": 1199,
            "return": [
                "cmk.utils.type_defs.UserId",
                "models.User",
                "int",
                "bool",
                "Sequence[str]",
                "Optional[str]",
                "app.models.GameMember"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "Backend.add_user_to_group": {
            "name": "add_user_to_group",
            "location": 1216,
            "return": [
                "Dict[str, Any]",
                "bool",
                "amundsen_application.models.user.User",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "abilian.core.models.subjects.User"
            ],
            "arguments": {
                "self": [],
                "group": [
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]",
                    "tracim.models.auth.User",
                    "dict",
                    "viewer.models.Archive"
                ],
                "user": [
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]",
                    "tracim.models.auth.User",
                    "dict",
                    "viewer.models.Archive"
                ]
            }
        },
        "Backend.remove_user_from_group": {
            "name": "remove_user_from_group",
            "location": 1225,
            "return": [],
            "arguments": {
                "self": [],
                "group": [
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]",
                    "tracim.models.auth.User",
                    "viewer.models.Archive"
                ],
                "user": [
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]",
                    "tracim.models.auth.User",
                    "viewer.models.Archive"
                ]
            }
        },
        "Backend.delete_group": {
            "name": "delete_group",
            "location": 1234,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "bool",
                    "int"
                ]
            }
        },
        "Backend.get_groups_by_user": {
            "name": "get_groups_by_user",
            "location": 1242,
            "return": [
                "str",
                "bool",
                "recidiviz.utils.regions.Region"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "int",
                    "server.models.User",
                    "lms.lmsdb.models.User",
                    "bool",
                    "tracim.models.data.Workspace"
                ]
            }
        },
        "Backend.create_perm": {
            "name": "create_perm",
            "location": 1252,
            "return": [
                "Optional[str]",
                "Dict[Optional[str], Set[abilian.services.security.models.Role]]",
                "abilian.core.models.subjects.Principal",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "perm": [
                    "bool",
                    "float"
                ]
            }
        },
        "Backend.get_perm": {
            "name": "get_perm",
            "location": 1260,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "List[int]",
                    "str",
                    "bool"
                ]
            }
        },
        "Backend.get_perms": {
            "name": "get_perms",
            "location": 1264,
            "return": [
                "str",
                "dict",
                "Callable",
                "Mapping[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "int",
                    "List[Dict[str, Any]]",
                    "bool",
                    "datetime.datetime",
                    "daylighdb.models.User"
                ],
                "page": [
                    "int",
                    "bool",
                    "str",
                    "datetime.datetime",
                    "float"
                ],
                "page_size": [
                    "int",
                    "bool",
                    "str",
                    "datetime.datetime",
                    "float"
                ]
            }
        },
        "Backend.get_perms_count": {
            "name": "get_perms_count",
            "location": 1273,
            "return": [
                "str",
                "dict",
                "int",
                "Mapping[str, Any]",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Union[int, slice]",
                    "Query",
                    "alerta.database.base.Query",
                    "Union[int, str]"
                ]
            }
        },
        "Backend.update_perm": {
            "name": "update_perm",
            "location": 1281,
            "return": [
                "cmk.utils.type_defs.UserId",
                "models.User",
                "int",
                "bool",
                "Sequence[str]",
                "Optional[str]",
                "app.models.GameMember"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "Backend.delete_perm": {
            "name": "delete_perm",
            "location": 1298,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "bool",
                    "int"
                ]
            }
        },
        "Backend.get_scopes_by_match": {
            "name": "get_scopes_by_match",
            "location": 1306,
            "return": [
                "str",
                "bytes",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "login": [
                    "dict",
                    "int",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "matches": [
                    "bool",
                    "List[str]",
                    "str",
                    "List[dict]",
                    "Iterable"
                ]
            }
        },
        "Backend.create_customer": {
            "name": "create_customer",
            "location": 1326,
            "return": [
                "Optional[str]",
                "Dict[Optional[str], Set[abilian.services.security.models.Role]]",
                "abilian.core.models.subjects.Principal",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "customer": [
                    "bool",
                    "float"
                ]
            }
        },
        "Backend.get_customer": {
            "name": "get_customer",
            "location": 1334,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "List[int]",
                    "str",
                    "bool"
                ]
            }
        },
        "Backend.get_customers": {
            "name": "get_customers",
            "location": 1338,
            "return": [
                "str",
                "dict",
                "Callable",
                "Mapping[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "int",
                    "List[Dict[str, Any]]",
                    "bool",
                    "datetime.datetime",
                    "daylighdb.models.User"
                ],
                "page": [
                    "int",
                    "bool",
                    "str",
                    "datetime.datetime",
                    "float"
                ],
                "page_size": [
                    "int",
                    "bool",
                    "str",
                    "datetime.datetime",
                    "float"
                ]
            }
        },
        "Backend.get_customers_count": {
            "name": "get_customers_count",
            "location": 1347,
            "return": [
                "str",
                "dict",
                "int",
                "Mapping[str, Any]",
                "Callable",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Union[int, slice]",
                    "Query",
                    "alerta.database.base.Query",
                    "Union[int, str]"
                ]
            }
        },
        "Backend.update_customer": {
            "name": "update_customer",
            "location": 1355,
            "return": [
                "cmk.utils.type_defs.UserId",
                "models.User",
                "int",
                "bool",
                "Sequence[str]",
                "Optional[str]",
                "app.models.GameMember"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "Backend.delete_customer": {
            "name": "delete_customer",
            "location": 1372,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "bool",
                    "int"
                ]
            }
        },
        "Backend.get_customers_by_match": {
            "name": "get_customers_by_match",
            "location": 1380,
            "return": [
                "salon.models.Stylist",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "login": [
                    "str",
                    "List[str]"
                ],
                "matches": [
                    "str"
                ]
            }
        },
        "Backend.create_note": {
            "name": "create_note",
            "location": 1400,
            "return": [
                "Optional[str]",
                "Dict[Optional[str], Set[abilian.services.security.models.Role]]",
                "abilian.core.models.subjects.Principal",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "note": [
                    "bool",
                    "float"
                ]
            }
        },
        "Backend.get_note": {
            "name": "get_note",
            "location": 1410,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "List[int]",
                    "str",
                    "bool"
                ]
            }
        },
        "Backend.get_notes": {
            "name": "get_notes",
            "location": 1417,
            "return": [
                "str",
                "dict",
                "Callable",
                "Mapping[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "int",
                    "List[Dict[str, Any]]",
                    "bool",
                    "datetime.datetime",
                    "daylighdb.models.User"
                ],
                "page": [
                    "int",
                    "bool",
                    "str",
                    "datetime.datetime",
                    "float"
                ],
                "page_size": [
                    "int",
                    "bool",
                    "str",
                    "datetime.datetime",
                    "float"
                ]
            }
        },
        "Backend.get_alert_notes": {
            "name": "get_alert_notes",
            "location": 1426,
            "return": [
                "int",
                "Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]",
                "str",
                "dict",
                "salon.models.Stylist",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "datetime.timedelta",
                    "bytes"
                ],
                "page": [
                    "int",
                    "datetime.timedelta",
                    "bytes"
                ],
                "page_size": [
                    "int",
                    "datetime.timedelta",
                    "bytes"
                ]
            }
        },
        "Backend.get_customer_notes": {
            "name": "get_customer_notes",
            "location": 1433,
            "return": [
                "bool",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "customer": [
                    "int",
                    "Sequence[int]",
                    "Tuple[int, int]"
                ],
                "page": [
                    "int",
                    "Sequence[int]",
                    "Tuple[int, int]"
                ],
                "page_size": [
                    "int",
                    "Sequence[int]",
                    "Tuple[int, int]"
                ]
            }
        },
        "Backend.update_note": {
            "name": "update_note",
            "location": 1440,
            "return": [
                "cmk.utils.type_defs.UserId",
                "models.User",
                "int",
                "bool",
                "Sequence[str]",
                "Optional[str]",
                "app.models.GameMember"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "List[int]"
                ]
            }
        },
        "Backend.delete_note": {
            "name": "delete_note",
            "location": 1459,
            "return": [
                "bool",
                "int",
                "Dict[str, Tuple[str, str]]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "bool",
                    "int"
                ]
            }
        },
        "Backend.get_metrics": {
            "name": "get_metrics",
            "location": 1469,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "type": [
                    "str",
                    "int"
                ]
            }
        },
        "Backend.set_gauge": {
            "name": "set_gauge",
            "location": 1475,
            "return": [
                "str",
                "List[str]",
                "trezor.utils.Writer",
                "raiden.utils.Tuple[int, int]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "gauge": [
                    "bool",
                    "float"
                ]
            }
        },
        "Backend.inc_counter": {
            "name": "inc_counter",
            "location": 1485,
            "return": [
                "utils.Node",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "trezor.utils.Writer",
                "OrderedDict",
                "Dict[Tuple[cmk.utils.type_defs.UserId, DashboardName], DashboardConfig]",
                "DefaultDict[int, List[Any]]"
            ],
            "arguments": {
                "self": [],
                "counter": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "Backend.update_timer": {
            "name": "update_timer",
            "location": 1495,
            "return": [
                "Dict[str, int]",
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "timer": [
                    "float",
                    "zam_repondeur.models.Amendement",
                    "str",
                    "datetime.timedelta",
                    "int",
                    "bool"
                ]
            }
        },
        "Backend.get_expired": {
            "name": "get_expired",
            "location": 1507,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "expired_threshold": [
                    "str",
                    "int",
                    "dict",
                    "bool",
                    "Optional[str]",
                    "Tuple[List[str], Optional[str]]",
                    "Tuple[str, str, str]"
                ],
                "info_threshold": [
                    "str",
                    "int",
                    "dict",
                    "bool",
                    "Optional[str]",
                    "Tuple[List[str], Optional[str]]",
                    "Tuple[str, str, str]"
                ]
            }
        },
        "Backend.get_unshelve": {
            "name": "get_unshelve",
            "location": 1537,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backend.get_unack": {
            "name": "get_unack",
            "location": 1551,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Backend._insert": {
            "name": "_insert",
            "location": 1567,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "magic.models.Card",
                    "dict",
                    "db.models.Name"
                ],
                "vars": [
                    "str",
                    "magic.models.Card",
                    "dict",
                    "db.models.Name"
                ]
            }
        },
        "Backend._fetchone": {
            "name": "_fetchone",
            "location": 1577,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "magic.models.Card",
                    "dict",
                    "db.models.Name"
                ],
                "vars": [
                    "str",
                    "magic.models.Card",
                    "dict",
                    "db.models.Name"
                ]
            }
        },
        "Backend._fetchall": {
            "name": "_fetchall",
            "location": 1586,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Match[str]",
                    "Type",
                    "SupportsFloat",
                    "float"
                ],
                "vars": [
                    "str",
                    "magic.models.Card",
                    "dict",
                    "db.models.Name"
                ],
                "limit": [
                    "Optional[Any]",
                    "Mapping",
                    "Optional[Dict[str, Any]]"
                ],
                "offset": [
                    "sqlalchemy.orm.Query",
                    "Pattern",
                    "str"
                ]
            }
        },
        "Backend._updateone": {
            "name": "_updateone",
            "location": 1598,
            "return": [
                "str",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "asgard.clients.chronos.models.job.ChronosContainerVolumeSpec",
                    "Sequence",
                    "Mapping"
                ],
                "vars": [
                    "str",
                    "asgard.clients.chronos.models.job.ChronosContainerVolumeSpec",
                    "Sequence",
                    "Mapping"
                ],
                "returning": [
                    "bool",
                    "zerver.models.Realm",
                    "int",
                    "Optional[str]",
                    "Tuple[List[str], Optional[Any], Optional[Any]]",
                    "multinedb.models.table.Table",
                    "str"
                ]
            }
        },
        "Backend._updateall": {
            "name": "_updateall",
            "location": 1608,
            "return": [
                "str",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "asgard.clients.chronos.models.job.ChronosContainerVolumeSpec",
                    "Sequence",
                    "Mapping"
                ],
                "vars": [
                    "str",
                    "asgard.clients.chronos.models.job.ChronosContainerVolumeSpec",
                    "Sequence",
                    "Mapping"
                ],
                "returning": [
                    "bool",
                    "zerver.models.Realm",
                    "int",
                    "Optional[str]",
                    "Tuple[List[str], Optional[Any], Optional[Any]]",
                    "multinedb.models.table.Table",
                    "str"
                ]
            }
        },
        "Backend._upsert": {
            "name": "_upsert",
            "location": 1618,
            "return": [
                "Dict[str, Any]",
                "str",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "Query",
                    "supersemodels.sql_lab.Query",
                    "Dict[str, Any]"
                ],
                "vars": [
                    "Query",
                    "supersemodels.sql_lab.Query",
                    "Dict[str, Any]"
                ]
            }
        },
        "Backend._deleteone": {
            "name": "_deleteone",
            "location": 1624,
            "return": [
                "str",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "asgard.clients.chronos.models.job.ChronosContainerVolumeSpec",
                    "Sequence",
                    "Mapping"
                ],
                "vars": [
                    "str",
                    "asgard.clients.chronos.models.job.ChronosContainerVolumeSpec",
                    "Sequence",
                    "Mapping"
                ],
                "returning": [
                    "bool",
                    "zerver.models.Realm",
                    "int",
                    "Optional[str]",
                    "Tuple[List[str], Optional[Any], Optional[Any]]",
                    "multinedb.models.table.Table",
                    "str"
                ]
            }
        },
        "Backend._deleteall": {
            "name": "_deleteall",
            "location": 1634,
            "return": [
                "str",
                "Optional[BaseException]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "asgard.clients.chronos.models.job.ChronosContainerVolumeSpec",
                    "Sequence",
                    "Mapping"
                ],
                "vars": [
                    "str",
                    "asgard.clients.chronos.models.job.ChronosContainerVolumeSpec",
                    "Sequence",
                    "Mapping"
                ],
                "returning": [
                    "bool",
                    "zerver.models.Realm",
                    "int",
                    "Optional[str]",
                    "Tuple[List[str], Optional[Any], Optional[Any]]",
                    "multinedb.models.table.Table",
                    "str"
                ]
            }
        },
        "Backend._log": {
            "name": "_log",
            "location": 1644,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cursor": [
                    "int",
                    "dict",
                    "Iterator[str]",
                    "Set[int]",
                    "Match",
                    "list"
                ],
                "query": [
                    "int",
                    "dict",
                    "Iterator[str]",
                    "Set[int]",
                    "Match",
                    "list"
                ],
                "vars": [
                    "int",
                    "dict",
                    "Iterator[str]",
                    "Set[int]",
                    "Match",
                    "list"
                ]
            }
        },
        "HistoryAdapter.getquoted.quoted": {
            "name": "quoted",
            "location": 33,
            "return": [
                "float",
                "int"
            ],
            "arguments": {
                "o": [
                    "str",
                    "datetime.datetime",
                    "List[int]"
                ]
            }
        }
    },
    "alerta-master/alerta/database/backends/postgres/queryparser.py": {
        "UnaryOperation.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "BinaryOperation.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "bytes",
                    "str",
                    "Sequence[Sequence[str]]",
                    "Sequence[str]"
                ]
            }
        },
        "SearchModifier.__repr__": {
            "name": "__repr__",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchAnd.__repr__": {
            "name": "__repr__",
            "location": 32,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchOr.__repr__": {
            "name": "__repr__",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchNot.__repr__": {
            "name": "__repr__",
            "location": 46,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchTerm.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "tokens": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "SearchTerm.__repr__": {
            "name": "__repr__",
            "location": 55,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryParser.parse": {
            "name": "parse",
            "location": 182,
            "return": [
                "str",
                "Tuple[int]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "str",
                    "Tuple[type]"
                ],
                "default_field": [
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "alerta-master/alerta/database/backends/postgres/utils.py": {
        "QueryBuilder.sort_by_columns": {
            "name": "sort_by_columns",
            "location": 28,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "params": [
                    "Dict[str, Any]",
                    "dict",
                    "tracim.models.auth.User",
                    "Dict[str, Dict[str, Any]]",
                    "str"
                ],
                "valid_params": [
                    "dict",
                    "Sized",
                    "django.utils.safestring.SafeText",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "QueryBuilder.filter_query": {
            "name": "filter_query",
            "location": 55,
            "return": [
                "OrderedDict",
                "dict",
                "bytes"
            ],
            "arguments": {
                "params": [
                    "str",
                    "Optional[Mapping[str, Any]]",
                    "bool",
                    "Callable",
                    "Optional[str]"
                ],
                "valid_params": [
                    "Dict[str, str]",
                    "Dict[str, Dict[str, str]]",
                    "Mapping[str, Any]",
                    "Dict[Hashable, Any]",
                    "str",
                    "dict"
                ],
                "query": [
                    "List[str]",
                    "Dict[str, str]",
                    "dict",
                    "int",
                    "str"
                ],
                "qvars": [
                    "str",
                    "List[str]",
                    "int"
                ]
            }
        },
        "Alerts.from_params": {
            "name": "from_params",
            "location": 142,
            "return": [
                "bool",
                "str",
                "torch.utils.data.DataLoader"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "str",
                    "Dict[str, Any]"
                ],
                "customers": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "float",
                    "bool"
                ],
                "query_time": [
                    "Optional[str]",
                    "str",
                    "\"Date\"",
                    "bool",
                    "core_lib.core.models.Venue"
                ]
            }
        },
        "Blackouts.from_params": {
            "name": "from_params",
            "location": 225,
            "return": [
                "bool",
                "str",
                "torch.utils.data.DataLoader"
            ],
            "arguments": {
                "params": [
                    "str",
                    "int",
                    "dict",
                    "Union[str, int]"
                ],
                "customers": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "float",
                    "bool"
                ],
                "query_time": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ]
            }
        },
        "Heartbeats.from_params": {
            "name": "from_params",
            "location": 276,
            "return": [
                "bool",
                "str",
                "torch.utils.data.DataLoader"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "float",
                    "int"
                ],
                "customers": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "float",
                    "bool"
                ],
                "query_time": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ]
            }
        },
        "ApiKeys.from_params": {
            "name": "from_params",
            "location": 316,
            "return": [
                "bool",
                "str",
                "torch.utils.data.DataLoader"
            ],
            "arguments": {
                "params": [
                    "str",
                    "int",
                    "dict"
                ],
                "customers": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "float",
                    "bool"
                ],
                "query_time": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ]
            }
        },
        "Users.from_params": {
            "name": "from_params",
            "location": 366,
            "return": [
                "bool",
                "str",
                "torch.utils.data.DataLoader"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "Dict[str, Any]",
                    "int"
                ],
                "customers": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ],
                "query_time": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ]
            }
        },
        "Groups.from_params": {
            "name": "from_params",
            "location": 390,
            "return": [
                "bool",
                "str",
                "torch.utils.data.DataLoader"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "int",
                    "Dict[str, Any]"
                ],
                "customers": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ],
                "query_time": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ]
            }
        },
        "Permissions.from_params": {
            "name": "from_params",
            "location": 414,
            "return": [
                "bool",
                "str",
                "torch.utils.data.DataLoader"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "int",
                    "Dict[str, Any]"
                ],
                "customers": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ],
                "query_time": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ]
            }
        },
        "Customers.from_params": {
            "name": "from_params",
            "location": 437,
            "return": [
                "bool",
                "str",
                "torch.utils.data.DataLoader"
            ],
            "arguments": {
                "params": [
                    "dict",
                    "int",
                    "Dict[str, Any]",
                    "float"
                ],
                "customers": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ],
                "query_time": [
                    "str",
                    "int",
                    "List[str]",
                    "list"
                ]
            }
        }
    },
    "alerta-master/alerta/database/backends/postgres/__init__.py": {},
    "alerta-master/alerta/management/views.py": {
        "management": {
            "name": "management",
            "location": 41,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {}
        },
        "manifest": {
            "name": "manifest",
            "location": 59,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "properties": {
            "name": "properties",
            "location": 74,
            "return": [
                "Dict[str, Any]",
                "str",
                "models.Name",
                "bool"
            ],
            "arguments": {}
        },
        "switchboard": {
            "name": "switchboard",
            "location": 96,
            "return": [
                "str",
                "Optional[Any]"
            ],
            "arguments": {}
        },
        "good_to_go": {
            "name": "good_to_go",
            "location": 118,
            "return": [
                "bytes",
                "int",
                "IO",
                "List[str]",
                "cmk.utils.type_defs.HostAddress",
                "str"
            ],
            "arguments": {}
        },
        "health_check": {
            "name": "health_check",
            "location": 128,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "housekeeping": {
            "name": "housekeeping",
            "location": 147,
            "return": [
                "Iterator[Collection[T]]",
                "Sequence[object]",
                "Set[int]",
                "Optional[Union[str, Any]]",
                "str",
                "List[Tuple[str, int]]"
            ],
            "arguments": {}
        },
        "status": {
            "name": "status",
            "location": 211,
            "return": [
                "str",
                "Union[dict, list]"
            ],
            "arguments": {}
        },
        "prometheus_metrics": {
            "name": "prometheus_metrics",
            "location": 228,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Mapping[str, Any]",
                "Callable"
            ],
            "arguments": {}
        }
    },
    "alerta-master/alerta/management/__init__.py": {},
    "alerta-master/alerta/models/alert.py": {
        "Alert.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "int",
                    "bool"
                ],
                "event": [
                    "Callable",
                    "cmk.utils.type_defs.HostAddress",
                    "dict"
                ]
            }
        },
        "Alert.parse": {
            "name": "parse",
            "location": 82,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "json": [
                    "Dict[str, Any]"
                ]
            }
        },
        "Alert.serialize": {
            "name": "serialize",
            "location": 119,
            "return": [
                "dict",
                "Dict[str, Any]",
                "cmk.base.events.EventContext",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alert.get_id": {
            "name": "get_id",
            "location": 152,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]",
                "models.Slice"
            ],
            "arguments": {
                "self": [],
                "short": [
                    "str",
                    "Type[Any]"
                ]
            }
        },
        "Alert.get_body": {
            "name": "get_body",
            "location": 155,
            "return": [
                "str",
                "dict",
                "Iterable[models.Entry]",
                "eth.db.diff.DBDiff",
                "int"
            ],
            "arguments": {
                "self": [],
                "history": [
                    "bool",
                    "Sequence[int]",
                    "base.cell.Cell",
                    "str"
                ]
            }
        },
        "Alert.__repr__": {
            "name": "__repr__",
            "location": 164,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alert.from_document": {
            "name": "from_document",
            "location": 170,
            "return": [
                "Dict[str, Any]",
                "models.User",
                "dict",
                "zerver.models.UserGroup"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "doc": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "Alert.from_record": {
            "name": "from_record",
            "location": 203,
            "return": [
                "bool",
                "int",
                "cmk.utils.type_defs.UserId",
                "django.db.models.QuerySet",
                "asgard.clients.chronos.models.job.ChronosJob",
                "dict",
                "services.shop.order.models.order_evenOrderEvenData"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "rec": [
                    "Type[abilian.core.models.Model]",
                    "Sequence[str]",
                    "Callable[..., None]",
                    "Optional[dict]",
                    "Optional[Dict]"
                ]
            }
        },
        "Alert.from_db": {
            "name": "from_db",
            "location": 236,
            "return": [
                "bool",
                "Iterable['Notification']",
                "int",
                "\"PRecord\"",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "str",
                    "Match[str]",
                    "Sequence",
                    "bool",
                    "List[int]",
                    "Dict[str, Any]"
                ],
                "r": [
                    "Union[Dict, Tuple]",
                    "dict"
                ]
            }
        },
        "Alert.is_duplicate": {
            "name": "is_duplicate",
            "location": 242,
            "return": [
                "asgard.models.user.User",
                "Optional[core.models.User]",
                "\"GraphTuple\"",
                "Dict[str, Any]",
                "Tuple[Dict, int]",
                "Dict[str, int]",
                "str",
                "Tuple[List[Any], int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alert.is_correlated": {
            "name": "is_correlated",
            "location": 246,
            "return": [
                "asgard.models.user.User",
                "Optional[core.models.User]",
                "\"GraphTuple\"",
                "Dict[str, Any]",
                "Tuple[Dict, int]",
                "Dict[str, int]",
                "str",
                "Tuple[List[Any], int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alert.is_flapping": {
            "name": "is_flapping",
            "location": 250,
            "return": [
                "bool",
                "int",
                "models.JournalEntryOrigin",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "window": [
                    "Iterable[str]",
                    "dict",
                    "Dict[str, str]",
                    "List[Callable]"
                ],
                "count": [
                    "Iterable[str]",
                    "dict",
                    "Dict[str, str]",
                    "List[Callable]"
                ]
            }
        },
        "Alert.get_status_and_value": {
            "name": "get_status_and_value",
            "location": 253,
            "return": [
                "List[str]",
                "List[Dict[str, Any]]",
                "str",
                "List[Mapping[str, Any]]",
                "Iterable[str]",
                "bool",
                "List[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alert._get_hist_info": {
            "name": "_get_hist_info",
            "location": 256,
            "return": [
                "Optional[str]",
                "Optional[Dict]",
                "bool",
                "Optional[int]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "int"
                ]
            }
        },
        "Alert.deduplicate": {
            "name": "deduplicate",
            "location": 281,
            "return": [
                "List[Dict[str, Any]]",
                "flask.Response",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "duplicate_of": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "Set[str]",
                    "bool"
                ]
            }
        },
        "Alert.update": {
            "name": "update",
            "location": 334,
            "return": [
                "bool",
                "int",
                "List[Dict[str, Any]]",
                "asgard.models.job.ScheduledJob"
            ],
            "arguments": {
                "self": [],
                "correlate_with": [
                    "int",
                    "datetime.timedelta",
                    "recidiviz.persistence.database.schema.state.schema.StateIncarcerationPeriod"
                ]
            }
        },
        "Alert.create": {
            "name": "create",
            "location": 378,
            "return": [
                "List[Dict[str, Any]]",
                "bool",
                "axion.utils.types.AnyCallable",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alert.find_by_id": {
            "name": "find_by_id",
            "location": 413,
            "return": [
                "core.models.User",
                "Union[None, bool]",
                "int",
                "bool"
            ],
            "arguments": {
                "id": [
                    "str",
                    "List[str]",
                    "int",
                    "Optional[str]"
                ],
                "customers": [
                    "str",
                    "List[str]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Alert.is_blackout": {
            "name": "is_blackout",
            "location": 416,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alert.is_suppressed": {
            "name": "is_suppressed",
            "location": 424,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alert.set_status": {
            "name": "set_status",
            "location": 429,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int",
                    "Optional[int]"
                ],
                "text": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "int",
                    "Optional[int]"
                ],
                "timeout": [
                    "str",
                    "Callable"
                ]
            }
        },
        "Alert.tag": {
            "name": "tag",
            "location": 448,
            "return": [
                "str",
                "Optional[List[str]]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "Optional[List]"
                ]
            }
        },
        "Alert.untag": {
            "name": "untag",
            "location": 452,
            "return": [
                "str",
                "bool",
                "Sequence[str]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "str",
                    "dict"
                ]
            }
        },
        "Alert.update_tags": {
            "name": "update_tags",
            "location": 456,
            "return": [
                "str",
                "zerver.models.Realm",
                "list"
            ],
            "arguments": {
                "self": [],
                "tags": [
                    "Dict[str, Any]",
                    "List[str]",
                    "Union[str, Iterable[str]]",
                    "Mapping[str, str]",
                    "dict",
                    "deque"
                ]
            }
        },
        "Alert.update_attributes": {
            "name": "update_attributes",
            "location": 460,
            "return": [
                "str",
                "bool",
                "Set[str]",
                "sqlalchemy.engine.base.Engine",
                "zerver.models.Realm",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "attributes": [
                    "str",
                    "List[Note]"
                ]
            }
        },
        "Alert.delete": {
            "name": "delete",
            "location": 464,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Alert.tag_find_all": {
            "name": "tag_find_all",
            "location": 469,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "query": [
                    "str",
                    "List[str]",
                    "dict",
                    "Optional[List[str]]"
                ],
                "tags": [
                    "str",
                    "List[str]",
                    "dict",
                    "Optional[List[str]]"
                ]
            }
        },
        "Alert.untag_find_all": {
            "name": "untag_find_all",
            "location": 474,
            "return": [
                "Optional[str]",
                "List[dict]",
                "Optional[cmk.utils.type_defs.HostName]",
                "str",
                "bytes",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "query": [
                    "daylighdb.models.User",
                    "Iterable[str]",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "str"
                ],
                "tags": [
                    "daylighdb.models.User",
                    "Iterable[str]",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Alert.update_attributes_find_all": {
            "name": "update_attributes_find_all",
            "location": 479,
            "return": [
                "str",
                "bool",
                "Callable[[Dict], None]",
                "int",
                "dict"
            ],
            "arguments": {
                "query": [
                    "Dict[str, Any]",
                    "dict"
                ],
                "attributes": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "Alert.delete_find_all": {
            "name": "delete_find_all",
            "location": 484,
            "return": [
                "bool",
                "Callable",
                "str"
            ],
            "arguments": {
                "query": [
                    "str",
                    "Optional[int]",
                    "Sized",
                    "Set[str]"
                ]
            }
        },
        "Alert.find_all": {
            "name": "find_all",
            "location": 489,
            "return": [
                "List[str]",
                "float",
                "List[zerver.models.UserProfile]",
                "Dict[str, Dict[str, Any]]",
                "List[excars.models.locations.UserLocation]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "query": [
                    "str",
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "raw_data": [
                    "str",
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "history": [
                    "str",
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "page": [
                    "str",
                    "int",
                    "bool",
                    "Optional[int]"
                ],
                "page_size": [
                    "str",
                    "int",
                    "bool",
                    "Optional[int]"
                ]
            }
        },
        "Alert.get_alert_history": {
            "name": "get_alert_history",
            "location": 493,
            "return": [
                "bool",
                "str",
                "Dict[str, Tuple[str, str]]",
                "List[domain.models.hotel.field.HotelField]"
            ],
            "arguments": {
                "alert": [
                    "int",
                    "bool",
                    "list",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ],
                "page": [
                    "int",
                    "bool",
                    "list",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ],
                "page_size": [
                    "int",
                    "bool",
                    "list",
                    "raiden.utils.TokenNetworkRegistryAddress"
                ]
            }
        },
        "Alert.get_history": {
            "name": "get_history",
            "location": 498,
            "return": [
                "bool",
                "str",
                "Dict[str, Tuple[str, str]]",
                "List[domain.models.hotel.field.HotelField]"
            ],
            "arguments": {
                "query": [
                    "alerta.database.base.Query",
                    "Optional[str]",
                    "int",
                    "str",
                    "bool"
                ],
                "page": [
                    "alerta.database.base.Query",
                    "Optional[str]",
                    "int",
                    "str",
                    "bool"
                ],
                "page_size": [
                    "alerta.database.base.Query",
                    "Optional[str]",
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Alert.get_count": {
            "name": "get_count",
            "location": 503,
            "return": [
                "bool",
                "Sequence[str]",
                "models.User"
            ],
            "arguments": {
                "query": [
                    "alerta.database.base.Query",
                    "List[int]",
                    "models.User",
                    "str"
                ]
            }
        },
        "Alert.get_counts_by_severity": {
            "name": "get_counts_by_severity",
            "location": 508,
            "return": [
                "bool",
                "str",
                "Sequence[str]",
                "int",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "query": [
                    "alerta.database.base.Query",
                    "str",
                    "Optional[str]",
                    "Optional[bool]"
                ]
            }
        },
        "Alert.get_counts_by_status": {
            "name": "get_counts_by_status",
            "location": 513,
            "return": [
                "core.models.User",
                "str",
                "Dict[str, str]",
                "Optional['User']",
                "Optional[bytes]"
            ],
            "arguments": {
                "query": [
                    "alerta.database.base.Query",
                    "str",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "Alert.get_top10_count": {
            "name": "get_top10_count",
            "location": 518,
            "return": [
                "bool",
                "Optional[List[str]]",
                "str"
            ],
            "arguments": {
                "query": [
                    "alerta.database.base.Query",
                    "Query",
                    "Union[int, slice]",
                    "supersemodels.sql_lab.Query",
                    "sqlalchemy.orm.Query",
                    "str",
                    "int"
                ]
            }
        },
        "Alert.get_topn_count": {
            "name": "get_topn_count",
            "location": 522,
            "return": [
                "bool",
                "Optional[cmk.utils.type_defs.SectionName]",
                "int",
                "Sequence[str]",
                "str"
            ],
            "arguments": {
                "query": [
                    "alerta.database.base.Query",
                    "Query",
                    "Union[int, slice]",
                    "supersemodels.sql_lab.Query",
                    "sqlalchemy.orm.Query",
                    "str",
                    "int"
                ],
                "topn": [
                    "alerta.database.base.Query",
                    "Query",
                    "Union[int, slice]",
                    "supersemodels.sql_lab.Query",
                    "sqlalchemy.orm.Query",
                    "str",
                    "int"
                ]
            }
        },
        "Alert.get_top10_flapping": {
            "name": "get_top10_flapping",
            "location": 527,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "query": [
                    "str",
                    "ulauncher.search.Query.Query",
                    "Optional[int]",
                    "triplestore.query.Query",
                    "Optional[dict]",
                    "guillotina.db.orm.interfaces.IBaseObject"
                ]
            }
        },
        "Alert.get_topn_flapping": {
            "name": "get_topn_flapping",
            "location": 531,
            "return": [
                "bool",
                "Optional[cmk.utils.type_defs.SectionName]",
                "int",
                "Sequence[str]",
                "str"
            ],
            "arguments": {
                "query": [
                    "alerta.database.base.Query",
                    "deeplearning.deepsmith.db.session_t",
                    "Dict[str, str]",
                    "supersemodels.sql_lab.Query",
                    "str"
                ],
                "topn": [
                    "alerta.database.base.Query",
                    "deeplearning.deepsmith.db.session_t",
                    "Dict[str, str]",
                    "supersemodels.sql_lab.Query",
                    "str"
                ]
            }
        },
        "Alert.get_top10_standing": {
            "name": "get_top10_standing",
            "location": 536,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "query": [
                    "str",
                    "ulauncher.search.Query.Query",
                    "Optional[int]",
                    "triplestore.query.Query",
                    "Optional[dict]",
                    "guillotina.db.orm.interfaces.IBaseObject"
                ]
            }
        },
        "Alert.get_topn_standing": {
            "name": "get_topn_standing",
            "location": 540,
            "return": [
                "bool",
                "Optional[cmk.utils.type_defs.SectionName]",
                "int",
                "Sequence[str]",
                "str"
            ],
            "arguments": {
                "query": [
                    "alerta.database.base.Query",
                    "deeplearning.deepsmith.db.session_t",
                    "Dict[str, str]",
                    "supersemodels.sql_lab.Query",
                    "str"
                ],
                "topn": [
                    "alerta.database.base.Query",
                    "deeplearning.deepsmith.db.session_t",
                    "Dict[str, str]",
                    "supersemodels.sql_lab.Query",
                    "str"
                ]
            }
        },
        "Alert.get_environments": {
            "name": "get_environments",
            "location": 545,
            "return": [
                "bool",
                "Sequence[str]",
                "models.User"
            ],
            "arguments": {
                "query": [
                    "alerta.database.base.Query",
                    "str",
                    "Optional[str]",
                    "Optional[bool]"
                ]
            }
        },
        "Alert.get_services": {
            "name": "get_services",
            "location": 550,
            "return": [
                "bool",
                "Sequence[str]",
                "models.User"
            ],
            "arguments": {
                "query": [
                    "alerta.database.base.Query",
                    "str",
                    "Optional[str]",
                    "Optional[bool]"
                ]
            }
        },
        "Alert.get_groups": {
            "name": "get_groups",
            "location": 555,
            "return": [
                "bool",
                "Optional[cmk.utils.type_defs.SectionName]",
                "int",
                "Sequence[str]",
                "str"
            ],
            "arguments": {
                "query": [
                    "alerta.database.base.Query",
                    "str",
                    "Optional[str]",
                    "Optional[bool]"
                ]
            }
        },
        "Alert.get_tags": {
            "name": "get_tags",
            "location": 560,
            "return": [
                "str",
                "Tuple[str]",
                "int",
                "ennead.models.user.User",
                "bool"
            ],
            "arguments": {
                "query": [
                    "alerta.database.base.Query",
                    "str",
                    "Dict[str, Dict[str, datetime.datetime]]"
                ]
            }
        },
        "Alert.add_note": {
            "name": "add_note",
            "location": 564,
            "return": [
                "int",
                "Optional[str]",
                "datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str"
                ]
            }
        },
        "Alert.get_alert_notes": {
            "name": "get_alert_notes",
            "location": 581,
            "return": [
                "str",
                "bool",
                "Dict[str, str]",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "str",
                    "Type",
                    "Tuple[str]"
                ],
                "page_size": [
                    "str",
                    "Type",
                    "Tuple[str]"
                ]
            }
        },
        "Alert.delete_note": {
            "name": "delete_note",
            "location": 585,
            "return": [
                "str",
                "int",
                "app.models.GameMember",
                "app.models.course.Course",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "note_id": [
                    "str",
                    "int",
                    "bool",
                    "Optional[float]",
                    "Optional[str]"
                ]
            }
        },
        "Alert.housekeeping": {
            "name": "housekeeping",
            "location": 601,
            "return": [
                "float",
                "List[str]",
                "List[\"TaskNode\"]",
                "Sequence[transfer.models.Order]",
                "Tuple[float, float, float]",
                "List[int]",
                "int"
            ],
            "arguments": {
                "expired_threshold": [
                    "int",
                    "str",
                    "cnaas_nms.db.device.Device"
                ],
                "info_threshold": [
                    "int",
                    "str",
                    "cnaas_nms.db.device.Device"
                ]
            }
        },
        "Alert.from_status": {
            "name": "from_status",
            "location": 608,
            "return": [
                "List[Dict[str, Any]]",
                "bool",
                "int",
                "Counter",
                "Optional[app.models.pimpy.Task]"
            ],
            "arguments": {
                "self": [],
                "status": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "text": [
                    "int",
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "timeout": [
                    "str",
                    "Callable",
                    "Optional[str]"
                ]
            }
        },
        "Alert.from_action": {
            "name": "from_action",
            "location": 636,
            "return": [
                "List[Dict[str, Any]]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "Optional[str]",
                    "zerver.models.Realm"
                ],
                "text": [
                    "int",
                    "List[dict]",
                    "Dict[str, Any]",
                    "str",
                    "bytes",
                    "datetime.timedelta",
                    "Optional[int]",
                    "Optional[bool]"
                ],
                "timeout": [
                    "Optional[str]",
                    "str",
                    "int"
                ]
            }
        },
        "Alert.from_expired": {
            "name": "from_expired",
            "location": 691,
            "return": [
                "dict",
                "Dict[str, Union[int, str]]",
                "Optional[Dict[str, Any]]",
                "Optional[Dict[str, str]]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "List[str]"
                ],
                "timeout": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "Alert.from_timeout": {
            "name": "from_timeout",
            "location": 694,
            "return": [
                "dict",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "list",
                    "Optional[str]"
                ],
                "timeout": [
                    "str",
                    "list",
                    "Optional[str]"
                ]
            }
        }
    },
    "alerta-master/alerta/models/blackout.py": {
        "Blackout.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "bool"
                ]
            }
        },
        "Blackout.status": {
            "name": "status",
            "location": 83,
            "return": [
                "int",
                "raiden.utils.BlockNumber",
                "str",
                "raiden.utils.TokenAmount",
                "pathfinding_service.database.PFSDatabase"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blackout.parse": {
            "name": "parse",
            "location": 93,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "json": [
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "Blackout.serialize": {
            "name": "serialize",
            "location": 117,
            "return": [
                "dict",
                "Dict[str, Any]",
                "cmk.base.events.EventContext",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blackout.__repr__": {
            "name": "__repr__",
            "location": 140,
            "return": [
                "bool",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blackout.from_document": {
            "name": "from_document",
            "location": 169,
            "return": [
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "doc": [
                    "Dict[str, Any]"
                ]
            }
        },
        "Blackout.from_record": {
            "name": "from_record",
            "location": 191,
            "return": [
                "bool",
                "int",
                "cmk.utils.type_defs.UserId",
                "django.db.models.QuerySet",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "rec": [
                    "Sequence[str]",
                    "int"
                ]
            }
        },
        "Blackout.from_db": {
            "name": "from_db",
            "location": 213,
            "return": [
                "bool",
                "Iterable['Notification']",
                "int",
                "\"PRecord\"",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "str",
                    "Match[str]",
                    "Sequence",
                    "bool",
                    "List[int]",
                    "Dict[str, Any]"
                ],
                "r": [
                    "Union[Dict, Tuple]",
                    "dict"
                ]
            }
        },
        "Blackout.create": {
            "name": "create",
            "location": 220,
            "return": [
                "List[Dict[str, Any]]",
                "bool",
                "axion.utils.types.AnyCallable",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blackout.find_by_id": {
            "name": "find_by_id",
            "location": 225,
            "return": [
                "Union[None, bool]",
                "int",
                "bool"
            ],
            "arguments": {
                "id": [
                    "str",
                    "List[str]",
                    "int",
                    "Optional[str]"
                ],
                "customers": [
                    "str",
                    "List[str]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Blackout.find_all": {
            "name": "find_all",
            "location": 229,
            "return": [
                "List[str]",
                "float",
                "Dict[str, Dict[str, Any]]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "query": [
                    "int",
                    "alerta.database.base.Query"
                ],
                "page": [
                    "int",
                    "alerta.database.base.Query"
                ],
                "page_size": [
                    "int",
                    "alerta.database.base.Query"
                ]
            }
        },
        "Blackout.count": {
            "name": "count",
            "location": 233,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "query": [
                    "str",
                    "int",
                    "List[int]",
                    "float",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "Blackout.update": {
            "name": "update",
            "location": 236,
            "return": [
                "Dict[str, Any]",
                "int",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Blackout.delete": {
            "name": "delete",
            "location": 243,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/alerta/models/customer.py": {
        "Customer.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "int",
                    "float",
                    "Type[\"SerializationDialect\"]",
                    "str"
                ],
                "customer": [
                    "int",
                    "float",
                    "Type[\"SerializationDialect\"]",
                    "str"
                ]
            }
        },
        "Customer.parse": {
            "name": "parse",
            "location": 20,
            "return": [
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "json": [
                    "dict"
                ]
            }
        },
        "Customer.serialize": {
            "name": "serialize",
            "location": 28,
            "return": [
                "dict",
                "Dict[str, Any]",
                "cmk.base.events.EventContext",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Customer.__repr__": {
            "name": "__repr__",
            "location": 36,
            "return": [
                "bool",
                "Sequence",
                "Optional[Union[Any, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Customer.from_document": {
            "name": "from_document",
            "location": 41,
            "return": [
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "doc": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "Customer.from_record": {
            "name": "from_record",
            "location": 49,
            "return": [
                "str",
                "int",
                "Dict[str, Union[str, Set]]",
                "Dict[str, keanu.vertex.base.Vertex]",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "rec": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Customer.from_db": {
            "name": "from_db",
            "location": 57,
            "return": [
                "bool",
                "Iterable['Notification']",
                "int",
                "\"PRecord\"",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "str",
                    "Match[str]",
                    "Sequence",
                    "bool",
                    "List[int]",
                    "Dict[str, Any]"
                ],
                "r": [
                    "Union[Dict, Tuple]",
                    "dict"
                ]
            }
        },
        "Customer.create": {
            "name": "create",
            "location": 63,
            "return": [
                "List[Dict[str, Any]]",
                "axion.utils.types.AnyCallable",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Customer.find_by_id": {
            "name": "find_by_id",
            "location": 67,
            "return": [
                "Union[None, bool]",
                "int",
                "bool"
            ],
            "arguments": {
                "id": [
                    "str"
                ]
            }
        },
        "Customer.find_all": {
            "name": "find_all",
            "location": 71,
            "return": [
                "List[str]",
                "float",
                "Dict[str, Dict[str, Any]]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "query": [
                    "raiden.utils.Dict",
                    "myaku.datastore.database.ArticleIndexDb",
                    "int",
                    "alerta.database.base.Query"
                ],
                "page": [
                    "raiden.utils.Dict",
                    "myaku.datastore.database.ArticleIndexDb",
                    "int",
                    "alerta.database.base.Query"
                ],
                "page_size": [
                    "raiden.utils.Dict",
                    "myaku.datastore.database.ArticleIndexDb",
                    "int",
                    "alerta.database.base.Query"
                ]
            }
        },
        "Customer.count": {
            "name": "count",
            "location": 75,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "query": [
                    "str",
                    "int",
                    "List[int]",
                    "float",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "Customer.update": {
            "name": "update",
            "location": 78,
            "return": [
                "Dict[str, Any]",
                "int",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Customer.delete": {
            "name": "delete",
            "location": 81,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Customer.lookup": {
            "name": "lookup",
            "location": 85,
            "return": [
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "login": [
                    "str",
                    "List[str]",
                    "bytes",
                    "int",
                    "Match[str]"
                ],
                "groups": [
                    "str",
                    "List[str]",
                    "bytes",
                    "int",
                    "Match[str]"
                ]
            }
        }
    },
    "alerta-master/alerta/models/enums.py": {
        "Scope.init_app": {
            "name": "init_app",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "app": []
            }
        },
        "Scope.create": {
            "name": "create",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "dict",
                    "T"
                ],
                "scope": [
                    "str",
                    "Optional[str]",
                    "Union[str, Pattern[str]]",
                    "int"
                ]
            }
        },
        "Scope.find_all": {
            "name": "find_all",
            "location": 103,
            "return": [
                "List[str]",
                "bool",
                "str",
                "Optional[Union[int, str]]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ]
            }
        },
        "Scope.action": {
            "name": "action",
            "location": 107,
            "return": [
                "bytes",
                "Tuple[int, int]",
                "List[Tuple[int, int]]",
                "float",
                "str",
                "Dict[str, int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.resource": {
            "name": "resource",
            "location": 111,
            "return": [
                "Optional[str]",
                "Optional[T]",
                "Optional[List[str]]",
                "int",
                "Optional[bool]",
                "Optional[Sequence[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.type": {
            "name": "type",
            "location": 118,
            "return": [
                "Optional[str]",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Scope.from_str": {
            "name": "from_str",
            "location": 125,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "action": [
                    "str",
                    "bytes",
                    "Set[str]"
                ],
                "resource": [
                    "str"
                ],
                "type": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "alerta-master/alerta/models/group.py": {
        "GroupUser.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Optional[List[str]]"
                ],
                "login": [
                    "str",
                    "int",
                    "Optional[bool]",
                    "Optional[str]",
                    "bool"
                ],
                "name": [
                    "str"
                ],
                "status": [
                    "str",
                    "int",
                    "Optional[bool]",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "GroupUser.serialize": {
            "name": "serialize",
            "location": 20,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "Dict[str, Dict[str, str]]",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupUser.from_document": {
            "name": "from_document",
            "location": 30,
            "return": [
                "Optional[Dict[str, Any]]",
                "Optional[dict]",
                "django.db.models.Q.uerySet"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "doc": [
                    "Dict[str, Any]",
                    "Type[T]"
                ]
            }
        },
        "GroupUser.from_record": {
            "name": "from_record",
            "location": 39,
            "return": [
                "bool",
                "Optional[str]",
                "cmk.utils.type_defs.UserId",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "rec": [
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "GroupUser.from_db": {
            "name": "from_db",
            "location": 48,
            "return": [
                "bool",
                "Iterable['Notification']",
                "int",
                "\"PRecord\"",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "str",
                    "Match[str]",
                    "Sequence",
                    "bool",
                    "List[int]",
                    "Dict[str, Any]"
                ],
                "r": [
                    "Union[Dict, Tuple]",
                    "dict"
                ]
            }
        },
        "GroupUsers.__init__": {
            "name": "__init__",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Dict[str, str]"
                ],
                "users": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "GroupUsers.find_by_id": {
            "name": "find_by_id",
            "location": 62,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool"
            ],
            "arguments": {
                "id": [
                    "str",
                    "Optional[bool]",
                    "Optional[int]"
                ]
            }
        },
        "Group.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]"
                ],
                "text": [
                    "bool",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "Group.parse": {
            "name": "parse",
            "location": 81,
            "return": [
                "Dict[str, Any]",
                "int",
                "Type",
                "dict",
                "Dict[str, List[Callable]]",
                "Dict[str, Iterable[Any]]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "json": [
                    "Dict[str, str]",
                    "dict",
                    "bool"
                ]
            }
        },
        "Group.serialize": {
            "name": "serialize",
            "location": 89,
            "return": [
                "dict",
                "Dict[str, Any]",
                "cmk.base.events.EventContext",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.__repr__": {
            "name": "__repr__",
            "location": 98,
            "return": [
                "dict",
                "Dict[str, str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.from_document": {
            "name": "from_document",
            "location": 103,
            "return": [
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "doc": [
                    "Dict[str, Any]"
                ]
            }
        },
        "Group.from_record": {
            "name": "from_record",
            "location": 112,
            "return": [
                "Mapping[str, Any]",
                "Dict[str, Any]",
                "str",
                "Dict[str, Union[str, Set]]",
                "Exception"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "rec": [
                    "int",
                    "bytes",
                    "dict",
                    "Optional[str]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Group.from_db": {
            "name": "from_db",
            "location": 121,
            "return": [
                "bool",
                "Iterable['Notification']",
                "int",
                "\"PRecord\"",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "str",
                    "Match[str]",
                    "Sequence",
                    "bool",
                    "List[int]",
                    "Dict[str, Any]"
                ],
                "r": [
                    "Union[Dict, Tuple]",
                    "dict"
                ]
            }
        },
        "Group.create": {
            "name": "create",
            "location": 127,
            "return": [
                "List[Dict[str, Any]]",
                "bool",
                "axion.utils.types.AnyCallable",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.find_by_id": {
            "name": "find_by_id",
            "location": 131,
            "return": [
                "Union[None, bool]",
                "int",
                "bool"
            ],
            "arguments": {
                "id": [
                    "str"
                ]
            }
        },
        "Group.find_all": {
            "name": "find_all",
            "location": 135,
            "return": [
                "List[str]",
                "float",
                "Dict[str, Dict[str, Any]]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "query": [
                    "str",
                    "int"
                ],
                "page": [
                    "str",
                    "int"
                ],
                "page_size": [
                    "str",
                    "int"
                ]
            }
        },
        "Group.count": {
            "name": "count",
            "location": 139,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "query": [
                    "str",
                    "int",
                    "List[int]",
                    "float",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "Group.update": {
            "name": "update",
            "location": 142,
            "return": [
                "Dict[str, Any]",
                "int",
                "List[Dict[str, Any]]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Group.add_user": {
            "name": "add_user",
            "location": 145,
            "return": [
                "Callable[[Dict], None]",
                "bool",
                "Optional[cmk.utils.type_defs.SectionName]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str"
                ]
            }
        },
        "Group.remove_user": {
            "name": "remove_user",
            "location": 148,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user_id": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Group.delete": {
            "name": "delete",
            "location": 151,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/alerta/models/heartbeat.py": {
        "Heartbeat.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "origin": [
                    "str",
                    "Optional[cmk.utils.type_defs.HostName]",
                    "Union[str, Callable]"
                ],
                "tags": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]",
                    "Optional[\"Scope\"]"
                ],
                "create_time": [
                    "str",
                    "datetime.datetime",
                    "Optional[str]",
                    "datetime.datetime.datetime"
                ],
                "timeout": [
                    "Optional[bool]",
                    "int",
                    "str",
                    "bool"
                ],
                "customer": [
                    "bool",
                    "str",
                    "Dict[str, Tuple[str, str]]",
                    "List[str]",
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "Heartbeat.status": {
            "name": "status",
            "location": 65,
            "return": [
                "int",
                "raiden.utils.BlockNumber",
                "str",
                "raiden.utils.TokenAmount",
                "pathfinding_service.database.PFSDatabase"
            ],
            "arguments": {
                "self": []
            }
        },
        "Heartbeat.parse": {
            "name": "parse",
            "location": 73,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "json": [
                    "Union[Dict, Tuple]"
                ]
            }
        },
        "Heartbeat.serialize": {
            "name": "serialize",
            "location": 94,
            "return": [
                "dict",
                "Dict[str, Any]",
                "cmk.base.events.EventContext",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Heartbeat.__repr__": {
            "name": "__repr__",
            "location": 112,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Heartbeat.from_document": {
            "name": "from_document",
            "location": 117,
            "return": [
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "doc": [
                    "Dict[str, Any]"
                ]
            }
        },
        "Heartbeat.from_record": {
            "name": "from_record",
            "location": 133,
            "return": [
                "bool",
                "int",
                "cmk.utils.type_defs.UserId",
                "django.db.models.QuerySet",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "rec": [
                    "Dict[str, Any]",
                    "int",
                    "type",
                    "List[Dict]"
                ]
            }
        },
        "Heartbeat.from_db": {
            "name": "from_db",
            "location": 149,
            "return": [
                "bool",
                "Iterable['Notification']",
                "int",
                "\"PRecord\"",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "str",
                    "Match[str]",
                    "Sequence",
                    "bool",
                    "List[int]",
                    "Dict[str, Any]"
                ],
                "r": [
                    "Union[Dict, Tuple]",
                    "dict"
                ]
            }
        },
        "Heartbeat.create": {
            "name": "create",
            "location": 156,
            "return": [
                "bool",
                "axion.utils.types.AnyCallable",
                "int",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Heartbeat.find_by_id": {
            "name": "find_by_id",
            "location": 161,
            "return": [
                "Union[None, bool]",
                "int",
                "bool"
            ],
            "arguments": {
                "id": [
                    "str",
                    "List[str]",
                    "int",
                    "Optional[str]"
                ],
                "customers": [
                    "str",
                    "List[str]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "Heartbeat.find_all": {
            "name": "find_all",
            "location": 166,
            "return": [
                "List[str]",
                "float",
                "Dict[str, Dict[str, Any]]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "query": [
                    "int",
                    "alerta.database.base.Query"
                ],
                "page": [
                    "int",
                    "alerta.database.base.Query"
                ],
                "page_size": [
                    "int",
                    "alerta.database.base.Query"
                ]
            }
        },
        "Heartbeat.find_all_by_status": {
            "name": "find_all_by_status",
            "location": 170,
            "return": [
                "List[str]",
                "bool",
                "Dict[str, Any]",
                "List[\"TaskNode\"]",
                "List[cmk.base.api.agent_based.type_defs.CheckPlugin]"
            ],
            "arguments": {
                "status": [
                    "bool",
                    "int",
                    "raiden.utils.Address",
                    "str",
                    "datetime.tzinfo"
                ],
                "query": [
                    "bool",
                    "int",
                    "raiden.utils.Address",
                    "str",
                    "datetime.tzinfo"
                ],
                "page": [
                    "bool",
                    "int",
                    "raiden.utils.Address",
                    "str",
                    "datetime.tzinfo"
                ],
                "page_size": [
                    "bool",
                    "int",
                    "raiden.utils.Address",
                    "str",
                    "datetime.tzinfo"
                ]
            }
        },
        "Heartbeat.count": {
            "name": "count",
            "location": 174,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "query": [
                    "str",
                    "int",
                    "List[int]",
                    "float",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "Heartbeat.delete": {
            "name": "delete",
            "location": 178,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/alerta/models/history.py": {
        "History.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "bool"
                ],
                "event": [
                    "bool",
                    "Optional[Dict[str, Any]]",
                    "Sequence[str]"
                ]
            }
        },
        "History.serialize": {
            "name": "serialize",
            "location": 21,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "History.__repr__": {
            "name": "__repr__",
            "location": 36,
            "return": [
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "History.from_document": {
            "name": "from_document",
            "location": 41,
            "return": [
                "Dict[str, Any]",
                "int",
                "str",
                "Exception",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "doc": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "History.from_record": {
            "name": "from_record",
            "location": 56,
            "return": [
                "str",
                "int",
                "Dict[str, Union[str, Set]]",
                "Dict[str, str]",
                "cmk.utils.type_defs.UserId",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "rec": [
                    "bool"
                ]
            }
        },
        "History.from_db": {
            "name": "from_db",
            "location": 71,
            "return": [
                "bool",
                "Iterable['Notification']",
                "int",
                "\"PRecord\"",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "str",
                    "Match[str]",
                    "Sequence",
                    "bool",
                    "List[int]",
                    "Dict[str, Any]"
                ],
                "r": [
                    "Union[Dict, Tuple]",
                    "dict"
                ]
            }
        },
        "RichHistory.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[int]",
                    "int",
                    "bool"
                ],
                "event": [
                    "int",
                    "raiden.utils.Dict[raiden.transfer.identifiers.QueueIdentifier, raiden.utils.List[raiden.messages.abstracMessage]]"
                ]
            }
        },
        "RichHistory.serialize": {
            "name": "serialize",
            "location": 102,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RichHistory.__repr__": {
            "name": "__repr__",
            "location": 133,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RichHistory.from_document": {
            "name": "from_document",
            "location": 140,
            "return": [
                "bool",
                "Optional[str]",
                "Dict[str, Any]",
                "Set[int]",
                "float"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "doc": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "RichHistory.from_record": {
            "name": "from_record",
            "location": 163,
            "return": [
                "Awaitable",
                "bool",
                "Mapping[str, Any]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "rec": [
                    "cmk.utils.type_defs.HostAddress",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "RichHistory.from_db": {
            "name": "from_db",
            "location": 186,
            "return": [
                "bool",
                "Iterable['Notification']",
                "int",
                "\"PRecord\"",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "str",
                    "Match[str]",
                    "Sequence",
                    "bool",
                    "List[int]",
                    "Dict[str, Any]"
                ],
                "r": [
                    "Union[Dict, Tuple]",
                    "dict"
                ]
            }
        }
    },
    "alerta-master/alerta/models/key.py": {
        "ApiKey.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "bool",
                    "list",
                    "datetime.datetime",
                    "List[int]"
                ],
                "scopes": [
                    "str",
                    "datetime.datetime",
                    "Dict[str, Any]",
                    "int"
                ],
                "text": [
                    "str",
                    "bool",
                    "list",
                    "datetime.datetime",
                    "List[int]"
                ],
                "expire_time": [
                    "datetime.datetime",
                    "datetime.date",
                    "Optional[datetime.date]",
                    "Optional[datetime.datetime]",
                    "int",
                    "Optional[float]"
                ],
                "customer": [
                    "str",
                    "bool",
                    "list",
                    "datetime.datetime",
                    "List[int]"
                ]
            }
        },
        "ApiKey.type": {
            "name": "type",
            "location": 36,
            "return": [
                "str",
                "Dict[str, type]",
                "Mapping[str, Any]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiKey.status": {
            "name": "status",
            "location": 40,
            "return": [
                "dict",
                "cmk.utils.type_defs.UserId",
                "bytes",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiKey.parse": {
            "name": "parse",
            "location": 44,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "json": [
                    "dict",
                    "MutableMapping"
                ]
            }
        },
        "ApiKey.serialize": {
            "name": "serialize",
            "location": 63,
            "return": [
                "str",
                "dict",
                "Union[str, Dict]",
                "cmk.base.events.EventContext"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiKey.__repr__": {
            "name": "__repr__",
            "location": 79,
            "return": [
                "int",
                "List[str]",
                "Dict[str, Any]",
                "cmk.base.events.EventContext"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiKey.from_document": {
            "name": "from_document",
            "location": 84,
            "return": [
                "List[str]",
                "Optional[int]",
                "Optional[core.models.User]",
                "str",
                "bool",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "doc": [
                    "Dict[str, Any]",
                    "Type[T]",
                    "dict"
                ]
            }
        },
        "ApiKey.from_record": {
            "name": "from_record",
            "location": 99,
            "return": [
                "str",
                "dict",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "rec": [
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "ApiKey.from_db": {
            "name": "from_db",
            "location": 113,
            "return": [
                "bool",
                "Iterable['Notification']",
                "int",
                "\"PRecord\"",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "str",
                    "Match[str]",
                    "Sequence",
                    "bool",
                    "List[int]",
                    "Dict[str, Any]"
                ],
                "r": [
                    "Union[Dict, Tuple]",
                    "dict"
                ]
            }
        },
        "ApiKey.create": {
            "name": "create",
            "location": 119,
            "return": [
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiKey.find_by_id": {
            "name": "find_by_id",
            "location": 126,
            "return": [
                "Optional[str]",
                "dict",
                "games.models.Game"
            ],
            "arguments": {
                "key": [
                    "str",
                    "dict",
                    "bytes",
                    "Dict[str, str]",
                    "bool"
                ],
                "user": [
                    "str",
                    "dict",
                    "bytes",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "ApiKey.find_all": {
            "name": "find_all",
            "location": 133,
            "return": [
                "dict",
                "int",
                "Optional[Dict[str, Any]]",
                "Dict[str, str]",
                "games.models.Game",
                "Dict[str, Type[Any]]"
            ],
            "arguments": {
                "query": [
                    "Optional[str]",
                    "dict",
                    "Dict[str, Any]"
                ],
                "page": [
                    "Optional[str]",
                    "dict",
                    "Dict[str, Any]"
                ],
                "page_size": [
                    "Optional[str]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "ApiKey.count": {
            "name": "count",
            "location": 140,
            "return": [
                "Optional[Dict[str, Any]]",
                "List[bytes]",
                "Optional[str]"
            ],
            "arguments": {
                "query": [
                    "MutableMapping",
                    "Dict[str, Any]",
                    "bool",
                    "List[int]",
                    "str"
                ]
            }
        },
        "ApiKey.find_by_user": {
            "name": "find_by_user",
            "location": 144,
            "return": [
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "user": [
                    "dict",
                    "tracim.models.auth.User",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "ApiKey.update": {
            "name": "update",
            "location": 150,
            "return": [
                "Dict[str, Any]",
                "int",
                "List[str]",
                "bytes",
                "Optional[Mapping[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiKey.delete": {
            "name": "delete",
            "location": 154,
            "return": [
                "str",
                "Union[str, \"DatabaseURL\"]",
                "Dict[str, str]",
                "core.models.GroupingKey"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiKey.verify_key": {
            "name": "verify_key",
            "location": 161,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "Optional[bool]",
                "float"
            ],
            "arguments": {
                "key": [
                    "bytes",
                    "str",
                    "Sequence[Hashable]",
                    "List[Dict]",
                    "Union[str, bytes]"
                ]
            }
        }
    },
    "alerta-master/alerta/models/metrics.py": {
        "timer": {
            "name": "timer",
            "location": 253,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "metric": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Gauge.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "group": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Iterable[str]",
                    "MutableMapping[str, Any]"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "title": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Iterable[str]",
                    "MutableMapping[str, Any]"
                ],
                "description": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Iterable[str]",
                    "MutableMapping[str, Any]"
                ],
                "value": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "Gauge.serialize": {
            "name": "serialize",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "format": [
                    "str"
                ]
            }
        },
        "Gauge.__repr__": {
            "name": "__repr__",
            "location": 37,
            "return": [
                "int",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Gauge.from_document": {
            "name": "from_document",
            "location": 43,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "doc": [
                    "Dict[str, Any]",
                    "Type[T]",
                    "dict"
                ]
            }
        },
        "Gauge.from_record": {
            "name": "from_record",
            "location": 53,
            "return": [
                "type",
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "rec": [
                    "dict",
                    "Iterable['adi.Instance']",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "Gauge.from_db": {
            "name": "from_db",
            "location": 63,
            "return": [
                "bool",
                "Iterable['Notification']",
                "int",
                "\"PRecord\"",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "str",
                    "Match[str]",
                    "Sequence",
                    "bool",
                    "List[int]",
                    "Dict[str, Any]"
                ],
                "r": [
                    "Union[Dict, Tuple]",
                    "dict"
                ]
            }
        },
        "Gauge.set": {
            "name": "set",
            "location": 71,
            "return": [
                "str",
                "bool",
                "Optional[bytes]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        },
        "Gauge.find_all": {
            "name": "find_all",
            "location": 76,
            "return": [
                "List[str]",
                "float",
                "Dict[str, Dict[str, Any]]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type[django.db.models.base.Model]",
                    "bool"
                ]
            }
        },
        "Counter.__init__": {
            "name": "__init__",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "group": [
                    "bool",
                    "List[List[str]]",
                    "Optional[str]",
                    "List[str]",
                    "int"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "title": [
                    "bool",
                    "List[List[str]]",
                    "Optional[str]",
                    "List[str]",
                    "int"
                ],
                "description": [
                    "bool",
                    "List[List[str]]",
                    "Optional[str]",
                    "List[str]",
                    "int"
                ],
                "count": [
                    "bool",
                    "List[List[str]]",
                    "Optional[str]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "Counter.serialize": {
            "name": "serialize",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "format": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "Counter.__repr__": {
            "name": "__repr__",
            "location": 110,
            "return": [
                "int",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Counter.from_document": {
            "name": "from_document",
            "location": 116,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "doc": [
                    "Dict[str, Any]",
                    "Type[T]"
                ]
            }
        },
        "Counter.from_record": {
            "name": "from_record",
            "location": 126,
            "return": [
                "type",
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "rec": [
                    "Iterable['adi.Instance']",
                    "dict"
                ]
            }
        },
        "Counter.from_db": {
            "name": "from_db",
            "location": 136,
            "return": [
                "bool",
                "Iterable['Notification']",
                "int",
                "\"PRecord\"",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "str",
                    "Match[str]",
                    "Sequence",
                    "bool",
                    "List[int]",
                    "Dict[str, Any]"
                ],
                "r": [
                    "Union[Dict, Tuple]",
                    "dict"
                ]
            }
        },
        "Counter.inc": {
            "name": "inc",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "count": []
            }
        },
        "Counter.find_all": {
            "name": "find_all",
            "location": 155,
            "return": [
                "List[str]",
                "float",
                "Dict[str, Dict[str, Any]]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type[django.db.models.base.Model]",
                    "bool"
                ]
            }
        },
        "Timer.__init__": {
            "name": "__init__",
            "location": 161,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "group": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Iterable[str]"
                ],
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "title": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Iterable[str]"
                ],
                "description": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Iterable[str]"
                ],
                "count": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Iterable[str]"
                ],
                "total_time": [
                    "Optional[float]",
                    "float",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "Timer.serialize": {
            "name": "serialize",
            "location": 173,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "format": [
                    "str",
                    "Optional[str]",
                    "Optional[bool]"
                ]
            }
        },
        "Timer.__repr__": {
            "name": "__repr__",
            "location": 194,
            "return": [
                "int",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.from_document": {
            "name": "from_document",
            "location": 200,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "doc": [
                    "Dict[str, Any]",
                    "Type[T]"
                ]
            }
        },
        "Timer.from_record": {
            "name": "from_record",
            "location": 211,
            "return": [
                "type",
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "rec": [
                    "Iterable['adi.Instance']",
                    "dict",
                    "Callable"
                ]
            }
        },
        "Timer.from_db": {
            "name": "from_db",
            "location": 222,
            "return": [
                "bool",
                "Iterable['Notification']",
                "int",
                "\"PRecord\"",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "str",
                    "Match[str]",
                    "Sequence",
                    "bool",
                    "List[int]",
                    "Dict[str, Any]"
                ],
                "r": [
                    "Union[Dict, Tuple]",
                    "dict"
                ]
            }
        },
        "Timer._time_in_millis": {
            "name": "_time_in_millis",
            "location": 230,
            "return": [
                "int",
                "float",
                "dict",
                "bool",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.start_timer": {
            "name": "start_timer",
            "location": 233,
            "return": [
                "bool",
                "int",
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.stop_timer": {
            "name": "stop_timer",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "start": [
                    "Callable",
                    "str",
                    "int",
                    "List[str]",
                    "dict",
                    "Optional[int]"
                ],
                "count": [
                    "Callable",
                    "str",
                    "int",
                    "List[str]",
                    "dict",
                    "Optional[int]"
                ]
            }
        },
        "Timer.find_all": {
            "name": "find_all",
            "location": 249,
            "return": [
                "List[str]",
                "float",
                "Dict[str, Dict[str, Any]]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Type[django.db.models.base.Model]",
                    "bool"
                ]
            }
        },
        "timer.decorated": {
            "name": "decorated",
            "location": 254,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "timer.decorated.wrapped": {
            "name": "wrapped",
            "location": 256,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {}
        }
    },
    "alerta-master/alerta/models/note.py": {
        "Note.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "text": [
                    "str",
                    "bool",
                    "int",
                    "Iterable[str]",
                    "zerver.models.Realm"
                ],
                "user": [
                    "str",
                    "bool",
                    "int",
                    "Iterable[str]",
                    "zerver.models.Realm"
                ],
                "note_type": [
                    "str",
                    "Optional[utils.TypingInfo]",
                    "Dict[str, str]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Note.parse": {
            "name": "parse",
            "location": 31,
            "return": [
                "bool",
                "int",
                "Union[type, Tuple[type, ...]]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "json": [
                    "dict"
                ]
            }
        },
        "Note.serialize": {
            "name": "serialize",
            "location": 45,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Note.__repr__": {
            "name": "__repr__",
            "location": 67,
            "return": [
                "bool",
                "int",
                "dict",
                "Dict[str, Any]",
                "Type"
            ],
            "arguments": {
                "self": []
            }
        },
        "Note.from_document": {
            "name": "from_document",
            "location": 73,
            "return": [
                "Dict[str, Any]",
                "models.User",
                "dict",
                "zerver.models.UserGroup"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "doc": [
                    "Dict[str, Any]"
                ]
            }
        },
        "Note.from_record": {
            "name": "from_record",
            "location": 87,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str",
                "Exception",
                "tartare.core.models.Job"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "rec": [
                    "type",
                    "Optional[str]"
                ]
            }
        },
        "Note.from_db": {
            "name": "from_db",
            "location": 101,
            "return": [
                "bool",
                "Iterable['Notification']",
                "int",
                "\"PRecord\"",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "str",
                    "Match[str]",
                    "Sequence",
                    "bool",
                    "List[int]",
                    "Dict[str, Any]"
                ],
                "r": [
                    "Union[Dict, Tuple]",
                    "dict"
                ]
            }
        },
        "Note.create": {
            "name": "create",
            "location": 107,
            "return": [
                "List[Dict[str, Any]]",
                "bool",
                "axion.utils.types.AnyCallable",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Note.from_alert": {
            "name": "from_alert",
            "location": 111,
            "return": [
                "str",
                "List[int]",
                "List[dict]",
                "bool"
            ],
            "arguments": {
                "alert": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "Note.find_by_id": {
            "name": "find_by_id",
            "location": 129,
            "return": [
                "core.models.User",
                "Union[None, bool]",
                "int",
                "bool"
            ],
            "arguments": {
                "id": [
                    "str"
                ]
            }
        },
        "Note.find_all": {
            "name": "find_all",
            "location": 133,
            "return": [
                "List[str]",
                "float",
                "List[zerver.models.UserProfile]",
                "Dict[str, Dict[str, Any]]",
                "List[excars.models.locations.UserLocation]",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "query": [
                    "alerta.database.base.Query",
                    "models.Form700Filing",
                    "deeplearning.ml4pl.models.batch.BatchIterator",
                    "zerver.models.Realm",
                    "deeplearning.ml4pl.models.epoch.Type",
                    "deeplearning.ml4pl.models.logger.Logger",
                    "Type",
                    "id3c.db.session.DatabaseSession"
                ]
            }
        },
        "Note.update": {
            "name": "update",
            "location": 136,
            "return": [
                "Dict[str, Any]",
                "int",
                "List[Dict[str, Any]]",
                "asgard.models.job.ScheduledJob",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Note.delete": {
            "name": "delete",
            "location": 139,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Note.delete_by_id": {
            "name": "delete_by_id",
            "location": 143,
            "return": [
                "bool",
                "str",
                "Union[str, Pattern]",
                "Iterable[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "id": [
                    "Optional[int]",
                    "Iterable[int]",
                    "int",
                    "List[int]",
                    "str"
                ]
            }
        }
    },
    "alerta-master/alerta/models/permission.py": {
        "Permission.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "match": [
                    "int",
                    "float",
                    "Type[\"SerializationDialect\"]",
                    "str"
                ],
                "scopes": [
                    "int",
                    "Tuple[float, float]",
                    "Callable",
                    "float"
                ]
            }
        },
        "Permission.parse": {
            "name": "parse",
            "location": 23,
            "return": [
                "Optional[str]",
                "float",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "json": [
                    "dict"
                ]
            }
        },
        "Permission.serialize": {
            "name": "serialize",
            "location": 34,
            "return": [
                "dict",
                "Dict[str, Any]",
                "cmk.base.events.EventContext",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Permission.__repr__": {
            "name": "__repr__",
            "location": 42,
            "return": [
                "str",
                "dict",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "Permission.from_document": {
            "name": "from_document",
            "location": 46,
            "return": [
                "Dict[Any, bool]",
                "Optional[dict]",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "doc": [
                    "Dict[str, Any]"
                ]
            }
        },
        "Permission.from_record": {
            "name": "from_record",
            "location": 54,
            "return": [
                "int",
                "django.db.models.QuerySet",
                "Dict[str, Any]",
                "bool",
                "Dict[UserID, services.user.transfer.models.User]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "rec": [
                    "dict"
                ]
            }
        },
        "Permission.from_db": {
            "name": "from_db",
            "location": 62,
            "return": [
                "bool",
                "Iterable['Notification']",
                "int",
                "\"PRecord\"",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "str",
                    "Match[str]",
                    "Sequence",
                    "bool",
                    "List[int]",
                    "Dict[str, Any]"
                ],
                "r": [
                    "Union[Dict, Tuple]",
                    "dict"
                ]
            }
        },
        "Permission.create": {
            "name": "create",
            "location": 68,
            "return": [
                "bool",
                "daylighdb.models.Photo",
                "daylighdb.models.User"
            ],
            "arguments": {
                "self": []
            }
        },
        "Permission.find_by_id": {
            "name": "find_by_id",
            "location": 72,
            "return": [
                "Dict[str, Any]",
                "zerver.models.UserGroup",
                "Tuple[int, List[str]]",
                "amundsen_application.models.user.User"
            ],
            "arguments": {
                "id": [
                    "str"
                ]
            }
        },
        "Permission.find_all": {
            "name": "find_all",
            "location": 76,
            "return": [
                "List[str]",
                "str",
                "set",
                "Dict[str, Set[str]]",
                "List[List[str]]",
                "object"
            ],
            "arguments": {
                "query": [
                    "int",
                    "alerta.database.base.Query"
                ],
                "page": [
                    "int",
                    "alerta.database.base.Query"
                ],
                "page_size": [
                    "int",
                    "alerta.database.base.Query"
                ]
            }
        },
        "Permission.count": {
            "name": "count",
            "location": 80,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "query": [
                    "str",
                    "int",
                    "List[int]",
                    "float",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "Permission.update": {
            "name": "update",
            "location": 83,
            "return": [
                "bool",
                "Union[eth.rlp.transactions.BaseTransaction, eth.utils.spoof.SpoofTransaction]",
                "dict",
                "zerver.models.Realm",
                "Optional[str]",
                "daylighdb.models.Photo"
            ],
            "arguments": {
                "self": []
            }
        },
        "Permission.delete": {
            "name": "delete",
            "location": 86,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Permission.is_in_scope": {
            "name": "is_in_scope",
            "location": 90,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "List[alerta.models.enums.Scope]",
                    "Type[recidiviz.persistence.database.database_entity.DatabaseEntity]",
                    "Type"
                ],
                "want_scope": [
                    "str",
                    "Type[recidiviz.persistence.database.database_entity.DatabaseEntity]"
                ],
                "have_scopes": [
                    "List[alerta.models.enums.Scope]"
                ]
            }
        },
        "Permission.lookup": {
            "name": "lookup",
            "location": 113,
            "return": [
                "bool",
                "int",
                "Iterable",
                "List[str]",
                "List[Dict[str, str]]",
                "Optional[dict]",
                "str",
                "List[List[str]]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "login": [
                    "str",
                    "List[str]",
                    "T",
                    "Callable"
                ],
                "roles": [
                    "str",
                    "List[str]",
                    "T",
                    "Callable"
                ]
            }
        }
    },
    "alerta-master/alerta/models/switch.py": {
        "SwitchState.to_state": {
            "name": "to_state",
            "location": 9,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "string": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "SwitchState.to_string": {
            "name": "to_string",
            "location": 13,
            "return": [
                "str",
                "float",
                "Optional[List[str]]",
                "Optional[str]"
            ],
            "arguments": {
                "state": [
                    "List[str]",
                    "int",
                    "Iterable[Any]",
                    "str",
                    "Iterator[str]",
                    "Optional[str]"
                ]
            }
        },
        "Switch.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]"
                ],
                "title": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "Sequence"
                ],
                "description": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "Sequence"
                ],
                "state": [
                    "bool",
                    "int",
                    "Optional[str]",
                    "Sequence"
                ]
            }
        },
        "Switch.serialize": {
            "name": "serialize",
            "location": 31,
            "return": [
                "Optional[Any]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Switch.__repr__": {
            "name": "__repr__",
            "location": 41,
            "return": [
                "bool",
                "Type",
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Switch.find_by_name": {
            "name": "find_by_name",
            "location": 47,
            "return": [
                "str",
                "Mapping"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[str]"
                ],
                "name": [
                    "str",
                    "Union[str, Tuple[str, ...]]"
                ]
            }
        },
        "Switch.find_all": {
            "name": "find_all",
            "location": 54,
            "return": [
                "int",
                "Tuple[bytes]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ]
            }
        },
        "Switch.set_state": {
            "name": "set_state",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "state": []
            }
        },
        "Switch.is_on": {
            "name": "is_on",
            "location": 61,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/alerta/models/token.py": {
        "Jwt.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "iss": [
                    "int"
                ],
                "typ": [
                    "int",
                    "Iterable[List[str]]",
                    "List[int]",
                    "Tuple[int]"
                ],
                "sub": [
                    "int",
                    "Iterable[List[str]]",
                    "List[int]",
                    "Tuple[int]"
                ],
                "aud": [
                    "int",
                    "Iterable[List[str]]",
                    "List[int]",
                    "Tuple[int]"
                ],
                "exp": [
                    "int",
                    "Iterable[List[str]]",
                    "List[int]",
                    "Tuple[int]"
                ],
                "nbf": [
                    "Tuple[int, int]",
                    "int",
                    "Tuple[int]"
                ],
                "iat": [
                    "int",
                    "Iterable[List[str]]",
                    "List[int]",
                    "Tuple[int]"
                ],
                "jti": [
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "Jwt.parse": {
            "name": "parse",
            "location": 43,
            "return": [
                "Optional[bytes]",
                "Optional[cmk.utils.type_defs.HostName]",
                "Optional[utils.diskstaSection]",
                "bool",
                "float"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Sequence[str]",
                    "Tuple[Sequence[Any], Sequence[str], Sequence[Any]]",
                    "Tuple[str, Sequence[str], Sequence[str]]"
                ],
                "token": [
                    "dict",
                    "str",
                    "Optional[str]",
                    "Optional[MutableMapping]"
                ],
                "key": [
                    "dict",
                    "str",
                    "Optional[str]",
                    "Optional[MutableMapping]"
                ],
                "verify": [
                    "dict",
                    "str",
                    "Optional[str]",
                    "Optional[MutableMapping]"
                ],
                "algorithm": [
                    "dict",
                    "str",
                    "Optional[str]",
                    "Optional[MutableMapping]"
                ]
            }
        },
        "Jwt.serialize": {
            "name": "serialize",
            "location": 79,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Jwt.tokenize": {
            "name": "tokenize",
            "location": 117,
            "return": [
                "cmk.utils.type_defs.EventRule",
                "Callable[[None, None], bool]",
                "str"
            ],
            "arguments": {
                "self": [],
                "algorithm": [
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "Jwt.__repr__": {
            "name": "__repr__",
            "location": 120,
            "return": [
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "bool",
                "int",
                "utils.Node",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/alerta/models/user.py": {
        "User.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "login": [
                    "Optional[str]",
                    "str",
                    "int",
                    "bool",
                    "datetime.datetime"
                ],
                "password": [
                    "Optional[str]",
                    "str",
                    "int",
                    "bool",
                    "datetime.datetime"
                ],
                "email": [
                    "str",
                    "bool"
                ],
                "roles": [
                    "str",
                    "List[str]"
                ],
                "text": [
                    "Optional[str]",
                    "str",
                    "int",
                    "bool",
                    "datetime.datetime"
                ]
            }
        },
        "User.domain": {
            "name": "domain",
            "location": 48,
            "return": [
                "bool",
                "int",
                "Optional[str]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.is_active": {
            "name": "is_active",
            "location": 58,
            "return": [
                "cmk.utils.type_defs.UserId",
                "bool",
                "dict",
                "str",
                "Optional[app.models.User]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.parse": {
            "name": "parse",
            "location": 62,
            "return": [
                "Optional[Any]",
                "bool",
                "Dict[str, Any]",
                "List[str]",
                "Optional[int]",
                "Optional[Exception]",
                "List[Dict]"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "json": [
                    "Union[Dict, Tuple]"
                ]
            }
        },
        "User.verify_password": {
            "name": "verify_password",
            "location": 76,
            "return": [
                "str",
                "bool",
                "int",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str"
                ]
            }
        },
        "User.serialize": {
            "name": "serialize",
            "location": 80,
            "return": [
                "Dict[str, Any]",
                "dict",
                "str",
                "Dict[str, Dict[str, str]]",
                "Dict[str, str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.__repr__": {
            "name": "__repr__",
            "location": 98,
            "return": [
                "netCDF4.Group",
                "Set[str]",
                "int",
                "Type",
                "dict",
                "Type[T]",
                "Dict[str, List[Callable]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.from_document": {
            "name": "from_document",
            "location": 104,
            "return": [
                "Dict[Any, bool]",
                "bool",
                "Optional[dict]",
                "dict",
                "Optional[int]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "doc": [
                    "Dict[str, Any]"
                ]
            }
        },
        "User.from_record": {
            "name": "from_record",
            "location": 122,
            "return": [
                "Dict[str, Any]",
                "dict",
                "cmk.utils.type_defs.UserId",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "bool",
                    "Dict[str, Any]"
                ],
                "rec": [
                    "dict",
                    "Dict[Tuple[int, int], str]",
                    "bool",
                    "cmk.base.check_utils.Service",
                    "jumeaux.models.Res2DictAddOnPayload",
                    "fastapi.dependencies.models.Dependant",
                    "cmk.utils.type_defs.HostName",
                    "str"
                ]
            }
        },
        "User.from_db": {
            "name": "from_db",
            "location": 140,
            "return": [
                "bool",
                "Iterable['Notification']",
                "int",
                "\"PRecord\"",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "bytes",
                    "str",
                    "Match[str]",
                    "Sequence",
                    "bool",
                    "List[int]",
                    "Dict[str, Any]"
                ],
                "r": [
                    "Union[Dict, Tuple]",
                    "dict"
                ]
            }
        },
        "User.create": {
            "name": "create",
            "location": 146,
            "return": [
                "models.User",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.find_by_id": {
            "name": "find_by_id",
            "location": 150,
            "return": [
                "str",
                "Optional[str]",
                "Optional[Any]",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.Item",
                "cmk.utils.type_defs.CheckPluginName.Str"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int"
                ]
            }
        },
        "User.find_by_username": {
            "name": "find_by_username",
            "location": 154,
            "return": [
                "bool",
                "models.User",
                "group.Group",
                "app.models.GameMember",
                "app.models.course.Course",
                "List[dict]"
            ],
            "arguments": {
                "username": [
                    "str",
                    "bool",
                    "cinemanio.core.models.Role",
                    "pymongo.database.Database"
                ]
            }
        },
        "User.find_by_email": {
            "name": "find_by_email",
            "location": 159,
            "return": [
                "bool",
                "group.Group",
                "Optional[str]",
                "List[dict]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "email": [
                    "str",
                    "int",
                    "float",
                    "Optional[str]",
                    "Union[str, List[str]]",
                    "models.KippoProject",
                    "raiden.utils.List[raiden.utils.Tuple[str, raiden.utils.Any]]"
                ]
            }
        },
        "User.find_all": {
            "name": "find_all",
            "location": 163,
            "return": [
                "List[str]",
                "Set[str]",
                "List[cmk.base.api.agent_based.type_defs.CheckPlugin]",
                "int",
                "set",
                "List[asgard.models.job.ScheduledJob]"
            ],
            "arguments": {
                "query": [
                    "str",
                    "Optional[dict]",
                    "lms.lmsdb.models.User",
                    "Optional[int]",
                    "Optional[str]",
                    "models.User"
                ],
                "page": [
                    "str",
                    "Optional[dict]",
                    "lms.lmsdb.models.User",
                    "Optional[int]",
                    "Optional[str]",
                    "models.User"
                ],
                "page_size": [
                    "str",
                    "Optional[dict]",
                    "lms.lmsdb.models.User",
                    "Optional[int]",
                    "Optional[str]",
                    "models.User"
                ]
            }
        },
        "User.count": {
            "name": "count",
            "location": 167,
            "return": [
                "cmk.utils.type_defs.UserId",
                "bool",
                "Optional[str]",
                "Optional[int]",
                "dict",
                "zerver.models.Realm",
                "Tuple[str, str]",
                "int"
            ],
            "arguments": {
                "query": [
                    "dict",
                    "alerta.database.base.Query",
                    "models.User",
                    "tuple",
                    "str"
                ]
            }
        },
        "User.update_last_login": {
            "name": "update_last_login",
            "location": 170,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.update": {
            "name": "update",
            "location": 173,
            "return": [
                "str",
                "app.domain.common.TimeWindow",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "models.UserAuth"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.update_attributes": {
            "name": "update_attributes",
            "location": 185,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "attributes": [
                    "bool"
                ]
            }
        },
        "User.delete": {
            "name": "delete",
            "location": 188,
            "return": [
                "bool",
                "str",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.get_groups": {
            "name": "get_groups",
            "location": 191,
            "return": [
                "str",
                "bool",
                "Dict[str, str]",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.check_credentials": {
            "name": "check_credentials",
            "location": 195,
            "return": [
                "Optional[base.OrderSpec]",
                "Optional[base.WhereSpec]",
                "Optional[dbadapters.base.relation.BaseRelation]",
                "type",
                "Optional[int]",
                "Optional[str]"
            ],
            "arguments": {
                "username": [
                    "str",
                    "zerver.models.Realm",
                    "list",
                    "List[str]"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "User.verify_hash": {
            "name": "verify_hash",
            "location": 202,
            "return": [
                "bool",
                "models.User",
                "app.models.GameMember",
                "app.models.course.Course",
                "group.Group"
            ],
            "arguments": {
                "hash": [
                    "int",
                    "Dict[str, Any]",
                    "mode.utils.Counter[faustypes.TP]"
                ],
                "salt": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Exception"
                ]
            }
        },
        "User._set_email_hash": {
            "name": "_set_email_hash",
            "location": 206,
            "return": [
                "str",
                "tuple",
                "int",
                "Optional[cmk.utils.type_defs.SectionName]",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "hash": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]",
                    "Optional[qutebrowser.utils.urlmatch.UrlPattern]"
                ]
            }
        },
        "User._clear_email_hash": {
            "name": "_clear_email_hash",
            "location": 209,
            "return": [
                "Optional[str]",
                "bool",
                "float",
                "Union[str, None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.send_confirmation": {
            "name": "send_confirmation",
            "location": 212,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.set_email_verified": {
            "name": "set_email_verified",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "verified": [
                    "str",
                    "int",
                    "Optional[str]",
                    "dbadapters.base.relation.BaseRelation"
                ]
            }
        },
        "User.send_password_reset": {
            "name": "send_password_reset",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.reset_password": {
            "name": "reset_password",
            "location": 226,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "alerta-master/alerta/models/__init__.py": {},
    "alerta-master/alerta/models/alarms/alerta.py": {
        "StateMachine.valid_severities": {
            "name": "valid_severities",
            "location": 77,
            "return": [
                "str",
                "dict",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "StateMachine.register": {
            "name": "register",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "StateMachine.trend": {
            "name": "trend",
            "location": 102,
            "return": [
                "str",
                "bytearray"
            ],
            "arguments": {
                "self": [],
                "previous": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ],
                "current": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "StateMachine.transition": {
            "name": "transition",
            "location": 113,
            "return": [
                "Callable",
                "models.Name",
                "str",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "int",
                    "str",
                    "List[Tuple[int, int]]"
                ],
                "current_status": [
                    "str",
                    "int",
                    "Dict[str, str]",
                    "List[str]",
                    "Union[str, int]",
                    "List[List[fonduer.candidates.models.Candidate]]"
                ],
                "previous_status": [
                    "str",
                    "int",
                    "bool"
                ],
                "action": [
                    "str",
                    "Optional[Union[str, int]]"
                ]
            }
        },
        "StateMachine.is_suppressed": {
            "name": "is_suppressed",
            "location": 256,
            "return": [
                "List[Callable]",
                "str",
                "int",
                "List[Dict[str, Any]]",
                "bytes"
            ],
            "arguments": {
                "alert": [
                    "int",
                    "dict"
                ]
            }
        },
        "StateMachine.transition.next_state": {
            "name": "next_state",
            "location": 124,
            "return": [
                "str",
                "int",
                "List[Dict[str, Any]]",
                "django.db.models.query.QuerySet",
                "Optional[str]"
            ],
            "arguments": {
                "rule": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "severity": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "status": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "alerta-master/alerta/models/alarms/isa_18_2.py": {
        "StateMachine.register": {
            "name": "register",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "StateMachine.trend": {
            "name": "trend",
            "location": 86,
            "return": [
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "previous": [
                    "str",
                    "core_lib.core.models.Venue"
                ],
                "current": [
                    "str",
                    "core_lib.core.models.Venue"
                ]
            }
        },
        "StateMachine.transition": {
            "name": "transition",
            "location": 98,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "int",
                    "bytes"
                ],
                "current_status": [
                    "str",
                    "Callable[[], bool]"
                ],
                "previous_status": [
                    "str",
                    "int",
                    "bytes",
                    "Iterable[str]",
                    "float"
                ],
                "action": [
                    "bytes",
                    "Optional[int]"
                ]
            }
        },
        "StateMachine.is_suppressed": {
            "name": "is_suppressed",
            "location": 177,
            "return": [
                "bool"
            ],
            "arguments": {
                "alert": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "StateMachine.transition.next_state": {
            "name": "next_state",
            "location": 104,
            "return": [
                "str",
                "int",
                "List[Dict[str, Any]]",
                "django.db.models.query.QuerySet",
                "Optional[str]"
            ],
            "arguments": {
                "rule": [
                    "str",
                    "List[str]",
                    "int"
                ],
                "severity": [
                    "str",
                    "int"
                ],
                "status": [
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        }
    },
    "alerta-master/alerta/models/alarms/__init__.py": {
        "load_alarm_model": {
            "name": "load_alarm_model",
            "location": 8,
            "return": [
                "int",
                "Callable[[], str]",
                "Callable[[Dict], None]"
            ],
            "arguments": {
                "model": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "AlarmModel.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Optional[str]"
                ]
            }
        },
        "AlarmModel.init_app": {
            "name": "init_app",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Tuple[Callable, Callable]"
                ]
            }
        },
        "AlarmModel.register": {
            "name": "register",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "AlarmModel.trend": {
            "name": "trend",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "previous": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "current": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "AlarmModel.transition": {
            "name": "transition",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "int",
                    "bytes",
                    "Iterable[str]",
                    "float"
                ],
                "current_status": [
                    "str",
                    "int",
                    "bytes",
                    "Iterable[str]",
                    "float"
                ],
                "previous_status": [
                    "str",
                    "int",
                    "bytes",
                    "Iterable[str]",
                    "float"
                ],
                "action": [
                    "str",
                    "int",
                    "bytes",
                    "Iterable[str]",
                    "float"
                ]
            }
        },
        "AlarmModel.is_suppressed": {
            "name": "is_suppressed",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "alert": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "alerta-master/alerta/plugins/acked_by.py": {
        "AckedBy.pre_receive": {
            "name": "pre_receive",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "AckedBy.post_receive": {
            "name": "post_receive",
            "location": 23,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "dict",
                    "bool"
                ]
            }
        },
        "AckedBy.status_change": {
            "name": "status_change",
            "location": 26,
            "return": [
                "int",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "Callable[[], None]",
                    "Sequence[int]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "bool",
                    "dict",
                    "list",
                    "str"
                ],
                "status": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ],
                "text": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ]
            }
        },
        "AckedBy.take_action": {
            "name": "take_action",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "dict",
                    "Optional[str]",
                    "Union[list, str]",
                    "int"
                ],
                "action": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "text": [
                    "bool",
                    "str"
                ]
            }
        },
        "AckedBy.delete": {
            "name": "delete",
            "location": 42,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "bool",
                    "Iterable[int]",
                    "T"
                ]
            }
        }
    },
    "alerta-master/alerta/plugins/blackout.py": {
        "BlackoutHandler.pre_receive": {
            "name": "pre_receive",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "int",
                    "Callable",
                    "logging.Logger"
                ]
            }
        },
        "BlackoutHandler.post_receive": {
            "name": "post_receive",
            "location": 36,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "dict",
                    "bool"
                ]
            }
        },
        "BlackoutHandler.status_change": {
            "name": "status_change",
            "location": 39,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ],
                "status": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ],
                "text": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ]
            }
        },
        "BlackoutHandler.take_action": {
            "name": "take_action",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "bool",
                    "str"
                ],
                "action": [
                    "bool",
                    "str"
                ],
                "text": [
                    "bool",
                    "str"
                ]
            }
        },
        "BlackoutHandler.delete": {
            "name": "delete",
            "location": 45,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "bool",
                    "Iterable[int]",
                    "T"
                ]
            }
        }
    },
    "alerta-master/alerta/plugins/escalate.py": {
        "EscalateSeverity.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EscalateSeverity.pre_receive": {
            "name": "pre_receive",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "EscalateSeverity.post_receive": {
            "name": "post_receive",
            "location": 36,
            "return": [
                "app.models.Article",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "dict",
                    "bool"
                ]
            }
        },
        "EscalateSeverity.status_change": {
            "name": "status_change",
            "location": 39,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ],
                "status": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ],
                "text": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ]
            }
        },
        "EscalateSeverity.take_action": {
            "name": "take_action",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "Optional[int]",
                    "List[str]",
                    "int"
                ],
                "action": [
                    "str",
                    "int",
                    "list",
                    "bool"
                ],
                "text": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "EscalateSeverity.take_note": {
            "name": "take_note",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "EscalateSeverity.delete": {
            "name": "delete",
            "location": 57,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "bool",
                    "Iterable[int]",
                    "T"
                ]
            }
        }
    },
    "alerta-master/alerta/plugins/forwarder.py": {
        "append_to_header": {
            "name": "append_to_header",
            "location": 20,
            "return": [
                "Dict[str, int]",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "origin": [
                    "int",
                    "float",
                    "Sequence[float]"
                ]
            }
        },
        "is_in_xloop": {
            "name": "is_in_xloop",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "server": [
                    "raiden.utils.Address",
                    "bool",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "str",
                    "Callable"
                ]
            }
        },
        "Forwarder.pre_receive": {
            "name": "pre_receive",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Forwarder.post_receive": {
            "name": "post_receive",
            "location": 43,
            "return": [
                "Optional[Type]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "tartare.core.models.Contributor",
                    "Alert",
                    "Exception",
                    "Dict[str, List[str]]",
                    "bool"
                ]
            }
        },
        "Forwarder.status_change": {
            "name": "status_change",
            "location": 69,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "Alert",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ],
                "status": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "Alert",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ],
                "text": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "Alert",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ]
            }
        },
        "Forwarder.take_action": {
            "name": "take_action",
            "location": 72,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "Alert",
                    "Type[BaseException]"
                ],
                "action": [
                    "str"
                ],
                "text": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Forwarder.delete": {
            "name": "delete",
            "location": 101,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "Alert",
                    "float",
                    "bool",
                    "logging.Logger",
                    "int",
                    "Exception",
                    "dict"
                ]
            }
        }
    },
    "alerta-master/alerta/plugins/heartbeat.py": {
        "HeartbeatReceiver.pre_receive": {
            "name": "pre_receive",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "Union",
                    "Dict[str, Any]"
                ]
            }
        },
        "HeartbeatReceiver.post_receive": {
            "name": "post_receive",
            "location": 37,
            "return": [
                "app.models.Article",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "dict",
                    "bool"
                ]
            }
        },
        "HeartbeatReceiver.status_change": {
            "name": "status_change",
            "location": 40,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ],
                "status": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ],
                "text": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ]
            }
        },
        "HeartbeatReceiver.take_action": {
            "name": "take_action",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "bool",
                    "str"
                ],
                "action": [
                    "bool",
                    "str"
                ],
                "text": [
                    "bool",
                    "str"
                ]
            }
        },
        "HeartbeatReceiver.delete": {
            "name": "delete",
            "location": 46,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "bool",
                    "Iterable[int]",
                    "T"
                ]
            }
        }
    },
    "alerta-master/alerta/plugins/reject.py": {
        "RejectPolicy.pre_receive": {
            "name": "pre_receive",
            "location": 19,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "float",
                    "List[int]",
                    "str",
                    "Optional[list]",
                    "int"
                ]
            }
        },
        "RejectPolicy.post_receive": {
            "name": "post_receive",
            "location": 42,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "dict",
                    "bool"
                ]
            }
        },
        "RejectPolicy.status_change": {
            "name": "status_change",
            "location": 45,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ],
                "status": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ],
                "text": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ]
            }
        },
        "RejectPolicy.take_action": {
            "name": "take_action",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "bool",
                    "str"
                ],
                "action": [
                    "bool",
                    "str"
                ],
                "text": [
                    "bool",
                    "str"
                ]
            }
        },
        "RejectPolicy.delete": {
            "name": "delete",
            "location": 51,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "bool",
                    "Iterable[int]",
                    "T"
                ]
            }
        }
    },
    "alerta-master/alerta/plugins/remote_ip.py": {
        "RemoteIpAddr.pre_receive": {
            "name": "pre_receive",
            "location": 16,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "bytes",
                    "dict",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "RemoteIpAddr.post_receive": {
            "name": "post_receive",
            "location": 21,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "dict",
                    "bool"
                ]
            }
        },
        "RemoteIpAddr.status_change": {
            "name": "status_change",
            "location": 24,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ],
                "status": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ],
                "text": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ]
            }
        },
        "RemoteIpAddr.take_action": {
            "name": "take_action",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "bool",
                    "str"
                ],
                "action": [
                    "bool",
                    "str"
                ],
                "text": [
                    "bool",
                    "str"
                ]
            }
        },
        "RemoteIpAddr.delete": {
            "name": "delete",
            "location": 30,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "bool",
                    "Iterable[int]",
                    "T"
                ]
            }
        }
    },
    "alerta-master/alerta/plugins/timeout.py": {
        "TimeoutPolicy.pre_receive": {
            "name": "pre_receive",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TimeoutPolicy.post_receive": {
            "name": "post_receive",
            "location": 21,
            "return": [
                "Optional[int]",
                "Optional[bool]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "dict",
                    "bool"
                ]
            }
        },
        "TimeoutPolicy.status_change": {
            "name": "status_change",
            "location": 24,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "Alert",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ],
                "status": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "Alert",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ],
                "text": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "Alert",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ]
            }
        },
        "TimeoutPolicy.take_action": {
            "name": "take_action",
            "location": 27,
            "return": [
                "str",
                "int",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "bool"
                ],
                "action": [
                    "str",
                    "int"
                ],
                "text": [
                    "str",
                    "bool"
                ]
            }
        },
        "TimeoutPolicy.take_note": {
            "name": "take_note",
            "location": 50,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "TimeoutPolicy.delete": {
            "name": "delete",
            "location": 53,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "bool",
                    "Iterable[int]",
                    "T"
                ]
            }
        }
    },
    "alerta-master/alerta/plugins/__init__.py": {
        "PluginBase.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Tuple[str, str]"
                ]
            }
        },
        "PluginBase.pre_receive": {
            "name": "pre_receive",
            "location": 20,
            "return": [
                "'Alert'"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "PluginBase.post_receive": {
            "name": "post_receive",
            "location": 28,
            "return": [
                "typing.Optional['Alert']"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "dict",
                    "bool"
                ]
            }
        },
        "PluginBase.status_change": {
            "name": "status_change",
            "location": 33,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "Alert",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ],
                "status": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "Alert",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ],
                "text": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "Alert",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ]
            }
        },
        "PluginBase.take_action": {
            "name": "take_action",
            "location": 37,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "bool",
                    "str"
                ],
                "action": [
                    "bool",
                    "str"
                ],
                "text": [
                    "bool",
                    "str"
                ]
            }
        },
        "PluginBase.take_note": {
            "name": "take_note",
            "location": 41,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "PluginBase.delete": {
            "name": "delete",
            "location": 45,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "bool",
                    "Iterable[int]",
                    "T"
                ]
            }
        },
        "PluginBase.get_config": {
            "name": "get_config",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "key": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "default": [
                    "str",
                    "dict",
                    "Set[str]",
                    "Dict[str, 'LabwareDefinition']",
                    "Dict[str, Any]",
                    "type"
                ],
                "type": [
                    "Optional[str]",
                    "Optional[Iterable[str]]",
                    "Optional[List[Any]]",
                    "str",
                    "list"
                ]
            }
        },
        "FakeApp.init_app": {
            "name": "init_app",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/alerta/utils/api.py": {
        "assign_customer": {
            "name": "assign_customer",
            "location": 14,
            "return": [
                "str",
                "list",
                "Optional[BaseException]"
            ],
            "arguments": {
                "wanted": [
                    "str",
                    "Callable"
                ],
                "permission": [
                    "int",
                    "dict",
                    "Optional[str]",
                    "bool",
                    "Type[django.db.models.base.Model]",
                    "Union[int, str]"
                ]
            }
        },
        "process_alert": {
            "name": "process_alert",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "alert": [
                    "alerta.models.alerAlert",
                    "Dict[str, Any]",
                    "dict",
                    "T"
                ]
            }
        },
        "process_action": {
            "name": "process_action",
            "location": 94,
            "return": [
                "str",
                "int",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "alert": [
                    "alerta.models.alerAlert",
                    "str",
                    "Optional[str]"
                ],
                "action": [
                    "str",
                    "List[str]"
                ],
                "text": [
                    "str",
                    "List[str]"
                ],
                "timeout": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "process_note": {
            "name": "process_note",
            "location": 129,
            "return": [
                "str"
            ],
            "arguments": {
                "alert": [
                    "str",
                    "Mapping[str, Any]"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "process_status": {
            "name": "process_status",
            "location": 159,
            "return": [
                "Dict[str, str]",
                "str",
                "Optional[str]",
                "int",
                "Union[int, float]",
                "bool"
            ],
            "arguments": {
                "alert": [
                    "alerta.models.alerAlert",
                    "bytes",
                    "dict"
                ],
                "status": [
                    "str",
                    "Optional[str]"
                ],
                "text": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "process_delete": {
            "name": "process_delete",
            "location": 191,
            "return": [
                "int",
                "bool",
                "str",
                "Dict[str, Any]",
                "Optional[str]"
            ],
            "arguments": {
                "alert": [
                    "bool",
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "alerta-master/alerta/utils/audit.py": {
        "AuditTrail.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask",
                    "Optional[flask.Flask]"
                ]
            }
        },
        "AuditTrail.init_app": {
            "name": "init_app",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "AuditTrail._log_response": {
            "name": "_log_response",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "str",
                    "List[str]",
                    "flask.Flask"
                ],
                "category": [
                    "str",
                    "List[str]",
                    "flask.Flask"
                ],
                "event": [
                    "str",
                    "List[str]",
                    "flask.Flask"
                ],
                "message": [
                    "str",
                    "List[str]",
                    "flask.Flask"
                ],
                "user": [
                    "str",
                    "List[str]",
                    "flask.Flask"
                ],
                "customers": [
                    "str",
                    "List[str]",
                    "flask.Flask"
                ],
                "scopes": [
                    "str",
                    "List[str]",
                    "flask.Flask"
                ],
                "resource_id": [
                    "str",
                    "List[str]",
                    "flask.Flask"
                ],
                "type": [
                    "str",
                    "List[str]",
                    "flask.Flask"
                ],
                "request": [
                    "str",
                    "List[str]",
                    "flask.Flask"
                ]
            }
        },
        "AuditTrail._webhook_response": {
            "name": "_webhook_response",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "str",
                    "bool"
                ],
                "category": [
                    "str",
                    "bool"
                ],
                "event": [
                    "str",
                    "bool"
                ],
                "message": [
                    "str",
                    "bool"
                ],
                "user": [
                    "str",
                    "bool"
                ],
                "customers": [
                    "str",
                    "bool"
                ],
                "scopes": [
                    "str",
                    "bool"
                ],
                "resource_id": [
                    "str",
                    "bool"
                ],
                "type": [
                    "str",
                    "bool"
                ],
                "request": [
                    "str",
                    "bool"
                ]
            }
        },
        "AuditTrail.admin_log_response": {
            "name": "admin_log_response",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Callable",
                    "flask.Flask",
                    "Tuple[paradigm.models.Base, tests.utils.Args]"
                ]
            }
        },
        "AuditTrail.admin_webhook_response": {
            "name": "admin_webhook_response",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "AuditTrail.write_log_response": {
            "name": "write_log_response",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Callable",
                    "flask.Flask",
                    "Tuple[paradigm.models.Base, tests.utils.Args]"
                ]
            }
        },
        "AuditTrail.write_webhook_response": {
            "name": "write_webhook_response",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "AuditTrail.auth_log_response": {
            "name": "auth_log_response",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Callable",
                    "flask.Flask",
                    "bool"
                ]
            }
        },
        "AuditTrail.auth_webhook_response": {
            "name": "auth_webhook_response",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "AuditTrail._fmt": {
            "name": "_fmt",
            "location": 80,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "app": [
                    "str",
                    "List[str]",
                    "bool"
                ],
                "category": [
                    "str",
                    "List[str]"
                ],
                "event": [
                    "str",
                    "List[str]"
                ],
                "message": [
                    "str",
                    "List[str]"
                ],
                "user": [
                    "str",
                    "List[str]"
                ],
                "customers": [
                    "str",
                    "List[str]"
                ],
                "scopes": [
                    "str",
                    "List[str]"
                ],
                "resource_id": [
                    "str",
                    "List[str]"
                ],
                "type": [
                    "str",
                    "List[str]"
                ],
                "request": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "AuditTrail._fmt.get_redacted_data": {
            "name": "get_redacted_data",
            "location": 83,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "r": [
                    "str"
                ]
            }
        }
    },
    "alerta-master/alerta/utils/client.py": {
        "Client.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "str"
                ],
                "key": [
                    "str"
                ],
                "secret": [
                    "str",
                    "Optional[str]"
                ],
                "token": [
                    "str",
                    "Optional[str]"
                ],
                "username": [
                    "str",
                    "Optional[str]"
                ],
                "password": [
                    "str",
                    "Optional[str]"
                ],
                "timeout": [
                    "str",
                    "Optional[str]"
                ],
                "ssl_verify": [
                    "str",
                    "Optional[str]"
                ],
                "headers": [
                    "str",
                    "Optional[str]"
                ],
                "debug": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Client.send_alert": {
            "name": "send_alert",
            "location": 28,
            "return": [
                "int",
                "bytes",
                "cmk.utils.type_defs.UserId",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "dict",
                    "OrderedDict",
                    "Dict[str, Any]"
                ],
                "event": [
                    "dict",
                    "OrderedDict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Client.action": {
            "name": "action",
            "location": 51,
            "return": [
                "str",
                "Mapping[str, Sequence[str]]",
                "Optional[Any]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int"
                ],
                "action": [
                    "str"
                ],
                "text": [
                    "str"
                ],
                "timeout": [
                    "str"
                ]
            }
        },
        "Client.delete_alert": {
            "name": "delete_alert",
            "location": 59,
            "return": [
                "str",
                "Union[str, int]",
                "bytes",
                "Union[int, float]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "int",
                    "List[int]",
                    "str",
                    "bool"
                ]
            }
        },
        "ApiKeyAuth.__init__": {
            "name": "__init__",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "api_key": [
                    "Mapping[str, Dict[str, Any]]",
                    "dict",
                    "List[str]",
                    "Iterable[str]",
                    "Mapping[str, Any]",
                    "str"
                ],
                "auth_token": [
                    "str",
                    "Optional[str]",
                    "int",
                    "bool"
                ]
            }
        },
        "ApiKeyAuth.__call__": {
            "name": "__call__",
            "location": 69,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "List[str]",
                    "str",
                    "bool",
                    "dict",
                    "int"
                ]
            }
        },
        "TokenAuth.__init__": {
            "name": "__init__",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "auth_token": [
                    "str",
                    "float",
                    "List[str]",
                    "datetime.datetime"
                ]
            }
        },
        "TokenAuth.__call__": {
            "name": "__call__",
            "location": 79,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "r": [
                    "List[str]",
                    "Union[str, type]",
                    "float",
                    "int",
                    "Iterable[T_co]",
                    "bool"
                ]
            }
        },
        "HTTPClient.__init__": {
            "name": "__init__",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "key": [
                    "str",
                    "bool"
                ],
                "secret": [
                    "str",
                    "List[str]"
                ],
                "token": [
                    "str"
                ],
                "username": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "password": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "timeout": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "ssl_verify": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "List[Dict[str, Any]]"
                ],
                "headers": [
                    "str"
                ],
                "debug": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "int",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "HTTPClient.default_headers": {
            "name": "default_headers",
            "location": 110,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "HTTPClient.get": {
            "name": "get",
            "location": 116,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "List[object]",
                    "Optional[str]",
                    "dict"
                ],
                "query": [
                    "Sequence[str]",
                    "Mapping[str, str]",
                    "List[Dict[str, Any]]",
                    "Union[utils.CWLObjectType, List[utils.CWLObjectType]]",
                    "Optional[List[Any]]",
                    "Union[str, List[str]]",
                    "Iterable"
                ]
            }
        },
        "HTTPClient.post": {
            "name": "post",
            "location": 130,
            "return": [
                "dict",
                "List[str]",
                "int",
                "Optional[Dict[str, Any]]",
                "bool",
                "str",
                "Dict[str, str]",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "dict",
                    "Tuple[str]",
                    "str",
                    "Dict[cmk.utils.type_defs.HostName, str]",
                    "bool"
                ],
                "data": [
                    "List[Dict[str, Any]]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "int",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "HTTPClient.put": {
            "name": "put",
            "location": 139,
            "return": [
                "bytes",
                "List[str]",
                "int",
                "str",
                "Optional[Dict[str, Any]]",
                "dict",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "data": [
                    "dict",
                    "\"UdpTransport\"",
                    "bool",
                    "bytes",
                    "\"HexpySession\""
                ]
            }
        },
        "HTTPClient.delete": {
            "name": "delete",
            "location": 148,
            "return": [
                "str",
                "int",
                "Dict[str, str]",
                "Exception",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ]
            }
        },
        "CustomJsonEncoder.default": {
            "name": "default",
            "location": 158,
            "return": [
                "bytearray",
                "float"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "int",
                    "Optional[datetime.tzinfo]",
                    "datetime.datetime",
                    "list",
                    "Optional[datetime.datetime]"
                ]
            }
        }
    },
    "alerta-master/alerta/utils/collections.py": {
        "merge": {
            "name": "merge",
            "location": 1,
            "return": [
                ""
            ],
            "arguments": {
                "dict1": [
                    "dict"
                ],
                "dict2": [
                    "dict"
                ]
            }
        }
    },
    "alerta-master/alerta/utils/config.py": {
        "get_config": {
            "name": "get_config",
            "location": 119,
            "return": [
                "bool"
            ],
            "arguments": {
                "key": [
                    "str",
                    "List[str]",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "default": [
                    "str",
                    "dict",
                    "Set[str]",
                    "Dict[str, 'LabwareDefinition']",
                    "Dict[str, Any]",
                    "type"
                ],
                "type": [
                    "Optional[str]",
                    "Optional[Iterable[str]]",
                    "Optional[List[Any]]",
                    "str",
                    "list"
                ]
            }
        },
        "Config.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask",
                    "Optional[str]",
                    "Optional[flask.Flask]"
                ]
            }
        },
        "Config.init_app": {
            "name": "init_app",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask",
                    "Optional[flask.Flask]"
                ]
            }
        },
        "Config.get_user_config": {
            "name": "get_user_config",
            "location": 18,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "Optional[dict]",
                "bool"
            ],
            "arguments": {}
        }
    },
    "alerta-master/alerta/utils/format.py": {
        "custom_json_dumps": {
            "name": "custom_json_dumps",
            "location": 43,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "obj": [
                    "str",
                    "Dict[str, models.DeviceRow]",
                    "Callable[..., Awaitable]"
                ]
            }
        },
        "register_custom_serializer": {
            "name": "register_custom_serializer",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "CustomJSONEncoder.default": {
            "name": "default",
            "location": 12,
            "return": [
                "datetime.datetime",
                "str",
                "Optional[datetime.datetime]",
                "Optional[datetime.tzinfo]",
                "float"
            ],
            "arguments": {
                "self": [],
                "o": [
                    "int",
                    "Optional[datetime.tzinfo]",
                    "datetime.datetime",
                    "list"
                ]
            }
        },
        "DateTime.parse": {
            "name": "parse",
            "location": 30,
            "return": [
                "bool",
                "Optional[str]",
                "int",
                "str",
                "Optional[List[\"custom_index\"]]"
            ],
            "arguments": {
                "date_str": [
                    "str"
                ]
            }
        },
        "DateTime.iso8601": {
            "name": "iso8601",
            "location": 39,
            "return": [
                "models.User",
                "int",
                "str"
            ],
            "arguments": {
                "dt": [
                    "str",
                    "Optional[Tuple[int, int]]",
                    "int"
                ]
            }
        }
    },
    "alerta-master/alerta/utils/hooks.py": {
        "HookTrigger.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask",
                    "Optional[flask.Flask]"
                ]
            }
        },
        "HookTrigger.init_app": {
            "name": "init_app",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask",
                    "bool",
                    "flask.app.Flask"
                ]
            }
        },
        "HookTrigger.process_pre_receive": {
            "name": "process_pre_receive",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "HookTrigger.process_post_receive": {
            "name": "process_post_receive",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "dict",
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "HookTrigger.process_status_change": {
            "name": "process_status_change",
            "location": 35,
            "return": [
                "Dict[str, str]",
                "str",
                "Optional[str]",
                "qutebrowser.api.apitypes.Tab",
                "int",
                "Union[int, float]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "int",
                    "List[dict]"
                ],
                "status": [
                    "str",
                    "int",
                    "Callable[[str], int]"
                ],
                "text": [
                    "str",
                    "int",
                    "Callable[[str], int]"
                ]
            }
        },
        "HookTrigger.process_take_action": {
            "name": "process_take_action",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "bool",
                    "str"
                ],
                "action": [
                    "bool",
                    "str"
                ],
                "text": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "alerta-master/alerta/utils/key.py": {
        "ApiKeyHelper.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask",
                    "Optional[flask.Flask]"
                ]
            }
        },
        "ApiKeyHelper.init_app": {
            "name": "init_app",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "ApiKeyHelper.generate": {
            "name": "generate",
            "location": 25,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiKeyHelper.scopes_to_type": {
            "name": "scopes_to_type",
            "location": 30,
            "return": [
                "int"
            ],
            "arguments": {
                "self": [],
                "scopes": [
                    "List[alerta.models.enums.Scope]",
                    "Iterable[Any]"
                ]
            }
        },
        "ApiKeyHelper.type_to_scopes": {
            "name": "type_to_scopes",
            "location": 36,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "int",
                    "str",
                    "list",
                    "bool"
                ],
                "key_type": [
                    "str",
                    "Set[str]",
                    "List[Dict[str, Any]]"
                ]
            }
        }
    },
    "alerta-master/alerta/utils/logging.py": {
        "Logger.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask",
                    "Optional[str]",
                    "Optional[flask.Flask]"
                ]
            }
        },
        "Logger.setup_logging": {
            "name": "setup_logging",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "Logger.log_response": {
            "name": "log_response",
            "location": 132,
            "return": [
                "flask.Response",
                "dict",
                "Optional[str]",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "response": [
                    "flask.Response",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "RequestFilter.__init__": {
            "name": "__init__",
            "location": 140,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "methods": [
                    "bool",
                    "int",
                    "List[str]",
                    "Sequence[str]",
                    "Optional[float]",
                    "str"
                ]
            }
        },
        "RequestFilter.filter": {
            "name": "filter",
            "location": 144,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "ContextFilter.filter": {
            "name": "filter",
            "location": 155,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "Dict[str, Any]",
                    "Optional[int]",
                    "dict"
                ]
            }
        },
        "CustomFormatter.__init__": {
            "name": "__init__",
            "location": 181,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomFormatter.format": {
            "name": "format",
            "location": 193,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "int",
                    "List[str]",
                    "Type[T]"
                ]
            }
        },
        "JSONFormatter.format": {
            "name": "format",
            "location": 211,
            "return": [
                "str",
                "int",
                "List[List[str]]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "dict",
                    "List[Dict[str, Any]]",
                    "str"
                ]
            }
        },
        "SyslogFormatter.__init__": {
            "name": "__init__",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "facility": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SyslogFormatter.format": {
            "name": "format",
            "location": 229,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "record": []
            }
        },
        "Logger.setup_logging.open_file": {
            "name": "open_file",
            "location": 20,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str"
                ],
                "mode": [
                    "str"
                ]
            }
        }
    },
    "alerta-master/alerta/utils/mailer.py": {
        "Mailer.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask",
                    "Optional[str]",
                    "Optional[flask.Flask]"
                ]
            }
        },
        "Mailer.register": {
            "name": "register",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "Mailer.send_email": {
            "name": "send_email",
            "location": 37,
            "return": [
                "Iterator[object]",
                "Union[tuple, list]",
                "bool",
                "DefaultDict"
            ],
            "arguments": {
                "self": [],
                "email": [
                    "str",
                    "Optional[Sequence[Any]]",
                    "Callable",
                    "Tuple[type]"
                ],
                "subject": [
                    "str",
                    "Optional[int]",
                    "int"
                ],
                "body": [
                    "str"
                ],
                "mime": [
                    "str"
                ]
            }
        }
    },
    "alerta-master/alerta/utils/paging.py": {
        "Page.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "Dict[str, str]",
                    "str",
                    "dict",
                    "List[str]"
                ],
                "page_size": [
                    "int",
                    "bytes",
                    "Tuple[int, int, int]",
                    "dict"
                ],
                "items": [
                    "Dict[int, Set[int]]",
                    "int",
                    "List[str]"
                ]
            }
        },
        "Page.from_params": {
            "name": "from_params",
            "location": 19,
            "return": [
                "str",
                "Iterable[int]",
                "int",
                "IO[str]"
            ],
            "arguments": {
                "params": [
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "List[dict]"
                ],
                "items": [
                    "int",
                    "str",
                    "bool",
                    "set",
                    "bytes"
                ]
            }
        },
        "Page.pages": {
            "name": "pages",
            "location": 28,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Page.has_more": {
            "name": "has_more",
            "location": 32,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/alerta/utils/plugin.py": {
        "Plugins.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Plugins.register": {
            "name": "register",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "Plugins.routing": {
            "name": "routing",
            "location": 51,
            "return": [
                "List[Dict[str, Any]]",
                "revlibs.connections.config.Config",
                "qutebrowser.config.config.Config",
                "bool",
                "int",
                "Sequence",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "bool",
                    "dict",
                    "Type[T]",
                    "Callable"
                ]
            }
        }
    },
    "alerta-master/alerta/utils/response.py": {
        "jsonp": {
            "name": "jsonp",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "absolute_url": {
            "name": "absolute_url",
            "location": 22,
            "return": [
                "Dict[str, Any]",
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "base_url": {
            "name": "base_url",
            "location": 30,
            "return": [
                "str",
                "Set[str]",
                "bool"
            ],
            "arguments": {}
        },
        "jsonp.decorated": {
            "name": "decorated",
            "location": 10,
            "return": [],
            "arguments": {}
        }
    },
    "alerta-master/alerta/utils/tracing.py": {
        "Tracing.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask",
                    "Optional[str]",
                    "Optional[flask.Flask]"
                ]
            }
        },
        "Tracing.setup_tracing": {
            "name": "setup_tracing",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "Tracing.get_request_id": {
            "name": "get_request_id",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Tracing.set_request_id": {
            "name": "set_request_id",
            "location": 28,
            "return": [
                "int",
                "bytes",
                "List[str]",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "response": [
                    "Iterable"
                ]
            }
        }
    },
    "alerta-master/alerta/utils/webhook.py": {
        "WebhookRule.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "rule": [
                    "int",
                    "float",
                    "Callable"
                ],
                "endpoint": [
                    "int",
                    "float",
                    "Callable"
                ],
                "methods": [
                    "int",
                    "float",
                    "Callable"
                ]
            }
        },
        "CustomWebhooks.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomWebhooks.register": {
            "name": "register",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask",
                    "dict"
                ]
            }
        },
        "CustomWebhooks.iter_rules": {
            "name": "iter_rules",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/alerta/utils/__init__.py": {},
    "alerta-master/alerta/views/alerts.py": {
        "receive": {
            "name": "receive",
            "location": 40,
            "return": [
                "int",
                "dict",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "get_alert": {
            "name": "get_alert",
            "location": 87,
            "return": [
                "str",
                "int",
                "django.db.models.query.QuerySet"
            ],
            "arguments": {
                "alert_id": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "set_status": {
            "name": "set_status",
            "location": 103,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "django.db.models.query.QuerySet",
                "Optional[str]"
            ],
            "arguments": {
                "alert_id": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "action_alert": {
            "name": "action_alert",
            "location": 144,
            "return": [
                "int",
                "bool",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "alert_id": [
                    "int",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "tag_alert": {
            "name": "tag_alert",
            "location": 190,
            "return": [
                "str",
                "int",
                "List[str]",
                "Iterable[str]"
            ],
            "arguments": {
                "alert_id": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "untag_alert": {
            "name": "untag_alert",
            "location": 217,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "django.db.models.query.QuerySet",
                "List[str]"
            ],
            "arguments": {
                "alert_id": [
                    "int",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "update_attributes": {
            "name": "update_attributes",
            "location": 244,
            "return": [
                "str",
                "int",
                "List[Dict[str, Any]]",
                "django.db.models.query.QuerySet"
            ],
            "arguments": {
                "alert_id": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "delete_alert": {
            "name": "delete_alert",
            "location": 271,
            "return": [
                "str",
                "limbic.emotion.models.LexiconLimbicModel",
                "bytes",
                "int"
            ],
            "arguments": {
                "alert_id": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "search_alerts": {
            "name": "search_alerts",
            "location": 304,
            "return": [
                "str",
                "django.db.models.query.QuerySet",
                "int",
                "Union[server.models.Bike, int]"
            ],
            "arguments": {}
        },
        "history": {
            "name": "history",
            "location": 353,
            "return": [
                "bool",
                "users.models.CustomUser",
                "dict",
                "int"
            ],
            "arguments": {}
        },
        "get_counts": {
            "name": "get_counts",
            "location": 380,
            "return": [
                "str",
                "int",
                "django.db.models.query.QuerySet"
            ],
            "arguments": {}
        },
        "get_topn_count": {
            "name": "get_topn_count",
            "location": 401,
            "return": [
                "str",
                "int",
                "django.db.models.query.QuerySet"
            ],
            "arguments": {}
        },
        "get_topn_flapping": {
            "name": "get_topn_flapping",
            "location": 428,
            "return": [
                "str",
                "int",
                "django.db.models.query.QuerySet"
            ],
            "arguments": {}
        },
        "get_topn_standing": {
            "name": "get_topn_standing",
            "location": 455,
            "return": [
                "str",
                "int",
                "django.db.models.query.QuerySet"
            ],
            "arguments": {}
        },
        "get_environments": {
            "name": "get_environments",
            "location": 481,
            "return": [
                "str",
                "int",
                "django.db.models.query.QuerySet"
            ],
            "arguments": {}
        },
        "get_services": {
            "name": "get_services",
            "location": 506,
            "return": [
                "str",
                "int",
                "django.db.models.query.QuerySet"
            ],
            "arguments": {}
        },
        "get_groups": {
            "name": "get_groups",
            "location": 531,
            "return": [
                "str",
                "int",
                "django.db.models.query.QuerySet"
            ],
            "arguments": {}
        },
        "get_tags": {
            "name": "get_tags",
            "location": 556,
            "return": [
                "Optional[str]",
                "str",
                "int",
                "dict",
                "List[str]"
            ],
            "arguments": {}
        },
        "add_note": {
            "name": "add_note",
            "location": 580,
            "return": [
                "str",
                "bool",
                "zerver.models.Realm",
                "Optional[int]"
            ],
            "arguments": {
                "alert_id": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "get_notes": {
            "name": "get_notes",
            "location": 621,
            "return": [
                "int",
                "bool",
                "cmk.utils.type_defs.UserId",
                "Optional[str]",
                "Optional[bool]",
                "contests.models.User"
            ],
            "arguments": {
                "alert_id": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "update_note": {
            "name": "update_note",
            "location": 650,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[bool]",
                "int",
                "str"
            ],
            "arguments": {
                "alert_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "note_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "delete_note": {
            "name": "delete_note",
            "location": 685,
            "return": [
                "str",
                "limbic.emotion.models.LexiconLimbicModel",
                "bytes",
                "int"
            ],
            "arguments": {
                "alert_id": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "note_id": [
                    "str",
                    "int",
                    "transfer.models.TopicID"
                ]
            }
        },
        "receive.audit_trail_alert": {
            "name": "audit_trail_alert",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "event": [
                    "str",
                    "dict",
                    "Exception",
                    "core_lib.core.models.Event"
                ]
            }
        }
    },
    "alerta-master/alerta/views/blackouts.py": {
        "create_blackout": {
            "name": "create_blackout",
            "location": 21,
            "return": [
                "bool",
                "cmk.utils.type_defs.UserId",
                "Dict[str, Any]",
                "app.models.Tweet",
                "app.models.Position"
            ],
            "arguments": {}
        },
        "get_blackout": {
            "name": "get_blackout",
            "location": 52,
            "return": [
                "str",
                "int",
                "django.db.models.query.QuerySet"
            ],
            "arguments": {
                "blackout_id": [
                    "int",
                    "str"
                ]
            }
        },
        "list_blackouts": {
            "name": "list_blackouts",
            "location": 65,
            "return": [
                "str",
                "Union[server.models.Bike, int]",
                "List[Dict[str, Any]]",
                "django.db.models.query.QuerySet",
                "int",
                "transfer.models.CategoryID",
                "authentication.session.models.current_user.CurrentUser"
            ],
            "arguments": {}
        },
        "update_blackout": {
            "name": "update_blackout",
            "location": 98,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[bool]",
                "int",
                "str"
            ],
            "arguments": {
                "blackout_id": [
                    "int",
                    "bool",
                    "transfer.models.StorefronID",
                    "transfer.models.ArticleID",
                    "transfer.models.ShopID",
                    "str"
                ]
            }
        },
        "delete_blackout": {
            "name": "delete_blackout",
            "location": 131,
            "return": [
                "str",
                "limbic.emotion.models.LexiconLimbicModel",
                "bytes",
                "int"
            ],
            "arguments": {
                "blackout_id": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        }
    },
    "alerta-master/alerta/views/bulk.py": {
        "task_status": {
            "name": "task_status",
            "location": 23,
            "return": [
                "str",
                "cmk.utils.type_defs.UserId",
                "models.Payment",
                "bool"
            ],
            "arguments": {
                "task_id": [
                    "str",
                    "int",
                    "transfer.models.PostingID",
                    "Optional[int]"
                ]
            }
        },
        "bulk_set_status": {
            "name": "bulk_set_status",
            "location": 35,
            "return": [
                "int",
                "List[Dict[str, Any]]",
                "str",
                "bool",
                "db.models.taxon.FillDataLevel"
            ],
            "arguments": {}
        },
        "bulk_action_alert": {
            "name": "bulk_action_alert",
            "location": 75,
            "return": [
                "dict",
                "float",
                "str",
                "List[str]"
            ],
            "arguments": {}
        },
        "bulk_tag_alert": {
            "name": "bulk_tag_alert",
            "location": 101,
            "return": [
                "str",
                "MutableMapping[str, Any]",
                "Iterable[str]",
                "int",
                "IO"
            ],
            "arguments": {}
        },
        "bulk_untag_alert": {
            "name": "bulk_untag_alert",
            "location": 116,
            "return": [
                "str",
                "List[Dict[str, Any]]"
            ],
            "arguments": {}
        },
        "bulk_update_attributes": {
            "name": "bulk_update_attributes",
            "location": 131,
            "return": [
                "int",
                "str",
                "salon.models.Stylist",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "bulk_delete_alert": {
            "name": "bulk_delete_alert",
            "location": 146,
            "return": [
                "str",
                "Optional[str]",
                "django.contrib.auth.models.User",
                "bool"
            ],
            "arguments": {}
        }
    },
    "alerta-master/alerta/views/config.py": {
        "config": {
            "name": "config",
            "location": 10,
            "return": [
                "str",
                "bytes",
                "Dict[str, Any]",
                "dict",
                "bool"
            ],
            "arguments": {}
        }
    },
    "alerta-master/alerta/views/customers.py": {
        "create_customer": {
            "name": "create_customer",
            "location": 20,
            "return": [
                "bool",
                "cmk.utils.type_defs.UserId",
                "Dict[str, Any]",
                "app.models.Tweet",
                "app.models.Position"
            ],
            "arguments": {}
        },
        "get_customer": {
            "name": "get_customer",
            "location": 44,
            "return": [
                "str",
                "int",
                "django.db.models.query.QuerySet"
            ],
            "arguments": {
                "customer_id": [
                    "str",
                    "int"
                ]
            }
        },
        "list_customers": {
            "name": "list_customers",
            "location": 57,
            "return": [
                "str",
                "Union[server.models.Bike, int]",
                "List[Dict[str, Any]]",
                "django.db.models.query.QuerySet",
                "int",
                "transfer.models.CategoryID",
                "authentication.session.models.current_user.CurrentUser"
            ],
            "arguments": {}
        },
        "update_customer": {
            "name": "update_customer",
            "location": 93,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[bool]",
                "int",
                "str"
            ],
            "arguments": {
                "customer_id": [
                    "str",
                    "int"
                ]
            }
        },
        "delete_customer": {
            "name": "delete_customer",
            "location": 116,
            "return": [
                "str",
                "limbic.emotion.models.LexiconLimbicModel",
                "bytes",
                "int"
            ],
            "arguments": {
                "customer_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "alerta-master/alerta/views/groups.py": {
        "create_group": {
            "name": "create_group",
            "location": 21,
            "return": [
                "bool",
                "cmk.utils.type_defs.UserId",
                "Dict[str, Any]",
                "app.models.Tweet",
                "app.models.Position"
            ],
            "arguments": {}
        },
        "get_group": {
            "name": "get_group",
            "location": 45,
            "return": [
                "str",
                "int",
                "django.db.models.query.QuerySet"
            ],
            "arguments": {
                "group_id": [
                    "str",
                    "int",
                    "shop.transfer.models.ShopID",
                    "transfer.models.TopicID",
                    "transfer.models.BoardID",
                    "transfer.models.CategoryID"
                ]
            }
        },
        "get_group_users": {
            "name": "get_group_users",
            "location": 58,
            "return": [
                "cmk.utils.type_defs.UserId",
                "Sequence[str]",
                "int",
                "models.User",
                "bool",
                "arxiv.users.domain.User",
                "zerver.models.UserProfile",
                "server.models.User"
            ],
            "arguments": {
                "group_id": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "list_groups": {
            "name": "list_groups",
            "location": 82,
            "return": [
                "str",
                "Union[server.models.Bike, int]",
                "List[Dict[str, Any]]",
                "django.db.models.query.QuerySet",
                "int",
                "transfer.models.CategoryID",
                "authentication.session.models.current_user.CurrentUser"
            ],
            "arguments": {}
        },
        "update_group": {
            "name": "update_group",
            "location": 115,
            "return": [
                "bool",
                "Optional[str]",
                "Optional[bool]",
                "int",
                "str"
            ],
            "arguments": {
                "group_id": [
                    "int",
                    "str",
                    "transfer.models.TopicID",
                    "shop.transfer.models.ShopID",
                    "transfer.models.BoardID",
                    "transfer.models.CategoryID"
                ]
            }
        },
        "add_user_to_group": {
            "name": "add_user_to_group",
            "location": 138,
            "return": [
                "str",
                "Optional[str]",
                "Optional[bool]",
                "app.models.Tweet",
                "app.models.Position"
            ],
            "arguments": {
                "group_id": [
                    "int",
                    "str",
                    "List[str]"
                ],
                "user_id": [
                    "int"
                ]
            }
        },
        "remove_user_from_group": {
            "name": "remove_user_from_group",
            "location": 160,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Optional[str]",
                "Optional[bool]",
                "bool"
            ],
            "arguments": {
                "group_id": [
                    "int",
                    "str"
                ],
                "user_id": [
                    "int"
                ]
            }
        },
        "delete_group": {
            "name": "delete_group",
            "location": 182,
            "return": [
                "str",
                "limbic.emotion.models.LexiconLimbicModel",
                "bytes",
                "int"
            ],
            "arguments": {
                "group_id": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "alerta-master/alerta/views/heartbeats.py": {
        "create_heartbeat": {
            "name": "create_heartbeat",
            "location": 21,
            "return": [
                "bool",
                "cmk.utils.type_defs.UserId",
                "Dict[str, Any]",
                "app.models.Tweet",
                "app.models.Position"
            ],
            "arguments": {}
        },
        "get_heartbeat": {
            "name": "get_heartbeat",
            "location": 47,
            "return": [
                "str",
                "int",
                "django.db.models.query.QuerySet"
            ],
            "arguments": {
                "heartbeat_id": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "list_heartbeats": {
            "name": "list_heartbeats",
            "location": 61,
            "return": [
                "str",
                "Union[server.models.Bike, int]",
                "List[Dict[str, Any]]",
                "django.db.models.query.QuerySet",
                "int",
                "transfer.models.CategoryID",
                "authentication.session.models.current_user.CurrentUser"
            ],
            "arguments": {}
        },
        "delete_heartbeat": {
            "name": "delete_heartbeat",
            "location": 95,
            "return": [
                "str",
                "limbic.emotion.models.LexiconLimbicModel",
                "bytes",
                "int"
            ],
            "arguments": {
                "heartbeat_id": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        }
    },
    "alerta-master/alerta/views/keys.py": {
        "create_key": {
            "name": "create_key",
            "location": 22,
            "return": [
                "salon.models.Stylist",
                "Union[str, \"DatabaseURL\"]",
                "dict",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "get_key": {
            "name": "get_key",
            "location": 61,
            "return": [
                "str",
                "bytes",
                "List[str]",
                "int"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bytes",
                    "int",
                    "List[int]",
                    "Tuple[str, str]"
                ]
            }
        },
        "list_keys": {
            "name": "list_keys",
            "location": 80,
            "return": [
                "str",
                "int",
                "limbic.emotion.models.LexiconLimbicModel"
            ],
            "arguments": {}
        },
        "update_key": {
            "name": "update_key",
            "location": 120,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bytes",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "delete_key": {
            "name": "delete_key",
            "location": 156,
            "return": [
                "str",
                "int",
                "List[Dict[str, Any]]",
                "django.db.models.query.QuerySet",
                "bool"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Union[str, int]"
                ]
            }
        }
    },
    "alerta-master/alerta/views/oembed.py": {
        "oembed": {
            "name": "oembed",
            "location": 19,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "format": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "embed_js": {
            "name": "embed_js",
            "location": 69,
            "return": [
                "int",
                "Dict[int, Any]",
                "Mapping[str, Any]"
            ],
            "arguments": {}
        }
    },
    "alerta-master/alerta/views/permissions.py": {
        "create_perm": {
            "name": "create_perm",
            "location": 20,
            "return": [
                "bool",
                "Dict[str, Any]",
                "users.models.JustfixUser"
            ],
            "arguments": {}
        },
        "get_perm": {
            "name": "get_perm",
            "location": 56,
            "return": [
                "str",
                "bytes",
                "List[Dict[str, Any]]",
                "Optional[str]",
                "Optional[bool]",
                "int",
                "limbic.emotion.models.LexiconLimbicModel"
            ],
            "arguments": {
                "perm_id": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "list_perms": {
            "name": "list_perms",
            "location": 69,
            "return": [
                "str",
                "Union[server.models.Bike, int]",
                "List[Dict[str, Any]]",
                "django.db.models.query.QuerySet",
                "int",
                "transfer.models.CategoryID",
                "authentication.session.models.current_user.CurrentUser"
            ],
            "arguments": {}
        },
        "update_perm": {
            "name": "update_perm",
            "location": 136,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "bool",
                "str",
                "app.models.Tweet",
                "app.models.Position"
            ],
            "arguments": {
                "perm_id": [
                    "int",
                    "Optional[int]"
                ]
            }
        },
        "delete_perm": {
            "name": "delete_perm",
            "location": 163,
            "return": [
                "str",
                "limbic.emotion.models.LexiconLimbicModel",
                "bytes",
                "int"
            ],
            "arguments": {
                "perm_id": [
                    "int",
                    "Optional[int]",
                    "str"
                ]
            }
        },
        "list_scopes": {
            "name": "list_scopes",
            "location": 182,
            "return": [
                "str",
                "Union[server.models.Bike, int]",
                "List[Dict[str, Any]]",
                "django.db.models.query.QuerySet",
                "int",
                "transfer.models.CategoryID",
                "authentication.session.models.current_user.CurrentUser"
            ],
            "arguments": {}
        }
    },
    "alerta-master/alerta/views/users.py": {
        "create_user": {
            "name": "create_user",
            "location": 22,
            "return": [
                "bool",
                "Dict[str, Any]",
                "cmk.utils.type_defs.UserId"
            ],
            "arguments": {}
        },
        "get_user": {
            "name": "get_user",
            "location": 67,
            "return": [
                "int",
                "zerver.models.UserProfile",
                "bytes"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "str"
                ]
            }
        },
        "get_user_groups": {
            "name": "get_user_groups",
            "location": 80,
            "return": [
                "cmk.utils.type_defs.UserId",
                "Optional[str]",
                "Optional[bool]",
                "bool",
                "zerver.models.Realm",
                "float",
                "List[str]",
                "str"
            ],
            "arguments": {
                "user_id": [
                    "int",
                    "str"
                ]
            }
        },
        "get_me": {
            "name": "get_me",
            "location": 106,
            "return": [
                "int",
                "bytes",
                "zerver.models.UserProfile"
            ],
            "arguments": {}
        },
        "get_me_attributes": {
            "name": "get_me_attributes",
            "location": 119,
            "return": [
                "List[Dict[str, Any]]",
                "django.db.models.query.QuerySet",
                "salon.models.Stylist",
                "dict",
                "float",
                "str"
            ],
            "arguments": {}
        },
        "list_users": {
            "name": "list_users",
            "location": 132,
            "return": [
                "str",
                "int",
                "django.db.models.query.QuerySet",
                "Union[server.models.Bike, int]",
                "transfer.models.CategoryID",
                "authentication.session.models.current_user.CurrentUser"
            ],
            "arguments": {}
        },
        "update_user": {
            "name": "update_user",
            "location": 167,
            "return": [
                "int",
                "Optional[str]",
                "Optional[bool]",
                "bool",
                "str"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int"
                ]
            }
        },
        "update_me": {
            "name": "update_me",
            "location": 203,
            "return": [
                "int",
                "str",
                "Optional[str]",
                "Optional[bool]",
                "bool"
            ],
            "arguments": {}
        },
        "update_user_attributes": {
            "name": "update_user_attributes",
            "location": 237,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "django.db.models.query.QuerySet",
                "Optional[str]"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int"
                ]
            }
        },
        "update_me_attributes": {
            "name": "update_me_attributes",
            "location": 259,
            "return": [
                "str",
                "int",
                "List[Dict[str, Any]]",
                "django.db.models.query.QuerySet"
            ],
            "arguments": {}
        },
        "delete_user": {
            "name": "delete_user",
            "location": 283,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "django.db.models.query.QuerySet",
                "int"
            ],
            "arguments": {
                "user_id": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "alerta-master/alerta/views/__init__.py": {
        "before_request": {
            "name": "before_request",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "index": {
            "name": "index",
            "location": 24,
            "return": [
                "str",
                "Sequence[int]",
                "bytes"
            ],
            "arguments": {}
        },
        "debug": {
            "name": "debug",
            "location": 45,
            "return": [
                "int",
                "bool",
                "float"
            ],
            "arguments": {}
        }
    },
    "alerta-master/alerta/webhooks/cloudwatch.py": {
        "CloudWatchWebhook.cw_state_to_severity": {
            "name": "cw_state_to_severity",
            "location": 22,
            "return": [
                "Dict[str, int]",
                "int",
                "Optional[bool]",
                "Optional[int]",
                "str"
            ],
            "arguments": {
                "state": [
                    "str",
                    "bool",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "CloudWatchWebhook.incoming": {
            "name": "incoming",
            "location": 32,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "query_string": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "payload": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "alerta-master/alerta/webhooks/custom.py": {
        "custom": {
            "name": "custom",
            "location": 21,
            "return": [
                "int",
                "dict",
                "Callable",
                "str"
            ],
            "arguments": {
                "webhook": [
                    "str",
                    "Optional[str]"
                ],
                "path": [
                    "str",
                    "Optional[Tuple[str, ...]]",
                    "Optional['Directory']",
                    "Optional[str]"
                ]
            }
        },
        "custom.audit_trail_alert": {
            "name": "audit_trail_alert",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "event": [
                    "str",
                    "dict",
                    "Exception",
                    "core_lib.core.models.Event"
                ]
            }
        }
    },
    "alerta-master/alerta/webhooks/grafana.py": {
        "parse_grafana": {
            "name": "parse_grafana",
            "location": 18,
            "return": [
                "bool",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "args": [],
                "alert": [
                    "dict",
                    "Mapping",
                    "Dict[str, Any]",
                    "float"
                ],
                "match": [
                    "List[str]",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "GrafanaWebhook.incoming": {
            "name": "incoming",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "werkzeug.datastructures.ImmutableMultiDict",
                    "bool",
                    "Iterable[str]"
                ],
                "query_string": [
                    "str",
                    "List[List[float]]",
                    "Pattern[str]"
                ],
                "payload": [
                    "Union[str, dict]",
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "Iterable[bytes]",
                    "bytes"
                ]
            }
        }
    },
    "alerta-master/alerta/webhooks/graylog.py": {
        "GraylogWebhook.incoming": {
            "name": "incoming",
            "location": 18,
            "return": [
                "int",
                "salon.models.Stylist",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "query_string": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ],
                "payload": [
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "alerta-master/alerta/webhooks/newrelic.py": {
        "NewRelicWebhook.incoming": {
            "name": "incoming",
            "location": 21,
            "return": [
                "bool",
                "models.scenes.inventory_scene.InventoryScene",
                "models.characters.mods_base.Mod"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "query_string": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "payload": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "alerta-master/alerta/webhooks/pagerduty.py": {
        "parse_pagerduty": {
            "name": "parse_pagerduty",
            "location": 13,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "message": [
                    "dict",
                    "zerver.models.Message",
                    "Dict[str, Any]",
                    "bytes",
                    "MutableMapping[str, Any]"
                ]
            }
        },
        "PagerDutyWebhook.incoming": {
            "name": "incoming",
            "location": 66,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "django.db.models.query.QuerySet",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "query_string": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "payload": [
                    "bool",
                    "type",
                    "str",
                    "Dict[int, bool]",
                    "Optional[str]",
                    "TextIO"
                ]
            }
        }
    },
    "alerta-master/alerta/webhooks/pingdom.py": {
        "PingdomWebhook.incoming": {
            "name": "incoming",
            "location": 19,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "query_string": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "payload": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]",
                    "bool"
                ]
            }
        }
    },
    "alerta-master/alerta/webhooks/prometheus.py": {
        "parse_prometheus": {
            "name": "parse_prometheus",
            "location": 16,
            "return": [
                "bool",
                "models.scenes.inventory_scene.InventoryScene",
                "models.characters.mods_base.Mod"
            ],
            "arguments": {
                "alert": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "List[purplship.core.models.Message]"
                ],
                "external_url": [
                    "str",
                    "bytes"
                ]
            }
        },
        "PrometheusWebhook.incoming": {
            "name": "incoming",
            "location": 106,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "query_string": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "payload": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "alerta-master/alerta/webhooks/riemann.py": {
        "RiemannWebhook.incoming": {
            "name": "incoming",
            "location": 18,
            "return": [
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "query_string": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "payload": [
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "alerta-master/alerta/webhooks/serverdensity.py": {
        "ServerDensityWebhook.incoming": {
            "name": "incoming",
            "location": 18,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "query_string": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "payload": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "alerta-master/alerta/webhooks/slack.py": {
        "parse_slack": {
            "name": "parse_slack",
            "location": 17,
            "return": [
                "bool",
                "str",
                "Sequence"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "T",
                    "bytes",
                    "Union[Dict, List]"
                ]
            }
        },
        "build_slack_response": {
            "name": "build_slack_response",
            "location": 34,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Optional[str]",
                "Optional[Dict[str, Any]]",
                "bytes"
            ],
            "arguments": {
                "alert": [
                    "str",
                    "int",
                    "Iterable[str]",
                    "Optional[Dict[str, Any]]",
                    "dict"
                ],
                "action": [
                    "str",
                    "int",
                    "Optional[Dict[str, Any]]",
                    "Iterable[str]",
                    "Optional[str]",
                    "bool"
                ],
                "user": [
                    "int",
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Iterable[str]",
                    "Dict[str, Any]"
                ],
                "data": [
                    "dict",
                    "str",
                    "Dict[str, Dict[str, str]]",
                    "Optional[Dict[str, str]]",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "SlackWebhook.incoming": {
            "name": "incoming",
            "location": 78,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "raiden.utils.Dict[str, raiden.utils.Any]",
                "Dict[str, dict]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "werkzeug.datastructures.ImmutableMultiDict",
                    "bool",
                    "Iterable[str]"
                ],
                "query_string": [
                    "str",
                    "werkzeug.datastructures.ImmutableMultiDict",
                    "bool",
                    "Iterable[str]"
                ],
                "payload": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "alerta-master/alerta/webhooks/stackdriver.py": {
        "StackDriverWebhook.incoming": {
            "name": "incoming",
            "location": 19,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "query_string": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "payload": [
                    "str",
                    "Sequence[int]",
                    "dict",
                    "NamedTuple",
                    "Optional[str]"
                ]
            }
        }
    },
    "alerta-master/alerta/webhooks/telegram.py": {
        "send_message_reply": {
            "name": "send_message_reply",
            "location": 15,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "alert": [
                    "str",
                    "hackathon.utils.utils.DataMessage"
                ],
                "action": [
                    "str",
                    "allennlp.models.Model",
                    "bool"
                ],
                "user": [
                    "str",
                    "Dict[str, Any]"
                ],
                "data": [
                    "str",
                    "bytes",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "TelegramWebhook.incoming": {
            "name": "incoming",
            "location": 70,
            "return": [
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "query_string": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "payload": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "alerta-master/alerta/webhooks/__init__.py": {
        "before_request": {
            "name": "before_request",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "WebhookBase.__init__": {
            "name": "__init__",
            "location": 32,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Tuple[str, str]"
                ]
            }
        },
        "WebhookBase.incoming": {
            "name": "incoming",
            "location": 38,
            "return": [
                "typing.Union[alerta.models.alert.Alert, JSON]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "werkzeug.datastructures.ImmutableMultiDict",
                    "bool",
                    "Iterable[str]"
                ],
                "query_string": [
                    "str",
                    "werkzeug.datastructures.ImmutableMultiDict",
                    "bool",
                    "Iterable[str]"
                ],
                "payload": [
                    "str",
                    "werkzeug.datastructures.ImmutableMultiDict",
                    "bool",
                    "Iterable[str]"
                ]
            }
        }
    },
    "alerta-master/contrib/plugins/gitlab/alerta_gitlab.py": {
        "GitlabIssue.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "GitlabIssue.pre_receive": {
            "name": "pre_receive",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "GitlabIssue.post_receive": {
            "name": "post_receive",
            "location": 26,
            "return": [
                "Optional[Type]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "dict",
                    "bool"
                ]
            }
        },
        "GitlabIssue.status_change": {
            "name": "status_change",
            "location": 29,
            "return": [
                "str",
                "Dict[str, str]",
                "bytes",
                "Union[int, float]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "bool"
                ],
                "status": [
                    "str",
                    "bool"
                ],
                "text": [
                    "str",
                    "bool"
                ]
            }
        },
        "GitlabIssue.take_action": {
            "name": "take_action",
            "location": 32,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str"
                ],
                "action": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "text": [
                    "str"
                ]
            }
        }
    },
    "alerta-master/contrib/plugins/gitlab/setup.py": {},
    "alerta-master/contrib/routing/routing.py": {
        "rules": {
            "name": "rules",
            "location": 4,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "alert": [
                    "int",
                    "Callable",
                    "str"
                ],
                "plugins": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "alerta-master/contrib/routing/setup.py": {},
    "alerta-master/examples/plugins/routing/routing.py": {
        "rules": {
            "name": "rules",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "alert": [
                    "str",
                    "Sequence[str]"
                ],
                "plugins": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "alerta-master/examples/plugins/routing/setup.py": {},
    "alerta-master/examples/plugins/transient/alerta_transient.py": {
        "TransientAlert.pre_receive": {
            "name": "pre_receive",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "bool",
                    "List[List[int]]",
                    "float"
                ]
            }
        },
        "TransientAlert.post_receive": {
            "name": "post_receive",
            "location": 21,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "dict",
                    "bool"
                ]
            }
        },
        "TransientAlert.status_change": {
            "name": "status_change",
            "location": 24,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ],
                "status": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ],
                "text": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ]
            }
        }
    },
    "alerta-master/examples/plugins/transient/setup.py": {},
    "alerta-master/tests/test_actions.py": {
        "ActionsTestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionsTestCase.tearDown": {
            "name": "tearDown",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionsTestCase.test_alert": {
            "name": "test_alert",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ActionsTestCase.test_unwind_actions": {
            "name": "test_unwind_actions",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_aggregations.py": {
        "AggregationsTestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AggregationsTestCase.tearDown": {
            "name": "tearDown",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AggregationsTestCase.test_aggregations": {
            "name": "test_aggregations",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AggregationsTestCase.setUp.random_resource": {
            "name": "random_resource",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "alerta-master/tests/test_alerts.py": {
        "AlertsTestCase.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.tearDown": {
            "name": "tearDown",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_alert": {
            "name": "test_alert",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_alert_not_found": {
            "name": "test_alert_not_found",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_get_alerts": {
            "name": "test_get_alerts",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_alert_status": {
            "name": "test_alert_status",
            "location": 236,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_closed_alerts": {
            "name": "test_closed_alerts",
            "location": 325,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_expired_alerts": {
            "name": "test_expired_alerts",
            "location": 359,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_reopen_alerts": {
            "name": "test_reopen_alerts",
            "location": 405,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_duplicate_status": {
            "name": "test_duplicate_status",
            "location": 448,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_duplicate_value": {
            "name": "test_duplicate_value",
            "location": 473,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_alert_tagging": {
            "name": "test_alert_tagging",
            "location": 496,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_alert_no_attributes": {
            "name": "test_alert_no_attributes",
            "location": 533,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_alert_attributes": {
            "name": "test_alert_attributes",
            "location": 565,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_history_limit": {
            "name": "test_history_limit",
            "location": 612,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_timeout": {
            "name": "test_timeout",
            "location": 657,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_filter_params": {
            "name": "test_filter_params",
            "location": 704,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_query_param": {
            "name": "test_query_param",
            "location": 739,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_filter_and_query_params": {
            "name": "test_filter_and_query_params",
            "location": 751,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_alerts_show_fields": {
            "name": "test_alerts_show_fields",
            "location": 763,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AlertsTestCase.test_get_body": {
            "name": "test_get_body",
            "location": 788,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyRemoteIPPlugin.pre_receive": {
            "name": "pre_receive",
            "location": 826,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DummyRemoteIPPlugin.post_receive": {
            "name": "post_receive",
            "location": 829,
            "return": [
                "Optional[Type]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "dict",
                    "bool",
                    "django.db.backends.postgresql.schema.DatabaseSchemaEditor"
                ]
            }
        },
        "DummyRemoteIPPlugin.status_change": {
            "name": "status_change",
            "location": 832,
            "return": [
                "str",
                "Dict[str, str]",
                "bytes",
                "Union[int, float]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "bool"
                ],
                "status": [
                    "str",
                    "bool"
                ],
                "text": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "alerta-master/tests/test_auth.py": {
        "AuthTestCase.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthTestCase.tearDown": {
            "name": "tearDown",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthTestCase.test_401_error": {
            "name": "test_401_error",
            "location": 65,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthTestCase.test_user_defined_key": {
            "name": "test_user_defined_key",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthTestCase.test_admin_key": {
            "name": "test_admin_key",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthTestCase.test_readwrite_key": {
            "name": "test_readwrite_key",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthTestCase.test_rw_delete_key": {
            "name": "test_rw_delete_key",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthTestCase.test_readonly_key": {
            "name": "test_readonly_key",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthTestCase.test_users": {
            "name": "test_users",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthTestCase.test_login": {
            "name": "test_login",
            "location": 268,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthTestCase.test_x_api_key": {
            "name": "test_x_api_key",
            "location": 358,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthTestCase.test_edit_api_keys": {
            "name": "test_edit_api_keys",
            "location": 390,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthTestCase.test_basic_auth": {
            "name": "test_basic_auth",
            "location": 428,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthTestCase.test_edit_user": {
            "name": "test_edit_user",
            "location": 466,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthTestCase.test_hmac_auth": {
            "name": "test_hmac_auth",
            "location": 552,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_blackouts.py": {
        "BlackoutsTestCase.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackoutsTestCase.tearDown": {
            "name": "tearDown",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackoutsTestCase.test_suppress_blackout": {
            "name": "test_suppress_blackout",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackoutsTestCase.test_notification_blackout": {
            "name": "test_notification_blackout",
            "location": 184,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackoutsTestCase.test_previous_status": {
            "name": "test_previous_status",
            "location": 296,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackoutsTestCase.test_whole_environment_blackout": {
            "name": "test_whole_environment_blackout",
            "location": 438,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackoutsTestCase.test_combination_blackout": {
            "name": "test_combination_blackout",
            "location": 481,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackoutsTestCase.test_origin_blackout": {
            "name": "test_origin_blackout",
            "location": 575,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackoutsTestCase.test_custom_notify": {
            "name": "test_custom_notify",
            "location": 676,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackoutsTestCase.test_edit_blackout": {
            "name": "test_edit_blackout",
            "location": 725,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BlackoutsTestCase.test_user_info": {
            "name": "test_user_info",
            "location": 785,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Blackout.pre_receive": {
            "name": "pre_receive",
            "location": 804,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "Blackout.post_receive": {
            "name": "post_receive",
            "location": 814,
            "return": [
                "Optional[Type]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "dict",
                    "bool",
                    "django.db.backends.postgresql.schema.DatabaseSchemaEditor"
                ]
            }
        },
        "Blackout.status_change": {
            "name": "status_change",
            "location": 817,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ],
                "status": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ],
                "text": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ]
            }
        },
        "CustomNotify.pre_receive": {
            "name": "pre_receive",
            "location": 823,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "CustomNotify.post_receive": {
            "name": "post_receive",
            "location": 826,
            "return": [
                "Optional[Type]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "Tuple[int, int]"
                ]
            }
        },
        "CustomNotify.status_change": {
            "name": "status_change",
            "location": 844,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ],
                "status": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ],
                "text": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ]
            }
        }
    },
    "alerta-master/tests/test_builtins.py": {
        "BuiltinsTestCase.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BuiltinsTestCase.tearDown": {
            "name": "tearDown",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BuiltinsTestCase.test_remote_ip_alert": {
            "name": "test_remote_ip_alert",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BuiltinsTestCase.test_reject_alert": {
            "name": "test_reject_alert",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BuiltinsTestCase.test_heartbeat_alert": {
            "name": "test_heartbeat_alert",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BuiltinsTestCase.test_acked_by_plugin": {
            "name": "test_acked_by_plugin",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_commands.py": {
        "CommandsTestCase.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandsTestCase.test_key_cmd": {
            "name": "test_key_cmd",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandsTestCase.test_keys_cmd": {
            "name": "test_keys_cmd",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandsTestCase.test_user_cmd": {
            "name": "test_user_cmd",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CommandsTestCase.test_users_cmd": {
            "name": "test_users_cmd",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_config.py": {
        "ConfigTestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTestCase.tearDown": {
            "name": "tearDown",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigTestCase.test_config": {
            "name": "test_config",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_cors.py": {
        "HTTPCorsTestCase.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPCorsTestCase.tearDown": {
            "name": "tearDown",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPCorsTestCase.test_cors_headers": {
            "name": "test_cors_headers",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_customers.py": {
        "CustomersTestCase.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomersTestCase.tearDown": {
            "name": "tearDown",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomersTestCase.test_customers": {
            "name": "test_customers",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomersTestCase.test_blackouts": {
            "name": "test_blackouts",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomersTestCase.test_assign_customer": {
            "name": "test_assign_customer",
            "location": 315,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomersTestCase.test_invalid_customer": {
            "name": "test_invalid_customer",
            "location": 378,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomersTestCase.test_edit_customer": {
            "name": "test_edit_customer",
            "location": 387,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_forwarder.py": {
        "ForwarderTestCase.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ForwarderTestCase.tearDown": {
            "name": "tearDown",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ForwarderTestCase.test_forward_alert": {
            "name": "test_forward_alert",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str"
                ]
            }
        },
        "ForwarderTestCase.test_forward_action": {
            "name": "test_forward_action",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str",
                    "int"
                ]
            }
        },
        "ForwarderTestCase.test_forward_delete": {
            "name": "test_forward_delete",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str",
                    "int"
                ]
            }
        },
        "ForwarderTestCase.test_forward_heartbeat": {
            "name": "test_forward_heartbeat",
            "location": 216,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str",
                    "requests_mock.Mocker",
                    "Mapping[str, Any]"
                ]
            }
        },
        "ForwarderTestCase.test_already_processed": {
            "name": "test_already_processed",
            "location": 221,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "ForwarderTestCase.test_forward_loop": {
            "name": "test_forward_loop",
            "location": 251,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "m": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "ForwarderTestCase.test_do_not_forward": {
            "name": "test_do_not_forward",
            "location": 276,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ForwarderTestCase.test_base_url": {
            "name": "test_base_url",
            "location": 280,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_groups.py": {
        "GroupsTestCase.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupsTestCase.tearDown": {
            "name": "tearDown",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GroupsTestCase.test_groups": {
            "name": "test_groups",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_heartbeats.py": {
        "HeartbeatsTestCase.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HeartbeatsTestCase.tearDown": {
            "name": "tearDown",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HeartbeatsTestCase.test_heartbeat": {
            "name": "test_heartbeat",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HeartbeatsTestCase.test_heartbeat_not_found": {
            "name": "test_heartbeat_not_found",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HeartbeatsTestCase.test_get_heartbeats": {
            "name": "test_get_heartbeats",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HeartbeatsTestCase.test_timeout": {
            "name": "test_timeout",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "HeartbeatsTestCase.test_heartbeat_from_alert": {
            "name": "test_heartbeat_from_alert",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_hooks.py": {
        "PluginsTestCase.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PluginsTestCase.tearDown": {
            "name": "tearDown",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PluginsTestCase.test_run_hooks": {
            "name": "test_run_hooks",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Plugin1.pre_receive": {
            "name": "pre_receive",
            "location": 110,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "Callable",
                    "int",
                    "bool"
                ]
            }
        },
        "Plugin1.post_receive": {
            "name": "post_receive",
            "location": 143,
            "return": [
                "Optional[Type]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "Callable",
                    "str",
                    "Mapping[str, str]"
                ]
            }
        },
        "Plugin1.take_action": {
            "name": "take_action",
            "location": 185,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "Dict[int, str]"
                ],
                "action": [
                    "str",
                    "Union[Literal, str]"
                ],
                "text": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "Plugin1.status_change": {
            "name": "status_change",
            "location": 230,
            "return": [
                "str",
                "Dict[str, str]",
                "bytes",
                "Union[int, float]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "type"
                ],
                "status": [
                    "int",
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "Plugin1.take_note": {
            "name": "take_note",
            "location": 275,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "Dict[str, str]",
                    "Optional[Dict]"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "Plugin1.delete": {
            "name": "delete",
            "location": 329,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        }
    },
    "alerta-master/tests/test_isa_18_2.py": {
        "Isa182TestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Isa182TestCase.tearDown": {
            "name": "tearDown",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Isa182TestCase.test_ack_active_alarm": {
            "name": "test_ack_active_alarm",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Isa182TestCase.test_rtn_before_ack": {
            "name": "test_rtn_before_ack",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Isa182TestCase.test_operator_shelve": {
            "name": "test_operator_shelve",
            "location": 369,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Isa182TestCase.test_out_of_service": {
            "name": "test_out_of_service",
            "location": 494,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "NotificationBlackout.pre_receive": {
            "name": "pre_receive",
            "location": 728,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "NotificationBlackout.post_receive": {
            "name": "post_receive",
            "location": 733,
            "return": [
                "Optional[Type]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "dict",
                    "bool",
                    "django.db.backends.postgresql.schema.DatabaseSchemaEditor"
                ]
            }
        },
        "NotificationBlackout.status_change": {
            "name": "status_change",
            "location": 736,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ],
                "status": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ],
                "text": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ]
            }
        }
    },
    "alerta-master/tests/test_logging.py": {
        "LoggingTestCase.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LoggingTestCase.tearDown": {
            "name": "tearDown",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LoggingTestCase.test_audit_log": {
            "name": "test_audit_log",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "LoggingTestCase.test_audit_url": {
            "name": "test_audit_url",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "m": [
                    "requests_mock.Mocker"
                ]
            }
        }
    },
    "alerta-master/tests/test_management.py": {
        "ManagementTestCase.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagementTestCase.tearDown": {
            "name": "tearDown",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagementTestCase.test_manifest": {
            "name": "test_manifest",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagementTestCase.test_properties": {
            "name": "test_properties",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagementTestCase.test_good_to_go": {
            "name": "test_good_to_go",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagementTestCase.test_health_check": {
            "name": "test_health_check",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagementTestCase.test_housekeeping": {
            "name": "test_housekeeping",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagementTestCase.test_status": {
            "name": "test_status",
            "location": 294,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagementTestCase.test_prometheus": {
            "name": "test_prometheus",
            "location": 307,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ManagementTestCase.setUp.random_resource": {
            "name": "random_resource",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {}
        }
    },
    "alerta-master/tests/test_metrics.py": {
        "MetricsTestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsTestCase.tearDown": {
            "name": "tearDown",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsTestCase.test_metrics": {
            "name": "test_metrics",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MetricsTestCase.test_prometheus": {
            "name": "test_prometheus",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_notes.py": {
        "AlertNotesTestCase.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AlertNotesTestCase.tearDown": {
            "name": "tearDown",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AlertNotesTestCase.test_alert_notes": {
            "name": "test_alert_notes",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_plugins.py": {
        "PluginsTestCase.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PluginsTestCase.tearDown": {
            "name": "tearDown",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PluginsTestCase.test_status_update": {
            "name": "test_status_update",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PluginsTestCase.test_take_action": {
            "name": "test_take_action",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PluginsTestCase.test_invalid_action": {
            "name": "test_invalid_action",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PluginsTestCase.test_im_a_teapot": {
            "name": "test_im_a_teapot",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PluginsTestCase.test_take_note": {
            "name": "test_take_note",
            "location": 291,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PluginsTestCase.test_delete": {
            "name": "test_delete",
            "location": 344,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PluginsTestCase.test_add_and_remove_tags": {
            "name": "test_add_and_remove_tags",
            "location": 378,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PluginsTestCase.test_custom_ack": {
            "name": "test_custom_ack",
            "location": 417,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "OldPlugin1.pre_receive": {
            "name": "pre_receive",
            "location": 455,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "List[str]",
                    "Set[str]"
                ]
            }
        },
        "OldPlugin1.post_receive": {
            "name": "post_receive",
            "location": 461,
            "return": [
                "Optional[Type]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "Optional[Type]",
                    "dict"
                ]
            }
        },
        "OldPlugin1.status_change": {
            "name": "status_change",
            "location": 465,
            "return": [
                "str",
                "Dict[str, str]",
                "bytes",
                "Union[int, float]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "Iterable[ebl.transliteration.domain.atf.Status]",
                    "bool"
                ],
                "status": [
                    "str",
                    "Iterable[ebl.transliteration.domain.atf.Status]",
                    "bool"
                ],
                "text": [
                    "str",
                    "Iterable[ebl.transliteration.domain.atf.Status]",
                    "bool"
                ]
            }
        },
        "CustPlugin1.pre_receive": {
            "name": "pre_receive",
            "location": 471,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "CustPlugin1.post_receive": {
            "name": "post_receive",
            "location": 475,
            "return": [
                "Optional[Type]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "Optional[Type]",
                    "dict"
                ]
            }
        },
        "CustPlugin1.status_change": {
            "name": "status_change",
            "location": 479,
            "return": [
                "str",
                "Dict[str, str]",
                "bytes",
                "Union[int, float]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "status": [
                    "str",
                    "Iterable[ebl.transliteration.domain.atf.Status]",
                    "bool"
                ],
                "text": [
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ]
            }
        },
        "CustPlugin2.pre_receive": {
            "name": "pre_receive",
            "location": 492,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "CustPlugin2.post_receive": {
            "name": "post_receive",
            "location": 495,
            "return": [
                "Optional[Type]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "dict",
                    "bool",
                    "django.db.backends.postgresql.schema.DatabaseSchemaEditor"
                ]
            }
        },
        "CustPlugin2.status_change": {
            "name": "status_change",
            "location": 498,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ],
                "status": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ],
                "text": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ]
            }
        },
        "CustPlugin3.pre_receive": {
            "name": "pre_receive",
            "location": 507,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "CustPlugin3.post_receive": {
            "name": "post_receive",
            "location": 510,
            "return": [
                "Optional[Type]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "dict",
                    "bool",
                    "django.db.backends.postgresql.schema.DatabaseSchemaEditor"
                ]
            }
        },
        "CustPlugin3.status_change": {
            "name": "status_change",
            "location": 513,
            "return": [
                "str",
                "Dict[str, str]",
                "bytes",
                "Union[int, float]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "Type[T]",
                    "List[int]",
                    "Optional[\"Scope\"]"
                ],
                "status": [
                    "str",
                    "Iterable[ebl.transliteration.domain.atf.Status]",
                    "bool"
                ],
                "text": [
                    "str",
                    "bool",
                    "float",
                    "List[str]"
                ]
            }
        },
        "CustActionPlugin1.pre_receive": {
            "name": "pre_receive",
            "location": 530,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "CustActionPlugin1.post_receive": {
            "name": "post_receive",
            "location": 533,
            "return": [
                "app.models.Article",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "dict",
                    "bool",
                    "django.db.backends.postgresql.schema.DatabaseSchemaEditor"
                ]
            }
        },
        "CustActionPlugin1.status_change": {
            "name": "status_change",
            "location": 536,
            "return": [
                "str",
                "Dict[str, str]",
                "bytes",
                "Union[int, float]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "Iterable[ebl.transliteration.domain.atf.Status]",
                    "bool"
                ],
                "status": [
                    "str",
                    "Iterable[ebl.transliteration.domain.atf.Status]",
                    "bool"
                ],
                "text": [
                    "str",
                    "Iterable[ebl.transliteration.domain.atf.Status]",
                    "bool"
                ]
            }
        },
        "CustActionPlugin1.take_action": {
            "name": "take_action",
            "location": 539,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "int",
                    "bytes",
                    "dict",
                    "Dict[str, str]"
                ],
                "action": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "text": [
                    "str",
                    "float",
                    "Dict[Any, str]",
                    "int",
                    "Final"
                ]
            }
        },
        "CustActionPlugin2.pre_receive": {
            "name": "pre_receive",
            "location": 563,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "CustActionPlugin2.post_receive": {
            "name": "post_receive",
            "location": 566,
            "return": [
                "app.models.Article",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "dict",
                    "bool",
                    "django.db.backends.postgresql.schema.DatabaseSchemaEditor"
                ]
            }
        },
        "CustActionPlugin2.status_change": {
            "name": "status_change",
            "location": 569,
            "return": [
                "str",
                "Dict[str, str]",
                "bytes",
                "Union[int, float]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "Iterable[ebl.transliteration.domain.atf.Status]",
                    "bool"
                ],
                "status": [
                    "str",
                    "Iterable[ebl.transliteration.domain.atf.Status]",
                    "bool"
                ],
                "text": [
                    "str",
                    "Iterable[ebl.transliteration.domain.atf.Status]",
                    "bool"
                ]
            }
        },
        "CustActionPlugin2.take_action": {
            "name": "take_action",
            "location": 572,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "Dict[str, str]",
                    "bool",
                    "bytes",
                    "int",
                    "Optional[str]"
                ],
                "action": [
                    "str"
                ],
                "text": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "CustActionPlugin3.pre_receive": {
            "name": "pre_receive",
            "location": 584,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "CustActionPlugin3.post_receive": {
            "name": "post_receive",
            "location": 587,
            "return": [
                "app.models.Article",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "dict",
                    "bool",
                    "django.db.backends.postgresql.schema.DatabaseSchemaEditor"
                ]
            }
        },
        "CustActionPlugin3.status_change": {
            "name": "status_change",
            "location": 590,
            "return": [
                "str",
                "Dict[str, str]",
                "bytes",
                "Union[int, float]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "Iterable[ebl.transliteration.domain.atf.Status]",
                    "bool"
                ],
                "status": [
                    "str",
                    "Iterable[ebl.transliteration.domain.atf.Status]",
                    "bool"
                ],
                "text": [
                    "str",
                    "Iterable[ebl.transliteration.domain.atf.Status]",
                    "bool"
                ]
            }
        },
        "CustActionPlugin3.take_action": {
            "name": "take_action",
            "location": 593,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "action": [
                    "str"
                ],
                "text": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "CustNotePlugin1.pre_receive": {
            "name": "pre_receive",
            "location": 603,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "CustNotePlugin1.post_receive": {
            "name": "post_receive",
            "location": 606,
            "return": [
                "app.models.Article",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "dict",
                    "bool",
                    "django.db.backends.postgresql.schema.DatabaseSchemaEditor"
                ]
            }
        },
        "CustNotePlugin1.status_change": {
            "name": "status_change",
            "location": 609,
            "return": [
                "str",
                "Dict[str, str]",
                "bytes",
                "Union[int, float]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "Iterable[ebl.transliteration.domain.atf.Status]",
                    "bool"
                ],
                "status": [
                    "str",
                    "Iterable[ebl.transliteration.domain.atf.Status]",
                    "bool"
                ],
                "text": [
                    "str",
                    "Iterable[ebl.transliteration.domain.atf.Status]",
                    "bool"
                ]
            }
        },
        "CustNotePlugin1.take_note": {
            "name": "take_note",
            "location": 612,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "CustDeletePlugin1.pre_receive": {
            "name": "pre_receive",
            "location": 627,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "CustDeletePlugin1.post_receive": {
            "name": "post_receive",
            "location": 630,
            "return": [
                "app.models.Article",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "dict",
                    "bool",
                    "django.db.backends.postgresql.schema.DatabaseSchemaEditor"
                ]
            }
        },
        "CustDeletePlugin1.status_change": {
            "name": "status_change",
            "location": 633,
            "return": [
                "str",
                "Dict[str, str]",
                "bytes",
                "Union[int, float]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "Iterable[ebl.transliteration.domain.atf.Status]",
                    "bool"
                ],
                "status": [
                    "str",
                    "Iterable[ebl.transliteration.domain.atf.Status]",
                    "bool"
                ],
                "text": [
                    "str",
                    "Iterable[ebl.transliteration.domain.atf.Status]",
                    "bool"
                ]
            }
        },
        "CustDeletePlugin1.take_action": {
            "name": "take_action",
            "location": 636,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "action": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "text": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "CustDeletePlugin1.delete": {
            "name": "delete",
            "location": 639,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "bool",
                    "Iterable[int]",
                    "uuid.UUID",
                    "T"
                ]
            }
        },
        "CustDeletePlugin2.pre_receive": {
            "name": "pre_receive",
            "location": 645,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "CustDeletePlugin2.post_receive": {
            "name": "post_receive",
            "location": 648,
            "return": [
                "app.models.Article",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "dict",
                    "bool",
                    "django.db.backends.postgresql.schema.DatabaseSchemaEditor"
                ]
            }
        },
        "CustDeletePlugin2.status_change": {
            "name": "status_change",
            "location": 651,
            "return": [
                "str",
                "Dict[str, str]",
                "bytes",
                "Union[int, float]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "Iterable[ebl.transliteration.domain.atf.Status]",
                    "bool"
                ],
                "status": [
                    "str",
                    "Iterable[ebl.transliteration.domain.atf.Status]",
                    "bool"
                ],
                "text": [
                    "str",
                    "Iterable[ebl.transliteration.domain.atf.Status]",
                    "bool"
                ]
            }
        },
        "CustDeletePlugin2.take_action": {
            "name": "take_action",
            "location": 654,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "action": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "text": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "CustDeletePlugin2.delete": {
            "name": "delete",
            "location": 657,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "bool",
                    "Iterable[int]",
                    "uuid.UUID",
                    "T"
                ]
            }
        },
        "CustAckPlugin1.pre_receive": {
            "name": "pre_receive",
            "location": 663,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "CustAckPlugin1.post_receive": {
            "name": "post_receive",
            "location": 666,
            "return": [
                "app.models.Article",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "dict",
                    "bool",
                    "django.db.backends.postgresql.schema.DatabaseSchemaEditor"
                ]
            }
        },
        "CustAckPlugin1.status_change": {
            "name": "status_change",
            "location": 669,
            "return": [
                "str",
                "Dict[str, str]",
                "bytes",
                "Union[int, float]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "Iterable[ebl.transliteration.domain.atf.Status]",
                    "bool"
                ],
                "status": [
                    "str",
                    "Iterable[ebl.transliteration.domain.atf.Status]",
                    "bool"
                ],
                "text": [
                    "str",
                    "Iterable[ebl.transliteration.domain.atf.Status]",
                    "bool"
                ]
            }
        },
        "CustAckPlugin1.take_action": {
            "name": "take_action",
            "location": 672,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "int"
                ],
                "action": [
                    "bool",
                    "str"
                ],
                "text": [
                    "bool",
                    "str"
                ]
            }
        },
        "CustAckPlugin1.delete": {
            "name": "delete",
            "location": 678,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "bool",
                    "Iterable[int]",
                    "uuid.UUID",
                    "T"
                ]
            }
        },
        "Teapot.pre_receive": {
            "name": "pre_receive",
            "location": 684,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "Teapot.post_receive": {
            "name": "post_receive",
            "location": 693,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "Optional[Type]",
                    "dict"
                ]
            }
        },
        "Teapot.status_change": {
            "name": "status_change",
            "location": 701,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ],
                "status": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ],
                "text": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ]
            }
        },
        "Teapot.take_action": {
            "name": "take_action",
            "location": 709,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "action": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "text": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "Teapot.take_note": {
            "name": "take_note",
            "location": 718,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str"
                ],
                "text": [
                    "str"
                ]
            }
        },
        "Teapot.delete": {
            "name": "delete",
            "location": 726,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "bool",
                    "Iterable[int]",
                    "uuid.UUID",
                    "T"
                ]
            }
        }
    },
    "alerta-master/tests/test_providers.py": {
        "AuthProvidersTestCase.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthProvidersTestCase.tearDown": {
            "name": "tearDown",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthProvidersTestCase.test_amazon_cognito": {
            "name": "test_amazon_cognito",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "m": [
                    "requests_mock.Mocker",
                    "str"
                ]
            }
        },
        "AuthProvidersTestCase.test_azure_v1": {
            "name": "test_azure_v1",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "AuthProvidersTestCase.test_azure_v2": {
            "name": "test_azure_v2",
            "location": 366,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "AuthProvidersTestCase.test_github": {
            "name": "test_github",
            "location": 605,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "m": [
                    "requests_mock.Mocker",
                    "str"
                ]
            }
        },
        "AuthProvidersTestCase.test_gitlab": {
            "name": "test_gitlab",
            "location": 814,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "m": [
                    "Dict[str, Any]"
                ]
            }
        },
        "AuthProvidersTestCase.test_google": {
            "name": "test_google",
            "location": 1015,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "m": [
                    "Dict[str, Any]",
                    "requests_mock.Mocker"
                ]
            }
        },
        "AuthProvidersTestCase.test_keycloak": {
            "name": "test_keycloak",
            "location": 1189,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "m": [
                    "Dict[str, Any]",
                    "requests_mock.Mocker"
                ]
            }
        },
        "AuthProvidersTestCase.test_openid_auth0": {
            "name": "test_openid_auth0",
            "location": 1429,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "m": []
            }
        },
        "AuthProvidersTestCase.test_openid_idp": {
            "name": "test_openid_idp",
            "location": 1618,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "m": [
                    "Dict[str, Any]"
                ]
            }
        },
        "AuthProvidersTestCase.test_openid_okta": {
            "name": "test_openid_okta",
            "location": 1838,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "m": [
                    "Dict[str, Any]",
                    "requests_mock.Mocker"
                ]
            }
        }
    },
    "alerta-master/tests/test_queryparser.py": {
        "skip_postgres": {
            "name": "skip_postgres",
            "location": 4,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "skip_mongodb": {
            "name": "skip_mongodb",
            "location": 238,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "PostgresQueryTestCase.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PostgresQueryTestCase.test_word_and_phrase_terms": {
            "name": "test_word_and_phrase_terms",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PostgresQueryTestCase.test_field_names": {
            "name": "test_field_names",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PostgresQueryTestCase.test_wildcards": {
            "name": "test_wildcards",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PostgresQueryTestCase.test_regular_expressions": {
            "name": "test_regular_expressions",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PostgresQueryTestCase.test_fuzziness": {
            "name": "test_fuzziness",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PostgresQueryTestCase.test_proximity_searches": {
            "name": "test_proximity_searches",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PostgresQueryTestCase.test_ranges": {
            "name": "test_ranges",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PostgresQueryTestCase.test_unbounded_ranges": {
            "name": "test_unbounded_ranges",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PostgresQueryTestCase.test_boosting": {
            "name": "test_boosting",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PostgresQueryTestCase.test_boolean_operators": {
            "name": "test_boolean_operators",
            "location": 177,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "PostgresQueryTestCase.test_grouping": {
            "name": "test_grouping",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoQueryTestCase.setUp": {
            "name": "setUp",
            "location": 248,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoQueryTestCase.test_word_and_phrase_terms": {
            "name": "test_word_and_phrase_terms",
            "location": 256,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoQueryTestCase.test_field_names": {
            "name": "test_field_names",
            "location": 278,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoQueryTestCase.test_wildcards": {
            "name": "test_wildcards",
            "location": 345,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoQueryTestCase.test_regular_expressions": {
            "name": "test_regular_expressions",
            "location": 353,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoQueryTestCase.test_fuzziness": {
            "name": "test_fuzziness",
            "location": 359,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoQueryTestCase.test_proximity_searches": {
            "name": "test_proximity_searches",
            "location": 362,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoQueryTestCase.test_ranges": {
            "name": "test_ranges",
            "location": 365,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoQueryTestCase.test_unbounded_ranges": {
            "name": "test_unbounded_ranges",
            "location": 392,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoQueryTestCase.test_boosting": {
            "name": "test_boosting",
            "location": 410,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoQueryTestCase.test_boolean_operators": {
            "name": "test_boolean_operators",
            "location": 413,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MongoQueryTestCase.test_grouping": {
            "name": "test_grouping",
            "location": 460,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_response.py": {
        "ApiResponseTestCase.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiResponseTestCase.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiResponseTestCase.test_response_custom_id": {
            "name": "test_response_custom_id",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiResponseTestCase.test_response_href": {
            "name": "test_response_href",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_scopes.py": {
        "ScopesTestCase.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ScopesTestCase.tearDown": {
            "name": "tearDown",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ScopesTestCase.test_scopes": {
            "name": "test_scopes",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ScopesTestCase.test_is_in_scope": {
            "name": "test_is_in_scope",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ScopesTestCase.test_edit_perms": {
            "name": "test_edit_perms",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ScopesTestCase.test_custom_scopes": {
            "name": "test_custom_scopes",
            "location": 156,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ScopesTestCase.test_system_roles": {
            "name": "test_system_roles",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ScopesTestCase.setUp.make_key": {
            "name": "make_key",
            "location": 27,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "user": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "int"
                ],
                "scopes": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "int"
                ],
                "type": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "int"
                ],
                "text": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "int"
                ]
            }
        }
    },
    "alerta-master/tests/test_search.py": {
        "SearchTestCase.setUp": {
            "name": "setUp",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_alerts_filter": {
            "name": "test_alerts_filter",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_alerts_sort_by": {
            "name": "test_alerts_sort_by",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_alerts_query": {
            "name": "test_alerts_query",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_alerts_attributes": {
            "name": "test_alerts_attributes",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_blackouts_filter": {
            "name": "test_blackouts_filter",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_blackouts_sort_by": {
            "name": "test_blackouts_sort_by",
            "location": 169,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_blackouts_query": {
            "name": "test_blackouts_query",
            "location": 197,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_datetime": [
                    "unittesmock.MagicMock",
                    "Dict[str, Any]"
                ]
            }
        },
        "SearchTestCase.test_heartbeats_filter": {
            "name": "test_heartbeats_filter",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_heartbeats_sort_by": {
            "name": "test_heartbeats_sort_by",
            "location": 251,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_heartbeats_query": {
            "name": "test_heartbeats_query",
            "location": 272,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_keys_filter": {
            "name": "test_keys_filter",
            "location": 295,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_keys_sort_by": {
            "name": "test_keys_sort_by",
            "location": 319,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_keys_query": {
            "name": "test_keys_query",
            "location": 341,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_datetime": [
                    "unittesmock.MagicMock"
                ]
            }
        },
        "SearchTestCase.test_users_filter": {
            "name": "test_users_filter",
            "location": 369,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_users_sort_by": {
            "name": "test_users_sort_by",
            "location": 395,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_users_query": {
            "name": "test_users_query",
            "location": 418,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_groups_filter": {
            "name": "test_groups_filter",
            "location": 441,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_groups_sort_by": {
            "name": "test_groups_sort_by",
            "location": 458,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_groups_query": {
            "name": "test_groups_query",
            "location": 472,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_perms_filter": {
            "name": "test_perms_filter",
            "location": 494,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_perms_sort_by": {
            "name": "test_perms_sort_by",
            "location": 511,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_perms_query": {
            "name": "test_perms_query",
            "location": 524,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_customers_filter": {
            "name": "test_customers_filter",
            "location": 547,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_customers_sort_by": {
            "name": "test_customers_sort_by",
            "location": 564,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SearchTestCase.test_customers_query": {
            "name": "test_customers_query",
            "location": 577,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryParserTestCase.setUp": {
            "name": "setUp",
            "location": 604,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryParserTestCase.tearDown": {
            "name": "tearDown",
            "location": 708,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryParserTestCase._search": {
            "name": "_search",
            "location": 711,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": [],
                "q": [
                    "str",
                    "Dict[str, str]",
                    "IO[str]",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "QueryParserTestCase.test_single_word_terms": {
            "name": "test_single_word_terms",
            "location": 717,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryParserTestCase.test_phrase_terms": {
            "name": "test_phrase_terms",
            "location": 724,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryParserTestCase.test_field_names": {
            "name": "test_field_names",
            "location": 730,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryParserTestCase.test_wildcards": {
            "name": "test_wildcards",
            "location": 750,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryParserTestCase.test_regex": {
            "name": "test_regex",
            "location": 756,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryParserTestCase.test_ranges": {
            "name": "test_ranges",
            "location": 762,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryParserTestCase.test_boolean_operators": {
            "name": "test_boolean_operators",
            "location": 773,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryParserTestCase.test_grouping": {
            "name": "test_grouping",
            "location": 795,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_severity.py": {
        "SeverityTestCase.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SeverityTestCase.tearDown": {
            "name": "tearDown",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SeverityTestCase.test_inactive": {
            "name": "test_inactive",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SeverityTestCase.test_active": {
            "name": "test_active",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SeverityTestCase.test_invalid": {
            "name": "test_invalid",
            "location": 264,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_shelving.py": {
        "ShelvingTestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ShelvingTestCase.tearDown": {
            "name": "tearDown",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ShelvingTestCase.test_shelved_status": {
            "name": "test_shelved_status",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ShelvingTestCase.test_shelve_action": {
            "name": "test_shelve_action",
            "location": 175,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_tags.py": {
        "TagsTestCase.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TagsTestCase.tearDown": {
            "name": "tearDown",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TagsTestCase.test_tag_alert": {
            "name": "test_tag_alert",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TagPlugin.pre_receive": {
            "name": "pre_receive",
            "location": 129,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TagPlugin.post_receive": {
            "name": "post_receive",
            "location": 132,
            "return": [
                "Optional[Type]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "dict",
                    "bool",
                    "django.db.backends.postgresql.schema.DatabaseSchemaEditor"
                ]
            }
        },
        "TagPlugin.status_change": {
            "name": "status_change",
            "location": 135,
            "return": [
                "int",
                "bytes",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ],
                "status": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ],
                "text": [
                    "str",
                    "List[Tuple[str, Any]]",
                    "bool",
                    "List[str]",
                    "Optional[Any]"
                ]
            }
        },
        "TagPlugin.take_action": {
            "name": "take_action",
            "location": 138,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "bool"
                ],
                "action": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "text": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "alerta-master/tests/test_users.py": {
        "UsersTestCase.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersTestCase.tearDown": {
            "name": "tearDown",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersTestCase.test_user": {
            "name": "test_user",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersTestCase.test_user_attributes": {
            "name": "test_user_attributes",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/test_webhooks.py": {
        "WebhooksTestCase.setUp": {
            "name": "setUp",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WebhooksTestCase.tearDown": {
            "name": "tearDown",
            "location": 761,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WebhooksTestCase.test_cloudwatch_webhook": {
            "name": "test_cloudwatch_webhook",
            "location": 765,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WebhooksTestCase.test_grafana_webhook": {
            "name": "test_grafana_webhook",
            "location": 803,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WebhooksTestCase.test_graylog_webhook": {
            "name": "test_graylog_webhook",
            "location": 881,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WebhooksTestCase.test_new_relic_webhook": {
            "name": "test_new_relic_webhook",
            "location": 894,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WebhooksTestCase.test_pagerduty_webhook": {
            "name": "test_pagerduty_webhook",
            "location": 906,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WebhooksTestCase.test_pingdom_webhook": {
            "name": "test_pingdom_webhook",
            "location": 938,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WebhooksTestCase.test_prometheus_webhook": {
            "name": "test_prometheus_webhook",
            "location": 960,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WebhooksTestCase.test_riemann_webhook": {
            "name": "test_riemann_webhook",
            "location": 993,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WebhooksTestCase.test_stackdriver_webhook": {
            "name": "test_stackdriver_webhook",
            "location": 1005,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WebhooksTestCase.test_telegram_webhook": {
            "name": "test_telegram_webhook",
            "location": 1028,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WebhooksTestCase.test_vmware_webhook": {
            "name": "test_vmware_webhook",
            "location": 1072,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "WebhooksTestCase.test_custom_webhook": {
            "name": "test_custom_webhook",
            "location": 1089,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VmwareWebhook.incoming": {
            "name": "incoming",
            "location": 1161,
            "return": [
                "bool",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "query_string": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "payload": [
                    "List[Union[str, \"SqlFile\"]]",
                    "Dict[str, str]",
                    "Optional[str]",
                    "Optional[Exception]",
                    "dict"
                ]
            }
        },
        "DummyJsonWebhook.incoming": {
            "name": "incoming",
            "location": 1181,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "int",
                    "gobbli.io.EmbedInput"
                ],
                "query_string": [
                    "str",
                    "bool",
                    "int",
                    "gobbli.io.EmbedInput"
                ],
                "payload": [
                    "str",
                    "bool",
                    "int",
                    "gobbli.io.EmbedInput"
                ]
            }
        },
        "DummyTextWebhook.incoming": {
            "name": "incoming",
            "location": 1197,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "query_string": [
                    "dict",
                    "Exception",
                    "Optional[Dict[str, Any]]",
                    "List[str]",
                    "Optional[str]"
                ],
                "payload": [
                    "dict",
                    "Exception",
                    "Optional[Dict[str, Any]]",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "DummyFormWebhook.incoming": {
            "name": "incoming",
            "location": 1208,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "query_string": [
                    "str",
                    "bool",
                    "kedro.io.core.Version",
                    "gobbli.io.EmbedInput"
                ],
                "payload": [
                    "str",
                    "bool",
                    "kedro.io.core.Version",
                    "gobbli.io.EmbedInput"
                ]
            }
        },
        "DummyMultiPartFormWebhook.incoming": {
            "name": "incoming",
            "location": 1219,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "query_string": [
                    "str",
                    "kedro.io.core.Version",
                    "Dict[str, str]",
                    "bool"
                ],
                "payload": [
                    "str",
                    "kedro.io.core.Version",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "DummyUserDefinedWebhook.incoming": {
            "name": "incoming",
            "location": 1230,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "query_string": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "payload": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "TeapotWebhook.incoming": {
            "name": "incoming",
            "location": 1240,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "query_string": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ],
                "payload": [
                    "str",
                    "bool",
                    "Iterable[str]"
                ]
            }
        }
    },
    "alerta-master/tests/test_zrouting.py": {
        "rules": {
            "name": "rules",
            "location": 297,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "alert": [
                    "List[str]"
                ],
                "plugins": [
                    "str"
                ]
            }
        },
        "RoutingTestCase.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RoutingTestCase.tearDown": {
            "name": "tearDown",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RoutingTestCase.test_config": {
            "name": "test_config",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RoutingTestCase.test_config_precedence": {
            "name": "test_config_precedence",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RoutingTestCase.test_routing": {
            "name": "test_routing",
            "location": 180,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DummyConfigPlugin.pre_receive": {
            "name": "pre_receive",
            "location": 227,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "float",
                    "List[magic.models.Card]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "DummyConfigPlugin.post_receive": {
            "name": "post_receive",
            "location": 261,
            "return": [
                "Optional[Type]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "dict",
                    "bool"
                ]
            }
        },
        "DummyConfigPlugin.status_change": {
            "name": "status_change",
            "location": 265,
            "return": [
                "str",
                "Dict[str, str]",
                "bytes",
                "Union[int, float]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "bool"
                ],
                "status": [
                    "str",
                    "bool"
                ],
                "text": [
                    "str",
                    "bool"
                ]
            }
        },
        "DummyPagerDutyPlugin.pre_receive": {
            "name": "pre_receive",
            "location": 271,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DummyPagerDutyPlugin.post_receive": {
            "name": "post_receive",
            "location": 274,
            "return": [
                "Optional[Type]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "Optional[str]",
                    "cinemanio.core.models.Role",
                    "dict"
                ]
            }
        },
        "DummyPagerDutyPlugin.status_change": {
            "name": "status_change",
            "location": 279,
            "return": [
                "str",
                "Dict[str, str]",
                "bytes",
                "Union[int, float]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "bool"
                ],
                "status": [
                    "str",
                    "bool"
                ],
                "text": [
                    "str",
                    "bool"
                ]
            }
        },
        "DummySlackPlugin.pre_receive": {
            "name": "pre_receive",
            "location": 285,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "DummySlackPlugin.post_receive": {
            "name": "post_receive",
            "location": 288,
            "return": [
                "Optional[Type]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "Optional[str]",
                    "cinemanio.core.models.Role",
                    "dict"
                ]
            }
        },
        "DummySlackPlugin.status_change": {
            "name": "status_change",
            "location": 293,
            "return": [
                "str",
                "Dict[str, str]",
                "bytes",
                "Union[int, float]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "alert": [
                    "str",
                    "bool"
                ],
                "status": [
                    "str",
                    "bool"
                ],
                "text": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "alerta-master/tests/__init__.py": {},
    "alerta-master/tests/helpers/utils.py": {
        "mod_env": {
            "name": "mod_env",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "alerta-master/tests/helpers/__init__.py": {},
    "alerta-master/tests/integration/test_auth_ldap.py": {
        "LDAPIntegrationTestCase.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LDAPIntegrationTestCase.test_login": {
            "name": "test_login",
            "location": 71,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LDAPIntegrationTestCase.test_login_with_ldap_domain": {
            "name": "test_login_with_ldap_domain",
            "location": 98,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LDAPIntegrationTestCase.test_login_with_no_domain": {
            "name": "test_login_with_no_domain",
            "location": 125,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "LDAPIntegrationTestCase.test_login_invalid_group": {
            "name": "test_login_invalid_group",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "alerta-master/tests/integration/test_auth_saml.py": {
        "xpath": {
            "name": "xpath",
            "location": 15,
            "return": [
                "str",
                "List[int]",
                "int"
            ],
            "arguments": {
                "el": [
                    "str",
                    "bool"
                ],
                "path": [
                    "str",
                    "bool"
                ]
            }
        },
        "SAMLIntegrationTestCase.setUp": {
            "name": "setUp",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SAMLIntegrationTestCase.test_login_redirect": {
            "name": "test_login_redirect",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SAMLIntegrationTestCase.test_saml2_metadata": {
            "name": "test_saml2_metadata",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    }
}
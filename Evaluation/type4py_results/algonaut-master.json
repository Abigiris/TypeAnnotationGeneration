{
    "algonaut-master/req.py": {},
    "algonaut-master/setup.py": {},
    "algonaut-master/algonaut/__init__.py": {},
    "algonaut-master/algonaut/api/app.py": {
        "handle_exception": {
            "name": "handle_exception",
            "location": 14,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "dict",
                "str",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "e": [
                    "int",
                    "List[str]",
                    "float",
                    "str"
                ]
            }
        },
        "register_routes": {
            "name": "register_routes",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "routes": [
                    "Callable",
                    "Optional[\"Game\"]",
                    "str",
                    "int",
                    "bool"
                ],
                "app": [
                    "flask.Flask",
                    "str",
                    "dict"
                ],
                "prefix": [
                    "flask.Flask",
                    "str",
                    "dict"
                ]
            }
        },
        "configure": {
            "name": "configure",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "app": [
                    "flask.Flask",
                    "str",
                    "List[str]"
                ],
                "settings": [],
                "routes": [
                    "flask.Flask"
                ],
                "prefix": [
                    "List[str]",
                    "str",
                    "tuple"
                ]
            }
        },
        "page_not_found": {
            "name": "page_not_found",
            "location": 48,
            "return": [
                "dict",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "e": [
                    "Exception",
                    "int",
                    "str",
                    "type",
                    "bool"
                ]
            }
        },
        "method_not_allowed": {
            "name": "method_not_allowed",
            "location": 54,
            "return": [
                "dict",
                "int",
                "Optional[str]",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "e": [
                    "Exception",
                    "bool",
                    "int",
                    "Collection[str]"
                ]
            }
        },
        "get_app": {
            "name": "get_app",
            "location": 60,
            "return": [
                "flask.Flask"
            ],
            "arguments": {
                "settings": [
                    "str",
                    "dict"
                ],
                "routes": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "CustomJSONEncoder.default": {
            "name": "default",
            "location": 73,
            "return": [
                "int",
                "trezor.utils.Writer",
                "List[int]",
                "str",
                "Dict[str, Any]",
                "utils.Node"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[str]",
                    "float",
                    "datetime.timedelta",
                    "Optional[datetime.date]"
                ]
            }
        }
    },
    "algonaut-master/algonaut/api/resource.py": {
        "NotModified.get_response": {
            "name": "get_response",
            "location": 23,
            "return": [
                "bool",
                "Dict[str, str]",
                "Dict[str, Any]",
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "Dict[str, Any]",
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "classproperty.__get__": {
            "name": "__get__",
            "location": 28,
            "return": [
                "str",
                "bool",
                "Optional[Dict[str, Any]]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "cls": [
                    "str",
                    "bool",
                    "int",
                    "MutableMapping",
                    "Optional[int]"
                ],
                "owner": [
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, Tuple[Any, Any]]",
                    "bool",
                    "bytes"
                ]
            }
        },
        "Resource.export": {
            "name": "export",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ],
                "obj": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "Resource.dispatch_request": {
            "name": "dispatch_request",
            "location": 37,
            "return": [
                "dict",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Resource.make_response": {
            "name": "make_response",
            "location": 40,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "Resource.language": {
            "name": "language",
            "location": 46,
            "return": [
                "int",
                "sublime.View",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Resource.add_cache_headers": {
            "name": "add_cache_headers",
            "location": 49,
            "return": [
                "int",
                "str",
                "Dict[str, str]",
                "dict",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "requests.Response",
                    "aiohttp.web.Response",
                    "scrapy.http.Response"
                ]
            }
        },
        "Resource.add_crossdomain_headers": {
            "name": "add_crossdomain_headers",
            "location": 75,
            "return": [
                "set",
                "Union[tuple, list]",
                "Type"
            ],
            "arguments": {
                "self": [],
                "response": [
                    "Dict[str, Any]",
                    "flask.Response",
                    "requests.Response",
                    "dict"
                ]
            }
        },
        "Resource.handle": {
            "name": "handle",
            "location": 107,
            "return": [
                "bool",
                "Dict[str, Any]",
                "Dict[str, bool]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str"
                ]
            }
        },
        "Resource.add_crossdomain_headers.origin_allowed": {
            "name": "origin_allowed",
            "location": 81,
            "return": [
                "bool"
            ],
            "arguments": {
                "origin": [
                    "str"
                ],
                "allowed_origins": [
                    "bool",
                    "List[int]",
                    "int"
                ]
            }
        }
    },
    "algonaut-master/algonaut/api/uwsgi.py": {},
    "algonaut-master/algonaut/api/__init__.py": {},
    "algonaut-master/algonaut/api/decorators/authorized.py": {
        "authorized": {
            "name": "authorized",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "scopes": [
                    "str",
                    "Optional[Iterable[str]]",
                    "int",
                    "bool",
                    "list",
                    "bytes"
                ],
                "superuser": [
                    "str",
                    "Optional[Iterable[str]]",
                    "int",
                    "bool",
                    "list",
                    "bytes"
                ],
                "roles": [
                    "str",
                    "Optional[Iterable[str]]",
                    "int",
                    "bool",
                    "list",
                    "bytes"
                ],
                "org_id_field": [
                    "str",
                    "Optional[Iterable[str]]",
                    "int",
                    "bool",
                    "list",
                    "bytes"
                ]
            }
        },
        "authorized.decorator": {
            "name": "decorator",
            "location": 24,
            "return": [
                "Sequence['cirq.Qid']",
                "bool"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "authorized.decorator.decorated_function": {
            "name": "decorated_function",
            "location": 26,
            "return": [
                "Mapping[str, Any]",
                "bool",
                "Optional[Dict[str, str]]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {}
        },
        "authorized.decorator.decorated_function.get_org_roles": {
            "name": "get_org_roles",
            "location": 27,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "user": [
                    "User",
                    "int",
                    "server.models.User",
                    "lms.lmsdb.models.User",
                    "bool"
                ]
            }
        }
    },
    "algonaut-master/algonaut/api/decorators/object.py": {
        "valid_object": {
            "name": "valid_object",
            "location": 12,
            "return": [
                "Callable[[str], bool]",
                "List[object]",
                "Optional[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "Type": [
                    "str",
                    "Optional[List[Any]]",
                    "Optional[Iterable[str]]",
                    "bool",
                    "int"
                ],
                "roles": [
                    "str",
                    "Optional[List[Any]]",
                    "Optional[Iterable[str]]",
                    "bool",
                    "int"
                ],
                "id_field": [
                    "str",
                    "Optional[List[Any]]",
                    "Optional[Iterable[str]]",
                    "bool",
                    "int"
                ],
                "dependent_id_field": [
                    "str",
                    "Optional[List[Any]]",
                    "Optional[Iterable[str]]",
                    "bool",
                    "int"
                ],
                "DependentTypes": [
                    "str",
                    "Optional[List[Any]]",
                    "Optional[Iterable[str]]",
                    "bool",
                    "int"
                ],
                "Joins": [
                    "str",
                    "Optional[List[Any]]",
                    "Optional[Iterable[str]]",
                    "bool",
                    "int"
                ],
                "JoinBy": [
                    "str",
                    "Optional[List[Any]]",
                    "Optional[Iterable[str]]",
                    "bool",
                    "int"
                ]
            }
        },
        "valid_object.decorator": {
            "name": "decorator",
            "location": 28,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "List[magic.models.Card]"
            ],
            "arguments": {
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "valid_object.decorator.decorated_function": {
            "name": "decorated_function",
            "location": 30,
            "return": [
                "str",
                "Optional[str]",
                "Union[None, int, str]"
            ],
            "arguments": {}
        },
        "valid_object.decorator.decorated_function.authorize": {
            "name": "authorize",
            "location": 40,
            "return": [
                "slice",
                "List[int]",
                "dep_check.models.GlobalDependencies"
            ],
            "arguments": {
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "str",
                    "sqlalchemy.orm.Session",
                    "set"
                ]
            }
        }
    },
    "algonaut-master/algonaut/api/decorators/__init__.py": {},
    "algonaut-master/algonaut/api/v1/routes.py": {},
    "algonaut-master/algonaut/api/v1/__init__.py": {},
    "algonaut-master/algonaut/api/v1/forms/algorithm.py": {},
    "algonaut-master/algonaut/api/v1/forms/algorithmschema.py": {},
    "algonaut-master/algonaut/api/v1/forms/datapoint.py": {},
    "algonaut-master/algonaut/api/v1/forms/dataschema.py": {},
    "algonaut-master/algonaut/api/v1/forms/dataset.py": {},
    "algonaut-master/algonaut/api/v1/forms/model.py": {},
    "algonaut-master/algonaut/api/v1/forms/object_role.py": {},
    "algonaut-master/algonaut/api/v1/forms/project.py": {},
    "algonaut-master/algonaut/api/v1/forms/result.py": {},
    "algonaut-master/algonaut/api/v1/forms/validators.py": {
        "Path.__call__": {
            "name": "__call__",
            "location": 7,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str"
                ],
                "form": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "algonaut-master/algonaut/api/v1/forms/__init__.py": {},
    "algonaut-master/algonaut/api/v1/resources/algorithm.py": {},
    "algonaut-master/algonaut/api/v1/resources/algorithmschema.py": {},
    "algonaut-master/algonaut/api/v1/resources/datapoint.py": {
        "BulkDatapoints.post": {
            "name": "post",
            "location": 22,
            "return": [
                "Optional[Type]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "algorithm_id": [
                    "str",
                    "bytes"
                ],
                "dataset_id": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "algonaut-master/algonaut/api/v1/resources/dataschema.py": {},
    "algonaut-master/algonaut/api/v1/resources/dataset.py": {},
    "algonaut-master/algonaut/api/v1/resources/model.py": {
        "CreateModel.post": {
            "name": "post",
            "location": 30,
            "return": [
                "bool",
                "deeplearning.ml4pl.models.logger.Logger",
                "Dict[str, Any]",
                "str",
                "Mapping[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "algorithm_id": [
                    "verification_token.models.Token",
                    "Optional[bytes]",
                    "int"
                ],
                "dataset_id": [
                    "verification_token.models.Token",
                    "Optional[bytes]",
                    "int"
                ]
            }
        }
    },
    "algonaut-master/algonaut/api/v1/resources/object.py": {
        "admin_orgs_id_query": {
            "name": "admin_orgs_id_query",
            "location": 16,
            "return": [
                "Optional[str]",
                "Dict[str, float]",
                "str"
            ],
            "arguments": {
                "session": [
                    "User",
                    "str",
                    "sqlalchemy.orm.Session",
                    "django.contrib.auth.models.User",
                    "user_models.User",
                    "sqlalchemy.orm.session.Session"
                ],
                "user": [
                    "bool",
                    "reader_server.types.User",
                    "asgard.models.agenAgent",
                    "int",
                    "bytes",
                    "str",
                    "Optional[str]",
                    "server.models.User"
                ]
            }
        },
        "Objects": {
            "name": "Objects",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "Type": [
                    "Optional[Any]"
                ],
                "Form": [
                    "Optional[Any]"
                ],
                "DependentTypes": [
                    "Optional[Any]"
                ],
                "JoinBy": [
                    "Optional[Any]"
                ],
                "Joins": [
                    "Optional[Any]"
                ]
            }
        },
        "ObjectDetails": {
            "name": "ObjectDetails",
            "location": 194,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "Type": [
                    "Optional[Any]"
                ],
                "Form": [
                    "Optional[Any]"
                ],
                "DependentTypes": [
                    "Optional[Any]"
                ],
                "JoinBy": [
                    "Optional[Any]"
                ],
                "Joins": [
                    "Optional[Any]"
                ]
            }
        },
        "Objects.Objects.get": {
            "name": "get",
            "location": 65,
            "return": [
                "list",
                "List[str]",
                "Optional[dict]",
                "Tuple[int]",
                "Optional[T]"
            ],
            "arguments": {
                "self": [],
                "object_id": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        },
        "Objects.Objects.post": {
            "name": "post",
            "location": 121,
            "return": [
                "bool",
                "deeplearning.ml4pl.models.logger.Logger",
                "Dict[str, Any]",
                "str",
                "Mapping[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "object_id": [
                    "str",
                    "bytes"
                ],
                "organization_id": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ObjectDetails.ObjectDetails.get": {
            "name": "get",
            "location": 222,
            "return": [
                "BaseException",
                "bool",
                "Type[BaseException]",
                "db.models.Name"
            ],
            "arguments": {
                "self": [],
                "object_id": [
                    "str"
                ],
                "dependent_id": [
                    "str"
                ]
            }
        },
        "ObjectDetails.ObjectDetails.patch": {
            "name": "patch",
            "location": 231,
            "return": [
                "str",
                "Dict[str, Any]",
                "int",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": [],
                "object_id": [
                    "str",
                    "bytes",
                    "int"
                ],
                "dependent_id": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        },
        "ObjectDetails.ObjectDetails.delete": {
            "name": "delete",
            "location": 247,
            "return": [
                "str",
                "int",
                "sqlalchemy.orm.Session"
            ],
            "arguments": {
                "self": [],
                "object_id": [
                    "str"
                ],
                "dependent_id": [
                    "str"
                ]
            }
        }
    },
    "algonaut-master/algonaut/api/v1/resources/object_role.py": {},
    "algonaut-master/algonaut/api/v1/resources/organization.py": {
        "Organizations.get": {
            "name": "get",
            "location": 9,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "str",
                "Callable",
                "Optional[str]",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algonaut-master/algonaut/api/v1/resources/project.py": {},
    "algonaut-master/algonaut/api/v1/resources/result.py": {
        "DatapointModelResults.get": {
            "name": "get",
            "location": 58,
            "return": [
                "list",
                "List[str]",
                "Optional[dict]",
                "Tuple[int]",
                "Optional[T]"
            ],
            "arguments": {
                "self": [],
                "datapoint_id": [
                    "str"
                ],
                "model_id": [
                    "str"
                ]
            }
        },
        "DatapointModelResults.post": {
            "name": "post",
            "location": 83,
            "return": [
                "bool",
                "deeplearning.ml4pl.models.logger.Logger",
                "Dict[str, Any]",
                "str",
                "Mapping[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "datapoint_id": [
                    "str"
                ],
                "model_id": [
                    "str"
                ]
            }
        },
        "DatasetModelResults.get": {
            "name": "get",
            "location": 134,
            "return": [
                "list",
                "List[str]",
                "Optional[dict]",
                "Tuple[int]",
                "Optional[T]"
            ],
            "arguments": {
                "self": [],
                "dataset_id": [
                    "str"
                ],
                "model_id": [
                    "str"
                ]
            }
        },
        "DatasetModelResults.post": {
            "name": "post",
            "location": 155,
            "return": [
                "bool",
                "deeplearning.ml4pl.models.logger.Logger",
                "Dict[str, Any]",
                "str",
                "Mapping[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "dataset_id": [
                    "str"
                ],
                "model_id": [
                    "str"
                ]
            }
        }
    },
    "algonaut-master/algonaut/api/v1/resources/__init__.py": {},
    "algonaut-master/algonaut/cli/api.py": {
        "api": {
            "name": "api",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run_api": {
            "name": "run_api",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "algonaut-master/algonaut/cli/db.py": {
        "db": {
            "name": "db",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "migrate": {
            "name": "migrate",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "plugin": [
                    "Tuple[int, int]",
                    "List[str]",
                    "bytes"
                ],
                "version": [
                    "Tuple[int, int]",
                    "List[str]",
                    "bytes"
                ],
                "down": [
                    "Tuple[int, int]",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "_migrate_db": {
            "name": "_migrate_db",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "plugin": [
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Any]",
                    "str",
                    "List[int]",
                    "Callable[[], None]"
                ],
                "version": [
                    "bool",
                    "str",
                    "Iterable[str]"
                ],
                "down": [
                    "bool",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "_migrate_core": {
            "name": "_migrate_core",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "version": [
                    "str",
                    "List[object]",
                    "TextIO",
                    "int"
                ]
            }
        },
        "_migrate_plugin": {
            "name": "_migrate_plugin",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "plugin_name": [
                    "str"
                ],
                "version": [
                    "str",
                    "int"
                ]
            }
        },
        "_migrate_path": {
            "name": "_migrate_path",
            "location": 64,
            "return": [
                "str",
                "Iterator[object]",
                "Union[tuple, list]",
                "Tuple[int, str]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]"
                ],
                "version": [
                    "Optional[bool]",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "clean_db_cmd": {
            "name": "clean_db_cmd",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "plugin": [
                    "settings.Settings",
                    "bool",
                    "cmk.utils.type_defs.ServiceName",
                    "cmk.utils.type_defs.HostName",
                    "List[str]",
                    "os.DirEntry",
                    "float"
                ]
            }
        },
        "_clean_db": {
            "name": "_clean_db",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "settings": [
                    "Dict[str, Any]",
                    "dict",
                    "core_lib.core.models.Event"
                ],
                "plugin": [
                    "Optional[users.models.User]",
                    "int",
                    "str",
                    "bool",
                    "dict",
                    "Optional[dict]"
                ]
            }
        },
        "_migrate_db.migrate_plugin": {
            "name": "migrate_plugin",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "plugin": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "_migrate_db.migrate_plugins": {
            "name": "migrate_plugins",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_migrate_db.migrate_core": {
            "name": "migrate_core",
            "location": 36,
            "return": [
                "str",
                "raiden.utils.Tuple[int, int]",
                "bytes",
                "type",
                "List[dict]",
                "utils.Node",
                "int"
            ],
            "arguments": {}
        }
    },
    "algonaut-master/algonaut/cli/main.py": {
        "algonaut": {
            "name": "algonaut",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "verbose": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "algonaut-master/algonaut/cli/worker.py": {
        "worker": {
            "name": "worker",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "run_worker": {
            "name": "run_worker",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "initialize_rabbitmq": {
            "name": "initialize_rabbitmq",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "algonaut-master/algonaut/cli/__init__.py": {},
    "algonaut-master/algonaut/models/algorithm.py": {
        "Algorithm.export_fields": {
            "name": "export_fields",
            "location": 30,
            "return": [
                "Optional[str]",
                "Dict[str, str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Algorithm.get_existing": {
            "name": "get_existing",
            "location": 38,
            "return": [
                "Dict[str, str]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "Algorithm.hash_data": {
            "name": "hash_data",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Type[T]",
                    "Dict[str, Any]",
                    "List[Dict]",
                    "str"
                ],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "algonaut-master/algonaut/models/algorithmschema.py": {
        "AlgorithmSchema.get_existing": {
            "name": "get_existing",
            "location": 20,
            "return": [
                "int",
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session",
                    "str",
                    "alerta.database.base.Query"
                ]
            }
        },
        "AlgorithmSchema.hash_data": {
            "name": "hash_data",
            "location": 30,
            "return": [
                "Dict[str, Any]",
                "dict",
                "int"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Type[T]",
                    "Dict[str, Any]",
                    "List[Dict]",
                    "str"
                ],
                "data": [
                    "dict",
                    "Dict[int, Dict]"
                ]
            }
        }
    },
    "algonaut-master/algonaut/models/algorithm_algorithmschema.py": {},
    "algonaut-master/algonaut/models/algorithm_result.py": {
        "AlgorithmResult.export_fields": {
            "name": "export_fields",
            "location": 27,
            "return": [
                "bool",
                "Dict[str, Any]",
                "List[str]",
                "Optional[Match]",
                "str",
                "Dict[str, Iterable[Any]]",
                "Any",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AlgorithmResult.get_existing": {
            "name": "get_existing",
            "location": 30,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "str",
                    "sqlalchemy.orm.scoped_session"
                ]
            }
        }
    },
    "algonaut-master/algonaut/models/base.py": {
        "Base.set_data": {
            "name": "set_data",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "VT",
                    "KT"
                ],
                "value": [
                    "str",
                    "VT",
                    "KT"
                ]
            }
        },
        "Base.get_data": {
            "name": "get_data",
            "location": 43,
            "return": [
                "Optional[str]",
                "Dict[str, Any]",
                "Optional[List[str]]",
                "Optional[List[Any]]",
                "Iterable[T]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ]
            }
        },
        "Base.type": {
            "name": "type",
            "location": 49,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.hash_data": {
            "name": "hash_data",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Type[T]",
                    "Dict[str, Any]",
                    "List[Dict]",
                    "str"
                ],
                "data": [
                    "dict",
                    "Type[T]",
                    "Dict[str, Any]",
                    "List[Dict]",
                    "str"
                ]
            }
        },
        "Base.export_fields": {
            "name": "export_fields",
            "location": 56,
            "return": [
                "int",
                "List[int]",
                "str",
                "List[str]",
                "Tuple[int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.export": {
            "name": "export",
            "location": 59,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Base.delete": {
            "name": "delete",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "sqlalchemy.orm.Session",
                    "Tuple[float, float]",
                    "sqlalchemy.engine.base.Engine",
                    "abilian.core.sqlalchemy.SQLAlchemy",
                    "str",
                    "sqlalchemy.orm.scoped_session"
                ],
                "context": [
                    "sqlalchemy.orm.unitofwork.UOWTransaction",
                    "str",
                    "Optional[sqlalchemy.orm.session.Session]",
                    "list"
                ]
            }
        },
        "Base.get_existing": {
            "name": "get_existing",
            "location": 89,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "dict",
                    "Optional[sqlalchemy.orm.session.Session]",
                    "sqlalchemy.orm.unitofwork.UOWTransaction",
                    "str",
                    "list",
                    "Iterable"
                ]
            }
        }
    },
    "algonaut-master/algonaut/models/datapoint.py": {
        "Datapoint.get_existing": {
            "name": "get_existing",
            "location": 20,
            "return": [
                "Dict[str, str]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session",
                    "alerta.database.base.Query",
                    "str"
                ]
            }
        },
        "Datapoint.hash_data": {
            "name": "hash_data",
            "location": 28,
            "return": [
                "Dict[str, Any]",
                "dict",
                "int"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Type[T]",
                    "Dict[str, Any]",
                    "List[Dict]",
                    "str"
                ],
                "data": [
                    "dict",
                    "Dict[int, Dict]"
                ]
            }
        }
    },
    "algonaut-master/algonaut/models/datapoint_model_result.py": {
        "DatapointModelResult.export_fields": {
            "name": "export_fields",
            "location": 33,
            "return": [
                "bool",
                "Dict[str, Any]",
                "List[str]",
                "Optional[Match]",
                "str",
                "Dict[str, Iterable[Any]]",
                "Any",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatapointModelResult.get_existing": {
            "name": "get_existing",
            "location": 36,
            "return": [
                "int",
                "str",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session",
                    "str",
                    "alerta.database.base.Query",
                    "grouper.models.base.session.Session"
                ]
            }
        }
    },
    "algonaut-master/algonaut/models/dataschema.py": {
        "DataSchema.get_existing": {
            "name": "get_existing",
            "location": 20,
            "return": [
                "int",
                "bool",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session",
                    "str",
                    "alerta.database.base.Query"
                ]
            }
        },
        "DataSchema.hash_data": {
            "name": "hash_data",
            "location": 28,
            "return": [
                "Dict[str, Any]",
                "dict",
                "int"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Type[T]",
                    "Dict[str, Any]",
                    "List[Dict]",
                    "str"
                ],
                "data": [
                    "dict",
                    "Dict[int, Dict]"
                ]
            }
        }
    },
    "algonaut-master/algonaut/models/dataset.py": {
        "Dataset.export_fields": {
            "name": "export_fields",
            "location": 29,
            "return": [
                "Optional[str]",
                "Dict[str, str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.get_existing": {
            "name": "get_existing",
            "location": 37,
            "return": [
                "Dict[str, str]",
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session"
                ]
            }
        },
        "Dataset.hash_data": {
            "name": "hash_data",
            "location": 50,
            "return": [
                "Dict[str, Any]",
                "dict",
                "int"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Type[T]",
                    "Dict[str, Any]",
                    "List[Dict]",
                    "str"
                ],
                "data": [
                    "dict",
                    "Dict[int, Dict]"
                ]
            }
        }
    },
    "algonaut-master/algonaut/models/dataset_datapoint.py": {},
    "algonaut-master/algonaut/models/dataset_dataschema.py": {},
    "algonaut-master/algonaut/models/dataset_model_result.py": {
        "DatasetModelResult.export_fields": {
            "name": "export_fields",
            "location": 33,
            "return": [
                "bool",
                "Dict[str, Any]",
                "List[str]",
                "Optional[Match]",
                "str",
                "Dict[str, Iterable[Any]]",
                "Any",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetModelResult.get_existing": {
            "name": "get_existing",
            "location": 36,
            "return": [
                "int",
                "str",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "sqlalchemy.orm.Session",
                    "str",
                    "alerta.database.base.Query",
                    "grouper.models.base.session.Session"
                ]
            }
        }
    },
    "algonaut-master/algonaut/models/dataset_result.py": {
        "DatasetResult.export_fields": {
            "name": "export_fields",
            "location": 27,
            "return": [
                "bool",
                "Dict[str, Any]",
                "List[str]",
                "Optional[Match]",
                "str",
                "Dict[str, Iterable[Any]]",
                "Any",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatasetResult.get_existing": {
            "name": "get_existing",
            "location": 30,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "str",
                    "sqlalchemy.orm.scoped_session"
                ]
            }
        }
    },
    "algonaut-master/algonaut/models/hashable.py": {
        "Hashable.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algonaut-master/algonaut/models/model.py": {
        "Model.export_fields": {
            "name": "export_fields",
            "location": 35,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Model.get_existing": {
            "name": "get_existing",
            "location": 42,
            "return": [
                "int",
                "str",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "sqlalchemy.orm.session.Session"
                ]
            }
        },
        "Model.hash_data": {
            "name": "hash_data",
            "location": 55,
            "return": [
                "Dict[str, Any]",
                "dict",
                "int"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "Type[T]",
                    "Dict[str, Any]",
                    "List[Dict]",
                    "str"
                ],
                "data": [
                    "dict",
                    "Dict[int, Dict]"
                ]
            }
        }
    },
    "algonaut-master/algonaut/models/model_result.py": {
        "ModelResult.export_fields": {
            "name": "export_fields",
            "location": 27,
            "return": [
                "bool",
                "Dict[str, Any]",
                "List[str]",
                "Optional[Match]",
                "str",
                "Dict[str, Iterable[Any]]",
                "Any",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ModelResult.get_existing": {
            "name": "get_existing",
            "location": 30,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "sqlalchemy.orm.session.Session",
                    "grouper.models.base.session.Session",
                    "sqlalchemy.orm.Session"
                ]
            }
        }
    },
    "algonaut-master/algonaut/models/object_role.py": {
        "ObjectRole.get_or_create": {
            "name": "get_or_create",
            "location": 44,
            "return": [
                "List[str]",
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "List[Dict[str, Any]]",
                    "bool"
                ],
                "session": [
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session",
                    "bool",
                    "Optional[str]"
                ],
                "object": [
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session",
                    "bool",
                    "Optional[str]"
                ],
                "organization": [
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session",
                    "bool",
                    "Optional[str]"
                ],
                "object_role": [
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session",
                    "bool",
                    "Optional[str]"
                ],
                "organization_role": [
                    "sqlalchemy.orm.Session",
                    "sqlalchemy.orm.session.Session",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "ObjectRole.roles_for": {
            "name": "roles_for",
            "location": 81,
            "return": [
                "Dict[str, Any]",
                "sqlalchemy.MetaData",
                "int",
                "Dict[str, Dict[str, Any]]"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Optional[List[str]]",
                    "User",
                    "sqlalchemy.orm.session.Session",
                    "Union[eth.rlp.transactions.BaseTransaction, eth.utils.spoof.SpoofTransaction]"
                ],
                "session": [
                    "app.models.models.User",
                    "bool",
                    "medtagger.database.models.User",
                    "str",
                    "User",
                    "Dict[str, Any]"
                ],
                "user": [
                    "str",
                    "dict",
                    "bool"
                ],
                "object": [
                    "Type[tikki.db.tables.Base]",
                    "Dict[str, Any]",
                    "sqlalchemy.orm.session.Session",
                    "str",
                    "dict",
                    "grouper.models.base.session.Session"
                ]
            }
        },
        "ObjectRole.select_for": {
            "name": "select_for",
            "location": 100,
            "return": [
                "dict",
                "sqlalchemy.MetaData",
                "int",
                "str",
                "Dict[str, Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "int",
                    "Optional['Node']",
                    "Type[T]"
                ],
                "session": [
                    "Optional[int]",
                    "str",
                    "Optional[str]"
                ],
                "user": [
                    "Optional[str]",
                    "bool",
                    "Optional[List[Any]]",
                    "str"
                ],
                "object_type": [
                    "Type",
                    "int",
                    "str",
                    "cmk.utils.type_defs.HostName"
                ],
                "object_roles": [
                    "cmk.utils.type_defs.HostAddress",
                    "Optional[str]",
                    "Optional[cmk.utils.structured_data.StructuredDataTree]",
                    "Optional[abilian.core.models.subjects.User]",
                    "str"
                ]
            }
        }
    },
    "algonaut-master/algonaut/models/organization.py": {
        "Organization.get_or_create": {
            "name": "get_or_create",
            "location": 21,
            "return": [
                "List[str]",
                "int",
                "str",
                "Callable"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "raiden.utils.List[raiden.utils.Tuple[str, raiden.utils.Any]]",
                    "sqlalchemy.engine.url.URL",
                    "Optional[str]",
                    "str"
                ],
                "session": [
                    "Optional[List[Any]]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "sqlalchemy.orm.session.Session",
                    "str"
                ],
                "auth_org": [
                    "Optional[List[Any]]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "sqlalchemy.orm.session.Session",
                    "str"
                ]
            }
        },
        "Organization.export_fields": {
            "name": "export_fields",
            "location": 42,
            "return": [
                "str",
                "Dict[str, str]",
                "Iterable[cmk.utils.type_defs.SectionName]",
                "Union[Callable, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algonaut-master/algonaut/models/project.py": {
        "Project.get_existing": {
            "name": "get_existing",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "session": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "dict",
                    "sqlalchemy.orm.session.Session",
                    "Optional[str]"
                ]
            }
        },
        "Project.export_fields": {
            "name": "export_fields",
            "location": 37,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algonaut-master/algonaut/models/__init__.py": {
        "clean_db": {
            "name": "clean_db",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "session": [
                    "grouper.models.base.session.Session"
                ]
            }
        }
    },
    "algonaut-master/algonaut/plugins/__init__.py": {},
    "algonaut-master/algonaut/settings/base.py": {
        "Settings.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "str",
                    "float",
                    "cmk.utils.type_defs.HostName",
                    "int"
                ]
            }
        },
        "Settings._get_auth_client": {
            "name": "_get_auth_client",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.auth_client": {
            "name": "auth_client",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "client": [
                    "Callable"
                ]
            }
        }
    },
    "algonaut-master/algonaut/settings/__init__.py": {},
    "algonaut-master/algonaut/utils/celery.py": {
        "make_celery": {
            "name": "make_celery",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "settings": [
                    "Dict[str, Any]",
                    "List[dict]",
                    "bytes"
                ]
            }
        }
    },
    "algonaut-master/algonaut/utils/hashing.py": {
        "get_hash": {
            "name": "get_hash",
            "location": 38,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "node": [
                    "str",
                    "Callable",
                    "type",
                    "Sequence"
                ],
                "fields": [
                    "Optional[str]",
                    "str",
                    "type",
                    "Callable"
                ],
                "exclude": [
                    "Optional[str]",
                    "str",
                    "type",
                    "Callable"
                ]
            }
        },
        "Hasher.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Hasher.add": {
            "name": "add",
            "location": 12,
            "return": [
                "Callable[[], Dict[str, object]]",
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "Hasher.digest": {
            "name": "digest",
            "location": 34,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "get_hash.add_to_hash": {
            "name": "add_to_hash",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "value": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Union[str, int]"
                ]
            }
        }
    },
    "algonaut-master/algonaut/utils/migrations.py": {
        "MigrationManager.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int",
                    "bool"
                ],
                "connection": [
                    "dict",
                    "bool",
                    "Optional[IO[str]]",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "MigrationManager.load_config": {
            "name": "load_config",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MigrationManager.load_migrations": {
            "name": "load_migrations",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "encoding": [
                    "str",
                    "Optional[str]",
                    "bytes",
                    "Iterable[str]"
                ]
            }
        },
        "MigrationManager.get_current_version": {
            "name": "get_current_version",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MigrationManager.update_version_table": {
            "name": "update_version_table",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str",
                    "Optional[int]",
                    "Dict[str, str]"
                ]
            }
        },
        "MigrationManager.migrate": {
            "name": "migrate",
            "location": 110,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "int",
                    "Dict[str, Any]",
                    "Optional[bool]"
                ],
                "in_transaction": [
                    "Optional[Union[int, Any]]",
                    "Dict[str, Any]",
                    "Union[int, str]",
                    "Optional[bool]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "MigrationManager.execute_migrations": {
            "name": "execute_migrations",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "migrations": [
                    "str",
                    "int",
                    "logging.Logger"
                ],
                "direction": [
                    "str",
                    "int",
                    "logging.Logger"
                ],
                "in_transaction": [
                    "bool",
                    "Tuple[str, int]",
                    "int"
                ]
            }
        }
    },
    "algonaut-master/algonaut/utils/regex.py": {
        "RegexConverter.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "url_map": [
                    "str",
                    "Optional[int]"
                ]
            }
        }
    },
    "algonaut-master/algonaut/utils/settings.py": {
        "get_func_by_name": {
            "name": "get_func_by_name",
            "location": 300,
            "return": [
                "list",
                "Optional[int]",
                "dict"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "load_settings": {
            "name": "load_settings",
            "location": 307,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]",
                "str",
                "int"
            ],
            "arguments": {
                "filenames": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "update": {
            "name": "update",
            "location": 320,
            "return": [
                ""
            ],
            "arguments": {
                "d": [
                    "str",
                    "Type",
                    "dict",
                    "Dict[str, Any]"
                ],
                "ud": [
                    "Dict[str, str]",
                    "Iterable[Tuple[Hashable, Any]]",
                    "str"
                ],
                "overwrite": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]",
                    "Dict[str, float]",
                    "Callable"
                ]
            }
        },
        "interpolate": {
            "name": "interpolate",
            "location": 332,
            "return": [
                ""
            ],
            "arguments": {
                "d": [
                    "dict",
                    "Dict[str, Any]",
                    "Callable",
                    "abc.ABCMeta"
                ],
                "context": [
                    "Callable",
                    "Callable[[T], None]",
                    "Dict[str, str]"
                ]
            }
        },
        "Worker.register": {
            "name": "register",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "Worker.run": {
            "name": "run",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CeleryWorker.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "Dict[str, Any]"
                ],
                "config": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "CeleryWorker.register": {
            "name": "register",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "task": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "CeleryWorker.run": {
            "name": "run",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CeleryWorker.delay": {
            "name": "delay",
            "location": 45,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "T"
                ]
            }
        },
        "ThreadWorker.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "settings": [
                    "dict",
                    "str",
                    "list"
                ],
                "config": [
                    "dict"
                ]
            }
        },
        "ThreadWorker.delay": {
            "name": "delay",
            "location": 55,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Dict[str, int]]",
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "Callable[[T], bool]",
                    "float"
                ]
            }
        },
        "ThreadWorker.register": {
            "name": "register",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "f": [
                    "Iterable[str]",
                    "Callable",
                    "T"
                ]
            }
        },
        "ThreadWorker.run": {
            "name": "run",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "int",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Settings.register_task": {
            "name": "register_task",
            "location": 78,
            "return": [
                "str",
                "bytes",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "task": [
                    "Dict[str, Any]",
                    "str",
                    "List[Dict]",
                    "int"
                ]
            }
        },
        "Settings.update": {
            "name": "update",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "d": [
                    "int",
                    "str",
                    "float",
                    "Type[object]"
                ]
            }
        },
        "Settings.setup_logging": {
            "name": "setup_logging",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "level": [
                    "int"
                ]
            }
        },
        "Settings.encrypt": {
            "name": "encrypt",
            "location": 94,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Dict[str, object]",
                    "bool",
                    "int",
                    "bytes",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "Settings.decrypt": {
            "name": "decrypt",
            "location": 100,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "str",
                    "Union[str, bytes]"
                ],
                "ttl": [
                    "bytes",
                    "str",
                    "Union[str, bytes]"
                ]
            }
        },
        "Settings.get_db_engine": {
            "name": "get_db_engine",
            "location": 106,
            "return": [
                "str",
                "bool",
                "sqlalchemy.orm.Session",
                "bytes",
                "Tuple[int, int, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.session": {
            "name": "session",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fresh": [
                    "Callable",
                    "int"
                ],
                "retry": [
                    "Callable",
                    "int"
                ]
            }
        },
        "Settings.get_session": {
            "name": "get_session",
            "location": 127,
            "return": [
                "sqlalchemy.engine.Engine",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "fresh": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "dict"
                ],
                "retry": [
                    "str",
                    "int",
                    "bool",
                    "Sequence[int]",
                    "Optional",
                    "Callable"
                ]
            }
        },
        "Settings.dispose_all_sessions": {
            "name": "dispose_all_sessions",
            "location": 140,
            "return": [
                "int",
                "DefaultDict",
                "Set[str]",
                "str",
                "Set[VT]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.initialize": {
            "name": "initialize",
            "location": 150,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.initialize_worker": {
            "name": "initialize_worker",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.delay": {
            "name": "delay",
            "location": 159,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "func": [
                    "Callable",
                    "bool"
                ]
            }
        },
        "Settings.get": {
            "name": "get",
            "location": 162,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "default": [
                    "str",
                    "Optional[Any]"
                ]
            }
        },
        "Settings.set": {
            "name": "set",
            "location": 176,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes"
                ],
                "value": [
                    "Optional[str]",
                    "str",
                    "Hashable",
                    "Optional[int]"
                ]
            }
        },
        "Settings.load_plugin_module": {
            "name": "load_plugin_module",
            "location": 191,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Settings.load_plugin_config": {
            "name": "load_plugin_config",
            "location": 200,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ],
                "setup_module": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Settings.get_plugin_path": {
            "name": "get_plugin_path",
            "location": 205,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "Settings.load_plugin": {
            "name": "load_plugin",
            "location": 209,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "Settings.load_plugins": {
            "name": "load_plugins",
            "location": 239,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.get_plugin_apis": {
            "name": "get_plugin_apis",
            "location": 246,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.get_plugin_exports": {
            "name": "get_plugin_exports",
            "location": 258,
            "return": [
                "str",
                "List[Dict]",
                "list",
                "List[int]",
                "List[List[Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "resource_name": [
                    "str"
                ]
            }
        },
        "Settings.get_plugin_includes": {
            "name": "get_plugin_includes",
            "location": 269,
            "return": [
                "str",
                "List[Dict]",
                "list",
                "List[int]",
                "List[List[Any]]",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "resource_name": [
                    "str",
                    "Sequence[str]",
                    "Optional[Mapping[str, Any]]"
                ]
            }
        },
        "Settings.translations": {
            "name": "translations",
            "location": 290,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Settings.translate": {
            "name": "translate",
            "location": 293,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "language": [
                    "str",
                    "Optional[str]",
                    "Optional[Union[Any, str]]",
                    "dict",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "Dict[str, List[Any]]",
                    "bytes"
                ],
                "key": [
                    "str",
                    "Optional[str]",
                    "Optional[Union[Any, str]]",
                    "dict",
                    "List[Dict[str, Any]]",
                    "List[str]",
                    "Dict[str, List[Any]]",
                    "bytes"
                ]
            }
        },
        "interpolate.format": {
            "name": "format",
            "location": 333,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "s": [
                    "str"
                ]
            }
        }
    },
    "algonaut-master/algonaut/utils/__init__.py": {},
    "algonaut-master/algonaut/utils/auth/access_token.py": {
        "AccessToken.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "AccessToken.token": {
            "name": "token",
            "location": 6,
            "return": [
                "int",
                "bool",
                "str",
                "Iterable[str]",
                "List[str]",
                "List[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algonaut-master/algonaut/utils/auth/auth_client.py": {
        "get_access_token": {
            "name": "get_access_token",
            "location": 9,
            "return": [
                "str",
                "Optional[str]",
                "Union[None, List[str]]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "request": [
                    "flask.Request"
                ]
            }
        },
        "AuthClient.get_user": {
            "name": "get_user",
            "location": 22,
            "return": [
                "typing.Optional[user.User]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "flask.Request",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "algonaut-master/algonaut/utils/auth/organization.py": {
        "Organization.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "source": [
                    "str",
                    "Optional[int]",
                    "int",
                    "bool"
                ],
                "id": [
                    "str",
                    "List[str]"
                ],
                "default": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Tuple[float, float]",
                    "List[str]",
                    "int"
                ],
                "description": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Tuple[float, float]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "Organization.name": {
            "name": "name",
            "location": 20,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Organization.default": {
            "name": "default",
            "location": 24,
            "return": [
                "list",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Organization.id": {
            "name": "id",
            "location": 28,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Organization.source": {
            "name": "source",
            "location": 32,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Organization.description": {
            "name": "description",
            "location": 36,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Organization.export": {
            "name": "export",
            "location": 39,
            "return": [
                "str",
                "int",
                "bool",
                "tuple",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algonaut-master/algonaut/utils/auth/user.py": {
        "OrganizationRoles.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "organization": [
                    "int",
                    "bool",
                    "float"
                ],
                "roles": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "OrganizationRoles.organization": {
            "name": "organization",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrganizationRoles.roles": {
            "name": "roles",
            "location": 17,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OrganizationRoles.export": {
            "name": "export",
            "location": 20,
            "return": [
                "dict",
                "Dict[str, bool]",
                "Union[Dict, str]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "with_org": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "User.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "access_token": [
                    "str",
                    "List[str]"
                ],
                "organization_roles": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "User.roles": {
            "name": "roles",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "User.access_token": {
            "name": "access_token",
            "location": 39,
            "return": [
                "int",
                "Optional[List[str]]",
                "Dict[str, float]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algonaut-master/algonaut/utils/auth/worf.py": {
        "binary_id": {
            "name": "binary_id",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "uuid": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "AuthClient.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "AuthClient._request": {
            "name": "_request",
            "location": 24,
            "return": [
                "str",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "Callable",
                    "str"
                ],
                "access_token": [
                    "str",
                    "bool",
                    "int"
                ],
                "url": [
                    "str",
                    "Optional[Dict]"
                ]
            }
        },
        "AuthClient._get": {
            "name": "_get",
            "location": 34,
            "return": [
                "str",
                "bool",
                "server.models.User",
                "contests.models.User",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "access_token": [
                    "str",
                    "Dict[str, str]",
                    "Optional[Dict]"
                ],
                "url": [
                    "str",
                    "Dict[str, str]",
                    "Optional[Dict]"
                ]
            }
        },
        "AuthClient.get_user": {
            "name": "get_user",
            "location": 37,
            "return": [
                "Optional[str]",
                "str",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int"
                ]
            }
        }
    },
    "algonaut-master/algonaut/utils/auth/__init__.py": {},
    "algonaut-master/algonaut/utils/email/jinja.py": {
        "jinja_email": {
            "name": "jinja_email",
            "location": 24,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "template_path": [
                    "str",
                    "int"
                ],
                "context": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Union[str, int]]",
                    "Optional[Dict[str, Any]]",
                    "bytes"
                ],
                "version": [
                    "bool",
                    "Dict[str, Any]",
                    "type",
                    "MutableMapping[str, str]",
                    "str",
                    "List[Dict]",
                    "Optional[int]",
                    "dict",
                    "Optional[str]"
                ],
                "language": [
                    "bool",
                    "List[int]",
                    "int",
                    "str"
                ]
            }
        },
        "TemplateLoader.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "paths": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "TemplateLoader.get_source": {
            "name": "get_source",
            "location": 11,
            "return": [
                "Dict[str, Any]",
                "str",
                "List[str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "environment": [
                    "list",
                    "str",
                    "Iterable[str]"
                ],
                "template": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "jinja_email.get_url": {
            "name": "get_url",
            "location": 33,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "path": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "query": [
                    "bool",
                    "type",
                    "str",
                    "MutableMapping[str, str]"
                ]
            }
        },
        "jinja_email.translate": {
            "name": "translate",
            "location": 39,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "key": [
                    "str",
                    "list",
                    "Tuple[int, int]",
                    "int"
                ],
                "language": [
                    "str",
                    "list",
                    "Tuple[int, int]",
                    "int"
                ]
            }
        }
    },
    "algonaut-master/algonaut/utils/email/send.py": {
        "send_email": {
            "name": "send_email",
            "location": 15,
            "return": [
                "str",
                "services.email.transfer.models.Message",
                "deque",
                "int",
                "list"
            ],
            "arguments": {
                "to": [
                    "int",
                    "str",
                    "cmk.utils.type_defs.HostName",
                    "Optional[Tuple[int, int]]",
                    "bool"
                ],
                "subject": [
                    "str",
                    "bool",
                    "Mapping",
                    "Optional[Mapping]",
                    "int"
                ],
                "text": [
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "Optional[Dict[str, str]]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[str, Any]]"
                ],
                "html": [
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "Optional[Dict[str, str]]",
                    "Optional[List[str]]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[str, Any]]"
                ],
                "config": [
                    "Dict[str, Any]",
                    "str",
                    "dict",
                    "Optional[str]",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "algonaut-master/algonaut/utils/email/__init__.py": {},
    "algonaut-master/algonaut/utils/forms/form.py": {
        "Field.validators": {
            "name": "validators",
            "location": 13,
            "return": [
                "list",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Field.__init__": {
            "name": "__init__",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "validators": [
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Callable]",
                    "Optional[Hashable]",
                    "int"
                ]
            }
        },
        "Field.validate": {
            "name": "validate",
            "location": 21,
            "return": [
                "str",
                "Dict[str, int]",
                "dict",
                "List[Dict[str, Any]]",
                "Dict[str, Dict[str, Any]]",
                "OrderedDict"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str",
                    "list",
                    "List[str]"
                ],
                "form": [
                    "str"
                ]
            }
        },
        "FormMeta.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "name": [
                    "str",
                    "Tuple[type]",
                    "Dict[str, Any]",
                    "Optional['InstrumentBase']"
                ],
                "bases": [
                    "str",
                    "Tuple[type]",
                    "Dict[str, Any]",
                    "Optional['InstrumentBase']"
                ],
                "namespace": [
                    "Dict[str, Any]",
                    "str",
                    "Dict[Hashable, Any]",
                    "List[str]"
                ]
            }
        },
        "Form.__init__": {
            "name": "__init__",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "Callable[[Any], None]",
                    "Dict[str, Any]",
                    "dict",
                    "Optional[Dict[str, Any]]"
                ],
                "is_update": [
                    "int",
                    "bool",
                    "str",
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "Form.raw_data": {
            "name": "raw_data",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "Dict[str, Any]",
                    "Iterable[T]"
                ]
            }
        },
        "Form.valid_data": {
            "name": "valid_data",
            "location": 55,
            "return": [
                "bytes",
                "dict",
                "Dict[str, Any]",
                "Optional[T]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.errors": {
            "name": "errors",
            "location": 59,
            "return": [
                "str",
                "List[Tuple[str, str]]",
                "bool",
                "List[Callable]",
                "Optional[Dict[str, Any]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Form.validate": {
            "name": "validate",
            "location": 68,
            "return": [
                "List[str]",
                "str",
                "Sequence",
                "Sequence[str]",
                "Mapping"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algonaut-master/algonaut/utils/forms/validators.py": {
        "ToLower.__call__": {
            "name": "__call__",
            "location": 8,
            "return": [
                "tuple",
                "int",
                "float",
                "Type[BaseException]",
                "str",
                "Iterable['cirq.Qid']"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "form": [
                    "str",
                    "bool"
                ]
            }
        },
        "JSON.__call__": {
            "name": "__call__",
            "location": 13,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str",
                    "bool"
                ],
                "form": [
                    "str",
                    "bool"
                ]
            }
        },
        "Regex.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "regex": [
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "Regex.__call__": {
            "name": "__call__",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str",
                    "Pattern"
                ],
                "form": [
                    "str",
                    "bool"
                ]
            }
        },
        "Optional.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "default": [
                    "float",
                    "bool",
                    "Optional[float]"
                ],
                "validate_default": [
                    "Optional[List[Any]]",
                    "bool",
                    "int",
                    "Optional[bool]",
                    "Callable"
                ]
            }
        },
        "Optional.__call__": {
            "name": "__call__",
            "location": 35,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "bytearray"
                ],
                "form": [
                    "str",
                    "bool"
                ]
            }
        },
        "List.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "validators": [
                    "Optional[float]",
                    "Optional[str]",
                    "Optional[int]",
                    "Optional[Callable]",
                    "Optional[Hashable]",
                    "int"
                ]
            }
        },
        "List.__call__": {
            "name": "__call__",
            "location": 46,
            "return": [
                "Dict[str, Any]",
                "Union[Tuple[Any, Any, T], Tuple[T, T, T]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "dict"
                ],
                "value": [
                    "str",
                    "Dict[str, int]",
                    "Mapping[str, str]",
                    "dict"
                ],
                "form": [
                    "str",
                    "dict"
                ]
            }
        },
        "Required.__call__": {
            "name": "__call__",
            "location": 66,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "value": [
                    "Optional[str]",
                    "Dict[str, str]",
                    "str",
                    "List[str]",
                    "Optional[T]",
                    "Optional[bool]"
                ],
                "form": [
                    "str",
                    "bool"
                ]
            }
        },
        "EMail.__call__": {
            "name": "__call__",
            "location": 75,
            "return": [
                "int",
                "Callable[..., None]",
                "Union[int, None]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str",
                    "Pattern",
                    "bool"
                ],
                "form": [
                    "str",
                    "bool"
                ]
            }
        },
        "Length.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "min": [
                    "int",
                    "bool",
                    "float"
                ],
                "max": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Length.__call__": {
            "name": "__call__",
            "location": 85,
            "return": [
                "str",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str",
                    "dict",
                    "int",
                    "List[Tuple[str, Any]]",
                    "Union[str, None]",
                    "Optional[List[str]]"
                ],
                "form": [
                    "str",
                    "bool"
                ]
            }
        },
        "Binary.__call__": {
            "name": "__call__",
            "location": 104,
            "return": [
                "str",
                "type",
                "MutableSequence[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str",
                    "dict",
                    "list",
                    "Set[T]",
                    "int"
                ],
                "form": [
                    "str",
                    "bool"
                ]
            }
        },
        "Type.__init__": {
            "name": "__init__",
            "location": 115,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "convert": [
                    "int",
                    "str"
                ]
            }
        },
        "Type.__call__": {
            "name": "__call__",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str",
                    "dict",
                    "Optional[str]"
                ],
                "form": [
                    "str",
                    "bool"
                ]
            }
        },
        "Integer.__init__": {
            "name": "__init__",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Integer.__call__": {
            "name": "__call__",
            "location": 158,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool",
                    "Hashable",
                    "Optional[str]"
                ],
                "value": [
                    "Optional[str]",
                    "str",
                    "Optional[Any]",
                    "Union[str, bytes, int]",
                    "bool"
                ],
                "form": [
                    "str",
                    "bool",
                    "Hashable",
                    "Optional[str]"
                ]
            }
        },
        "UUID.__call__": {
            "name": "__call__",
            "location": 183,
            "return": [
                "Type",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str",
                    "dict",
                    "Optional[List[str]]"
                ],
                "form": [
                    "str",
                    "bool"
                ]
            }
        },
        "DateTime.__init__": {
            "name": "__init__",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "format": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Sequence[Dict[str, str]]",
                    "MutableMapping[str, Any]",
                    "List[List[str]]"
                ]
            }
        },
        "DateTime.__call__": {
            "name": "__call__",
            "location": 195,
            "return": [
                "str",
                "Container[\"Taxon\"]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str"
                ],
                "form": [
                    "str",
                    "bool"
                ]
            }
        },
        "Choices.__init__": {
            "name": "__init__",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "choices": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Choices.__call__": {
            "name": "__call__",
            "location": 210,
            "return": [
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "bool"
                ],
                "value": [
                    "str",
                    "Union[int, bool]",
                    "int",
                    "tuple",
                    "list"
                ],
                "form": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "algonaut-master/algonaut/utils/forms/__init__.py": {},
    "algonaut-master/algonaut/utils/helpers/celery.py": {},
    "algonaut-master/algonaut/utils/helpers/__init__.py": {},
    "algonaut-master/algonaut_tests/auth.py": {
        "PlainAuthClient.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "users": [
                    "User",
                    "List[User]",
                    "str",
                    "Set[str]",
                    "List[str]",
                    "Union[server.models.User, int]"
                ]
            }
        },
        "PlainAuthClient.get_user": {
            "name": "get_user",
            "location": 24,
            "return": [
                "bool",
                "Optional[float]",
                "dict",
                "Optional[Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int"
                ]
            }
        }
    },
    "algonaut-master/algonaut_tests/helpers.py": {
        "DatabaseTest.setup": {
            "name": "setup",
            "location": 33,
            "return": [
                "bool"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "DatabaseTest.teardown": {
            "name": "teardown",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "DatabaseTest.initialize_fixtures": {
            "name": "initialize_fixtures",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "T",
                    "Dict[str, Any]",
                    "complex",
                    "bytes",
                    "type"
                ]
            }
        },
        "DatabaseTest.setUp": {
            "name": "setUp",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseTest.tearDownClass": {
            "name": "tearDownClass",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Set[str]",
                    "IO[bytes]",
                    "List[str]",
                    "Tuple[int, int]"
                ]
            }
        },
        "DatabaseTest.setUpClass": {
            "name": "setUpClass",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bytes",
                    "str",
                    "Exception",
                    "Dict[str, Any]"
                ]
            }
        },
        "MockApiTest.setUpClass": {
            "name": "setUpClass",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "str"
                ]
            }
        },
        "ApplicationProcess.__init__": {
            "name": "__init__",
            "location": 87,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "host": [
                    "bool",
                    "int",
                    "dict"
                ],
                "port": [
                    "bool",
                    "int",
                    "dict"
                ],
                "app": [
                    "solo.server.app.App",
                    "flask.Flask",
                    "Callable"
                ],
                "settings": [
                    "str",
                    "int",
                    "IO",
                    "Dict[str, str]",
                    "bool",
                    "Callable"
                ],
                "queue": [
                    "bool",
                    "int",
                    "dict"
                ]
            }
        },
        "ApplicationProcess.run": {
            "name": "run",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiTest.url": {
            "name": "url",
            "location": 133,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "ApiTest.setUp": {
            "name": "setUp",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiTest.tearDownClass": {
            "name": "tearDownClass",
            "location": 147,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiTest.setUpClass": {
            "name": "setUpClass",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiTest._authenticated_request": {
            "name": "_authenticated_request",
            "location": 181,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "Optional[bool]",
                    "Union[bool, int, str]"
                ],
                "func": [
                    "str",
                    "Dict[str, object]",
                    "Optional[str]",
                    "sqlalchemy.orm.Session"
                ],
                "url": [
                    "str",
                    "Dict[str, object]",
                    "Optional[str]",
                    "sqlalchemy.orm.Session"
                ],
                "access_token": [
                    "bool",
                    "str"
                ]
            }
        },
        "ApiTest.authenticated_get": {
            "name": "authenticated_get",
            "location": 192,
            "return": [
                "bool",
                "str",
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str"
                ],
                "url": [
                    "str"
                ],
                "access_token": [
                    "str"
                ]
            }
        },
        "ApiTest.authenticated_post": {
            "name": "authenticated_post",
            "location": 197,
            "return": [
                "Dict[str, Any]",
                "int",
                "Optional[Dict[str, Any]]",
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "Optional[str]",
                    "BaseException",
                    "Dict[str, Any]",
                    "bool"
                ],
                "url": [
                    "str",
                    "Optional[str]",
                    "BaseException",
                    "Dict[str, Any]",
                    "bool"
                ],
                "access_token": [
                    "str",
                    "Optional[str]",
                    "BaseException",
                    "Dict[str, Any]",
                    "bool"
                ]
            }
        },
        "ApiTest.authenticated_delete": {
            "name": "authenticated_delete",
            "location": 202,
            "return": [
                "dict",
                "bool",
                "str",
                "app.domain.users.User",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "bool"
                ],
                "url": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "bool"
                ],
                "access_token": [
                    "str",
                    "Dict[str, str]",
                    "Optional[str]",
                    "Optional[Dict[str, str]]",
                    "bool"
                ]
            }
        },
        "ApiTest.authenticated_put": {
            "name": "authenticated_put",
            "location": 207,
            "return": [
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "Dict[str, str]",
                    "BaseException"
                ],
                "url": [
                    "str",
                    "Dict[str, str]",
                    "BaseException"
                ],
                "access_token": [
                    "str",
                    "Dict[str, str]",
                    "BaseException"
                ]
            }
        },
        "ApiTest.authenticated_patch": {
            "name": "authenticated_patch",
            "location": 212,
            "return": [
                "Dict[str, Any]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "Dict[str, str]",
                    "BaseException"
                ],
                "url": [
                    "str",
                    "Dict[str, str]",
                    "BaseException"
                ],
                "access_token": [
                    "str",
                    "Dict[str, str]",
                    "BaseException"
                ]
            }
        }
    },
    "algonaut-master/algonaut_tests/__init__.py": {},
    "algonaut-master/algonaut_tests/api/__init__.py": {},
    "algonaut-master/algonaut_tests/api/v1/helpers.py": {
        "assert_equal": {
            "name": "assert_equal",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "obj": [
                    "Dict[str, object]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, int]]",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, str]"
                ],
                "orig_obj": [
                    "str",
                    "int"
                ]
            }
        },
        "ObjectTest.url": {
            "name": "url",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectTest.list_url": {
            "name": "list_url",
            "location": 42,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectTest.create_url": {
            "name": "create_url",
            "location": 46,
            "return": [
                "str",
                "bool",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectTest.test_list": {
            "name": "test_list",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectTest.test_get": {
            "name": "test_get",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectTest._create": {
            "name": "_create",
            "location": 70,
            "return": [
                "List[str]",
                "models.User"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "str",
                    "Dict[str, Callable[[str], Any]]",
                    "dict"
                ]
            }
        },
        "ObjectTest.test_create": {
            "name": "test_create",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectTest.test_delete": {
            "name": "test_delete",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectTest.test_create_and_delete": {
            "name": "test_create_and_delete",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ObjectTest.test_update": {
            "name": "test_update",
            "location": 139,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algonaut-master/algonaut_tests/api/v1/test_algorithms.py": {
        "Tests.list_url": {
            "name": "list_url",
            "location": 23,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Tests.create_url": {
            "name": "create_url",
            "location": 27,
            "return": [
                "List[str]",
                "List[T]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algonaut-master/algonaut_tests/api/v1/test_algorithmschemas.py": {},
    "algonaut-master/algonaut_tests/api/v1/test_algorithm_results.py": {},
    "algonaut-master/algonaut_tests/api/v1/test_datapoints.py": {},
    "algonaut-master/algonaut_tests/api/v1/test_datapoint_results.py": {
        "TestDatapointResults.url": {
            "name": "url",
            "location": 38,
            "return": [
                "str",
                "Optional[int]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatapointResults.list_url": {
            "name": "list_url",
            "location": 43,
            "return": [
                "bool",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatapointResults.create_url": {
            "name": "create_url",
            "location": 49,
            "return": [
                "List[str]",
                "List[T]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algonaut-master/algonaut_tests/api/v1/test_dataschemas.py": {},
    "algonaut-master/algonaut_tests/api/v1/test_datasets.py": {
        "TestDatasets.list_url": {
            "name": "list_url",
            "location": 26,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatasets.create_url": {
            "name": "create_url",
            "location": 30,
            "return": [
                "List[str]",
                "List[T]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algonaut-master/algonaut_tests/api/v1/test_dataset_model_results.py": {
        "TestDatasetModelResults.url": {
            "name": "url",
            "location": 36,
            "return": [
                "str",
                "Optional[int]",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatasetModelResults.list_url": {
            "name": "list_url",
            "location": 41,
            "return": [
                "bool",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatasetModelResults.create_url": {
            "name": "create_url",
            "location": 47,
            "return": [
                "List[str]",
                "List[T]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algonaut-master/algonaut_tests/api/v1/test_dataset_results.py": {},
    "algonaut-master/algonaut_tests/api/v1/test_models.py": {
        "TestAlgorithmModels.list_url": {
            "name": "list_url",
            "location": 21,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAlgorithmModels.create_url": {
            "name": "create_url",
            "location": 25,
            "return": [
                "int",
                "bool",
                "str",
                "float",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAlgorithmModels._create": {
            "name": "_create",
            "location": 46,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Mapping[str, Any]",
                    "int",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "TestDatasetModels.list_url": {
            "name": "list_url",
            "location": 61,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[str]",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatasetModels.create_url": {
            "name": "create_url",
            "location": 65,
            "return": [
                "int",
                "bool",
                "str",
                "float",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algonaut-master/algonaut_tests/api/v1/test_model_result.py": {},
    "algonaut-master/algonaut_tests/api/v1/test_organizations.py": {
        "TestOrganizations.test_list": {
            "name": "test_list",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algonaut-master/algonaut_tests/api/v1/test_projects.py": {
        "TestProjects.create_url": {
            "name": "create_url",
            "location": 30,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algonaut-master/algonaut_tests/api/v1/__init__.py": {},
    "algonaut-master/algonaut_tests/fixtures/algorithm.py": {
        "project": {
            "name": "project",
            "location": 15,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "test": [
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "dep_check.models.Dependencies",
                    "dict"
                ],
                "fixtures": [
                    "bool",
                    "str",
                    "TextIO",
                    "List[str]"
                ],
                "path": [
                    "IO[bytes]"
                ],
                "organization": [
                    "int",
                    "list"
                ]
            }
        },
        "algorithm": {
            "name": "algorithm",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "test": [
                    "Dict[str, str]"
                ],
                "fixtures": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "bool",
                    "Tuple[str, str]",
                    "int"
                ],
                "proj": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "bool",
                    "Tuple[str, str]",
                    "int"
                ]
            }
        },
        "algorithmschema": {
            "name": "algorithmschema",
            "location": 40,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "test": [
                    "Dict[str, str]"
                ],
                "fixtures": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable",
                    "Exception"
                ]
            }
        },
        "algorithm_algorithmschema": {
            "name": "algorithm_algorithmschema",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "test": [
                    "Dict[str, str]"
                ],
                "fixtures": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "bool",
                    "Tuple[str, str]",
                    "int"
                ],
                "algoschema": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "bool",
                    "Tuple[str, str]",
                    "int"
                ],
                "algorithm": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "bool",
                    "Tuple[str, str]",
                    "int"
                ]
            }
        }
    },
    "algonaut-master/algonaut_tests/fixtures/dataset.py": {
        "dataset": {
            "name": "dataset",
            "location": 15,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "test": [
                    "Dict[str, str]",
                    "bool",
                    "Mapping[str, str]",
                    "MutableMapping",
                    "Iterator[Any]"
                ],
                "fixtures": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]",
                    "bool"
                ],
                "project": [
                    "Dict[str, str]",
                    "bool",
                    "str",
                    "Optional[bytes]"
                ]
            }
        },
        "dataschema": {
            "name": "dataschema",
            "location": 29,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "test": [
                    "Dict[str, str]"
                ],
                "fixtures": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable",
                    "Exception"
                ]
            }
        },
        "dataset_dataschema": {
            "name": "dataset_dataschema",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "test": [
                    "Dict[str, str]"
                ],
                "fixtures": [
                    "int",
                    "str"
                ],
                "datasetschema": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "bool",
                    "Tuple[str, str]",
                    "int"
                ],
                "dataset": [
                    "List[int]",
                    "int"
                ]
            }
        },
        "datapoint": {
            "name": "datapoint",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "test": [
                    "Dict[str, str]"
                ],
                "fixtures": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable",
                    "Exception"
                ]
            }
        },
        "dataset_datapoint": {
            "name": "dataset_datapoint",
            "location": 60,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "test": [
                    "Dict[str, str]"
                ],
                "fixtures": [
                    "int",
                    "str"
                ],
                "dataset": [
                    "bool",
                    "str",
                    "int"
                ],
                "datapoint": []
            }
        }
    },
    "algonaut-master/algonaut_tests/fixtures/model.py": {
        "model": {
            "name": "model",
            "location": 9,
            "return": [
                "List[app.models.Question]",
                "app.models.Question",
                "allennlp.models.model.Model"
            ],
            "arguments": {
                "test": [
                    "models.User"
                ],
                "fixtures": [
                    "str",
                    "tildes.models.user.User",
                    "float",
                    "dict",
                    "int"
                ],
                "algorithm": [
                    "multinedb.models.workspace.Workspace",
                    "salon.models.Stylist",
                    "daylighdb.models.User"
                ],
                "dataset": [
                    "db.models.Cowboy",
                    "salon.models.Stylist",
                    "abilian.core.models.subjects.User",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "algonaut-master/algonaut_tests/fixtures/object_role.py": {
        "object_role": {
            "name": "object_role",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "test": [
                    "Dict[str, str]",
                    "raiden.utils.Callable"
                ],
                "fixtures": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "bool",
                    "Tuple[str, str]",
                    "int"
                ],
                "organization_role": [
                    "zerver.models.Realm",
                    "float",
                    "Sequence[str]",
                    "bool",
                    "Optional[bytes]"
                ],
                "object_role": [
                    "zerver.models.Realm",
                    "float",
                    "Sequence[str]",
                    "bool",
                    "Optional[bytes]"
                ],
                "organization": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "bool",
                    "Tuple[str, str]",
                    "int"
                ],
                "object": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]",
                    "bool",
                    "Tuple[str, str]",
                    "int"
                ]
            }
        }
    },
    "algonaut-master/algonaut_tests/fixtures/result.py": {
        "datapoint_model_result": {
            "name": "datapoint_model_result",
            "location": 14,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "test": [
                    "property",
                    "dict",
                    "str"
                ],
                "fixtures": [
                    "bool",
                    "str",
                    "asgard.models.user.User",
                    "multinedb.models.workspace.Workspace",
                    "daylighdb.models.User"
                ],
                "model": [
                    "Optional[str]",
                    "models.User",
                    "daylighdb.models.User",
                    "asgard.models.user.User",
                    "core.models.User",
                    "str"
                ],
                "datapoint": [],
                "name": [
                    "zerver.models.UserProfile",
                    "Dict[str, Any]",
                    "str",
                    "dict"
                ],
                "data": [
                    "zerver.models.UserProfile",
                    "Dict[str, Any]",
                    "str",
                    "dict"
                ]
            }
        },
        "dataset_model_result": {
            "name": "dataset_model_result",
            "location": 33,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "test": [
                    "property",
                    "dict",
                    "str"
                ],
                "fixtures": [
                    "zerver.models.UserProfile",
                    "Optional[str]",
                    "users.models.JustfixUser",
                    "str"
                ],
                "model": [
                    "str",
                    "models.User",
                    "asgard.models.user.User",
                    "deeplearning.ml4pl.models.epoch.Results",
                    "Optional[int]"
                ],
                "dataset": [
                    "models.User",
                    "str",
                    "limbic.emotion.models.LexiconLimbicModel"
                ],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "model_result": {
            "name": "model_result",
            "location": 52,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "test": [
                    "models.User",
                    "str"
                ],
                "fixtures": [
                    "dict",
                    "int",
                    "bool",
                    "Callable",
                    "Optional[bool]",
                    "Optional[str]"
                ],
                "model": [
                    "deeplearning.ml4pl.models.epoch.Results",
                    "daylighdb.models.User",
                    "models.User",
                    "tracim.models.auth.User"
                ],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "zerver.models.UserProfile",
                    "BaseException"
                ],
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "zerver.models.UserProfile",
                    "BaseException"
                ]
            }
        },
        "dataset_result": {
            "name": "dataset_result",
            "location": 67,
            "return": [
                "int",
                "bool",
                "Tuple[str, List[str]]",
                "Tuple[str, str]",
                "float",
                "List[str]"
            ],
            "arguments": {
                "test": [
                    "Dict[str, Any]",
                    "dict",
                    "property"
                ],
                "fixtures": [
                    "Optional[users.models.User]",
                    "flask_appbuilder.security.sqla.models.User",
                    "str",
                    "Dict[str, Any]",
                    "bool"
                ],
                "dataset": [
                    "dict",
                    "str",
                    "Dict[str, str]",
                    "limbic.emotion.models.LexiconLimbicModel"
                ],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Optional[str]"
                ],
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "int",
                    "Optional[str]"
                ]
            }
        },
        "algorithm_result": {
            "name": "algorithm_result",
            "location": 82,
            "return": [
                "int",
                "bool",
                "Tuple[str, List[str]]",
                "Tuple[str, str]",
                "float",
                "List[str]"
            ],
            "arguments": {
                "test": [
                    "Dict[str, Any]",
                    "dict",
                    "property"
                ],
                "fixtures": [
                    "str",
                    "dict",
                    "List[str]",
                    "Sequence[str]",
                    "bool",
                    "bytes",
                    "int"
                ],
                "algorithm": [
                    "users.models.JustfixUser",
                    "dict",
                    "bool",
                    "int",
                    "str",
                    "models.Channel"
                ],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, Union[str, int]]"
                ],
                "data": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "Dict[str, Union[str, int]]"
                ]
            }
        }
    },
    "algonaut-master/algonaut_tests/fixtures/user.py": {
        "auth_client": {
            "name": "auth_client",
            "location": 18,
            "return": [
                "str",
                "django.conf.settings.AUTH_USER_MODEL"
            ],
            "arguments": {
                "test": [
                    "List[dict]",
                    "Optional[Dict]",
                    "Type"
                ],
                "fixtures": [
                    "List[dict]",
                    "Optional[Dict]",
                    "Type"
                ]
            }
        },
        "organization": {
            "name": "organization",
            "location": 23,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "test": [
                    "type",
                    "Dict[str, str]",
                    "str",
                    "List[str]"
                ],
                "fixtures": [
                    "str",
                    "bool"
                ],
                "name": [
                    "str",
                    "Optional[str]",
                    "Dict[str, str]",
                    "Union[str, List[str]]"
                ]
            }
        },
        "user": {
            "name": "user",
            "location": 33,
            "return": [
                "models.Course",
                "zam_repondeur.models.Dossier",
                "str",
                "metaswitch_tinder.database.models.User",
                "int",
                "abilian.core.models.subjects.User"
            ],
            "arguments": {
                "test": [
                    "str",
                    "Iterable[str]"
                ],
                "fixtures": [
                    "str",
                    "bool",
                    "int",
                    "dict",
                    "Union[str, int]"
                ],
                "email": [
                    "str",
                    "Iterable[str]"
                ],
                "organization": [
                    "Optional[bool]",
                    "T",
                    "str",
                    "int"
                ],
                "roles": [
                    "Optional[bool]",
                    "T",
                    "str",
                    "int"
                ]
            }
        }
    },
    "algonaut-master/algonaut_tests/fixtures/__init__.py": {},
    "algonaut-master/algonaut_tests/models/test_bulk_inserts.py": {
        "TestBulkInserts.test_bulk_inserts": {
            "name": "test_bulk_inserts",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBulkInserts.test_upserts": {
            "name": "test_upserts",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algonaut-master/algonaut_tests/models/test_object_role.py": {
        "TestCreateObjectRole.test_create_role": {
            "name": "test_create_role",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "algonaut-master/algonaut_tests/models/__init__.py": {},
    "algonaut-master/algonaut_tests/utils/__init__.py": {}
}
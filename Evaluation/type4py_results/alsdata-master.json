{
    "alsdata-master/setup.py": {},
    "alsdata-master/alsdata/core.py": {
        "get_logger": {
            "name": "get_logger",
            "location": 17,
            "return": [
                "str",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ]
            }
        },
        "CompareResult.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "reason": [
                    "int",
                    "list"
                ],
                "v1": [
                    "int",
                    "list"
                ],
                "v2": [
                    "int",
                    "list"
                ]
            }
        },
        "CompareResult.__bool__": {
            "name": "__bool__",
            "location": 39,
            "return": [
                "Callable",
                "bytes",
                "int",
                "IO"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "initial_rows": [
                    "List[str]",
                    "str",
                    "tuple",
                    "Set[str]",
                    "MutableMapping[str, Any]"
                ]
            }
        },
        "Schema.date": {
            "name": "date",
            "location": 64,
            "return": [
                "Optional[str]",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.table": {
            "name": "table",
            "location": 68,
            "return": [
                "Optional[str]",
                "list",
                "Tuple[int, int]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.add": {
            "name": "add",
            "location": 73,
            "return": [
                "bool",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "depth": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]"
                ],
                "key": [
                    "str",
                    "Optional[List[str]]",
                    "Optional[str]"
                ],
                "type_": [
                    "str",
                    "Type",
                    "Callable"
                ],
                "parent": [
                    "str",
                    "Type",
                    "Callable"
                ]
            }
        },
        "Schema.check_arr_dup": {
            "name": "check_arr_dup",
            "location": 86,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "arr_idx": [
                    "List[Tuple[int, int]]",
                    "Tuple[int, int]",
                    "int",
                    "Iterable[str]",
                    "list"
                ],
                "item_idx": [
                    "List[Set[int]]",
                    "int",
                    "Optional[Iterable[int]]",
                    "Hashable",
                    "str",
                    "bool"
                ]
            }
        },
        "Schema._dump_table": {
            "name": "_dump_table",
            "location": 127,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Schema.done": {
            "name": "done",
            "location": 137,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "date": [
                    "str"
                ]
            }
        },
        "Schema.compare": {
            "name": "compare",
            "location": 166,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[int, \"BitVec\"]"
                ]
            }
        },
        "Schema.__eq__": {
            "name": "__eq__",
            "location": 179,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Collection"
                ]
            }
        },
        "Schema.__hash__": {
            "name": "__hash__",
            "location": 184,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaFactory.__init__": {
            "name": "__init__",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaFactory.process": {
            "name": "process",
            "location": 199,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "input_data": [
                    "Optional[str]",
                    "Iterable[Callable]",
                    "dict"
                ]
            }
        },
        "SchemaFactory._extract_date": {
            "name": "_extract_date",
            "location": 206,
            "return": [
                "Set[str]",
                "str"
            ],
            "arguments": {
                "d": [
                    "float",
                    "List[float]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "SchemaFactory._process_dict": {
            "name": "_process_dict",
            "location": 229,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "Union[int, float]",
                    "Dict[str, float]",
                    "float"
                ],
                "depth": [
                    "int"
                ],
                "obj": [
                    "int",
                    "str"
                ]
            }
        },
        "SchemaFactory._process_array": {
            "name": "_process_array",
            "location": 243,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "n": [
                    "int",
                    "float",
                    "Sequence[str]"
                ],
                "depth": [
                    "int",
                    "bool"
                ],
                "arr": [
                    "int",
                    "bool"
                ]
            }
        },
        "SchemaFactory._type_name": {
            "name": "_type_name",
            "location": 256,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "val": [
                    "Tuple[int, int]",
                    "int",
                    "Union[None, str, List[str], Dict[str, str]]"
                ]
            }
        },
        "SchemaSet.__init__": {
            "name": "__init__",
            "location": 274,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaSet.add": {
            "name": "add",
            "location": 279,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "Optional[int]"
                ],
                "id_": [
                    "str",
                    "int"
                ]
            }
        },
        "SchemaSet.items": {
            "name": "items",
            "location": 301,
            "return": [
                "T",
                "float",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaSet.items_bydate": {
            "name": "items_bydate",
            "location": 304,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaSet.__iter__": {
            "name": "__iter__",
            "location": 309,
            "return": [
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "SchemaSet.__getitem__": {
            "name": "__getitem__",
            "location": 312,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Optional[str]",
                    "str",
                    "tuple",
                    "Dict[str, str]",
                    "int",
                    "Callable[[KT], VT]",
                    "Type[RuntimeError]"
                ]
            }
        },
        "SchemaSet.__len__": {
            "name": "__len__",
            "location": 315,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "alsdata-master/alsdata/report.py": {
        "Reify.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "output_stream": [
                    "str",
                    "List[dict]"
                ]
            }
        },
        "Reify.row": {
            "name": "row",
            "location": 27,
            "return": [
                "str",
                "tartare.core.contexContributorExportContext"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "dict",
                    "Tuple[object]",
                    "str"
                ],
                "type_": [
                    "dict",
                    "Tuple[object]",
                    "str",
                    "Set[str]"
                ],
                "depth": [
                    "str",
                    "int",
                    "Callable[..., T]",
                    "float"
                ]
            }
        },
        "Reify.done": {
            "name": "done",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Reify.pop": {
            "name": "pop",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Reify.push": {
            "name": "push",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "Dict[str, str]",
                    "str",
                    "List[Dict]",
                    "int",
                    "Callable",
                    "Union[Type, Tuple[Type, ...]]"
                ],
                "type_": [
                    "str",
                    "int"
                ]
            }
        },
        "Reify.write": {
            "name": "write",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Reify.iwrite": {
            "name": "iwrite",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "s": [
                    "str"
                ]
            }
        },
        "Reify.item": {
            "name": "item",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Iterable[str]",
                    "bool",
                    "List[str]"
                ],
                "type_": [
                    "str",
                    "Iterable[str]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "Reify.begin_container": {
            "name": "begin_container",
            "location": 64,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Pattern[str]",
                    "Dict[str, Any]"
                ],
                "type_": [
                    "str",
                    "Pattern[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "Reify.end_container": {
            "name": "end_container",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str"
                ]
            }
        },
        "JsonSchemaify.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonSchemaify.section_start": {
            "name": "section_start",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonSchemaify.section_end": {
            "name": "section_end",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonSchemaify.begin_container": {
            "name": "begin_container",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Optional[Iterable]",
                    "Optional[\"permissions_doc\"]",
                    "Optional[str]"
                ],
                "type_": [
                    "str",
                    "Pattern[str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "JsonSchemaify.end_container": {
            "name": "end_container",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str"
                ]
            }
        },
        "JsonSchemaify.item": {
            "name": "item",
            "location": 122,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "float",
                    "str",
                    "int"
                ],
                "type_": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Textify.item": {
            "name": "item",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "float",
                    "str",
                    "int"
                ],
                "type_": [
                    "str",
                    "bool"
                ]
            }
        },
        "Textify.begin_container": {
            "name": "begin_container",
            "location": 142,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "dict",
                    "bool"
                ],
                "type_": [
                    "str",
                    "List[str]",
                    "List[T]",
                    "set"
                ]
            }
        },
        "Textify.end_container": {
            "name": "end_container",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "type_": [
                    "str"
                ]
            }
        },
        "Report.__init__": {
            "name": "__init__",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "ofile": [
                    "float",
                    "bool"
                ]
            }
        },
        "Report.set_output_file": {
            "name": "set_output_file",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "o": [
                    "str",
                    "bytes",
                    "int",
                    "bool",
                    "Union[tuple, list]"
                ]
            }
        },
        "Report.write_schema": {
            "name": "write_schema",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Report.process": {
            "name": "process",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str",
                    "bool",
                    "int",
                    "dict",
                    "Union[List[str], List[int]]"
                ],
                "i": [
                    "str",
                    "bool",
                    "int",
                    "dict",
                    "Union[List[str], List[int]]"
                ]
            }
        },
        "Report.process_children": {
            "name": "process_children",
            "location": 183,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str",
                    "bool",
                    "Optional[static_frame.core.store.StoreConfig]",
                    "Type[static_frame.core.frame.Frame]",
                    "List[Dict[str, Any]]"
                ],
                "i": [
                    "str",
                    "bool",
                    "Optional[static_frame.core.store.StoreConfig]",
                    "Type[static_frame.core.frame.Frame]",
                    "List[Dict[str, Any]]"
                ],
                "container": [
                    "str",
                    "bool",
                    "Optional[static_frame.core.store.StoreConfig]",
                    "Type[static_frame.core.frame.Frame]",
                    "List[Dict[str, Any]]"
                ],
                "children": [
                    "str",
                    "bool",
                    "Optional[static_frame.core.store.StoreConfig]",
                    "Type[static_frame.core.frame.Frame]",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "JsonSchemaReport.write_schema": {
            "name": "write_schema",
            "location": 188,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "list",
                    "List[int]",
                    "List[float]",
                    "List[List[int]]"
                ]
            }
        },
        "JsonSchemaReport.process_children": {
            "name": "process_children",
            "location": 199,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str",
                    "Callable",
                    "bool",
                    "Optional[Dict[str, str]]",
                    "Iterable[str]",
                    "Set[str]"
                ],
                "i": [
                    "str",
                    "bool",
                    "Optional[static_frame.core.store.StoreConfig]",
                    "Type[static_frame.core.frame.Frame]",
                    "List[Dict[str, Any]]"
                ],
                "container": [
                    "str",
                    "bool",
                    "Optional[static_frame.core.store.StoreConfig]",
                    "Type[static_frame.core.frame.Frame]",
                    "List[Dict[str, Any]]"
                ],
                "children": [
                    "Union[List[str], List[int]]",
                    "List[str]",
                    "bool",
                    "abc.Sequence",
                    "List[\"Issue\"]",
                    "int",
                    "bytes"
                ]
            }
        },
        "TextReport.write_schema": {
            "name": "write_schema",
            "location": 215,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "schema": [
                    "list",
                    "List[int]",
                    "List[float]",
                    "List[List[int]]"
                ]
            }
        },
        "TextReport.process_children": {
            "name": "process_children",
            "location": 224,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "table": [
                    "str",
                    "Callable",
                    "bool",
                    "Optional[Dict[str, str]]",
                    "Iterable[str]",
                    "Set[str]"
                ],
                "i": [
                    "str",
                    "bool",
                    "Optional[static_frame.core.store.StoreConfig]",
                    "Type[static_frame.core.frame.Frame]",
                    "List[Dict[str, Any]]"
                ],
                "container": [
                    "str",
                    "bool",
                    "Optional[static_frame.core.store.StoreConfig]",
                    "Type[static_frame.core.frame.Frame]",
                    "List[Dict[str, Any]]"
                ],
                "children": [
                    "str",
                    "bool",
                    "Optional[static_frame.core.store.StoreConfig]",
                    "Type[static_frame.core.frame.Frame]",
                    "List[Dict[str, Any]]"
                ]
            }
        }
    },
    "alsdata-master/alsdata/__init__.py": {},
    "alsdata-master/tests/test_core.py": {
        "setup": {
            "name": "setup",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "teardown": {
            "name": "teardown",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_same_schema": {
            "name": "test_same_schema",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_array_dedup": {
            "name": "test_array_dedup",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_simple_array": {
            "name": "test_simple_array",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "_format_schema": {
            "name": "_format_schema",
            "location": 105,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "s": [
                    "bytes",
                    "str",
                    "bytearray",
                    "int",
                    "IO",
                    "Callable[[bytes], bytes]"
                ],
                "output": [
                    "List[str]",
                    "bytes",
                    "Iterable[str]"
                ]
            }
        }
    },
    "alsdata-master/tests/__init__.py": {}
}
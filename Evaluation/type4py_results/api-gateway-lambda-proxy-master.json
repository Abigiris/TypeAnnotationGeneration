{
    "api-gateway-lambda-proxy-master/setup.py": {},
    "api-gateway-lambda-proxy-master/src/api_gateway_lambda_proxy/exception.py": {
        "ResourceNotFound.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "MethodNotFound.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "int",
                    "float",
                    "Callable"
                ],
                "httpMethod": [
                    "int",
                    "float",
                    "Callable"
                ]
            }
        }
    },
    "api-gateway-lambda-proxy-master/src/api_gateway_lambda_proxy/handler.py": {
        "ProxyLambdaHandler.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProxyLambdaHandler.__call__": {
            "name": "__call__",
            "location": 49,
            "return": [],
            "arguments": {
                "self": [],
                "event": [
                    "dict"
                ],
                "context": [
                    "dict"
                ]
            }
        },
        "ProxyLambdaHandler.route": {
            "name": "route",
            "location": 82,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "bool"
                ],
                "httpMethod": [
                    "str",
                    "bool"
                ]
            }
        },
        "ProxyLambdaHandler.get": {
            "name": "get",
            "location": 90,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "bool"
                ]
            }
        },
        "ProxyLambdaHandler.head": {
            "name": "head",
            "location": 94,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProxyLambdaHandler.post": {
            "name": "post",
            "location": 98,
            "return": [
                "str",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "Optional[Type]",
                    "dict"
                ]
            }
        },
        "ProxyLambdaHandler.put": {
            "name": "put",
            "location": 102,
            "return": [],
            "arguments": {
                "self": [],
                "resource": [
                    "int",
                    "Dict[str, bool]",
                    "bool",
                    "Iterable[Any]",
                    "str"
                ]
            }
        },
        "ProxyLambdaHandler.delete": {
            "name": "delete",
            "location": 106,
            "return": [
                "int",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "str",
                    "int"
                ]
            }
        },
        "ProxyLambdaHandler.patch": {
            "name": "patch",
            "location": 110,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "resource": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "ProxyLambdaHandler.error_handler": {
            "name": "error_handler",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Callable",
                    "str",
                    "bool"
                ]
            }
        },
        "ProxyLambdaHandler.pre_pre_handler": {
            "name": "pre_pre_handler",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "str",
                    "Exception",
                    "Optional[int]"
                ]
            }
        },
        "ProxyLambdaHandler.pre_handler": {
            "name": "pre_handler",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "Callable",
                    "str",
                    "bool",
                    "Exception"
                ]
            }
        },
        "ProxyLambdaHandler.post_handler": {
            "name": "post_handler",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": [
                    "bool",
                    "dict"
                ]
            }
        },
        "ProxyLambdaHandler.post_post_handler": {
            "name": "post_post_handler",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "handler": []
            }
        },
        "ProxyLambdaHandler._default_error_handler": {
            "name": "_default_error_handler",
            "location": 134,
            "return": [
                "Tuple[str, int, Dict[str, str]]",
                "Optional[bytes]",
                "Tuple[str, dict]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "_": [
                    "Exception",
                    "Iterable[Tuple[int, Any]]",
                    "List[Tuple[Any, Any]]"
                ]
            }
        },
        "ProxyLambdaHandler._default_pre_pre_handler": {
            "name": "_default_pre_pre_handler",
            "location": 140,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "event": [
                    "str"
                ],
                "context": [
                    "str"
                ]
            }
        },
        "ProxyLambdaHandler._default_pre_handler": {
            "name": "_default_pre_handler",
            "location": 145,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "ProxyLambdaHandler._default_post_handler": {
            "name": "_default_post_handler",
            "location": 148,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "ProxyLambdaHandler._default_post_post_handler": {
            "name": "_default_post_post_handler",
            "location": 151,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_response": [
                    "List[str]",
                    "Tuple[bytes]"
                ]
            }
        },
        "ProxyLambdaHandler.route._decorator": {
            "name": "_decorator",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "handler": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "api-gateway-lambda-proxy-master/src/api_gateway_lambda_proxy/request.py": {
        "ProxyRequestBody.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "body": [
                    "int",
                    "float"
                ]
            }
        },
        "ProxyRequestBody.get": {
            "name": "get",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProxyRequestBody.load_as_json": {
            "name": "load_as_json",
            "location": 25,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ProxyRequest.from_event": {
            "name": "from_event",
            "location": 48,
            "return": [
                "Optional[str]",
                "int",
                "Optional[bytes]",
                "Iterable[Tuple[str, int]]"
            ],
            "arguments": {
                "event": [
                    "dict"
                ]
            }
        },
        "ProxyRequest.from_event.concat": {
            "name": "concat",
            "location": 50,
            "return": [
                "int",
                "Dict[str, \"Module\"]",
                "Optional[str]",
                "bool",
                "Optional[Sequence[str]]"
            ],
            "arguments": {
                "x": [
                    "Optional[dict]",
                    "Optional[float]",
                    "bool"
                ]
            }
        }
    },
    "api-gateway-lambda-proxy-master/src/api_gateway_lambda_proxy/response.py": {
        "BaseProxyResponse._body_encoder": {
            "name": "_body_encoder",
            "location": 23,
            "return": [
                "str",
                "Dict[str, str]",
                "bytes",
                "MutableMapping[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "Optional[str]",
                    "int",
                    "str",
                    "Mapping[str, str]",
                    "bool"
                ]
            }
        },
        "BaseProxyResponse.to_raw": {
            "name": "to_raw",
            "location": 26,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonProxyResponse._body_encoder": {
            "name": "_body_encoder",
            "location": 47,
            "return": [
                "bool",
                "Optional[int]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "body": [
                    "Optional[str]",
                    "str",
                    "Optional[int]"
                ]
            }
        }
    },
    "api-gateway-lambda-proxy-master/src/api_gateway_lambda_proxy/__init__.py": {},
    "api-gateway-lambda-proxy-master/tests/__init__.py": {},
    "api-gateway-lambda-proxy-master/tests/sample/sample.py": {
        "error_handler": {
            "name": "error_handler",
            "location": 7,
            "return": [
                "str",
                "bool",
                "Dict[str, Dict[str, str]]"
            ],
            "arguments": {
                "e": [
                    "type",
                    "str",
                    "bool",
                    "Exception",
                    "Callable"
                ]
            }
        },
        "pre_handler": {
            "name": "pre_handler",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "request": [
                    "Exception",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "hello": {
            "name": "hello",
            "location": 18,
            "return": [
                "str",
                "Tuple[str, int, Dict[str, str]]"
            ],
            "arguments": {
                "request": [],
                "context": [
                    "bool"
                ]
            }
        }
    },
    "api-gateway-lambda-proxy-master/tests/sample/test_sample.py": {
        "test_sample": {
            "name": "test_sample",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "api-gateway-lambda-proxy-master/tests/unit/test_proxy_request.py": {
        "test_proxy_request": {
            "name": "test_proxy_request",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "api-gateway-lambda-proxy-master/tests/unit/test_proxy_response.py": {
        "test_json_proxy_response": {
            "name": "test_json_proxy_response",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "api-gateway-lambda-proxy-master/tests/unit/__init__.py": {}
}
{
    "apicheck-master/build_doc.py": {
        "main": {
            "name": "main",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "apicheck-master/build_docker_images.py": {
        "main": {
            "name": "main",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "apicheck-master/package-manager/setup.py": {},
    "apicheck-master/package-manager/apicheck_package_manager/__init__.py": {},
    "apicheck-master/package-manager/apicheck_package_manager/__main__.py": {
        "_get_version": {
            "name": "_get_version",
            "location": 28,
            "return": [],
            "arguments": {}
        },
        "check_apicheck_is_in_path": {
            "name": "check_apicheck_is_in_path",
            "location": 42,
            "return": [],
            "arguments": {}
        },
        "add_new_alias": {
            "name": "add_new_alias",
            "location": 59,
            "return": [],
            "arguments": {
                "rc_file": [],
                "alias": []
            }
        },
        "rm_new_alias": {
            "name": "rm_new_alias",
            "location": 73,
            "return": [],
            "arguments": {
                "rc_file": [],
                "alias": []
            }
        },
        "get_catalog": {
            "name": "get_catalog",
            "location": 87,
            "return": [],
            "arguments": {}
        },
        "search_in_catalog": {
            "name": "search_in_catalog",
            "location": 106,
            "return": [],
            "arguments": {
                "catalog": [],
                "tool_name": []
            }
        },
        "print_table": {
            "name": "print_table",
            "location": 116,
            "return": [],
            "arguments": {
                "content": [],
                "head": [],
                "width": []
            }
        },
        "list_packages": {
            "name": "list_packages",
            "location": 195,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "install_package": {
            "name": "install_package",
            "location": 203,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "info_package": {
            "name": "info_package",
            "location": 343,
            "return": [],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 361,
            "return": [],
            "arguments": {}
        },
        "print_table.border": {
            "name": "border",
            "location": 119,
            "return": [],
            "arguments": {}
        },
        "install_package.docker_hub_image": {
            "name": "docker_hub_image",
            "location": 205,
            "return": [],
            "arguments": {
                "image_name": [],
                "version": []
            }
        },
        "install_package.get_or_create_config_path": {
            "name": "get_or_create_config_path",
            "location": 208,
            "return": [],
            "arguments": {}
        },
        "install_package.load_current_config": {
            "name": "load_current_config",
            "location": 220,
            "return": [],
            "arguments": {
                "_path": []
            }
        },
        "install_package.build_tool_script": {
            "name": "build_tool_script",
            "location": 229,
            "return": [],
            "arguments": {
                "path": [],
                "image_name": [],
                "version": [],
                "short_command": []
            }
        },
        "install_package.pull_docker_image": {
            "name": "pull_docker_image",
            "location": 263,
            "return": [],
            "arguments": {
                "image_name": [],
                "version": []
            }
        }
    },
    "apicheck-master/tools/curl/bin2pytest.py": {},
    "apicheck-master/tools/curl/setup.py": {},
    "apicheck-master/tools/curl/gurl/RequestResponseCallbacks.py": {
        "RequestResponseCallbacks.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestResponseCallbacks.on_message_begin": {
            "name": "on_message_begin",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestResponseCallbacks.on_url": {
            "name": "on_url",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool"
                ]
            }
        },
        "RequestResponseCallbacks.on_header": {
            "name": "on_header",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ],
                "value": [
                    "str",
                    "int",
                    "bytes"
                ]
            }
        },
        "RequestResponseCallbacks.on_header_field": {
            "name": "on_header_field",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestResponseCallbacks.on_headers_complete": {
            "name": "on_headers_complete",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestResponseCallbacks.on_body": {
            "name": "on_body",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "body": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "RequestResponseCallbacks.on_message_complete": {
            "name": "on_message_complete",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestResponseCallbacks.on_chunk_header": {
            "name": "on_chunk_header",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestResponseCallbacks.on_chunk_complete": {
            "name": "on_chunk_complete",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestResponseCallbacks.on_status": {
            "name": "on_status",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "status": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "apicheck-master/tools/curl/gurl/__init__.py": {
        "_parse_raw_http": {
            "name": "_parse_raw_http",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "parser_builder": [
                    "int"
                ],
                "raw_http": [
                    "List[str]",
                    "MutableMapping[str, Any]"
                ],
                "parser_extract": [
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "_request": {
            "name": "_request",
            "location": 29,
            "return": [
                "Dict[str, Any]",
                "Optional[str]",
                "dict",
                "Optional[Dict[str, Any]]",
                "bytes",
                "int"
            ],
            "arguments": {
                "req": [
                    "str",
                    "int"
                ]
            }
        },
        "_response": {
            "name": "_response",
            "location": 40,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {
                "res": [
                    "str",
                    "list",
                    "Optional[str]"
                ]
            }
        },
        "_dict_reducer": {
            "name": "_dict_reducer",
            "location": 52,
            "return": [
                "str",
                "Mapping[str, Any]",
                "Tuple[int, int, int]",
                "bool",
                "Dict[str, Any]",
                "List[Dict]"
            ],
            "arguments": {
                "x": [
                    "Dict[str, Union[int, str]]",
                    "Dict[str, Any]",
                    "Optional[Dict[str, str]]"
                ],
                "acc": [
                    "Dict[str, Union[int, str]]",
                    "Dict[str, Any]",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "parse_binary": {
            "name": "parse_binary",
            "location": 57,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "str",
                "List[str]",
                "dict"
            ],
            "arguments": {
                "raw_request": [
                    "int",
                    "Callable[..., Coroutine]"
                ],
                "raw_response": [
                    "dict"
                ]
            }
        },
        "_bytes_reduce": {
            "name": "_bytes_reduce",
            "location": 75,
            "return": [
                "Tuple[int, int]",
                "int"
            ],
            "arguments": {
                "a": [
                    "bytes",
                    "bytearray",
                    "Union[str, int]",
                    "str"
                ],
                "b": [
                    "bytes",
                    "bytearray",
                    "Union[str, int]",
                    "str"
                ]
            }
        },
        "_extract_bin_block_from_multipart": {
            "name": "_extract_bin_block_from_multipart",
            "location": 85,
            "return": [
                "str",
                "Iterator[str]",
                "FrozenSet[str]"
            ],
            "arguments": {
                "from_attr": [
                    "Counter",
                    "bool",
                    "List[Tuple[str, str]]"
                ],
                "what_attr": [
                    "Counter",
                    "bool",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "parse_curl_trace": {
            "name": "parse_curl_trace",
            "location": 96,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "curl_trace_content": [
                    "Iterable[str]",
                    "Sequence[str]",
                    "int",
                    "dict"
                ]
            }
        },
        "_request._build_parser": {
            "name": "_build_parser",
            "location": 30,
            "return": [],
            "arguments": {
                "callbacks": []
            }
        },
        "_request._extract_from_parser": {
            "name": "_extract_from_parser",
            "location": 32,
            "return": [],
            "arguments": {
                "parser": []
            }
        },
        "_response._build_parser": {
            "name": "_build_parser",
            "location": 41,
            "return": [
                "Optional[Dict]",
                "bool",
                "List[Callable]"
            ],
            "arguments": {
                "callbacks": []
            }
        },
        "_response._extract_from_parser": {
            "name": "_extract_from_parser",
            "location": 43,
            "return": [
                "tuple",
                "Dict[str, Any]",
                "str",
                "Sequence[str]",
                "int"
            ],
            "arguments": {
                "parser": [
                    "str",
                    "dict"
                ]
            }
        },
        "_extract_bin_block_from_multipart._ext": {
            "name": "_ext",
            "location": 86,
            "return": [
                "str",
                "bytearray",
                "int"
            ],
            "arguments": {
                "target": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        }
    },
    "apicheck-master/tools/curl/gurl/__main__.py": {
        "main": {
            "name": "main",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "apicheck-master/tools/curl/gurl/curlparse/__init__.py": {
        "_extract_item": {
            "name": "_extract_item",
            "location": 20,
            "return": [
                "bool",
                "List[int]",
                "int"
            ],
            "arguments": {
                "line": [
                    "str",
                    "list",
                    "Mapping[str, Any]"
                ]
            }
        },
        "curl_trace_block_iterator": {
            "name": "curl_trace_block_iterator",
            "location": 29,
            "return": [],
            "arguments": {
                "curl_content": [
                    "bytes",
                    "str",
                    "List[str]"
                ]
            }
        },
        "curl_trace_reqres_iterator": {
            "name": "curl_trace_reqres_iterator",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "blocks_iterator": [
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "apicheck-master/tools/curl/gurl/hexdealer/__init__.py": {
        "extract_hex_from_curl_line": {
            "name": "extract_hex_from_curl_line",
            "location": 3,
            "return": [
                "Optional[int]",
                "Optional[float]",
                "str"
            ],
            "arguments": {
                "curlline": [
                    "int",
                    "Optional[Collection[int]]",
                    "str"
                ]
            }
        },
        "extract_hex_from_curl": {
            "name": "extract_hex_from_curl",
            "location": 11,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[float]",
                "Optional[int]",
                "Optional[bool]"
            ],
            "arguments": {
                "curlbody": [
                    "str"
                ]
            }
        }
    },
    "apicheck-master/tools/curl/test/test_parse_binary.py": {
        "test_no_input": {
            "name": "test_no_input",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_no_response": {
            "name": "test_no_response",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_complete_result": {
            "name": "test_complete_result",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "apicheck-master/tools/curl/test/test_parse_hypothesis.py": {
        "gurl": {
            "name": "gurl",
            "location": 14,
            "return": [
                "BinaryIO",
                "bool"
            ],
            "arguments": {
                "url": [
                    "str",
                    "bytes"
                ],
                "headers": [
                    "str",
                    "Callable",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "test_decode_random_headers": {
            "name": "test_decode_random_headers",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "headers": [
                    "Dict[str, Any]",
                    "Optional[dict]"
                ]
            }
        }
    },
    "apicheck-master/tools/curl/test/test_trace_parser.py": {
        "test_empty": {
            "name": "test_empty",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_google": {
            "name": "test_google",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_https_google": {
            "name": "test_https_google",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_yahoo": {
            "name": "test_yahoo",
            "location": 63,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "apicheck-master/tools/curl/test/__init__.py": {},
    "apicheck-master/tools/curl/test/curlparse/test_block_iterator.py": {
        "test_none": {
            "name": "test_none",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_empty": {
            "name": "test_empty",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_one_of_kind": {
            "name": "test_one_of_kind",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_reqres_block_iterator": {
            "name": "test_reqres_block_iterator",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_multiline_info": {
            "name": "test_multiline_info",
            "location": 154,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "apicheck-master/tools/curl/test/curlparse/__init__.py": {},
    "apicheck-master/tools/curl/test/hexdealer/test_hex_parse.py": {
        "test_hex_line": {
            "name": "test_hex_line",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_hex_block": {
            "name": "test_hex_block",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_block_restrictec_content": {
            "name": "test_block_restrictec_content",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "apicheck-master/tools/curl/test/hexdealer/__init__.py": {},
    "apicheck-master/tools/proxy/addons/apicheck_addon.py": {
        "to_apicheck_format": {
            "name": "to_apicheck_format",
            "location": 7,
            "return": [
                "int",
                "django.http.HttpRequest",
                "str"
            ],
            "arguments": {
                "flow": [
                    "mitmproxy.http.HTTPFlow",
                    "str",
                    "Callable[[Dict], None]"
                ],
                "is_error": [
                    "bool",
                    "str",
                    "Exception"
                ]
            }
        },
        "APICheck.response": {
            "name": "response",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "flow": [
                    "mitmproxy.http.HTTPFlow",
                    "bool",
                    "str"
                ]
            }
        },
        "APICheck.error": {
            "name": "error",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "flow": [
                    "mitmproxy.http.HTTPFlow",
                    "Dict[str, str]",
                    "str"
                ]
            }
        }
    },
    "apicheck-master/tools/send-to-proxy/setup.py": {},
    "apicheck-master/tools/send-to-proxy/sendtoproxy/__init__.py": {},
    "apicheck-master/tools/send-to-proxy/sendtoproxy/__main__.py": {
        "parse_proxy": {
            "name": "parse_proxy",
            "location": 57,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "proxy": [
                    "str"
                ]
            }
        },
        "send_one_input_data": {
            "name": "send_one_input_data",
            "location": 87,
            "return": [
                "Optional[str]",
                "str",
                "Dict[str, Any]",
                "bytes",
                "Dict[str, dict]"
            ],
            "arguments": {
                "input_data": [
                    "str",
                    "requests.Response",
                    "Optional[dict]"
                ],
                "args": []
            }
        },
        "run": {
            "name": "run",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "Request.from_json": {
            "name": "from_json",
            "location": 39,
            "return": [
                "str",
                "bool",
                "Iterable[int]"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "Optional[float]",
                    "Type[T]",
                    "List[str]"
                ],
                "json_data": [
                    "str",
                    "dict"
                ]
            }
        },
        "Request.__post_init__": {
            "name": "__post_init__",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "apicheck-master/tools/sensitive-data/setup.py": {},
    "apicheck-master/tools/sensitive-data/sensitive_data/__init__.py": {},
    "apicheck-master/tools/sensitive-data/sensitive_data/__main__.py": {
        "flatten_dict": {
            "name": "flatten_dict",
            "location": 24,
            "return": [
                "typing.Tuple[typing.Tuple[builtins.str], builtins.str, str or int or bool]"
            ],
            "arguments": {
                "target": [
                    "str",
                    "dict",
                    "Optional[Dict]",
                    "List[str]"
                ],
                "path": [
                    "Optional[str]",
                    "str",
                    "Optional[Sequence[str]]"
                ]
            }
        },
        "_load_rules": {
            "name": "_load_rules",
            "location": 77,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "args": []
            }
        },
        "_load_ignore_ids": {
            "name": "_load_ignore_ids",
            "location": 107,
            "return": [
                "str",
                "Tuple[int, int]"
            ],
            "arguments": {
                "args": []
            }
        },
        "_check_input_data": {
            "name": "_check_input_data",
            "location": 135,
            "return": [
                "bool"
            ],
            "arguments": {
                "data": [
                    "List[str]",
                    "dict",
                    "List[dict]",
                    "str",
                    "bytes",
                    "List[List[Any]]",
                    "bool"
                ]
            }
        },
        "decode_body": {
            "name": "decode_body",
            "location": 144,
            "return": [
                "Dict[str, Any]",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "data": [
                    "str",
                    "bytes",
                    "Dict[str, Any]",
                    "Union[Mapping, str]"
                ]
            }
        },
        "search_in_dict": {
            "name": "search_in_dict",
            "location": 168,
            "return": [
                "bool",
                "str",
                "List[Dict]",
                "Mapping[str, Any]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "body": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Dict[int, str]"
                ],
                "rule": [
                    "str"
                ],
                "where": [
                    "str",
                    "dict",
                    "List[str]",
                    "List[int]",
                    "Dict[str, Any]"
                ],
                "url": [
                    "str",
                    "dict",
                    "List[str]",
                    "List[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "search_issues": {
            "name": "search_issues",
            "location": 190,
            "return": [
                "int",
                "list",
                "str"
            ],
            "arguments": {
                "content_json": [
                    "dict",
                    "Dict[str, str]",
                    "str",
                    "Mapping[str, Any]",
                    "requests.models.Response"
                ],
                "rules": [
                    "list",
                    "str",
                    "int",
                    "bytes",
                    "Union[str, bytes]"
                ],
                "ignores": [
                    "set",
                    "bool",
                    "List[Tuple[int, int]]",
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "cli_analyze": {
            "name": "cli_analyze",
            "location": 262,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        },
        "server": {
            "name": "server",
            "location": 326,
            "return": [
                ""
            ],
            "arguments": {
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 362,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "flatten_dict._path_add": {
            "name": "_path_add",
            "location": 52,
            "return": [
                "str",
                "FrozenSet[str]"
            ],
            "arguments": {
                "item": [
                    "dict",
                    "Mapping[str, Any]",
                    "str",
                    "Optional[Container[str]]"
                ]
            }
        },
        "server.home_analyze": {
            "name": "home_analyze",
            "location": 330,
            "return": [
                "str",
                "Optional[str]",
                "List[str]",
                "Dict[str, Any]",
                "Iterator['Vertex']",
                "Dict[str, dict]"
            ],
            "arguments": {
                "_request": [
                    "sanic.requesRequest",
                    "starlette.requests.Request"
                ]
            }
        }
    }
}
{
    "aplf-master/app/setup.py": {},
    "aplf-master/app/aplf/config.py": {},
    "aplf-master/app/aplf/__init__.py": {},
    "aplf-master/app/aplf/t3tsc/data.py": {
        "extract_id": {
            "name": "extract_id",
            "location": 16,
            "return": [
                "bool",
                "List[str]"
            ],
            "arguments": {
                "fname": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "read_table": {
            "name": "read_table",
            "location": 23,
            "return": [
                "Optional[Iterable[Any]]",
                "type",
                "Optional[int]",
                "bool",
                "Optional[str]",
                "torch.nn.Module"
            ],
            "arguments": {
                "x_dir": [
                    "str",
                    "pathlib.Path",
                    "norfs.fs.base.Path",
                    "BinaryIO",
                    "pathlib.PurePath"
                ],
                "y_dir": [
                    "str",
                    "int",
                    "List[int]",
                    "list",
                    "List[str]",
                    "Sequence[Sequence[Any]]"
                ]
            }
        },
        "to_binary": {
            "name": "to_binary",
            "location": 47,
            "return": [
                "numpy.ndarray",
                "float",
                "Dict[str, numpy.ndarray]",
                "dict",
                "str",
                "int"
            ],
            "arguments": {
                "mask": [
                    "numpy.ndarray",
                    "float",
                    "Dict[str, numpy.ndarray]",
                    "dict",
                    "str",
                    "int"
                ]
            }
        },
        "kfold": {
            "name": "kfold",
            "location": 84,
            "return": [
                "List[int]",
                "List[List[int]]",
                "int",
                "bool"
            ],
            "arguments": {
                "table": [
                    "List[int]",
                    "int",
                    "bool",
                    "list",
                    "numpy.ndarray",
                    "Sequence[int]"
                ],
                "n_splits": [
                    "int",
                    "float",
                    "raiden.utils.PaymentWithFeeAmount",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]",
                    "raiden.utils.Balance"
                ]
            }
        },
        "resize": {
            "name": "resize",
            "location": 90,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "inpath": [
                    "pathlib.Path",
                    "io.StringIO",
                    "int",
                    "io.BufferedReader",
                    "bytes",
                    "TextIO"
                ],
                "outpath": [
                    "pathlib.Path",
                    "str",
                    "bytes",
                    "int"
                ],
                "size": [
                    "Tuple[float, float]",
                    "numpy.ndarray",
                    "float",
                    "bool",
                    "str",
                    "Union[int, float]"
                ]
            }
        },
        "resize_all": {
            "name": "resize_all",
            "location": 98,
            "return": [
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName",
                "List[List[str]]",
                "bool"
            ],
            "arguments": {
                "in_dir": [
                    "str",
                    "List[str]",
                    "Dict[str, str]",
                    "int",
                    "Iterable[str]"
                ],
                "out_dir": [
                    "str",
                    "Iterator[Tuple[str, Any, Any]]",
                    "bool"
                ],
                "size": [
                    "str",
                    "List[str]",
                    "Dict[str, str]",
                    "int",
                    "Iterable[str]"
                ],
                "pattern": [
                    "str",
                    "List[str]",
                    "Dict[str, str]",
                    "int",
                    "Iterable[str]"
                ]
            }
        },
        "get_iou": {
            "name": "get_iou",
            "location": 114,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "pred": [
                    "torch.optim.Optimizer",
                    "Iterable[Hashable]"
                ],
                "label": [
                    "torch.optim.Optimizer",
                    "Iterable[Hashable]"
                ],
                "classes": [
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "get_batch_iou_binary": {
            "name": "get_batch_iou_binary",
            "location": 126,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "preds": [
                    "str",
                    "Callable",
                    "list"
                ],
                "labels": [
                    "str",
                    "Callable",
                    "list"
                ],
                "thresold": [
                    "str",
                    "Callable",
                    "list"
                ]
            }
        },
        "get_batch_iou": {
            "name": "get_batch_iou",
            "location": 134,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "preds": [
                    "str",
                    "Callable",
                    "bool",
                    "int"
                ],
                "labels": [
                    "str",
                    "Callable",
                    "bool",
                    "int"
                ],
                "classes": [
                    "str",
                    "Callable",
                    "bool",
                    "int"
                ]
            }
        },
        "horizontal_flip": {
            "name": "horizontal_flip",
            "location": 142,
            "return": [
                "str",
                "float",
                "numpy.ndarray"
            ],
            "arguments": {
                "image": [
                    "numpy.ndarray",
                    "Tuple[int, int]",
                    "int"
                ]
            }
        },
        "train_aug": {
            "name": "train_aug",
            "location": 145,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "images": [
                    "torch.Tensor",
                    "str",
                    "numpy.ndarray",
                    "int",
                    "float"
                ],
                "probability": [
                    "torch.Tensor",
                    "str",
                    "numpy.ndarray",
                    "int",
                    "float"
                ]
            }
        },
        "Dataset.__init__": {
            "name": "__init__",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "table": [
                    "dict",
                    "DefaultDict[str, int]",
                    "Callable[[str], bool]",
                    "Union[Dict, List]",
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, np.ndarray]"
                ],
                "mode": [
                    "bool",
                    "int",
                    "Callable",
                    "Optional[Mapping]"
                ]
            }
        },
        "Dataset.__len__": {
            "name": "__len__",
            "location": 57,
            "return": [
                "int",
                "bool",
                "Union[numpy.ndarray, numpy.void]",
                "float",
                "Dict[str, Dict[str, int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Dataset.__get_image": {
            "name": "__get_image",
            "location": 60,
            "return": [
                "str",
                "pathlib.Path",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "pathlib.Path",
                    "Union[str, pathlib.Path]",
                    "path.Path",
                    "pathlib2.Path"
                ]
            }
        },
        "Dataset.__getitem__": {
            "name": "__getitem__",
            "location": 68,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "idx": [
                    "bytes",
                    "pymatgen.io.vasp.inputs.Poscar",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "aplf-master/app/aplf/t3tsc/losses.py": {
        "lovasz_grad": {
            "name": "lovasz_grad",
            "location": 5,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "gt_sorted": [
                    "int",
                    "bool"
                ]
            }
        },
        "flatten_binary_scores": {
            "name": "flatten_binary_scores",
            "location": 19,
            "return": [
                "str",
                "bool",
                "List[Dict]",
                "int"
            ],
            "arguments": {
                "scores": [
                    "int",
                    "Optional[bool]",
                    "bool",
                    "str"
                ],
                "labels": [
                    "bool",
                    "str",
                    "Optional[\"UtilityFunction\"]",
                    "float"
                ],
                "ignore": [
                    "Union[str, Callable[[], str]]",
                    "torch.IntTensor",
                    "Union[int, float, None]",
                    "torch.Tensor",
                    "Optional[str]",
                    "bool",
                    "Dict[int, str]"
                ]
            }
        },
        "lovasz_hinge_flat": {
            "name": "lovasz_hinge_flat",
            "location": 33,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "logits": [
                    "int"
                ],
                "labels": [
                    "List[int]",
                    "int"
                ]
            }
        },
        "lovasz_hinge": {
            "name": "lovasz_hinge",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "logits": [
                    "Optional[str]",
                    "bool",
                    "int",
                    "str"
                ],
                "labels": [
                    "Optional[str]",
                    "bool",
                    "int",
                    "str"
                ],
                "per_image": [
                    "str",
                    "bool",
                    "Sequence[T]",
                    "int"
                ],
                "ignore": [
                    "Optional[str]",
                    "bool",
                    "int",
                    "str"
                ]
            }
        },
        "mean": {
            "name": "mean",
            "location": 67,
            "return": [
                "str",
                "bool",
                "List[float]",
                "float",
                "Union[int, float]"
            ],
            "arguments": {
                "l": [
                    "Sized",
                    "int",
                    "float",
                    "Callable[..., bool]",
                    "str"
                ],
                "ignore_nan": [
                    "List[T]",
                    "List[str]",
                    "float",
                    "dict",
                    "Union[int, float]",
                    "list"
                ],
                "empty": [
                    "List[T]",
                    "List[str]",
                    "float",
                    "dict",
                    "Union[int, float]",
                    "list"
                ]
            }
        }
    },
    "aplf-master/app/aplf/t3tsc/models.py": {
        "conv3x3": {
            "name": "conv3x3",
            "location": 101,
            "return": [
                "str",
                "Optional[int]",
                "float"
            ],
            "arguments": {
                "input_dim": [
                    "torch.Tensor",
                    "List[torch.Tensor]",
                    "torch.ByteTensor",
                    "str",
                    "float",
                    "int"
                ],
                "output_dim": [
                    "torch.Tensor",
                    "List[torch.Tensor]",
                    "torch.ByteTensor",
                    "str",
                    "float",
                    "int"
                ],
                "rate": [
                    "torch.Tensor",
                    "List[torch.Tensor]",
                    "torch.ByteTensor",
                    "str",
                    "float",
                    "int"
                ]
            }
        },
        "FPAv2.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_dim": [
                    "int",
                    "Union[int, float]",
                    "float",
                    "dict",
                    "bool"
                ],
                "output_dim": [
                    "int",
                    "Union[int, float]",
                    "float",
                    "dict",
                    "bool"
                ]
            }
        },
        "FPAv2.forward": {
            "name": "forward",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": []
            }
        },
        "SpatialAttention2d.__init__": {
            "name": "__init__",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "SpatialAttention2d.forward": {
            "name": "forward",
            "location": 58,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "torch.Tensor"
                ]
            }
        },
        "GAB.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "input_dim": [
                    "int",
                    "Optional[int]",
                    "bool",
                    "torch.Tensor"
                ],
                "reduction": [
                    "int",
                    "Optional[int]",
                    "bool",
                    "torch.Tensor"
                ]
            }
        },
        "GAB.forward": {
            "name": "forward",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "torch.Tensor",
                    "float"
                ]
            }
        },
        "SpatialAttention3d.__init__": {
            "name": "__init__",
            "location": 81,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "channel": [
                    "int",
                    "str",
                    "float",
                    "bool"
                ]
            }
        },
        "SpatialAttention3d.forward": {
            "name": "forward",
            "location": 86,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "float",
                    "torch.Tensor"
                ]
            }
        },
        "SCse.__init__": {
            "name": "__init__",
            "location": 93,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "dim": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "SCse.forward": {
            "name": "forward",
            "location": 98,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "bool",
                    "int"
                ]
            }
        },
        "Decoder.__init__": {
            "name": "__init__",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "in_channels": [
                    "int",
                    "dict",
                    "float",
                    "str"
                ],
                "channels": [
                    "int",
                    "dict",
                    "float",
                    "str"
                ],
                "out_channels": [
                    "int",
                    "float"
                ]
            }
        },
        "Decoder.forward": {
            "name": "forward",
            "location": 114,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "int"
                ],
                "e": [
                    "Optional[T]",
                    "Union[list, 'ListProxy']"
                ]
            }
        },
        "Decoderv2.__init__": {
            "name": "__init__",
            "location": 126,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "up_in": [
                    "float"
                ],
                "x_in": [
                    "int",
                    "float",
                    "List[str]"
                ],
                "n_out": [
                    "int",
                    "bool",
                    "Optional[bytes]",
                    "str"
                ]
            }
        },
        "Decoderv2.forward": {
            "name": "forward",
            "location": 136,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "up_p": [
                    "int",
                    "List[bytes]",
                    "float",
                    "str"
                ],
                "x_p": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "Res34Unet.__init__": {
            "name": "__init__",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Res34Unet.forward": {
            "name": "forward",
            "location": 183,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "x": [
                    "T",
                    "bool"
                ]
            }
        }
    },
    "aplf-master/app/aplf/t3tsc/pipelines.py": {
        "main": {
            "name": "main",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aplf-master/app/aplf/t3tsc/submit.py": {
        "make_json": {
            "name": "make_json",
            "location": 16,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "annotations_dir": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "categories": [
                    "str",
                    "int",
                    "bool",
                    "Callable[..., T]",
                    "dict"
                ]
            }
        }
    },
    "aplf-master/app/aplf/t3tsc/train.py": {
        "validate_epoch": {
            "name": "validate_epoch",
            "location": 20,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "loader": [
                    "str",
                    "list",
                    "bytes",
                    "int",
                    "List[\"Issue\"]"
                ],
                "model": [
                    "str",
                    "allennlp.data.DatasetReader",
                    "allennlp.models.Model"
                ]
            }
        },
        "train_epoch": {
            "name": "train_epoch",
            "location": 56,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "loader": [
                    "str",
                    "list",
                    "bytes",
                    "int",
                    "List[\"Issue\"]"
                ],
                "model": [
                    "str",
                    "allennlp.data.DatasetReader",
                    "allennlp.models.Model"
                ],
                "optimizer": [
                    "IO[str]",
                    "dict",
                    "set",
                    "bool",
                    "List[str]",
                    "str",
                    "torch.nn.Module"
                ]
            }
        },
        "save": {
            "name": "save",
            "location": 84,
            "return": [
                "None"
            ],
            "arguments": {
                "model": [
                    "Dict[str, int]",
                    "str",
                    "allennlp.data.iterators.data_iterator.DataIterator",
                    "Optional[List[str]]",
                    "dere.models.Model",
                    "bool",
                    "allennlp.data.Dataset"
                ],
                "path": [
                    "str",
                    "pathlib.Path",
                    "int"
                ]
            }
        },
        "train_cv": {
            "name": "train_cv",
            "location": 88,
            "return": [
                "None"
            ],
            "arguments": {
                "table": [
                    "float",
                    "int",
                    "raiden.utils.TokenAmount"
                ],
                "train_indices": [
                    "bool",
                    "list",
                    "Set[str]",
                    "Table"
                ],
                "val_indices": [
                    "bool",
                    "list",
                    "Set[str]",
                    "Table"
                ],
                "n_epochs": [
                    "float",
                    "int",
                    "raiden.utils.TokenAmount"
                ],
                "max_lr": [
                    "float",
                    "Optional[str]",
                    "bool"
                ],
                "min_lr": [
                    "float",
                    "int",
                    "raiden.utils.TokenAmount"
                ],
                "momentum": [
                    "float",
                    "Optional[str]",
                    "bool"
                ],
                "weight_decay": [
                    "float",
                    "Optional[str]",
                    "bool"
                ],
                "scheduler_step": [
                    "float",
                    "int",
                    "raiden.utils.TokenAmount"
                ],
                "writer": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "model_path": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "Callable"
                ]
            }
        }
    },
    "aplf-master/app/aplf/t3tsc/__init__.py": {},
    "aplf-master/app/aplf/utils/decorators.py": {
        "skip_if": {
            "name": "skip_if",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "check_skip": [
                    "bool",
                    "str"
                ],
                "skip_return": [
                    "bool",
                    "str"
                ]
            }
        },
        "skip_if.decorator": {
            "name": "decorator",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "skip_if.decorator.wrapper": {
            "name": "wrapper",
            "location": 13,
            "return": [
                "int",
                "Iterable[str]",
                "List[List[str]]",
                "bool"
            ],
            "arguments": {}
        }
    },
    "aplf-master/app/aplf/utils/__init__.py": {
        "Timer.__enter__": {
            "name": "__enter__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Timer.__exit__": {
            "name": "__exit__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aplf-master/app/experiments/t3tsc.py": {},
    "aplf-master/app/tests/__init__.py": {},
    "aplf-master/app/tests/t3tsc/test_data.py": {
        "test_read_table": {
            "name": "test_read_table",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_resize": {
            "name": "test_resize",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dataset": {
            "name": "test_dataset",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_dataset_get_item": {
            "name": "test_dataset_get_item",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_get_iou": {
            "name": "test_get_iou",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "pred": [
                    "str",
                    "bool",
                    "int"
                ],
                "label": [
                    "raiden.utils.NetworkTimeout",
                    "int",
                    "str"
                ],
                "expected": [
                    "str",
                    "Optional[bool]",
                    "float"
                ]
            }
        },
        "test_horizontal_flip": {
            "name": "test_horizontal_flip",
            "location": 72,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_train_aug": {
            "name": "test_train_aug",
            "location": 87,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aplf-master/app/tests/t3tsc/test_model.py": {
        "test_res34unet": {
            "name": "test_res34unet",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_loss": {
            "name": "test_loss",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aplf-master/app/tests/t3tsc/test_submit.py": {
        "test_make_json": {
            "name": "test_make_json",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "aplf-master/app/tests/utils/test_decorators.py": {
        "test_skip_if": {
            "name": "test_skip_if",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "is_skip": [
                    "str",
                    "int"
                ],
                "expected": [
                    "str",
                    "List[str]",
                    "Sequence",
                    "List[List[Any]]"
                ]
            }
        },
        "test_skip_if.func": {
            "name": "func",
            "location": 10,
            "return": [
                "Tuple[str, int]",
                "Optional[str]",
                "str",
                "Tuple[int, int]",
                "int"
            ],
            "arguments": {}
        }
    },
    "aplf-master/app/tests/utils/__init__.py": {}
}
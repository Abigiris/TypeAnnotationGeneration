{
    "appstore-master/manage.py": {},
    "appstore-master/config/__init__.py": {},
    "appstore-master/docs/conf.py": {},
    "appstore-master/nextcloudappstore/urls.py": {},
    "appstore-master/nextcloudappstore/wsgi.py": {
        "find_in_root": {
            "name": "find_in_root",
            "location": 21,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "path": [
                    "str",
                    "os.PathLike",
                    "Iterable[str]"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/__init__.py": {},
    "appstore-master/nextcloudappstore/api/apps.py": {},
    "appstore-master/nextcloudappstore/api/urls.py": {},
    "appstore-master/nextcloudappstore/api/__init__.py": {},
    "appstore-master/nextcloudappstore/api/v1/serializers.py": {
        "PhpExtensionDependencySerializer.get_version_spec": {
            "name": "get_version_spec",
            "location": 22,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "dict"
                ]
            }
        },
        "PhpExtensionDependencySerializer.get_raw_version_spec": {
            "name": "get_raw_version_spec",
            "location": 25,
            "return": [
                "str",
                "int",
                "bytes",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bytes",
                    "str",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "DatabaseDependencySerializer.get_version_spec": {
            "name": "get_version_spec",
            "location": 38,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "dict"
                ]
            }
        },
        "DatabaseDependencySerializer.get_raw_version_spec": {
            "name": "get_raw_version_spec",
            "location": 41,
            "return": [
                "str",
                "int",
                "bytes",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bytes",
                    "str",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "AppReleaseSerializer.get_platform_version_spec": {
            "name": "get_platform_version_spec",
            "location": 87,
            "return": [
                "str",
                "int",
                "bytes",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int",
                    "bytes",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "AppReleaseSerializer.get_php_version_spec": {
            "name": "get_php_version_spec",
            "location": 90,
            "return": [
                "str",
                "int",
                "bytes",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int",
                    "bytes",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "AppReleaseSerializer.get_raw_platform_version_spec": {
            "name": "get_raw_platform_version_spec",
            "location": 93,
            "return": [
                "Dict[Optional[str], Set[abilian.services.security.models.Role]]",
                "abilian.core.models.subjects.Principal",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int"
                ]
            }
        },
        "AppReleaseSerializer.get_raw_php_version_spec": {
            "name": "get_raw_php_version_spec",
            "location": 96,
            "return": [
                "Dict[Optional[str], Set[abilian.services.security.models.Role]]",
                "abilian.core.models.subjects.Principal",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "int"
                ]
            }
        },
        "AppSerializer.get_discussion": {
            "name": "get_discussion",
            "location": 124,
            "return": [
                "str",
                "zerver.models.Realm"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/api/v1/urls.py": {},
    "appstore-master/nextcloudappstore/api/v1/views.py": {
        "AppView.get": {
            "name": "get",
            "location": 71,
            "return": [
                "int",
                "bytes",
                "tartare.core.models.Job",
                "Dict[str, Any]",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.http.requesHttpRequest",
                    "rest_framework.requesRequest",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "AppView._filter_releases": {
            "name": "_filter_releases",
            "location": 79,
            "return": [
                "str",
                "float",
                "Sequence",
                "List[float]"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "Mapping[str, Any]",
                    "bool",
                    "Iterable[bytes]",
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "version": [
                    "dict",
                    "Mapping[str, Any]",
                    "bool",
                    "Iterable[bytes]",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "AppRegisterView.post": {
            "name": "post",
            "location": 105,
            "return": [
                "Dict[int, dict]",
                "List[Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "dict"
                ]
            }
        },
        "AppRegisterView._create_discourse_category": {
            "name": "_create_discourse_category",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_id": [
                    "int"
                ]
            }
        },
        "AppReleaseView.post": {
            "name": "post",
            "location": 176,
            "return": [
                "Dict[int, dict]",
                "models.Dashboard"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "rest_framework.requesRequest"
                ]
            }
        },
        "AppReleaseView._check_permission": {
            "name": "_check_permission",
            "location": 215,
            "return": [
                "str",
                "Dict[int, str]",
                "Dict[str, Any]",
                "Mapping[int, str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile"
                ],
                "app_id": [
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile",
                    "int",
                    "rest_framework.requesRequest",
                    "Union[int,str]"
                ],
                "version": [
                    "str",
                    "zerver.models.UserProfile"
                ],
                "is_nightly": [
                    "str",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "AppReleaseView.get_object": {
            "name": "get_object",
            "location": 241,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionObtainAuthToken.post": {
            "name": "post",
            "location": 268,
            "return": [
                "str",
                "bool",
                "zam_repondeur.models.Lecture",
                "dict"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "str",
                    "django.http.HttpRequest"
                ]
            }
        },
        "RegenerateAuthToken.post": {
            "name": "post",
            "location": 290,
            "return": [
                "Dict[str, Any]",
                "int",
                "asgard.models.job.ScheduledJob",
                "List[Dict[str, Any]]",
                "apistar.http.RequestData"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "starlette.requests.Request",
                    "str"
                ]
            }
        },
        "AppView._filter_releases.is_compatible": {
            "name": "is_compatible",
            "location": 89,
            "return": [
                "bool"
            ],
            "arguments": {
                "release": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/api/v1/__init__.py": {},
    "appstore-master/nextcloudappstore/api/v1/release/downloader.py": {
        "ReleaseDownload.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ReleaseDownload.__enter__": {
            "name": "__enter__",
            "location": 24,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReleaseDownload.__exit__": {
            "name": "__exit__",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "AppReleaseDownloader.get_archive": {
            "name": "get_archive",
            "location": 32,
            "return": [
                "str",
                "Optional[List[str]]",
                "List[str]",
                "Tuple[str]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, Any]]"
                ],
                "target_directory": [
                    "str",
                    "bool",
                    "Optional[str]"
                ],
                "timeout": [
                    "bool",
                    "Optional[str]",
                    "str",
                    "Optional[Callable[[Dict], bool]]",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, str]]"
                ],
                "max_redirects": [
                    "int",
                    "Callable[[], float]"
                ],
                "max_size": [
                    "int",
                    "float",
                    "str",
                    "bytearray"
                ]
            }
        },
        "AppReleaseDownloader._stream_to_file": {
            "name": "_stream_to_file",
            "location": 79,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "BinaryIO",
                    "bytes",
                    "str"
                ],
                "max_size": [
                    "int",
                    "float"
                ],
                "req": [
                    "requests.Response",
                    "int",
                    "Union[Dict, List]",
                    "bytes"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/api/v1/release/importer.py": {
        "none_to_empty_string": {
            "name": "none_to_empty_string",
            "location": 14,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Optional[str]",
                    "Optional[Any]",
                    "Union[None, int, float]",
                    "int"
                ]
            }
        },
        "Importer.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "importers": [
                    "int",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]",
                    "bytes",
                    "Callable"
                ],
                "ignored_fields": [
                    "int",
                    "Iterable[str]",
                    "Iterable[Union[int, str]]",
                    "bytes",
                    "Callable"
                ]
            }
        },
        "Importer.import_data": {
            "name": "import_data",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ],
                "value": [
                    "str",
                    "int",
                    "Optional[int]",
                    "Union[str, int]"
                ],
                "obj": [
                    "str",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "Importer._get_object": {
            "name": "_get_object",
            "location": 35,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "value": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "obj": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "Importer._before_import": {
            "name": "_before_import",
            "location": 38,
            "return": [
                "typing.Tuple[typing.Any, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "slice",
                    "bool"
                ],
                "value": [
                    "str",
                    "slice",
                    "bool"
                ],
                "obj": [
                    "str",
                    "slice",
                    "bool"
                ]
            }
        },
        "ScalarImporter.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhpExtensionImporter.import_data": {
            "name": "import_data",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "DatabaseImporter.import_data": {
            "name": "import_data",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str"
                ],
                "obj": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "LicenseImporter.import_data": {
            "name": "import_data",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "List[str]",
                    "list"
                ],
                "obj": [
                    "List[str]",
                    "list"
                ]
            }
        },
        "ShellCommandImporter.import_data": {
            "name": "import_data",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str",
                    "dict",
                    "list",
                    "Optional[str]"
                ],
                "obj": [
                    "str",
                    "dict",
                    "list",
                    "Optional[str]"
                ]
            }
        },
        "AuthorImporter.import_data": {
            "name": "import_data",
            "location": 102,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "List[str]",
                    "list"
                ],
                "obj": [
                    "List[str]",
                    "list"
                ]
            }
        },
        "DefaultAttributeImporter.import_data": {
            "name": "import_data",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "T"
                ],
                "value": [
                    "str",
                    "T"
                ],
                "obj": [
                    "str",
                    "T"
                ]
            }
        },
        "StringAttributeImporter.import_data": {
            "name": "import_data",
            "location": 120,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int"
                ],
                "value": [
                    "str",
                    "int"
                ],
                "obj": [
                    "str",
                    "int"
                ]
            }
        },
        "ScreenshotsImporter.import_data": {
            "name": "import_data",
            "location": 125,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "str",
                    "bool",
                    "core.models.GroupingKey",
                    "int",
                    "tuple"
                ],
                "obj": [
                    "str",
                    "List[List[object]]",
                    "list"
                ]
            }
        },
        "CategoryImporter.import_data": {
            "name": "import_data",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str"
                ],
                "value": [
                    "List[str]",
                    "list"
                ],
                "obj": [
                    "List[str]",
                    "list"
                ]
            }
        },
        "L10NImporter.import_data": {
            "name": "import_data",
            "location": 146,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "int",
                    "Hashable",
                    "bytes",
                    "Dict[str, str]"
                ],
                "value": [
                    "dict",
                    "zerver.models.Message",
                    "Iterable[str]",
                    "Dict[str, Any]",
                    "bool",
                    "Dict[str, str]",
                    "Mapping[str, Dict[str, Any]]"
                ],
                "obj": [
                    "str",
                    "Dict[str, str]",
                    "bytes"
                ]
            }
        },
        "AppReleaseImporter.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "php_extension_importer": [
                    "str",
                    "bool"
                ],
                "database_importer": [
                    "str",
                    "bool"
                ],
                "license_importer": [
                    "str",
                    "bool"
                ],
                "shell_command_importer": [
                    "str",
                    "bool"
                ],
                "string_attribute_importer": [
                    "str",
                    "bool"
                ],
                "default_attribute_importer": [
                    "str",
                    "bool"
                ],
                "l10n_importer": [
                    "str",
                    "bool"
                ]
            }
        },
        "AppReleaseImporter._before_import": {
            "name": "_before_import",
            "location": 188,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "slice",
                    "bool"
                ],
                "value": [
                    "str",
                    "Optional[int]",
                    "Union[int, str, bool]",
                    "dict"
                ],
                "obj": [
                    "bytes",
                    "str",
                    "List[int]",
                    "core.models.GroupingKey"
                ]
            }
        },
        "AppReleaseImporter._get_object": {
            "name": "_get_object",
            "location": 209,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "value": [
                    "str",
                    "int",
                    "Union[str, List]"
                ],
                "obj": [
                    "str",
                    "int",
                    "Union[str, List]"
                ]
            }
        },
        "AppImporter.__init__": {
            "name": "__init__",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "release_importer": [
                    "str",
                    "bool"
                ],
                "screenshots_importer": [
                    "str",
                    "bool"
                ],
                "attribute_importer": [
                    "str",
                    "bool"
                ],
                "l10n_importer": [
                    "str",
                    "bool"
                ],
                "category_importer": [
                    "str",
                    "bool"
                ],
                "author_importer": [
                    "str",
                    "bool"
                ],
                "default_attribute_importer": [
                    "bool",
                    "float",
                    "int"
                ]
            }
        },
        "AppImporter._get_object": {
            "name": "_get_object",
            "location": 241,
            "return": [
                "app.App"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "bytes",
                    "bool"
                ],
                "value": [
                    "str",
                    "bool",
                    "Callable[[], None]",
                    "int"
                ],
                "obj": [
                    "str",
                    "bytes",
                    "bool"
                ]
            }
        },
        "AppImporter._before_import": {
            "name": "_before_import",
            "location": 246,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "slice",
                    "bool"
                ],
                "value": [
                    "str",
                    "VT",
                    "bytes"
                ],
                "obj": [
                    "str",
                    "dict",
                    "jgikbase.idmapping.core.user.AuthsourceID",
                    "Callable[[], T]"
                ]
            }
        },
        "AppImporter._should_update_everything": {
            "name": "_should_update_everything",
            "location": 268,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "bool",
                    "int",
                    "Optional[int]",
                    "Union[str, bytes]"
                ]
            }
        },
        "LicenseImporter.import_data.map_models": {
            "name": "map_models",
            "location": 83,
            "return": [
                "List[src.autoks.core.gp_model.GPModel]",
                "allennlp.models.model.Model",
                "List[app.models.Question]",
                "app.models.Question"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "bool",
                    "str",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "ShellCommandImporter.import_data.map_commands": {
            "name": "map_commands",
            "location": 93,
            "return": [
                "list",
                "models.Question",
                "int",
                "str"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "bytes",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        },
        "AuthorImporter.import_data.map_authors": {
            "name": "map_authors",
            "location": 103,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "bytes",
                    "Union[bytes, bytearray, memoryview]"
                ]
            }
        },
        "ScreenshotsImporter.import_data.create_screenshot": {
            "name": "create_screenshot",
            "location": 126,
            "return": [
                "cmk.utils.type_defs.UserId",
                "socialhome.activities.models.Activity"
            ],
            "arguments": {
                "img": [
                    "Dict[str, str]",
                    "Optional[str]",
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "CategoryImporter.import_data.map_categories": {
            "name": "map_categories",
            "location": 137,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "cat": [
                    "Dict[str, Dict[str, int]]",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "AppImporter._should_update_everything.is_newer_version": {
            "name": "is_newer_version",
            "location": 299,
            "return": [
                "Callable",
                "Type",
                "int",
                "str"
            ],
            "arguments": {
                "release": [
                    "str"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/api/v1/release/parser.py": {
        "get_contents": {
            "name": "get_contents",
            "location": 113,
            "return": [
                "str",
                "bool",
                "int",
                "Callable"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path",
                    "Optional[bool]",
                    "Optional[str]",
                    "TextIO"
                ],
                "tar": [
                    "bool",
                    "str",
                    "Set[str]"
                ],
                "max_file_size": [
                    "int",
                    "bool"
                ],
                "default": [
                    "List[Tuple[int, int]]",
                    "Optional[str]",
                    "Sequence[str]",
                    "bool",
                    "Optional[cmk.base.api.agent_based.type_defs.CheckPlugin]"
                ]
            }
        },
        "find_app_id": {
            "name": "find_app_id",
            "location": 135,
            "return": [
                "str",
                "int",
                "Dict[str, Any]",
                "Type[Any]",
                "pathlib.Path"
            ],
            "arguments": {
                "tar": [
                    "dict"
                ],
                "app_folder_regex": [
                    "dict"
                ]
            }
        },
        "find_app_folders": {
            "name": "find_app_folders",
            "location": 154,
            "return": [
                "List[int]",
                "Optional[dict]",
                "Set[str]",
                "int",
                "list"
            ],
            "arguments": {
                "tar": [
                    "Pattern",
                    "str",
                    "pathlib.Path",
                    "int",
                    "Set[Pattern[str]]"
                ],
                "app_folder_regex": [
                    "Pattern",
                    "str",
                    "pathlib.Path",
                    "int",
                    "Set[Pattern[str]]"
                ]
            }
        },
        "test_blacklisted_members": {
            "name": "test_blacklisted_members",
            "location": 162,
            "return": [
                ""
            ],
            "arguments": {
                "tar": [],
                "blacklist": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "element_to_dict": {
            "name": "element_to_dict",
            "location": 178,
            "return": [
                "str",
                "Dict[str, str]",
                "int",
                "List[str]",
                "Iterable[str]",
                "Pattern",
                "dict"
            ],
            "arguments": {
                "element": [
                    "List[dict]"
                ]
            }
        },
        "create_safe_xml_parser": {
            "name": "create_safe_xml_parser",
            "location": 204,
            "return": [
                "core.D.VersionedIdentifier",
                "List[str]",
                "Dict[str, Any]",
                "str",
                "Iterable[T]"
            ],
            "arguments": {}
        },
        "parse_app_metadata": {
            "name": "parse_app_metadata",
            "location": 212,
            "return": [
                "Callable",
                "str",
                "bool",
                "List[dict]",
                "int",
                "float"
            ],
            "arguments": {
                "xml": [
                    "str",
                    "int",
                    "pathlib.Path"
                ],
                "schema": [
                    "str",
                    "BinaryIO",
                    "pathlib.Path",
                    "Optional[str]"
                ],
                "pre_xslt": [
                    "str",
                    "tuple",
                    "Union[str, pathlib3x.Path, IO[str]]",
                    "FrozenSet[str]",
                    "IO[Any]",
                    "pathlib.Path"
                ],
                "xslt": [
                    "pathlib.Path",
                    "List[str]",
                    "FrozenSet[str]",
                    "str",
                    "int",
                    "tuple",
                    "Union[str, pathlib3x.Path, IO[str]]",
                    "IO[Any]"
                ]
            }
        },
        "validate_database": {
            "name": "validate_database",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "xml": [
                    "str",
                    "int",
                    "pathlib.Path"
                ],
                "schema": [
                    "str",
                    "pathlib.Path",
                    "BinaryIO",
                    "IO[bytes]"
                ],
                "pre_xslt": [
                    "str",
                    "tuple",
                    "IO[Any]",
                    "int",
                    "pathlib.Path"
                ]
            }
        },
        "validate_english_present": {
            "name": "validate_english_present",
            "location": 277,
            "return": [
                "None"
            ],
            "arguments": {
                "info": [
                    "bool"
                ]
            }
        },
        "fix_partial_translations": {
            "name": "fix_partial_translations",
            "location": 292,
            "return": [
                "None"
            ],
            "arguments": {
                "info": [
                    "bool"
                ]
            }
        },
        "parse_changelog": {
            "name": "parse_changelog",
            "location": 310,
            "return": [
                "str"
            ],
            "arguments": {
                "changelog": [
                    "str",
                    "bool",
                    "int",
                    "List[str]",
                    "float",
                    "Union[str, int]"
                ],
                "version": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "List[str]",
                    "Dict[str, str]"
                ],
                "is_nightly": [
                    "bool",
                    "float",
                    "List[int]",
                    "int",
                    "bytes"
                ]
            }
        },
        "stream_read_utf8": {
            "name": "stream_read_utf8",
            "location": 341,
            "return": [
                "List[str]",
                "Dict[str, Any]",
                "Mapping[str, Any]",
                "str",
                "bool"
            ],
            "arguments": {
                "tarfile": [
                    "str",
                    "int",
                    "pathlib.Path"
                ],
                "path": [
                    "str",
                    "int",
                    "pathlib.Path"
                ],
                "max_size": [
                    "str",
                    "int",
                    "pathlib.Path"
                ]
            }
        },
        "stream_read_file": {
            "name": "stream_read_file",
            "location": 353,
            "return": [
                "str",
                "dict",
                "bool",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "tarfile": [
                    "str",
                    "Union[str, pathlib.Path]",
                    "Optional[int]"
                ],
                "path": [
                    "str",
                    "int",
                    "bool",
                    "TextIO",
                    "pathlib.Path",
                    "bytes"
                ],
                "max_size": [
                    "int",
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "find_member": {
            "name": "find_member",
            "location": 379,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "tar": [
                    "List[str]",
                    "Optional[str]",
                    "str",
                    "Tuple[str]",
                    "Iterable[pathlib.Path]",
                    "list"
                ],
                "path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "AppMetaData.__init__": {
            "name": "__init__",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "info_xml": [
                    "dict",
                    "str",
                    "List[str]",
                    "Dict[int, bool]",
                    "pathlib.Path"
                ],
                "database_xml": [
                    "dict",
                    "str",
                    "List[str]",
                    "Dict[int, bool]",
                    "pathlib.Path"
                ],
                "app_id": [
                    "str",
                    "int"
                ],
                "changelog": [
                    "dict",
                    "str",
                    "List[str]",
                    "Dict[int, bool]",
                    "pathlib.Path"
                ]
            }
        },
        "GunZipAppMetadataExtractor.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "GunZipAppMetadataExtractor.extract_app_metadata": {
            "name": "extract_app_metadata",
            "location": 61,
            "return": [
                "bool",
                "List[pathlib.Path]",
                "List[object]"
            ],
            "arguments": {
                "self": [],
                "archive_path": [
                    "Dict[str, cerulean.Path]",
                    "pathlib.Path",
                    "pathlib.PosixPath"
                ]
            }
        },
        "GunZipAppMetadataExtractor._parse_archive": {
            "name": "_parse_archive",
            "location": 90,
            "return": [
                "skeema.core.Handle",
                "str",
                "Callable",
                "Mapping[str, Any]",
                "Union[dict, list]"
            ],
            "arguments": {
                "self": [],
                "tar": [
                    "int",
                    "str",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ]
            }
        },
        "find_member.build_paths": {
            "name": "build_paths",
            "location": 390,
            "return": [
                "str"
            ],
            "arguments": {
                "prev": [
                    "str",
                    "List[str]",
                    "pathlib.PosixPath",
                    "pathlib.Path",
                    "int"
                ],
                "curr": [
                    "str",
                    "List[str]",
                    "pathlib.PosixPath",
                    "pathlib.Path",
                    "int"
                ]
            }
        },
        "find_member.check_member": {
            "name": "check_member",
            "location": 404,
            "return": [
                "str",
                "Optional[float]",
                "Optional[pathlib.Path]"
            ],
            "arguments": {
                "path": [
                    "str",
                    "pathlib.Path",
                    "Dict[str, cerulean.path.Path]"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/api/v1/release/provider.py": {
        "AppReleaseProvider.__init__": {
            "name": "__init__",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "downloader": [
                    "str",
                    "list",
                    "dict"
                ],
                "extractor": [
                    "str",
                    "list",
                    "dict"
                ],
                "config": [
                    "dict",
                    "int"
                ]
            }
        },
        "AppReleaseProvider.get_release_info": {
            "name": "get_release_info",
            "location": 28,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "Callable",
                "dict"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "dict"
                ],
                "is_nightly": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/api/v1/release/__init__.py": {
        "ReleaseConfig.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/api/v1/tests/api.py": {
        "ApiTest.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ApiTest._login": {
            "name": "_login",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str"
                ],
                "password": [
                    "str"
                ]
            }
        },
        "ApiTest._login_token": {
            "name": "_login_token",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "dict",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "ApiTest.tearDown": {
            "name": "tearDown",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/api/v1/tests/test_app.py": {
        "AppTest.test_apps": {
            "name": "test_apps",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AppTest.test_delete": {
            "name": "test_delete",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AppTest.test_delete_unauthenticated": {
            "name": "test_delete_unauthenticated",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AppTest.test_delete_unauthorized": {
            "name": "test_delete_unauthorized",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AppTest.test_delete_co_maintainer": {
            "name": "test_delete_co_maintainer",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AppTest.test_delete_not_found": {
            "name": "test_delete_not_found",
            "location": 51,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AppTest.test_releases_platform_min": {
            "name": "test_releases_platform_min",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AppTest.test_releases_platform_min_max": {
            "name": "test_releases_platform_min_max",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AppTest.test_releases_platform_max": {
            "name": "test_releases_platform_max",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AppTest.test_releases_platform_max_wildcard": {
            "name": "test_releases_platform_max_wildcard",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AppTest.test_releases_platform_ok": {
            "name": "test_releases_platform_ok",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AppTest.tearDown": {
            "name": "tearDown",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/api/v1/tests/test_app_register.py": {
        "AppRegisterTest._create_app": {
            "name": "_create_app",
            "location": 15,
            "return": [
                "Optional[str]",
                "dict",
                "App"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "contests.models.User"
                ],
                "app_id": [
                    "str",
                    "int",
                    "Mapping[str, Any]",
                    "contests.models.User"
                ]
            }
        },
        "AppRegisterTest.test_register_unauthenticated": {
            "name": "test_register_unauthenticated",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AppRegisterTest.test_register_unauthorized": {
            "name": "test_register_unauthorized",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AppRegisterTest.test_register_transfer": {
            "name": "test_register_transfer",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AppRegisterTest.test_register": {
            "name": "test_register",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AppRegisterTest.test_register_update": {
            "name": "test_register_update",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/api/v1/tests/test_app_release.py": {
        "AppReleaseTest.create_release": {
            "name": "create_release",
            "location": 30,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "owner": [
                    "str",
                    "Optional[dict]",
                    "zerver.models.UserProfile",
                    "bool",
                    "Optional[str]"
                ],
                "version": [
                    "str",
                    "int",
                    "List[zerver.models.UserProfile]",
                    "bool",
                    "List[str]"
                ],
                "co_maintainers": [
                    "str",
                    "Sequence[str]",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        },
        "AppReleaseTest.test_delete": {
            "name": "test_delete",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AppReleaseTest.test_delete_unauthenticated": {
            "name": "test_delete_unauthenticated",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AppReleaseTest.test_delete_unauthorized": {
            "name": "test_delete_unauthorized",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AppReleaseTest.test_delete_not_found_token": {
            "name": "test_delete_not_found_token",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AppReleaseTest.test_delete_co_maintainer": {
            "name": "test_delete_co_maintainer",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AppReleaseTest.test_delete_not_found": {
            "name": "test_delete_not_found",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AppReleaseTest.test_create_unauthenticated": {
            "name": "test_create_unauthenticated",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AppReleaseTest.test_create_unauthorized": {
            "name": "test_create_unauthorized",
            "location": 91,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "get_release_info": []
            }
        },
        "AppReleaseTest.test_create_co_maintainer": {
            "name": "test_create_co_maintainer",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "get_release_info": []
            }
        },
        "AppReleaseTest.test_no_app": {
            "name": "test_no_app",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "get_release_info": []
            }
        },
        "AppReleaseTest.test_create_validate_https": {
            "name": "test_create_validate_https",
            "location": 135,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/api/v1/tests/test_app_release_provider.py": {
        "FakeDownload.__enter__": {
            "name": "__enter__",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FakeDownload.__exit__": {
            "name": "__exit__",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "exc_type": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_val": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ],
                "exc_tb": [
                    "Optional[Type[BaseException]]",
                    "str",
                    "BaseException",
                    "Optional[BaseException]",
                    "Exception"
                ]
            }
        },
        "ImporterTest.setUp": {
            "name": "setUp",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ImporterTest.test_invalid_app_id": {
            "name": "test_invalid_app_id",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/api/v1/tests/test_parser.py": {
        "ParserTest.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_parse_minimal": {
            "name": "test_parse_minimal",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_parse_repair_jobs": {
            "name": "test_parse_repair_jobs",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_parse_settings_and_activity_and_nav": {
            "name": "test_parse_settings_and_activity_and_nav",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_parse_collaboration": {
            "name": "test_parse_collaboration",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_parse_sabre": {
            "name": "test_parse_sabre",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_parse_pre_release": {
            "name": "test_parse_pre_release",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_parse_digit_id": {
            "name": "test_parse_digit_id",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_parse_invalid_elements": {
            "name": "test_parse_invalid_elements",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_parse_invalid_archive": {
            "name": "test_parse_invalid_archive",
            "location": 111,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_parse_minimal_nextcloud": {
            "name": "test_parse_minimal_nextcloud",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_parse_non_doc_urls": {
            "name": "test_parse_non_doc_urls",
            "location": 127,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_parse_switched_non_doc_urls": {
            "name": "test_parse_switched_non_doc_urls",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_changes_auth_to_security_category": {
            "name": "test_changes_auth_to_security_category",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_validate_schema": {
            "name": "test_validate_schema",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_fixes_xml": {
            "name": "test_fixes_xml",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_broken_xml": {
            "name": "test_broken_xml",
            "location": 164,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_entities": {
            "name": "test_entities",
            "location": 171,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_bad_shell": {
            "name": "test_bad_shell",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_extract_contacts": {
            "name": "test_extract_contacts",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_extract_u2f": {
            "name": "test_extract_u2f",
            "location": 192,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_extract_gunzip_info": {
            "name": "test_extract_gunzip_info",
            "location": 198,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_extract_changelog": {
            "name": "test_extract_changelog",
            "location": 207,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_extract_database": {
            "name": "test_extract_database",
            "location": 213,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_invalid_files": {
            "name": "test_invalid_files",
            "location": 219,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_invalid_directories": {
            "name": "test_invalid_directories",
            "location": 225,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_extract_gunzip_no_appinfo": {
            "name": "test_extract_gunzip_no_appinfo",
            "location": 231,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_extract_no_single_app_folder": {
            "name": "test_extract_no_single_app_folder",
            "location": 237,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_extract_no_uppercase_app_folder": {
            "name": "test_extract_no_uppercase_app_folder",
            "location": 243,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_extract_gunzip_symlink": {
            "name": "test_extract_gunzip_symlink",
            "location": 249,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_extract_gunzip_appinfo_symlink": {
            "name": "test_extract_gunzip_appinfo_symlink",
            "location": 255,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_extract_gunzip_app_symlink": {
            "name": "test_extract_gunzip_app_symlink",
            "location": 261,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_extract_zip": {
            "name": "test_extract_zip",
            "location": 267,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_validate_english_name": {
            "name": "test_validate_english_name",
            "location": 273,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_validate_broken_database": {
            "name": "test_validate_broken_database",
            "location": 280,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_validate_invalid_db_elements_database": {
            "name": "test_validate_invalid_db_elements_database",
            "location": 286,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_validate_invalid_table_elements_database": {
            "name": "test_validate_invalid_table_elements_database",
            "location": 292,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_validate_invalid_declaration_elements_database": {
            "name": "test_validate_invalid_declaration_elements_database",
            "location": 298,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_validate_name_before_decl_database": {
            "name": "test_validate_name_before_decl_database",
            "location": 304,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_validate_invalid_field_elements_database": {
            "name": "test_validate_invalid_field_elements_database",
            "location": 310,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_validate_invalid_index_elements_database": {
            "name": "test_validate_invalid_index_elements_database",
            "location": 316,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_validate_invalid_indexfield_elements_database": {
            "name": "test_validate_invalid_indexfield_elements_database",
            "location": 322,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_validate_news_database": {
            "name": "test_validate_news_database",
            "location": 328,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_validate_server_database": {
            "name": "test_validate_server_database",
            "location": 332,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_validate_english_summary": {
            "name": "test_validate_english_summary",
            "location": 336,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_validate_english_description": {
            "name": "test_validate_english_description",
            "location": 343,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_partial_translations": {
            "name": "test_partial_translations",
            "location": 350,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_partial_translations_not_all_present": {
            "name": "test_partial_translations_not_all_present",
            "location": 374,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_partial_translations_no_change": {
            "name": "test_partial_translations_no_change",
            "location": 394,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_partial_translations_no_change_not_all_present": {
            "name": "test_partial_translations_no_change_not_all_present",
            "location": 414,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_map_data": {
            "name": "test_map_data",
            "location": 430,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_parse_changelog_empty": {
            "name": "test_parse_changelog_empty",
            "location": 558,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_parse_changelog_not_found": {
            "name": "test_parse_changelog_not_found",
            "location": 562,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_parse_changelog": {
            "name": "test_parse_changelog",
            "location": 567,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_parse_changelog_brackets": {
            "name": "test_parse_changelog_brackets",
            "location": 573,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_parse_changelog_unstable": {
            "name": "test_parse_changelog_unstable",
            "location": 579,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest.test_parse_changelog_nightly": {
            "name": "test_parse_changelog_nightly",
            "location": 585,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ParserTest._get_contents": {
            "name": "_get_contents",
            "location": 591,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "ParserTest.get_path": {
            "name": "get_path",
            "location": 595,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "target": [
                    "float",
                    "str",
                    "int"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/api/v1/tests/test_release_importer.py": {
        "ImporterTest.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ImporterTest.test_import_minimal": {
            "name": "test_import_minimal",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ImporterTest.test_full": {
            "name": "test_full",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ImporterTest.test_release_update": {
            "name": "test_release_update",
            "location": 153,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ImporterTest.test_release_no_update": {
            "name": "test_release_no_update",
            "location": 163,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ImporterTest.test_release_no_update_prerelease": {
            "name": "test_release_no_update_prerelease",
            "location": 174,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ImporterTest.test_release_no_update_nighly": {
            "name": "test_release_no_update_nighly",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ImporterTest.test_release_create_prerelease": {
            "name": "test_release_create_prerelease",
            "location": 196,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ImporterTest.test_release_create_nighly": {
            "name": "test_release_create_nighly",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ImporterTest._assert_all_empty": {
            "name": "_assert_all_empty",
            "location": 216,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "list",
                    "dict",
                    "bool"
                ],
                "attribs": [
                    "Sequence[Tuple[Any, Any]]",
                    "List[Callable]"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/api/v1/tests/__init__.py": {},
    "appstore-master/nextcloudappstore/certificate/apps.py": {
        "CertificateConfig.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CertificateConfig.ready": {
            "name": "ready",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/certificate/validator.py": {
        "CertificateConfiguration.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "CertificateValidator.__init__": {
            "name": "__init__",
            "location": 36,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "CertificateValidator.validate_signature": {
            "name": "validate_signature",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "certificate": [
                    "str",
                    "int",
                    "Optional[Dict]",
                    "bool"
                ],
                "signature": [
                    "dict",
                    "int",
                    "bytes",
                    "bool",
                    "django.db.models.Model",
                    "Dict[str, object]",
                    "Dict[str, Any]",
                    "str"
                ],
                "data": [
                    "dict",
                    "int",
                    "bytes",
                    "bool",
                    "django.db.models.Model",
                    "Dict[str, object]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "CertificateValidator.validate_certificate": {
            "name": "validate_certificate",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "certificate": [
                    "int",
                    "Callable",
                    "str"
                ],
                "chain": [
                    "List[int]",
                    "str",
                    "bytes"
                ],
                "crl": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "CertificateValidator.get_cn": {
            "name": "get_cn",
            "location": 94,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "certificate": [
                    "str",
                    "bool"
                ]
            }
        },
        "CertificateValidator.validate_app_id": {
            "name": "validate_app_id",
            "location": 104,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "certificate": [
                    "str",
                    "Optional[str]"
                ],
                "app_id": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "CertificateValidator._to_cert": {
            "name": "_to_cert",
            "location": 118,
            "return": [
                "int",
                "List[List[int]]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "certificate": [
                    "float",
                    "dict",
                    "str",
                    "int"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/certificate/__init__.py": {},
    "appstore-master/nextcloudappstore/certificate/tests/test_validator.py": {
        "ValidatorTest.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidatorTest.test_get_cn": {
            "name": "test_get_cn",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidatorTest.test_validate_app_id": {
            "name": "test_validate_app_id",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidatorTest.test_validate_app_id_invalid": {
            "name": "test_validate_app_id_invalid",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidatorTest.test_validate_cert_signed": {
            "name": "test_validate_cert_signed",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidatorTest.test_validate_old_cert_signed": {
            "name": "test_validate_old_cert_signed",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidatorTest.test_validate_cert_not_signed": {
            "name": "test_validate_cert_not_signed",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidatorTest.test_signature": {
            "name": "test_signature",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidatorTest.test_app_id_signature": {
            "name": "test_app_id_signature",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidatorTest.test_bad_signature": {
            "name": "test_bad_signature",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidatorTest.test_validate_cert_signed_not_on_crl": {
            "name": "test_validate_cert_signed_not_on_crl",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidatorTest.test_validate_crl": {
            "name": "test_validate_crl",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidatorTest.test_validate_crl_revoked1": {
            "name": "test_validate_crl_revoked1",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidatorTest.test_validate_crl_revoked2": {
            "name": "test_validate_crl_revoked2",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ValidatorTest._read_cert": {
            "name": "_read_cert",
            "location": 90,
            "return": [
                "bool",
                "int",
                "float",
                "Iterable[int]",
                "List[List[int]]"
            ],
            "arguments": {
                "self": [],
                "file": [
                    "str",
                    "dict"
                ]
            }
        },
        "ValidatorTest._read_bin_file": {
            "name": "_read_bin_file",
            "location": 93,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "rel_path": [
                    "str",
                    "dict",
                    "bool",
                    "Optional[str]"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/certificate/tests/__init__.py": {},
    "appstore-master/nextcloudappstore/core/admin.py": {},
    "appstore-master/nextcloudappstore/core/apps.py": {},
    "appstore-master/nextcloudappstore/core/caching.py": {
        "create_etag": {
            "name": "create_etag",
            "location": 9,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "pairs": [
                    "float",
                    "Optional[Tuple[int, int]]",
                    "bool"
                ]
            }
        },
        "apps_etag": {
            "name": "apps_etag",
            "location": 21,
            "return": [
                "str",
                "zerver.models.Realm"
            ],
            "arguments": {
                "request": [
                    "str",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "bool",
                    "list"
                ],
                "version": [
                    "str",
                    "django.core.handlers.wsgi.WSGIRequest",
                    "bool",
                    "list"
                ]
            }
        },
        "apps_all_etag": {
            "name": "apps_all_etag",
            "location": 28,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "request": [
                    "django.db.models.Model",
                    "django.http.requesHttpRequest",
                    "dict"
                ]
            }
        },
        "app_etag": {
            "name": "app_etag",
            "location": 35,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "int",
                    "bool",
                    "Dict[str, Any]",
                    "List[str]"
                ],
                "id": [
                    "str",
                    "int",
                    "Optional[int]",
                    "dict"
                ]
            }
        },
        "app_rating_etag": {
            "name": "app_rating_etag",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "str",
                    "int",
                    "Dict[str, Any]",
                    "dict",
                    "bool"
                ],
                "id": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "categories_etag": {
            "name": "categories_etag",
            "location": 43,
            "return": [
                "str",
                "dict",
                "Optional[str]",
                "core.D.VersionedIdentifier"
            ],
            "arguments": {
                "request": [
                    "django.http.HttpRequest",
                    "Dict[str, str]",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "app_ratings_etag": {
            "name": "app_ratings_etag",
            "location": 47,
            "return": [
                "str"
            ],
            "arguments": {
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "django.http.HttpRequest",
                    "django.db.models.Model",
                    "django.http.requesHttpRequest"
                ]
            }
        },
        "nextcloud_release_etag": {
            "name": "nextcloud_release_etag",
            "location": 51,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "request": []
            }
        }
    },
    "appstore-master/nextcloudappstore/core/facades.py": {
        "resolve_file_relative_path": {
            "name": "resolve_file_relative_path",
            "location": 10,
            "return": [
                "str"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ],
                "target_path": [
                    "str",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "read_file_contents": {
            "name": "read_file_contents",
            "location": 22,
            "return": [
                "str",
                "bool",
                "dict",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ]
            }
        },
        "read_relative_file": {
            "name": "read_relative_file",
            "location": 33,
            "return": [
                "str",
                "Tuple[str]",
                "Set[str]"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ],
                "target_path": [
                    "str"
                ]
            }
        },
        "write_relative_file": {
            "name": "write_relative_file",
            "location": 45,
            "return": [
                "None"
            ],
            "arguments": {
                "file_path": [
                    "str"
                ],
                "target_path": [
                    "str"
                ],
                "content": [
                    "str",
                    "bytes"
                ]
            }
        },
        "flatmap": {
            "name": "flatmap",
            "location": 64,
            "return": [
                "str",
                "Tuple[str, str]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "f": [
                    "Iterable[T]",
                    "T",
                    "callable"
                ],
                "xs": [
                    "Iterable[T]",
                    "T",
                    "callable"
                ]
            }
        },
        "any_match": {
            "name": "any_match",
            "location": 68,
            "return": [
                "bool"
            ],
            "arguments": {
                "predicate": [
                    "Callable[[T], bool]",
                    "Iterable[T]"
                ],
                "iterable": [
                    "str",
                    "Optional[str]",
                    "Iterable[T]"
                ]
            }
        },
        "distinct": {
            "name": "distinct",
            "location": 81,
            "return": [
                "typing.Iterable[T]"
            ],
            "arguments": {
                "iterable": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "criteria": [
                    "Iterable[T]",
                    "str",
                    "bool",
                    "int"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/core/feeds.py": {
        "AppReleaseRssFeed.__call__": {
            "name": "__call__",
            "location": 19,
            "return": [
                "T",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "AppReleaseRssFeed.items": {
            "name": "items",
            "location": 23,
            "return": [
                "T",
                "Optional[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppReleaseRssFeed.item_title": {
            "name": "item_title",
            "location": 33,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]",
                "Sequence[utils.types.A]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Union[Dict, Tuple]",
                    "dict"
                ]
            }
        },
        "AppReleaseRssFeed.item_description": {
            "name": "item_description",
            "location": 36,
            "return": [
                "Mapping[str, Any]",
                "int",
                "supersemodels.core.Database",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "List[piccolo.conf.apps.PiccoloAppModule]",
                    "nornir.core.task.AggregatedResult",
                    "int",
                    "dict"
                ]
            }
        },
        "AppReleaseRssFeed.item_guid": {
            "name": "item_guid",
            "location": 50,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "bool",
                    "str",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "AppReleaseRssFeed.item_link": {
            "name": "item_link",
            "location": 57,
            "return": [
                "bool",
                "str",
                "Optional[Callable[[str], bool]]",
                "List[src.core.model.scripScript]"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "dict",
                    "Callable",
                    "static_frame.core.frame.Frame"
                ]
            }
        },
        "AppReleaseRssFeed.item_author_name": {
            "name": "item_author_name",
            "location": 60,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "List[List[str]]",
                    "abilian.services.security.models.Permission"
                ]
            }
        },
        "AppReleaseRssFeed.item_pubdate": {
            "name": "item_pubdate",
            "location": 63,
            "return": [
                "Tuple[int, int]",
                "qutebrowser.utils.usertypes.Backend",
                "str",
                "models.User"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        },
        "AppReleaseRssFeed.item_updateddate": {
            "name": "item_updateddate",
            "location": 66,
            "return": [
                "Tuple[int, int]",
                "qutebrowser.utils.usertypes.Backend",
                "str",
                "models.User"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/core/forms.py": {
        "get_languages_local": {
            "name": "get_languages_local",
            "location": 57,
            "return": [
                "str",
                "int",
                "Optional[cmk.utils.type_defs.SectionName]"
            ],
            "arguments": {
                "language": [
                    "str",
                    "bool"
                ]
            }
        },
        "AppRatingForm.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AppRatingForm.save": {
            "name": "save",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/core/github.py": {
        "sync_releases": {
            "name": "sync_releases",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "versions": [
                    "str",
                    "bool",
                    "int"
                ]
            }
        },
        "get_old_releases": {
            "name": "get_old_releases",
            "location": 58,
            "return": [
                "List[str]",
                "str",
                "list",
                "List[int]"
            ],
            "arguments": {
                "current": [
                    "str",
                    "float",
                    "db.models.Article",
                    "bool",
                    "List[db.models.Name]"
                ],
                "imported": [
                    "str",
                    "float",
                    "db.models.Article",
                    "bool",
                    "List[db.models.Name]"
                ]
            }
        },
        "get_supported_releases": {
            "name": "get_supported_releases",
            "location": 65,
            "return": [
                "bool"
            ],
            "arguments": {
                "client": [
                    "asgard.models.accounAccount",
                    "asgard.models.user.User",
                    "str"
                ],
                "oldest_supported": [
                    "str",
                    "Callable[..., None]"
                ]
            }
        },
        "get_stable_releases": {
            "name": "get_stable_releases",
            "location": 71,
            "return": [
                "str",
                "Set[str]",
                "Pattern",
                "List[str]",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "client": [
                    "Callable[[Dict], None]",
                    "str"
                ]
            }
        },
        "is_supported": {
            "name": "is_supported",
            "location": 79,
            "return": [
                "int",
                "\"Namespace\"",
                "Callable[..., None]",
                "Callable[[KT], VT]",
                "str"
            ],
            "arguments": {
                "oldest_supported": [
                    "str",
                    "float",
                    "Optional[int]"
                ],
                "version": [
                    "str",
                    "float",
                    "Optional[int]"
                ]
            }
        },
        "is_stable": {
            "name": "is_stable",
            "location": 83,
            "return": [
                "bool",
                "Optional[bool]",
                "int",
                "str",
                "Optional[int]",
                "Optional[str]"
            ],
            "arguments": {
                "release": [
                    "str",
                    "int"
                ]
            }
        },
        "GitHubClient.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_url": [
                    "str",
                    "dict",
                    "Dict[str, List[bytes]]"
                ],
                "api_token": [
                    "bool",
                    "purplship.core.utils.xml.Element",
                    "dict",
                    "Optional[str]",
                    "bytes",
                    "str"
                ]
            }
        },
        "GitHubClient.get_tags": {
            "name": "get_tags",
            "location": 18,
            "return": [
                "int",
                "dict",
                "Dict[str, str]",
                "Dict[str, Union[str, int]]",
                "Optional[Dict[str, Any]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "Tuple[int, int]",
                    "int",
                    "float"
                ],
                "size": [
                    "Tuple[int, int]",
                    "int",
                    "float"
                ]
            }
        },
        "TagPages.__init__": {
            "name": "__init__",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "client": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ],
                "size": [
                    "str",
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "TagPages.__iter__": {
            "name": "__iter__",
            "location": 104,
            "return": [
                "int",
                "Iterable[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TagPages.__next__": {
            "name": "__next__",
            "location": 107,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/core/models.py": {
        "record_app_delete": {
            "name": "record_app_delete",
            "location": 585,
            "return": [
                ""
            ],
            "arguments": {
                "sender": [
                    "str",
                    "int",
                    "bytes",
                    "IO[str]",
                    "list"
                ]
            }
        },
        "record_app_release_delete": {
            "name": "record_app_release_delete",
            "location": 590,
            "return": [
                ""
            ],
            "arguments": {
                "sender": [
                    "str",
                    "bool"
                ]
            }
        },
        "AppManager.search": {
            "name": "search",
            "location": 28,
            "return": [
                "bool",
                "str",
                "recidiviz.utils.regions.Region",
                "dep_check.models.Rules",
                "Union[int, float, complex]"
            ],
            "arguments": {
                "self": [],
                "terms": [
                    "float",
                    "int",
                    "Tuple[str, str]",
                    "bool",
                    "str",
                    "fonduer.candidates.models.temporary_contexTemporaryContext"
                ],
                "lang": [
                    "List[Tuple[str, int]]",
                    "Optional[int]"
                ]
            }
        },
        "AppManager.get_compatible": {
            "name": "get_compatible",
            "location": 38,
            "return": [
                "List[str]",
                "str",
                "List[Dict]"
            ],
            "arguments": {
                "self": [],
                "platform_version": [
                    "str",
                    "Version",
                    "bool",
                    "Iterable[str]"
                ],
                "inclusive": [
                    "str",
                    "Version",
                    "bool",
                    "Iterable[str]"
                ],
                "prefetch": [
                    "str",
                    "Version",
                    "bool",
                    "Iterable[str]"
                ],
                "select": [
                    "str",
                    "Version",
                    "bool",
                    "Iterable[str]"
                ]
            }
        },
        "App.__str__": {
            "name": "__str__",
            "location": 117,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.can_update": {
            "name": "can_update",
            "location": 120,
            "return": [
                "bool",
                "models.User"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "int",
                    "cinemanio.core.models.Role",
                    "bool",
                    "str"
                ]
            }
        },
        "App.can_delete": {
            "name": "can_delete",
            "location": 123,
            "return": [
                "Union[str, IO]",
                "str",
                "Optional[str]",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "Union[None, str]",
                    "Dict[str, Any]",
                    "Callable[[], Any]"
                ]
            }
        },
        "App.discussion_url": {
            "name": "discussion_url",
            "location": 127,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "App._get_grouped_releases": {
            "name": "_get_grouped_releases",
            "location": 134,
            "return": [
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "get_release_func": [
                    "int",
                    "str",
                    "List[int]",
                    "bool",
                    "Pattern[str]",
                    "Optional[int]",
                    "Optional[str]"
                ]
            }
        },
        "App.releases_by_platform_v": {
            "name": "releases_by_platform_v",
            "location": 145,
            "return": [
                "str",
                "int",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.unstable_releases_by_platform_v": {
            "name": "unstable_releases_by_platform_v",
            "location": 159,
            "return": [
                "str",
                "int",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]",
                "Type[BaseException]"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.latest_releases_by_platform_v": {
            "name": "latest_releases_by_platform_v",
            "location": 172,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "int",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "App.compatible_releases": {
            "name": "compatible_releases",
            "location": 208,
            "return": [
                "bool",
                "Optional[int]",
                "Optional[bool]",
                "float"
            ],
            "arguments": {
                "self": [],
                "platform_version": [
                    "dict",
                    "Dict[str, List]",
                    "str"
                ],
                "inclusive": [
                    "dict",
                    "Dict[str, List]",
                    "str"
                ]
            }
        },
        "App.compatible_unstable_releases": {
            "name": "compatible_unstable_releases",
            "location": 225,
            "return": [
                "bool",
                "Optional[int]",
                "Optional[bool]",
                "float"
            ],
            "arguments": {
                "self": [],
                "platform_version": [
                    "dict",
                    "Dict[str, List]",
                    "str"
                ],
                "inclusive": [
                    "dict",
                    "Dict[str, List]",
                    "str"
                ]
            }
        },
        "App._latest": {
            "name": "_latest",
            "location": 242,
            "return": [
                "str",
                "Dict[str, Any]",
                "List[List[int]]",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "releases": [
                    "Iterable[zam_repondeur.models.Amendement]",
                    "list",
                    "List[Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "App.save": {
            "name": "save",
            "location": 250,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AppRating.__str__": {
            "name": "__str__",
            "location": 287,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppRating.save": {
            "name": "save",
            "location": 290,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AppRating._compute_app_rating": {
            "name": "_compute_app_rating",
            "location": 304,
            "return": [
                "str",
                "bool",
                "List[str]",
                "list"
            ],
            "arguments": {
                "self": [],
                "days": [
                    "int",
                    "Optional[int]"
                ],
                "threshold": [
                    "int",
                    "Sequence[str]",
                    "List[Type]",
                    "T"
                ]
            }
        },
        "AppAuthor.__str__": {
            "name": "__str__",
            "location": 330,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppRelease.can_update": {
            "name": "can_update",
            "location": 393,
            "return": [
                "int",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "users.models.JustfixUser",
                    "asgard.models.job.ScheduledJob",
                    "asgard.models.user.User",
                    "asgard.models.accounAccount",
                    "set"
                ]
            }
        },
        "AppRelease.can_delete": {
            "name": "can_delete",
            "location": 396,
            "return": [
                "cmk.utils.type_defs.UserId",
                "User",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "flask_appbuilder.security.sqla.models.User",
                    "models.User",
                    "bob_emploi.frontend.api.user_pb2.User",
                    "tracim.models.auth.User",
                    "zerver.models.UserProfile",
                    "users.models.JustfixUser",
                    "user.transfer.models.User",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "AppRelease.__str__": {
            "name": "__str__",
            "location": 399,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppRelease.is_compatible": {
            "name": "is_compatible",
            "location": 402,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "platform_version": [
                    "Tuple[int, int]",
                    "List[str]",
                    "int"
                ],
                "inclusive": [
                    "Tuple[str]",
                    "dep_check.models.ModuleWildcard",
                    "int",
                    "Collection[str]",
                    "Literal",
                    "str"
                ]
            }
        },
        "AppRelease.is_unstable": {
            "name": "is_unstable",
            "location": 421,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Screenshot.front_img_small": {
            "name": "front_img_small",
            "location": 439,
            "return": [
                "str",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": []
            }
        },
        "Screenshot.__str__": {
            "name": "__str__",
            "location": 445,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ShellCommand.__str__": {
            "name": "__str__",
            "location": 460,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Category.__str__": {
            "name": "__str__",
            "location": 487,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "License.__str__": {
            "name": "__str__",
            "location": 505,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.__str__": {
            "name": "__str__",
            "location": 522,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseDependency.__str__": {
            "name": "__str__",
            "location": 543,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhpExtension.__str__": {
            "name": "__str__",
            "location": 557,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "PhpExtensionDependency.__str__": {
            "name": "__str__",
            "location": 579,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppReleaseDeleteLog.__str__": {
            "name": "__str__",
            "location": 604,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "NextcloudReleaseManager.get_current": {
            "name": "get_current",
            "location": 609,
            "return": [
                "bool",
                "Union[str, Pattern]",
                "Optional[Dict[str, Any]]",
                "List[zerver.models.UserProfile]",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "NextcloudRelease.get_current_main": {
            "name": "get_current_main",
            "location": 644,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {}
        },
        "NextcloudRelease.__str__": {
            "name": "__str__",
            "location": 651,
            "return": [
                "str",
                "Optional[int]",
                "Optional[Dict]",
                "Callable[[], bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppManager.get_compatible.app_filter": {
            "name": "app_filter",
            "location": 46,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "app": [
                    "dict"
                ]
            }
        },
        "App.latest_releases_by_platform_v.filter_latest": {
            "name": "filter_latest",
            "location": 192,
            "return": [
                "str",
                "Union[str, int]"
            ],
            "arguments": {
                "pair": [
                    "float",
                    "Callable[[None], bool]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "App.latest_releases_by_platform_v.stable_or_unstable_releases": {
            "name": "stable_or_unstable_releases",
            "location": 200,
            "return": [
                "tensorflow.keras.Model",
                "bool",
                "zerver.models.Realm",
                "str"
            ],
            "arguments": {
                "ver": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, Dict[str, str]]",
                    "Mapping[str, Mapping[str, panda3d.core.LPoint3f]]"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/core/permissions.py": {
        "UpdateDeletePermission.has_update_obj_permission": {
            "name": "has_update_obj_permission",
            "location": 15,
            "return": [
                "str",
                "Iterable[str]",
                "float",
                "IO[str]"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ],
                "obj": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "UpdateDeletePermission.has_delete_obj_permission": {
            "name": "has_delete_obj_permission",
            "location": 18,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str"
                ],
                "obj": [
                    "str"
                ]
            }
        },
        "UpdateDeletePermission.has_object_permission": {
            "name": "has_object_permission",
            "location": 21,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "rest_framework.requesRequest"
                ],
                "view": [
                    "dict"
                ],
                "obj": [
                    "rest_framework.requesRequest",
                    "str"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/core/rating.py": {
        "compute_rating": {
            "name": "compute_rating",
            "location": 6,
            "return": [
                "int",
                "str",
                "List[int]",
                "float",
                "bytes"
            ],
            "arguments": {
                "ratings": [
                    "int",
                    "List[int]"
                ],
                "threshold": [
                    "int",
                    "Optional[int]",
                    "float"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/core/serializers.py": {
        "AppRatingSerializer.get_relative_rated_at": {
            "name": "get_relative_rated_at",
            "location": 20,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/core/throttling.py": {
        "PostThrottle.allow_request": {
            "name": "allow_request",
            "location": 5,
            "return": [
                "bool",
                "str",
                "Dict[str, str]",
                "Dict[str, Any]",
                "dict",
                "Dict[str, int]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str, Any]",
                    "Optional[Dict[str, Any]]"
                ],
                "view": [
                    "Union[dict, list]",
                    "str",
                    "rest_framework.requesRequest",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/core/validators.py": {
        "HttpsUrlValidator.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/core/versioning.py": {
        "raw_version": {
            "name": "raw_version",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "version": [
                    "str",
                    "int"
                ]
            }
        },
        "pad_max_version": {
            "name": "pad_max_version",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "version": [
                    "str"
                ]
            }
        },
        "pad_max_inc_version": {
            "name": "pad_max_inc_version",
            "location": 75,
            "return": [
                "str",
                "bool",
                "Optional[int]",
                "Union[List[str], str]",
                "Optional[str]"
            ],
            "arguments": {
                "version": [
                    "int",
                    "str",
                    "Sequence[int]"
                ]
            }
        },
        "pad_min_version": {
            "name": "pad_min_version",
            "location": 91,
            "return": [
                "str"
            ],
            "arguments": {
                "version": [
                    "str",
                    "int",
                    "List[str]",
                    "Sequence[Dict[str, str]]"
                ]
            }
        },
        "to_raw_spec": {
            "name": "to_raw_spec",
            "location": 99,
            "return": [
                "str"
            ],
            "arguments": {
                "min_version": [
                    "int",
                    "Tuple[int]",
                    "float",
                    "List[float]",
                    "List[str]"
                ],
                "max_version": [
                    "int",
                    "Tuple[int]",
                    "float",
                    "List[float]",
                    "List[str]"
                ]
            }
        },
        "to_spec": {
            "name": "to_spec",
            "location": 116,
            "return": [
                "str"
            ],
            "arguments": {
                "min_version": [
                    "int",
                    "Tuple[int]",
                    "float",
                    "List[float]",
                    "List[str]"
                ],
                "max_version": [
                    "int",
                    "Tuple[int]",
                    "float",
                    "List[float]",
                    "List[str]"
                ]
            }
        },
        "group_by_main_version": {
            "name": "group_by_main_version",
            "location": 137,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "versions": [
                    "Mapping[str, Dict[str, Any]]",
                    "dict",
                    "Mapping[str, Any]",
                    "Dict[str, str]",
                    "Optional[Dict[str, str]]",
                    "Iterable[str]"
                ]
            }
        },
        "version_in_spec": {
            "name": "version_in_spec",
            "location": 154,
            "return": [
                "bool",
                "Spec",
                "\"ImmutableSet[T]\""
            ],
            "arguments": {
                "version": [
                    "str",
                    "Set[str]",
                    "int"
                ],
                "spec": [
                    "str",
                    "Set[str]",
                    "int"
                ]
            }
        },
        "AppSemVer.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "bool",
                    "Union[float, Tuple[float, float]]",
                    "List['cirq.Circuit']",
                    "List[str]",
                    "int",
                    "str"
                ],
                "is_nightly": [
                    "bool",
                    "Union[float, Tuple[float, float]]",
                    "List['cirq.Circuit']",
                    "List[str]",
                    "int",
                    "str"
                ],
                "released_at": [
                    "bool",
                    "Union[float, Tuple[float, float]]",
                    "List['cirq.Circuit']",
                    "List[str]",
                    "int",
                    "str"
                ]
            }
        },
        "AppSemVer.__lt__": {
            "name": "__lt__",
            "location": 26,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "group_by_main_version.reduction": {
            "name": "reduction",
            "location": 145,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "prev": [
                    "str",
                    "dict",
                    "Dict[str, Any]"
                ],
                "item": [
                    "dict",
                    "Sequence[Any]",
                    "Callable",
                    "Dict[str, Any]",
                    "Type[object]"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/core/views.py": {
        "app_description": {
            "name": "app_description",
            "location": 29,
            "return": [
                "dict",
                "zerver.models.UserProfile",
                "zerver.models.Stream",
                "Dict[str, Any]",
                "str",
                "models.User"
            ],
            "arguments": {
                "request": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "id": [
                    "int",
                    "str"
                ]
            }
        },
        "AppRatingApi.get_queryset": {
            "name": "get_queryset",
            "location": 37,
            "return": [
                "bool",
                "str",
                "cmk.utils.type_defs.UserId",
                "models.User",
                "arxiv.users.domain.User"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppDetailView.post": {
            "name": "post",
            "location": 61,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "zerver.models.UserProfile",
                    "django.http.HttpRequest",
                    "grouper.models.permission_requesPermissionRequest"
                ],
                "id": [
                    "int",
                    "storage.istorage.IStorage[storage.user.User]",
                    "django.http.HttpRequest",
                    "zerver.models.UserProfile"
                ]
            }
        },
        "AppDetailView.get_context_data": {
            "name": "get_context_data",
            "location": 68,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppReleasesView.get_context_data": {
            "name": "get_context_data",
            "location": 143,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppReleasesView._sort_by_platform_v": {
            "name": "_sort_by_platform_v",
            "location": 158,
            "return": [
                "int",
                "str",
                "float"
            ],
            "arguments": {
                "self": [],
                "releases_by_platform": [
                    "int",
                    "float",
                    "List[str]"
                ],
                "reverse": [
                    "int",
                    "float",
                    "List[str]"
                ]
            }
        },
        "CategoryAppListView.get_queryset": {
            "name": "get_queryset",
            "location": 176,
            "return": [
                "Optional[int]",
                "bool",
                "str",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "dict",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoryAppListView.get_context_data": {
            "name": "get_context_data",
            "location": 214,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoryAppListView.url_params": {
            "name": "url_params",
            "location": 230,
            "return": [
                "str",
                "Dict[str, bool]",
                "Mapping[str, Any]",
                "Dict[str, Any]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoryAppListView._url_params_str": {
            "name": "_url_params_str",
            "location": 257,
            "return": [
                "dict",
                "Dict[str, str]",
                "str",
                "raiden.utils.Dict[str, raiden.utils.Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoryAppListView._join_url_params_strs": {
            "name": "_join_url_params_strs",
            "location": 263,
            "return": [
                "int",
                "str",
                "zerver.models.Realm",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "self": []
            }
        },
        "CategoryAppListView.search_terms": {
            "name": "search_terms",
            "location": 267,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "contests.models.User",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppUploadView.get_context_data": {
            "name": "get_context_data",
            "location": 274,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppRegisterView.get_context_data": {
            "name": "get_context_data",
            "location": 283,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/core/__init__.py": {},
    "appstore-master/nextcloudappstore/core/management/__init__.py": {},
    "appstore-master/nextcloudappstore/core/management/commands/createdbtranslations.py": {
        "escape_tpl_string": {
            "name": "escape_tpl_string",
            "location": 10,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "string": [
                    "str",
                    "int"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._create_translations": {
            "name": "_create_translations",
            "location": 36,
            "return": [
                "List[str]",
                "str",
                "List[Dict]",
                "Union[str, List[Any]]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "model": [
                    "str",
                    "Dict[str, Any]",
                    "Type",
                    "bool",
                    "flask_appbuilder.models.sqla.Model",
                    "pringles.models.Model"
                ],
                "fields": [
                    "str",
                    "Container[str]"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/core/management/commands/importdbtranslations.py": {
        "Command.handle": {
            "name": "handle",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Command._import_translations": {
            "name": "_import_translations",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "model": [
                    "int",
                    "str",
                    "bool",
                    "FrozenSet[int]",
                    "Type[django.db.models.base.Model]"
                ],
                "fields": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "Tuple[type]",
                    "tonga.models.structs.store_record_type.StoreRecordType"
                ],
                "language_code": [
                    "int",
                    "Union[int, str]",
                    "bool"
                ]
            }
        },
        "Command._get_en": {
            "name": "_get_en",
            "location": 48,
            "return": [
                "dict",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "int",
                    "bool",
                    "str",
                    "List[int]",
                    "models.transaction.TXContext"
                ],
                "field": [
                    "int",
                    "bool",
                    "str",
                    "List[int]",
                    "models.transaction.TXContext"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/core/management/commands/syncnextcloudreleases.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/core/management/commands/__init__.py": {},
    "appstore-master/nextcloudappstore/core/management/commands/tests/test_syncnextcloudreleases.py": {
        "SyncNextcloudReleasesTest.test_sync": {
            "name": "test_sync",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "get_tags": [
                    "datasets.github.scrape_repos.contentfiles.ContentFiles",
                    "bool",
                    "Iterable[Sequence[str]]"
                ]
            }
        },
        "SyncNextcloudReleasesTest.test_sync_print": {
            "name": "test_sync_print",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "get_tags": [
                    "datasets.github.scrape_repos.contentfiles.ContentFiles",
                    "bool",
                    "Iterable[Sequence[str]]"
                ]
            }
        },
        "SyncNextcloudReleasesTest._get_tags": {
            "name": "_get_tags",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "bytes",
                    "dict",
                    "int",
                    "Union[bytearray, bytes]"
                ],
                "size": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "SyncNextcloudReleasesTest._read": {
            "name": "_read",
            "location": 57,
            "return": [
                "Optional[Exception]",
                "bool",
                "Optional[str]",
                "float"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/core/management/commands/tests/test_translations.py": {
        "TranslationsCommandTest.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TranslationsCommandTest.test_export_translations": {
            "name": "test_export_translations",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TranslationsCommandTest.test_import_translations": {
            "name": "test_import_translations",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TranslationsCommandTest.read_translations": {
            "name": "read_translations",
            "location": 34,
            "return": [
                "str",
                "Tuple[str, str]",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "TranslationsCommandTest.tearDown": {
            "name": "tearDown",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/core/management/commands/tests/__init__.py": {},
    "appstore-master/nextcloudappstore/core/migrations/0001_initial.py": {},
    "appstore-master/nextcloudappstore/core/migrations/0002_auto_20160913_1909.py": {},
    "appstore-master/nextcloudappstore/core/migrations/0003_appreleasedeletelog.py": {},
    "appstore-master/nextcloudappstore/core/migrations/0004_appownershiptransfer.py": {},
    "appstore-master/nextcloudappstore/core/migrations/0005_app_ocsid.py": {},
    "appstore-master/nextcloudappstore/core/migrations/0006_apprelease_changelog.py": {},
    "appstore-master/nextcloudappstore/core/migrations/0007_auto_20161005_1424.py": {},
    "appstore-master/nextcloudappstore/core/migrations/0008_migrate_changelogs.py": {
        "create_default_changelogs": {
            "name": "create_default_changelogs",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "apps": [
                    "str",
                    "List[int]",
                    "fonduer.candidates.models.SpanMention",
                    "salon.models.Stylist",
                    "int"
                ],
                "schema_editor": [
                    "django.contrib.gis.db.backends.postgis.schema.PostGISSchemaEditor",
                    "Dict[str, int]",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/core/migrations/0009_auto_20161005_2014.py": {},
    "appstore-master/nextcloudappstore/core/migrations/0010_auto_20161013_1635.py": {},
    "appstore-master/nextcloudappstore/core/migrations/0011_apprelease_is_nightly.py": {
        "migrate_nightlies": {
            "name": "migrate_nightlies",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "apps": [
                    "django.db.migrations.state.StateApps",
                    "TextIO",
                    "gardnr.models.Grow",
                    "List[List[int]]"
                ],
                "schema_editor": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/core/migrations/0012_auto_20161015_1451.py": {},
    "appstore-master/nextcloudappstore/core/migrations/0013_auto_20161104_1752.py": {},
    "appstore-master/nextcloudappstore/core/migrations/0014_nextcloudrelease.py": {},
    "appstore-master/nextcloudappstore/core/migrations/0015_auto_20161128_1902.py": {},
    "appstore-master/nextcloudappstore/core/migrations/0016_auto_20170325_2009.py": {},
    "appstore-master/nextcloudappstore/core/migrations/0017_auto_20170610_1311.py": {},
    "appstore-master/nextcloudappstore/core/migrations/0018_apprelease_signature_digest.py": {},
    "appstore-master/nextcloudappstore/core/migrations/0019_auto_20170811_0649.py": {},
    "appstore-master/nextcloudappstore/core/migrations/0020_nextcloudrelease_has_release.py": {},
    "appstore-master/nextcloudappstore/core/migrations/0021_nextcloudrelease_is_supported.py": {},
    "appstore-master/nextcloudappstore/core/migrations/0022_auto_20200328_1055.py": {},
    "appstore-master/nextcloudappstore/core/migrations/0023_app_approved.py": {},
    "appstore-master/nextcloudappstore/core/migrations/__init__.py": {},
    "appstore-master/nextcloudappstore/core/templatetags/app_rating.py": {
        "app_rating": {
            "name": "app_rating",
            "location": 16,
            "return": [
                "int",
                "django.contrib.auth.models.User",
                "str",
                "bool"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Type[Any]",
                    "Union[int, float]",
                    "float"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/core/templatetags/app_rating_class.py": {
        "app_rating_class": {
            "name": "app_rating_class",
            "location": 16,
            "return": [
                "str",
                "Dict[str, Any]",
                "Callable[..., T]",
                "Type[T]",
                "Container[str]",
                "int"
            ],
            "arguments": {
                "value": [
                    "bytes",
                    "str",
                    "float",
                    "Type[Any]",
                    "Iterable[str]",
                    "Iterable[Any]"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/core/templatetags/compatible_releases.py": {
        "compatible_releases": {
            "name": "compatible_releases",
            "location": 9,
            "return": [],
            "arguments": {
                "app": [
                    "str",
                    "bocadillo.App",
                    "float"
                ],
                "version": [
                    "str",
                    "bocadillo.App",
                    "float"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/core/templatetags/css_class.py": {
        "css_class": {
            "name": "css_class",
            "location": 7,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Callable",
                    "List[Union[str, Any]]"
                ],
                "arg": [
                    "str",
                    "Callable",
                    "List[Union[str, Any]]"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/core/templatetags/field_type.py": {
        "field_type": {
            "name": "field_type",
            "location": 7,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "field": [
                    "int",
                    "django.db.models.fields.Field"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/core/templatetags/first_word.py": {
        "first_word": {
            "name": "first_word",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sentence": [
                    "str"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/core/templatetags/markdown.py": {
        "markdown": {
            "name": "markdown",
            "location": 11,
            "return": [
                "tuple"
            ],
            "arguments": {
                "sentence": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/core/templatetags/sort_by_version.py": {
        "sort_by_version": {
            "name": "sort_by_version",
            "location": 9,
            "return": [
                "List[str]",
                "list",
                "Set[str]",
                "int",
                "str"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[Callable]"
                ],
                "arg": [
                    "str",
                    "List[int]",
                    "Optional[\"Scope\"]"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/core/templatetags/version_spec.py": {
        "version_spec": {
            "name": "version_spec",
            "location": 7,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/core/templatetags/__init__.py": {},
    "appstore-master/nextcloudappstore/core/templatetags/tests/test_tags.py": {
        "TemplateTagsTestCase.test_version_spec": {
            "name": "test_version_spec",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemplateTagsTestCase.test_markdown": {
            "name": "test_markdown",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemplateTagsTestCase.test_first_word": {
            "name": "test_first_word",
            "location": 18,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TemplateTagsTestCase.test_rating_class": {
            "name": "test_rating_class",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/core/templatetags/tests/__init__.py": {},
    "appstore-master/nextcloudappstore/core/tests/test_caching.py": {
        "CachingTest.test_cache_nextcloud_release_etag_empty": {
            "name": "test_cache_nextcloud_release_etag_empty",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CachingTest.test_cache_nextcloud_release_etag": {
            "name": "test_cache_nextcloud_release_etag",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CachingTest.test_categories_etag": {
            "name": "test_categories_etag",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CachingTest.test_app_ratings_etag": {
            "name": "test_app_ratings_etag",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/core/tests/test_cert_delete_releases.py": {
        "CertDeleteReleasesTest.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CertDeleteReleasesTest.test_cert_has_changed": {
            "name": "test_cert_has_changed",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CertDeleteReleasesTest.test_ignore_carriage_return": {
            "name": "test_ignore_carriage_return",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CertDeleteReleasesTest.test_ignore_start_end_spaces": {
            "name": "test_ignore_start_end_spaces",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/core/tests/test_compatibility.py": {
        "CompatibilityTest.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CompatibilityTest.tearDown": {
            "name": "tearDown",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CompatibilityTest.test_compatible_apps_deduplication": {
            "name": "test_compatible_apps_deduplication",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CompatibilityTest.test_compatible_apps": {
            "name": "test_compatible_apps",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CompatibilityTest.test_compatible_releases": {
            "name": "test_compatible_releases",
            "location": 55,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CompatibilityTest.test_compatible_unstable_releases": {
            "name": "test_compatible_unstable_releases",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CompatibilityTest.test_compatible_releases_by_platform_v": {
            "name": "test_compatible_releases_by_platform_v",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CompatibilityTest.test_correct_comparison": {
            "name": "test_correct_comparison",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CompatibilityTest._create_nextcloud_versions": {
            "name": "_create_nextcloud_versions",
            "location": 102,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CompatibilityTest._create_example_releases": {
            "name": "_create_example_releases",
            "location": 106,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/core/tests/test_deletion_log.py": {
        "DeletionLogTest.test_delete_app": {
            "name": "test_delete_app",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DeletionLogTest.test_delete_owner": {
            "name": "test_delete_owner",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DeletionLogTest.test_delete_app_release": {
            "name": "test_delete_app_release",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/core/tests/test_github.py": {
        "GitHubTest.test_parse_tags": {
            "name": "test_parse_tags",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHubTest.test_import_releases": {
            "name": "test_import_releases",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "GitHubTest.get_rel": {
            "name": "get_rel",
            "location": 69,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str",
                    "Optional[str]",
                    "Dict[str, int]"
                ]
            }
        },
        "GitHubTest._create_release": {
            "name": "_create_release",
            "location": 72,
            "return": [
                "Optional[int]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "bool",
                    "str",
                    "Set[str]",
                    "Optional[List[str]]",
                    "Optional[str]"
                ],
                "is_current": [
                    "bool",
                    "str",
                    "Set[str]",
                    "Optional[List[str]]",
                    "Optional[str]"
                ],
                "has_release": [
                    "bool",
                    "str",
                    "Set[str]",
                    "Optional[List[str]]",
                    "Optional[str]"
                ],
                "is_supported": [
                    "bool",
                    "str",
                    "Set[str]",
                    "Optional[List[str]]",
                    "Optional[str]"
                ]
            }
        },
        "GitHubTest._get_tags": {
            "name": "_get_tags",
            "location": 80,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "page": [
                    "bytes",
                    "dict",
                    "int",
                    "Union[bytearray, bytes]"
                ],
                "size": [
                    "int",
                    "float",
                    "bool"
                ]
            }
        },
        "GitHubTest._read": {
            "name": "_read",
            "location": 83,
            "return": [
                "str",
                "Optional[zerver.models.Realm]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/core/tests/test_rating.py": {
        "RatingTest.test_below_threshold_rating": {
            "name": "test_below_threshold_rating",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RatingTest.test_simple_rating": {
            "name": "test_simple_rating",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RatingTest.test_no_ratings": {
            "name": "test_no_ratings",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RatingTest.test_full_rating": {
            "name": "test_full_rating",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RatingTest.test_app_rating_save": {
            "name": "test_app_rating_save",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "RatingTest.create_user": {
            "name": "create_user",
            "location": 59,
            "return": [
                "str",
                "zerver.models.Realm",
                "bool",
                "models.User",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "int",
                    "Iterable[str]",
                    "Union[int, str]"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/core/tests/test_search.py": {
        "AppSearchTest.setUp": {
            "name": "setUp",
            "location": 7,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppSearchTest.tearDown": {
            "name": "tearDown",
            "location": 52,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppSearchTest.test_basic_search": {
            "name": "test_basic_search",
            "location": 59,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppSearchTest.test_fallback": {
            "name": "test_fallback",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppSearchTest.test_reverse_fallback": {
            "name": "test_reverse_fallback",
            "location": 83,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppSearchTest.test_same_word": {
            "name": "test_same_word",
            "location": 96,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppSearchTest.test_find_all": {
            "name": "test_find_all",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppSearchTest.test_multilang_terms": {
            "name": "test_multilang_terms",
            "location": 112,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppSearchTest.test_narrow_search": {
            "name": "test_narrow_search",
            "location": 118,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AppSearchTest.test_no_search_terms": {
            "name": "test_no_search_terms",
            "location": 124,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/core/tests/test_versioning.py": {
        "VersioningTest.test_pad_maximum": {
            "name": "test_pad_maximum",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VersioningTest.test_pad_minimum": {
            "name": "test_pad_minimum",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VersioningTest.test_pad_inc_maximum": {
            "name": "test_pad_inc_maximum",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VersioningTest.test_to_spec": {
            "name": "test_to_spec",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VersioningTest.test_raw": {
            "name": "test_raw",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VersioningTest.test_to_raw_spec": {
            "name": "test_to_raw_spec",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VersioningTest.test_semver": {
            "name": "test_semver",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VersioningTest.test_semver_nightly": {
            "name": "test_semver_nightly",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VersioningTest.test_semver_nightly_other": {
            "name": "test_semver_nightly_other",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VersioningTest.test_semver_two_nightlies": {
            "name": "test_semver_two_nightlies",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VersioningTest.test_semver_max": {
            "name": "test_semver_max",
            "location": 66,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "VersioningTest.test_group_by_version": {
            "name": "test_group_by_version",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/core/tests/__init__.py": {},
    "appstore-master/nextcloudappstore/core/tests/e2e/app_dev_steps.py": {
        "AppDevSteps.register_app": {
            "name": "register_app",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "cert": [
                    "str",
                    "List[str]",
                    "Dict[str, str]"
                ],
                "sig": [
                    "str",
                    "List[str]",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/core/tests/e2e/base.py": {
        "BaseStoreTest.by_id": {
            "name": "by_id",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "id": [
                    "str",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "BaseStoreTest.by_css": {
            "name": "by_css",
            "location": 21,
            "return": [
                "str",
                "Iterable[T]",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "selector": [
                    "str",
                    "IO[str]",
                    "Optional[str]",
                    "bool"
                ],
                "multiple": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "BaseStoreTest.setUp": {
            "name": "setUp",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStoreTest.tearDown": {
            "name": "tearDown",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStoreTest.go_to": {
            "name": "go_to",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url_name": [
                    "str"
                ],
                "kwargs": []
            }
        },
        "BaseStoreTest.go_to_app": {
            "name": "go_to_app",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app_id": [
                    "str",
                    "int"
                ]
            }
        },
        "BaseStoreTest.go_to_app_register": {
            "name": "go_to_app_register",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStoreTest.go_to_app_upload": {
            "name": "go_to_app_upload",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStoreTest.go_to_login": {
            "name": "go_to_login",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStoreTest.login": {
            "name": "login",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str",
                    "bool"
                ],
                "password": [
                    "str",
                    "bool"
                ]
            }
        },
        "BaseStoreTest.assert_can_not_login": {
            "name": "assert_can_not_login",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStoreTest.logout": {
            "name": "logout",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStoreTest.wait_for": {
            "name": "wait_for",
            "location": 83,
            "return": [
                "str",
                "Set[str]"
            ],
            "arguments": {
                "self": [],
                "selector": [
                    "bool",
                    "Union[str, Dict[str, Any]]"
                ],
                "then": [
                    "str",
                    "int",
                    "Iterable[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "BaseStoreTest.wait_for_url": {
            "name": "wait_for_url",
            "location": 89,
            "return": [
                "typing.Any"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "TextIO",
                    "int",
                    "Union[tuple, list]"
                ]
            }
        },
        "BaseStoreTest.assertOnPage": {
            "name": "assertOnPage",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "url_name": [
                    "str"
                ],
                "kwargs": []
            }
        },
        "BaseStoreTest.findNavigationLink": {
            "name": "findNavigationLink",
            "location": 100,
            "return": [
                "str",
                "Callable",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "url_name": [
                    "str",
                    "dict",
                    "Mapping[str, Any]"
                ],
                "kwargs": []
            }
        }
    },
    "appstore-master/nextcloudappstore/core/tests/e2e/test_app_registration.py": {
        "AppRegistrationTest.test_invalid_cert": {
            "name": "test_invalid_cert",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AppRegistrationTest.test_valid_cert": {
            "name": "test_valid_cert",
            "location": 37,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AppRegistrationTest.read_cert": {
            "name": "read_cert",
            "location": 53,
            "return": [
                "List[str]",
                "zerver.models.Stream",
                "models.User",
                "Exception"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "AppRegistrationTest.cert_path": {
            "name": "cert_path",
            "location": 57,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "AppRegistrationTest.test_invalid_cert.validate_error_msg": {
            "name": "validate_error_msg",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "el": [
                    "str"
                ]
            }
        },
        "AppRegistrationTest.test_valid_cert.validate_success_msg": {
            "name": "validate_success_msg",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "el": [
                    "int",
                    "models.Question",
                    "str",
                    "Callable"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/core/tests/e2e/test_app_upload.py": {
        "UploadAppReleaseTest.test_upload": {
            "name": "test_upload",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UploadAppReleaseTest._upload_app": {
            "name": "_upload_app",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "sig": [
                    "str"
                ]
            }
        },
        "UploadAppReleaseTest.test_upload.check_app_version_page": {
            "name": "check_app_version_page",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "el": [
                    "dict",
                    "list",
                    "Iterable[Sequence[str]]",
                    "django.db.backends.postgresql_psycopg2.schema.DatabaseSchemaEditor"
                ]
            }
        },
        "UploadAppReleaseTest.test_upload.upload_app": {
            "name": "upload_app",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "el": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "bool",
                    "list"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/core/tests/e2e/test_app_upload_invalid.py": {
        "UploadInvalidAppReleaseTest.test_upload_invalid_url": {
            "name": "test_upload_invalid_url",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UploadInvalidAppReleaseTest._upload_app": {
            "name": "_upload_app",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str"
                ],
                "sig": [
                    "str"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/core/tests/e2e/test_change_language.py": {
        "ChangeLanguageTest.test_change_lang": {
            "name": "test_change_lang",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/core/tests/e2e/test_comment.py": {
        "CommentAppTest.test_comment": {
            "name": "test_comment",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CommentAppTest._rate": {
            "name": "_rate",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "rating": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "comment": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "CommentAppTest._rate.rate_app": {
            "name": "rate_app",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "el": [
                    "int"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/core/tests/e2e/test_delete_account.py": {
        "DeleteAccountTest.test_delete_account": {
            "name": "test_delete_account",
            "location": 8,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/core/tests/e2e/test_feeds.py": {
        "FeedTest.test_rss_all": {
            "name": "test_rss_all",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FeedTest.test_atom_all": {
            "name": "test_atom_all",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/core/tests/e2e/test_owner_transfer.py": {
        "AppTransferTestTest.test_transfer": {
            "name": "test_transfer",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/core/tests/e2e/test_profile_token.py": {
        "ProfileTokenTest.test_update_token": {
            "name": "test_update_token",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProfileTokenTest._update_token": {
            "name": "_update_token",
            "location": 29,
            "return": [
                "bool",
                "Union[str, Pattern]",
                "type"
            ],
            "arguments": {
                "self": [],
                "btn_selector": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "ProfileTokenTest.test_update_token.assert_new_token": {
            "name": "assert_new_token",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "el": [
                    "django.db.backends.postgresql_psycopg2.schema.DatabaseSchemaEditor",
                    "bool",
                    "str"
                ]
            }
        },
        "ProfileTokenTest._update_token.click_regen": {
            "name": "click_regen",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "el": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/core/tests/e2e/test_scaffolding.py": {
        "ScaffoldTest.test_scaffold": {
            "name": "test_scaffold",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/core/tests/e2e/test_update_account.py": {
        "UpdateAccountTest.test_update_account": {
            "name": "test_update_account",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/core/tests/e2e/test_update_password.py": {
        "UpdatePasswordTest.test_update_pass": {
            "name": "test_update_pass",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/core/tests/e2e/test_user_register.py": {
        "UserRegisterTest.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UserRegisterTest.test_register": {
            "name": "test_register",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UserRegisterTest.tearDown": {
            "name": "tearDown",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/core/tests/e2e/__init__.py": {},
    "appstore-master/nextcloudappstore/scaffolding/apps.py": {
        "ScaffoldingConfig.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ScaffoldingConfig.ready": {
            "name": "ready",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/scaffolding/archive.py": {
        "build_files": {
            "name": "build_files",
            "location": 14,
            "return": [
                "str",
                "dict",
                "List[str]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "args": []
            }
        },
        "build_archive": {
            "name": "build_archive",
            "location": 49,
            "return": [
                "bool"
            ],
            "arguments": {
                "parameters": [
                    "Tuple[int, int]",
                    "dict",
                    "pypi2nix.path.Path"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/scaffolding/forms.py": {
        "get_categories": {
            "name": "get_categories",
            "location": 21,
            "return": [
                "List[str]",
                "Set[str]",
                "AbstractSet[Type[object]]",
                "str",
                "Tuple[str, Any]"
            ],
            "arguments": {}
        },
        "get_versions": {
            "name": "get_versions",
            "location": 25,
            "return": [
                "str",
                "list",
                "Optional[str]",
                "Iterable[str]",
                "List[str]"
            ],
            "arguments": {}
        },
        "validate_id": {
            "name": "validate_id",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {
                "input": [
                    "str"
                ]
            }
        },
        "IntegrationScaffoldingForm._create_discourse_category": {
            "name": "_create_discourse_category",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app_id": [
                    "int"
                ]
            }
        },
        "IntegrationScaffoldingForm.save": {
            "name": "save",
            "location": 112,
            "return": [
                "Dict[str, Any]",
                "str",
                "Optional[str]",
                "models.Payment",
                "bytes",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "raiden.utils.TokenNetworkID",
                    "int",
                    "raiden.utils.TokenAmount",
                    "zerver.models.UserProfile"
                ],
                "app_id": [
                    "Union[float, str]",
                    "float",
                    "zilencer.models.RemoteZulipServer",
                    "Dict[str, Any]",
                    "bool",
                    "zerver.models.Realm",
                    "int"
                ],
                "action": [
                    "str",
                    "bool",
                    "Optional[str]",
                    "int"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/scaffolding/views.py": {
        "AppScaffoldingView.get_initial": {
            "name": "get_initial",
            "location": 16,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "List[str]",
                "Set[starfish.core.types.Axes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AppScaffoldingView.form_valid": {
            "name": "form_valid",
            "location": 27,
            "return": [
                "List[str]",
                "dict",
                "int",
                "Optional[Dict[str, Any]]",
                "Dict[str, str]",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, List[str]]",
                    "salon.models.Stylist"
                ]
            }
        },
        "IntegrationScaffoldingView.get": {
            "name": "get",
            "location": 43,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "models.Dashboard",
                "Optional[Dict[str, str]]",
                "Optional[Union[str, Any]]",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "IntegrationScaffoldingView.get_initial": {
            "name": "get_initial",
            "location": 52,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "List[str]",
                "Set[starfish.core.types.Axes]"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationScaffoldingView.get_context_data": {
            "name": "get_context_data",
            "location": 72,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "IntegrationScaffoldingView.form_valid": {
            "name": "form_valid",
            "location": 85,
            "return": [
                "int",
                "List[str]",
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "bool",
                    "skeema.core.Handle",
                    "purplship.core.utils.xml.Element",
                    "models.characters.chassis.Chassis",
                    "Dict[str, str]",
                    "zerver.models.UserProfile"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/scaffolding/__init__.py": {},
    "appstore-master/nextcloudappstore/scaffolding/tests/test_archive.py": {
        "ArchiveTest.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ArchiveTest.test_build_files": {
            "name": "test_build_files",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ArchiveTest.test_no_int_version": {
            "name": "test_no_int_version",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ArchiveTest.test_no_directory": {
            "name": "test_no_directory",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ArchiveTest.test_build_archive": {
            "name": "test_build_archive",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/scaffolding/tests/__init__.py": {},
    "appstore-master/nextcloudappstore/settings/base.py": {},
    "appstore-master/nextcloudappstore/settings/baseproduction.py": {},
    "appstore-master/nextcloudappstore/settings/__init__.py": {},
    "appstore-master/nextcloudappstore/user/admin.py": {},
    "appstore-master/nextcloudappstore/user/apps.py": {
        "UserConfig.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "UserConfig.ready": {
            "name": "ready",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/user/facades.py": {
        "create_user": {
            "name": "create_user",
            "location": 6,
            "return": [
                "zam_repondeur.models.Lecture",
                "core.models.UserPreferences",
                "set",
                "int",
                "bool",
                "django.db.models.QuerySet"
            ],
            "arguments": {
                "username": [
                    "str"
                ],
                "password": [
                    "str",
                    "float",
                    "Optional[str]"
                ],
                "email": [
                    "str",
                    "Dict[str, str]"
                ],
                "verify": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "verify_email": {
            "name": "verify_email",
            "location": 17,
            "return": [
                "str",
                "services.email.transfer.models.Message",
                "deque",
                "zam_repondeur.models.Lecture",
                "int",
                "list"
            ],
            "arguments": {
                "username": [
                    "str",
                    "int",
                    "Union[str, \"TrackingCode\"]",
                    "bytes",
                    "zerver.models.UserProfile"
                ],
                "email": [
                    "str",
                    "Optional[str]",
                    "django.db.models.Model"
                ]
            }
        },
        "update_token": {
            "name": "update_token",
            "location": 29,
            "return": [
                "str",
                "dict",
                "bytes",
                "models.User",
                "Dict[str, str]",
                "Optional[Dict[str, bytes]]"
            ],
            "arguments": {
                "username": [
                    "str"
                ],
                "token": [
                    "int",
                    "models.State",
                    "str",
                    "Mapping[str, Sequence[Any]]",
                    "dict"
                ]
            }
        },
        "delete_user": {
            "name": "delete_user",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "username": [
                    "dict",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/user/forms.py": {
        "SignupFormRecaptcha.signup": {
            "name": "signup",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "List[Dict[str, Any]]"
                ],
                "user": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "DeleteAccountForm.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DeleteAccountForm.clean_email": {
            "name": "clean_email",
            "location": 31,
            "return": [
                "str",
                "Union[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountForm.clean_email": {
            "name": "clean_email",
            "location": 52,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountForm.clean_passwd": {
            "name": "clean_passwd",
            "location": 62,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomResetPasswordForm.clean_email": {
            "name": "clean_email",
            "location": 82,
            "return": [
                "str",
                "bool",
                "django.http.HttpRequest",
                "Optional[float]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CustomResetPasswordForm.save": {
            "name": "save",
            "location": 90,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "Exception",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/user/models.py": {},
    "appstore-master/nextcloudappstore/user/signals.py": {
        "post_save_create_token": {
            "name": "post_save_create_token",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "sender": []
            }
        },
        "password_changed_signal": {
            "name": "password_changed_signal",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "sender": [
                    "int",
                    "bool",
                    "T",
                    "str",
                    "Union[int, Tuple[int, ...]]"
                ],
                "instance": [
                    "bool",
                    "str",
                    "models.Person.Person"
                ]
            }
        }
    },
    "appstore-master/nextcloudappstore/user/tests.py": {},
    "appstore-master/nextcloudappstore/user/urls.py": {},
    "appstore-master/nextcloudappstore/user/views.py": {
        "IntegrationsView.get_context_data": {
            "name": "get_context_data",
            "location": 19,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "TransferAppsView.post": {
            "name": "post",
            "location": 33,
            "return": [
                "int",
                "dict",
                "Optional[Dict]",
                "Optional[str]",
                "Optional"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Dict[str, Any]"
                ],
                "pk": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TransferAppsView.get_context_data": {
            "name": "get_context_data",
            "location": 39,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ChangeLanguageView.get_context_data": {
            "name": "get_context_data",
            "location": 49,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeleteAccountView.get_context_data": {
            "name": "get_context_data",
            "location": 58,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "DeleteAccountView.post": {
            "name": "post",
            "location": 64,
            "return": [
                "str",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest",
                    "django.core.handlers.wsgi.WSGIRequest"
                ]
            }
        },
        "AccountView.get_context_data": {
            "name": "get_context_data",
            "location": 81,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AccountView.form_valid": {
            "name": "form_valid",
            "location": 86,
            "return": [
                "int",
                "List[str]",
                "str",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "Optional[Dict]",
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "AccountView.get_object": {
            "name": "get_object",
            "location": 92,
            "return": [
                "int",
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "queryset": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "PasswordView.get_context_data": {
            "name": "get_context_data",
            "location": 102,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "APITokenView.get_context_data": {
            "name": "get_context_data",
            "location": 113,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/user/__init__.py": {},
    "appstore-master/nextcloudappstore/user/management/__init__.py": {},
    "appstore-master/nextcloudappstore/user/management/commands/createtestuser.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/user/management/commands/setdefaultadminpassword.py": {
        "Command.handle": {
            "name": "handle",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/user/management/commands/setupsocial.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/user/management/commands/updatetoken.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/user/management/commands/verifyemail.py": {
        "Command.add_arguments": {
            "name": "add_arguments",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "parser": [
                    "django.core.managemenbase.CommandParser"
                ]
            }
        },
        "Command.handle": {
            "name": "handle",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/user/management/commands/__init__.py": {},
    "appstore-master/nextcloudappstore/user/management/commands/tests/test_createuser.py": {
        "CreateUserCommandTest.test_create_user": {
            "name": "test_create_user",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/user/management/commands/tests/test_setdefaultadminpassword.py": {
        "SetDefaultAdminPasswordCommandTest.test_set_password": {
            "name": "test_set_password",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/user/management/commands/tests/test_setupsocial.py": {
        "SetupSocialCommandTest.test_setup": {
            "name": "test_setup",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/user/management/commands/tests/test_updatetoken.py": {
        "UpdateTokenCommandTest.test_update_token": {
            "name": "test_update_token",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/user/management/commands/tests/test_verifyemail.py": {
        "VerifyEmailCommandTest.test_verify": {
            "name": "test_verify",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "appstore-master/nextcloudappstore/user/management/commands/tests/__init__.py": {},
    "appstore-master/nextcloudappstore/user/migrations/__init__.py": {},
    "appstore-master/scripts/generate_authors.py": {
        "get_git_authors": {
            "name": "get_git_authors",
            "location": 10,
            "return": [
                "str",
                "int"
            ],
            "arguments": {}
        },
        "parse_git_author": {
            "name": "parse_git_author",
            "location": 16,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "line": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "to_markdown": {
            "name": "to_markdown",
            "location": 30,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "authors": [
                    "dict",
                    "IO",
                    "List[str]",
                    "int",
                    "Iterator[Dict[str, str]]"
                ]
            }
        },
        "to_rst": {
            "name": "to_rst",
            "location": 37,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "authors": [
                    "dict",
                    "IO",
                    "List[str]",
                    "int",
                    "Iterator[Dict[str, str]]"
                ]
            }
        },
        "get_authors_file": {
            "name": "get_authors_file",
            "location": 44,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "suffix": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "main": {
            "name": "main",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "appstore-master/scripts/development/proddata.py": {
        "main": {
            "name": "main",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "appstore-master/scripts/development/testdata.py": {
        "main": {
            "name": "main",
            "location": 105,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "appstore-master/scripts/development/__init__.py": {
        "handle_response": {
            "name": "handle_response",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "response": [
                    "Dict[str, Any]",
                    "requests.Response"
                ]
            }
        },
        "import_app": {
            "name": "import_app",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "certificate": [
                    "str",
                    "tuple"
                ],
                "signature": [
                    "str",
                    "tuple"
                ],
                "auth": [
                    "str",
                    "tuple"
                ]
            }
        },
        "import_release": {
            "name": "import_release",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "dict",
                    "int"
                ],
                "signature": [
                    "str",
                    "bool"
                ],
                "nightly": [
                    "str",
                    "bool"
                ],
                "auth": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "appstore-master/scripts/development/settings/base.py": {},
    "appstore-master/scripts/development/settings/postgres.py": {},
    "appstore-master/scripts/development/settings/sqlite.py": {}
}
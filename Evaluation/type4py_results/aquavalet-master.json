{
    "aquavalet-master/tasks.py": {
        "install": {
            "name": "install",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "str"
                ],
                "develop": [
                    "str",
                    "BinaryIO"
                ],
                "pty": [
                    "Sequence[str]",
                    "Union[int, str, bool]",
                    "str"
                ]
            }
        },
        "flake": {
            "name": "flake",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "str"
                ]
            }
        },
        "mypy": {
            "name": "mypy",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "str"
                ]
            }
        },
        "test": {
            "name": "test",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": [
                    "str"
                ]
            }
        },
        "server": {
            "name": "server",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "ctx": []
            }
        }
    },
    "aquavalet-master/aquavalet/app.py": {
        "json_error": {
            "name": "json_error",
            "location": 11,
            "return": [
                "int",
                "dict"
            ],
            "arguments": {
                "status_code": [
                    "int"
                ],
                "exception": [
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "app": {
            "name": "app",
            "location": 49,
            "return": [
                "aiohttp.web.Application"
            ],
            "arguments": {}
        }
    },
    "aquavalet-master/aquavalet/auth.py": {},
    "aquavalet-master/aquavalet/exceptions.py": {
        "WaterButlerError.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "message": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "WaterButlerError.__repr__": {
            "name": "__repr__",
            "location": 13,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "WaterButlerError.__str__": {
            "name": "__str__",
            "location": 16,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "UnsupportedHTTPMethodError.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "int"
                ],
                "supported": [
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "NotFoundError.__init__": {
            "name": "__init__",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "filename": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        }
    },
    "aquavalet-master/aquavalet/metadata.py": {
        "BaseMetadata.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "attributes": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BaseMetadata.serialized": {
            "name": "serialized",
            "location": 15,
            "return": [
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMetadata.json_api_serialized": {
            "name": "json_api_serialized",
            "location": 31,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMetadata._json_api_links": {
            "name": "_json_api_links",
            "location": 40,
            "return": [
                "float",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMetadata.construct_path": {
            "name": "construct_path",
            "location": 60,
            "return": [
                "str",
                "Optional[str]",
                "List[T]",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "int"
                ],
                "action": [
                    "str"
                ]
            }
        },
        "BaseMetadata.provider": {
            "name": "provider",
            "location": 74,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMetadata.kind": {
            "name": "kind",
            "location": 80,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMetadata.name": {
            "name": "name",
            "location": 86,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseMetadata.etag": {
            "name": "etag",
            "location": 96,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aquavalet-master/aquavalet/provider.py": {
        "throttle": {
            "name": "throttle",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "concurrency": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "interval": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "throttle._throttle": {
            "name": "_throttle",
            "location": 22,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "BaseProvider.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "\"Step\"",
                    "bool",
                    "str",
                    "Mapping[str, Any]"
                ],
                "retry_on": [
                    "\"Step\"",
                    "bool",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "BaseProvider.name": {
            "name": "name",
            "location": 78,
            "return": [
                "str",
                "Callable[[str], T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProvider.__eq__": {
            "name": "__eq__",
            "location": 81,
            "return": [
                "dict",
                "List[Dict[str, Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "other": []
            }
        },
        "BaseProvider.serialized": {
            "name": "serialized",
            "location": 87,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProvider.default_headers": {
            "name": "default_headers",
            "location": 94,
            "return": [
                "Tuple[bytes]",
                "str",
                "bytes",
                "float",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProvider.handle_conflict_new_version": {
            "name": "handle_conflict_new_version",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseProvider.can_intra_copy": {
            "name": "can_intra_copy",
            "location": 238,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "dest_provider": [
                    "Callable",
                    "Iterable[T]"
                ],
                "item": [
                    "Callable",
                    "Iterable[T]"
                ]
            }
        },
        "BaseProvider.can_intra_move": {
            "name": "can_intra_move",
            "location": 241,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "List[str]",
                    "Optional[str]"
                ],
                "path": [
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "BaseProvider._build_range_header": {
            "name": "_build_range_header",
            "location": 278,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "slice_tup": [
                    "Tuple[int, int]",
                    "int",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "aquavalet-master/aquavalet/utils.py": {
        "make_provider": {
            "name": "make_provider",
            "location": 8,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "name": [
                    "str",
                    "dict",
                    "bytes",
                    "Dict[str, Dict]",
                    "bool"
                ],
                "auth": [
                    "str",
                    "dict",
                    "bytes",
                    "Dict[str, Dict]",
                    "bool"
                ]
            }
        },
        "as_task": {
            "name": "as_task",
            "location": 25,
            "return": [
                "bool",
                "str",
                "logging.LogRecord",
                "asyncio.Task[Any]",
                "deque",
                "float",
                "Callable[[bytes], None]"
            ],
            "arguments": {
                "func": [
                    "Callable"
                ]
            }
        },
        "async_retry": {
            "name": "async_retry",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "retries": [
                    "Exception",
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ],
                "backoff": [
                    "Exception",
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ],
                "exceptions": [
                    "Exception",
                    "str",
                    "int",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "lreplace": {
            "name": "lreplace",
            "location": 67,
            "return": [
                "str"
            ],
            "arguments": {
                "pattern": [
                    "str",
                    "int"
                ],
                "sub": [
                    "str",
                    "int"
                ],
                "string": [
                    "str",
                    "int"
                ]
            }
        },
        "as_task.wrapped": {
            "name": "wrapped",
            "location": 30,
            "return": [],
            "arguments": {}
        },
        "async_retry._async_retry": {
            "name": "_async_retry",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        }
    },
    "aquavalet-master/aquavalet/__init__.py": {},
    "aquavalet-master/aquavalet/providers/utils.py": {
        "require_group": {
            "name": "require_group",
            "location": 5,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "match": [
                    "str",
                    "Pattern"
                ],
                "group_name": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ],
                "message": [
                    "str"
                ]
            }
        },
        "require_match": {
            "name": "require_match",
            "location": 14,
            "return": [
                "str",
                "bool",
                "OrderedDict",
                "int"
            ],
            "arguments": {
                "pattern": [
                    "str"
                ],
                "string": [
                    "str"
                ],
                "message": [
                    "str"
                ]
            }
        }
    },
    "aquavalet-master/aquavalet/providers/__init__.py": {},
    "aquavalet-master/aquavalet/providers/filesystem/metadata.py": {
        "FileSystemMetadata.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "str",
                    "os.PathLike"
                ],
                "path": [
                    "str",
                    "Union[str, List[str]]",
                    "Optional[str]",
                    "IO[Any]"
                ]
            }
        },
        "FileSystemMetadata.root": {
            "name": "root",
            "location": 27,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "Pattern"
                ]
            }
        },
        "FileSystemMetadata.provider": {
            "name": "provider",
            "location": 39,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSystemMetadata.id": {
            "name": "id",
            "location": 43,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSystemMetadata.parent": {
            "name": "parent",
            "location": 47,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSystemMetadata.name": {
            "name": "name",
            "location": 57,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSystemMetadata.rename": {
            "name": "rename",
            "location": 62,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "new_name": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "FileSystemMetadata.child": {
            "name": "child",
            "location": 66,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "new_name": [
                    "str",
                    "dict"
                ]
            }
        },
        "FileSystemMetadata.path": {
            "name": "path",
            "location": 70,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSystemMetadata.unix_path": {
            "name": "unix_path",
            "location": 74,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSystemMetadata.size": {
            "name": "size",
            "location": 78,
            "return": [
                "Callable[[T], List[T]]",
                "str",
                "Set[str]",
                "List[float]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSystemMetadata.modified": {
            "name": "modified",
            "location": 82,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSystemMetadata.mime_type": {
            "name": "mime_type",
            "location": 86,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FileSystemMetadata.etag": {
            "name": "etag",
            "location": 90,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSystemMetadata.kind": {
            "name": "kind",
            "location": 94,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSystemMetadata.is_file": {
            "name": "is_file",
            "location": 100,
            "return": [
                "Tuple[str, str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSystemMetadata.is_folder": {
            "name": "is_folder",
            "location": 104,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileSystemMetadata.is_root": {
            "name": "is_root",
            "location": 108,
            "return": [
                "int",
                "str",
                "Union[str, int]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aquavalet-master/aquavalet/providers/filesystem/provider.py": {
        "FileSystemProvider.can_intra_copy": {
            "name": "can_intra_copy",
            "location": 98,
            "return": [
                "Type",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "dest_provider": [
                    "Callable",
                    "Any"
                ],
                "item": [
                    "Callable",
                    "Iterable[T]"
                ]
            }
        },
        "FileSystemProvider.can_intra_move": {
            "name": "can_intra_move",
            "location": 101,
            "return": [
                "Type",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "dest_provider": [
                    "Callable",
                    "Any"
                ],
                "item": [
                    "Callable",
                    "Iterable[T]"
                ]
            }
        }
    },
    "aquavalet-master/aquavalet/providers/filesystem/settings.py": {},
    "aquavalet-master/aquavalet/providers/filesystem/__init__.py": {},
    "aquavalet-master/aquavalet/providers/osfstorage/metadata.py": {
        "OsfMetadata.provider": {
            "name": "provider",
            "location": 6,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aquavalet-master/aquavalet/providers/osfstorage/provider.py": {
        "OSFStorageProvider.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "auth": [
                    "bool",
                    "Callable[[str, str], bool]",
                    "float"
                ]
            }
        },
        "OSFStorageProvider.name": {
            "name": "name",
            "location": 16,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "Iterator",
                "Container[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aquavalet-master/aquavalet/providers/osfstorage/__init__.py": {},
    "aquavalet-master/aquavalet/providers/osfstyle/metadata.py": {
        "BaseOsfStyleItemMetadata.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "raw": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ],
                "internal_provider": [
                    "int",
                    "bool",
                    "float"
                ],
                "resource": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "BaseOsfStyleItemMetadata.root": {
            "name": "root",
            "location": 18,
            "return": [
                "Callable[[Any], bool]",
                "str",
                "int",
                "float",
                "bool",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bytes",
                    "memoryview",
                    "Dict[str, Any]"
                ],
                "internal_provider": [],
                "resource": [
                    "str",
                    "bytes",
                    "memoryview",
                    "Dict[str, Any]"
                ]
            }
        },
        "BaseOsfStyleItemMetadata.versions": {
            "name": "versions",
            "location": 31,
            "return": [
                "str",
                "Callable[[], bool]",
                "Optional[int]"
            ],
            "arguments": {
                "cls": [
                    "dict"
                ],
                "item": [
                    "dict",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "Type",
                    "type"
                ],
                "version_data": [
                    "List[dict]",
                    "str",
                    "Type",
                    "dict",
                    "Type[object]",
                    "bytes"
                ]
            }
        },
        "BaseOsfStyleItemMetadata.list": {
            "name": "list",
            "location": 47,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "cls": [
                    "Iterator[T]",
                    "int",
                    "Dict[str, Any]",
                    "List[int]",
                    "List[List[str]]"
                ],
                "item": [
                    "dict",
                    "str",
                    "Dict[str, Any]",
                    "Sequence[str]",
                    "bytearray",
                    "Iterator[T]"
                ],
                "data": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "BaseOsfStyleItemMetadata.name": {
            "name": "name",
            "location": 56,
            "return": [
                "str",
                "Type",
                "Callable[..., T]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseOsfStyleItemMetadata.kind": {
            "name": "kind",
            "location": 60,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseOsfStyleItemMetadata.parent": {
            "name": "parent",
            "location": 64,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseOsfStyleItemMetadata.size": {
            "name": "size",
            "location": 69,
            "return": [
                "Callable[[T], List[T]]",
                "str",
                "Set[str]",
                "List[float]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseOsfStyleItemMetadata.is_file": {
            "name": "is_file",
            "location": 74,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseOsfStyleItemMetadata.is_folder": {
            "name": "is_folder",
            "location": 78,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseOsfStyleItemMetadata.is_root": {
            "name": "is_root",
            "location": 82,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseOsfStyleItemMetadata.modified": {
            "name": "modified",
            "location": 86,
            "return": [
                "str",
                "Dict[str, str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseOsfStyleItemMetadata.guid": {
            "name": "guid",
            "location": 91,
            "return": [
                "bool",
                "Optional[Any]",
                "str",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseOsfStyleItemMetadata.version_id": {
            "name": "version_id",
            "location": 95,
            "return": [
                "Optional[str]",
                "str",
                "Optional[List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseOsfStyleItemMetadata.created": {
            "name": "created",
            "location": 99,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseOsfStyleItemMetadata.unix_path": {
            "name": "unix_path",
            "location": 104,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseOsfStyleItemMetadata.etag": {
            "name": "etag",
            "location": 112,
            "return": [
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseOsfStyleItemMetadata.id": {
            "name": "id",
            "location": 116,
            "return": [
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseOsfStyleItemMetadata.path": {
            "name": "path",
            "location": 120,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseOsfStyleItemMetadata.md5": {
            "name": "md5",
            "location": 124,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseOsfStyleItemMetadata.sha256": {
            "name": "sha256",
            "location": 130,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseOsfStyleItemMetadata.mimetype": {
            "name": "mimetype",
            "location": 136,
            "return": [
                "tuple",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseOsfStyleItemMetadata.serialized": {
            "name": "serialized",
            "location": 140,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aquavalet-master/aquavalet/providers/osfstyle/provider.py": {
        "OsfProvider.default_headers": {
            "name": "default_headers",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "OsfProvider.can_intra_copy": {
            "name": "can_intra_copy",
            "location": 169,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "dest_provider": [
                    "Callable",
                    "Any"
                ],
                "item": [
                    "Callable",
                    "Iterable[T]"
                ]
            }
        }
    },
    "aquavalet-master/aquavalet/providers/osfstyle/__init__.py": {},
    "aquavalet-master/aquavalet/server/base.py": {
        "_int_or_none": {
            "name": "_int_or_none",
            "location": 42,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "val": [
                    "str",
                    "List[str]",
                    "bool"
                ]
            }
        },
        "_parse_request_range": {
            "name": "_parse_request_range",
            "location": 49,
            "return": [
                "bool",
                "type",
                "Optional[Iterable]",
                "dict",
                "Optional[T]"
            ],
            "arguments": {
                "range_header": [
                    "str",
                    "T",
                    "Optional[dict]",
                    "Optional[BaseException]",
                    "bytes",
                    "bool"
                ]
            }
        },
        "parse_request_range": {
            "name": "parse_request_range",
            "location": 70,
            "return": [
                "bool",
                "dict",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "range_header": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "BaseHandler.as_entry": {
            "name": "as_entry",
            "location": 22,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Match[str]",
                    "Callable[[], Any]"
                ]
            }
        },
        "BaseHandler.write_error": {
            "name": "write_error",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "status_code": [
                    "bool",
                    "List[str]",
                    "List[Dict[str, Any]]",
                    "List[\"libkol.Item\"]",
                    "str"
                ],
                "exc_info": [
                    "str",
                    "Union[IO[str], int]",
                    "dict",
                    "BinaryIO",
                    "bool"
                ]
            }
        },
        "BaseHandler.set_status": {
            "name": "set_status",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "code": [
                    "str",
                    "T",
                    "bool",
                    "Dict[str, Any]",
                    "int",
                    "bytes"
                ],
                "reason": [
                    "str",
                    "T",
                    "bool",
                    "Dict[str, Any]",
                    "int",
                    "bytes"
                ]
            }
        },
        "BaseHandler._cross_origin_is_allowed": {
            "name": "_cross_origin_is_allowed",
            "location": 34,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aquavalet-master/aquavalet/server/request_handler.py": {
        "ProviderHandler.initialize": {
            "name": "initialize",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProviderHandler.get_header": {
            "name": "get_header",
            "location": 206,
            "return": [
                "str",
                "Optional[str]",
                "asyncio.AbstractEventLoop",
                "Dict[str, Any]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "type"
                ]
            }
        },
        "ProviderHandler.on_finish": {
            "name": "on_finish",
            "location": 275,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ProviderHandler.require_query_argument": {
            "name": "require_query_argument",
            "location": 280,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "param": [
                    "str",
                    "Optional[str]",
                    "raiden.utils.List[raiden.utils.Tuple[str, raiden.utils.Any]]",
                    "bool"
                ],
                "message": [
                    "bytes",
                    "str",
                    "Callable[[bytes], bytes]"
                ]
            }
        }
    },
    "aquavalet-master/aquavalet/server/routes.py": {},
    "aquavalet-master/aquavalet/server/__init__.py": {},
    "aquavalet-master/aquavalet/settings/defaults.py": {},
    "aquavalet-master/aquavalet/settings/local-dist.py": {},
    "aquavalet-master/aquavalet/settings/__init__.py": {},
    "aquavalet-master/aquavalet/streams/base.py": {
        "BaseStream.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStream.size": {
            "name": "size",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStream.add_reader": {
            "name": "add_reader",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "reader": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "BaseStream.remove_reader": {
            "name": "remove_reader",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "BaseStream.add_writer": {
            "name": "add_writer",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]"
                ],
                "writer": [
                    "str",
                    "List[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "BaseStream.remove_writer": {
            "name": "remove_writer",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "BaseStream.feed_eof": {
            "name": "feed_eof",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseStream.__aiter__": {
            "name": "__aiter__",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiStream.__init__": {
            "name": "__init__",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiStream.size": {
            "name": "size",
            "location": 78,
            "return": [
                "Sequence[int]",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiStream.streams": {
            "name": "streams",
            "location": 82,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiStream.add_streams": {
            "name": "add_streams",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MultiStream._cycle": {
            "name": "_cycle",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "StringStream.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "bytes",
                    "memoryview",
                    "dict"
                ]
            }
        },
        "StringStream.size": {
            "name": "size",
            "location": 132,
            "return": [
                "Sequence[int]",
                "float",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmptyStream.__init__": {
            "name": "__init__",
            "location": 144,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "EmptyStream.size": {
            "name": "size",
            "location": 148,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "EmptyStream.at_eof": {
            "name": "at_eof",
            "location": 151,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aquavalet-master/aquavalet/streams/file.py": {
        "FileStreamReader.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_pointer": [
                    "str",
                    "int"
                ],
                "range": [
                    "int",
                    "float"
                ]
            }
        },
        "FileStreamReader.size": {
            "name": "size",
            "location": 25,
            "return": [
                "Callable[[T], List[T]]",
                "str",
                "Set[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileStreamReader.close": {
            "name": "close",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "FileStreamReader.at_eof": {
            "name": "at_eof",
            "location": 39,
            "return": [
                "str",
                "TextIO",
                "BinaryIO"
            ],
            "arguments": {
                "self": []
            }
        },
        "FileStreamReader.content_range": {
            "name": "content_range",
            "location": 43,
            "return": [
                "Optional[str]",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aquavalet-master/aquavalet/streams/http.py": {
        "ResponseStreamReader.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "response": [
                    "str",
                    "int",
                    "Optional[str]",
                    "List[hexpy.base.JSONDict]"
                ],
                "size": [
                    "bool",
                    "List[str]",
                    "Optional[int]",
                    "str"
                ],
                "name": [
                    "str",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "ResponseStreamReader.partial": {
            "name": "partial",
            "location": 14,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseStreamReader.content_type": {
            "name": "content_type",
            "location": 18,
            "return": [
                "str",
                "Dict[str, Any]",
                "sklearn.base.BaseEstimator"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseStreamReader.content_range": {
            "name": "content_range",
            "location": 22,
            "return": [
                "int",
                "List[List[int]]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseStreamReader.name": {
            "name": "name",
            "location": 26,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ResponseStreamReader.size": {
            "name": "size",
            "location": 30,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Dict[str, str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestStreamReader.__init__": {
            "name": "__init__",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "request": [],
                "reader": []
            }
        },
        "RequestStreamReader.size": {
            "name": "size",
            "location": 49,
            "return": [
                "bool",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "RequestStreamReader.at_eof": {
            "name": "at_eof",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aquavalet-master/aquavalet/streams/zip.py": {
        "ZipLocalFileDataDescriptor.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file": [
                    "int",
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "hackathon.utils.utils.ResultsMessage",
                    "Dict[str, int]"
                ]
            }
        },
        "ZipLocalFileDataDescriptor.size": {
            "name": "size",
            "location": 52,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipLocalFileData.__init__": {
            "name": "__init__",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file": [
                    "int",
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "hackathon.utils.utils.ResultsMessage",
                    "Dict[str, int]"
                ],
                "stream": [
                    "time",
                    "str",
                    "int",
                    "TextIO",
                    "bool"
                ]
            }
        },
        "ZipLocalFileData.size": {
            "name": "size",
            "location": 82,
            "return": [
                "bool",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipLocalFile.__init__": {
            "name": "__init__",
            "location": 131,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_tuple": [
                    "str"
                ]
            }
        },
        "ZipLocalFile.local_header": {
            "name": "local_header",
            "location": 177,
            "return": [
                "Dict[str, Any]",
                "str",
                "IO",
                "bytes",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipLocalFile.directory_header": {
            "name": "directory_header",
            "location": 187,
            "return": [
                "dict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipLocalFile.descriptor": {
            "name": "descriptor",
            "location": 263,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipLocalFile.total_bytes": {
            "name": "total_bytes",
            "location": 277,
            "return": [
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipArchiveCentralDirectory.__init__": {
            "name": "__init__",
            "location": 297,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "files": [
                    "int",
                    "str",
                    "bool",
                    "Dict[str, str]",
                    "hackathon.utils.utils.ResultsMessage",
                    "Dict[str, int]"
                ]
            }
        },
        "ZipArchiveCentralDirectory.build_content": {
            "name": "build_content",
            "location": 301,
            "return": [
                "str",
                "Optional[str]",
                "dict",
                "\"Cake\"",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipStreamReader.__init__": {
            "name": "__init__",
            "location": 362,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "stream_gen": [
                    "str",
                    "bytes",
                    "List[str]",
                    "Dict[str, Dict[Any, int]]",
                    "bool"
                ]
            }
        },
        "ZipStreamReader.size": {
            "name": "size",
            "location": 371,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipStreamReader.__aiter__": {
            "name": "__aiter__",
            "location": 374,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ZipStreamGeneratorReader.__init__": {
            "name": "__init__",
            "location": 407,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "List[str]",
                    "int",
                    "str"
                ],
                "item": [
                    "dict",
                    "List[Dict[str, Any]]",
                    "TextIO",
                    "List[dict]",
                    "Dict[str, Any]"
                ],
                "children": [
                    "List[str]",
                    "int",
                    "str"
                ],
                "session": [
                    "List[str]",
                    "int",
                    "str"
                ]
            }
        }
    },
    "aquavalet-master/aquavalet/streams/__init__.py": {},
    "aquavalet-master/tests/fixtures.py": {},
    "aquavalet-master/tests/utils.py": {
        "json_resp": {
            "name": "json_resp",
            "location": 6,
            "return": [
                "bool",
                "Dict[str, str]",
                "int",
                "Dict[str, Any]",
                "List[str]",
                "Optional[Mapping[str, Any]]"
            ],
            "arguments": {
                "json_data": [
                    "int",
                    "Dict[str, Any]",
                    "str"
                ],
                "status": [
                    "int",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "data_resp": {
            "name": "data_resp",
            "location": 14,
            "return": [
                "Dict[str, Any]",
                "rest_framework.response.Response"
            ],
            "arguments": {
                "raw_data": [
                    "bytes",
                    "int",
                    "str",
                    "dict"
                ],
                "status": [
                    "bytes",
                    "int",
                    "str",
                    "dict"
                ]
            }
        },
        "empty_resp": {
            "name": "empty_resp",
            "location": 18,
            "return": [
                "Dict[str, Any]",
                "Dict[str, str]",
                "int",
                "Optional[Mapping[str, Any]]",
                "bool"
            ],
            "arguments": {
                "status": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        }
    },
    "aquavalet-master/tests/__init__.py": {},
    "aquavalet-master/tests/core/fixtures.py": {},
    "aquavalet-master/tests/core/test_metadata.py": {
        "FileMetadataTests.test_file": {
            "name": "test_file",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "str",
                    "Dict[str, Any]"
                ],
                "file": [
                    "dict"
                ]
            }
        },
        "FileMetadataTests.test_folder": {
            "name": "test_folder",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "str"
                ],
                "folder": [
                    "dict"
                ]
            }
        },
        "FileMetadataTests.test_root": {
            "name": "test_root",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "Generator[None, Any, None]"
                ],
                "root": []
            }
        },
        "FileMetadataTests.test_version": {
            "name": "test_version",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "str",
                    "dict",
                    "Optional[Container[str]]"
                ],
                "versions": [
                    "str"
                ]
            }
        }
    },
    "aquavalet-master/tests/core/test_provider.py": {
        "provider1": {
            "name": "provider1",
            "location": 8,
            "return": [
                "str",
                "dict",
                "bytes",
                "bool"
            ],
            "arguments": {}
        },
        "provider2": {
            "name": "provider2",
            "location": 13,
            "return": [
                "str",
                "dict",
                "bytes",
                "bool"
            ],
            "arguments": {}
        },
        "test_build_range_header": {
            "name": "test_build_range_header",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "provider1": [
                    "str",
                    "Optional[Union[bool, Any]]",
                    "dict"
                ]
            }
        },
        "TestBaseProvider.test_eq": {
            "name": "test_eq",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider1": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ],
                "provider2": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "TestBaseProvider.test_serialize": {
            "name": "test_serialize",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider1": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        }
    },
    "aquavalet-master/tests/core/test_utils.py": {},
    "aquavalet-master/tests/core/__init__.py": {},
    "aquavalet-master/tests/providers/__init__.py": {},
    "aquavalet-master/tests/providers/filesystem/fixtures.py": {
        "provider": {
            "name": "provider",
            "location": 14,
            "return": [
                "str",
                "TextIO",
                "BinaryIO",
                "py._path.local.LocalPath"
            ],
            "arguments": {}
        },
        "missing_file_metadata": {
            "name": "missing_file_metadata",
            "location": 19,
            "return": [
                "str",
                "List[str]",
                "Optional[List[str]]"
            ],
            "arguments": {
                "fs": [
                    "bool",
                    "T",
                    "Callable[[str, str], None]"
                ]
            }
        }
    },
    "aquavalet-master/tests/providers/filesystem/test_integration.py": {
        "app": {
            "name": "app",
            "location": 8,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        }
    },
    "aquavalet-master/tests/providers/filesystem/test_metadata.py": {
        "TestMetadata.test_file_metadata": {
            "name": "test_file_metadata",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fs": [
                    "str",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "TestMetadata.test_root_metadata": {
            "name": "test_root_metadata",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fs": [
                    "list",
                    "str",
                    "bool"
                ]
            }
        },
        "TestMetadata.test_folder_metadata": {
            "name": "test_folder_metadata",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "fs": [
                    "int",
                    "bytes"
                ]
            }
        }
    },
    "aquavalet-master/tests/providers/filesystem/test_provider.py": {
        "TestOperations.test_can_intra_copy": {
            "name": "test_can_intra_copy",
            "location": 456,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        },
        "TestOperations.test_can_intra_move": {
            "name": "test_can_intra_move",
            "location": 459,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "tests.basilisp.helpers.CompileFn",
                    "str",
                    "tests.async_mock.Mock",
                    "float"
                ]
            }
        }
    },
    "aquavalet-master/tests/providers/filesystem/__init__.py": {},
    "aquavalet-master/tests/providers/osfstorage/fixtures.py": {
        "from_fixture_json": {
            "name": "from_fixture_json",
            "location": 14,
            "return": [
                "bytes",
                "str",
                "dict",
                "int",
                "IO[str]"
            ],
            "arguments": {
                "key": [
                    "str",
                    "Iterator[str]"
                ]
            }
        },
        "app": {
            "name": "app",
            "location": 22,
            "return": [
                "List[str]"
            ],
            "arguments": {}
        },
        "folder_metadata_resp": {
            "name": "folder_metadata_resp",
            "location": 27,
            "return": [
                "str",
                "Callable"
            ],
            "arguments": {
                "folder_metadata_json": [
                    "str",
                    "int",
                    "Sequence[float]",
                    "Optional[List[str]]"
                ]
            }
        },
        "get_file_metadata_json": {
            "name": "get_file_metadata_json",
            "location": 31,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "root_metadata_object": {
            "name": "root_metadata_object",
            "location": 39,
            "return": [
                "tests.basilisp.helpers.CompileFn"
            ],
            "arguments": {}
        },
        "json_to_resp": {
            "name": "json_to_resp",
            "location": 49,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "Hashable",
                "bytes",
                "dict"
            ],
            "arguments": {
                "key": [
                    "int",
                    "raiden.utils.BlockSpecification",
                    "Union[float, int]"
                ],
                "status": [
                    "str",
                    "int"
                ]
            }
        },
        "children_metadata": {
            "name": "children_metadata",
            "location": 54,
            "return": [
                "str",
                "Set[cmk.utils.type_defs.HostName]",
                "Dict[str, Any]",
                "dict",
                "Optional[float]",
                "Union[str, Dict]"
            ],
            "arguments": {}
        },
        "revision_metadata_object": {
            "name": "revision_metadata_object",
            "location": 59,
            "return": [
                "int",
                "Callable[[Mapping], T]",
                "List[List[str]]",
                "str",
                "tuple"
            ],
            "arguments": {
                "revisions_metadata": [
                    "int",
                    "Callable[[Mapping], T]",
                    "str",
                    "List[List[str]]",
                    "tuple"
                ]
            }
        },
        "provider": {
            "name": "provider",
            "location": 64,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "FileMetadataRespFactory.__new__": {
            "name": "__new__",
            "location": 44,
            "return": [
                "List[str]",
                "int",
                "Optional[str]",
                "bytes",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "aquavalet-master/tests/providers/osfstorage/test_integration.py": {},
    "aquavalet-master/tests/providers/osfstorage/test_metadata.py": {
        "TestOsfFileMetadata.provider": {
            "name": "provider",
            "location": 11,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "provider": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TestOsfFileMetadata.file": {
            "name": "file",
            "location": 15,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOsfFileMetadata.versions": {
            "name": "versions",
            "location": 19,
            "return": [
                "int",
                "bool",
                "Optional[Iterable[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOsfFileMetadata.folder": {
            "name": "folder",
            "location": 23,
            "return": [
                "cmk.utils.type_defs.UserId",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOsfFileMetadata.root": {
            "name": "root",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "root_metadata_object": [
                    "Sequence[str]",
                    "List[str]",
                    "bool",
                    "dict"
                ]
            }
        }
    },
    "aquavalet-master/tests/providers/osfstorage/test_provider.py": {
        "mocked_server": {
            "name": "mocked_server",
            "location": 24,
            "return": [
                "float",
                "Callable[[bytes], None]",
                "bool",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "str",
                    "bool",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "aquavalet-master/tests/providers/osfstorage/utils.py": {
        "MockOsfstorageServer.get_files_url": {
            "name": "get_files_url",
            "location": 21,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "str"
                ]
            }
        },
        "MockOsfstorageServer.get_metadata_url": {
            "name": "get_metadata_url",
            "location": 29,
            "return": [
                "int",
                "bool",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "str",
                    "bytes",
                    "IO",
                    "BinaryIO"
                ]
            }
        },
        "MockOsfstorageServer.get_file_json": {
            "name": "get_file_json",
            "location": 32,
            "return": [
                "str",
                "Dict[str, Dict[str, Any]]",
                "bytes",
                "Dict[cmk.utils.type_defs.HostName, str]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockOsfstorageServer.get_file_item": {
            "name": "get_file_item",
            "location": 35,
            "return": [
                "str",
                "collector_utilities.type.URL"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockOsfstorageServer.get_children_json": {
            "name": "get_children_json",
            "location": 38,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockOsfstorageServer.get_folder_json": {
            "name": "get_folder_json",
            "location": 41,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockOsfstorageServer.get_folder_item": {
            "name": "get_folder_item",
            "location": 44,
            "return": [
                "str",
                "int",
                "cmk.utils.type_defs.UserId",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockOsfstorageServer.get_version_json": {
            "name": "get_version_json",
            "location": 47,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockOsfstorageServer.get_version_item": {
            "name": "get_version_item",
            "location": 50,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MockOsfstorageServer.mock_metadata": {
            "name": "mock_metadata",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "str",
                    "Mapping[str, Any]",
                    "Optional[asyncio.AbstractEventLoop]"
                ]
            }
        },
        "MockOsfstorageServer.mock_children": {
            "name": "mock_children",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "IO[Any]",
                    "int",
                    "cmk.utils.type_defs.HostName"
                ],
                "children_metadata": [
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "MockOsfstorageServer.mock_delete": {
            "name": "mock_delete",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "str",
                    "Callable",
                    "Callable[[], T]"
                ]
            }
        },
        "MockOsfstorageServer.mock_download": {
            "name": "mock_download",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "TextIO",
                    "int",
                    "Optional[str]",
                    "cmk.utils.type_defs.OptionalConfigSerial"
                ],
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[int, Dict]"
                ]
            }
        },
        "MockOsfstorageServer.mock_download_version": {
            "name": "mock_download_version",
            "location": 80,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "TextIO",
                    "Optional[str]",
                    "int",
                    "cmk.utils.type_defs.OptionalConfigSerial"
                ],
                "data": [
                    "dict",
                    "bytes",
                    "Optional[bytes]"
                ]
            }
        },
        "MockOsfstorageServer.mock_versions": {
            "name": "mock_versions",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "str",
                    "Union[str, IO[bytes]]",
                    "float",
                    "int",
                    "Callable",
                    "Optional[str]"
                ],
                "versions": [
                    "str",
                    "dict",
                    "List[object]",
                    "Optional[str]"
                ]
            }
        },
        "MockOsfstorageServer.mock_upload": {
            "name": "mock_upload",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "Optional[Dict[str, Any]]",
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "MockOsfstorageServer.mock_rename": {
            "name": "mock_rename",
            "location": 99,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "IO[Any]",
                    "int",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "MockOsfstorageServer.mock_409": {
            "name": "mock_409",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "str",
                    "Optional[Dict[str, Any]]",
                    "IO[Any]",
                    "int",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "MockOsfstorageServer.mock_create_folder": {
            "name": "mock_create_folder",
            "location": 114,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "metadata": [
                    "str",
                    "dict",
                    "List[int]"
                ]
            }
        }
    },
    "aquavalet-master/tests/providers/osfstorage/__init__.py": {},
    "aquavalet-master/tests/streams/fixtures.py": {
        "RequestStreamFactory.__new__": {
            "name": "__new__",
            "location": 15,
            "return": [
                "str",
                "List[str]",
                "bool",
                "List[Sequence[Any]]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "stream_data": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "aquavalet-master/tests/streams/test_file_stream.py": {},
    "aquavalet-master/tests/streams/test_request_stream.py": {},
    "aquavalet-master/tests/streams/test_zip_stream.py": {},
    "aquavalet-master/tests/streams/__init__.py": {}
}
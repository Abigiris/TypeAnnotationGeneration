{
    "argus-master/argus.py": {},
    "argus-master/setup.py": {},
    "argus-master/src/display_filter.py": {
        "DisplayFilter.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DisplayFilter.default": {
            "name": "default",
            "location": 68,
            "return": [
                "Callable[[Mapping], T]",
                "int",
                "float"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "dict",
                    "Iterable[Tuple[int, int]]"
                ]
            }
        },
        "DisplayFilter.team_details": {
            "name": "team_details",
            "location": 86,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "cls": [
                    "memoryview",
                    "bool",
                    "str"
                ]
            }
        },
        "DisplayFilter.include_column": {
            "name": "include_column",
            "location": 98,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "column_name": [
                    "str",
                    "float",
                    "Optional[int]"
                ],
                "pretty_name": [
                    "str",
                    "float",
                    "Optional[int]"
                ],
                "width": [
                    "str",
                    "float",
                    "Optional[int]"
                ],
                "index": [
                    "str",
                    "bool",
                    "int",
                    "Optional[str]",
                    "Dict[str, T]",
                    "List[int]",
                    "Iterable[Hashable]"
                ]
            }
        },
        "DisplayFilter.save_config": {
            "name": "save_config",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DisplayFilter.from_file": {
            "name": "from_file",
            "location": 112,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "Iterable[str]",
                    "bool",
                    "str",
                    "Iterable",
                    "Set[str]"
                ]
            }
        },
        "DisplayFilter._format_spaced_column": {
            "name": "_format_spaced_column",
            "location": 115,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "issue": [
                    "bool"
                ],
                "column": [
                    "str",
                    "Callable",
                    "Dict[str, Union[str, Set]]"
                ]
            }
        },
        "DisplayFilter._construct_header": {
            "name": "_construct_header",
            "location": 126,
            "return": [
                "Dict[str, Any]",
                "Dict[str, Union[str, int]]",
                "dict",
                "Dict[str, Dict[str, str]]",
                "List[dict]",
                "Dict[str, Type]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DisplayFilter.display_and_return_sorted_issues": {
            "name": "display_and_return_sorted_issues",
            "location": 134,
            "return": [
                "int",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "jira_manager": [
                    "bool",
                    "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                    "cmk.utils.type_defs.HostName",
                    "Callable",
                    "Optional[Callable[..., Any]]"
                ],
                "issues": [
                    "List[src.jira_issue.JiraIssue]",
                    "float",
                    "List[str]",
                    "bool"
                ],
                "start_idx": [
                    "int",
                    "str",
                    "bool"
                ],
                "filters": [
                    "float",
                    "Optional[int]",
                    "Optional[tuple]",
                    "Optional[Type[Any]]"
                ],
                "force_show_dependencies": [
                    "bool",
                    "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                    "cmk.utils.type_defs.HostName",
                    "Callable",
                    "Optional[Callable[..., Any]]"
                ]
            }
        },
        "DisplayFilter._format_jira_issue": {
            "name": "_format_jira_issue",
            "location": 172,
            "return": [
                "bool",
                "int",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "jira_manager": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "issue": [
                    "dict",
                    "Dict[str, Any]",
                    "Optional[Any]",
                    "str"
                ],
                "filters": [
                    "Dict[str, str]",
                    "Dict[str, Any]",
                    "dict"
                ],
                "displayed_issues": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "dependency": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ],
                "force_show_dependencies": [
                    "Optional[str]",
                    "bool",
                    "tuple",
                    "List[str]"
                ]
            }
        },
        "DisplayFilter._build_issue_row": {
            "name": "_build_issue_row",
            "location": 213,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "jira_manager": [
                    "JiraManager",
                    "bool",
                    "Optional[int]"
                ],
                "issue": [
                    "JiraIssue",
                    "str",
                    "dict",
                    "Dict[str, Dict[str, Any]]",
                    "Union[None, dict]"
                ],
                "filters": [
                    "Optional[int]",
                    "Optional[bool]",
                    "bool",
                    "dict",
                    "Optional[str]"
                ],
                "dependency": [
                    "Optional[str]",
                    "Optional[List[Any]]",
                    "list",
                    "Optional[List[str]]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[str, Any]]"
                ]
            }
        },
        "ColumnFilter.__init__": {
            "name": "__init__",
            "location": 257,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "column_name": [
                    "str"
                ],
                "filter_string": [
                    "str",
                    "Optional[str]",
                    "int",
                    "dict",
                    "Dict[str, str]"
                ],
                "filter_type": [
                    "str",
                    "Dict[str, object]"
                ]
            }
        },
        "Column.__init__": {
            "name": "__init__",
            "location": 266,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Optional[Sequence[Any]]"
                ],
                "pretty_name": [
                    "str",
                    "bool"
                ],
                "width": [
                    "bool",
                    "Optional[str]",
                    "List[str]",
                    "Optional[int]"
                ]
            }
        },
        "Column.is_dependency": {
            "name": "is_dependency",
            "location": 272,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Column.__str__": {
            "name": "__str__",
            "location": 275,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "argus-master/src/jenkins_connection.py": {
        "JenkinsConnection.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection_name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ],
                "url": [
                    "str",
                    "List[str]",
                    "list",
                    "Union[Dict, List]"
                ],
                "auth": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "JenkinsConnection.__str__": {
            "name": "__str__",
            "location": 74,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsConnection.__repr__": {
            "name": "__repr__",
            "location": 77,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsConnection.create_jenkins_obj": {
            "name": "create_jenkins_obj",
            "location": 80,
            "return": [
                "int",
                "str",
                "Dict[str, bool]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "int",
                    "list",
                    "Optional[str]"
                ],
                "username": [
                    "str",
                    "list"
                ],
                "password": [
                    "str",
                    "list",
                    "List[Tuple[str, Any]]"
                ]
            }
        },
        "JenkinsConnection.job_names": {
            "name": "job_names",
            "location": 100,
            "return": [
                "List[str]",
                "bool",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsConnection.jobs": {
            "name": "jobs",
            "location": 104,
            "return": [
                "str",
                "List[Dict]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsConnection.view_names": {
            "name": "view_names",
            "location": 108,
            "return": [
                "List[str]",
                "bool",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsConnection.views": {
            "name": "views",
            "location": 112,
            "return": [
                "str",
                "List[Dict]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsConnection.save_connection_config": {
            "name": "save_connection_config",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsConnection.load_connection_config": {
            "name": "load_connection_config",
            "location": 137,
            "return": [
                "None"
            ],
            "arguments": {
                "jenkins_manager": [
                    "str",
                    "bool",
                    "Union[str, TextIO]"
                ],
                "connection_name": [
                    "str",
                    "bool"
                ]
            }
        },
        "JenkinsConnection.download_jobs": {
            "name": "download_jobs",
            "location": 164,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "view_name": [
                    "str",
                    "List[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "JenkinsConnection.download_job_worker": {
            "name": "download_job_worker",
            "location": 194,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_name": [
                    "str",
                    "int",
                    "Optional[str]"
                ],
                "job_num": [
                    "int",
                    "str"
                ],
                "total_jobs": [
                    "int",
                    "str"
                ]
            }
        },
        "JenkinsConnection.needs_update": {
            "name": "needs_update",
            "location": 211,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "job_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "JenkinsConnection.download_single_job": {
            "name": "download_single_job",
            "location": 224,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "job_name": [
                    "str",
                    "Optional[str]",
                    "dict"
                ]
            }
        },
        "JenkinsConnection.print_job_report": {
            "name": "print_job_report",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "job_list": [
                    "List[src.jenkins_job.JenkinsJob]",
                    "Dict[str, Any]",
                    "bool",
                    "float",
                    "str",
                    "Optional[type]"
                ]
            }
        },
        "JenkinsConnection.sort_jobs": {
            "name": "sort_jobs",
            "location": 259,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "jobs": [
                    "dict",
                    "Mapping[str, str]",
                    "Optional[Tuple[str, ...]]",
                    "Dict[str, float]"
                ]
            }
        },
        "JenkinsConnection.print_test_report": {
            "name": "print_test_report",
            "location": 274,
            "return": [
                "None"
            ],
            "arguments": {
                "tests": [
                    "int",
                    "dict",
                    "str"
                ]
            }
        },
        "JenkinsConnection.sort_tests": {
            "name": "sort_tests",
            "location": 293,
            "return": [
                "bool",
                "str",
                "List[cmk.gui.plugins.visuals.utils.Filter]",
                "Dict[str, Tuple[str, str]]"
            ],
            "arguments": {
                "tests": [
                    "str",
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "raiden.utils.Dict"
                ]
            }
        },
        "JenkinsConnection.save_job_data": {
            "name": "save_job_data",
            "location": 306,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsConnection.get_list_of_views": {
            "name": "get_list_of_views",
            "location": 312,
            "return": [
                "List[str]",
                "list",
                "str",
                "List[List[str]]"
            ],
            "arguments": {
                "self": [],
                "nested_view": [
                    "Optional[str]"
                ]
            }
        },
        "JenkinsConnection.get_view": {
            "name": "get_view",
            "location": 318,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "view_name": [
                    "str"
                ]
            }
        }
    },
    "argus-master/src/jenkins_interface.py": {
        "download_builds": {
            "name": "download_builds",
            "location": 25,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "jenkins_obj": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "List[str]"
                ],
                "job_name": [
                    "str",
                    "Optional[str]",
                    "dict",
                    "List[str]"
                ]
            }
        },
        "JenkinsBuild.__init__": {
            "name": "__init__",
            "location": 49,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "build": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "argus-master/src/jenkins_job.py": {
        "JenkinsJob.__init__": {
            "name": "__init__",
            "location": 31,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "Optional[str]",
                    "str",
                    "Mapping[str, str]"
                ],
                "jenkins_builds": [
                    "bool",
                    "List[Callable]",
                    "str",
                    "Tuple[int, int, int, int, int, int, int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "JenkinsJob._get_build_failures": {
            "name": "_get_build_failures",
            "location": 107,
            "return": [
                "str",
                "cmk.utils.type_defs.HostName"
            ],
            "arguments": {
                "jenkins_builds": [
                    "List[src.jenkins_interface.JenkinsBuild]",
                    "bool",
                    "Iterable[str]",
                    "List[str]",
                    "Callable",
                    "str"
                ]
            }
        },
        "JenkinsJob._get_job_health": {
            "name": "_get_job_health",
            "location": 129,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "failed_builds": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "List[str]",
                    "str"
                ],
                "builds_checked": [
                    "int",
                    "bool",
                    "Optional[str]",
                    "List[str]",
                    "str"
                ]
            }
        },
        "JenkinsJob.serialize": {
            "name": "serialize",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "file_handle": [
                    "str",
                    "dict",
                    "IO[str]",
                    "IO"
                ]
            }
        },
        "JenkinsJob.deserialize": {
            "name": "deserialize",
            "location": 158,
            "return": [
                "str"
            ],
            "arguments": {
                "file_handle": [
                    "str",
                    "Exception",
                    "BinaryIO",
                    "int"
                ]
            }
        },
        "JenkinsJob.__eq__": {
            "name": "__eq__",
            "location": 167,
            "return": [
                "Dict[str, Any]",
                "str",
                "Dict[str, Dict[str, Any]]",
                "dict",
                "Dict[str, float]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "Union[str, \"Date\"]",
                    "Tuple[float, float]",
                    "Type"
                ]
            }
        },
        "JenkinsTest.__init__": {
            "name": "__init__",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "dict",
                    "List[str]",
                    "Dict[str, str]",
                    "int",
                    "str"
                ],
                "num_failures": [
                    "str",
                    "int"
                ],
                "builds_checked": [
                    "str",
                    "int"
                ],
                "num_recent_failures": [
                    "int",
                    "float"
                ],
                "recent_builds_checked": [
                    "int",
                    "float"
                ]
            }
        }
    },
    "argus-master/src/jenkins_manager.py": {
        "JenkinsManager.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "main_menu": [
                    "int",
                    "str",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "JenkinsManager.connection_names": {
            "name": "connection_names",
            "location": 66,
            "return": [
                "List[str]",
                "bool",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsManager.connections": {
            "name": "connections",
            "location": 70,
            "return": [
                "str",
                "List[Dict]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsManager.report_names": {
            "name": "report_names",
            "location": 74,
            "return": [
                "List[str]",
                "bool",
                "List[dict]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsManager.reports": {
            "name": "reports",
            "location": 78,
            "return": [
                "str",
                "List[Dict]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsManager.load_jenkins_config": {
            "name": "load_jenkins_config",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsManager.save_jenkins_config": {
            "name": "save_jenkins_config",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsManager.load_job_data": {
            "name": "load_job_data",
            "location": 128,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str"
                ]
            }
        },
        "JenkinsManager.select_active_connection": {
            "name": "select_active_connection",
            "location": 149,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsManager.select_active_report": {
            "name": "select_active_report",
            "location": 161,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsManager.add_custom_report": {
            "name": "add_custom_report",
            "location": 173,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsManager.remove_custom_report": {
            "name": "remove_custom_report",
            "location": 185,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsManager.add_custom_report_job": {
            "name": "add_custom_report_job",
            "location": 193,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JenkinsManager.remove_custom_report_job": {
            "name": "remove_custom_report_job",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsManager.list_custom_reports": {
            "name": "list_custom_reports",
            "location": 242,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsManager.view_custom_report": {
            "name": "view_custom_report",
            "location": 248,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsManager.get_custom_report": {
            "name": "get_custom_report",
            "location": 256,
            "return": [
                "str",
                "bool",
                "Union[utils.CWLObjectType, List[utils.CWLObjectType]]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "report_name": [
                    "str",
                    "List[str]",
                    "Set[str]",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "JenkinsManager.add_connection": {
            "name": "add_connection",
            "location": 261,
            "return": [
                "Optional[int]",
                "list",
                "Optional[str]",
                "type"
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsManager.remove_connection": {
            "name": "remove_connection",
            "location": 289,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsManager.get_connection": {
            "name": "get_connection",
            "location": 306,
            "return": [
                "str",
                "bool",
                "Union[utils.CWLObjectType, List[utils.CWLObjectType]]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "connection_name": [
                    "str"
                ]
            }
        },
        "JenkinsManager.load_connection_from_file": {
            "name": "load_connection_from_file",
            "location": 311,
            "return": [
                "str",
                "Optional[str]",
                "List[Dict[str, Any]]",
                "Optional[List[Any]]",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "file_name": [
                    "str"
                ]
            }
        },
        "JenkinsManager.list_connections": {
            "name": "list_connections",
            "location": 332,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsManager.download_jobs": {
            "name": "download_jobs",
            "location": 338,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsManager.view_cached_jobs": {
            "name": "view_cached_jobs",
            "location": 380,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsManager.view_num_jobs": {
            "name": "view_num_jobs",
            "location": 402,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsManager.print_job_options": {
            "name": "print_job_options",
            "location": 410,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jobs": [
                    "str",
                    "Union[int, float]"
                ],
                "connection": [
                    "bool",
                    "str",
                    "List[str]",
                    "Dict[str, Any]",
                    "utils.sap_hana.ParsedSection"
                ]
            }
        },
        "JenkinsManager.print_test_options": {
            "name": "print_test_options",
            "location": 445,
            "return": [
                "None"
            ],
            "arguments": {
                "tests": [
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "JenkinsManager.add_view": {
            "name": "add_view",
            "location": 462,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsManager.remove_view": {
            "name": "remove_view",
            "location": 484,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsManager.list_views": {
            "name": "list_views",
            "location": 506,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "argus-master/src/jenkins_report.py": {
        "JenkinsReport.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "report_name": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Collection[str]"
                ]
            }
        },
        "JenkinsReport.connection_names": {
            "name": "connection_names",
            "location": 36,
            "return": [
                "List[str]",
                "List[type]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsReport.job_names": {
            "name": "job_names",
            "location": 40,
            "return": [
                "List[str]",
                "bool",
                "Tuple[str]",
                "str",
                "FrozenSet[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsReport.job_dict": {
            "name": "job_dict",
            "location": 44,
            "return": [
                "Dict[str, Any]",
                "dict",
                "int",
                "Dict[int, List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsReport.__str__": {
            "name": "__str__",
            "location": 51,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsReport.__repr__": {
            "name": "__repr__",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsReport.save_report_config": {
            "name": "save_report_config",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsReport.load_report_config": {
            "name": "load_report_config",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "jenkins_manager": [
                    "Dict[str, Any]",
                    "bool",
                    "Optional[Dict[str, Any]]"
                ],
                "report_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "JenkinsReport.add_job_to_report": {
            "name": "add_job_to_report",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_name": [
                    "str",
                    "int"
                ],
                "connection_name": [
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "JenkinsReport.remove_job_from_report": {
            "name": "remove_job_from_report",
            "location": 92,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_name": [
                    "str",
                    "list"
                ],
                "connection_name": [
                    "str",
                    "list"
                ]
            }
        },
        "JenkinsReport.get_job_list": {
            "name": "get_job_list",
            "location": 102,
            "return": [
                "str",
                "List[Dict]",
                "List[int]",
                "List[str]",
                "List[List[Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "jenkins_manager": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "bytes"
                ]
            }
        },
        "JenkinsReport.print_report": {
            "name": "print_report",
            "location": 110,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_list": [
                    "\"Atom\"",
                    "list",
                    "List[dict]",
                    "Callable",
                    "List[Tuple[str, int]]",
                    "List[str]",
                    "dict"
                ]
            }
        }
    },
    "argus-master/src/jenkins_view.py": {
        "JenkinsView.__init__": {
            "name": "__init__",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "bool"
                ],
                "job_names": [
                    "str",
                    "Optional[List[Any]]",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "Optional[Union[str, Any]]",
                    "Optional[List[str]]",
                    "bool"
                ]
            }
        },
        "JenkinsView.save_view_config": {
            "name": "save_view_config",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JenkinsView.load_view_config": {
            "name": "load_view_config",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "jenkins_connection": [
                    "str",
                    "Optional[str]"
                ],
                "view_name": [
                    "str",
                    "Optional[str]",
                    "cmk.utils.type_defs.OptionalConfigSerial"
                ]
            }
        },
        "JenkinsView.add_job_to_view": {
            "name": "add_job_to_view",
            "location": 57,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_name": [
                    "str",
                    "Iterable[str]",
                    "Sequence[str]"
                ]
            }
        },
        "JenkinsView.remove_job_from_view": {
            "name": "remove_job_from_view",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "job_name": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "JenkinsView.__repr__": {
            "name": "__repr__",
            "location": 63,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "argus-master/src/jira_connection.py": {
        "JiraConnection.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "connection_name": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ],
                "url": [
                    "str"
                ],
                "user_name": [
                    "str"
                ],
                "password": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "JiraConnection.from_file": {
            "name": "from_file",
            "location": 83,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "connection_name": [
                    "str"
                ]
            }
        },
        "JiraConnection.save_config": {
            "name": "save_config",
            "location": 107,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraConnection.pick_single_assignee": {
            "name": "pick_single_assignee",
            "location": 120,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraConnection.pick_assignees": {
            "name": "pick_assignees",
            "location": 129,
            "return": [
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "max_count": [
                    "int",
                    "float",
                    "Tuple[int]",
                    "bytes",
                    "Tuple[int, int]"
                ]
            }
        },
        "JiraConnection.pick_project": {
            "name": "pick_project",
            "location": 193,
            "return": [
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "skip_cached": [
                    "bool",
                    "str",
                    "Match[Any]",
                    "dict"
                ]
            }
        },
        "JiraConnection._refresh_project_names": {
            "name": "_refresh_project_names",
            "location": 215,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraConnection.add_and_link_jira_project": {
            "name": "add_and_link_jira_project",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jira_project": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "JiraConnection.cache_new_jira_project": {
            "name": "cache_new_jira_project",
            "location": 234,
            "return": [
                "Iterator[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "jira_manager": [
                    "str",
                    "Dict[str, List[str]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "JiraConnection.pick_and_get_jira_project": {
            "name": "pick_and_get_jira_project",
            "location": 248,
            "return": [
                "str",
                "Optional[str]",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraConnection.maybe_get_cached_jira_project": {
            "name": "maybe_get_cached_jira_project",
            "location": 254,
            "return": [
                "Optional[dict]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "project_name": [
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "JiraConnection.cached_project_names": {
            "name": "cached_project_names",
            "location": 260,
            "return": [
                "List[str]",
                "List[dict]",
                "str",
                "commands.utils.types.FileList"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraConnection.cached_projects": {
            "name": "cached_projects",
            "location": 264,
            "return": [
                "str",
                "List[str]",
                "List[T]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraConnection.cached_jira_issues": {
            "name": "cached_jira_issues",
            "location": 268,
            "return": [
                "List[Dict]",
                "list",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float",
                "Union[List[float], List[int]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraConnection.update_all_cached_jira_projects": {
            "name": "update_all_cached_jira_projects",
            "location": 271,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraConnection.delete_cached_jira_project": {
            "name": "delete_cached_jira_project",
            "location": 275,
            "return": [
                "dict",
                "type",
                "Callable"
            ],
            "arguments": {
                "self": [],
                "cached_project_name": []
            }
        },
        "JiraConnection.delete_cached_project_data": {
            "name": "delete_cached_project_data",
            "location": 281,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraConnection.delete_owned_views": {
            "name": "delete_owned_views",
            "location": 285,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jira_manager": [
                    "str"
                ]
            }
        },
        "JiraConnection.contains_project": {
            "name": "contains_project",
            "location": 294,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "project_name": [
                    "str",
                    "Optional[str]",
                    "int",
                    "Type[T]",
                    "Dict[str, Any]"
                ]
            }
        },
        "JiraConnection.search_issues": {
            "name": "search_issues",
            "location": 298,
            "return": [
                "str",
                "Optional[str]",
                "List[str]",
                "bool",
                "Optional[float]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraConnection.url": {
            "name": "url",
            "location": 302,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraConnection._build_config": {
            "name": "_build_config",
            "location": 306,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "JiraConnection.__str__": {
            "name": "__str__",
            "location": 309,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "argus-master/src/jira_dashboard.py": {
        "JiraDashboard.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ],
                "jira_views": [
                    "int",
                    "str",
                    "raiden.utils.BlockIdentifier"
                ]
            }
        },
        "JiraDashboard.build": {
            "name": "build",
            "location": 42,
            "return": [
                "Optional[str]",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "Dict[str, Any]",
                    "Dict[int, str]",
                    "bool",
                    "T"
                ],
                "jira_views": [
                    "Dict[str, Any]",
                    "dict",
                    "Callable"
                ]
            }
        },
        "JiraDashboard.display_dashboard": {
            "name": "display_dashboard",
            "location": 78,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "jira_manager": [
                    "int",
                    "Union[int, float]",
                    "float",
                    "List['cirq.Qid']"
                ],
                "jira_views": [
                    "Dict[str, src.jira_view.JiraView]",
                    "str",
                    "int",
                    "dict"
                ]
            }
        },
        "JiraDashboard.edit_dashboard": {
            "name": "edit_dashboard",
            "location": 131,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "all_views": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "JiraDashboard.add_jira_view": {
            "name": "add_jira_view",
            "location": 152,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jira_view": [
                    "dict",
                    "Dict[str, Any]",
                    "str",
                    "Dict[str, str]"
                ]
            }
        },
        "JiraDashboard.remove_jira_view": {
            "name": "remove_jira_view",
            "location": 155,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jira_view_name": [
                    "str"
                ]
            }
        },
        "JiraDashboard.contains_jira_view": {
            "name": "contains_jira_view",
            "location": 159,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "jira_view_name": [
                    "cmk.utils.type_defs.CheckPluginName",
                    "str",
                    "bool",
                    "Container[str]"
                ]
            }
        },
        "JiraDashboard.save_config": {
            "name": "save_config",
            "location": 162,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_parser": [
                    "list",
                    "dict",
                    "List[str]",
                    "cmk.utils.type_defs.HostAddress"
                ]
            }
        },
        "JiraDashboard.__str__": {
            "name": "__str__",
            "location": 165,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "argus-master/src/jira_dependency.py": {
        "JiraDependency.__init__": {
            "name": "__init__",
            "location": 71,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "raw_data": [
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Mapping"
                ],
                "jira_manager": [
                    "JiraManager"
                ]
            }
        },
        "JiraDependency.is_known": {
            "name": "is_known",
            "location": 97,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraDependency.pretty_type": {
            "name": "pretty_type",
            "location": 104,
            "return": [
                "Optional[bool]",
                "Optional[str]",
                "Optional[type]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraDependency.target_issue_key": {
            "name": "target_issue_key",
            "location": 116,
            "return": [
                "str",
                "bytes",
                "Sequence[Sequence[Any]]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraDependency.print_unknown_dependency_types": {
            "name": "print_unknown_dependency_types",
            "location": 126,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "JiraDependency.validate_input_data": {
            "name": "validate_input_data",
            "location": 134,
            "return": [
                "str",
                "List[str]",
                "Dict[str, Any]",
                "Sequence[str]",
                "bool"
            ],
            "arguments": {
                "raw_data": [
                    "str",
                    "bytes",
                    "Dict[str, Any]",
                    "AnyStr"
                ]
            }
        },
        "JiraDependency.get_issue_key_from_dep_str": {
            "name": "get_issue_key_from_dep_str",
            "location": 144,
            "return": [
                "str",
                "bool",
                "Tuple[Any, Any, Any]",
                "Dict[str, Any]",
                "Dict[str, Optional[str]]",
                "Dict[str, str]"
            ],
            "arguments": {
                "raw_data": [
                    "str",
                    "dict",
                    "Mapping"
                ]
            }
        },
        "JiraDependency.__str__": {
            "name": "__str__",
            "location": 148,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraDependency.__eq__": {
            "name": "__eq__",
            "location": 151,
            "return": [
                "str",
                "bytes",
                "Union[bytes, bytearray]"
            ],
            "arguments": {
                "self": [],
                "other": [
                    "bool",
                    "int",
                    "Callable",
                    "bytes"
                ]
            }
        },
        "JiraDependency.__hash__": {
            "name": "__hash__",
            "location": 156,
            "return": [
                "int",
                "Optional[float]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "argus-master/src/jira_filter.py": {
        "JiraFilter.__init__": {
            "name": "__init__",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "Sequence[str]",
                    "bool",
                    "Optional[Sequence[str]]",
                    "Optional[List[\"DeliveryItem\"]]",
                    "List[\"DeliveryItem\"]"
                ],
                "jira_connection": [
                    "int",
                    "str",
                    "float",
                    "Callable",
                    "bool"
                ],
                "query_type": [
                    "str",
                    "int",
                    "Iterable[str]",
                    "Literal",
                    "Optional[bool]",
                    "bool"
                ],
                "includes": [
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Callable",
                    "bool",
                    "Optional[Any]"
                ],
                "excludes": [
                    "Optional[List[str]]",
                    "Optional[str]",
                    "Callable",
                    "bool",
                    "Optional[Any]"
                ]
            }
        },
        "JiraFilter.include": {
            "name": "include",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "List[str]",
                    "str",
                    "dict",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "JiraFilter.exclude": {
            "name": "exclude",
            "location": 62,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[str]",
                    "Sequence[Any]",
                    "Optional[List]"
                ]
            }
        },
        "JiraFilter.remove_filter": {
            "name": "remove_filter",
            "location": 69,
            "return": [
                "Iterator[Dict[str, str]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraFilter.is_empty": {
            "name": "is_empty",
            "location": 83,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraFilter.set_or": {
            "name": "set_or",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraFilter.set_and": {
            "name": "set_and",
            "location": 89,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraFilter.query_type": {
            "name": "query_type",
            "location": 92,
            "return": [
                "List[str]",
                "bool",
                "str",
                "Optional[\"FieldContainer\"]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraFilter._translate_field": {
            "name": "_translate_field",
            "location": 95,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]",
                "Optional[List[str]]",
                "Optional[Sequence[str]]",
                "dict"
            ],
            "arguments": {
                "self": [],
                "jira_issue": [
                    "hackathon.utils.utils.DataMessage",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "JiraFilter._internal_matching_operation": {
            "name": "_internal_matching_operation",
            "location": 107,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "jira_issue": [
                    "Callable",
                    "bool",
                    "str",
                    "list",
                    "Union[Callable, str]"
                ],
                "to_match": [
                    "List[str]",
                    "bool",
                    "list",
                    "Sequence[Sequence[int]]"
                ]
            }
        },
        "JiraFilter.includes_jira_issue": {
            "name": "includes_jira_issue",
            "location": 134,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "jira_issue": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "JiraFilter.excludes_jira_issue": {
            "name": "excludes_jira_issue",
            "location": 137,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "jira_issue": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "JiraFilter.extract_value": {
            "name": "extract_value",
            "location": 140,
            "return": [
                "str",
                "Tuple[str]",
                "Optional[str]",
                "Dict[str, Callable]",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "jira_issue": [
                    "int",
                    "str",
                    "Tuple[int, int]",
                    "Tuple[str, int]",
                    "T",
                    "float"
                ]
            }
        },
        "JiraFilter.field_name": {
            "name": "field_name",
            "location": 147,
            "return": [
                "List[str]",
                "Tuple[Any, Any, Any]",
                "MutableMapping[str, int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraFilter.set_field_name": {
            "name": "set_field_name",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "List[str]",
                    "Dict[str, str]"
                ]
            }
        },
        "JiraFilter.from_file": {
            "name": "from_file",
            "location": 154,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "cls": [
                    "bool"
                ],
                "jira_manager": [
                    "str",
                    "float",
                    "JiraManager",
                    "bool"
                ],
                "filter_field": [
                    "Dict[str, Any]",
                    "dict",
                    "Callable",
                    "bool"
                ],
                "config_parser": [
                    "Optional[str]",
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "JiraFilter.save_config": {
            "name": "save_config",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_parser": [
                    "configparser.RawConfigParser",
                    "str",
                    "List[str]"
                ]
            }
        },
        "JiraFilter.__str__": {
            "name": "__str__",
            "location": 186,
            "return": [
                "str",
                "Type[BaseException]",
                "BaseException"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "argus-master/src/jira_issue.py": {
        "JiraIssue.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jira_connection": [
                    "str",
                    "list",
                    "Dict[str, Any]"
                ],
                "issue": [
                    "dict",
                    "str",
                    "jira.Issue",
                    "List[Dict[str, Any]]",
                    "Dict[str, str]"
                ]
            }
        },
        "JiraIssue.non_cached_issue": {
            "name": "non_cached_issue",
            "location": 110,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "issue_key": [
                    "str",
                    "Dict[str, Any]",
                    "bool",
                    "Sequence[str]"
                ]
            }
        },
        "JiraIssue.matches": {
            "name": "matches",
            "location": 126,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "jira_connection": [
                    "str",
                    "Dict[str, Any]",
                    "dict",
                    "IO"
                ],
                "find": [
                    "str",
                    "bool",
                    "Optional[int]",
                    "Optional[List[str]]"
                ]
            }
        },
        "JiraIssue.matches_any": {
            "name": "matches_any",
            "location": 141,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "jira_connection": [
                    "Optional[str]",
                    "str",
                    "float",
                    "Optional[Dict]",
                    "dict"
                ],
                "to_match": [
                    "List[str]",
                    "float",
                    "Union[float, int]",
                    "int"
                ]
            }
        },
        "JiraIssue.get_project_from_ticket": {
            "name": "get_project_from_ticket",
            "location": 155,
            "return": [
                "str",
                "List[str]",
                "Set[cmk.utils.type_defs.HostName]"
            ],
            "arguments": {
                "ticket_name": [
                    "str",
                    "Tuple[str]"
                ]
            }
        },
        "JiraIssue.is_open": {
            "name": "is_open",
            "location": 161,
            "return": [
                "bool",
                "Callable",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraIssue.is_closed": {
            "name": "is_closed",
            "location": 165,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraIssue.project_name": {
            "name": "project_name",
            "location": 169,
            "return": [
                "str",
                "Optional[\"permissions_doc\"]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraIssue.resolved": {
            "name": "resolved",
            "location": 173,
            "return": [
                "type",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraIssue.assignee": {
            "name": "assignee",
            "location": 179,
            "return": [
                "type",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraIssue.labels": {
            "name": "labels",
            "location": 184,
            "return": [
                "int",
                "str",
                "bool",
                "List[List[str]]",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraIssue.issuetype": {
            "name": "issuetype",
            "location": 190,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraIssue.priority": {
            "name": "priority",
            "location": 194,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraIssue.mid_low_prio": {
            "name": "mid_low_prio",
            "location": 198,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraIssue.status": {
            "name": "status",
            "location": 203,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraIssue.resolution": {
            "name": "resolution",
            "location": 207,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraIssue.is_feature": {
            "name": "is_feature",
            "location": 211,
            "return": [
                "Iterable[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraIssue.is_test": {
            "name": "is_test",
            "location": 215,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraIssue.is_task": {
            "name": "is_task",
            "location": 221,
            "return": [
                "bool",
                "Optional[bool]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraIssue.not_test": {
            "name": "not_test",
            "location": 225,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraIssue.updated": {
            "name": "updated",
            "location": 229,
            "return": [
                "Optional[str]",
                "Optional[Any]",
                "List[str]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraIssue.has_fix_version": {
            "name": "has_fix_version",
            "location": 234,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "version": [
                    "str",
                    "int",
                    "List[str]",
                    "Sequence[Dict[str, str]]"
                ]
            }
        },
        "JiraIssue.is_owned_by": {
            "name": "is_owned_by",
            "location": 237,
            "return": [
                "str",
                "Type"
            ],
            "arguments": {
                "self": [],
                "jira_connection": [
                    "str",
                    "int"
                ],
                "name": [
                    "str",
                    "int"
                ]
            }
        },
        "JiraIssue.get_reviewer": {
            "name": "get_reviewer",
            "location": 243,
            "return": [
                "Optional[str]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "Optional[Any]",
                "bool",
                "Optional[Dict]"
            ],
            "arguments": {
                "self": [],
                "jira_connection": [
                    "str",
                    "bool"
                ]
            }
        },
        "JiraIssue.is_reviewer": {
            "name": "is_reviewer",
            "location": 247,
            "return": [
                "bool",
                "Sequence[Any]",
                "Callable[..., None]",
                "Optional[type]",
                "Type",
                "Union[type, Tuple[type, ...]]"
            ],
            "arguments": {
                "self": [],
                "jira_connection": [
                    "str"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "JiraIssue.matches_field": {
            "name": "matches_field",
            "location": 254,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "jira_connection": [
                    "str",
                    "List[Tuple[str, ...]]"
                ],
                "field": [
                    "str",
                    "List[Tuple[str, ...]]"
                ],
                "value": [
                    "str",
                    "Optional[Any]"
                ]
            }
        },
        "JiraIssue.has_label": {
            "name": "has_label",
            "location": 264,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "label": [
                    "str",
                    "int",
                    "Optional[Callable]",
                    "Set[str]"
                ]
            }
        },
        "JiraIssue.matches_label": {
            "name": "matches_label",
            "location": 270,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "to_match": [
                    "str",
                    "int",
                    "bytes"
                ],
                "case_sensitive": [
                    "str"
                ]
            }
        },
        "JiraIssue.get_jira_project": {
            "name": "get_jira_project",
            "location": 281,
            "return": [
                "str",
                "bool",
                "List[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "jira_connection": [
                    "str"
                ]
            }
        },
        "JiraIssue.translate_custom_field": {
            "name": "translate_custom_field",
            "location": 291,
            "return": [
                "bool",
                "Tuple[float, float]",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "jira_connection": [
                    "Optional[str]"
                ],
                "field": [
                    "str",
                    "Callable",
                    "float"
                ]
            }
        },
        "JiraIssue.get_value": {
            "name": "get_value",
            "location": 295,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "jira_connection": [
                    "str",
                    "bool",
                    "list",
                    "Sequence[Sequence[str]]"
                ],
                "field": [
                    "str",
                    "bool",
                    "list",
                    "Sequence[Sequence[str]]"
                ]
            }
        },
        "JiraIssue.component_list": {
            "name": "component_list",
            "location": 302,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraIssue.resolve_dependencies": {
            "name": "resolve_dependencies",
            "location": 312,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jira_manager": [
                    "str",
                    "list"
                ]
            }
        },
        "JiraIssue.__hash__": {
            "name": "__hash__",
            "location": 340,
            "return": [
                "str",
                "int",
                "Exception",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraIssue.pretty_print": {
            "name": "pretty_print",
            "location": 347,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "jira_connection": [
                    "str",
                    "dict"
                ]
            }
        },
        "JiraIssue.__str__": {
            "name": "__str__",
            "location": 357,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraIssue.serialize": {
            "name": "serialize",
            "location": 365,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "file_handle": [
                    "str",
                    "dict",
                    "IO[str]",
                    "IO"
                ]
            }
        },
        "JiraIssue.deserialize": {
            "name": "deserialize",
            "location": 372,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "file_handle": [
                    "str"
                ]
            }
        }
    },
    "argus-master/src/jira_manager.py": {
        "JiraManager.__init__": {
            "name": "__init__",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "team_manager": [
                    "Dict[str, Any]",
                    "src.core.model.scripScript",
                    "int",
                    "str"
                ]
            }
        },
        "JiraManager.add_connection": {
            "name": "add_connection",
            "location": 200,
            "return": [
                "Optional[int]",
                "Optional[bool]",
                "str",
                "Optional[str]",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "prompt": [
                    "int",
                    "str"
                ]
            }
        },
        "JiraManager.remove_connection": {
            "name": "remove_connection",
            "location": 235,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraManager.get_jira_connection": {
            "name": "get_jira_connection",
            "location": 250,
            "return": [
                "str",
                "bool",
                "Union[utils.CWLObjectType, List[utils.CWLObjectType]]",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "self": [],
                "connection_name": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "JiraManager.get_jira_issue": {
            "name": "get_jira_issue",
            "location": 255,
            "return": [
                "str",
                "Optional[str]",
                "bool",
                "List[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "jira_issue_key": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "JiraManager.delete_jira_view": {
            "name": "delete_jira_view",
            "location": 266,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jira_view_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "JiraManager.possible_connections": {
            "name": "possible_connections",
            "location": 270,
            "return": [
                "List[str]",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraManager.list_all_jira_views": {
            "name": "list_all_jira_views",
            "location": 273,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraManager.display_view": {
            "name": "display_view",
            "location": 278,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraManager.add_view": {
            "name": "add_view",
            "location": 285,
            "return": [
                "Optional[int]",
                "type",
                "list",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraManager.edit_view": {
            "name": "edit_view",
            "location": 300,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraManager.remove_view": {
            "name": "remove_view",
            "location": 318,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraManager.list_dashboards": {
            "name": "list_dashboards",
            "location": 343,
            "return": [
                "bytes",
                "int",
                "raiden.utils.Signature",
                "utils.Encoded"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraManager.display_dashboard": {
            "name": "display_dashboard",
            "location": 353,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraManager.add_dashboard": {
            "name": "add_dashboard",
            "location": 363,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "JiraManager.edit_dashboard": {
            "name": "edit_dashboard",
            "location": 370,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraManager.remove_dashboard": {
            "name": "remove_dashboard",
            "location": 378,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraManager.display_escalations": {
            "name": "display_escalations",
            "location": 387,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraManager.run_debug": {
            "name": "run_debug",
            "location": 416,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraManager.search_projects": {
            "name": "search_projects",
            "location": 464,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraManager.is_project_name_used": {
            "name": "is_project_name_used",
            "location": 514,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "JiraManager._resolve_issue_dependencies": {
            "name": "_resolve_issue_dependencies",
            "location": 524,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraManager.create_non_cached_issue": {
            "name": "create_non_cached_issue",
            "location": 539,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "issue_key": [
                    "str",
                    "int"
                ]
            }
        },
        "JiraManager.list_projects": {
            "name": "list_projects",
            "location": 545,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraManager.change_password": {
            "name": "change_password",
            "location": 556,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraManager.add_multi_jira_dashboard": {
            "name": "add_multi_jira_dashboard",
            "location": 560,
            "return": [
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraManager.add_label_view": {
            "name": "add_label_view",
            "location": 623,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "cmk.utils.type_defs.HostName",
                "cmk.utils.type_defs.ServiceName",
                "cmk.utils.type_defs.Item"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraManager.report_fix_version": {
            "name": "report_fix_version",
            "location": 648,
            "return": [
                "Iterator[object]",
                "set",
                "Union[tuple, list]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraManager._prompt_connection_add_if_none": {
            "name": "_prompt_connection_add_if_none",
            "location": 711,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraManager.pick_jira_connection": {
            "name": "pick_jira_connection",
            "location": 723,
            "return": [
                "Optional[str]",
                "type",
                "Optional[List[Any]]",
                "list"
            ],
            "arguments": {
                "self": [],
                "prompt": [
                    "str",
                    "Union[str, Dict]",
                    "Dict[str, Any]",
                    "dict",
                    "OrderedDict"
                ]
            }
        },
        "JiraManager.jira_connections": {
            "name": "jira_connections",
            "location": 733,
            "return": [
                "str",
                "List[Dict]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraManager.get_all_cached_jira_projects": {
            "name": "get_all_cached_jira_projects",
            "location": 736,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraManager.maybe_get_cached_jira_project": {
            "name": "maybe_get_cached_jira_project",
            "location": 743,
            "return": [
                "str",
                "bool",
                "Optional[str]",
                "List[Dict]"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "bool"
                ],
                "project_name": [
                    "str"
                ]
            }
        },
        "JiraManager.maybe_get_cached_jira_project_no_url": {
            "name": "maybe_get_cached_jira_project_no_url",
            "location": 749,
            "return": [
                "Optional[str]",
                "Union[str, None]",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": [],
                "project_name": [
                    "str"
                ]
            }
        },
        "JiraManager.cache_new_jira_project_data": {
            "name": "cache_new_jira_project_data",
            "location": 760,
            "return": [
                "Iterator[Dict[str, str]]",
                "Iterator[List[T]]",
                "Iterator[bytes]",
                "Iterable[Sequence[T]]",
                "Generator"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraManager.delete_cached_jira_project": {
            "name": "delete_cached_jira_project",
            "location": 772,
            "return": [
                "Dict[str, Any]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraManager.list_jira_connections": {
            "name": "list_jira_connections",
            "location": 788,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraManager.update_cached_jira_project_data": {
            "name": "update_cached_jira_project_data",
            "location": 793,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "needs_pause": [
                    "Dict[str, Any]",
                    "int",
                    "str",
                    "Exception",
                    "List[str]",
                    "Callable"
                ]
            }
        },
        "JiraManager.jira_connection_count": {
            "name": "jira_connection_count",
            "location": 799,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraManager._save_config": {
            "name": "_save_config",
            "location": 802,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "argus-master/src/jira_project.py": {
        "JiraProject.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jira_connection": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "list"
                ],
                "project_name": [
                    "str"
                ],
                "url": [
                    "Optional[str]",
                    "bool",
                    "Optional[Dict[str, str]]",
                    "str"
                ],
                "custom_fields": [
                    "Optional[str]",
                    "str"
                ],
                "issues": [
                    "Optional[str]",
                    "Optional[bool]",
                    "Optional[Union[str, Any]]",
                    "Optional[int]"
                ],
                "updated": [
                    "dict",
                    "Optional[MutableMapping]"
                ]
            }
        },
        "JiraProject.url": {
            "name": "url",
            "location": 85,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraProject.add_field_translations_from_file": {
            "name": "add_field_translations_from_file",
            "location": 88,
            "return": [
                "Set[str]",
                "str",
                "Callable[..., None]",
                "dict",
                "List[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraProject.clean_ts": {
            "name": "clean_ts",
            "location": 126,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "ts": [
                    "str",
                    "Match"
                ]
            }
        },
        "JiraProject.from_file": {
            "name": "from_file",
            "location": 136,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Optional[Tuple[str, str]]",
                "Optional[str]",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "Callable[[Optional], None]",
                    "Iterable[str]",
                    "List[str]"
                ],
                "file_name": [
                    "str"
                ],
                "jira_manager": [
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "JiraProject.save_config": {
            "name": "save_config",
            "location": 196,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraProject.delete_on_disk_files": {
            "name": "delete_on_disk_files",
            "location": 216,
            "return": [
                "int",
                "type",
                "Callable",
                "str",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraProject.refresh": {
            "name": "refresh",
            "location": 228,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraProject.link_jira_connection": {
            "name": "link_jira_connection",
            "location": 244,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jira_connection": [
                    "str",
                    "Optional[int]"
                ]
            }
        },
        "JiraProject.config_file": {
            "name": "config_file",
            "location": 250,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraProject._data_file": {
            "name": "_data_file",
            "location": 254,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "Dict[str, str]",
                "Dict[str, List[str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraProject.data_file": {
            "name": "data_file",
            "location": 259,
            "return": [
                "str"
            ],
            "arguments": {
                "connection_name": [
                    "str"
                ],
                "project_name": [
                    "str"
                ]
            }
        },
        "JiraProject.get_matching_issues": {
            "name": "get_matching_issues",
            "location": 262,
            "return": [
                "str",
                "bool",
                "dict",
                "set",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "search_string": [
                    "str",
                    "List[str]",
                    "int",
                    "Optional[list]"
                ],
                "search_type": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "JiraProject.owns_issue": {
            "name": "owns_issue",
            "location": 278,
            "return": [
                "cmk.utils.type_defs.HostName",
                "str"
            ],
            "arguments": {
                "self": [],
                "issue": [
                    "str",
                    "type",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "JiraProject.get_issue": {
            "name": "get_issue",
            "location": 285,
            "return": [
                "List[str]",
                "Optional[src.autoks.core.hyperprior.HyperpriorMap]",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "str",
                "bool",
                "Optional[int]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "issue_key": [
                    "bytes",
                    "str"
                ]
            }
        },
        "JiraProject.translate_custom_field": {
            "name": "translate_custom_field",
            "location": 288,
            "return": [
                "str",
                "Iterable[cmk.utils.type_defs.SectionName]",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": [],
                "field_name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "JiraProject.resolve_dependencies": {
            "name": "resolve_dependencies",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jira_manager": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "JiraProject.__str__": {
            "name": "__str__",
            "location": 303,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "argus-master/src/jira_utils.py": {
        "JiraUtils.get_issues_by_query": {
            "name": "get_issues_by_query",
            "location": 44,
            "return": [
                "str",
                "List[str]",
                "dict",
                "List[Tuple[str, str]]",
                "set"
            ],
            "arguments": {
                "jira_connection": [
                    "str",
                    "Union[int, str]",
                    "Optional[cmk.utils.type_defs.HostAddress]"
                ],
                "jql": [
                    "str",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "JiraUtils.get_single_issue": {
            "name": "get_single_issue",
            "location": 75,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "jira_connection": [
                    "str",
                    "Optional[\"Address\"]"
                ],
                "issue_key": [
                    "List[str]",
                    "str",
                    "int",
                    "list",
                    "Set[str]"
                ]
            }
        },
        "JiraUtils.get_issues_for_project": {
            "name": "get_issues_for_project",
            "location": 89,
            "return": [
                "str",
                "dict",
                "bool"
            ],
            "arguments": {
                "jira_connection": [
                    "str",
                    "int",
                    "float",
                    "JiraConnection",
                    "Optional[str]"
                ],
                "project_name": [
                    "str"
                ],
                "update_cutoff": [
                    "Optional[str]",
                    "str",
                    "Optional[Type]"
                ]
            }
        },
        "JiraUtils.retrieve_field_value": {
            "name": "retrieve_field_value",
            "location": 122,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "Iterable[str]",
                    "Set[str]"
                ],
                "jira_manager": [
                    "JiraManager",
                    "cmk.utils.type_defs.HostName",
                    "NamedTuple"
                ],
                "issue": [
                    "src.jira_issue.JiraIssue",
                    "str",
                    "Type[T]"
                ],
                "field": [
                    "str"
                ]
            }
        },
        "JiraUtils.sort_jira_issues": {
            "name": "sort_jira_issues",
            "location": 138,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "jira_issues": [
                    "List[src.jira_issue.JiraIssue]",
                    "list",
                    "Iterable[Tuple[str, str]]",
                    "List[dict]",
                    "List[Tuple[Any, Any]]",
                    "List[tuple]"
                ]
            }
        },
        "JiraUtils.sort_custom_jiraissues_by_key": {
            "name": "sort_custom_jiraissues_by_key",
            "location": 144,
            "return": [
                "List[str]",
                "str",
                "dict",
                "list",
                "Union[int, None]"
            ],
            "arguments": {
                "issues": [
                    "List[src.jira_issue.JiraIssue]",
                    "str",
                    "List[Tuple]",
                    "int",
                    "bool"
                ]
            }
        },
        "JiraUtils.open_issue_in_browser": {
            "name": "open_issue_in_browser",
            "location": 170,
            "return": [
                "None"
            ],
            "arguments": {
                "base_url": [
                    "str",
                    "bool"
                ],
                "issue_key": [
                    "str",
                    "bool"
                ]
            }
        },
        "JiraUtils.get_cached_jira": {
            "name": "get_cached_jira",
            "location": 176,
            "return": [
                "str",
                "List[Dict[str, Any]]",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Tuple[str]",
                    "Dict[str, Any]",
                    "Tuple[str, str]"
                ],
                "key": [
                    "str",
                    "Tuple[str]",
                    "Dict[str, Any]",
                    "Tuple[str, str]"
                ]
            }
        },
        "JiraUtils.save_argus_data": {
            "name": "save_argus_data",
            "location": 182,
            "return": [
                "None"
            ],
            "arguments": {
                "items": [
                    "List[src.jira_issue.JiraIssue]",
                    "bool",
                    "Iterable[str]",
                    "str",
                    "List[str]",
                    "Union[str, List[Any]]"
                ],
                "file_name": [
                    "str"
                ]
            }
        }
    },
    "argus-master/src/jira_view.py": {
        "JiraView.__init__": {
            "name": "__init__",
            "location": 40,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ],
                "jira_connection": [
                    "bool",
                    "int",
                    "str",
                    "List[Dict[str, Any]]",
                    "Optional[Tuple[int, int]]",
                    "bytes",
                    "Iterable[List[Any]]"
                ]
            }
        },
        "JiraView.add_single_filter": {
            "name": "add_single_filter",
            "location": 51,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "List[str]"
                ],
                "value": [
                    "str",
                    "Optional[str]"
                ],
                "filter_type": [
                    "str",
                    "Type",
                    "List[str]"
                ],
                "and_or": [
                    "str",
                    "type"
                ]
            }
        },
        "JiraView.add_raw_filter": {
            "name": "add_raw_filter",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jira_filter": [
                    "str",
                    "Union[str, int]",
                    "src.jira_filter.JiraFilter"
                ]
            }
        },
        "JiraView.owned_by": {
            "name": "owned_by",
            "location": 73,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "jira_connection": [
                    "str",
                    "bool",
                    "List[Dict[str, Any]]",
                    "int"
                ]
            }
        },
        "JiraView._build_config": {
            "name": "_build_config",
            "location": 77,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool"
                ],
                "name": [
                    "str"
                ]
            }
        },
        "JiraView.delete_config": {
            "name": "delete_config",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraView.from_file": {
            "name": "from_file",
            "location": 85,
            "return": [
                "dict",
                "str",
                "int",
                "List[int]"
            ],
            "arguments": {
                "cls": [
                    "str"
                ],
                "jira_manager": [
                    "bool",
                    "Optional[str]",
                    "dict"
                ],
                "config_file_name": [
                    "str",
                    "Optional[str]"
                ],
                "team_manager": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "JiraView.save_config": {
            "name": "save_config",
            "location": 114,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraView.display_view": {
            "name": "display_view",
            "location": 126,
            "return": [
                "Iterator"
            ],
            "arguments": {
                "self": [],
                "jira_manager": [
                    "str",
                    "IO"
                ]
            }
        },
        "JiraView.edit_view": {
            "name": "edit_view",
            "location": 166,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "jira_manager": [
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "team_manager": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "JiraView.edit_team": {
            "name": "edit_team",
            "location": 191,
            "return": [],
            "arguments": {
                "self": [],
                "team_manager": [
                    "int"
                ]
            }
        },
        "JiraView.add_filter": {
            "name": "add_filter",
            "location": 222,
            "return": [
                "utils.mssql_counters.Section",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraView.remove_filter": {
            "name": "remove_filter",
            "location": 266,
            "return": [
                "Iterable[Mapping[str, Any]]",
                "Optional[bool]",
                "DefaultDict"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraView.is_empty": {
            "name": "is_empty",
            "location": 275,
            "return": [
                "bool",
                "int",
                "cmk.utils.type_defs.HostName",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraView.get_issues": {
            "name": "get_issues",
            "location": 278,
            "return": [
                "str",
                "bool",
                "OrderedDict",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "string_matches": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "JiraView.contains_team": {
            "name": "contains_team",
            "location": 369,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "team": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "JiraView.clone": {
            "name": "clone",
            "location": 372,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraView.__str__": {
            "name": "__str__",
            "location": 378,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "argus-master/src/main_menu.py": {
        "MainMenu.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jira_manager": [
                    "Optional[\"NetworkManager\"]"
                ],
                "team_manager": [
                    "float",
                    "int"
                ],
                "options": [
                    "Optional[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "MainMenu.go_to_main_menu": {
            "name": "go_to_main_menu",
            "location": 213,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainMenu.go_to_dashboards_menu": {
            "name": "go_to_dashboards_menu",
            "location": 217,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainMenu.go_to_jira_views_menu": {
            "name": "go_to_jira_views_menu",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainMenu.go_to_reports_menu": {
            "name": "go_to_reports_menu",
            "location": 225,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainMenu.go_to_projects_menu": {
            "name": "go_to_projects_menu",
            "location": 229,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainMenu.go_to_teams_menu": {
            "name": "go_to_teams_menu",
            "location": 233,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainMenu.go_to_jira_connections_menu": {
            "name": "go_to_jira_connections_menu",
            "location": 237,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainMenu.go_to_jenkins_menu": {
            "name": "go_to_jenkins_menu",
            "location": 241,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainMenu.go_to_jenkins_reports_manager_menu": {
            "name": "go_to_jenkins_reports_manager_menu",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainMenu.go_to_jenkins_connections_manager_menu": {
            "name": "go_to_jenkins_connections_manager_menu",
            "location": 249,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainMenu.go_to_jenkins_connection_menu": {
            "name": "go_to_jenkins_connection_menu",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainMenu.go_to_jenkins_report_menu": {
            "name": "go_to_jenkins_report_menu",
            "location": 257,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainMenu.go_to_options_menu": {
            "name": "go_to_options_menu",
            "location": 261,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainMenu.display": {
            "name": "display",
            "location": 265,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainMenu._add_view": {
            "name": "_add_view",
            "location": 290,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainMenu._edit_view": {
            "name": "_edit_view",
            "location": 293,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainMenu._add_team": {
            "name": "_add_team",
            "location": 296,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainMenu._edit_team": {
            "name": "_edit_team",
            "location": 299,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainMenu._change_password": {
            "name": "_change_password",
            "location": 302,
            "return": [
                "str",
                "Union[tuple, list]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainMenu._change_browser": {
            "name": "_change_browser",
            "location": 311,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainMenu._change_debug": {
            "name": "_change_debug",
            "location": 315,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainMenu._change_show_dependencies": {
            "name": "_change_show_dependencies",
            "location": 320,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainMenu._change_dependency_type": {
            "name": "_change_dependency_type",
            "location": 325,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainMenu._print_dependency_show_state": {
            "name": "_print_dependency_show_state",
            "location": 330,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainMenu._add_multi_jira_dashboard": {
            "name": "_add_multi_jira_dashboard",
            "location": 333,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainMenu._run_team_report": {
            "name": "_run_team_report",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainMenu._run_org_report": {
            "name": "_run_org_report",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainMenu.add_linked_member": {
            "name": "add_linked_member",
            "location": 342,
            "return": [
                "str",
                "Union[tuple, list]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainMenu.signal_handler": {
            "name": "signal_handler",
            "location": 349,
            "return": [
                "None"
            ],
            "arguments": {
                "signal": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "frame": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "MainMenu._save_config": {
            "name": "_save_config",
            "location": 359,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MainMenu._load_config": {
            "name": "_load_config",
            "location": 368,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MainMenu._display_readme": {
            "name": "_display_readme",
            "location": 381,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "argus-master/src/member_issues_by_status.py": {
        "JiraUserName.__init__": {
            "name": "__init__",
            "location": 38,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_name": [
                    "str",
                    "Optional[str]"
                ],
                "jira_connection_name": [
                    "str",
                    "Set[str]",
                    "Optional[str]",
                    "bool"
                ],
                "team_name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "JiraUserName.to_combined_string": {
            "name": "to_combined_string",
            "location": 44,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JiraUserName.from_combined_string": {
            "name": "from_combined_string",
            "location": 48,
            "return": [
                "str",
                "Optional[str]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Set[str]",
                    "bool",
                    "Union[str, Pattern[str]]"
                ],
                "combined_string": [
                    "str"
                ]
            }
        },
        "JiraUserName.__str__": {
            "name": "__str__",
            "location": 54,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberIssuesByStatus.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jira_user_name": [
                    "str",
                    "dict"
                ]
            }
        },
        "MemberIssuesByStatus.clone_empty": {
            "name": "clone_empty",
            "location": 76,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberIssuesByStatus.save_config": {
            "name": "save_config",
            "location": 85,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config_parser": [
                    "configparser.RawConfigParser",
                    "Union[str, dict]",
                    "str",
                    "list"
                ]
            }
        },
        "MemberIssuesByStatus.from_file": {
            "name": "from_file",
            "location": 95,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "bool",
                    "List[str]",
                    "configparser.ConfigParser"
                ],
                "root_name": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ],
                "config_parser": [
                    "Dict[str, Any]",
                    "dict",
                    "Optional[dict]"
                ]
            }
        },
        "MemberIssuesByStatus.connection_names": {
            "name": "connection_names",
            "location": 106,
            "return": [
                "str",
                "int",
                "bool",
                "Dict[str, Tuple[int, int]]",
                "List[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberIssuesByStatus.full_name": {
            "name": "full_name",
            "location": 113,
            "return": [
                "str",
                "Union[str, bytes]",
                "Mapping"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberIssuesByStatus.primary_user_name": {
            "name": "primary_user_name",
            "location": 117,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberIssuesByStatus.primary_team": {
            "name": "primary_team",
            "location": 121,
            "return": [
                "str",
                "IO"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberIssuesByStatus.add_alias": {
            "name": "add_alias",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jira_user_name": [
                    "str"
                ]
            }
        },
        "MemberIssuesByStatus.remove_alias": {
            "name": "remove_alias",
            "location": 127,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberIssuesByStatus.closed_test_count": {
            "name": "closed_test_count",
            "location": 139,
            "return": [
                "List[int]",
                "Tuple[int]",
                "Set[str]",
                "List[Tuple[int, str, str]]",
                "List[str]",
                "list",
                "Tuple[int, int]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberIssuesByStatus.add_if_owns": {
            "name": "add_if_owns",
            "location": 142,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "jira_connection": [
                    "str",
                    "dict",
                    "bool",
                    "int"
                ],
                "jira_issue": [
                    "str",
                    "int"
                ]
            }
        },
        "MemberIssuesByStatus._debug_ticket": {
            "name": "_debug_ticket",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "jira_issue": [
                    "int",
                    "List[Optional[str]]",
                    "Optional[int]",
                    "str"
                ],
                "to_print": [
                    "str",
                    "Union[str, int, float]",
                    "int",
                    "Optional[str]",
                    "float"
                ]
            }
        },
        "MemberIssuesByStatus.is_debug_jira_issue": {
            "name": "is_debug_jira_issue",
            "location": 184,
            "return": [
                "bool"
            ],
            "arguments": {
                "jira_issue": [
                    "src.jira_issue.JiraIssue",
                    "str",
                    "Sequence[Any]",
                    "int",
                    "Dict[str, Set[str]]"
                ]
            }
        },
        "MemberIssuesByStatus.get_owning_jira_user_name": {
            "name": "get_owning_jira_user_name",
            "location": 190,
            "return": [
                "str",
                "Optional[str]",
                "list",
                "int"
            ],
            "arguments": {
                "self": [],
                "jira_connection": [
                    "src.jira_connection.JiraConnection",
                    "Dict[str, Any]",
                    "Callable",
                    "Exception"
                ],
                "jira_issue": [
                    "src.jira_issue.JiraIssue",
                    "str",
                    "src.jira_connection.JiraConnection"
                ]
            }
        },
        "MemberIssuesByStatus.formatted_header": {
            "name": "formatted_header",
            "location": 206,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "Callable",
                    "bool",
                    "List[str]",
                    "List[Dict]",
                    "Type"
                ]
            }
        },
        "MemberIssuesByStatus.formatted_summary": {
            "name": "formatted_summary",
            "location": 210,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberIssuesByStatus.sort_tickets": {
            "name": "sort_tickets",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberIssuesByStatus.clear": {
            "name": "clear",
            "location": 222,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberIssuesByStatus.all_tickets": {
            "name": "all_tickets",
            "location": 229,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemberIssuesByStatus.display_member_issues": {
            "name": "display_member_issues",
            "location": 232,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "jira_manager": [
                    "JiraManager",
                    "Sequence[int]",
                    "bytes",
                    "Optional[cmk.utils.type_defs.HostAddress]",
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "report_filter": [
                    "Tuple[FrozenSet[int]]",
                    "List[Optional[float]]",
                    "[[]]",
                    "str"
                ]
            }
        },
        "MemberIssuesByStatus.__str__": {
            "name": "__str__",
            "location": 296,
            "return": [
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "argus-master/src/menu_option.py": {
        "MenuOption.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hotkey": [
                    "str",
                    "bool",
                    "Optional[Mapping]",
                    "Mapping[str, Any]",
                    "Optional[str]",
                    "Sequence",
                    "int"
                ],
                "name": [
                    "str",
                    "Callable",
                    "Callable[..., T]"
                ],
                "method": [
                    "str",
                    "bool",
                    "Optional[Mapping]",
                    "Mapping[str, Any]",
                    "Optional[str]",
                    "Sequence",
                    "int"
                ],
                "pause": [
                    "str",
                    "bool",
                    "Optional[Mapping]",
                    "Mapping[str, Any]",
                    "Optional[str]",
                    "Sequence",
                    "int"
                ]
            }
        },
        "MenuOption.print_blank_line": {
            "name": "print_blank_line",
            "location": 39,
            "return": [
                "Optional[float]",
                "Optional[str]",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "MenuOption.return_to_previous_menu": {
            "name": "return_to_previous_menu",
            "location": 43,
            "return": [
                "bool",
                "int",
                "str"
            ],
            "arguments": {
                "previous_menu_call": [
                    "Callable",
                    "bool",
                    "Union[str, List[str]]",
                    "Hashable"
                ]
            }
        },
        "MenuOption.quit_program": {
            "name": "quit_program",
            "location": 47,
            "return": [
                "int"
            ],
            "arguments": {}
        }
    },
    "argus-master/src/team.py": {
        "Team.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "jira_connection_name": [
                    "str",
                    "List[str]",
                    "Set[str]",
                    "Optional[str]"
                ]
            }
        },
        "Team.add_member": {
            "name": "add_member",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "Set[str]"
                ],
                "jira_connection": [
                    "str",
                    "Optional[str]",
                    "Set[str]"
                ]
            }
        },
        "Team.add_existing_member": {
            "name": "add_existing_member",
            "location": 47,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member_issues": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "Team.prompt_to_remove_member": {
            "name": "prompt_to_remove_member",
            "location": 50,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "Team.delete_member": {
            "name": "delete_member",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_name": [
                    "str",
                    "Mapping"
                ]
            }
        },
        "Team.root_name": {
            "name": "root_name",
            "location": 72,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Team.member_names": {
            "name": "member_names",
            "location": 76,
            "return": [
                "List[str]",
                "FrozenSet[str]",
                "Tuple[str]",
                "str",
                "List[Tuple[str, Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Team.members": {
            "name": "members",
            "location": 80,
            "return": [
                "str",
                "List[Dict]",
                "List[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Team.convert_name_to_jira_user_name": {
            "name": "convert_name_to_jira_user_name",
            "location": 83,
            "return": [
                "str",
                "int",
                "bytes",
                "List[Dict[str, Any]]",
                "list",
                "IO"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Team.get_member_issues": {
            "name": "get_member_issues",
            "location": 96,
            "return": [
                "Optional[int]",
                "Optional[str]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "Team.get_linked_jira_connections": {
            "name": "get_linked_jira_connections",
            "location": 108,
            "return": [
                "str",
                "dict",
                "Dict[str, Any]",
                "List[src.jira_issue.JiraIssue]",
                "Iterable[Tuple[str, str]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Team.populate_jira_issues": {
            "name": "populate_jira_issues",
            "location": 117,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jira_connection": [
                    "JiraConnection",
                    "bool",
                    "bytes",
                    "List[str]"
                ],
                "issues": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "Team.clear_jira_issues": {
            "name": "clear_jira_issues",
            "location": 129,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "Team.__str__": {
            "name": "__str__",
            "location": 133,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "argus-master/src/team_manager.py": {
        "TeamManager.__init__": {
            "name": "__init__",
            "location": 52,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamManager.prompt_for_team_addition": {
            "name": "prompt_for_team_addition",
            "location": 56,
            "return": [
                "int",
                "List[int]"
            ],
            "arguments": {
                "self": [],
                "jira_manager": [
                    "Optional[int]",
                    "dict",
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "TeamManager.add_existing_team": {
            "name": "add_existing_team",
            "location": 65,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_team": [
                    "str",
                    "Callable",
                    "Optional[str]",
                    "Optional[int]",
                    "bool",
                    "int"
                ]
            }
        },
        "TeamManager.add_organization": {
            "name": "add_organization",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamManager.remove_organization": {
            "name": "remove_organization",
            "location": 99,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamManager.list_teams": {
            "name": "list_teams",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamManager.pick_team": {
            "name": "pick_team",
            "location": 113,
            "return": [
                "str",
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "skip_list": [
                    "List[Dict[str, Any]]",
                    "int",
                    "Dict[str, int]"
                ]
            }
        },
        "TeamManager.get_team_by_name": {
            "name": "get_team_by_name",
            "location": 123,
            "return": [
                "str",
                "bool",
                "src.jira_connection.JiraConnection",
                "int",
                "src.jenkins_connection.JenkinsConnection"
            ],
            "arguments": {
                "self": [],
                "team_name": [
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "TeamManager.edit_team": {
            "name": "edit_team",
            "location": 126,
            "return": [
                "Optional[str]",
                "type",
                "Optional[List[Any]]",
                "list"
            ],
            "arguments": {
                "self": [],
                "jira_manager": [
                    "bool",
                    "str",
                    "JiraManager",
                    "Optional[int]",
                    "Optional[Dict[str, Any]]"
                ],
                "team_name": [
                    "Callable",
                    "Optional[List[str]]",
                    "Optional[Sequence[Any]]",
                    "List[str]",
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Optional[str]"
                ]
            }
        },
        "TeamManager.remove_team": {
            "name": "remove_team",
            "location": 168,
            "return": [
                "Optional[str]",
                "bool",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamManager.create_new_member_alias": {
            "name": "create_new_member_alias",
            "location": 184,
            "return": [
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "jira_manager": [
                    "float",
                    "str",
                    "IO"
                ]
            }
        },
        "TeamManager._pick_member_for_linkage_operation": {
            "name": "_pick_member_for_linkage_operation",
            "location": 225,
            "return": [
                "Optional[str]",
                "str",
                "Optional[float]"
            ],
            "arguments": {
                "self": [],
                "action": [
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "TeamManager.remove_linked_member": {
            "name": "remove_linked_member",
            "location": 243,
            "return": [
                "Union[tuple, list]",
                "Dict[str, Any]",
                "Set[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TeamManager.run_org_report": {
            "name": "run_org_report",
            "location": 250,
            "return": [],
            "arguments": {
                "self": [],
                "jira_manager": [
                    "cmk.utils.type_defs.HostName",
                    "List[int]"
                ]
            }
        },
        "TeamManager.run_team_reports": {
            "name": "run_team_reports",
            "location": 305,
            "return": [],
            "arguments": {
                "self": [],
                "jira_manager": [
                    "int",
                    "cmk.utils.type_defs.HostName"
                ]
            }
        },
        "TeamManager._print_report_menu": {
            "name": "_print_report_menu",
            "location": 354,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "TeamManager.populate_owned_jira_issues": {
            "name": "populate_owned_jira_issues",
            "location": 363,
            "return": [
                "None"
            ],
            "arguments": {
                "jira_manager": [
                    "bool"
                ],
                "team_members": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "TeamManager._run_org_report": {
            "name": "_run_org_report",
            "location": 389,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jira_manager": [
                    "str",
                    "bool"
                ],
                "org_name": [
                    "str",
                    "cmk.utils.type_defs.SectionName"
                ],
                "report_filter": [
                    "str",
                    "bool"
                ]
            }
        },
        "TeamManager._run_report": {
            "name": "_run_report",
            "location": 436,
            "return": [
                "None"
            ],
            "arguments": {
                "jira_manager": [
                    "Callable",
                    "str",
                    "Optional[\"Game\"]"
                ],
                "team": [
                    "Callable[..., None]",
                    "int",
                    "Callable",
                    "Optional[Dict]",
                    "str",
                    "Iterable[str]"
                ],
                "report_filter": [
                    "Optional[str]",
                    "dict",
                    "raiden.utils.Address"
                ]
            }
        },
        "TeamManager._print_member_details": {
            "name": "_print_member_details",
            "location": 482,
            "return": [
                "None"
            ],
            "arguments": {
                "jira_manager": [
                    "str"
                ],
                "tickets": [
                    "List[str]",
                    "JiraManager",
                    "bool"
                ],
                "report_filter": [
                    "int",
                    "str",
                    "Dict[str, Any]",
                    "List[raiden.utils.Address]"
                ]
            }
        },
        "TeamManager.from_file": {
            "name": "from_file",
            "location": 506,
            "return": [
                "str",
                "Type[tuple]",
                "Dict[str, Any]",
                "Tuple[str]"
            ],
            "arguments": {
                "cls": [
                    "Iterable[str]",
                    "bool",
                    "str",
                    "Iterable",
                    "Set[str]"
                ]
            }
        },
        "TeamManager._save_config": {
            "name": "_save_config",
            "location": 555,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "argus-master/src/team_reports.py": {
        "ReportType.from_int": {
            "name": "from_int",
            "location": 37,
            "return": [
                "Dict[str, Any]",
                "int",
                "bool",
                "type"
            ],
            "arguments": {
                "cls": [
                    "int",
                    "str",
                    "bool",
                    "dict",
                    "raiden.utils.Any"
                ],
                "value": [
                    "int",
                    "str",
                    "bool",
                    "dict",
                    "raiden.utils.Any"
                ]
            }
        },
        "ReportFilter.__init__": {
            "name": "__init__",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportFilter.clear": {
            "name": "clear",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportFilter.column_headers": {
            "name": "column_headers",
            "location": 86,
            "return": [
                "Dict[str, Any]",
                "dict",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportFilter.process_issues": {
            "name": "process_issues",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member_issues": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "ReportFilter.matches": {
            "name": "matches",
            "location": 96,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "jira_issue": [
                    "dict",
                    "src.jira_issue.JiraIssue",
                    "List[int]",
                    "List[str]"
                ]
            }
        },
        "ReportFilter._add_matching_issues": {
            "name": "_add_matching_issues",
            "location": 99,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "column_name": [
                    "str",
                    "bool",
                    "List[str]",
                    "Optional[str]",
                    "Dict[str, Any]",
                    "Callable"
                ],
                "jira_issues": [
                    "str",
                    "int"
                ]
            }
        },
        "ReportFilter.issue_count": {
            "name": "issue_count",
            "location": 109,
            "return": [
                "tuple"
            ],
            "arguments": {
                "self": [],
                "issue_type": [
                    "str",
                    "Tuple[Type]",
                    "type"
                ]
            }
        },
        "ReportFilter.print_all_counts": {
            "name": "print_all_counts",
            "location": 112,
            "return": [
                "bool",
                "Tuple[int, Dict[str, Any]]",
                "List[object]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        },
        "ReportFilter.get_issues": {
            "name": "get_issues",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "issue_type": [
                    "str",
                    "type"
                ]
            }
        },
        "ReportFilter.contains_issue": {
            "name": "contains_issue",
            "location": 121,
            "return": [
                "bool",
                "str",
                "Optional[str]",
                "dict",
                "int"
            ],
            "arguments": {
                "self": [],
                "jira_issue": [
                    "str",
                    "bytes"
                ]
            }
        },
        "ReportFilter.set_header": {
            "name": "set_header",
            "location": 127,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_header": [
                    "int",
                    "Tuple[int, int]"
                ]
            }
        },
        "ReportFilter.print_description": {
            "name": "print_description",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportFilter.get_since": {
            "name": "get_since",
            "location": 134,
            "return": [
                "str",
                "bool",
                "List[str]"
            ],
            "arguments": {}
        },
        "ReportFilter.needs_duration": {
            "name": "needs_duration",
            "location": 138,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportFilter.prompt_for_data": {
            "name": "prompt_for_data",
            "location": 144,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportFilter._matches_time": {
            "name": "_matches_time",
            "location": 150,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "jira_issue": [
                    "purplship.core.utils.xml.Element",
                    "str"
                ]
            }
        },
        "ReportFilter.print_all_keys": {
            "name": "print_all_keys",
            "location": 168,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportMomentum.__init__": {
            "name": "__init__",
            "location": 181,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportMomentum.process_issues": {
            "name": "process_issues",
            "location": 186,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member_issues": [
                    "float",
                    "Optional[Union[int, Any]]",
                    "src.member_issues_by_status.MemberIssuesByStatus"
                ]
            }
        },
        "ReportMomentum.matches": {
            "name": "matches",
            "location": 193,
            "return": [
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "jira_issue": [
                    "str",
                    "mode.utils.imports.SymbolArg[Type[mode.SupervisorStrategyT]]",
                    "bool",
                    "src.jira_connection.JiraConnection"
                ]
            }
        },
        "ReportMomentum.needs_duration": {
            "name": "needs_duration",
            "location": 200,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportCurrentLoad.__init__": {
            "name": "__init__",
            "location": 211,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportCurrentLoad.process_issues": {
            "name": "process_issues",
            "location": 216,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member_issues": [
                    "str",
                    "src.member_issues_by_status.MemberIssuesByStatus",
                    "int"
                ]
            }
        },
        "ReportCurrentLoad.matches": {
            "name": "matches",
            "location": 224,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "jira_issue": [
                    "src.jira_issue.JiraIssue",
                    "IO[str]",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "ReportMeta.__init__": {
            "name": "__init__",
            "location": 253,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportMeta.process_issues": {
            "name": "process_issues",
            "location": 279,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member_issues": [
                    "src.member_issues_by_status.MemberIssuesByStatus"
                ]
            }
        },
        "ReportMeta.matches": {
            "name": "matches",
            "location": 304,
            "return": [
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "jira_issue": [
                    "str",
                    "mode.utils.imports.SymbolArg[Type[mode.SupervisorStrategyT]]",
                    "bool",
                    "src.jira_connection.JiraConnection"
                ]
            }
        },
        "ReportMeta.needs_duration": {
            "name": "needs_duration",
            "location": 308,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportFixVersion.__init__": {
            "name": "__init__",
            "location": 321,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportFixVersion.process_issues": {
            "name": "process_issues",
            "location": 327,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member_issues": [
                    "float",
                    "Optional[Union[int, Any]]",
                    "src.member_issues_by_status.MemberIssuesByStatus",
                    "dict",
                    "Optional[str]"
                ]
            }
        },
        "ReportFixVersion.set_fix_version": {
            "name": "set_fix_version",
            "location": 336,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "new_version": [
                    "bool",
                    "str",
                    "int",
                    "Callable[..., None]",
                    "List[str]"
                ]
            }
        },
        "ReportFixVersion.matches": {
            "name": "matches",
            "location": 339,
            "return": [
                "str",
                "Dict[str, int]",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "jira_issue": [
                    "str",
                    "mode.utils.imports.SymbolArg[Type[mode.SupervisorStrategyT]]",
                    "bool",
                    "src.jira_connection.JiraConnection"
                ]
            }
        },
        "ReportFixVersion.prompt_for_data": {
            "name": "prompt_for_data",
            "location": 348,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportFixVersion.needs_duration": {
            "name": "needs_duration",
            "location": 354,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportTestLoad.__init__": {
            "name": "__init__",
            "location": 365,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportTestLoad.process_issues": {
            "name": "process_issues",
            "location": 370,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member_issues": [
                    "str",
                    "Mapping",
                    "int",
                    "dict",
                    "datetime.datetime"
                ]
            }
        },
        "ReportTestLoad.matches": {
            "name": "matches",
            "location": 374,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "jira_issue": [
                    "str",
                    "int",
                    "datetime.datetime"
                ]
            }
        },
        "ReportTestLoad.needs_duration": {
            "name": "needs_duration",
            "location": 381,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportReviewLoad.__init__": {
            "name": "__init__",
            "location": 392,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ReportReviewLoad.process_issues": {
            "name": "process_issues",
            "location": 397,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "member_issues": [
                    "List[str]"
                ]
            }
        },
        "ReportReviewLoad.matches": {
            "name": "matches",
            "location": 402,
            "return": [
                "int",
                "bool",
                "List[str]"
            ],
            "arguments": {
                "self": [],
                "jira_issue": [
                    "str",
                    "mode.utils.imports.SymbolArg[Type[mode.SupervisorStrategyT]]",
                    "bool",
                    "src.jira_connection.JiraConnection"
                ]
            }
        },
        "ReportReviewLoad.needs_duration": {
            "name": "needs_duration",
            "location": 407,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "argus-master/src/test_wrapped_jira_connection_stub.py": {
        "TestWrappedJiraConnectionStub.__init__": {
            "name": "__init__",
            "location": 28,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWrappedJiraConnectionStub.projects": {
            "name": "projects",
            "location": 32,
            "return": [
                "Tuple[Dict[str, object], Dict[str, str]]",
                "Iterable[Type]",
                "bool",
                "str",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWrappedJiraConnectionStub.search_issues": {
            "name": "search_issues",
            "location": 43,
            "return": [
                "dict",
                "str",
                "bool",
                "set"
            ],
            "arguments": {}
        }
    },
    "argus-master/src/time_utils.py": {
        "current_time": {
            "name": "current_time",
            "location": 24,
            "return": [
                "str",
                "datetime.datetime",
                "datetime.date"
            ],
            "arguments": {}
        },
        "since_now": {
            "name": "since_now",
            "location": 29,
            "return": [
                "datetime.datetime",
                "List[float]",
                "str",
                "int"
            ],
            "arguments": {
                "delta": [
                    "str",
                    "List[int]",
                    "backend.src.sheets_commands.sheeGrid",
                    "Dict[str, Dict[str, int]]",
                    "int"
                ]
            }
        },
        "since": {
            "name": "since",
            "location": 33,
            "return": [
                "dict",
                "str",
                "List[str]"
            ],
            "arguments": {
                "source": [
                    "datetime.datetime",
                    "str",
                    "Type",
                    "dict"
                ],
                "delta": [
                    "float",
                    "int",
                    "str",
                    "List[str]"
                ]
            }
        },
        "_extract_time": {
            "name": "_extract_time",
            "location": 49,
            "return": [
                "str",
                "Mapping[Any, Any]",
                "bool",
                "int"
            ],
            "arguments": {
                "char": [
                    "str"
                ],
                "input": [
                    "str"
                ]
            }
        }
    },
    "argus-master/src/triage_update.py": {
        "TriageUpdate.__init__": {
            "name": "__init__",
            "location": 33,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jira_connections": [
                    "bool",
                    "Iterable[str]",
                    "List[str]",
                    "str",
                    "int"
                ],
                "jira_projects": [
                    "bool",
                    "int",
                    "Callable"
                ]
            }
        },
        "TriageUpdate.process": {
            "name": "process",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "in_file_name": [
                    "str"
                ],
                "out_file_name": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "Optional[Union[str, int]]"
                ]
            }
        },
        "TriageUpdate._print_csv": {
            "name": "_print_csv",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "out_handle": [
                    "str"
                ]
            }
        },
        "TriageUpdate.sort_triaged_issues": {
            "name": "sort_triaged_issues",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "triaged_issues": [
                    "List[Tuple[int, int]]",
                    "dict",
                    "Iterable[Any]",
                    "src.core.model.profile.Profile",
                    "src.core.model.scripScript",
                    "src.core.model.library.Library"
                ]
            }
        },
        "TriageIssue.__init__": {
            "name": "__init__",
            "location": 171,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "line": [
                    "str"
                ]
            }
        },
        "TriageIssue.key": {
            "name": "key",
            "location": 185,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "Callable[[str], T]",
                "str",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "TriageIssue.project": {
            "name": "project",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TriageIssue.scope": {
            "name": "scope",
            "location": 196,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TriageIssue.prio": {
            "name": "prio",
            "location": 200,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TriageIssue.repro": {
            "name": "repro",
            "location": 204,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TriageIssue.component": {
            "name": "component",
            "location": 208,
            "return": [
                "str",
                "raiden.utils.signer.Signer",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TriageIssue.set_component": {
            "name": "set_component",
            "location": 211,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "new_value": [
                    "int",
                    "Optional[bool]",
                    "Dict[str, Any]",
                    "List[str]"
                ]
            }
        },
        "TriageIssue.validate": {
            "name": "validate",
            "location": 215,
            "return": [
                "str",
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {
                "field": [
                    "Optional[str]",
                    "bool",
                    "Set[str]",
                    "AbstractSet[str]"
                ]
            }
        },
        "TriageIssue.update_self": {
            "name": "update_self",
            "location": 220,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "jira_issue": [
                    "str"
                ],
                "jira_project": [
                    "bool",
                    "int",
                    "List[Dict]",
                    "MutableMapping[str, str]"
                ]
            }
        },
        "TriageIssue._get_reviewer": {
            "name": "_get_reviewer",
            "location": 243,
            "return": [
                "str",
                "bool",
                "Iterable[int]"
            ],
            "arguments": {
                "self": [],
                "jira_issue": [
                    "str",
                    "bool"
                ]
            }
        },
        "TriageIssue.sanitize": {
            "name": "sanitize",
            "location": 249,
            "return": [
                "List[str]",
                "str",
                "Sequence[str]"
            ],
            "arguments": {
                "field": [
                    "str"
                ]
            }
        },
        "TriageIssue.reviewer_field": {
            "name": "reviewer_field",
            "location": 260,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TriageIssue.reviewer_two_field": {
            "name": "reviewer_two_field",
            "location": 265,
            "return": [
                "Optional[str]",
                "bool",
                "Optional[int]",
                "Optional[List[Any]]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TriageIssue.set_connection_name": {
            "name": "set_connection_name",
            "location": 269,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "conn_name": [
                    "Optional[str]",
                    "str",
                    "int"
                ]
            }
        },
        "TriageIssue.short_string": {
            "name": "short_string",
            "location": 273,
            "return": [
                "int",
                "str",
                "Optional[str]",
                "cmk.utils.type_defs.UserId",
                "Optional[int]"
            ],
            "arguments": {
                "self": []
            }
        },
        "TriageIssue.raw_data": {
            "name": "raw_data",
            "location": 277,
            "return": [
                "Dict[str, List[int]]",
                "dict",
                "str",
                "Optional[float]",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "TriageIssue.__str__": {
            "name": "__str__",
            "location": 280,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "argus-master/src/utils.py": {
        "save_argus_config": {
            "name": "save_argus_config",
            "location": 75,
            "return": [
                "None"
            ],
            "arguments": {
                "config_parser": [
                    "configparser.RawConfigParser",
                    "str"
                ],
                "file_name": [
                    "str"
                ]
            }
        },
        "build_config_name": {
            "name": "build_config_name",
            "location": 85,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "file_name": [
                    "str"
                ]
            }
        },
        "clear": {
            "name": "clear",
            "location": 91,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "encode_password": {
            "name": "encode_password",
            "location": 98,
            "return": [
                "Dict[str, Any]",
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "browser": {
            "name": "browser",
            "location": 102,
            "return": [
                "bool",
                "str",
                "Optional[str]"
            ],
            "arguments": {}
        },
        "open_url_in_browser": {
            "name": "open_url_in_browser",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "url": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "change_browser": {
            "name": "change_browser",
            "location": 111,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "time_format_string": {
            "name": "time_format_string",
            "location": 116,
            "return": [
                "str",
                "dict",
                "list",
                "List[str]"
            ],
            "arguments": {}
        },
        "is_win": {
            "name": "is_win",
            "location": 120,
            "return": [
                "bool",
                "str",
                "Union[str, Pattern]"
            ],
            "arguments": {}
        },
        "is_mac": {
            "name": "is_mac",
            "location": 124,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "pause": {
            "name": "pause",
            "location": 128,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "indent": {
            "name": "indent",
            "location": 132,
            "return": [
                "None"
            ],
            "arguments": {
                "num": [
                    "int",
                    "Tuple[str]",
                    "str",
                    "float"
                ],
                "value": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "get_input": {
            "name": "get_input",
            "location": 142,
            "return": [
                "int",
                "List[str]",
                "Dict[str, str]"
            ],
            "arguments": {
                "prompt": [
                    "str",
                    "Tuple['cirq.Qid']",
                    "float"
                ],
                "lowered": [
                    "bool",
                    "str",
                    "T",
                    "dict"
                ]
            }
        },
        "get_config": {
            "name": "get_config",
            "location": 149,
            "return": [
                "str",
                "Optional[str]",
                "Sequence[int]",
                "bool"
            ],
            "arguments": {
                "val": [
                    "str"
                ],
                "delim": [
                    "str"
                ]
            }
        },
        "is_yes": {
            "name": "is_yes",
            "location": 153,
            "return": [
                "bool"
            ],
            "arguments": {
                "question": [
                    "str",
                    "type"
                ]
            }
        },
        "encode": {
            "name": "encode",
            "location": 164,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "key": [
                    "bytes",
                    "str",
                    "Iterable[str]",
                    "Optional[Callable[[str], Any]]",
                    "List[int]",
                    "List[str]"
                ],
                "to_encode": [
                    "bytes",
                    "Optional[bytes]"
                ]
            }
        },
        "pick_substring": {
            "name": "pick_substring",
            "location": 182,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "Optional[float]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "header": [
                    "str",
                    "int"
                ],
                "options": [
                    "List[str]",
                    "bool",
                    "str",
                    "int",
                    "List[Tuple[str, int]]"
                ],
                "allow_exit": [
                    "str",
                    "bool",
                    "Optional[Mapping[str, str]]"
                ],
                "exit_text": [
                    "str",
                    "bool",
                    "Optional[Mapping[str, str]]"
                ]
            }
        },
        "pick_value": {
            "name": "pick_value",
            "location": 208,
            "return": [
                "Optional[str]",
                "Optional[int]",
                "Optional[float]"
            ],
            "arguments": {
                "header": [
                    "str",
                    "bool"
                ],
                "options": [
                    "Union[Dict[str, Any], List[Any]]",
                    "Optional[str]",
                    "List[str]",
                    "bool",
                    "str",
                    "List[Dict[str, Any]]",
                    "Dict[Any, list]"
                ],
                "allow_exit": [
                    "bool",
                    "str",
                    "Optional[Callable[[], bool]]",
                    "Optional[str]"
                ],
                "exit_text": [
                    "str",
                    "Sequence[str]",
                    "Optional[List[str]]"
                ],
                "sort": [
                    "Union[Dict[str, Any], List[Any]]",
                    "Optional[str]",
                    "List[str]",
                    "bool",
                    "str",
                    "List[Dict[str, Any]]",
                    "Dict[Any, list]"
                ],
                "silent": [
                    "bool",
                    "str",
                    "int",
                    "List[str]",
                    "Callable[[], None]"
                ]
            }
        },
        "display_results": {
            "name": "display_results",
            "location": 255,
            "return": [
                "None"
            ],
            "arguments": {
                "results": [
                    "list",
                    "Dict[str, List[Any]]",
                    "List[Dict[Any, Any]]"
                ],
                "sort": [
                    "list",
                    "Dict[str, List[Any]]",
                    "List[Dict[Any, Any]]"
                ]
            }
        },
        "decode": {
            "name": "decode",
            "location": 264,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "key": [
                    "str",
                    "bytes",
                    "int",
                    "bool",
                    "List[str]"
                ],
                "enc": [
                    "bytes",
                    "int"
                ]
            }
        },
        "build_config_file": {
            "name": "build_config_file",
            "location": 274,
            "return": [
                "str"
            ],
            "arguments": {
                "directory": [
                    "str"
                ],
                "file_name": [
                    "str"
                ]
            }
        },
        "build_jenkins_data_file": {
            "name": "build_jenkins_data_file",
            "location": 278,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "connection_name": [
                    "str"
                ]
            }
        },
        "get_build_options": {
            "name": "get_build_options",
            "location": 358,
            "return": [
                "str",
                "bool",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {}
        },
        "tempdir": {
            "name": "tempdir",
            "location": 373,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "json_dir": {
            "name": "json_dir",
            "location": 377,
            "return": [
                "str"
            ],
            "arguments": {
                "branch": [
                    "str",
                    "int"
                ],
                "build_type": [
                    "str",
                    "int"
                ]
            }
        },
        "branch_dir": {
            "name": "branch_dir",
            "location": 381,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "branch": [
                    "str"
                ]
            }
        },
        "argus_temp_dir": {
            "name": "argus_temp_dir",
            "location": 385,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "is_empty": {
            "name": "is_empty",
            "location": 389,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "Optional[str]",
                    "Iterable",
                    "Optional[List]",
                    "Optional[Dict]",
                    "bool",
                    "Union[str, bytes]",
                    "str"
                ]
            }
        },
        "print_separator": {
            "name": "print_separator",
            "location": 395,
            "return": [
                "None"
            ],
            "arguments": {
                "count": [
                    "str",
                    "int",
                    "Dict[str, Sequence[str]]",
                    "bytes"
                ],
                "char": [
                    "str",
                    "int",
                    "Dict[str, Sequence[str]]",
                    "bytes"
                ]
            }
        },
        "argus_debug": {
            "name": "argus_debug",
            "location": 399,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "Sequence[str]",
                "str",
                "Union[tuple, list]"
            ],
            "arguments": {
                "value": [
                    "str",
                    "int"
                ]
            }
        },
        "as_int": {
            "name": "as_int",
            "location": 407,
            "return": [
                "Optional[float]",
                "Optional[int]",
                "bool"
            ],
            "arguments": {
                "value": [
                    "int",
                    "T",
                    "Sequence",
                    "Iterable[T]"
                ]
            }
        },
        "load_file": {
            "name": "load_file",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "tpl": [
                    "Tuple[Any, Any, Any]",
                    "List[str]",
                    "List[Tuple[str, str, Any]]",
                    "str",
                    "dict",
                    "Optional[List[\"DeliveryItem\"]]"
                ]
            }
        },
        "get_connection_name": {
            "name": "get_connection_name",
            "location": 434,
            "return": [
                "str"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "init_tab_completer": {
            "name": "init_tab_completer",
            "location": 484,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "clear_tab_complete_vocabulary": {
            "name": "clear_tab_complete_vocabulary",
            "location": 491,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "build_regex_pattern": {
            "name": "build_regex_pattern",
            "location": 504,
            "return": [
                "str",
                "Dict[str, List[str]]",
                "Type"
            ],
            "arguments": {
                "str_to_build": [
                    "str",
                    "int",
                    "bool",
                    "Union[int, float]",
                    "Dict[str, Any]"
                ]
            }
        },
        "tab_complete": {
            "name": "tab_complete",
            "location": 509,
            "return": [
                "bool",
                "int",
                "Optional[bool]"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "tuple"
                ],
                "args": [],
                "word_list": [
                    "List[str]",
                    "str",
                    "bytes",
                    "Optional[str]",
                    "Optional[Sequence[str]]",
                    "Dict[str, str]"
                ],
                "regex": [
                    "bool",
                    "List[str]",
                    "str"
                ],
                "cleanup": [
                    "Optional[List[str]]",
                    "bool",
                    "str",
                    "Iterator[Tuple[str, str]]",
                    "int"
                ]
            }
        },
        "Config.init_argus": {
            "name": "init_argus",
            "location": 304,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "Type[T]",
                    "bool",
                    "ClassVar"
                ]
            }
        },
        "Config._init_directories": {
            "name": "_init_directories",
            "location": 310,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Config._init_jenkins_config": {
            "name": "_init_jenkins_config",
            "location": 319,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "Config._init_custom_config": {
            "name": "_init_custom_config",
            "location": 341,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "MultiTasker.__init__": {
            "name": "__init__",
            "location": 449,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "max_threads": [
                    "int",
                    "Callable[[int], bool]",
                    "float"
                ],
                "stagger_time": [
                    "str",
                    "int",
                    "float"
                ],
                "pause_time": [
                    "str",
                    "int",
                    "float"
                ]
            }
        },
        "MultiTasker.wrap_job": {
            "name": "wrap_job",
            "location": 462,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "int",
                    "str",
                    "Callable",
                    "tuple",
                    "List[str]",
                    "Sequence[str]"
                ],
                "args": []
            }
        },
        "MultiTasker.add_job": {
            "name": "add_job",
            "location": 469,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "target": [
                    "List[str]",
                    "subprocess.Popen",
                    "int"
                ],
                "args": []
            }
        },
        "MultiTasker.run": {
            "name": "run",
            "location": 473,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "clear_tab_complete_vocabulary.completer": {
            "name": "completer",
            "location": 499,
            "return": [],
            "arguments": {
                "arg1": [],
                "arg2": []
            }
        },
        "tab_complete.completer": {
            "name": "completer",
            "location": 519,
            "return": [
                "bool",
                "str",
                "Optional[bytes]"
            ],
            "arguments": {
                "text": [
                    "str",
                    "bool"
                ],
                "state": [
                    "int",
                    "str",
                    "bool"
                ]
            }
        }
    },
    "argus-master/src/__init__.py": {},
    "argus-master/tests/argus_test.py": {
        "Tester.setUp": {
            "name": "setUp",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Tester.build_data_file": {
            "name": "build_data_file",
            "location": 33,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "file_str": [
                    "str",
                    "BinaryIO",
                    "Optional[str]",
                    "raiden.utils.List[str]"
                ]
            }
        },
        "Tester.get_builds_from_file": {
            "name": "get_builds_from_file",
            "location": 37,
            "return": [
                "str",
                "Optional[str]",
                "set"
            ],
            "arguments": {
                "filename": [
                    "str"
                ]
            }
        },
        "Tester.create_builds_dict": {
            "name": "create_builds_dict",
            "location": 44,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "builds": [
                    "dict",
                    "bool"
                ]
            }
        },
        "Tester.tearDown": {
            "name": "tearDown",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "argus-master/tests/utils.py": {
        "clean_test_files": {
            "name": "clean_test_files",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "parser_to_dict": {
            "name": "parser_to_dict",
            "location": 44,
            "return": [
                "dict",
                "Dict[str, Union[str, bool]]",
                "str",
                "List[List[str]]",
                "Dict[str, float]",
                "Dict[str, Any]",
                "raiden.utils.List[raiden.utils.Tuple[str, int]]"
            ],
            "arguments": {
                "filename": [
                    "str",
                    "bool"
                ]
            }
        },
        "csv_to_list": {
            "name": "csv_to_list",
            "location": 57,
            "return": [
                "str",
                "Optional[Union[str, Any]]",
                "List[str]"
            ],
            "arguments": {
                "row": [
                    "Optional[bool]",
                    "dict",
                    "slice",
                    "Optional[Tuple[int, int]]",
                    "Sequence[Hashable]",
                    "Optional[Sequence[str]]",
                    "str"
                ]
            }
        }
    },
    "argus-master/tests/__init__.py": {},
    "argus-master/tests/integration/test_jenkins_server.py": {
        "TestJenkinsServer.test_pickled_job_instance_equals_new_job_instance": {
            "name": "test_pickled_job_instance_equals_new_job_instance",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJenkinsServer.test_pickled_jenkins_job_equals_new_jenkins_job": {
            "name": "test_pickled_jenkins_job_equals_new_jenkins_job",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "argus-master/tests/integration/__init__.py": {},
    "argus-master/tests/scripts/download_builds.py": {},
    "argus-master/tests/scripts/download_job_from_server.py": {},
    "argus-master/tests/scripts/print_build_status.py": {},
    "argus-master/tests/unit/test_jenkins_connection.py": {
        "TestJenkinsConnection.test_save_conf": {
            "name": "test_save_conf",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "create_jenkins_obj": [
                    "bool",
                    "str"
                ]
            }
        }
    },
    "argus-master/tests/unit/test_jenkins_job.py": {
        "TestJenkinsJobMethods.test_get_job_health": {
            "name": "test_get_job_health",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJenkinsJobMethods.test_get_build_failures": {
            "name": "test_get_build_failures",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJenkinsJobConstructor.setUp": {
            "name": "setUp",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJenkinsJobConstructor.test_creation_of_jenkins_job_with_no_builds": {
            "name": "test_creation_of_jenkins_job_with_no_builds",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJenkinsJobConstructor.test_creation_of_jenkins_job_with_builds": {
            "name": "test_creation_of_jenkins_job_with_builds",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJenkinsJobConstructor.test_creation_of_jenkins_job_with_aborted_build": {
            "name": "test_creation_of_jenkins_job_with_aborted_build",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJenkinsJobConstructor.test_creation_of_jenkins_job_with_failed_build": {
            "name": "test_creation_of_jenkins_job_with_failed_build",
            "location": 100,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJenkinsJobConstructor.test_creation_of_jenkins_job_with_in_progress_build": {
            "name": "test_creation_of_jenkins_job_with_in_progress_build",
            "location": 108,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJenkinsJobConstructor.test_creation_of_jenkins_job_with_successful_build": {
            "name": "test_creation_of_jenkins_job_with_successful_build",
            "location": 116,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJenkinsJobConstructor.test_creation_of_jenkins_job_with_unstable_build": {
            "name": "test_creation_of_jenkins_job_with_unstable_build",
            "location": 124,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestJenkinsJobConstructor.apply_assertions": {
            "name": "apply_assertions",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "jenkins_job": [
                    "str",
                    "bool"
                ],
                "jenkins_builds": [
                    "Tuple[paradigm.models.Base, tests.utils.Args]",
                    "Iterable"
                ]
            }
        }
    },
    "argus-master/tests/unit/test_utils.py": {
        "TestUtils.test_get_connection_name": {
            "name": "test_get_connection_name",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "argus-master/tests/unit/__init__.py": {}
}
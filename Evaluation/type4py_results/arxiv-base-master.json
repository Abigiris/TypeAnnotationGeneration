{
    "arxiv-base-master/app.py": {},
    "arxiv-base-master/setup.py": {
        "read": {
            "name": "read",
            "location": 48,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "find_version": {
            "name": "find_version",
            "location": 52,
            "return": [
                "bool",
                "str",
                "Optional[Dict[str, Any]]",
                "Optional[Set[str]]",
                "Mapping"
            ],
            "arguments": {}
        }
    },
    "arxiv-base-master/upload_static_assets.py": {},
    "arxiv-base-master/arxiv/base/agent.py": {},
    "arxiv-base-master/arxiv/base/alerts.py": {
        "_flash_with": {
            "name": "_flash_with",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "severity": [
                    "str",
                    "bool"
                ],
                "message": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "title": [
                    "bool",
                    "logging.Logger",
                    "str",
                    "Callable",
                    "starfish.core.util.logging.Log"
                ],
                "dismissable": [
                    "str",
                    "dict"
                ],
                "safe": [
                    "bool",
                    "str",
                    "int",
                    "dict",
                    "float"
                ]
            }
        },
        "flash_info": {
            "name": "flash_info",
            "location": 69,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "title": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "dismissable": [
                    "bool",
                    "str",
                    "Optional[str]"
                ],
                "safe": [
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "flash_warning": {
            "name": "flash_warning",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Union[None, str, List[str]]"
                ],
                "title": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Union[None, str, List[str]]"
                ],
                "dismissable": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Union[None, str, List[str]]"
                ],
                "safe": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "Union[None, str, List[str]]"
                ]
            }
        },
        "flash_failure": {
            "name": "flash_failure",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "BinaryIO"
                ],
                "title": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "BinaryIO"
                ],
                "dismissable": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "BinaryIO"
                ],
                "safe": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "BinaryIO"
                ]
            }
        },
        "flash_success": {
            "name": "flash_success",
            "location": 150,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "BinaryIO"
                ],
                "title": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "BinaryIO"
                ],
                "dismissable": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "BinaryIO"
                ],
                "safe": [
                    "bool",
                    "str",
                    "Optional[str]",
                    "BinaryIO"
                ]
            }
        },
        "flash_hidden": {
            "name": "flash_hidden",
            "location": 176,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "bool",
                    "str",
                    "dict",
                    "bytes",
                    "list"
                ],
                "key": [
                    "bool",
                    "str",
                    "dict",
                    "bytes",
                    "list"
                ],
                "dismissable": [
                    "bool",
                    "str",
                    "dict",
                    "bytes",
                    "list"
                ],
                "safe": [
                    "bool",
                    "str",
                    "dict",
                    "bytes",
                    "list"
                ]
            }
        },
        "get_alerts": {
            "name": "get_alerts",
            "location": 202,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "severity": [
                    "Optional[str]",
                    "str",
                    "bool",
                    "list",
                    "List[str]"
                ]
            }
        },
        "get_hidden_alerts": {
            "name": "get_hidden_alerts",
            "location": 228,
            "return": [
                "List[str]",
                "str",
                "int"
            ],
            "arguments": {
                "key": [
                    "str"
                ]
            }
        }
    },
    "arxiv-base-master/arxiv/base/app_tests.py": {
        "TestConfig.test_server_name": {
            "name": "test_server_name",
            "location": 41,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestStaticFiles.test_static_url_paths": {
            "name": "test_static_url_paths",
            "location": 50,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-base-master/arxiv/base/config.py": {},
    "arxiv-base-master/arxiv/base/context_processors.py": {
        "inject_get_alerts": {
            "name": "inject_get_alerts",
            "location": 8,
            "return": [
                "Optional[str]",
                "str",
                "Optional[Dict[str, Any]]",
                "int"
            ],
            "arguments": {}
        },
        "inject_get_hidden_alerts": {
            "name": "inject_get_hidden_alerts",
            "location": 13,
            "return": [
                "Optional[str]",
                "Optional[List[str]]",
                "int",
                "str"
            ],
            "arguments": {}
        },
        "inject_a11y_url": {
            "name": "inject_a11y_url",
            "location": 17,
            "return": [
                "Exception",
                "dict",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "register_context_processors": {
            "name": "register_context_processors",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        }
    },
    "arxiv-base-master/arxiv/base/converter.py": {
        "ArXivConverter.to_python": {
            "name": "to_python",
            "location": 12,
            "return": [
                "str",
                "int",
                "Union[int, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Dict[Any, list]",
                    "List[str]",
                    "int"
                ]
            }
        },
        "ArXivConverter.to_url": {
            "name": "to_url",
            "location": 19,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "bool",
                    "Union[str, int]",
                    "T",
                    "bytes",
                    "Union[str, bytes]"
                ]
            }
        }
    },
    "arxiv-base-master/arxiv/base/exceptions.py": {
        "handler": {
            "name": "handler",
            "location": 35,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "exception_type": [
                    "str",
                    "Optional[Type[BaseException]]",
                    "BaseException"
                ]
            }
        },
        "get_handlers": {
            "name": "get_handlers",
            "location": 44,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "handle_exception": {
            "name": "handle_exception",
            "location": 57,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "dict",
                "str",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "error": [
                    "str",
                    "Union[object, type]"
                ]
            }
        },
        "handler.deco": {
            "name": "deco",
            "location": 37,
            "return": [
                "Dict[str, Dict[str, int]]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "T",
                    "bool",
                    "Callable[[], Dict[str, object]]",
                    "Type",
                    "\"Shape\""
                ]
            }
        }
    },
    "arxiv-base-master/arxiv/base/factory.py": {
        "create_web_app": {
            "name": "create_web_app",
            "location": 15,
            "return": [
                "flask.Flask"
            ],
            "arguments": {}
        }
    },
    "arxiv-base-master/arxiv/base/filters.py": {
        "abstract_lf_to_br": {
            "name": "abstract_lf_to_br",
            "location": 32,
            "return": [
                "float",
                "int",
                "Union[bool, None]",
                "str"
            ],
            "arguments": {
                "text": [
                    "str",
                    "type",
                    "Optional[str]"
                ]
            }
        },
        "f_tex2utf": {
            "name": "f_tex2utf",
            "location": 45,
            "return": [
                "Iterable[int]",
                "str",
                "List[str]",
                "tuple"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "greek": [
                    "bool",
                    "str",
                    "Dict[str, Any]"
                ]
            }
        },
        "embed_content": {
            "name": "embed_content",
            "location": 54,
            "return": [
                "str"
            ],
            "arguments": {
                "path": [
                    "str"
                ]
            }
        },
        "tidy_filesize": {
            "name": "tidy_filesize",
            "location": 61,
            "return": [
                "str"
            ],
            "arguments": {
                "size": [
                    "int",
                    "Union[int, Sequence[int]]"
                ]
            }
        },
        "as_eastern": {
            "name": "as_eastern",
            "location": 85,
            "return": [
                "datetime.datetime",
                "Optional[float]",
                "Optional[int]",
                "datetime.timezone",
                "float"
            ],
            "arguments": {
                "utc_datetime": [
                    "datetime.datetime",
                    "int",
                    "float"
                ]
            }
        },
        "register_filters": {
            "name": "register_filters",
            "location": 90,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        }
    },
    "arxiv-base-master/arxiv/base/globals.py": {
        "get_application_config": {
            "name": "get_application_config",
            "location": 20,
            "return": [
                "bool",
                "int",
                "Optional[dict]",
                "Optional[type]",
                "str"
            ],
            "arguments": {
                "app": [
                    "flask.Flask",
                    "Optional[flask.Flask]"
                ]
            }
        },
        "get_application_global": {
            "name": "get_application_global",
            "location": 43,
            "return": [
                "Optional[int]",
                "bool",
                "str",
                "Optional[Literal[\"only_clustered\", \"include_clustered\"]]",
                "dict",
                "Optional[List[Any]]"
            ],
            "arguments": {}
        }
    },
    "arxiv-base-master/arxiv/base/logging.py": {
        "getLogger": {
            "name": "getLogger",
            "location": 39,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "name": [
                    "str"
                ],
                "stream": [
                    "str",
                    "Exception",
                    "int"
                ]
            }
        },
        "RequestFormatter.format": {
            "name": "format",
            "location": 27,
            "return": [
                "str",
                "Tuple[Tuple[int, ...]]"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "str",
                    "Mapping[str, Any]",
                    "Dict[str, str]",
                    "dict"
                ]
            }
        }
    },
    "arxiv-base-master/arxiv/base/routes.py": {
        "test_page": {
            "name": "test_page",
            "location": 25,
            "return": [
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "test_macros": {
            "name": "test_macros",
            "location": 44,
            "return": [
                "Dict[str, str]"
            ],
            "arguments": {}
        },
        "make_exception_route": {
            "name": "make_exception_route",
            "location": 80,
            "return": [
                "float",
                "bool",
                "Callable[[None], bool]",
                "List[str]"
            ],
            "arguments": {
                "exception": [
                    "Exception",
                    "int",
                    "Callable[[], Awaitable[Mapping]]",
                    "Callable[[Mapping], Awaitable]"
                ]
            }
        },
        "make_exception_route._route": {
            "name": "_route",
            "location": 82,
            "return": [
                "flask.Response"
            ],
            "arguments": {}
        }
    },
    "arxiv-base-master/arxiv/base/__init__.py": {
        "Base.__init__": {
            "name": "__init__",
            "location": 41,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask",
                    "Optional[str]",
                    "Optional[flask.Flask]"
                ]
            }
        },
        "Base.init_app": {
            "name": "init_app",
            "location": 46,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "flask.Flask",
                    "flask.ctx.AppContext"
                ]
            }
        },
        "Base.init_app.register_blueprint": {
            "name": "register_blueprint",
            "location": 106,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "blueprint": [
                    "str",
                    "Iterable[Dict[str, Any]]",
                    "bool"
                ]
            }
        }
    },
    "arxiv-base-master/arxiv/base/middleware/base.py": {
        "IWSGIMiddleware.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wsgi_app": [
                    "dict",
                    "Dict[str, Any]"
                ],
                "config": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        },
        "IWSGIMiddleware.__call__": {
            "name": "__call__",
            "location": 33,
            "return": [
                "WSGIResponse"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "bool",
                    "AsyncIterator[T]",
                    "AsyncIterable[T]"
                ],
                "start": [
                    "bool",
                    "AsyncIterator[T]",
                    "AsyncIterable[T]"
                ]
            }
        },
        "IWSGIMiddleware.wsgi_app": {
            "name": "wsgi_app",
            "location": 38,
            "return": [
                "IWSGIApp"
            ],
            "arguments": {
                "self": []
            }
        },
        "IWSGIMiddlewareFactory.__call__": {
            "name": "__call__",
            "location": 46,
            "return": [
                "IWSGIMiddleware"
            ],
            "arguments": {
                "self": [],
                "app": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "list"
                ],
                "config": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]",
                    "list"
                ]
            }
        },
        "BaseMiddleware.__init__": {
            "name": "__init__",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wsgi_app": [
                    "dict",
                    "type"
                ],
                "config": [
                    "dict"
                ]
            }
        },
        "BaseMiddleware.before": {
            "name": "before",
            "location": 74,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "List[List[str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "Callable",
                    "bool"
                ],
                "start_response": [
                    "Callable",
                    "bool"
                ]
            }
        },
        "BaseMiddleware.after": {
            "name": "after",
            "location": 95,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        },
        "BaseMiddleware.__call__": {
            "name": "__call__",
            "location": 112,
            "return": [
                "dict",
                "List[float]",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "int",
                    "Union[int, str]",
                    "Dict[str, Dict[str, Any]]"
                ],
                "start": [
                    "int",
                    "Union[int, str]",
                    "Dict[str, Dict[str, Any]]"
                ]
            }
        },
        "BaseMiddleware.wsgi_app": {
            "name": "wsgi_app",
            "location": 137,
            "return": [
                "Callable",
                "str",
                "bool",
                "List[dict]",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-base-master/arxiv/base/middleware/request_logs.py": {
        "ClassicLogsMiddleware.before": {
            "name": "before",
            "location": 31,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "List[List[str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "dict",
                    "Callable",
                    "Dict[str, Any]",
                    "bytes"
                ],
                "start_response": [
                    "Callable",
                    "bool"
                ]
            }
        },
        "ClassicLogsMiddleware.after": {
            "name": "after",
            "location": 62,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "self": [],
                "response": []
            }
        }
    },
    "arxiv-base-master/arxiv/base/middleware/tests.py": {
        "TestWrap.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWrap.test_wrap_attaches_middleware": {
            "name": "test_wrap_attaches_middleware",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWrap.test_wrap_is_inside_out": {
            "name": "test_wrap_is_inside_out",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseMiddleware.setUp": {
            "name": "setUp",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseMiddleware.test_base": {
            "name": "test_base",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequestLogs.setUp": {
            "name": "setUp",
            "location": 95,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequestLogs.test_uwsgi_is_available": {
            "name": "test_uwsgi_is_available",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestRequestLogs.test_uwsgi_is_not_available": {
            "name": "test_uwsgi_is_not_available",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWrap.test_wrap_attaches_middleware.FooMiddleware.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "app": []
            }
        },
        "TestWrap.test_wrap_attaches_middleware.FooMiddleware.__call__": {
            "name": "__call__",
            "location": 30,
            "return": [
                "str",
                "tuple"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "Callable",
                    "Dict[str, Any]",
                    "dict"
                ],
                "start_response": [
                    "Callable",
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "TestWrap.test_wrap_attaches_middleware.FooMiddleware.wsgi_app": {
            "name": "wsgi_app",
            "location": 35,
            "return": [
                "Callable",
                "str",
                "bool",
                "List[dict]",
                "int",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWrap.test_wrap_is_inside_out.FirstMiddleware.before": {
            "name": "before",
            "location": 51,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "List[List[str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "str"
                ],
                "start_response": [
                    "Callable",
                    "bool"
                ]
            }
        },
        "TestWrap.test_wrap_is_inside_out.SecondMiddleware.before": {
            "name": "before",
            "location": 56,
            "return": [
                "Sequence['cirq.Qid']",
                "bool",
                "List[List[str]]",
                "str"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "str"
                ],
                "start_response": [
                    "Callable",
                    "bool"
                ]
            }
        }
    },
    "arxiv-base-master/arxiv/base/middleware/__init__.py": {
        "wrap": {
            "name": "wrap",
            "location": 84,
            "return": [
                "flask.Flask"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ],
                "middlewares": [
                    "flask.Flask",
                    "str"
                ]
            }
        }
    },
    "arxiv-base-master/arxiv/base/tests/test_alerts.py": {
        "TestFlashInfo.test_flash_message": {
            "name": "test_flash_message",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_flash": [
                    "str"
                ]
            }
        },
        "TestFlashInfo.test_flash_message_no_dismiss": {
            "name": "test_flash_message_no_dismiss",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_flash": [
                    "str",
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "TestFlashInfo.test_safe_flash_message": {
            "name": "test_safe_flash_message",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_flash": [
                    "str"
                ]
            }
        },
        "TestFlashInfo.test_flash_message_with_title": {
            "name": "test_flash_message_with_title",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_flash": [
                    "str"
                ]
            }
        },
        "TestFlashWarning.test_flash_message": {
            "name": "test_flash_message",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_flash": [
                    "str"
                ]
            }
        },
        "TestFlashWarning.test_flash_message_no_dismiss": {
            "name": "test_flash_message_no_dismiss",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_flash": [
                    "str",
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "TestFlashWarning.test_safe_flash_message": {
            "name": "test_safe_flash_message",
            "location": 78,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_flash": [
                    "str"
                ]
            }
        },
        "TestFlashWarning.test_flash_message_with_title": {
            "name": "test_flash_message_with_title",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_flash": [
                    "str"
                ]
            }
        },
        "TestFlashFailure.test_flash_message": {
            "name": "test_flash_message",
            "location": 103,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_flash": [
                    "str"
                ]
            }
        },
        "TestFlashFailure.test_flash_message_no_dismiss": {
            "name": "test_flash_message_no_dismiss",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_flash": [
                    "str",
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "TestFlashFailure.test_safe_flash_message": {
            "name": "test_safe_flash_message",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_flash": [
                    "str"
                ]
            }
        },
        "TestFlashFailure.test_flash_message_with_title": {
            "name": "test_flash_message_with_title",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_flash": [
                    "str"
                ]
            }
        },
        "TestFlashSuccess.test_flash_message": {
            "name": "test_flash_message",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_flash": [
                    "str"
                ]
            }
        },
        "TestFlashSuccess.test_flash_message_no_dismiss": {
            "name": "test_flash_message_no_dismiss",
            "location": 158,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_flash": [
                    "str",
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "TestFlashSuccess.test_safe_flash_message": {
            "name": "test_safe_flash_message",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_flash": [
                    "str"
                ]
            }
        },
        "TestFlashSuccess.test_flash_message_with_title": {
            "name": "test_flash_message_with_title",
            "location": 178,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_flash": [
                    "str"
                ]
            }
        }
    },
    "arxiv-base-master/arxiv/base/tests/test_exception_handling.py": {
        "TestExceptionHandling.setUp": {
            "name": "setUp",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExceptionHandling.test_401": {
            "name": "test_401",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExceptionHandling.test_404": {
            "name": "test_404",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExceptionHandling.test_400": {
            "name": "test_400",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExceptionHandling.test_403": {
            "name": "test_403",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExceptionHandling.test_413": {
            "name": "test_413",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExceptionHandling.test_500": {
            "name": "test_500",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-base-master/arxiv/base/tests/test_factory.py": {
        "TestBaseAppFactory.test_create_web_app": {
            "name": "test_create_web_app",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-base-master/arxiv/base/tests/test_logging.py": {
        "TestGetLogger.test_get_logger_no_app_nor_request": {
            "name": "test_get_logger_no_app_nor_request",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetLogger.test_get_logger_with_request": {
            "name": "test_get_logger_with_request",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestGetLogger.test_config_sets_loglevel": {
            "name": "test_config_sets_loglevel",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_get_config": [
                    "mock.MagicMock",
                    "int",
                    "contextlib.contextmanager"
                ],
                "mock_request": []
            }
        },
        "TestGetLogger.test_paper_id_is_set": {
            "name": "test_paper_id_is_set",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        },
        "TestGetLogger.test_paper_id_is_not_set": {
            "name": "test_paper_id_is_not_set",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_request": []
            }
        }
    },
    "arxiv-base-master/arxiv/base/tests/test_static_urls.py": {
        "TestAppWithStaticFiles.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAppWithStaticFiles.test_base_alters_static_url": {
            "name": "test_base_alters_static_url",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-base-master/arxiv/base/tests/__init__.py": {},
    "arxiv-base-master/arxiv/base/urls/clickthrough.py": {
        "create_hash": {
            "name": "create_hash",
            "location": 17,
            "return": [
                "str"
            ],
            "arguments": {
                "secret": [
                    "str",
                    "dict",
                    "Mapping"
                ],
                "url": [
                    "str",
                    "dict",
                    "Mapping"
                ]
            }
        },
        "is_hash_valid": {
            "name": "is_hash_valid",
            "location": 23,
            "return": [
                "int",
                "List['Product']",
                "Iterable[Any]",
                "Optional[Type]",
                "Type[T]",
                "Optional[int]"
            ],
            "arguments": {
                "secret": [
                    "str",
                    "dict",
                    "int"
                ],
                "url": [
                    "str",
                    "dict",
                    "int"
                ],
                "ct_hash": [
                    "str",
                    "dict",
                    "int"
                ]
            }
        },
        "clickthrough_url": {
            "name": "clickthrough_url",
            "location": 28,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "url": [
                    "str"
                ]
            }
        }
    },
    "arxiv-base-master/arxiv/base/urls/links.py": {
        "_without_group_names": {
            "name": "_without_group_names",
            "location": 64,
            "return": [
                "int",
                "Dict[str, Any]",
                "str",
                "Container[str]"
            ],
            "arguments": {
                "pattern": [
                    "str",
                    "Optional[str]",
                    "Optional[int]",
                    "int"
                ]
            }
        },
        "arxiv_id_to_url": {
            "name": "arxiv_id_to_url",
            "location": 134,
            "return": [
                "str"
            ],
            "arguments": {
                "arxiv_id": [
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "url_for_doi": {
            "name": "url_for_doi",
            "location": 140,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "doi": [
                    "str",
                    "Callable",
                    "List[str]"
                ]
            }
        },
        "clickthrough_url_for_doi": {
            "name": "clickthrough_url_for_doi",
            "location": 146,
            "return": [
                "bool",
                "Optional[str]",
                "str"
            ],
            "arguments": {
                "doi": [
                    "str",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "_extend_class_attr": {
            "name": "_extend_class_attr",
            "location": 151,
            "return": [
                "int",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "attrs": [
                    "Optional[List[Type]]",
                    "Type",
                    "Tuple[List[str], Optional[str]]"
                ],
                "new_class": [
                    "Tuple[List[str], Optional[str]]"
                ]
            }
        },
        "_add_rel": {
            "name": "_add_rel",
            "location": 158,
            "return": [
                "Optional[str]",
                "bool"
            ],
            "arguments": {
                "attrs": [
                    "Optional[Dict[str, Any]]",
                    "int",
                    "List[Union[\"PipeChain\", str]]",
                    "str"
                ],
                "new": [
                    "str",
                    "Dict[str, int]",
                    "dict",
                    "Callable[[str], None]",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "_add_rel_external": {
            "name": "_add_rel_external",
            "location": 167,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "attrs": [
                    "Optional[str]",
                    "Optional[T]",
                    "VT",
                    "Iterator[T]"
                ],
                "new": [
                    "List[float]",
                    "Optional[str]"
                ]
            }
        },
        "_add_rel_internal": {
            "name": "_add_rel_internal",
            "location": 177,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "attrs": [
                    "int",
                    "Callable"
                ],
                "new": [
                    "List[float]",
                    "Optional[str]"
                ]
            }
        },
        "_this_url_text": {
            "name": "_this_url_text",
            "location": 183,
            "return": [
                "str",
                "Iterable[T]"
            ],
            "arguments": {
                "attrs": [
                    "List[str]",
                    "List[Union[\"PipeChain\", str]]",
                    "Union[List[str], Tuple[str, ...]]"
                ],
                "new": [
                    "Type",
                    "T",
                    "Callable"
                ]
            }
        },
        "_add_scheme_info": {
            "name": "_add_scheme_info",
            "location": 190,
            "return": [
                "int",
                "set",
                "str"
            ],
            "arguments": {
                "attrs": [
                    "Callable",
                    "Dict[str, Any]",
                    "str",
                    "Optional[Callable]",
                    "bool",
                    "Sequence[str]"
                ],
                "new": [
                    "List[float]",
                    "T",
                    "int"
                ]
            }
        },
        "_handle_arxiv_url": {
            "name": "_handle_arxiv_url",
            "location": 198,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "attrs": [
                    "str",
                    "Iterable[str]",
                    "dict",
                    "Optional[str]",
                    "Dict[str, List[bytes]]",
                    "Dict[str, Any]",
                    "Dict[str, Dict]"
                ],
                "new": [
                    "list",
                    "Tuple[float, float]",
                    "List[int]",
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "_handle_doi_url": {
            "name": "_handle_doi_url",
            "location": 223,
            "return": [
                "str",
                "float"
            ],
            "arguments": {
                "attrs": [
                    "int",
                    "type",
                    "str",
                    "Union[None, str, List[str], Dict[str, str]]",
                    "Optional[str]",
                    "Exception",
                    "Optional[int]"
                ],
                "new": [
                    "list",
                    "Tuple[float, float]",
                    "List[int]",
                    "int",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "_handle_broad_doi_url": {
            "name": "_handle_broad_doi_url",
            "location": 249,
            "return": [
                "str",
                "Iterable[Any]",
                "int"
            ],
            "arguments": {
                "attrs": [
                    "dict",
                    "str",
                    "Callable"
                ],
                "new": [
                    "str"
                ]
            }
        },
        "_dont_urlize_arxiv_categories": {
            "name": "_dont_urlize_arxiv_categories",
            "location": 279,
            "return": [
                "Optional[str]",
                "str",
                "Optional[int]"
            ],
            "arguments": {
                "attrs": [
                    "flask.FlaskCookieService",
                    "bool",
                    "str",
                    "Optional[int]"
                ],
                "new": [
                    "Optional[str]",
                    "List[float]"
                ]
            }
        },
        "_get_pattern": {
            "name": "_get_pattern",
            "location": 309,
            "return": [
                "str",
                "int",
                "Type[Any]"
            ],
            "arguments": {
                "kinds": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "_get_linker_of_kind": {
            "name": "_get_linker_of_kind",
            "location": 321,
            "return": [
                "List[str]",
                "str",
                "Callable",
                "int"
            ],
            "arguments": {
                "kind": [
                    "Mapping[str, Any]",
                    "bool",
                    "Iterable[str]",
                    "Type[T]",
                    "Mapping"
                ]
            }
        },
        "_compose_list_of_funcs": {
            "name": "_compose_list_of_funcs",
            "location": 332,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "fv": [
                    "List[List[float]]",
                    "Callable"
                ]
            }
        },
        "_deferred_thread_local_linker_of_kind": {
            "name": "_deferred_thread_local_linker_of_kind",
            "location": 339,
            "return": [
                "int",
                "Sequence",
                "Tuple[int]",
                "str"
            ],
            "arguments": {
                "kind": [
                    "int",
                    "float"
                ]
            }
        },
        "_get_linker": {
            "name": "_get_linker",
            "location": 361,
            "return": [
                "str",
                "List[str]",
                "Set[str]",
                "Sequence[str]"
            ],
            "arguments": {
                "kinds": [
                    "Optional[Iterable[T]]",
                    "bool",
                    "float"
                ]
            }
        },
        "urlize": {
            "name": "urlize",
            "location": 376,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "text": [
                    "str"
                ],
                "kinds": [
                    "str"
                ]
            }
        },
        "urlizer": {
            "name": "urlizer",
            "location": 396,
            "return": [
                "int",
                "str",
                "bool",
                "Optional[BaseException]",
                "Union[str, Tuple[str, ...]]"
            ],
            "arguments": {
                "kinds": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "_deferred_thread_local_linker_of_kind.deferred": {
            "name": "deferred",
            "location": 347,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "instr": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "arxiv-base-master/arxiv/base/urls/__init__.py": {
        "build_adapter": {
            "name": "build_adapter",
            "location": 79,
            "return": [
                "bool"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "external_url_handler": {
            "name": "external_url_handler",
            "location": 98,
            "return": [
                "str"
            ],
            "arguments": {
                "err": [
                    "werkzeug.routing.BuildError",
                    "int",
                    "Tuple[str, str, str]"
                ],
                "endpoint": [
                    "str",
                    "int",
                    "Tuple[int, int]"
                ],
                "values": [
                    "dict",
                    "str",
                    "int",
                    "List[str]"
                ]
            }
        },
        "canonical_url": {
            "name": "canonical_url",
            "location": 120,
            "return": [
                "str"
            ],
            "arguments": {
                "id": [
                    "str",
                    "int",
                    "Optional[str]",
                    "Optional[\"Address\"]"
                ],
                "version": [
                    "int",
                    "str",
                    "List[int]"
                ]
            }
        },
        "register_external_urls": {
            "name": "register_external_urls",
            "location": 138,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        }
    },
    "arxiv-base-master/arxiv/base/urls/tests/test_click_through.py": {
        "TestClickthroughFuzzTest.test_clickthrough": {
            "name": "test_clickthrough",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "s": [
                    "Callable"
                ],
                "v": [
                    "Callable"
                ]
            }
        }
    },
    "arxiv-base-master/arxiv/base/urls/tests/test_urlize.py": {
        "mock_url_for": {
            "name": "mock_url_for",
            "location": 9,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "endpoint": [
                    "List[Dict[str, Any]]",
                    "bool",
                    "str",
                    "Sequence[Dict[str, Any]]"
                ]
            }
        },
        "Id_Patterns_Test.setUp": {
            "name": "setUp",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Id_Patterns_Test.test_arxiv_ids": {
            "name": "test_arxiv_ids",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Id_Patterns_Test.test_find_match": {
            "name": "test_find_match",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLize.setUp": {
            "name": "setUp",
            "location": 58,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLize.test_dont_urlize_cats": {
            "name": "test_dont_urlize_cats",
            "location": 61,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLize.test_doi": {
            "name": "test_doi",
            "location": 69,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_clickthrough": []
            }
        },
        "TestURLize.test_transform_token": {
            "name": "test_transform_token",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLize.test_urlize": {
            "name": "test_urlize",
            "location": 125,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_clickthrough": [
                    "mock.Mock"
                ]
            }
        },
        "TestURLize.test_parens": {
            "name": "test_parens",
            "location": 242,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLize.test_hosts": {
            "name": "test_hosts",
            "location": 253,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLize.test_urls_with_plus": {
            "name": "test_urls_with_plus",
            "location": 271,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLize.test_anchors_with_slash": {
            "name": "test_anchors_with_slash",
            "location": 281,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLize.test_ftp": {
            "name": "test_ftp",
            "location": 292,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLize.test_arxiv_prefix": {
            "name": "test_arxiv_prefix",
            "location": 302,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLize.test_doi_2": {
            "name": "test_doi_2",
            "location": 310,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_clickthrough": []
            }
        },
        "TestURLize.test_double_doi": {
            "name": "test_double_doi",
            "location": 341,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_clickthrough": []
            }
        },
        "TestURLize.test_broad_doi": {
            "name": "test_broad_doi",
            "location": 359,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_clickthrough": []
            }
        },
        "TestURLize.test_dont_urlize_category_name": {
            "name": "test_dont_urlize_category_name",
            "location": 435,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestURLize.test_dont_urlize_arxiv_dot_org": {
            "name": "test_dont_urlize_arxiv_dot_org",
            "location": 449,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Id_Patterns_Test.test_arxiv_ids.find_match": {
            "name": "find_match",
            "location": 20,
            "return": [],
            "arguments": {
                "txt": []
            }
        },
        "Id_Patterns_Test.test_find_match.find_match": {
            "name": "find_match",
            "location": 39,
            "return": [
                "bool",
                "str",
                "Optional[Any]",
                "Sequence"
            ],
            "arguments": {
                "txt": [
                    "str",
                    "List[str]",
                    "Optional[int]"
                ]
            }
        },
        "TestURLize.test_urlize.test_category_id": {
            "name": "test_category_id",
            "location": 235,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-base-master/arxiv/base/urls/tests/test_urls.py": {
        "TestStaticURLs.test_static_urls": {
            "name": "test_static_urls",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestStaticURLs.test_relative_static_urls": {
            "name": "test_relative_static_urls",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetURLMap.test_no_urls_configured": {
            "name": "test_no_urls_configured",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetURLMap.test_base_urls": {
            "name": "test_base_urls",
            "location": 74,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetURLMap.test_combined_urls": {
            "name": "test_combined_urls",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestGetURLMap.test_overlapping_urls": {
            "name": "test_overlapping_urls",
            "location": 101,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExternalURLFallback.setUp": {
            "name": "setUp",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExternalURLFallback.test_application_url": {
            "name": "test_application_url",
            "location": 132,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExternalURLFallback.test_url_from_app_config": {
            "name": "test_url_from_app_config",
            "location": 143,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExternalURLFallback.test_url_from_base_config": {
            "name": "test_url_from_base_config",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWithClient.setUp": {
            "name": "setUp",
            "location": 165,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestWithClient.test_application_url": {
            "name": "test_application_url",
            "location": 193,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestExternalURLFallback.setUp.something": {
            "name": "something",
            "location": 129,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "TestWithClient.setUp.baz_location": {
            "name": "baz_location",
            "location": 176,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "TestWithClient.setUp.bat_location": {
            "name": "bat_location",
            "location": 180,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "TestWithClient.setUp.acknowledgment_location": {
            "name": "acknowledgment_location",
            "location": 184,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "TestWithClient.setUp.something": {
            "name": "something",
            "location": 188,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "arxiv-base-master/arxiv/base/urls/tests/__init__.py": {},
    "arxiv-base-master/arxiv/forms/csrf.py": {
        "SessionCSRF.setup_form": {
            "name": "setup_form",
            "location": 78,
            "return": [
                "Dict[str, bool]",
                "dict",
                "Dict[str, str]",
                "cmk.base.events.EventContext",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "self": [],
                "form": []
            }
        },
        "SessionCSRF._hash": {
            "name": "_hash",
            "location": 86,
            "return": [
                "Callable",
                "bytes",
                "T",
                "int",
                "IO"
            ],
            "arguments": {
                "secret": [
                    "int"
                ],
                "nonce": [
                    "bool",
                    "Optional[bool]",
                    "Callable",
                    "int"
                ],
                "ip_address": [
                    "bool",
                    "Optional[bool]",
                    "Callable",
                    "int"
                ],
                "expires": [
                    "bool",
                    "Optional[bool]",
                    "Callable",
                    "int"
                ]
            }
        },
        "SessionCSRF._new_expiry": {
            "name": "_new_expiry",
            "location": 92,
            "return": [
                "str",
                "datetime.datetime",
                "datetime.date",
                "int",
                "Sequence[str]",
                "Tuple[str, str]"
            ],
            "arguments": {
                "timeout": [
                    "int",
                    "Optional[Union[float, datetime.timedelta]]",
                    "float",
                    "bool",
                    "Optional[float]"
                ]
            }
        },
        "SessionCSRF._join": {
            "name": "_join",
            "location": 99,
            "return": [
                "str",
                "Optional[str]",
                "int"
            ],
            "arguments": {
                "digest": [
                    "int",
                    "Callable",
                    "str"
                ],
                "expires": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "SessionCSRF._split": {
            "name": "_split",
            "location": 103,
            "return": [
                "Callable[[T], bool]",
                "str",
                "List[Tuple]",
                "bool"
            ],
            "arguments": {
                "csrf_token": [
                    "str",
                    "Set[str]",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "SessionCSRF.generate_csrf_token": {
            "name": "generate_csrf_token",
            "location": 107,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "Sequence[Any]",
                    "tuple",
                    "Dict[str, Any]"
                ]
            }
        },
        "SessionCSRF.validate_csrf_token": {
            "name": "validate_csrf_token",
            "location": 115,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "form": [
                    "wtforms.Form",
                    "Iterable[str]",
                    "int"
                ],
                "field": [
                    "str",
                    "Type[Any]",
                    "List[str]",
                    "Match"
                ]
            }
        },
        "CSRFForm.Meta.csrf_secret": {
            "name": "csrf_secret",
            "location": 142,
            "return": [
                "str",
                "int",
                "Union[bytes, bytearray]",
                "bytearray"
            ],
            "arguments": {
                "self": []
            }
        },
        "CSRFForm.Meta.csrf_context": {
            "name": "csrf_context",
            "location": 152,
            "return": [
                "bool",
                "List[Dict[str, Any]]",
                "int",
                "Iterable[str]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-base-master/arxiv/forms/tests.py": {
        "TestCSRFForm.test_invalid_token": {
            "name": "test_invalid_token",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_get_config": [
                    "mock.MagicMock"
                ],
                "mock_request": []
            }
        },
        "TestCSRFForm.test_valid_token": {
            "name": "test_valid_token",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_get_config": [],
                "mock_request": []
            }
        },
        "TestCSRFForm.test_expired_token": {
            "name": "test_expired_token",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_get_config": [],
                "mock_request": []
            }
        },
        "TestCSRFFormWithNewSessionRef.test_invalid_token": {
            "name": "test_invalid_token",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_get_config": [
                    "mock.MagicMock"
                ],
                "mock_request": []
            }
        },
        "TestCSRFFormWithNewSessionRef.test_valid_token": {
            "name": "test_valid_token",
            "location": 107,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_get_config": [],
                "mock_request": []
            }
        },
        "TestCSRFFormWithNewSessionRef.test_expired_token": {
            "name": "test_expired_token",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_get_config": [],
                "mock_request": []
            }
        }
    },
    "arxiv-base-master/arxiv/forms/__init__.py": {},
    "arxiv-base-master/arxiv/identifier/tests.py": {
        "TestParseArXivID.test_old_style_with_archive": {
            "name": "test_old_style_with_archive",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParseArXivID.test_old_style_with_category": {
            "name": "test_old_style_with_category",
            "location": 17,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParseArXivID.test_old_style_with_version": {
            "name": "test_old_style_with_version",
            "location": 22,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParseArXivID.test_odd_mashup": {
            "name": "test_odd_mashup",
            "location": 26,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParseArXivID.test_new_style": {
            "name": "test_new_style",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestParseArXivID.test_new_style_with_version": {
            "name": "test_new_style_with_version",
            "location": 35,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-base-master/arxiv/identifier/__init__.py": {
        "parse_arxiv_id": {
            "name": "parse_arxiv_id",
            "location": 50,
            "return": [
                "str",
                "Iterable[int]",
                "bool"
            ],
            "arguments": {
                "value": [
                    "str"
                ]
            }
        }
    },
    "arxiv-base-master/arxiv/integration/meta.py": {
        "MetaIntegration.__getattribute__": {
            "name": "__getattribute__",
            "location": 142,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "key": [
                    "str",
                    "Union[str, int]",
                    "bytes"
                ]
            }
        }
    },
    "arxiv-base-master/arxiv/integration/tests.py": {
        "ContextSingleton.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "ContextSingleton.set_context": {
            "name": "set_context",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "List[str]",
                    "Optional[Callable]",
                    "int"
                ]
            }
        },
        "ContextSingleton.get_context": {
            "name": "get_context",
            "location": 19,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMetaIntegration.setUpClass": {
            "name": "setUpClass",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "cls": [
                    "List[str]",
                    "list",
                    "dict",
                    "List[Tuple[str, str]]",
                    "str"
                ]
            }
        },
        "TestMetaIntegration.setUp": {
            "name": "setUp",
            "location": 56,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMetaIntegration.test_get_instance": {
            "name": "test_get_instance",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMetaIntegration.test_get_contextualized_instance": {
            "name": "test_get_contextualized_instance",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMetaIntegration.test_get_contextualized_method": {
            "name": "test_get_contextualized_method",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMetaIntegration.setUpClass.TestIntegration.__init__": {
            "name": "__init__",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "context": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "TestMetaIntegration.setUpClass.TestIntegration.current_session": {
            "name": "current_session",
            "location": 39,
            "return": [
                "str",
                "Union[str, bytes]"
            ],
            "arguments": {
                "ccls": [
                    "dict"
                ]
            }
        },
        "TestMetaIntegration.setUpClass.TestIntegration.get_something": {
            "name": "get_something",
            "location": 46,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMetaIntegration.setUpClass.TestIntegration.get_instance": {
            "name": "get_instance",
            "location": 50,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-base-master/arxiv/integration/__init__.py": {},
    "arxiv-base-master/arxiv/integration/api/exceptions.py": {
        "RequestFailed.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "msg": [
                    "bytes",
                    "dict",
                    "str",
                    "Optional[int]"
                ],
                "response": [
                    "int",
                    "str",
                    "float",
                    "pyatv.suppormdns.Response",
                    "scrapy.http.Response",
                    "List[str]",
                    "bytes"
                ]
            }
        },
        "RequestFailed.status_code": {
            "name": "status_code",
            "location": 16,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-base-master/arxiv/integration/api/service.py": {
        "raise_for_http_status": {
            "name": "raise_for_http_status",
            "location": 283,
            "return": [
                "None"
            ],
            "arguments": {
                "status_code": [
                    "int",
                    "requests.Response",
                    "bytes",
                    "Optional[requests.Response]"
                ],
                "resp": [
                    "Optional[requests.Response]",
                    "int",
                    "str",
                    "dict",
                    "http.HTTPStatus",
                    "Dict[str, str]",
                    "Optional[str]"
                ]
            }
        },
        "HTTPIntegration.__init__": {
            "name": "__init__",
            "location": 122,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "Optional[int]",
                    "dict",
                    "bool",
                    "bytes"
                ],
                "verify": [
                    "str",
                    "bytes",
                    "int",
                    "bool",
                    "float"
                ],
                "headers": [
                    "str",
                    "dict",
                    "Mapping[str, str]",
                    "http.MITMResponse"
                ]
            }
        },
        "HTTPIntegration.get_retry_config": {
            "name": "get_retry_config",
            "location": 149,
            "return": [
                "dict",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPIntegration._path": {
            "name": "_path",
            "location": 160,
            "return": [
                "str",
                "Type[Any]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[str]"
                ],
                "query": [
                    "dict",
                    "str",
                    "Optional['Directory']",
                    "Optional[str]",
                    "Optional[int]"
                ]
            }
        },
        "HTTPIntegration._check_status": {
            "name": "_check_status",
            "location": 169,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "resp": [
                    "requests.Response",
                    "int",
                    "str",
                    "bool"
                ],
                "expected_code": [
                    "List[int]",
                    "int",
                    "dict",
                    "str"
                ]
            }
        },
        "HTTPIntegration._parse_location": {
            "name": "_parse_location",
            "location": 176,
            "return": [
                "bool",
                "float",
                "Optional[Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "location": [
                    "str",
                    "Optional[str]",
                    "Optional[List[str]]"
                ]
            }
        },
        "HTTPIntegration.request": {
            "name": "request",
            "location": 184,
            "return": [
                "Dict[str, Any]",
                "dict",
                "Exception",
                "Optional[Dict[str, str]]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "Optional[Mapping[str, str]]",
                    "int",
                    "Optional[str]",
                    "requests.Session"
                ],
                "path": [
                    "str",
                    "Optional[str]",
                    "bool",
                    "list"
                ],
                "token": [
                    "Optional[dict]",
                    "Optional[Dict[str, Any]]",
                    "str",
                    "List[Tuple[str, bytes]]",
                    "Dict[str, Union[str, Any]]"
                ],
                "expected_code": [
                    "str",
                    "int",
                    "Dict[int, Set[int]]",
                    "bool"
                ],
                "allow_2xx_redirects": [
                    "str",
                    "bytes",
                    "Optional[str]",
                    "Optional[dict]"
                ]
            }
        },
        "HTTPIntegration.json": {
            "name": "json",
            "location": 216,
            "return": [
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "method": [
                    "str",
                    "pymatgen.util.PathLike",
                    "Optional[int]"
                ],
                "path": [
                    "str",
                    "pymatgen.util.PathLike",
                    "Optional[int]"
                ],
                "token": [
                    "str",
                    "pymatgen.util.PathLike",
                    "Optional[int]"
                ],
                "expected_code": [
                    "str",
                    "pymatgen.util.PathLike",
                    "Optional[int]"
                ]
            }
        },
        "HTTPIntegration.get_status": {
            "name": "get_status",
            "location": 238,
            "return": [
                "str",
                "Optional[str]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "HTTPIntegration.init_app": {
            "name": "init_app",
            "location": 246,
            "return": [
                "None"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "MutableMapping[str, Any]"
                ],
                "app": [
                    "flask.Flask"
                ]
            }
        },
        "HTTPIntegration.get_session": {
            "name": "get_session",
            "location": 255,
            "return": [
                "str"
            ],
            "arguments": {
                "cls": [
                    "bool",
                    "str",
                    "Set[str]",
                    "dict",
                    "List[Tuple[str, str]]"
                ],
                "app": [
                    "Optional[flask.Flask]",
                    "flask.Flask",
                    "Optional[flask.app.Flask]"
                ]
            }
        },
        "HTTPIntegration.current_session": {
            "name": "current_session",
            "location": 273,
            "return": [
                "bool",
                "int",
                "str",
                "dict"
            ],
            "arguments": {
                "cls": [
                    "dict"
                ]
            }
        }
    },
    "arxiv-base-master/arxiv/integration/api/tests.py": {
        "TestHTTPIntegration.session": {
            "name": "session",
            "location": 12,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "status_code": [
                    "mock.MagicMock"
                ],
                "method": [
                    "mock.MagicMock"
                ],
                "json": [
                    "mock.MagicMock"
                ],
                "content": [
                    "mock.MagicMock"
                ],
                "headers": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestHTTPIntegration.setUp": {
            "name": "setUp",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHTTPIntegration.test_init_app": {
            "name": "test_init_app",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHTTPIntegration.test_request_in_context": {
            "name": "test_request_in_context",
            "location": 42,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_Session": []
            }
        },
        "TestHTTPIntegration.test_handles_500_series": {
            "name": "test_handles_500_series",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_Session": []
            }
        },
        "TestHTTPIntegration.test_handles_unauthorized": {
            "name": "test_handles_unauthorized",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_Session": []
            }
        },
        "TestHTTPIntegration.test_handles_forbidden": {
            "name": "test_handles_forbidden",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_Session": []
            }
        },
        "TestHTTPIntegration.test_handles_not_found": {
            "name": "test_handles_not_found",
            "location": 120,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_Session": []
            }
        },
        "TestHTTPIntegration.test_handle_bad_request": {
            "name": "test_handle_bad_request",
            "location": 136,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_Session": []
            }
        },
        "TestHTTPIntegration.test_handle_unexpected": {
            "name": "test_handle_unexpected",
            "location": 152,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_Session": []
            }
        }
    },
    "arxiv-base-master/arxiv/integration/api/__init__.py": {},
    "arxiv-base-master/arxiv/integration/kinesis/__init__.py": {},
    "arxiv-base-master/arxiv/integration/kinesis/consumer/exceptions.py": {},
    "arxiv-base-master/arxiv/integration/kinesis/consumer/tests.py": {
        "TestBaseConsumer.setUp": {
            "name": "setUp",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestBaseConsumer.test_go": {
            "name": "test_go",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_session_factory": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestBaseConsumer.test_go_stream_not_available": {
            "name": "test_go_stream_not_available",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_session_factory": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestBaseConsumer.test_iteration": {
            "name": "test_iteration",
            "location": 67,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_session_factory": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestBaseConsumer.test_process_records_until_shard_closes": {
            "name": "test_process_records_until_shard_closes",
            "location": 89,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_session_factory": [
                    "mock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestBaseConsumer.test_process_records_with_clienterror": {
            "name": "test_process_records_with_clienterror",
            "location": 123,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_session_factory": [
                    "mock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestBaseConsumer.test_start_from_timestamp": {
            "name": "test_start_from_timestamp",
            "location": 148,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_session_factory": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestBaseConsumer.test_start_from_position": {
            "name": "test_start_from_position",
            "location": 166,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_session_factory": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestBaseConsumer.test_start_from_trim_horizon": {
            "name": "test_start_from_trim_horizon",
            "location": 185,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_session_factory": [
                    "Dict[str, Any]"
                ]
            }
        },
        "TestProcessStream.setUp": {
            "name": "setUp",
            "location": 206,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessStream.test_process_stream": {
            "name": "test_process_stream",
            "location": 217,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_session_factory": [
                    "mock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestProcessStream.test_restart_processing": {
            "name": "test_restart_processing",
            "location": 254,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_session_factory": [
                    "mock.Mock",
                    "mock.MagicMock"
                ]
            }
        },
        "TestBaseConsumer.test_go_stream_not_available.raise_waiter_error": {
            "name": "raise_waiter_error",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestBaseConsumer.test_process_records_until_shard_closes.get_records": {
            "name": "get_records",
            "location": 96,
            "return": [
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {}
        },
        "TestBaseConsumer.test_process_records_with_clienterror.raise_client_error": {
            "name": "raise_client_error",
            "location": 130,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestProcessStream.test_process_stream.FooConsumer.__init__": {
            "name": "__init__",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProcessStream.test_process_stream.FooCheckpointer.__init__": {
            "name": "__init__",
            "location": 241,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestProcessStream.test_process_stream.FooCheckpointer.checkpoint": {
            "name": "checkpoint",
            "location": 244,
            "return": [],
            "arguments": {
                "self": [],
                "position": []
            }
        },
        "TestProcessStream.test_restart_processing.FooConsumer.__init__": {
            "name": "__init__",
            "location": 271,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessStream.test_restart_processing.FooCheckpointer.__init__": {
            "name": "__init__",
            "location": 280,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestProcessStream.test_restart_processing.FooCheckpointer.checkpoint": {
            "name": "checkpoint",
            "location": 283,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "position": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "arxiv-base-master/arxiv/integration/kinesis/consumer/__init__.py": {
        "process_stream": {
            "name": "process_stream",
            "location": 432,
            "return": [
                "Union[tuple, list]",
                "List[int]",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "Consumer": [
                    "dict",
                    "Dict[str, str]"
                ],
                "config": [
                    "dict",
                    "Dict[str, str]",
                    "Dict[str, Any]"
                ],
                "checkpointmanager": [
                    "dict"
                ],
                "duration": [
                    "dict",
                    "Dict[str, str]"
                ],
                "extra": [
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "DiskCheckpointManager.__init__": {
            "name": "__init__",
            "location": 118,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "base_path": [
                    "str",
                    "Optional[str]",
                    "Optional[Dict[str, str]]"
                ],
                "stream_name": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ],
                "shard_id": [
                    "str",
                    "Optional[str]",
                    "List[str]"
                ]
            }
        },
        "DiskCheckpointManager.checkpoint": {
            "name": "checkpoint",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "position": [
                    "str",
                    "neuromation.api.StdStream",
                    "IO"
                ]
            }
        },
        "BaseConsumer.__init__": {
            "name": "__init__",
            "location": 154,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "stream_name": [
                    "str",
                    "List[str]"
                ],
                "shard_id": [
                    "str",
                    "Sequence[str]"
                ],
                "access_key": [
                    "dict",
                    "Optional[str]",
                    "list",
                    "Dict[str, List[str]]",
                    "Union[Dict[str, Any], List[Any]]",
                    "Sequence[str]"
                ],
                "secret_key": [
                    "bytes",
                    "list",
                    "bool",
                    "Optional[\"TrackingData\"]",
                    "Dict[str, Set[str]]",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ],
                "region": [
                    "str",
                    "bool",
                    "list",
                    "List[str]"
                ],
                "checkpointer": [
                    "str",
                    "bool",
                    "list",
                    "List[str]"
                ],
                "back_off": [
                    "str",
                    "bool",
                    "list",
                    "List[str]"
                ],
                "batch_size": [
                    "bytes",
                    "int",
                    "str",
                    "bool",
                    "Tuple[str, str]"
                ],
                "endpoint": [
                    "str",
                    "bool",
                    "list",
                    "List[str]"
                ],
                "verify": [
                    "str",
                    "bool",
                    "list",
                    "List[str]"
                ],
                "duration": [
                    "str",
                    "bool",
                    "list",
                    "List[str]"
                ],
                "start_type": [
                    "str",
                    "Optional[str]",
                    "List[str]",
                    "int",
                    "Dict[str, Union[str, int, bool]]"
                ],
                "start_at": [
                    "str"
                ],
                "tries": [
                    "int",
                    "List[str]"
                ],
                "delay": [
                    "int",
                    "List[str]"
                ],
                "max_delay": [
                    "int",
                    "List[str]"
                ],
                "backoff": [
                    "int",
                    "List[str]"
                ],
                "jitter": [
                    "int",
                    "List[str]"
                ]
            }
        },
        "BaseConsumer.get_or_create_stream": {
            "name": "get_or_create_stream",
            "location": 209,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConsumer.stop": {
            "name": "stop",
            "location": 221,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "signal": [
                    "str",
                    "logging.Logger"
                ],
                "frame": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        },
        "BaseConsumer.new_client": {
            "name": "new_client",
            "location": 228,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConsumer.wait_for_stream": {
            "name": "wait_for_stream",
            "location": 245,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tries": [
                    "int",
                    "str",
                    "float"
                ],
                "delay": [
                    "int",
                    "str",
                    "float"
                ],
                "max_delay": [
                    "int",
                    "str",
                    "float"
                ],
                "backoff": [
                    "int",
                    "str",
                    "float"
                ],
                "jitter": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "BaseConsumer._get_iterator": {
            "name": "_get_iterator",
            "location": 283,
            "return": [
                "str",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConsumer._checkpoint": {
            "name": "_checkpoint",
            "location": 326,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConsumer.get_records": {
            "name": "get_records",
            "location": 337,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "iterator": [
                    "str",
                    "Dict[str, Any]",
                    "float"
                ],
                "limit": [
                    "str"
                ],
                "tries": [
                    "Tuple[str, int]",
                    "List[int]",
                    "Dict[str, Any]"
                ],
                "delay": [
                    "Tuple[str, int]",
                    "List[int]",
                    "Dict[str, Any]"
                ],
                "max_delay": [
                    "Tuple[str, int]",
                    "List[int]",
                    "Dict[str, Any]"
                ],
                "backoff": [
                    "Tuple[str, int]",
                    "List[int]",
                    "Dict[str, Any]"
                ],
                "jitter": [
                    "Tuple[str, int]",
                    "List[int]",
                    "Dict[str, Any]"
                ]
            }
        },
        "BaseConsumer._check_timeout": {
            "name": "_check_timeout",
            "location": 355,
            "return": [
                "str",
                "Optional[bool]",
                "Iterable[Hashable]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConsumer.process_records": {
            "name": "process_records",
            "location": 365,
            "return": [
                "float",
                "Tuple[Tuple[int, Any]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "start": [
                    "int"
                ]
            }
        },
        "BaseConsumer.go": {
            "name": "go",
            "location": 398,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseConsumer.process_record": {
            "name": "process_record",
            "location": 418,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "record": [
                    "int",
                    "float",
                    "logging.Logger"
                ]
            }
        }
    },
    "arxiv-base-master/arxiv/license/tests.py": {
        "TestLicense.test_current_license_uris": {
            "name": "test_current_license_uris",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLicense.test_licenses_are_valid": {
            "name": "test_licenses_are_valid",
            "location": 24,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestLicense.test_assumed_license_is_valid": {
            "name": "test_assumed_license_is_valid",
            "location": 38,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-base-master/arxiv/license/__init__.py": {},
    "arxiv-base-master/arxiv/mail/mail.py": {
        "send": {
            "name": "send",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "recipient": [
                    "str",
                    "int",
                    "bool"
                ],
                "subject": [
                    "str",
                    "int",
                    "bool"
                ],
                "text_body": [
                    "str",
                    "int",
                    "bool"
                ],
                "html_body": [
                    "str",
                    "int",
                    "bool"
                ],
                "sender": [
                    "str",
                    "int",
                    "bool"
                ],
                "headers": [
                    "str",
                    "int",
                    "bool"
                ],
                "cc_recipients": [
                    "str",
                    "int",
                    "bool"
                ],
                "bcc_recipients": [
                    "str",
                    "int",
                    "bool"
                ]
            }
        },
        "_write": {
            "name": "_write",
            "location": 58,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "recipient": [
                    "bool",
                    "Optional[str]",
                    "Sequence",
                    "float",
                    "Iterable[str]"
                ],
                "subject": [
                    "bool",
                    "Optional[str]",
                    "Sequence",
                    "float",
                    "Iterable[str]"
                ],
                "text_body": [
                    "str",
                    "Optional[str]"
                ],
                "html_body": [
                    "str",
                    "bool",
                    "raiden.utils.Address",
                    "int"
                ],
                "sender": [
                    "Optional[Set[int]]",
                    "Optional[Union[str, Any]]",
                    "Optional[str]"
                ],
                "headers": [
                    "str",
                    "bool",
                    "List[str]"
                ],
                "cc_recipients": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Optional[Callable[..., None]]",
                    "list"
                ],
                "bcc_recipients": [
                    "str",
                    "List[str]",
                    "Optional[str]",
                    "Optional[Callable[..., None]]",
                    "list"
                ]
            }
        },
        "_send": {
            "name": "_send",
            "location": 82,
            "return": [
                "None"
            ],
            "arguments": {
                "message": [
                    "str",
                    "raiden.utils.Optional[raiden.utils.Signature]",
                    "int",
                    "raiden.utils.TokenAmount",
                    "bool"
                ],
                "host": [
                    "int",
                    "Optional[str]",
                    "Dict[str, str]",
                    "str",
                    "bool"
                ],
                "port": [
                    "int",
                    "Optional[str]",
                    "Dict[str, str]",
                    "str",
                    "bool"
                ],
                "local_hostname": [
                    "int",
                    "Optional[str]",
                    "Dict[str, str]",
                    "str",
                    "bool"
                ],
                "use_ssl": [
                    "bool"
                ],
                "username": [
                    "bool",
                    "str",
                    "int"
                ],
                "password": [
                    "bool",
                    "str",
                    "int"
                ]
            }
        },
        "_get_default_sender": {
            "name": "_get_default_sender",
            "location": 93,
            "return": [
                "Optional[str]",
                "str",
                "Optional[List[str]]",
                "int",
                "cmk.utils.type_defs.ServiceName"
            ],
            "arguments": {}
        },
        "_get_smtp_hostname": {
            "name": "_get_smtp_hostname",
            "location": 97,
            "return": [
                "str",
                "int",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {}
        },
        "_get_smtp_username": {
            "name": "_get_smtp_username",
            "location": 101,
            "return": [
                "str",
                "int",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {}
        },
        "_get_smtp_password": {
            "name": "_get_smtp_password",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {}
        },
        "_get_smtp_port": {
            "name": "_get_smtp_port",
            "location": 109,
            "return": [
                "str",
                "bool",
                "Optional[bool]",
                "Optional[dict]"
            ],
            "arguments": {}
        },
        "_get_local_hostname": {
            "name": "_get_local_hostname",
            "location": 113,
            "return": [
                "str",
                "int",
                "bool",
                "Optional[bool]"
            ],
            "arguments": {}
        },
        "_use_ssl": {
            "name": "_use_ssl",
            "location": 117,
            "return": [
                "bool",
                "Optional[dict]",
                "str"
            ],
            "arguments": {}
        },
        "init_app": {
            "name": "init_app",
            "location": 121,
            "return": [
                "None"
            ],
            "arguments": {
                "app": [
                    "flask.Flask"
                ]
            }
        }
    },
    "arxiv-base-master/arxiv/mail/__init__.py": {},
    "arxiv-base-master/arxiv/mail/tests/test_mail.py": {
        "TestSendEmail.test_send_text": {
            "name": "test_send_text",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_SMTP": []
            }
        },
        "TestSendEmail.test_send_text_with_cc_and_bcc": {
            "name": "test_send_text_with_cc_and_bcc",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_SMTP": []
            }
        },
        "TestSendEmail.test_send_text_and_html": {
            "name": "test_send_text_and_html",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_SMTP": []
            }
        }
    },
    "arxiv-base-master/arxiv/mail/tests/__init__.py": {},
    "arxiv-base-master/arxiv/release/dist_version.py": {
        "get_version": {
            "name": "get_version",
            "location": 20,
            "return": [
                "str",
                "bool",
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "dist_name": [
                    "str"
                ]
            }
        },
        "write_version": {
            "name": "write_version",
            "location": 59,
            "return": [
                "str",
                "pathlib.Path"
            ],
            "arguments": {
                "dist_name": [
                    "str"
                ],
                "version": [
                    "str",
                    "Union[None, bytes]",
                    "bytes"
                ]
            }
        },
        "get_pkg_version": {
            "name": "get_pkg_version",
            "location": 93,
            "return": [
                "str",
                "Optional[str]",
                "Optional[List[str]]",
                "bool",
                "int"
            ],
            "arguments": {
                "pkg": [
                    "str",
                    "dict",
                    "Dict[str, Set[str]]",
                    "Optional[str]"
                ]
            }
        },
        "get_git_version": {
            "name": "get_git_version",
            "location": 105,
            "return": [
                "str"
            ],
            "arguments": {
                "abbrev": [
                    "str",
                    "Optional[str]",
                    "bool"
                ]
            }
        }
    },
    "arxiv-base-master/arxiv/release/docker_build_push.py": {},
    "arxiv-base-master/arxiv/release/tag_check.py": {
        "prepare_for_version": {
            "name": "prepare_for_version",
            "location": 45,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {
                "dist_name": [
                    "str",
                    "dict",
                    "bool"
                ]
            }
        },
        "is_valid_python_public_version": {
            "name": "is_valid_python_public_version",
            "location": 70,
            "return": [
                "bool"
            ],
            "arguments": {
                "tag": [
                    "str",
                    "Tuple[int, int]",
                    "Iterable[Hashable]"
                ]
            }
        }
    },
    "arxiv-base-master/arxiv/release/__init__.py": {},
    "arxiv-base-master/arxiv/release/test/test_tag_check.py": {
        "TestVersions.test_python_version": {
            "name": "test_python_version",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-base-master/arxiv/status/__init__.py": {},
    "arxiv-base-master/arxiv/taxonomy/category.py": {
        "Category.id": {
            "name": "id",
            "location": 13,
            "return": [
                "int",
                "str",
                "List[str]",
                "float"
            ],
            "arguments": {
                "self": []
            }
        },
        "Category.name": {
            "name": "name",
            "location": 18,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Category.canonical": {
            "name": "canonical",
            "location": 25,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Category.display": {
            "name": "display",
            "location": 34,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Category.unalias": {
            "name": "unalias",
            "location": 55,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-base-master/arxiv/taxonomy/definitions.py": {},
    "arxiv-base-master/arxiv/taxonomy/tests.py": {
        "TestTaxonomy.test_groups": {
            "name": "test_groups",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaxonomy.test_archives": {
            "name": "test_archives",
            "location": 39,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaxonomy.test_active_archives": {
            "name": "test_active_archives",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaxonomy.test_archives_subsumed": {
            "name": "test_archives_subsumed",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaxonomy.test_legacy_archives_as_categories": {
            "name": "test_legacy_archives_as_categories",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaxonomy.test_categories": {
            "name": "test_categories",
            "location": 128,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestTaxonomy.test_aliases": {
            "name": "test_aliases",
            "location": 146,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-base-master/arxiv/taxonomy/__init__.py": {
        "get_category_display": {
            "name": "get_category_display",
            "location": 22,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "category": [
                    "str",
                    "bool"
                ],
                "canonical": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_archive_display": {
            "name": "get_archive_display",
            "location": 46,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "archive": [
                    "str",
                    "bool"
                ],
                "canonical": [
                    "str",
                    "bool"
                ]
            }
        },
        "get_group_display": {
            "name": "get_group_display",
            "location": 69,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "group": [
                    "str",
                    "Union[int, str]",
                    "int"
                ]
            }
        }
    },
    "arxiv-base-master/arxiv/util/authors.py": {
        "parse_author_affil": {
            "name": "parse_author_affil",
            "location": 36,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "authors": [
                    "str",
                    "float",
                    "dict",
                    "Iterable[T]",
                    "Callable"
                ]
            }
        },
        "_parse_author_affil_split": {
            "name": "_parse_author_affil_split",
            "location": 67,
            "return": [
                "List[Dict]",
                "List[str]",
                "list",
                "bool",
                "str",
                "List[int]",
                "Union[str, List[Any]]"
            ],
            "arguments": {
                "author_line": [
                    "str",
                    "List[str]",
                    "type",
                    "Dict[str, Any]"
                ]
            }
        },
        "parse_author_affil_utf": {
            "name": "parse_author_affil_utf",
            "location": 151,
            "return": [
                "List[Dict]",
                "List[int]",
                "float",
                "list",
                "List[List[Any]]",
                "List[float]",
                "Tuple[int, int, int]",
                "str",
                "Union[List[float], List[int]]"
            ],
            "arguments": {
                "authors": [
                    "str",
                    "bool"
                ]
            }
        },
        "_remove_double_commas": {
            "name": "_remove_double_commas",
            "location": 163,
            "return": [
                "bool",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "items": [
                    "int",
                    "T",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "_tidy_name": {
            "name": "_tidy_name",
            "location": 176,
            "return": [
                "str"
            ],
            "arguments": {
                "name": [
                    "str",
                    "Callable",
                    "Union[int, str]",
                    "Optional[str]"
                ]
            }
        },
        "_collaboration_at_start": {
            "name": "_collaboration_at_start",
            "location": 183,
            "return": [
                "Mapping[str, Any]",
                "Dict[str, Union[str, Any]]"
            ],
            "arguments": {
                "names": [
                    "str"
                ]
            }
        },
        "_enum_collaboration_at_end": {
            "name": "_enum_collaboration_at_end",
            "location": 207,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "author_line": [
                    "str",
                    "T"
                ]
            }
        },
        "_add_affiliation": {
            "name": "_add_affiliation",
            "location": 228,
            "return": [
                "int",
                "Optional[str]"
            ],
            "arguments": {
                "author_line": [
                    "str",
                    "float",
                    "bytes",
                    "bool",
                    "List[str]",
                    "int"
                ],
                "enumaffils": [
                    "dict",
                    "int",
                    "List[str]",
                    "List[List[int]]",
                    "List[Tuple[float, ...]]",
                    "Tuple[float]",
                    "bool"
                ],
                "author_entry": [
                    "List[str]",
                    "dict",
                    "List[List[int]]",
                    "List[Tuple[float, ...]]",
                    "Tuple[float]",
                    "list",
                    "str"
                ],
                "name": [
                    "str",
                    "Optional[bytes]",
                    "Optional[str]",
                    "int",
                    "Optional[Callable[[Any, Any], None]]"
                ]
            }
        },
        "_parse_author_affil_back_propagate": {
            "name": "_parse_author_affil_back_propagate",
            "location": 258,
            "return": [
                "List[Dict]",
                "List[str]",
                "str",
                "List[int]",
                "List[List[Any]]",
                "float"
            ],
            "arguments": {
                "author_list": [
                    "list",
                    "int",
                    "T"
                ],
                "back_prop": [
                    "int",
                    "list"
                ]
            }
        },
        "split_authors": {
            "name": "split_authors",
            "location": 288,
            "return": [
                "str",
                "Sequence[str]",
                "list",
                "Dict[str, Any]"
            ],
            "arguments": {
                "authors": [
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        }
    },
    "arxiv-base-master/arxiv/util/schema.py": {
        "load": {
            "name": "load",
            "location": 16,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "schema_path": [
                    "bool",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "validate_request": {
            "name": "validate_request",
            "location": 59,
            "return": [
                "Dict[str, Any]",
                "dict",
                "List[Dict]",
                "bool"
            ],
            "arguments": {
                "schema_path": [
                    "str",
                    "Iterable[str]",
                    "Tuple[str]",
                    "bool",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "load.validate": {
            "name": "validate",
            "location": 42,
            "return": [
                "None"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Dict[str, Any]",
                    "int"
                ]
            }
        },
        "validate_request._decorator": {
            "name": "_decorator",
            "location": 89,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "validate_request._decorator._wrapper": {
            "name": "_wrapper",
            "location": 91,
            "return": [
                "Callable",
                "Tuple[int, int]",
                "str",
                "list",
                "bool"
            ],
            "arguments": {}
        }
    },
    "arxiv-base-master/arxiv/util/serialize.py": {
        "dumps": {
            "name": "dumps",
            "location": 54,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "obj": [
                    "dict",
                    "Dict[str, str]",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "loads": {
            "name": "loads",
            "location": 59,
            "return": [
                "Union[str, IO]",
                "IO[str]",
                "bytes",
                "Callable",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {
                "data": [
                    "str",
                    "Dict[str, str]",
                    "dict",
                    "int"
                ]
            }
        },
        "ISO8601JSONEncoder.default": {
            "name": "default",
            "location": 13,
            "return": [
                "str",
                "List[str]",
                "List[Dict]",
                "List[int]",
                "list"
            ],
            "arguments": {
                "self": [],
                "obj": [
                    "Optional[str]",
                    "datetime.datetime",
                    "str",
                    "int",
                    "Dict[str, str]"
                ]
            }
        },
        "ISO8601JSONDecoder.__init__": {
            "name": "__init__",
            "location": 29,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ISO8601JSONDecoder._try_isoparse": {
            "name": "_try_isoparse",
            "location": 34,
            "return": [
                "datetime.datetime",
                "int",
                "str",
                "Union[str, int]",
                "bool",
                "datetime.timedelta"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "float",
                    "int",
                    "Union[int, float, None]",
                    "datetime.datetime"
                ]
            }
        },
        "ISO8601JSONDecoder.object_hook": {
            "name": "object_hook",
            "location": 44,
            "return": [
                "str",
                "Optional[float]",
                "int",
                "List[Dict[str, Any]]",
                "Dict[str, str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "list",
                    "List[List[Any]]"
                ]
            }
        }
    },
    "arxiv-base-master/arxiv/util/tex2utf.py": {
        "_p_to_match": {
            "name": "_p_to_match",
            "location": 99,
            "return": [],
            "arguments": {
                "tex_to_chr": []
            }
        },
        "_textlet_sub": {
            "name": "_textlet_sub",
            "location": 118,
            "return": [],
            "arguments": {
                "match": []
            }
        },
        "_textsym_sub": {
            "name": "_textsym_sub",
            "location": 122,
            "return": [],
            "arguments": {
                "match": []
            }
        },
        "_textgreek_sub": {
            "name": "_textgreek_sub",
            "location": 126,
            "return": [],
            "arguments": {
                "match": []
            }
        },
        "texch2UTF": {
            "name": "texch2UTF",
            "location": 130,
            "return": [],
            "arguments": {
                "acc": []
            }
        },
        "tex2utf": {
            "name": "tex2utf",
            "location": 145,
            "return": [],
            "arguments": {
                "tex": [],
                "greek": []
            }
        }
    },
    "arxiv-base-master/arxiv/util/__init__.py": {},
    "arxiv-base-master/arxiv/util/tests/test_authors.py": {
        "TestAuthorAffiliationParsing.test_split_authors": {
            "name": "test_split_authors",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorAffiliationParsing.test_parse_author_affil_basic": {
            "name": "test_parse_author_affil_basic",
            "location": 72,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorAffiliationParsing.test_parse_author_affil_basic2": {
            "name": "test_parse_author_affil_basic2",
            "location": 100,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestAuthorAffiliationParsing.test_parse_author_affil_with_affiliations": {
            "name": "test_parse_author_affil_with_affiliations",
            "location": 143,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-base-master/arxiv/util/tests/test_schema.py": {
        "TestValidateRequest.setUp": {
            "name": "setUp",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidateRequest.tearDown": {
            "name": "tearDown",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidateRequest.test_decorate_route": {
            "name": "test_decorate_route",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidateRequest.test_validate_with_invalid_request_data": {
            "name": "test_validate_with_invalid_request_data",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_request": [
                    "mock.MagicMock",
                    "mock.Mock"
                ]
            }
        },
        "TestValidateRequest.test_validate_with_valid_request_data": {
            "name": "test_validate_with_valid_request_data",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_request": [
                    "mock.MagicMock",
                    "mock.Mock"
                ]
            }
        },
        "TestValidateSchema.setUp": {
            "name": "setUp",
            "location": 82,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidateSchema.tearDown": {
            "name": "tearDown",
            "location": 86,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidateSchema.test_load_valid_schema": {
            "name": "test_load_valid_schema",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidateSchema.test_load_invalid_schema": {
            "name": "test_load_invalid_schema",
            "location": 121,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidateSchema.test_load_nonexistant_schema": {
            "name": "test_load_nonexistant_schema",
            "location": 129,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidateSchema.test_validation_failed": {
            "name": "test_validation_failed",
            "location": 134,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestValidateRequest.test_validate_with_invalid_request_data.foo_route": {
            "name": "foo_route",
            "location": 53,
            "return": [],
            "arguments": {}
        },
        "TestValidateRequest.test_validate_with_valid_request_data.foo_route": {
            "name": "foo_route",
            "location": 71,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "arxiv-base-master/arxiv/util/tests/test_serialize.py": {
        "TestISO8601JSONEncoder.test_encode_with_date": {
            "name": "test_encode_with_date",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestISO8601JSONEncoder.test_encode_with_datetime": {
            "name": "test_encode_with_datetime",
            "location": 35,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestISO8601JSONEncoder.test_encode_with_datetime_tz": {
            "name": "test_encode_with_datetime_tz",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestISO8601JSONDecoder.test_decode_with_date": {
            "name": "test_decode_with_date",
            "location": 85,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestISO8601JSONDecoder.test_decode_with_datetime": {
            "name": "test_decode_with_datetime",
            "location": 104,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestISO8601JSONDecoder.test_encode_with_datetime_tz": {
            "name": "test_encode_with_datetime_tz",
            "location": 119,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-base-master/arxiv/util/tests/test_tex2utf.py": {
        "TextTex2Utf.test_tex2utf": {
            "name": "test_tex2utf",
            "location": 9,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextTex2Utf.test_tex2utf_underscore": {
            "name": "test_tex2utf_underscore",
            "location": 139,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextTex2Utf.test_tex2utf_curly": {
            "name": "test_tex2utf_curly",
            "location": 147,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextTex2Utf.test_ARXIVDEV2322fixes": {
            "name": "test_ARXIVDEV2322fixes",
            "location": 156,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TextTex2Utf.test_ARXIVOPS805": {
            "name": "test_ARXIVOPS805",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-base-master/arxiv/util/tests/__init__.py": {},
    "arxiv-base-master/docs/source/conf.py": {},
    "arxiv-base-master/fourohfour/tests.py": {
        "TestFourOhFour.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFourOhFour.test_returns_404": {
            "name": "test_returns_404",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestFourOhFour.test_returns_404_on_head": {
            "name": "test_returns_404_on_head",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHealthCheck.setUp": {
            "name": "setUp",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestHealthCheck.test_returns_200": {
            "name": "test_returns_200",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNGINXErrorHandling.setUp": {
            "name": "setUp",
            "location": 57,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestNGINXErrorHandling.test_echos_error": {
            "name": "test_echos_error",
            "location": 62,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-base-master/fourohfour/wsgi.py": {
        "application": {
            "name": "application",
            "location": 21,
            "return": [
                "str",
                "bytes",
                "int"
            ],
            "arguments": {
                "environ": [
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Callable",
                    "bytes"
                ],
                "start_response": [
                    "Callable",
                    "bytes"
                ]
            }
        },
        "create_web_app": {
            "name": "create_web_app",
            "location": 38,
            "return": [
                "flask.Flask"
            ],
            "arguments": {}
        },
        "healthz": {
            "name": "healthz",
            "location": 52,
            "return": [
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {}
        },
        "echo": {
            "name": "echo",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "make_error_response": {
            "name": "make_error_response",
            "location": 66,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "content_aware_exception_handler": {
            "name": "content_aware_exception_handler",
            "location": 74,
            "return": [
                "str",
                "Dict[str, Dict[str, str]]",
                "bool",
                "int"
            ],
            "arguments": {
                "error": [
                    "str",
                    "werkzeug.exceptions.Forbidden",
                    "Exception",
                    "bool",
                    "werkzeug.exceptions.Unauthorized"
                ]
            }
        }
    },
    "arxiv-base-master/tests/run_app_tests.py": {},
    "arxiv-base-master/tests/__init__.py": {},
    "arxiv-base-master/tests/unit/__init__.py": {}
}
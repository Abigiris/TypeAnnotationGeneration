{
    "arxiv-submission-api-master/app.py": {},
    "arxiv-submission-api-master/initialize_db.py": {},
    "arxiv-submission-api-master/wsgi.py": {
        "application": {
            "name": "application",
            "location": 7,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "environ": [
                    "dict",
                    "Dict[str, str]",
                    "Optional[str]",
                    "Callable",
                    "Dict[str, Any]",
                    "Type[T]"
                ],
                "start_response": [
                    "Callable",
                    "dict"
                ]
            }
        }
    },
    "arxiv-submission-api-master/metadata/config.py": {},
    "arxiv-submission-api-master/metadata/factory.py": {
        "jsonify_exception": {
            "name": "jsonify_exception",
            "location": 15,
            "return": [
                "bytes",
                "Dict[str, Any]",
                "dict",
                "str",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "error": [
                    "MutableMapping",
                    "dict"
                ]
            }
        },
        "create_api_app": {
            "name": "create_api_app",
            "location": 23,
            "return": [
                "flask.Flask"
            ],
            "arguments": {}
        }
    },
    "arxiv-submission-api-master/metadata/routes.py": {
        "get_agents": {
            "name": "get_agents",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "json_response": {
            "name": "json_response",
            "location": 43,
            "return": [
                "dict",
                "str",
                "Callable",
                "Callable[[None, None], bool]"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Optional[Exception]",
                    "werkzeug.datastructures.FileStorage",
                    "T",
                    "Type[T]",
                    "List[dict]"
                ]
            }
        },
        "create_submission": {
            "name": "create_submission",
            "location": 58,
            "return": [
                "bool",
                "dict",
                "str",
                "int"
            ],
            "arguments": {}
        },
        "get_submission": {
            "name": "get_submission",
            "location": 74,
            "return": [
                "bool",
                "Optional[Dict[str, Any]]",
                "Optional[str]",
                "Callable[[], T]"
            ],
            "arguments": {
                "submission_id": [
                    "int",
                    "str",
                    "bool",
                    "Optional[str]"
                ]
            }
        },
        "update_submission": {
            "name": "update_submission",
            "location": 102,
            "return": [
                "bytes",
                "List[str]",
                "float"
            ],
            "arguments": {
                "submission_id": [
                    "int",
                    "str",
                    "bytes"
                ]
            }
        },
        "json_response.wrapper": {
            "name": "wrapper",
            "location": 46,
            "return": [
                "bytes",
                "dict",
                "flask.Response"
            ],
            "arguments": {}
        }
    },
    "arxiv-submission-api-master/metadata/__init__.py": {},
    "arxiv-submission-api-master/metadata/controllers/util.py": {
        "validate_request": {
            "name": "validate_request",
            "location": 13,
            "return": [
                "Dict[str, Any]",
                "dict",
                "List[Dict]",
                "bool"
            ],
            "arguments": {
                "schema_path": [
                    "str",
                    "Iterable[str]",
                    "Tuple[str]",
                    "bool",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "validate_request._decorator": {
            "name": "_decorator",
            "location": 37,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "func": [
                    "Callable",
                    "Callable[..., None]"
                ]
            }
        },
        "validate_request._decorator._wrpr": {
            "name": "_wrpr",
            "location": 39,
            "return": [
                "bytes",
                "dict"
            ],
            "arguments": {
                "data": [
                    "Dict[str, Any]",
                    "List[Dict[str, Any]]",
                    "bool",
                    "int",
                    "dict"
                ]
            }
        }
    },
    "arxiv-submission-api-master/metadata/controllers/__init__.py": {},
    "arxiv-submission-api-master/metadata/controllers/submission/handlers.py": {
        "handle_submission": {
            "name": "handle_submission",
            "location": 24,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "List[str]",
                    "str"
                ],
                "agents": [
                    "dict",
                    "Dict[str, Any]",
                    "Iterable[Any]",
                    "MutableMapping[str, Any]"
                ]
            }
        },
        "handle_submitter_is_author": {
            "name": "handle_submitter_is_author",
            "location": 56,
            "return": [
                "bool"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "bool",
                    "Dict[str, Dict[str, float]]",
                    "Mapping[str, object]"
                ],
                "agents": [
                    "dict",
                    "bool",
                    "Dict[str, Dict[str, float]]",
                    "Mapping[str, object]"
                ]
            }
        },
        "handle_license": {
            "name": "handle_license",
            "location": 75,
            "return": [
                "Optional[str]",
                "dict",
                "bytes"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "str"
                ],
                "agents": [
                    "dict",
                    "str"
                ]
            }
        },
        "handle_submitter_accepts_policy": {
            "name": "handle_submitter_accepts_policy",
            "location": 84,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "data": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ],
                "agents": [
                    "dict",
                    "List[Dict]",
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "handle_submitter_contact_verified": {
            "name": "handle_submitter_contact_verified",
            "location": 105,
            "return": [
                "str",
                "List[str]"
            ],
            "arguments": {
                "data": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ],
                "agents": [
                    "dict",
                    "List[Dict]",
                    "bool",
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "handle_primary_classification": {
            "name": "handle_primary_classification",
            "location": 126,
            "return": [
                "str"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Type[T]",
                    "str"
                ],
                "agents": [
                    "dict",
                    "Type[T]",
                    "str"
                ]
            }
        },
        "handle_secondary_classification": {
            "name": "handle_secondary_classification",
            "location": 135,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "list",
                    "str",
                    "bytes",
                    "defaultdict"
                ],
                "agents": [
                    "dict",
                    "list",
                    "str",
                    "bytes",
                    "defaultdict"
                ]
            }
        },
        "handle_metadata": {
            "name": "handle_metadata",
            "location": 157,
            "return": [
                "bool"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "float",
                    "list"
                ],
                "agents": [
                    "dict",
                    "Mapping[str, Any]",
                    "Dict[str, Any]",
                    "float",
                    "list"
                ]
            }
        },
        "handle_authors": {
            "name": "handle_authors",
            "location": 209,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "data": [
                    "dict",
                    "bytes",
                    "Union[bytes, bytearray, memoryview]"
                ],
                "agents": [
                    "dict",
                    "int",
                    "bool",
                    "type",
                    "str"
                ]
            }
        },
        "handle_finalization": {
            "name": "handle_finalization",
            "location": 234,
            "return": [
                "Mapping[str, str]",
                "bool",
                "Mapping[str, Any]"
            ],
            "arguments": {
                "data": [
                    "int",
                    "bytes",
                    "bool",
                    "dict"
                ],
                "agents": [
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]",
                    "Sequence",
                    "Optional[int]"
                ]
            }
        },
        "handle_source_content": {
            "name": "handle_source_content",
            "location": 255,
            "return": [],
            "arguments": {
                "data": [
                    "dict",
                    "Dict[str, Any]",
                    "List[str]",
                    "bytes"
                ],
                "agents": [
                    "dict",
                    "Dict[str, Any]",
                    "List[str]",
                    "bytes"
                ]
            }
        }
    },
    "arxiv-submission-api-master/metadata/controllers/submission/tests.py": {
        "preserve_exceptions_and_events": {
            "name": "preserve_exceptions_and_events",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "mock_events": [
                    "Mapping[str, Any]",
                    "asgard.models.user.User",
                    "OrderedDict"
                ]
            }
        },
        "TestCreateSubmission.setUp": {
            "name": "setUp",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCreateSubmission.test_create_submission_with_valid_data": {
            "name": "test_create_submission_with_valid_data",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_events": [],
                "url_for": []
            }
        },
        "TestCreateSubmission.test_create_submission_with_invalid_data": {
            "name": "test_create_submission_with_invalid_data",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_events": [
                    "mock.Mock"
                ],
                "url_for": []
            }
        },
        "TestCreateSubmission.test_create_submission_with_db_down": {
            "name": "test_create_submission_with_db_down",
            "location": 97,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_events": [
                    "mock.Mock"
                ],
                "url_for": []
            }
        },
        "TestCreateSubmission.test_create_submission_with_invalid_event": {
            "name": "test_create_submission_with_invalid_event",
            "location": 113,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_events": [],
                "url_for": [
                    "mock.MagicMock"
                ]
            }
        },
        "TestUpdateSubmission.setUp": {
            "name": "setUp",
            "location": 138,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestUpdateSubmission.test_update_submission_with_valid_data": {
            "name": "test_update_submission_with_valid_data",
            "location": 151,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_events": [],
                "url_for": []
            }
        },
        "TestUpdateSubmission.test_update_nonexistant_submission": {
            "name": "test_update_nonexistant_submission",
            "location": 189,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_events": [
                    "mock.MagicMock"
                ],
                "url_for": []
            }
        },
        "TestUpdateSubmission.test_update_submission_with_invalid_data": {
            "name": "test_update_submission_with_invalid_data",
            "location": 205,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_events": [
                    "mock.MagicMock"
                ],
                "url_for": []
            }
        },
        "TestUpdateSubmission.test_update_submission_with_db_down": {
            "name": "test_update_submission_with_db_down",
            "location": 218,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_events": [],
                "url_for": []
            }
        },
        "TestUpdateSubmission.test_update_submission_with_invalid_event": {
            "name": "test_update_submission_with_invalid_event",
            "location": 234,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_events": [],
                "url_for": [
                    "Callable[[], int]"
                ]
            }
        },
        "TestGetSubmission.test_get_submission": {
            "name": "test_get_submission",
            "location": 260,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_events": [
                    "mock.MagicMock",
                    "taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository"
                ]
            }
        },
        "TestGetSubmission.test_get_nonexistant_submission": {
            "name": "test_get_nonexistant_submission",
            "location": 280,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_events": []
            }
        },
        "TestCreateSubmission.test_create_submission_with_invalid_event.raise_invalid_event": {
            "name": "raise_invalid_event",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "TestUpdateSubmission.test_update_submission_with_invalid_event.raise_invalid_event": {
            "name": "raise_invalid_event",
            "location": 239,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "arxiv-submission-api-master/metadata/controllers/submission/__init__.py": {
        "create_submission": {
            "name": "create_submission",
            "location": 33,
            "return": [
                "bool",
                "dict",
                "str",
                "Dict[int, dict]"
            ],
            "arguments": {
                "data": [
                    "bytes",
                    "Dict[str, str]"
                ],
                "headers": [
                    "bool",
                    "bytes",
                    "dict",
                    "int",
                    "list",
                    "str",
                    "List[Dict[str, Any]]"
                ],
                "agents": [
                    "str",
                    "Sequence",
                    "Dict[str, Any]",
                    "dict"
                ],
                "token": [
                    "bool",
                    "bytes",
                    "dict",
                    "int",
                    "list",
                    "str",
                    "List[Dict[str, Any]]"
                ]
            }
        },
        "get_submission": {
            "name": "get_submission",
            "location": 75,
            "return": [
                "str",
                "int",
                "Iterable[str]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "submission_id": [
                    "str",
                    "int",
                    "dict",
                    "Dict[str, bool]"
                ],
                "agents": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Optional[str]",
                    "int"
                ],
                "token": [
                    "str",
                    "bool",
                    "Optional[bool]",
                    "Optional[str]",
                    "int"
                ]
            }
        },
        "update_submission": {
            "name": "update_submission",
            "location": 90,
            "return": [
                "float",
                "str"
            ],
            "arguments": {
                "data": [
                    "int",
                    "str",
                    "bool",
                    "dict",
                    "Union[str, bytes]"
                ],
                "headers": [
                    "int",
                    "Dict[str, Any]"
                ],
                "agents": [
                    "str",
                    "bytes",
                    "int",
                    "dict",
                    "List[Dict[str, Any]]",
                    "Optional[int]"
                ],
                "token": [
                    "int",
                    "Dict[str, Any]"
                ],
                "submission_id": [
                    "int",
                    "bytes",
                    "Optional[str]"
                ]
            }
        }
    },
    "arxiv-submission-api-master/tests/test_api_spec.py": {
        "TestOpenAPISchemaValid.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestOpenAPISchemaValid.test_validate": {
            "name": "test_validate",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-submission-api-master/tests/test_examples.py": {
        "TestSubmit.setUp": {
            "name": "setUp",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubmit.test_submit_one_shot": {
            "name": "test_submit_one_shot",
            "location": 52,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubmit.test_alter_submission_before_finalization": {
            "name": "test_alter_submission_before_finalization",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestSubmit.test_alter_submission_after_finalization": {
            "name": "test_alter_submission_after_finalization",
            "location": 118,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModerationScenarios.setUp": {
            "name": "setUp",
            "location": 149,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModerationScenarios.test_submission_placed_on_hold": {
            "name": "test_submission_placed_on_hold",
            "location": 168,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestModerationScenarios.test_sticky_status_is_set": {
            "name": "test_sticky_status_is_set",
            "location": 195,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublicationIntegration.setUp": {
            "name": "setUp",
            "location": 265,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublicationIntegration.tearDown": {
            "name": "tearDown",
            "location": 294,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublicationIntegration.test_publication_status_is_reflected": {
            "name": "test_publication_status_is_reflected",
            "location": 300,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublicationIntegration.test_publication_status_is_reflected_after_files_expire": {
            "name": "test_publication_status_is_reflected_after_files_expire",
            "location": 337,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublicationIntegration.test_scheduled_status_is_reflected": {
            "name": "test_scheduled_status_is_reflected",
            "location": 374,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublicationIntegration.test_scheduled_status_is_reflected_processing_submission": {
            "name": "test_scheduled_status_is_reflected_processing_submission",
            "location": 394,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublicationIntegration.test_scheduled_status_is_reflected_prior_to_announcement": {
            "name": "test_scheduled_status_is_reflected_prior_to_announcement",
            "location": 414,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublicationIntegration.test_scheduled_tomorrow_status_is_reflected": {
            "name": "test_scheduled_tomorrow_status_is_reflected",
            "location": 434,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublicationIntegration.test_publication_failed": {
            "name": "test_publication_failed",
            "location": 454,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestPublicationIntegration.test_deleted": {
            "name": "test_deleted",
            "location": 474,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-submission-api-master/tests/test_routes.py": {},
    "arxiv-submission-api-master/tests/util.py": {
        "generate_client_token": {
            "name": "generate_client_token",
            "location": 26,
            "return": [
                "str",
                "dict",
                "bytes",
                "IO"
            ],
            "arguments": {
                "client_id": [
                    "str",
                    "bool"
                ],
                "owner_id": [
                    "str",
                    "bool"
                ],
                "name": [
                    "str",
                    "bool"
                ],
                "url": [
                    "str",
                    "bool"
                ],
                "description": [
                    "str",
                    "bool"
                ],
                "redirect_uri": [
                    "str",
                    "bool"
                ],
                "scope": [
                    "str"
                ],
                "expires": [
                    "float",
                    "str",
                    "bool",
                    "int",
                    "Optional[float]"
                ],
                "endorsements": [
                    "str"
                ],
                "secret": [
                    "str",
                    "Dict[str, str]"
                ]
            }
        }
    },
    "arxiv-submission-api-master/tests/__init__.py": {}
}
{
    "arxiv-vault-master/setup.py": {},
    "arxiv-vault-master/arxiv/vault/adapter.py": {
        "HostnameLiberalAdapter.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "HostnameLiberalHTTPAdapter.init_poolmanager": {
            "name": "init_poolmanager",
            "location": 28,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "connections": [],
                "maxsize": [],
                "block": []
            }
        }
    },
    "arxiv-vault-master/arxiv/vault/core.py": {
        "Secret.__init__": {
            "name": "__init__",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "issued": [
                    "int",
                    "str",
                    "float"
                ],
                "lease_id": [
                    "str",
                    "int",
                    "Optional[int]"
                ],
                "lease_duration": [
                    "int",
                    "str",
                    "float"
                ],
                "renewable": [
                    "int",
                    "str",
                    "float"
                ]
            }
        },
        "Secret.expires": {
            "name": "expires",
            "location": 50,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Secret.is_expired": {
            "name": "is_expired",
            "location": 54,
            "return": [
                "str",
                "int",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "as_of": [
                    "float",
                    "bytes",
                    "Optional[Any]",
                    "bool",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        },
        "Vault.__init__": {
            "name": "__init__",
            "location": 70,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "host": [
                    "str",
                    "int"
                ],
                "port": [
                    "str",
                    "int"
                ],
                "scheme": [
                    "str",
                    "int"
                ],
                "verify": [
                    "str",
                    "int"
                ]
            }
        },
        "Vault.client": {
            "name": "client",
            "location": 94,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "Vault.authenticated": {
            "name": "authenticated",
            "location": 101,
            "return": [
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Vault.authenticate": {
            "name": "authenticate",
            "location": 105,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "kube_token": [
                    "List[str]",
                    "float",
                    "str"
                ],
                "role": [
                    "List[str]",
                    "float",
                    "str"
                ]
            }
        },
        "Vault.renew": {
            "name": "renew",
            "location": 122,
            "return": [
                "str",
                "int",
                "Union[bytes, bytearray]",
                "bytearray"
            ],
            "arguments": {
                "self": [],
                "secret": [
                    "int",
                    "bytes",
                    "str",
                    "Optional[str]"
                ],
                "increment": [
                    "int",
                    "Optional[int]",
                    "Optional[str]",
                    "bytes",
                    "Union[str, int]",
                    "str"
                ]
            }
        },
        "Vault.generic": {
            "name": "generic",
            "location": 135,
            "return": [
                "str",
                "Optional[Exception]"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str"
                ],
                "key": [
                    "str",
                    "bytes",
                    "Callable"
                ],
                "mount_point": [
                    "str"
                ]
            }
        },
        "Vault.mysql": {
            "name": "mysql",
            "location": 162,
            "return": [
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "role": [
                    "str",
                    "bool",
                    "list"
                ],
                "mount_point": [
                    "str",
                    "bool",
                    "list"
                ]
            }
        },
        "Vault.aws": {
            "name": "aws",
            "location": 187,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "role": [
                    "List[str]",
                    "bool",
                    "Optional[Exception]",
                    "logging.LogRecord"
                ],
                "mount_point": [
                    "List[str]",
                    "bool",
                    "Optional[Exception]",
                    "logging.LogRecord"
                ]
            }
        }
    },
    "arxiv-vault-master/arxiv/vault/manager.py": {
        "SecretRequest.factory": {
            "name": "factory",
            "location": 27,
            "return": [
                "str",
                "Optional[float]",
                "bool"
            ],
            "arguments": {
                "cls": [
                    "dict",
                    "int",
                    "bool",
                    "Optional[str]"
                ],
                "request_type": [
                    "str",
                    "Union[bool, str]",
                    "Optional[str]",
                    "bytes"
                ]
            }
        },
        "SecretsManager.__init__": {
            "name": "__init__",
            "location": 124,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "vault": [
                    "int",
                    "bool"
                ],
                "requests": [
                    "int",
                    "bool"
                ],
                "expiry_margin": [
                    "int",
                    "Optional[int]",
                    "bool",
                    "List[str]"
                ]
            }
        },
        "SecretsManager._about_to_expire": {
            "name": "_about_to_expire",
            "location": 132,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "secret": [
                    "core.Secret",
                    "Optional[str]",
                    "Optional[Dict[str, Any]]",
                    "List[float]",
                    "datetime.timedelta",
                    "str",
                    "float",
                    "Union[int, float]"
                ]
            }
        },
        "SecretsManager._format_database": {
            "name": "_format_database",
            "location": 136,
            "return": [
                "str",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [],
                "secret": [
                    "core.Secret",
                    "str",
                    "dict",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "SecretsManager._fresh_secret": {
            "name": "_fresh_secret",
            "location": 144,
            "return": [
                "str",
                "int",
                "Union[bytes, bytearray]",
                "bytearray"
            ],
            "arguments": {
                "self": [],
                "request": []
            }
        },
        "SecretsManager._can_freshen": {
            "name": "_can_freshen",
            "location": 158,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.core.handlers.wsgi.WSGIRequest",
                    "Union[core.utils.ObjectID, str]",
                    "int"
                ],
                "secret": [
                    "float",
                    "datetime.timedelta",
                    "datetime.datetime",
                    "int",
                    "str",
                    "core.Secret"
                ]
            }
        },
        "SecretsManager._is_stale": {
            "name": "_is_stale",
            "location": 165,
            "return": [
                "int",
                "datetime.datetime"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "int",
                    "Optional[Dict[str, str]]",
                    "Optional[str]"
                ],
                "secret": [
                    "int",
                    "Optional[Dict[str, str]]",
                    "Optional[str]"
                ]
            }
        },
        "SecretsManager._get_secret": {
            "name": "_get_secret",
            "location": 171,
            "return": [
                "str",
                "bytes",
                "Optional[bytes]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "Optional[Dict[str, Any]]",
                    "Dict[str, Any]"
                ]
            }
        },
        "SecretsManager.yield_secrets": {
            "name": "yield_secrets",
            "location": 184,
            "return": [
                "typing.Iterable[typing.Tuple[builtins.str, builtins.str]]"
            ],
            "arguments": {
                "self": [],
                "tok": [
                    "List[str]",
                    "str"
                ],
                "role": [
                    "List[str]",
                    "str"
                ]
            }
        },
        "ConfigManager.__init__": {
            "name": "__init__",
            "location": 230,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ]
            }
        },
        "ConfigManager.token": {
            "name": "token",
            "location": 252,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigManager.role": {
            "name": "role",
            "location": 261,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConfigManager._get_requests": {
            "name": "_get_requests",
            "location": 265,
            "return": [
                "int",
                "List[Dict[str, Any]]",
                "Optional[Tuple[int, int]]"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Mapping",
                    "Dict[str, Any]",
                    "dict",
                    "Union[str, dict]",
                    "str"
                ]
            }
        },
        "ConfigManager.yield_secrets": {
            "name": "yield_secrets",
            "location": 273,
            "return": [
                "bytes",
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-vault-master/arxiv/vault/middleware.py": {
        "formatwarning": {
            "name": "formatwarning",
            "location": 17,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "message": [
                    "bool",
                    "str",
                    "List[Tuple[str, str]]"
                ],
                "category": [
                    "bool",
                    "str",
                    "List[Tuple[str, str]]"
                ],
                "filepath": [
                    "str",
                    "int",
                    "Optional[float]",
                    "list"
                ],
                "lineno": [
                    "bool",
                    "str",
                    "List[Tuple[str, str]]"
                ],
                "line": [
                    "bool",
                    "str",
                    "List[Tuple[str, str]]"
                ]
            }
        },
        "VaultMiddleware.__init__": {
            "name": "__init__",
            "location": 48,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "wsgi_app": [
                    "dict",
                    "type"
                ],
                "config": [
                    "Mapping",
                    "bytes",
                    "Optional[List[str]]"
                ]
            }
        },
        "VaultMiddleware.__call__": {
            "name": "__call__",
            "location": 66,
            "return": [
                "dict",
                "List[float]",
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "environ": [
                    "dict",
                    "Dict[str, Any]",
                    "Optional[str]"
                ],
                "start_response": [
                    "Dict[str, Any]",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "arxiv-vault-master/arxiv/vault/__init__.py": {},
    "arxiv-vault-master/arxiv/vault/hvac_extensions/v1.py": {
        "Client.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "url": [
                    "bool",
                    "str",
                    "int",
                    "Callable[..., None]",
                    "Optional[Any]"
                ],
                "token": [
                    "bool",
                    "str",
                    "int",
                    "Callable[..., None]",
                    "Optional[Any]"
                ],
                "cert": [
                    "bool",
                    "str",
                    "int",
                    "Callable[..., None]",
                    "Optional[Any]"
                ],
                "verify": [
                    "bool",
                    "str",
                    "int",
                    "Callable[..., None]",
                    "Optional[Any]"
                ],
                "timeout": [
                    "bool",
                    "str",
                    "int",
                    "Callable[..., None]",
                    "Optional[Any]"
                ],
                "proxies": [
                    "bool",
                    "str",
                    "int",
                    "Callable[..., None]",
                    "Optional[Any]"
                ],
                "allow_redirects": [
                    "bool",
                    "str",
                    "int",
                    "Callable[..., None]",
                    "Optional[Any]"
                ],
                "session": [
                    "bool",
                    "str",
                    "int",
                    "Callable[..., None]",
                    "Optional[Any]"
                ],
                "adapter": [
                    "Optional[str]",
                    "bool",
                    "Optional[dict]",
                    "Optional[Union[bool, str]]",
                    "int",
                    "Optional[requests.Session]"
                ],
                "namespace": [
                    "bool",
                    "str",
                    "int",
                    "Callable[..., None]",
                    "Optional[Any]"
                ]
            }
        }
    },
    "arxiv-vault-master/arxiv/vault/hvac_extensions/__init__.py": {},
    "arxiv-vault-master/arxiv/vault/hvac_extensions/api/__init__.py": {},
    "arxiv-vault-master/arxiv/vault/hvac_extensions/api/secrets_engines/mysql.py": {
        "MySql.generate_credentials": {
            "name": "generate_credentials",
            "location": 17,
            "return": [
                "Dict[str, Any]",
                "int",
                "str",
                "Exception",
                "dict",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ],
                "endpoint": [
                    "str",
                    "int"
                ],
                "mount_point": [
                    "str",
                    "int"
                ]
            }
        },
        "MySql.read_role": {
            "name": "read_role",
            "location": 25,
            "return": [
                "Dict[str, Any]",
                "int",
                "str",
                "Exception",
                "dict",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "int"
                ],
                "endpoint": [
                    "str",
                    "int"
                ],
                "mount_point": [
                    "str",
                    "int"
                ]
            }
        }
    },
    "arxiv-vault-master/arxiv/vault/hvac_extensions/api/secrets_engines/__init__.py": {},
    "arxiv-vault-master/arxiv/vault/tests/test_manager.py": {
        "TestGetSecretsNotAuthenticated.setUp": {
            "name": "setUp",
            "location": 15,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetSecretsNotAuthenticated.test_generic_request": {
            "name": "test_generic_request",
            "location": 19,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetSecrets.setUp": {
            "name": "setUp",
            "location": 49,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetSecrets.test_generic_request": {
            "name": "test_generic_request",
            "location": 53,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetSecrets.test_generic_request_with_minimum_ttl": {
            "name": "test_generic_request_with_minimum_ttl",
            "location": 92,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetSecrets.test_generic_request_nonrenewable": {
            "name": "test_generic_request_nonrenewable",
            "location": 122,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetSecrets.test_aws_request": {
            "name": "test_aws_request",
            "location": 152,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "TestGetSecrets.test_mysql_credentials": {
            "name": "test_mysql_credentials",
            "location": 189,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-vault-master/arxiv/vault/tests/test_middleware.py": {
        "TestMiddlewareMisconfigured.test_init": {
            "name": "test_init",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestMiddleware.setUp": {
            "name": "setUp",
            "location": 25,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "mock_SecretsManager": [
                    "str",
                    "int"
                ]
            }
        },
        "TestMiddleware.test_request": {
            "name": "test_request",
            "location": 46,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "arxiv-vault-master/arxiv/vault/tests/__init__.py": {},
    "arxiv-vault-master/docs/source/conf.py": {}
}
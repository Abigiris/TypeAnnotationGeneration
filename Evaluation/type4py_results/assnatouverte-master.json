{
    "assnatouverte-master/assnatouverte/cli.py": {
        "crawl": {
            "name": "crawl",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [],
                "context": [],
                "args": []
            }
        },
        "init_db": {
            "name": "init_db",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [],
                "context": [
                    "str"
                ],
                "args": []
            }
        },
        "main": {
            "name": "main",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "assnatouverte-master/assnatouverte/__init__.py": {},
    "assnatouverte-master/assnatouverte/__main__.py": {},
    "assnatouverte-master/assnatouverte/crawling/crawler.py": {
        "Crawler.get_name": {
            "name": "get_name",
            "location": 7,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": []
            }
        },
        "Crawler.crawl": {
            "name": "crawl",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "downloader": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "database": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "assnatouverte-master/assnatouverte/crawling/crawler_repo.py": {
        "CrawlerRepository.__init__": {
            "name": "__init__",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CrawlerRepository.add_crawler": {
            "name": "add_crawler",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "crawler": [
                    "str",
                    "int"
                ]
            }
        },
        "CrawlerRepository.get_crawler": {
            "name": "get_crawler",
            "location": 29,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "crawler_name": [
                    "str"
                ]
            }
        },
        "CrawlerRepository.get_all_crawlers": {
            "name": "get_all_crawlers",
            "location": 36,
            "return": [
                "List[str]",
                "Optional[bool]",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "CrawlerRepository.discover_crawlers": {
            "name": "discover_crawlers",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "pathlib.Path",
                    "str",
                    "Optional[pathlib.Path]"
                ]
            }
        }
    },
    "assnatouverte-master/assnatouverte/crawling/crawler_service.py": {
        "CrawlerService.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "crawler_repo": [
                    "str",
                    "bool"
                ],
                "downloader": [
                    "str",
                    "bool"
                ],
                "database": [
                    "str",
                    "bool"
                ]
            }
        },
        "CrawlerService.check_valid_crawlers": {
            "name": "check_valid_crawlers",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "crawler_names": [
                    "Iterable[str]",
                    "bool",
                    "int",
                    "str",
                    "List[str]",
                    "Optional[str]"
                ]
            }
        },
        "CrawlerService.execute_crawler": {
            "name": "execute_crawler",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "crawler_name": [
                    "str",
                    "list"
                ]
            }
        }
    },
    "assnatouverte-master/assnatouverte/crawling/crawler_service_factory.py": {
        "CrawlerServiceFactory.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CrawlerServiceFactory.with_db_str": {
            "name": "with_db_str",
            "location": 14,
            "return": [
                "int",
                "Dict[str, Any]",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "db_str": [
                    "str",
                    "bool"
                ]
            }
        },
        "CrawlerServiceFactory.echo_sql": {
            "name": "echo_sql",
            "location": 18,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CrawlerServiceFactory.build": {
            "name": "build",
            "location": 22,
            "return": [
                "bytes",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "assnatouverte-master/assnatouverte/crawling/defaults.py": {},
    "assnatouverte-master/assnatouverte/crawling/__init__.py": {},
    "assnatouverte-master/assnatouverte/crawling/crawlers/current_members_crawler.py": {
        "CurrentMembersCrawler.get_name": {
            "name": "get_name",
            "location": 7,
            "return": [
                "str",
                "int",
                "Type[Any]",
                "IO",
                "complex",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CurrentMembersCrawler.crawl": {
            "name": "crawl",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "downloader": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ],
                "database": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "assnatouverte-master/assnatouverte/crawling/crawlers/__init__.py": {},
    "assnatouverte-master/assnatouverte/crawling/downloader/downloader.py": {
        "Downloader.get_text": {
            "name": "get_text",
            "location": 2,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Iterable[str]",
                    "Callable[[str], str]",
                    "Optional[Mapping[str, str]]"
                ]
            }
        },
        "Downloader.get_json": {
            "name": "get_json",
            "location": 5,
            "return": [
                "builtins.dict"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "Optional[Mapping[str, str]]"
                ]
            }
        }
    },
    "assnatouverte-master/assnatouverte/crawling/downloader/http_downloader.py": {
        "HttpDownloader.get_text": {
            "name": "get_text",
            "location": 6,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict",
                    "Dict[str, str]"
                ]
            }
        },
        "HttpDownloader.get_json": {
            "name": "get_json",
            "location": 9,
            "return": [
                "Dict[str, Any]",
                "int",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "url": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "assnatouverte-master/assnatouverte/crawling/downloader/__init__.py": {},
    "assnatouverte-master/assnatouverte/database/base.py": {},
    "assnatouverte-master/assnatouverte/database/database.py": {
        "Database.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "db_str": [
                    "str",
                    "Optional[int]",
                    "bool"
                ],
                "echo_sql": [
                    "str",
                    "Optional[int]",
                    "bool"
                ]
            }
        },
        "Database.create_tables": {
            "name": "create_tables",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Database.drop_tables": {
            "name": "drop_tables",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "assnatouverte-master/assnatouverte/database/database_service.py": {
        "DatabaseService.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "database": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "DatabaseService.init_db": {
            "name": "init_db",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "overwrite": [
                    "bool",
                    "Iterable[Any]",
                    "Sequence[int]",
                    "dict",
                    "int"
                ]
            }
        }
    },
    "assnatouverte-master/assnatouverte/database/database_service_factory.py": {
        "DatabaseServiceFactory.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "DatabaseServiceFactory.with_db_str": {
            "name": "with_db_str",
            "location": 11,
            "return": [
                "int",
                "Dict[str, Any]",
                "float",
                "str"
            ],
            "arguments": {
                "self": [],
                "db_str": [
                    "str",
                    "bool"
                ]
            }
        },
        "DatabaseServiceFactory.build": {
            "name": "build",
            "location": 15,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "assnatouverte-master/assnatouverte/database/__init__.py": {},
    "assnatouverte-master/assnatouverte/database/model/hansard.py": {},
    "assnatouverte-master/assnatouverte/database/model/member.py": {},
    "assnatouverte-master/assnatouverte/database/model/__init__.py": {},
    "assnatouverte-master/tests/test_assnatouverte.py": {
        "TestAssNatOuverte.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAssNatOuverte.test_unknown_command": {
            "name": "test_unknown_command",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAssNatOuverte.test_crawl_defaults": {
            "name": "test_crawl_defaults",
            "location": 33,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAssNatOuverte.test_crawl_custom_db_str": {
            "name": "test_crawl_custom_db_str",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAssNatOuverte.test_crawl_print_sql": {
            "name": "test_crawl_print_sql",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAssNatOuverte.test_db_init_no_overwrite": {
            "name": "test_db_init_no_overwrite",
            "location": 53,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAssNatOuverte.test_db_init_overwrite": {
            "name": "test_db_init_overwrite",
            "location": 60,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestAssNatOuverte.run_with_args": {
            "name": "run_with_args",
            "location": 68,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "assnatouverte-master/tests/__init__.py": {},
    "assnatouverte-master/tests/test_crawling/test_crawler_repo.py": {
        "TestCrawlerRepository.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrawlerRepository.test_add_crawler": {
            "name": "test_add_crawler",
            "location": 23,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrawlerRepository.test_add_crawler_with_same_name": {
            "name": "test_add_crawler_with_same_name",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrawlerRepository.test_get_crawler": {
            "name": "test_get_crawler",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrawlerRepository.test_get_unknown_crawler": {
            "name": "test_get_unknown_crawler",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrawlerRepository.test_discover_crawlers": {
            "name": "test_discover_crawlers",
            "location": 49,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "assnatouverte-master/tests/test_crawling/test_crawler_service.py": {
        "TestCrawlerService.setUp": {
            "name": "setUp",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrawlerService.test_check_valid_crawlers_all_exists": {
            "name": "test_check_valid_crawlers_all_exists",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrawlerService.test_check_valid_crawlers_one_inexistent": {
            "name": "test_check_valid_crawlers_one_inexistent",
            "location": 32,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrawlerService.test_execute_crawler": {
            "name": "test_execute_crawler",
            "location": 44,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "assnatouverte-master/tests/test_crawling/test_crawler_service_factory.py": {
        "TestCrawlerServiceFactory.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrawlerServiceFactory.test_default_values": {
            "name": "test_default_values",
            "location": 26,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrawlerServiceFactory.test_set_db_str": {
            "name": "test_set_db_str",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrawlerServiceFactory.test_set_echo_sql": {
            "name": "test_set_echo_sql",
            "location": 41,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "assnatouverte-master/tests/test_crawling/__init__.py": {},
    "assnatouverte-master/tests/test_crawling/crawlers_test_package/first_module.py": {
        "FirstCrawler.get_name": {
            "name": "get_name",
            "location": 9,
            "return": [
                "str",
                "int",
                "Type[Any]",
                "IO",
                "complex",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "FirstCrawler.crawl": {
            "name": "crawl",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "downloader": [
                    "assnatouverte.crawling.downloader.downloader.Downloader",
                    "assnatouverte.database.database.Database",
                    "bool",
                    "str"
                ],
                "db": [
                    "assnatouverte.crawling.downloader.downloader.Downloader",
                    "assnatouverte.database.database.Database",
                    "bool",
                    "str"
                ]
            }
        },
        "SecondCrawler.get_name": {
            "name": "get_name",
            "location": 18,
            "return": [
                "str",
                "int",
                "Type[Any]",
                "IO",
                "complex",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "SecondCrawler.crawl": {
            "name": "crawl",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "downloader": [
                    "assnatouverte.crawling.downloader.downloader.Downloader",
                    "assnatouverte.database.database.Database",
                    "bool",
                    "str"
                ],
                "db": [
                    "assnatouverte.crawling.downloader.downloader.Downloader",
                    "assnatouverte.database.database.Database",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "assnatouverte-master/tests/test_crawling/crawlers_test_package/second_module.py": {
        "ThirdCrawler.get_name": {
            "name": "get_name",
            "location": 10,
            "return": [
                "str",
                "int",
                "Type[Any]",
                "IO",
                "complex",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "ThirdCrawler.crawl": {
            "name": "crawl",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "downloader": [
                    "assnatouverte.crawling.downloader.downloader.Downloader",
                    "assnatouverte.database.database.Database",
                    "bool",
                    "str"
                ],
                "db": [
                    "assnatouverte.crawling.downloader.downloader.Downloader",
                    "assnatouverte.database.database.Database",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "assnatouverte-master/tests/test_crawling/crawlers_test_package/__init__.py": {},
    "assnatouverte-master/tests/test_crawling/test_downloader/test_http_downloader.py": {
        "TestCrawlerRepository.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrawlerRepository.test_get_text": {
            "name": "test_get_text",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestCrawlerRepository.test_get_json": {
            "name": "test_get_json",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "assnatouverte-master/tests/test_crawling/test_downloader/__init__.py": {},
    "assnatouverte-master/tests/test_database/test_database.py": {
        "TestDatabase.setUp": {
            "name": "setUp",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatabase.test_create_tables": {
            "name": "test_create_tables",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatabase.test_drop_tables": {
            "name": "test_drop_tables",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "assnatouverte-master/tests/test_database/test_database_service.py": {
        "TestDatabaseService.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatabaseService.test_init_db_no_overwrite": {
            "name": "test_init_db_no_overwrite",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatabaseService.test_init_db_overwrite": {
            "name": "test_init_db_overwrite",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "assnatouverte-master/tests/test_database/test_database_service_factory.py": {
        "TestDatabaseServiceFactory.setUp": {
            "name": "setUp",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatabaseServiceFactory.test_default_values": {
            "name": "test_default_values",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "TestDatabaseServiceFactory.test_set_db_str": {
            "name": "test_set_db_str",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "assnatouverte-master/tests/test_database/__init__.py": {}
}
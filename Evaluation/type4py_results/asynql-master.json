{
    "asynql-master/asynql/gqlfield.py": {
        "Field.__init__": {
            "name": "__init__",
            "location": 3,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        }
    },
    "asynql-master/asynql/gqlmodel.py": {
        "_add_fields_from_base_classes": {
            "name": "_add_fields_from_base_classes",
            "location": 15,
            "return": [
                "str",
                "dataclasses.Field",
                "abc.SchemaField",
                "List[str]",
                "Container[str]"
            ],
            "arguments": {
                "bases": [
                    "str",
                    "TextIO",
                    "Type['GenericList']"
                ]
            }
        },
        "_get_annotations": {
            "name": "_get_annotations",
            "location": 26,
            "return": [
                "str"
            ],
            "arguments": {
                "namespace": [
                    "str"
                ]
            }
        },
        "_get_fields_from_annotations": {
            "name": "_get_fields_from_annotations",
            "location": 36,
            "return": [
                "dict",
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {
                "anno_types": [
                    "Dict[str, Any]",
                    "Optional[type]",
                    "Optional[Type]",
                    "bytes"
                ],
                "namespace": [
                    "str",
                    "List[str]",
                    "Set[str]",
                    "Iterable[Any]",
                    "Type[pydantic.BaseModel]"
                ],
                "fields": [
                    "str",
                    "Set[str]"
                ]
            }
        },
        "MetaModel.__new__": {
            "name": "__new__",
            "location": 54,
            "return": [
                "str",
                "bool",
                "type"
            ],
            "arguments": {
                "mcs": [
                    "dict",
                    "str",
                    "Union[Dict, List, str]",
                    "type",
                    "Sequence[type]"
                ],
                "name": [
                    "dict",
                    "str",
                    "Union[Dict, List, str]",
                    "type",
                    "Sequence[type]"
                ],
                "bases": [
                    "str",
                    "Optional[str]"
                ],
                "namespace": [
                    "str",
                    "bool",
                    "mode.utils.imports.SymbolArg[Type[tables.TableT]]"
                ]
            }
        },
        "MetaModel.__getattr__": {
            "name": "__getattr__",
            "location": 69,
            "return": [
                "SendCh[trio.abc.Stream]",
                "str"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "str",
                    "Dict[str, Any]",
                    "Dict[str, str]"
                ]
            }
        },
        "GQLModel.__init__": {
            "name": "__init__",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "GQLModel.q": {
            "name": "q",
            "location": 84,
            "return": [
                "bool",
                "Dict[str, Set[str]]",
                "Type",
                "str",
                "bytes"
            ],
            "arguments": {
                "self": []
            }
        },
        "GQLModel.many": {
            "name": "many",
            "location": 92,
            "return": [
                "bool",
                "Dict[str, Set[str]]",
                "Type",
                "str",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Mapping[str, utils.mssql_counters.Section]"
                ]
            }
        },
        "GQLModel.one": {
            "name": "one",
            "location": 99,
            "return": [
                "bool",
                "Dict[str, Set[str]]",
                "Type",
                "str",
                "bytes"
            ],
            "arguments": {
                "cls": [
                    "str",
                    "Mapping[str, utils.mssql_counters.Section]"
                ]
            }
        }
    },
    "asynql-master/asynql/gqlquery.py": {
        "GQLQuery.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Dict[str, Any]",
                    "List[str]",
                    "dict"
                ]
            }
        },
        "GQLQuery.add": {
            "name": "add",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "field": [
                    "str",
                    "typesystem.fields.Field"
                ],
                "name": [
                    "str",
                    "Iterable[Any]"
                ]
            }
        },
        "GQLQuery.to_gql": {
            "name": "to_gql",
            "location": 22,
            "return": [
                "str",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "inner": [
                    "bool"
                ]
            }
        },
        "GQLQuery._apply_filters": {
            "name": "_apply_filters",
            "location": 30,
            "return": [
                "dict",
                "Dict[str, float]",
                "Mapping[str, Any]",
                "Dict[str, bool]"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "io.StringIO",
                    "Dict[str, int]",
                    "Sequence",
                    "str",
                    "dict",
                    "Optional[Dict[str, Any]]",
                    "Literal",
                    "Dict[str, Any]"
                ]
            }
        },
        "GQLQuery._apply_builder": {
            "name": "_apply_builder",
            "location": 41,
            "return": [
                "bool",
                "str",
                "Dict[str, Any]",
                "T"
            ],
            "arguments": {
                "self": [],
                "query": [
                    "io.StringIO",
                    "dict",
                    "Dict[str, Any]",
                    "bool",
                    "Union[int, slice]"
                ]
            }
        }
    },
    "asynql-master/asynql/__init__.py": {},
    "asynql-master/docs/conf.py": {
        "_get_project_meta": {
            "name": "_get_project_meta",
            "location": 9,
            "return": [
                "Dict[str, Any]",
                "str",
                "int",
                "Dict[str, Optional[str]]"
            ],
            "arguments": {}
        }
    },
    "asynql-master/tests/test_gqlquery/test_gqlquery.py": {
        "test_one_field": {
            "name": "test_one_field",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_two_fields": {
            "name": "test_two_fields",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_inner_gql_field": {
            "name": "test_inner_gql_field",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_many_inner_gql_field_expand": {
            "name": "test_many_inner_gql_field_expand",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_one_inner_gql_field_expand": {
            "name": "test_one_inner_gql_field_expand",
            "location": 34,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "test_complex_query": {
            "name": "test_complex_query",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "asynql-master/tests/test_gqlquery/__init__.py": {},
    "asynql-master/tests/test_gqlquery/samples/address.py": {},
    "asynql-master/tests/test_gqlquery/samples/concert.py": {},
    "asynql-master/tests/test_gqlquery/samples/venue.py": {},
    "asynql-master/tests/test_gqlquery/samples/__init__.py": {}
}
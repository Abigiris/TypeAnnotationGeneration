{
    "audio-gallery-master/manage.py": {},
    "audio-gallery-master/audio_gallery/celery.py": {
        "task_setup_logging": {
            "name": "task_setup_logging",
            "location": 18,
            "return": [
                "int",
                "str",
                "bool",
                "logging.LogRecord",
                "Optional[int]"
            ],
            "arguments": {}
        }
    },
    "audio-gallery-master/audio_gallery/settings.py": {
        "generate_secret_key": {
            "name": "generate_secret_key",
            "location": 9,
            "return": [
                "str",
                "bool",
                "dict"
            ],
            "arguments": {
                "file": [
                    "str",
                    "BinaryIO",
                    "int",
                    "Optional[str]"
                ]
            }
        }
    },
    "audio-gallery-master/audio_gallery/urls.py": {},
    "audio-gallery-master/audio_gallery/wsgi.py": {},
    "audio-gallery-master/audio_gallery/__init__.py": {},
    "audio-gallery-master/audio_profiling/admin.py": {},
    "audio-gallery-master/audio_profiling/conf.py": {},
    "audio-gallery-master/audio_profiling/models.py": {
        "AudioFile.__str__": {
            "name": "__str__",
            "location": 30,
            "return": [
                "int",
                "bytes",
                "set"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFile.waveform_upload_path": {
            "name": "waveform_upload_path",
            "location": 36,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFile.spectrogram_upload_path": {
            "name": "spectrogram_upload_path",
            "location": 39,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFile.spectrum_upload_path": {
            "name": "spectrum_upload_path",
            "location": 42,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFile.audio_file_name": {
            "name": "audio_file_name",
            "location": 45,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFile._get_spectrum_name": {
            "name": "_get_spectrum_name",
            "location": 51,
            "return": [
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFile._get_waveform_name": {
            "name": "_get_waveform_name",
            "location": 53,
            "return": [
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFile._get_spectrogram_name": {
            "name": "_get_spectrogram_name",
            "location": 55,
            "return": [
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFile._get_mp3_name": {
            "name": "_get_mp3_name",
            "location": 57,
            "return": [
                "str",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFile.spectrogram_url": {
            "name": "spectrogram_url",
            "location": 61,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFile.spectrum_url": {
            "name": "spectrum_url",
            "location": 65,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFile.mp3_url": {
            "name": "mp3_url",
            "location": 69,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFile.waveform_url": {
            "name": "waveform_url",
            "location": 73,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFile.clean_old_file": {
            "name": "clean_old_file",
            "location": 77,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFile.create_files": {
            "name": "create_files",
            "location": 81,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFile.save": {
            "name": "save",
            "location": 88,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioPage.__str__": {
            "name": "__str__",
            "location": 110,
            "return": [
                "str",
                "Optional[Any]",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "Category.__str__": {
            "name": "__str__",
            "location": 118,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audio-gallery-master/audio_profiling/tasks.py": {
        "blocking_cache_add": {
            "name": "blocking_cache_add",
            "location": 38,
            "return": [
                "bool",
                "Union[bool, str]",
                "\"Block\""
            ],
            "arguments": {
                "lock_id": [
                    "str",
                    "int",
                    "Union[int, str]",
                    "Match"
                ],
                "timeout": [
                    "int",
                    "float",
                    "Optional[int]",
                    "Optional[bool]"
                ]
            }
        },
        "memcache_lock": {
            "name": "memcache_lock",
            "location": 50,
            "return": [
                ""
            ],
            "arguments": {
                "lock_id": [
                    "str",
                    "int",
                    "transfer.models.ItemID"
                ]
            }
        },
        "get_lock_id": {
            "name": "get_lock_id",
            "location": 69,
            "return": [
                "str"
            ],
            "arguments": {
                "pk": [
                    "str",
                    "Dict[str, Any]",
                    "Optional[str]"
                ]
            }
        },
        "get_media_path": {
            "name": "get_media_path",
            "location": 75,
            "return": [
                "str"
            ],
            "arguments": {
                "full_path": [
                    "str",
                    "bool",
                    "dict"
                ]
            }
        },
        "round_half_up": {
            "name": "round_half_up",
            "location": 79,
            "return": [
                "BaseException"
            ],
            "arguments": {
                "num": [
                    "int",
                    "Optional[int]",
                    "numpy.ndarray"
                ]
            }
        },
        "get_wav_info": {
            "name": "get_wav_info",
            "location": 83,
            "return": [
                "str",
                "dict",
                "zerver.models.Realm"
            ],
            "arguments": {
                "wav_file": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "create_waveform": {
            "name": "create_waveform",
            "location": 93,
            "return": [
                "None"
            ],
            "arguments": {
                "music_file_pk": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "create_mp3": {
            "name": "create_mp3",
            "location": 112,
            "return": [
                "None"
            ],
            "arguments": {
                "music_file_pk": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "create_spectrum": {
            "name": "create_spectrum",
            "location": 130,
            "return": [
                "None"
            ],
            "arguments": {
                "music_file_pk": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "get_figure_margins": {
            "name": "get_figure_margins",
            "location": 158,
            "return": [
                "bool",
                "float",
                "Optional[float]",
                "int",
                "Optional[int]"
            ],
            "arguments": {
                "fig": [
                    "float",
                    "Optional[int]",
                    "List[int]",
                    "int",
                    "bool",
                    "str"
                ]
            }
        },
        "create_spectrogram": {
            "name": "create_spectrogram",
            "location": 175,
            "return": [
                "None"
            ],
            "arguments": {
                "music_file_pk": [
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "audio-gallery-master/audio_profiling/translation.py": {},
    "audio-gallery-master/audio_profiling/urls.py": {},
    "audio-gallery-master/audio_profiling/views.py": {
        "SetLanguage.get": {
            "name": "get",
            "location": 25,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        },
        "AudioListMixin.sort_by_page_number": {
            "name": "sort_by_page_number",
            "location": 40,
            "return": [
                "str",
                "List[int]"
            ],
            "arguments": {
                "instruments": [
                    "str"
                ]
            }
        },
        "AudioListMixin.get_context_data": {
            "name": "get_context_data",
            "location": 43,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "context": [
                    "str",
                    "int"
                ]
            }
        },
        "AudioFileDetail.get_context_data": {
            "name": "get_context_data",
            "location": 84,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioPageListView.get_context_data": {
            "name": "get_context_data",
            "location": 98,
            "return": [
                "int",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioPageListView.get": {
            "name": "get",
            "location": 102,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "request": [
                    "django.http.HttpRequest"
                ]
            }
        }
    },
    "audio-gallery-master/audio_profiling/__init__.py": {},
    "audio-gallery-master/audio_profiling/migrations/0001_initial.py": {},
    "audio-gallery-master/audio_profiling/migrations/__init__.py": {},
    "audio-gallery-master/audio_profiling/tests/audio_helpers.py": {
        "silence": {
            "name": "silence",
            "location": 12,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "sample_rate": [
                    "int",
                    "Callable",
                    "str"
                ],
                "duration_ms": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "sinewave": {
            "name": "sinewave",
            "location": 16,
            "return": [
                "numpy.ndarray",
                "str",
                "float",
                "bytearray",
                "Dict[str, int]",
                "List[int]"
            ],
            "arguments": {
                "freq": [
                    "float",
                    "bool",
                    "numpy.ndarray"
                ],
                "sample_rate": [],
                "duration_ms": [
                    "int",
                    "Callable",
                    "str"
                ],
                "volume": [
                    "float",
                    "bool",
                    "numpy.ndarray"
                ]
            }
        },
        "generate_audio": {
            "name": "generate_audio",
            "location": 21,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        }
    },
    "audio-gallery-master/audio_profiling/tests/test_models.py": {
        "AudioFileTests.setUp": {
            "name": "setUp",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFileTests.test_create_files_is_called_on_object_creation": {
            "name": "test_create_files_is_called_on_object_creation",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFileTests.test_create_files_not_fired_when_nothing_changes": {
            "name": "test_create_files_not_fired_when_nothing_changes",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFileTests.test_create_files_not_called_until_transaction_is_over": {
            "name": "test_create_files_not_called_until_transaction_is_over",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFileTests.test_create_files_called_when_audio_file_changes": {
            "name": "test_create_files_called_when_audio_file_changes",
            "location": 31,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audio-gallery-master/audio_profiling/tests/test_tasks.py": {
        "mock_generator": {
            "name": "mock_generator",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "lock_id": [
                    "str",
                    "bool",
                    "list",
                    "int"
                ]
            }
        },
        "AudioFileTasksTests.setUp": {
            "name": "setUp",
            "location": 29,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFileTasksTests.test_get_media_path": {
            "name": "test_get_media_path",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFileTasksTests.test_round_half_up": {
            "name": "test_round_half_up",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFileTasksTests.test_get_figure_margins": {
            "name": "test_get_figure_margins",
            "location": 48,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "AudioFileTasksTests.test_create_mp3": {
            "name": "test_create_mp3",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "subprocess_call_mock": []
            }
        },
        "AudioFileTasksTests.test_create_waveform": {
            "name": "test_create_waveform",
            "location": 70,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "subprocess_call_mock": []
            }
        },
        "AudioFileTasksTests.test_create_spectrum": {
            "name": "test_create_spectrum",
            "location": 83,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "scipy_io_wavfile_read_mock": [],
                "json_dump_mock": []
            }
        },
        "AudioFileTasksTests.test_create_spectrogram": {
            "name": "test_create_spectrogram",
            "location": 110,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "get_wav_info_mock": [],
                "pylab_savefig_mock": []
            }
        }
    },
    "audio-gallery-master/audio_profiling/tests/test_views.py": {
        "get_dummy_audio_file": {
            "name": "get_dummy_audio_file",
            "location": 14,
            "return": [],
            "arguments": {
                "category": [],
                "instrument": []
            }
        },
        "ViewTestCase.setUp": {
            "name": "setUp",
            "location": 30,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AudioListMixinTests.test_get_context_data": {
            "name": "test_get_context_data",
            "location": 65,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AudioFileDetailTests.test_get_audio_file": {
            "name": "test_get_audio_file",
            "location": 103,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AudioFileDetailTests.test_file_with_missing_one_link_renders_correctly": {
            "name": "test_file_with_missing_one_link_renders_correctly",
            "location": 115,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AudioFileDetailTests.test_file_with_missing_all_links_renders_correctly": {
            "name": "test_file_with_missing_all_links_renders_correctly",
            "location": 129,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AudioPageListViewTests.test_all_categories_are_presented_to_the_user": {
            "name": "test_all_categories_are_presented_to_the_user",
            "location": 145,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "AudioPageListViewTests.test_redirect_when_start_page_is_set": {
            "name": "test_redirect_when_start_page_is_set",
            "location": 165,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "audio-gallery-master/audio_profiling/tests/__init__.py": {},
    "audio-gallery-master/functional_tests/base.py": {
        "generate_wav_files": {
            "name": "generate_wav_files",
            "location": 24,
            "return": [],
            "arguments": {
                "dir_to_save_in": []
            }
        },
        "generate_image": {
            "name": "generate_image",
            "location": 64,
            "return": [],
            "arguments": {
                "path": []
            }
        },
        "FunctionalTest._create_dummy_media_dir": {
            "name": "_create_dummy_media_dir",
            "location": 92,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "FunctionalTest._clean_dummy_media_dir": {
            "name": "_clean_dummy_media_dir",
            "location": 101,
            "return": [],
            "arguments": {
                "cls": []
            }
        },
        "FunctionalTest.setUp": {
            "name": "setUp",
            "location": 104,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionalTest.tearDown": {
            "name": "tearDown",
            "location": 114,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionalTest.is_audio_paused": {
            "name": "is_audio_paused",
            "location": 120,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionalTest.pause_audio": {
            "name": "pause_audio",
            "location": 123,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionalTest.play_audio": {
            "name": "play_audio",
            "location": 128,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionalTest.check_timestamp_lines_in_sync": {
            "name": "check_timestamp_lines_in_sync",
            "location": 133,
            "return": [],
            "arguments": {
                "self": [],
                "audio": [],
                "audio_len": []
            }
        },
        "FunctionalTest.check_audio_file_tasks_completed": {
            "name": "check_audio_file_tasks_completed",
            "location": 184,
            "return": [],
            "arguments": {
                "self": [],
                "audio": []
            }
        },
        "FunctionalTest.get_spectrum_Db_value": {
            "name": "get_spectrum_Db_value",
            "location": 194,
            "return": [],
            "arguments": {
                "self": [],
                "frequency": []
            }
        },
        "FunctionalTest.get_current_audio_time": {
            "name": "get_current_audio_time",
            "location": 212,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionalTest.get_current_image_scaling": {
            "name": "get_current_image_scaling",
            "location": 215,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionalTest.set_audio_position": {
            "name": "set_audio_position",
            "location": 221,
            "return": [],
            "arguments": {
                "self": [],
                "audio_time": []
            }
        },
        "FunctionalTest.get_spectrum_data": {
            "name": "get_spectrum_data",
            "location": 234,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "FunctionalTest.check_internalization": {
            "name": "check_internalization",
            "location": 237,
            "return": [],
            "arguments": {
                "self": [],
                "audio_page": [],
                "language": []
            }
        },
        "FunctionalTest.check_img_loaded": {
            "name": "check_img_loaded",
            "location": 253,
            "return": [],
            "arguments": {
                "self": [],
                "id": []
            }
        },
        "FunctionalTest.check_spectrogram_loaded": {
            "name": "check_spectrogram_loaded",
            "location": 260,
            "return": [],
            "arguments": {
                "self": [],
                "audio": []
            }
        },
        "FunctionalTest.check_audio_page_photo_loaded": {
            "name": "check_audio_page_photo_loaded",
            "location": 265,
            "return": [],
            "arguments": {
                "self": [],
                "audio_page": []
            }
        },
        "FunctionalTest.check_audio_loaded": {
            "name": "check_audio_loaded",
            "location": 269,
            "return": [],
            "arguments": {
                "self": [],
                "audio": []
            }
        },
        "FunctionalTest.check_page": {
            "name": "check_page",
            "location": 275,
            "return": [],
            "arguments": {
                "self": [],
                "audio_page": [],
                "audio": [],
                "language": []
            }
        }
    },
    "audio-gallery-master/functional_tests/test_the_whole_shebang.py": {
        "CasualBrowsingTest.create_data": {
            "name": "create_data",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "CasualBrowsingTest.test_data_setup_and_casual_browsing": {
            "name": "test_data_setup_and_casual_browsing",
            "location": 76,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "audio-gallery-master/functional_tests/__init__.py": {}
}
{
    "authark-master/authark/__init__.py": {},
    "authark-master/authark/__main__.py": {},
    "authark-master/authark/application/__init__.py": {},
    "authark-master/authark/application/domain/__init__.py": {},
    "authark-master/authark/application/domain/common/auth.py": {
        "User.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthProvider.setup": {
            "name": "setup",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "dict",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        },
        "AuthProvider.user": {
            "name": "user",
            "location": 29,
            "return": [
                "User"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthProvider.reference": {
            "name": "reference",
            "location": 33,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthProvider.location": {
            "name": "location",
            "location": 37,
            "return": [
                "Mapping[str, Any]",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "AuthProvider.zone": {
            "name": "zone",
            "location": 41,
            "return": [
                "Optional[str]",
                "str",
                "bool"
            ],
            "arguments": {
                "self": []
            }
        },
        "StandardAuthProvider.setup": {
            "name": "setup",
            "location": 50,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "str"
                ]
            }
        },
        "StandardAuthProvider.user": {
            "name": "user",
            "location": 54,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "AnonymousUser.__init__": {
            "name": "__init__",
            "location": 68,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "SystemUser.__init__": {
            "name": "__init__",
            "location": 78,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "authark-master/authark/application/domain/common/exceptions.py": {},
    "authark-master/authark/application/domain/common/query_parser.py": {
        "QueryParser.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "QueryParser.parse": {
            "name": "parse",
            "location": 46,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "List[str]",
                    "str",
                    "float",
                    "int",
                    "Container"
                ]
            }
        },
        "QueryParser._default_join": {
            "name": "_default_join",
            "location": 70,
            "return": [
                "Callable[[Mapping], T]",
                "int",
                "float"
            ],
            "arguments": {
                "self": [],
                "stack": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "QueryParser._parse_term": {
            "name": "_parse_term",
            "location": 80,
            "return": [
                "bool",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "term_tuple": [
                    "str",
                    "Callable[[str], T]",
                    "Optional[Union[Any, str]]",
                    "Optional[str]"
                ]
            }
        },
        "QueryParser._parse_like": {
            "name": "_parse_like",
            "location": 88,
            "return": [
                "bool"
            ],
            "arguments": {
                "value": [
                    "str"
                ],
                "pattern": [
                    "str",
                    "Union[str, bytes]"
                ],
                "insensitive": [
                    "ics.types.ContextDict",
                    "ics.types.ExtraParams",
                    "ics.types.DatetimeLike",
                    "int",
                    "Tuple[str, int]",
                    "complex",
                    "list"
                ]
            }
        }
    },
    "authark-master/authark/application/domain/common/types.py": {},
    "authark-master/authark/application/domain/common/__init__.py": {},
    "authark-master/authark/application/domain/models/credential.py": {
        "Credential.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "authark-master/authark/application/domain/models/dominion.py": {
        "Dominion.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "authark-master/authark/application/domain/models/policy.py": {
        "Policy.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "authark-master/authark/application/domain/models/ranking.py": {
        "Ranking.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "authark-master/authark/application/domain/models/restriction.py": {
        "Restriction.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "authark-master/authark/application/domain/models/role.py": {
        "Role.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "authark-master/authark/application/domain/models/setting.py": {},
    "authark-master/authark/application/domain/models/tenant.py": {
        "Tenant.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "Tenant._normalize_slug": {
            "name": "_normalize_slug",
            "location": 14,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "slug": [
                    "str"
                ]
            }
        }
    },
    "authark-master/authark/application/domain/models/token.py": {
        "Token.__init__": {
            "name": "__init__",
            "location": 2,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "float",
                    "str",
                    "int",
                    "T"
                ]
            }
        }
    },
    "authark-master/authark/application/domain/models/trait.py": {},
    "authark-master/authark/application/domain/models/user.py": {
        "User.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "authark-master/authark/application/domain/models/__init__.py": {},
    "authark-master/authark/application/domain/services/access_service.py": {
        "AccessService.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "ranking_repository": [
                    "bool",
                    "int",
                    "float",
                    "str"
                ],
                "role_repository": [
                    "bool",
                    "int",
                    "float",
                    "str"
                ],
                "dominion_repository": [
                    "bool",
                    "int",
                    "float",
                    "str"
                ],
                "token_service": [
                    "bool",
                    "int",
                    "float",
                    "str"
                ]
            }
        },
        "AccessService._build_basic_info": {
            "name": "_build_basic_info",
            "location": 31,
            "return": [
                "bytes",
                "tracim.models.data.Content",
                "bool"
            ],
            "arguments": {
                "self": [],
                "tenant": [
                    "str",
                    "bool",
                    "models.User",
                    "int",
                    "Optional[bool]"
                ],
                "user": [
                    "str",
                    "bool",
                    "models.User",
                    "int",
                    "Optional[bool]"
                ]
            }
        }
    },
    "authark-master/authark/application/domain/services/enrollment_service.py": {
        "EnrollmentService.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_repository": [
                    "bool",
                    "str",
                    "domain.common.RecordList",
                    "List[domain.models.User]",
                    "Optional[int]",
                    "User",
                    "zerver.models.UserProfile"
                ],
                "credential_repository": [
                    "bool",
                    "int",
                    "str",
                    "tracim.models.data.Workspace"
                ],
                "hash_service": [
                    "str",
                    "Callable[[], None]",
                    "Dict[Hashable, Any]",
                    "dict"
                ]
            }
        },
        "EnrollmentService._validate_usernames": {
            "name": "_validate_usernames",
            "location": 60,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "users": [
                    "dict",
                    "Dict[str, Any]",
                    "zerver.models.UserProfile",
                    "Optional[zerver.models.UserProfile]",
                    "str",
                    "multinedb.models.user.User"
                ]
            }
        }
    },
    "authark-master/authark/application/domain/services/hash_service.py": {
        "HashService.generate_hash": {
            "name": "generate_hash",
            "location": 6,
            "return": [
                "builtins.str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool"
                ]
            }
        },
        "HashService.verify_password": {
            "name": "verify_password",
            "location": 10,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "Union[str, int]"
                ],
                "hash": [
                    "str",
                    "Union[str, int]"
                ]
            }
        },
        "MemoryHashService.generate_hash": {
            "name": "generate_hash",
            "location": 15,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "Iterable[Any]"
                ]
            }
        },
        "MemoryHashService.verify_password": {
            "name": "verify_password",
            "location": 18,
            "return": [
                "str"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "bytes",
                    "int"
                ],
                "hash": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "authark-master/authark/application/domain/services/identity_service.py": {
        "MemoryIdentityService.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user": [
                    "tracim.models.auth.User",
                    "bob_emploi.frontend.api.user_pb2.User",
                    "models.User",
                    "asgard.models.agenAgent",
                    "bool",
                    "str",
                    "bytes",
                    "server.models.User"
                ]
            }
        }
    },
    "authark-master/authark/application/domain/services/import_service.py": {
        "ImportService.import_users": {
            "name": "import_users",
            "location": 7,
            "return": [
                "typing.List[typing.Any]"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str"
                ],
                "source": [
                    "str"
                ],
                "password_field": [
                    "str"
                ]
            }
        },
        "MemoryImportService.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryImportService.import_users": {
            "name": "import_users",
            "location": 16,
            "return": [
                "discord.abc.GuildChannel"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str"
                ],
                "source": [
                    "str"
                ],
                "password_field": [
                    "str"
                ]
            }
        }
    },
    "authark-master/authark/application/domain/services/token_service.py": {
        "TokenService.generate_token": {
            "name": "generate_token",
            "location": 9,
            "return": [
                "models.Token"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "str",
                    "Iterator[Tuple[str, Any, Any]]",
                    "T",
                    "Dict[str, str]",
                    "bool"
                ]
            }
        },
        "TokenService.valid": {
            "name": "valid",
            "location": 13,
            "return": [
                "builtins.bool"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "models.Token",
                    "str",
                    "bool",
                    "Iterable[lexical_analysis.Token]",
                    "Iterable[sensibility.lexical_analysis.Token]"
                ]
            }
        },
        "TokenService.decode": {
            "name": "decode",
            "location": 17,
            "return": [
                "typing.Dict[builtins.str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "str",
                    "Iterable[Token]",
                    "Iterator[str]",
                    "Token",
                    "List[str]",
                    "List[lark.Token]"
                ]
            }
        },
        "MemoryTokenService.generate_token": {
            "name": "generate_token",
            "location": 22,
            "return": [
                "dict",
                "bool",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "Dict[str, Any]",
                    "str",
                    "bool"
                ]
            }
        },
        "MemoryTokenService.valid": {
            "name": "valid",
            "location": 25,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "models.Token",
                    "str",
                    "bool",
                    "Iterable[lexical_analysis.Token]",
                    "Iterable[sensibility.lexical_analysis.Token]"
                ]
            }
        },
        "MemoryTokenService.decode": {
            "name": "decode",
            "location": 28,
            "return": [
                "Optional[int]",
                "bool",
                "str",
                "bytes",
                "Optional[Any]"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "Iterable[str]",
                    "MutableMapping[Any, Any]",
                    "List[str]",
                    "allennlp.data.tokenizers.token.Token",
                    "FrozenSet[str]",
                    "sqlparse.sql.Token",
                    "spacy.tokens.Token"
                ]
            }
        }
    },
    "authark-master/authark/application/domain/services/verification_service.py": {
        "VerificationService.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_repository": [
                    "str",
                    "List[domain.models.User]",
                    "Optional[int]",
                    "User",
                    "zerver.models.UserProfile",
                    "bool",
                    "Optional[str]"
                ],
                "token_service": [
                    "reader_server.types.User",
                    "bool",
                    "User",
                    "int",
                    "server.models.User",
                    "lms.lmsdb.models.User"
                ]
            }
        },
        "VerificationService.generate_token": {
            "name": "generate_token",
            "location": 13,
            "return": [
                "str",
                "int",
                "list"
            ],
            "arguments": {
                "self": [],
                "tenant": [
                    "type"
                ],
                "user": [
                    "type"
                ],
                "type": [
                    "type"
                ]
            }
        },
        "VerificationService.generate_token_tenant": {
            "name": "generate_token_tenant",
            "location": 19,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {
                "self": [],
                "tenant": [
                    "bool",
                    "dict",
                    "list",
                    "str"
                ],
                "type": [
                    "bool",
                    "dict",
                    "list",
                    "str"
                ]
            }
        },
        "VerificationService.generate_authorization": {
            "name": "generate_authorization",
            "location": 25,
            "return": [
                "str",
                "ajapaik.ajapaik.models.Album",
                "int"
            ],
            "arguments": {
                "self": [],
                "tenant": [
                    "str",
                    "Type",
                    "dict",
                    "models.User",
                    "zerver.models.Realm",
                    "salon.models.Stylist"
                ],
                "user": [
                    "str",
                    "Type",
                    "dict",
                    "models.User",
                    "zerver.models.Realm",
                    "salon.models.Stylist"
                ]
            }
        }
    },
    "authark-master/authark/application/domain/services/__init__.py": {},
    "authark-master/authark/application/domain/services/repositories/memory_model_repositories.py": {},
    "authark-master/authark/application/domain/services/repositories/__init__.py": {},
    "authark-master/authark/application/general/__init__.py": {},
    "authark-master/authark/application/general/suppliers/__init__.py": {},
    "authark-master/authark/application/general/suppliers/plan/events.py": {
        "Event.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "authark-master/authark/application/general/suppliers/plan/jobs.py": {
        "Job.__init__": {
            "name": "__init__",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "authark-master/authark/application/general/suppliers/plan/plan_supplier.py": {
        "MemoryPlanSupplier.__init__": {
            "name": "__init__",
            "location": 26,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "authark-master/authark/application/general/suppliers/plan/__init__.py": {},
    "authark-master/authark/application/general/suppliers/setup/setup_supplier.py": {
        "SetupSupplier.setup": {
            "name": "setup",
            "location": 6,
            "return": [],
            "arguments": {
                "self": []
            }
        },
        "MemorySetupSupplier.setup": {
            "name": "setup",
            "location": 11,
            "return": [],
            "arguments": {
                "self": []
            }
        }
    },
    "authark-master/authark/application/general/suppliers/setup/__init__.py": {},
    "authark-master/authark/application/general/suppliers/tenancy/memory_tenant_supplier.py": {
        "MemoryTenantSupplier.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "MemoryTenantSupplier.get_tenant": {
            "name": "get_tenant",
            "location": 11,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "tenant_id": [
                    "str",
                    "int"
                ]
            }
        },
        "MemoryTenantSupplier.create_tenant": {
            "name": "create_tenant",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tenant_dict": [
                    "str",
                    "dict",
                    "Union[None, dict]",
                    "bytes"
                ]
            }
        },
        "MemoryTenantSupplier.resolve_tenant": {
            "name": "resolve_tenant",
            "location": 17,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str"
                ]
            }
        },
        "MemoryTenantSupplier.search_tenants": {
            "name": "search_tenants",
            "location": 20,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "str",
                    "Union[List[str], Tuple[str], None]",
                    "List[str]",
                    "Match"
                ]
            }
        }
    },
    "authark-master/authark/application/general/suppliers/tenancy/tenant_supplier.py": {
        "TenantSupplier.get_tenant": {
            "name": "get_tenant",
            "location": 8,
            "return": [
                "typing.Dict[builtins.str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "tenant_id": [
                    "str",
                    "int"
                ]
            }
        },
        "TenantSupplier.create_tenant": {
            "name": "create_tenant",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tenant_dict": [
                    "Dict[str, Any]",
                    "slice",
                    "dict",
                    "abc.Iterable",
                    "List[List[str]]",
                    "str"
                ]
            }
        },
        "TenantSupplier.resolve_tenant": {
            "name": "resolve_tenant",
            "location": 16,
            "return": [
                "typing.Dict[builtins.str, typing.Any]"
            ],
            "arguments": {
                "self": [],
                "name": [
                    "str",
                    "Iterable[str]",
                    "dict"
                ]
            }
        },
        "TenantSupplier.search_tenants": {
            "name": "search_tenants",
            "location": 20,
            "return": [
                "typing.List[typing.Dict[builtins.str, typing.Any]]"
            ],
            "arguments": {
                "self": [],
                "domain": [
                    "list",
                    "int",
                    "bool",
                    "T",
                    "str"
                ]
            }
        }
    },
    "authark-master/authark/application/general/suppliers/tenancy/__init__.py": {},
    "authark-master/authark/application/operation/__init__.py": {},
    "authark-master/authark/application/operation/informers/composing_informer.py": {
        "ComposingInformer.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "dominion_repository": [
                    "int",
                    "bool",
                    "float"
                ],
                "role_repository": [
                    "int",
                    "bool",
                    "float"
                ],
                "ranking_repository": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "authark-master/authark/application/operation/informers/standard_informer.py": {
        "StandardInformer.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_repository": [
                    "Optional[int]",
                    "domain.common.RecordList",
                    "List[domain.models.User]",
                    "str",
                    "src.domain.entity.user_persistence.UserPersistence",
                    "bool"
                ],
                "credential_repository": [
                    "bool",
                    "str",
                    "bytes"
                ],
                "dominion_repository": [
                    "bool",
                    "str",
                    "bytes"
                ],
                "role_repository": [
                    "bool",
                    "str",
                    "bytes"
                ],
                "restriction_repository": [
                    "bool",
                    "str",
                    "bytes"
                ],
                "policy_repository": [
                    "bool",
                    "str",
                    "bytes"
                ],
                "ranking_repository": [
                    "bool",
                    "str",
                    "bytes"
                ]
            }
        }
    },
    "authark-master/authark/application/operation/informers/tenant_informer.py": {
        "TenantInformer.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tenant_supplier": [
                    "bool",
                    "str",
                    "Optional[Dict]",
                    "List[str]",
                    "Sequence[str]",
                    "int",
                    "list"
                ]
            }
        }
    },
    "authark-master/authark/application/operation/informers/__init__.py": {},
    "authark-master/authark/application/operation/managers/auth_manager.py": {
        "AuthManager.__init__": {
            "name": "__init__",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auth_provider": [
                    "bool",
                    "Iterable['adi.Instance']",
                    "int",
                    "Exception"
                ],
                "user_repository": [
                    "int",
                    "str",
                    "List[int]",
                    "list"
                ],
                "credential_repository": [
                    "bool",
                    "Iterable['adi.Instance']",
                    "int",
                    "Exception"
                ],
                "dominion_repository": [
                    "bool",
                    "Iterable['adi.Instance']",
                    "int",
                    "Exception"
                ],
                "hash_service": [
                    "int",
                    "dict",
                    "Union[str, List[str]]",
                    "Union[str, IO]",
                    "Callable",
                    "Optional[Dict[str, str]]",
                    "Optional[Sequence[str]]"
                ],
                "access_service": [
                    "bool",
                    "Iterable['adi.Instance']",
                    "int",
                    "Exception"
                ],
                "refresh_token_service": [
                    "bool",
                    "Optional[float]",
                    "Dict[str, List[str]]",
                    "int",
                    "List[Callable]",
                    "str"
                ],
                "identity_service": [
                    "bool",
                    "Iterable['adi.Instance']",
                    "int",
                    "Exception"
                ],
                "tenant_supplier": [
                    "bool",
                    "Iterable['adi.Instance']",
                    "int",
                    "Exception"
                ]
            }
        }
    },
    "authark-master/authark/application/operation/managers/import_manager.py": {
        "ImportManager.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "import_service": [
                    "str",
                    "bool"
                ],
                "user_repository": [
                    "int",
                    "str",
                    "daylighdb.models.User"
                ],
                "credential_repository": [
                    "str",
                    "bool"
                ],
                "role_repository": [
                    "str",
                    "bool"
                ],
                "ranking_repository": [
                    "str",
                    "bool"
                ],
                "dominion_repository": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "authark-master/authark/application/operation/managers/management_manager.py": {
        "ManagementManager.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "user_repository": [
                    "zerver.models.UserProfile",
                    "Optional[int]",
                    "domain.common.RecordList",
                    "List[domain.models.User]",
                    "str",
                    "src.domain.entity.user_persistence.UserPersistence",
                    "bool",
                    "tildes.models.user.User",
                    "excars.models.user.User"
                ],
                "dominion_repository": [
                    "tracim.models.auth.User",
                    "models.User",
                    "asgard.models.agenAgent",
                    "bool",
                    "str",
                    "bytes",
                    "server.models.User"
                ],
                "role_repository": [
                    "tracim.models.auth.User",
                    "models.User",
                    "asgard.models.agenAgent",
                    "bool",
                    "str",
                    "bytes",
                    "server.models.User"
                ],
                "ranking_repository": [
                    "tracim.models.auth.User",
                    "models.User",
                    "asgard.models.agenAgent",
                    "bool",
                    "str",
                    "bytes",
                    "server.models.User"
                ]
            }
        }
    },
    "authark-master/authark/application/operation/managers/procedure_manager.py": {
        "ProcedureManager.__init__": {
            "name": "__init__",
            "location": 19,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auth_provider": [
                    "bool",
                    "dict",
                    "Optional[List]",
                    "List[Tuple[int, int]]",
                    "Optional[str]",
                    "str"
                ],
                "user_repository": [
                    "str",
                    "int",
                    "domain.common.RecordList",
                    "List[domain.models.User]",
                    "Optional[int]",
                    "User"
                ],
                "enrollment_service": [
                    "bool",
                    "dict",
                    "Optional[List]",
                    "List[Tuple[int, int]]",
                    "Optional[str]",
                    "str"
                ],
                "verification_service": [
                    "bool",
                    "dict",
                    "Optional[List]",
                    "List[Tuple[int, int]]",
                    "Optional[str]",
                    "str"
                ],
                "identity_service": [
                    "bool",
                    "dict",
                    "Optional[List]",
                    "List[Tuple[int, int]]",
                    "Optional[str]",
                    "str"
                ],
                "plan_supplier": [
                    "bool",
                    "dict",
                    "Optional[List]",
                    "List[Tuple[int, int]]",
                    "Optional[str]",
                    "str"
                ],
                "tenant_supplier": [
                    "bool",
                    "dict",
                    "Optional[List]",
                    "List[Tuple[int, int]]",
                    "Optional[str]",
                    "str"
                ],
                "config": [
                    "dict",
                    "Dict[str, Optional[str]]",
                    "str",
                    "bool",
                    "Callable[[], str]"
                ],
                "access_service": [
                    "bool",
                    "dict",
                    "Optional[List]",
                    "List[Tuple[int, int]]",
                    "Optional[str]",
                    "str"
                ],
                "dominion_repository": [
                    "bool",
                    "dict",
                    "Optional[List]",
                    "List[Tuple[int, int]]",
                    "Optional[str]",
                    "str"
                ],
                "refresh_token_service": [
                    "zerver.models.UserProfile",
                    "Optional[bool]",
                    "Callable",
                    "bool",
                    "Callable[[], T]",
                    "users.models.User",
                    "Dict[str, Dict[str, Any]]"
                ],
                "credential_repository": [
                    "bool",
                    "dict",
                    "Optional[List]",
                    "List[Tuple[int, int]]",
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "authark-master/authark/application/operation/managers/security_manager.py": {
        "SecurityManager.__init__": {
            "name": "__init__",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "restriction_repository": [
                    "str",
                    "Mapping[str, Any]",
                    "dict"
                ],
                "policy_repository": [
                    "str",
                    "Mapping[str, Any]",
                    "dict"
                ]
            }
        }
    },
    "authark-master/authark/application/operation/managers/session_manager.py": {
        "SessionManager.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "auth_provider": [
                    "\"Step\"",
                    "bool",
                    "str",
                    "Mapping[str, Any]"
                ]
            }
        },
        "SessionManager.get_user": {
            "name": "get_user",
            "location": 10,
            "return": [
                "List[str]",
                "bool",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "SessionManager.set_user": {
            "name": "set_user",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "entry": [
                    "int",
                    "dict",
                    "Exception",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "authark-master/authark/application/operation/managers/setup_manager.py": {
        "SetupManager.__init__": {
            "name": "__init__",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "setup_supplier": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "authark-master/authark/application/operation/managers/tenant_manager.py": {
        "TenantManager.__init__": {
            "name": "__init__",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "tenant_supplier": [
                    "bool",
                    "str",
                    "Optional[Dict]",
                    "List[str]",
                    "Sequence[str]",
                    "int",
                    "list"
                ]
            }
        }
    },
    "authark-master/authark/application/operation/managers/__init__.py": {},
    "authark-master/authark/integration/__init__.py": {},
    "authark-master/authark/integration/core/__init__.py": {},
    "authark-master/authark/integration/core/common/config.py": {
        "sanitize": {
            "name": "sanitize",
            "location": 118,
            "return": [
                "Mapping",
                "Dict[str, str]",
                "Dict[str, Any]",
                "Dict[str, List[Any]]",
                "Dict[str, float]"
            ],
            "arguments": {
                "config": [
                    "dict",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "authark-master/authark/integration/core/common/exceptions.py": {},
    "authark-master/authark/integration/core/common/__init__.py": {},
    "authark-master/authark/integration/core/data/__init__.py": {},
    "authark-master/authark/integration/core/data/json/json_import_service.py": {
        "JsonImportService.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "hash_service": [
                    "int",
                    "django.db.models.QuerySet",
                    "Callable"
                ]
            }
        },
        "JsonImportService.import_users": {
            "name": "import_users",
            "location": 12,
            "return": [
                "zerver.models.Realm",
                "str",
                "models.User",
                "application.domain.repositories.RoleRepository",
                "application.domain.repositories.DominionRepository"
            ],
            "arguments": {
                "self": [],
                "filepath": [
                    "str"
                ],
                "source": [
                    "str",
                    "ebl.corpus.domain.texstr",
                    "List[Union[Any, Any, Any]]",
                    "Pattern[str]",
                    "List[Union[Any, Any, Any, Any]]",
                    "Iterator[str]"
                ],
                "password_field": [
                    "str"
                ]
            }
        },
        "JsonImportService._users_roles": {
            "name": "_users_roles",
            "location": 42,
            "return": [
                "List[str]",
                "List[Dict]",
                "Union[str, List[Any]]",
                "str",
                "List[Tuple[str, str]]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "authorization": [
                    "dict",
                    "Mapping[str, Any]",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "authark-master/authark/integration/core/data/json/json_model_repositories.py": {
        "JsonCredentialRepository.__init__": {
            "name": "__init__",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_path": [
                    "str",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.TenantProvider"
                ],
                "parser": [
                    "str",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.TenantProvider"
                ],
                "auth_provider": [
                    "str",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.TenantProvider"
                ],
                "collection": [
                    "str",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.TenantProvider"
                ]
            }
        },
        "JsonDominionRepository.__init__": {
            "name": "__init__",
            "location": 24,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_path": [
                    "str",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.TenantProvider"
                ],
                "parser": [
                    "str",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.TenantProvider"
                ],
                "auth_provider": [
                    "str",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.TenantProvider"
                ],
                "collection": [
                    "str",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.TenantProvider"
                ]
            }
        },
        "JsonRankingRepository.__init__": {
            "name": "__init__",
            "location": 34,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_path": [
                    "str",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.TenantProvider"
                ],
                "parser": [
                    "str",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.TenantProvider"
                ],
                "auth_provider": [
                    "str",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.TenantProvider"
                ],
                "collection": [
                    "str",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.TenantProvider"
                ]
            }
        },
        "JsonRoleRepository.__init__": {
            "name": "__init__",
            "location": 44,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_path": [
                    "str",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.TenantProvider"
                ],
                "parser": [
                    "str",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.TenantProvider"
                ],
                "auth_provider": [
                    "str",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.TenantProvider"
                ],
                "collection": [
                    "str",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.TenantProvider"
                ]
            }
        },
        "JsonRestrictionRepository.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_path": [
                    "str",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.TenantProvider"
                ],
                "parser": [
                    "str",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.TenantProvider"
                ],
                "auth_provider": [
                    "str",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.TenantProvider"
                ],
                "collection": [
                    "str",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.TenantProvider"
                ]
            }
        },
        "JsonPolicyRepository.__init__": {
            "name": "__init__",
            "location": 64,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_path": [
                    "str",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.TenantProvider"
                ],
                "parser": [
                    "str",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.TenantProvider"
                ],
                "auth_provider": [
                    "str",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.TenantProvider"
                ],
                "collection": [
                    "str",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.TenantProvider"
                ]
            }
        },
        "JsonUserRepository.__init__": {
            "name": "__init__",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "data_path": [
                    "str",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.TenantProvider"
                ],
                "parser": [
                    "str",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.TenantProvider"
                ],
                "auth_provider": [
                    "str",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.TenantProvider"
                ],
                "collection": [
                    "str",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "application.domain.common.TenantProvider"
                ]
            }
        }
    },
    "authark-master/authark/integration/core/data/json/__init__.py": {},
    "authark-master/authark/integration/core/oauth/oauth_identity_service.py": {
        "OauthIdentityService.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": []
            }
        },
        "OauthIdentityService.__del__": {
            "name": "__del__",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "authark-master/authark/integration/core/oauth/__init__.py": {},
    "authark-master/authark/integration/core/suppliers/__init__.py": {},
    "authark-master/authark/integration/core/suppliers/crypto/passlib_hash_service.py": {
        "PasslibHashService.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PasslibHashService.generate_hash": {
            "name": "generate_hash",
            "location": 11,
            "return": [
                "Dict[str, int]",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "value": [
                    "str",
                    "bool",
                    "Union[str]",
                    "T"
                ]
            }
        },
        "PasslibHashService.verify_password": {
            "name": "verify_password",
            "location": 14,
            "return": [
                "str",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "password": [
                    "str",
                    "bytes",
                    "int"
                ],
                "hash": [
                    "str",
                    "bytes",
                    "int"
                ]
            }
        }
    },
    "authark-master/authark/integration/core/suppliers/crypto/pyjwt_token_service.py": {
        "PyJWTTokenService.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "secret": [
                    "bytes",
                    "List[str]",
                    "str",
                    "int",
                    "bool",
                    "dict",
                    "List[Tuple[str, int]]"
                ],
                "algorithm": [
                    "str",
                    "Union[str, Dict[str, Any]]"
                ],
                "lifetime": [
                    "str",
                    "Union[str, Dict[str, Any]]"
                ],
                "threshold": [
                    "str",
                    "Union[str, Dict[str, Any]]"
                ]
            }
        },
        "PyJWTTokenService.generate_token": {
            "name": "generate_token",
            "location": 19,
            "return": [
                "dict",
                "bool",
                "Iterable[str]",
                "str"
            ],
            "arguments": {
                "self": [],
                "payload": [
                    "int",
                    "str",
                    "Set[str]",
                    "Dict[int, Any]"
                ]
            }
        },
        "PyJWTTokenService.decode": {
            "name": "decode",
            "location": 26,
            "return": [
                "str",
                "ebl.transliteration.domain.language.Language",
                "salon.models.Stylist",
                "int",
                "dict"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "int"
                ]
            }
        },
        "PyJWTTokenService.valid": {
            "name": "valid",
            "location": 30,
            "return": [
                "bool"
            ],
            "arguments": {
                "self": [],
                "token": [
                    "bool",
                    "tuple",
                    "Set[str]"
                ]
            }
        }
    },
    "authark-master/authark/integration/core/suppliers/crypto/__init__.py": {},
    "authark-master/authark/integration/core/suppliers/plan/json_plan_supplier.py": {
        "JsonPlanSupplier.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "path": [
                    "str",
                    "Optional[int]",
                    "Tuple[int, int]",
                    "int"
                ]
            }
        }
    },
    "authark-master/authark/integration/core/suppliers/plan/__init__.py": {},
    "authark-master/authark/integration/core/suppliers/setup/json_setup_supplier.py": {
        "JsonSetupSupplier.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "zones": [
                    "int",
                    "bool",
                    "tuple",
                    "str"
                ]
            }
        },
        "JsonSetupSupplier.setup": {
            "name": "setup",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "authark-master/authark/integration/core/suppliers/setup/__init__.py": {},
    "authark-master/authark/integration/core/suppliers/template/jinja_template_supplier.py": {
        "JinjaTemplateSupplier.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "paths": [
                    "str",
                    "Iterable[pathlib.Path]",
                    "bool",
                    "list"
                ]
            }
        },
        "JinjaTemplateSupplier.render": {
            "name": "render",
            "location": 17,
            "return": [
                "str",
                "float",
                "bool"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "Optional[List[str]]"
                ],
                "context": [
                    "str",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "authark-master/authark/integration/core/suppliers/template/template_supplier.py": {
        "TemplateSupplier.render": {
            "name": "render",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "template": [
                    "str",
                    "list",
                    "Optional[str]"
                ],
                "context": [
                    "str",
                    "list",
                    "Optional[str]"
                ]
            }
        },
        "MemoryTemplateSupplier.render": {
            "name": "render",
            "location": 12,
            "return": [
                "str",
                "bool",
                "Dict[str, str]",
                "Optional[str]"
            ],
            "arguments": {
                "self": [],
                "template": [
                    "int",
                    "str"
                ],
                "context": [
                    "int",
                    "str"
                ]
            }
        }
    },
    "authark-master/authark/integration/core/suppliers/template/__init__.py": {},
    "authark-master/authark/integration/core/suppliers/tenancy/json_tenant_supplier.py": {
        "JsonTenantSupplier.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "catalog_path": [
                    "str",
                    "List[str]",
                    "pathlib.Path"
                ],
                "zones": [
                    "pathlib.Path",
                    "pathlib.PurePath",
                    "bool"
                ],
                "directory_template": [
                    "pathlib.Path",
                    "pathlib.PurePath",
                    "bool"
                ]
            }
        }
    },
    "authark-master/authark/integration/core/suppliers/tenancy/__init__.py": {},
    "authark-master/authark/integration/factories/base_factory.py": {
        "BaseFactory.__init__": {
            "name": "__init__",
            "location": 37,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "sphinx.config.Config",
                    "model.Config",
                    "virgene.config.Config",
                    "config.Config"
                ]
            }
        },
        "BaseFactory.query_parser": {
            "name": "query_parser",
            "location": 49,
            "return": [
                "core_lib.core.parser.ParsingContext",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFactory.auth_provider": {
            "name": "auth_provider",
            "location": 52,
            "return": [
                "str",
                "bytes",
                "Callable"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFactory.user_repository": {
            "name": "user_repository",
            "location": 55,
            "return": [
                "str",
                "int",
                "bool"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ],
                "auth_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ]
            }
        },
        "BaseFactory.credential_repository": {
            "name": "credential_repository",
            "location": 62,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "type"
                ],
                "auth_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "type"
                ]
            }
        },
        "BaseFactory.dominion_repository": {
            "name": "dominion_repository",
            "location": 69,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "type"
                ],
                "auth_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "type"
                ]
            }
        },
        "BaseFactory.role_repository": {
            "name": "role_repository",
            "location": 76,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "type"
                ],
                "auth_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "type"
                ]
            }
        },
        "BaseFactory.restriction_repository": {
            "name": "restriction_repository",
            "location": 83,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "type"
                ],
                "auth_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "type"
                ]
            }
        },
        "BaseFactory.policy_repository": {
            "name": "policy_repository",
            "location": 90,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "type"
                ],
                "auth_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "type"
                ]
            }
        },
        "BaseFactory.ranking_repository": {
            "name": "ranking_repository",
            "location": 97,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "type"
                ],
                "auth_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "type"
                ]
            }
        },
        "BaseFactory.hash_service": {
            "name": "hash_service",
            "location": 106,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFactory.access_token_service": {
            "name": "access_token_service",
            "location": 109,
            "return": [
                "allennlp.common.util.JsonDict",
                "str",
                "Dict[str, str]",
                "dict"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFactory.refresh_token_service": {
            "name": "refresh_token_service",
            "location": 112,
            "return": [
                "str",
                "int",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFactory.verification_token_service": {
            "name": "verification_token_service",
            "location": 115,
            "return": [
                "str",
                "int",
                "list"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFactory.import_service": {
            "name": "import_service",
            "location": 118,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "hash_service": [
                    "bytes",
                    "Callable",
                    "bool",
                    "str"
                ]
            }
        },
        "BaseFactory.identity_service": {
            "name": "identity_service",
            "location": 121,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFactory.access_service": {
            "name": "access_service",
            "location": 124,
            "return": [
                "str",
                "Union[str, bytes]",
                "bool",
                "tuple",
                "int",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "ranking_repository": [
                    "float",
                    "int",
                    "bool",
                    "Optional[List[Any]]"
                ],
                "role_repository": [
                    "float",
                    "int",
                    "bool",
                    "Optional[List[Any]]"
                ],
                "dominion_repository": [
                    "float",
                    "int",
                    "bool",
                    "Optional[List[Any]]"
                ],
                "token_service": [
                    "float",
                    "int",
                    "bool",
                    "Optional[List[Any]]"
                ]
            }
        },
        "BaseFactory.verification_service": {
            "name": "verification_service",
            "location": 134,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "self": [],
                "user_repository": [
                    "str",
                    "int",
                    "Optional[int]",
                    "domain.common.RecordList",
                    "List[domain.models.User]",
                    "bool"
                ],
                "token_service": [
                    "str",
                    "int",
                    "Optional[int]",
                    "domain.common.RecordList",
                    "List[domain.models.User]",
                    "bool"
                ]
            }
        },
        "BaseFactory.enrollment_service": {
            "name": "enrollment_service",
            "location": 141,
            "return": [
                "str",
                "bool",
                "Optional[int]"
            ],
            "arguments": {
                "self": [],
                "user_repository": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "domain.common.RecordList"
                ],
                "credential_repository": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "domain.common.RecordList"
                ],
                "hash_service": [
                    "int",
                    "Optional[str]",
                    "bool",
                    "domain.common.RecordList"
                ],
                "token_service": [
                    "bool",
                    "Callable[[], Any]",
                    "bytes",
                    "int"
                ]
            }
        },
        "BaseFactory.plan_supplier": {
            "name": "plan_supplier",
            "location": 152,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFactory.auth_manager": {
            "name": "auth_manager",
            "location": 157,
            "return": [
                "str",
                "dict",
                "common.TestingContext"
            ],
            "arguments": {
                "self": [],
                "auth_provider": [
                    "application.domain.repositories.UserRepository",
                    "application.domain.repositories.RoleRepository",
                    "application.domain.repositories.CredentialRepository",
                    "application.domain.repositories.DominionRepository",
                    "application.domain.repositories.RankingRepository",
                    "Iterable[Sequence[str]]"
                ],
                "user_repository": [
                    "application.domain.repositories.UserRepository",
                    "application.domain.repositories.RoleRepository",
                    "application.domain.repositories.CredentialRepository",
                    "application.domain.repositories.DominionRepository",
                    "application.domain.repositories.RankingRepository",
                    "Iterable[Sequence[str]]"
                ],
                "credential_repository": [
                    "application.domain.repositories.UserRepository",
                    "application.domain.repositories.RoleRepository",
                    "application.domain.repositories.CredentialRepository",
                    "application.domain.repositories.DominionRepository",
                    "application.domain.repositories.RankingRepository",
                    "Iterable[Sequence[str]]"
                ],
                "dominion_repository": [
                    "application.domain.repositories.UserRepository",
                    "application.domain.repositories.RoleRepository",
                    "application.domain.repositories.CredentialRepository",
                    "application.domain.repositories.DominionRepository",
                    "application.domain.repositories.RankingRepository",
                    "Iterable[Sequence[str]]"
                ],
                "hash_service": [
                    "application.domain.repositories.UserRepository",
                    "application.domain.repositories.RoleRepository",
                    "application.domain.repositories.CredentialRepository",
                    "application.domain.repositories.DominionRepository",
                    "application.domain.repositories.RankingRepository",
                    "Iterable[Sequence[str]]"
                ],
                "access_service": [
                    "application.domain.repositories.UserRepository",
                    "application.domain.repositories.RoleRepository",
                    "application.domain.repositories.CredentialRepository",
                    "application.domain.repositories.DominionRepository",
                    "application.domain.repositories.RankingRepository",
                    "Iterable[Sequence[str]]"
                ],
                "refresh_token_service": [
                    "application.domain.repositories.UserRepository",
                    "application.domain.repositories.RoleRepository",
                    "application.domain.repositories.CredentialRepository",
                    "application.domain.repositories.DominionRepository",
                    "application.domain.repositories.RankingRepository",
                    "Iterable[Sequence[str]]"
                ],
                "identity_service": [
                    "application.domain.repositories.UserRepository",
                    "application.domain.repositories.RoleRepository",
                    "application.domain.repositories.CredentialRepository",
                    "application.domain.repositories.DominionRepository",
                    "application.domain.repositories.RankingRepository",
                    "Iterable[Sequence[str]]"
                ],
                "tenant_supplier": [
                    "application.domain.repositories.UserRepository",
                    "application.domain.repositories.RoleRepository",
                    "application.domain.repositories.CredentialRepository",
                    "application.domain.repositories.DominionRepository",
                    "application.domain.repositories.RankingRepository",
                    "Iterable[Sequence[str]]"
                ]
            }
        },
        "BaseFactory.management_manager": {
            "name": "management_manager",
            "location": 174,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "user_repository": [
                    "application.domain.repositories.RoleRepository",
                    "application.domain.repositories.DominionRepository",
                    "application.domain.repositories.UserRepository",
                    "application.domain.repositories.RankingRepository",
                    "str"
                ],
                "dominion_repository": [
                    "application.domain.repositories.RoleRepository",
                    "application.domain.repositories.DominionRepository",
                    "application.domain.repositories.UserRepository",
                    "application.domain.repositories.RankingRepository",
                    "str"
                ],
                "role_repository": [
                    "application.domain.repositories.RoleRepository",
                    "application.domain.repositories.DominionRepository",
                    "application.domain.repositories.UserRepository",
                    "application.domain.repositories.RankingRepository",
                    "str"
                ],
                "ranking_repository": [
                    "application.domain.repositories.RoleRepository",
                    "application.domain.repositories.DominionRepository",
                    "application.domain.repositories.UserRepository",
                    "application.domain.repositories.RankingRepository",
                    "str"
                ]
            }
        },
        "BaseFactory.import_manager": {
            "name": "import_manager",
            "location": 184,
            "return": [
                "Dict[str, int]",
                "int",
                "Iterable[str]",
                "injectark.Injectark",
                "dict"
            ],
            "arguments": {
                "self": [],
                "import_service": [
                    "application.domain.repositories.UserRepository",
                    "application.domain.repositories.RoleRepository",
                    "application.domain.repositories.CredentialRepository",
                    "application.domain.repositories.DominionRepository",
                    "application.domain.repositories.RankingRepository",
                    "Dict[str, Any]"
                ],
                "user_repository": [
                    "application.domain.repositories.UserRepository",
                    "application.domain.repositories.RoleRepository",
                    "application.domain.repositories.CredentialRepository",
                    "application.domain.repositories.DominionRepository",
                    "application.domain.repositories.RankingRepository",
                    "Dict[str, Any]"
                ],
                "credential_repository": [
                    "application.domain.repositories.UserRepository",
                    "application.domain.repositories.RoleRepository",
                    "application.domain.repositories.CredentialRepository",
                    "application.domain.repositories.DominionRepository",
                    "application.domain.repositories.RankingRepository",
                    "Dict[str, Any]"
                ],
                "role_repository": [
                    "application.domain.repositories.UserRepository",
                    "application.domain.repositories.RoleRepository",
                    "application.domain.repositories.CredentialRepository",
                    "application.domain.repositories.DominionRepository",
                    "application.domain.repositories.RankingRepository",
                    "Dict[str, Any]"
                ],
                "ranking_repository": [
                    "application.domain.repositories.UserRepository",
                    "application.domain.repositories.RoleRepository",
                    "application.domain.repositories.CredentialRepository",
                    "application.domain.repositories.DominionRepository",
                    "application.domain.repositories.RankingRepository",
                    "Dict[str, Any]"
                ],
                "dominion_repository": [
                    "application.domain.repositories.UserRepository",
                    "application.domain.repositories.RoleRepository",
                    "application.domain.repositories.CredentialRepository",
                    "application.domain.repositories.DominionRepository",
                    "application.domain.repositories.RankingRepository",
                    "Dict[str, Any]"
                ]
            }
        },
        "BaseFactory.session_manager": {
            "name": "session_manager",
            "location": 197,
            "return": [
                "str",
                "dict",
                "Exception",
                "tartare.core.models.Job",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "auth_provider": [
                    "str",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.TenantProvider"
                ]
            }
        },
        "BaseFactory.security_manager": {
            "name": "security_manager",
            "location": 202,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "restriction_repository": [
                    "int",
                    "prosodia.core.grammar.Language",
                    "Callable[[], None]"
                ],
                "policy_repository": [
                    "int",
                    "prosodia.core.grammar.Language",
                    "Callable[[], None]"
                ]
            }
        },
        "BaseFactory.procedure_manager": {
            "name": "procedure_manager",
            "location": 208,
            "return": [
                "List[int]",
                "str",
                "Callable",
                "bool",
                "bytes"
            ],
            "arguments": {
                "self": [],
                "auth_provider": [
                    "authark.application.domain.common.User",
                    "str"
                ],
                "user_repository": [
                    "authark.application.domain.common.User",
                    "str"
                ],
                "enrollment_service": [
                    "authark.application.domain.common.User",
                    "str"
                ],
                "verification_service": [
                    "authark.application.domain.common.User",
                    "str"
                ],
                "identity_service": [
                    "authark.application.domain.common.User",
                    "str"
                ],
                "plan_supplier": [
                    "authark.application.domain.common.User",
                    "str"
                ],
                "tenant_supplier": [
                    "authark.application.domain.common.User",
                    "str"
                ],
                "access_service": [
                    "authark.application.domain.common.User",
                    "str"
                ],
                "dominion_repository": [
                    "authark.application.domain.common.User",
                    "str"
                ],
                "refresh_token_service": [
                    "authark.application.domain.common.User",
                    "str"
                ],
                "credential_repository": [
                    "authark.application.domain.common.User",
                    "str"
                ]
            }
        },
        "BaseFactory.tenant_manager": {
            "name": "tenant_manager",
            "location": 228,
            "return": [
                "str",
                "Tuple[str, str]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "tenant_supplier": [
                    "str",
                    "dict"
                ]
            }
        },
        "BaseFactory.setup_manager": {
            "name": "setup_manager",
            "location": 233,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "setup_supplier": [
                    "int",
                    "prosodia.core.grammar.Language",
                    "Callable[[], None]"
                ]
            }
        },
        "BaseFactory.standard_informer": {
            "name": "standard_informer",
            "location": 240,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "self": [],
                "user_repository": [
                    "Optional[int]",
                    "domain.common.RecordList",
                    "List[domain.models.User]",
                    "str",
                    "int"
                ],
                "credential_repository": [
                    "Optional[int]",
                    "domain.common.RecordList",
                    "List[domain.models.User]",
                    "str",
                    "int"
                ],
                "dominion_repository": [
                    "Optional[int]",
                    "domain.common.RecordList",
                    "List[domain.models.User]",
                    "str",
                    "int"
                ],
                "role_repository": [
                    "Optional[int]",
                    "domain.common.RecordList",
                    "List[domain.models.User]",
                    "str",
                    "int"
                ],
                "restriction_repository": [
                    "Optional[int]",
                    "domain.common.RecordList",
                    "List[domain.models.User]",
                    "str",
                    "int"
                ],
                "policy_repository": [
                    "Optional[int]",
                    "domain.common.RecordList",
                    "List[domain.models.User]",
                    "str",
                    "int"
                ],
                "ranking_repository": [
                    "Optional[int]",
                    "domain.common.RecordList",
                    "List[domain.models.User]",
                    "str",
                    "int"
                ]
            }
        },
        "BaseFactory.composing_informer": {
            "name": "composing_informer",
            "location": 255,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": [],
                "dominion_repository": [
                    "int",
                    "Callable",
                    "str"
                ],
                "role_repository": [
                    "int",
                    "Callable",
                    "str"
                ],
                "ranking_repository": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "BaseFactory.tenant_informer": {
            "name": "tenant_informer",
            "location": 263,
            "return": [
                "str",
                "Tuple[str, str]",
                "List[str]",
                "bool"
            ],
            "arguments": {
                "self": [],
                "tenant_supplier": [
                    "str",
                    "Dict[str, Tuple[str, str]]"
                ]
            }
        },
        "BaseFactory.tenant_supplier": {
            "name": "tenant_supplier",
            "location": 270,
            "return": [
                "int",
                "bytes",
                "tuple"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFactory.setup_supplier": {
            "name": "setup_supplier",
            "location": 273,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "BaseFactory.template_supplier": {
            "name": "template_supplier",
            "location": 276,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "authark-master/authark/integration/factories/check_factory.py": {
        "CheckFactory.__init__": {
            "name": "__init__",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "ezscrape.scraping.core.ScrapeConfig",
                    "core.common.Config",
                    "pricemonitor.config.Config"
                ]
            }
        },
        "CheckFactory.auth_provider": {
            "name": "auth_provider",
            "location": 28,
            "return": [
                "str",
                "bool",
                "Optional[zerver.models.Realm]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckFactory.tenant_supplier": {
            "name": "tenant_supplier",
            "location": 35,
            "return": [
                "Iterable[str]",
                "str",
                "Iterable[T]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckFactory.hash_service": {
            "name": "hash_service",
            "location": 44,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckFactory.user_repository": {
            "name": "user_repository",
            "location": 47,
            "return": [
                "models.Course",
                "zam_repondeur.models.Dossier",
                "str",
                "metaswitch_tinder.database.models.User",
                "int",
                "abilian.core.models.subjects.User"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ],
                "auth_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ]
            }
        },
        "CheckFactory.credential_repository": {
            "name": "credential_repository",
            "location": 65,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "type"
                ],
                "auth_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "type"
                ]
            }
        },
        "CheckFactory.role_repository": {
            "name": "role_repository",
            "location": 81,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "type"
                ],
                "auth_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "type"
                ]
            }
        },
        "CheckFactory.ranking_repository": {
            "name": "ranking_repository",
            "location": 93,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "type"
                ],
                "auth_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "type"
                ]
            }
        },
        "CheckFactory.restriction_repository": {
            "name": "restriction_repository",
            "location": 105,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "type"
                ],
                "auth_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "type"
                ]
            }
        },
        "CheckFactory.policy_repository": {
            "name": "policy_repository",
            "location": 118,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "type"
                ],
                "auth_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "type"
                ]
            }
        },
        "CheckFactory.dominion_repository": {
            "name": "dominion_repository",
            "location": 130,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "type"
                ],
                "auth_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "type"
                ]
            }
        },
        "CheckFactory.access_token_service": {
            "name": "access_token_service",
            "location": 141,
            "return": [
                "int",
                "Optional[List[str]]",
                "Dict[str, float]",
                "Dict[str, str]",
                "tartare.core.models.Job"
            ],
            "arguments": {
                "self": []
            }
        },
        "CheckFactory.access_service": {
            "name": "access_service",
            "location": 146,
            "return": [
                "models.Subtask",
                "str",
                "Union[str, bytes]",
                "bool",
                "tuple",
                "int",
                "Optional[Union[str, Any]]"
            ],
            "arguments": {
                "self": [],
                "ranking_repository": [
                    "float",
                    "int",
                    "bool",
                    "Optional[List[Any]]"
                ],
                "role_repository": [
                    "float",
                    "int",
                    "bool",
                    "Optional[List[Any]]"
                ],
                "dominion_repository": [
                    "float",
                    "int",
                    "bool",
                    "Optional[List[Any]]"
                ],
                "token_service": [
                    "float",
                    "int",
                    "bool",
                    "Optional[List[Any]]"
                ]
            }
        }
    },
    "authark-master/authark/integration/factories/crypto_factory.py": {
        "CryptoFactory.__init__": {
            "name": "__init__",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "Dict[str, Any]",
                    "Callable",
                    "_pytesconfig.Config"
                ]
            }
        },
        "CryptoFactory.hash_service": {
            "name": "hash_service",
            "location": 27,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CryptoFactory.token_service": {
            "name": "token_service",
            "location": 30,
            "return": [
                "str",
                "bool",
                "simulation.core.common.Structure"
            ],
            "arguments": {
                "self": []
            }
        },
        "CryptoFactory.access_token_service": {
            "name": "access_token_service",
            "location": 36,
            "return": [
                "Optional[Dict[str, Any]]",
                "bool",
                "Optional[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "CryptoFactory.verification_token_service": {
            "name": "verification_token_service",
            "location": 42,
            "return": [
                "Sequence[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        },
        "CryptoFactory.refresh_token_service": {
            "name": "refresh_token_service",
            "location": 48,
            "return": [
                "Sequence[str]",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "authark-master/authark/integration/factories/json_factory.py": {
        "JsonFactory.__init__": {
            "name": "__init__",
            "location": 23,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "sphinx.config.Config",
                    "_pytesconfig.Config",
                    "config.Config"
                ]
            }
        },
        "JsonFactory.user_repository": {
            "name": "user_repository",
            "location": 29,
            "return": [
                "str",
                "Dict[str, Any]"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "bool",
                    "type"
                ],
                "auth_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser",
                    "bool",
                    "type"
                ]
            }
        },
        "JsonFactory.credential_repository": {
            "name": "credential_repository",
            "location": 36,
            "return": [
                "List[int]",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "bool",
                    "type",
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ],
                "auth_provider": [
                    "bool",
                    "type",
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ]
            }
        },
        "JsonFactory.dominion_repository": {
            "name": "dominion_repository",
            "location": 43,
            "return": [
                "List[int]",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "bool",
                    "type",
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ],
                "auth_provider": [
                    "bool",
                    "type",
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ]
            }
        },
        "JsonFactory.role_repository": {
            "name": "role_repository",
            "location": 50,
            "return": [
                "List[int]",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "bool",
                    "type",
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ],
                "auth_provider": [
                    "bool",
                    "type",
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ]
            }
        },
        "JsonFactory.restriction_repository": {
            "name": "restriction_repository",
            "location": 57,
            "return": [
                "List[int]",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "bool",
                    "type",
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ],
                "auth_provider": [
                    "bool",
                    "type",
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ]
            }
        },
        "JsonFactory.policy_repository": {
            "name": "policy_repository",
            "location": 64,
            "return": [
                "List[int]",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "bool",
                    "type",
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ],
                "auth_provider": [
                    "bool",
                    "type",
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ]
            }
        },
        "JsonFactory.ranking_repository": {
            "name": "ranking_repository",
            "location": 71,
            "return": [
                "List[int]",
                "Callable",
                "bool"
            ],
            "arguments": {
                "self": [],
                "query_parser": [
                    "bool",
                    "type",
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ],
                "auth_provider": [
                    "bool",
                    "type",
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ]
            }
        },
        "JsonFactory.import_service": {
            "name": "import_service",
            "location": 78,
            "return": [
                "str",
                "DefaultDict[int, List[Any]]",
                "OrderedDict"
            ],
            "arguments": {
                "self": [],
                "hash_service": [
                    "application.domain.services.HashService",
                    "Callable",
                    "str",
                    "bool",
                    "bytes",
                    "memoryview"
                ]
            }
        },
        "JsonFactory.tenant_supplier": {
            "name": "tenant_supplier",
            "location": 81,
            "return": [
                "Optional[str]",
                "str",
                "List[str]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonFactory.setup_supplier": {
            "name": "setup_supplier",
            "location": 87,
            "return": [
                "bool",
                "Callable",
                "str",
                "Callable[..., None]",
                "Optional[Any]"
            ],
            "arguments": {
                "self": []
            }
        },
        "JsonFactory.plan_supplier": {
            "name": "plan_supplier",
            "location": 92,
            "return": [
                "str"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "authark-master/authark/integration/factories/oauth_factory.py": {
        "OauthFactory.identity_service": {
            "name": "identity_service",
            "location": 7,
            "return": [
                "str",
                "Optional[Any]",
                "Iterable",
                "Dict[str, Any]",
                "bool",
                "Callable[..., None]"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "authark-master/authark/integration/factories/web_factory.py": {
        "WebFactory.__init__": {
            "name": "__init__",
            "location": 7,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict",
                    "backup.config.Config"
                ]
            }
        },
        "WebFactory.template_supplier": {
            "name": "template_supplier",
            "location": 14,
            "return": [
                "str",
                "core.models.Recipe"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "authark-master/authark/integration/factories/__init__.py": {},
    "authark-master/authark/presentation/__init__.py": {},
    "authark-master/authark/presentation/platform/__init__.py": {},
    "authark-master/authark/presentation/platform/rest/rest.py": {
        "RestApplication.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "injector": [
                    "bool",
                    "Dict[str, Any]",
                    "Callable[[Any, Any], bool]"
                ]
            }
        },
        "RestApplication._setup": {
            "name": "_setup",
            "location": 21,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestApplication._create_api": {
            "name": "_create_api",
            "location": 39,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spec": []
            }
        }
    },
    "authark-master/authark/presentation/platform/rest/__init__.py": {},
    "authark-master/authark/presentation/platform/rest/helpers/format.py": {
        "parse_domain": {
            "name": "parse_domain",
            "location": 6,
            "return": [
                "int",
                "str",
                "Mapping[str, Sequence[str]]",
                "bool"
            ],
            "arguments": {
                "filter": [
                    "Mapping",
                    "Callable",
                    "Dict[str, Any]",
                    "Optional[Dict[str, str]]"
                ]
            }
        },
        "camel_to_snake": {
            "name": "camel_to_snake",
            "location": 22,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "value": [
                    "str",
                    "Union[str, bytes]",
                    "bytes"
                ]
            }
        }
    },
    "authark-master/authark/presentation/platform/rest/helpers/request.py": {
        "get_request_filter": {
            "name": "get_request_filter",
            "location": 7,
            "return": [
                "str",
                "int",
                "bool",
                "Dict[str, Any]"
            ],
            "arguments": {
                "request": [
                    "aiohttp.web.Request"
                ]
            }
        }
    },
    "authark-master/authark/presentation/platform/rest/helpers/__init__.py": {},
    "authark-master/authark/presentation/platform/rest/middleware/authenticate.py": {
        "authenticate_middleware_factory": {
            "name": "authenticate_middleware_factory",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "injector": [
                    "int",
                    "str",
                    "Iterable['Context']",
                    "dict",
                    "bool"
                ]
            }
        }
    },
    "authark-master/authark/presentation/platform/rest/middleware/errors.py": {
        "errors_middleware_factory": {
            "name": "errors_middleware_factory",
            "location": 9,
            "return": [
                "str",
                "int",
                "set"
            ],
            "arguments": {
                "injector": [
                    "str",
                    "injectark.Injectark",
                    "bool",
                    "List[object]"
                ]
            }
        }
    },
    "authark-master/authark/presentation/platform/rest/middleware/__init__.py": {
        "middlewares": {
            "name": "middlewares",
            "location": 8,
            "return": [
                "str",
                "int",
                "Set[str]"
            ],
            "arguments": {
                "injector": [
                    "injectark.Injectark",
                    "Optional[str]",
                    "int",
                    "str"
                ]
            }
        }
    },
    "authark-master/authark/presentation/platform/rest/resources/operations.py": {
        "operations": {
            "name": "operations",
            "location": 2,
            "return": [
                "int",
                "bool"
            ],
            "arguments": {}
        }
    },
    "authark-master/authark/presentation/platform/rest/resources/resource.py": {
        "Resource.__init__": {
            "name": "__init__",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spec": [
                    "str",
                    "List[str]"
                ],
                "injector": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "Resource.resolve_operation": {
            "name": "resolve_operation",
            "location": 79,
            "return": [
                "int",
                "str",
                "bool"
            ],
            "arguments": {
                "self": [],
                "operationId": [
                    "str",
                    "Optional[str]",
                    "int"
                ],
                "action": [
                    "int",
                    "str",
                    "Set[str]"
                ]
            }
        }
    },
    "authark-master/authark/presentation/platform/rest/resources/root.py": {
        "RootResource.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "spec": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "authark-master/authark/presentation/platform/rest/resources/__init__.py": {},
    "authark-master/authark/presentation/system/__init__.py": {},
    "authark-master/authark/presentation/system/console/main.py": {
        "ConsoleApplication.setup": {
            "name": "setup",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsoleApplication.build": {
            "name": "build",
            "location": 27,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsoleApplication._build_status": {
            "name": "_build_status",
            "location": 53,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "ConsoleApplication._build_menu": {
            "name": "_build_menu",
            "location": 58,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "authark-master/authark/presentation/system/console/__init__.py": {},
    "authark-master/authark/presentation/system/console/screens/status.py": {
        "StatusScreen.setup": {
            "name": "setup",
            "location": 6,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "StatusScreen.build": {
            "name": "build",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TenantsModal.setup": {
            "name": "setup",
            "location": 52,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TenantsModal.build": {
            "name": "build",
            "location": 56,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "TenantProvisionModal.setup": {
            "name": "setup",
            "location": 76,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "TenantProvisionModal.build": {
            "name": "build",
            "location": 80,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "authark-master/authark/presentation/system/console/screens/__init__.py": {},
    "authark-master/authark/presentation/system/console/screens/dominions/dominions.py": {
        "DominionsScreen.setup": {
            "name": "setup",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DominionsScreen.build": {
            "name": "build",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DominionDetailsModal.setup": {
            "name": "setup",
            "location": 61,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DominionDetailsModal.build": {
            "name": "build",
            "location": 67,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "authark-master/authark/presentation/system/console/screens/dominions/__init__.py": {},
    "authark-master/authark/presentation/system/console/screens/roles/policies.py": {
        "PoliciesModal.setup": {
            "name": "setup",
            "location": 8,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PoliciesModal.build": {
            "name": "build",
            "location": 16,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolicyDetailsModal.setup": {
            "name": "setup",
            "location": 77,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "PolicyDetailsModal.build": {
            "name": "build",
            "location": 83,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "authark-master/authark/presentation/system/console/screens/roles/restrictions.py": {
        "RestrictionsModal.setup": {
            "name": "setup",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestrictionsModal.build": {
            "name": "build",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestrictionDetailsModal.setup": {
            "name": "setup",
            "location": 70,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RestrictionDetailsModal.build": {
            "name": "build",
            "location": 76,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "authark-master/authark/presentation/system/console/screens/roles/roles.py": {
        "RolesScreen.setup": {
            "name": "setup",
            "location": 9,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RolesScreen.build": {
            "name": "build",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "DominionsModal.setup": {
            "name": "setup",
            "location": 105,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "DominionsModal.build": {
            "name": "build",
            "location": 109,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoleDetailsModal.setup": {
            "name": "setup",
            "location": 130,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoleDetailsModal.build": {
            "name": "build",
            "location": 136,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersSelectionModal.setup": {
            "name": "setup",
            "location": 197,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersSelectionModal.build": {
            "name": "build",
            "location": 207,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersSelectionModal._update_totals": {
            "name": "_update_totals",
            "location": 339,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersSelectionModal._switch": {
            "name": "_switch",
            "location": 345,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "item": [
                    "Optional[Dict[str, Any]]",
                    "dict",
                    "IO"
                ],
                "source": [
                    "str",
                    "Optional[Dict[str, Any]]"
                ],
                "target": [
                    "str",
                    "bytes",
                    "dict"
                ]
            }
        }
    },
    "authark-master/authark/presentation/system/console/screens/roles/__init__.py": {},
    "authark-master/authark/presentation/system/console/screens/users/credentials.py": {
        "CredentialsModal.setup": {
            "name": "setup",
            "location": 6,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "CredentialsModal.build": {
            "name": "build",
            "location": 13,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "authark-master/authark/presentation/system/console/screens/users/rankings.py": {
        "RankingsModal.setup": {
            "name": "setup",
            "location": 7,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RankingsModal.build": {
            "name": "build",
            "location": 14,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoleSelectionModal.setup": {
            "name": "setup",
            "location": 81,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "RoleSelectionModal.build": {
            "name": "build",
            "location": 86,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "authark-master/authark/presentation/system/console/screens/users/users.py": {
        "UsersScreen.setup": {
            "name": "setup",
            "location": 10,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UsersScreen.build": {
            "name": "build",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserDetailsModal.setup": {
            "name": "setup",
            "location": 89,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "self": []
            }
        },
        "UserDetailsModal.build": {
            "name": "build",
            "location": 94,
            "return": [
                "None"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "authark-master/authark/presentation/system/console/screens/users/__init__.py": {},
    "authark-master/authark/presentation/system/shell/scheduler.py": {
        "Scheduler.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "injector": [
                    "Dict[str, Dict[str, Any]]",
                    "bool",
                    "str"
                ]
            }
        }
    },
    "authark-master/authark/presentation/system/shell/shell.py": {
        "Shell.__init__": {
            "name": "__init__",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "config": [
                    "sphinx.config.Config",
                    "model.Config",
                    "virgene.config.Config",
                    "config.Config"
                ],
                "injector": [
                    "Dict[str, Any]",
                    "config.Config",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "authark-master/authark/presentation/system/shell/__init__.py": {},
    "authark-master/authark/presentation/system/shell/jobs/notify.py": {
        "NotifyJob.__init__": {
            "name": "__init__",
            "location": 12,
            "return": [
                "None"
            ],
            "arguments": {
                "self": [],
                "injector": [
                    "bool",
                    "str"
                ]
            }
        },
        "NotifyJob.__del__": {
            "name": "__del__",
            "location": 28,
            "return": [
                "List[List[int]]",
                "bool",
                "int"
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "authark-master/authark/presentation/system/shell/jobs/__init__.py": {},
    "authark-master/docs/conf.py": {},
    "authark-master/tests/test_main.py": {
        "test_main_definition": {
            "name": "test_main_definition",
            "location": 4,
            "return": [],
            "arguments": {}
        }
    },
    "authark-master/tests/__init__.py": {},
    "authark-master/tests/application/conftest.py": {
        "parser": {
            "name": "parser",
            "location": 37,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {}
        },
        "mock_auth_provider": {
            "name": "mock_auth_provider",
            "location": 44,
            "return": [
                "str",
                "bool",
                "Union[str, IO]"
            ],
            "arguments": {}
        },
        "mock_user_repository": {
            "name": "mock_user_repository",
            "location": 55,
            "return": [
                "Mapping[str, Any]",
                "str",
                "Dict[str, Any]",
                "dict",
                "bool"
            ],
            "arguments": {
                "mock_auth_provider": [
                    "str",
                    "List[str]",
                    "Optional[type]"
                ],
                "parser": [
                    "str",
                    "List[str]",
                    "Optional[type]"
                ]
            }
        },
        "mock_credential_repository": {
            "name": "mock_credential_repository",
            "location": 73,
            "return": [
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "mock_auth_provider": [
                    "str",
                    "float"
                ],
                "parser": [
                    "str",
                    "float"
                ]
            }
        },
        "mock_dominion_repository": {
            "name": "mock_dominion_repository",
            "location": 91,
            "return": [
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "mock_auth_provider": [
                    "str",
                    "float"
                ],
                "parser": [
                    "str",
                    "float"
                ]
            }
        },
        "mock_restriction_repository": {
            "name": "mock_restriction_repository",
            "location": 104,
            "return": [
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "mock_auth_provider": [
                    "str",
                    "float"
                ],
                "parser": [
                    "str",
                    "float"
                ]
            }
        },
        "mock_policy_repository": {
            "name": "mock_policy_repository",
            "location": 124,
            "return": [
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "mock_auth_provider": [
                    "str",
                    "float"
                ],
                "parser": [
                    "str",
                    "float"
                ]
            }
        },
        "mock_role_repository": {
            "name": "mock_role_repository",
            "location": 143,
            "return": [
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "mock_auth_provider": [
                    "str",
                    "float"
                ],
                "parser": [
                    "str",
                    "float"
                ]
            }
        },
        "mock_ranking_repository": {
            "name": "mock_ranking_repository",
            "location": 157,
            "return": [
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {
                "mock_auth_provider": [
                    "str",
                    "float"
                ],
                "parser": [
                    "str",
                    "float"
                ]
            }
        },
        "mock_token_service": {
            "name": "mock_token_service",
            "location": 173,
            "return": [
                "str",
                "Dict[str, Any]",
                "int"
            ],
            "arguments": {}
        },
        "mock_refresh_token_service": {
            "name": "mock_refresh_token_service",
            "location": 178,
            "return": [
                "limbic.emotion.models.LexiconLimbicModel",
                "str",
                "float"
            ],
            "arguments": {}
        },
        "mock_verification_token_service": {
            "name": "mock_verification_token_service",
            "location": 183,
            "return": [
                "limbic.emotion.models.LexiconLimbicModel",
                "str",
                "float"
            ],
            "arguments": {}
        },
        "mock_hash_service": {
            "name": "mock_hash_service",
            "location": 188,
            "return": [
                "str",
                "List[str]",
                "instark.application.managers.SubscriptionManager",
                "instark.application.managers.NotificationManager",
                "Iterable"
            ],
            "arguments": {}
        },
        "mock_identity_service": {
            "name": "mock_identity_service",
            "location": 194,
            "return": [
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {}
        },
        "mock_import_service": {
            "name": "mock_import_service",
            "location": 201,
            "return": [
                "str",
                "Dict[str, Sequence[str]]"
            ],
            "arguments": {}
        },
        "access_service": {
            "name": "access_service",
            "location": 252,
            "return": [
                "bytes",
                "dict",
                "str",
                "int",
                "Optional[Dict[str, Any]]"
            ],
            "arguments": {
                "mock_ranking_repository": [],
                "mock_role_repository": [],
                "mock_dominion_repository": [],
                "mock_token_service": [],
                "mock_auth_provider": [
                    "bool",
                    "dict",
                    "List[List[int]]"
                ]
            }
        },
        "verification_service": {
            "name": "verification_service",
            "location": 262,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "mock_user_repository": [],
                "mock_verification_token_service": []
            }
        },
        "enrollment_service": {
            "name": "enrollment_service",
            "location": 269,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "mock_user_repository": [
                    "str",
                    "List[str]"
                ],
                "mock_credential_repository": [
                    "str",
                    "List[str]"
                ],
                "mock_hash_service": [
                    "str",
                    "List[str]"
                ]
            }
        },
        "plan_supplier": {
            "name": "plan_supplier",
            "location": 280,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "tenant_supplier": {
            "name": "tenant_supplier",
            "location": 285,
            "return": [
                "Iterable[str]",
                "str",
                "Iterable[T]"
            ],
            "arguments": {}
        },
        "setup_supplier": {
            "name": "setup_supplier",
            "location": 295,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {}
        },
        "auth_manager": {
            "name": "auth_manager",
            "location": 302,
            "return": [
                "bool",
                "Optional[dict]",
                "dict",
                "BaseException"
            ],
            "arguments": {
                "mock_auth_provider": [
                    "str"
                ],
                "mock_user_repository": [
                    "str"
                ],
                "mock_credential_repository": [
                    "str"
                ],
                "mock_dominion_repository": [
                    "str"
                ],
                "mock_hash_service": [
                    "str"
                ],
                "access_service": [
                    "str"
                ],
                "mock_refresh_token_service": [
                    "str"
                ],
                "mock_identity_service": [
                    "str"
                ],
                "tenant_supplier": [
                    "str"
                ]
            }
        },
        "management_manager": {
            "name": "management_manager",
            "location": 315,
            "return": [
                "bool",
                "str",
                "int"
            ],
            "arguments": {
                "mock_user_repository": [],
                "mock_dominion_repository": [],
                "mock_role_repository": [],
                "mock_ranking_repository": []
            }
        },
        "security_manager": {
            "name": "security_manager",
            "location": 324,
            "return": [
                "int"
            ],
            "arguments": {
                "mock_restriction_repository": [
                    "str",
                    "Optional[str]"
                ],
                "mock_policy_repository": [
                    "str",
                    "Optional[str]"
                ]
            }
        },
        "import_manager": {
            "name": "import_manager",
            "location": 331,
            "return": [
                "int"
            ],
            "arguments": {
                "mock_import_service": [
                    "str",
                    "int"
                ],
                "mock_user_repository": [
                    "str",
                    "int"
                ],
                "mock_credential_repository": [
                    "str",
                    "int"
                ],
                "mock_role_repository": [
                    "str",
                    "int"
                ],
                "mock_ranking_repository": [
                    "str",
                    "int"
                ],
                "mock_dominion_repository": [
                    "str",
                    "int"
                ]
            }
        },
        "session_manager": {
            "name": "session_manager",
            "location": 342,
            "return": [
                "str",
                "Mapping[str, Any]",
                "dict"
            ],
            "arguments": {
                "mock_auth_provider": [
                    "str",
                    "bool"
                ]
            }
        },
        "procedure_manager": {
            "name": "procedure_manager",
            "location": 347,
            "return": [
                "str",
                "int"
            ],
            "arguments": {
                "mock_auth_provider": [
                    "str"
                ],
                "mock_user_repository": [
                    "str"
                ],
                "enrollment_service": [
                    "str"
                ],
                "verification_service": [
                    "str"
                ],
                "mock_identity_service": [
                    "str"
                ],
                "plan_supplier": [
                    "str"
                ],
                "tenant_supplier": [
                    "str"
                ],
                "access_service": [
                    "str"
                ],
                "mock_dominion_repository": [
                    "str"
                ],
                "mock_refresh_token_service": [
                    "str"
                ],
                "mock_credential_repository": [
                    "str"
                ]
            }
        },
        "tenant_manager": {
            "name": "tenant_manager",
            "location": 363,
            "return": [
                "str",
                "Tuple[str, str]",
                "List[str]",
                "django.db.models.Model",
                "bool"
            ],
            "arguments": {
                "tenant_supplier": [
                    "Tuple[paradigm.models.Base, tests.utils.Kwargs]",
                    "str",
                    "dict"
                ]
            }
        },
        "setup_manager": {
            "name": "setup_manager",
            "location": 367,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "setup_supplier": [
                    "int",
                    "Callable[[], None]"
                ]
            }
        }
    },
    "authark-master/tests/application/__init__.py": {},
    "authark-master/tests/application/domain/__init__.py": {},
    "authark-master/tests/application/domain/common/test_auth.py": {
        "test_auth_provider_repository_methods": {
            "name": "test_auth_provider_repository_methods",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "auth_provider": {
            "name": "auth_provider",
            "location": 15,
            "return": [
                "str",
                "bool"
            ],
            "arguments": {}
        },
        "test_standard_auth_provider": {
            "name": "test_standard_auth_provider",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "auth_provider": []
            }
        },
        "test_standard_auth_provider_verify": {
            "name": "test_standard_auth_provider_verify",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "auth_provider": []
            }
        },
        "test_standard_auth_get_user": {
            "name": "test_standard_auth_get_user",
            "location": 38,
            "return": [
                ""
            ],
            "arguments": {
                "auth_provider": []
            }
        },
        "test_standard_auth_raises_if_user_not_set": {
            "name": "test_standard_auth_raises_if_user_not_set",
            "location": 45,
            "return": [
                ""
            ],
            "arguments": {
                "auth_provider": []
            }
        },
        "user": {
            "name": "user",
            "location": 55,
            "return": [
                "str",
                "metaswitch_tinder.database.models.User",
                "int",
                "abilian.core.models.subjects.User"
            ],
            "arguments": {}
        },
        "test_user_creation": {
            "name": "test_user_creation",
            "location": 59,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "authark.application.domain.common.User",
                    "User"
                ]
            }
        },
        "test_user_default_attributes": {
            "name": "test_user_default_attributes",
            "location": 63,
            "return": [
                "None"
            ],
            "arguments": {
                "user": [
                    "Callable[[List, bool], None]",
                    "authark.application.domain.common.User",
                    "Dict[str, Any]",
                    "abilian.core.models.subjects.User"
                ]
            }
        },
        "test_user_attributes_from_dict": {
            "name": "test_user_attributes_from_dict",
            "location": 74,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_standard_auth_provider_tenant_properties": {
            "name": "test_standard_auth_provider_tenant_properties",
            "location": 92,
            "return": [
                ""
            ],
            "arguments": {
                "auth_provider": [
                    "common.ComponentFactory",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "authark-master/tests/application/domain/common/test_query_parser.py": {
        "parser": {
            "name": "parser",
            "location": 8,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {}
        },
        "test_query_parser_object_creation": {
            "name": "test_query_parser_object_creation",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "parser": []
            }
        },
        "test_query_parser_parse_tuple": {
            "name": "test_query_parser_parse_tuple",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "bool",
                    "List[str]"
                ]
            }
        },
        "test_query_parser_parse_single_term": {
            "name": "test_query_parser_parse_single_term",
            "location": 40,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "str"
                ]
            }
        },
        "test_query_parser_default_join": {
            "name": "test_query_parser_default_join",
            "location": 59,
            "return": [
                ""
            ],
            "arguments": {
                "parser": []
            }
        },
        "test_query_parser_parse_multiple_terms": {
            "name": "test_query_parser_parse_multiple_terms",
            "location": 79,
            "return": [
                ""
            ],
            "arguments": {
                "parser": []
            }
        },
        "test_query_parser_with_empty_list": {
            "name": "test_query_parser_with_empty_list",
            "location": 109,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "str",
                    "Dict[str, Sequence[str]]"
                ]
            }
        },
        "test_string_parser_with_lists_of_lists": {
            "name": "test_string_parser_with_lists_of_lists",
            "location": 117,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "str"
                ]
            }
        },
        "test_query_parser_parse_like": {
            "name": "test_query_parser_parse_like",
            "location": 133,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "bool",
                    "List[str]"
                ]
            }
        },
        "test_query_parser_parse_contains": {
            "name": "test_query_parser_parse_contains",
            "location": 167,
            "return": [
                ""
            ],
            "arguments": {
                "parser": [
                    "bool",
                    "List[str]"
                ]
            }
        },
        "test_query_parser_parse_single_term.expected": {
            "name": "expected",
            "location": 43,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "test_query_parser_default_join.expected": {
            "name": "expected",
            "location": 62,
            "return": [],
            "arguments": {
                "obj": []
            }
        },
        "test_string_parser_with_lists_of_lists.expected": {
            "name": "expected",
            "location": 120,
            "return": [
                "bool",
                "str",
                "List[str]"
            ],
            "arguments": {
                "obj": [
                    "int",
                    "Dict[str, Set[str]]",
                    "List[Dict[str, Any]]"
                ]
            }
        }
    },
    "authark-master/tests/application/domain/common/__init__.py": {},
    "authark-master/tests/application/domain/models/test_credential.py": {
        "credential": {
            "name": "credential",
            "location": 6,
            "return": [
                "bool",
                "int"
            ],
            "arguments": {}
        },
        "test_credential_instantiation": {
            "name": "test_credential_instantiation",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "credential": [
                    "Optional[Iterable[Any]]"
                ]
            }
        },
        "test_credential_attributes": {
            "name": "test_credential_attributes",
            "location": 20,
            "return": [
                ""
            ],
            "arguments": {
                "credential": [
                    "core.models.Recipe",
                    "ebl.transliteration.domain.texText",
                    "str",
                    "Optional[str]"
                ]
            }
        }
    },
    "authark-master/tests/application/domain/models/test_dominion.py": {
        "dominion": {
            "name": "dominion",
            "location": 6,
            "return": [
                "str",
                "Tuple[str]",
                "bool"
            ],
            "arguments": {}
        },
        "test_dominion_instation": {
            "name": "test_dominion_instation",
            "location": 10,
            "return": [
                ""
            ],
            "arguments": {
                "dominion": [
                    "Optional[Iterable[Any]]"
                ]
            }
        },
        "test_dominion_attributes": {
            "name": "test_dominion_attributes",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "dominion": [
                    "str",
                    "dict"
                ]
            }
        }
    },
    "authark-master/tests/application/domain/models/test_policy.py": {
        "policy": {
            "name": "policy",
            "location": 6,
            "return": [
                "Dict[str, Any]",
                "str"
            ],
            "arguments": {}
        },
        "test_policy_creation": {
            "name": "test_policy_creation",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "policy": [
                    "Optional[Iterable[Any]]"
                ]
            }
        },
        "test_policy_attributes": {
            "name": "test_policy_attributes",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "policy": [
                    "Optional[str]",
                    "str"
                ]
            }
        }
    },
    "authark-master/tests/application/domain/models/test_ranking.py": {
        "ranking": {
            "name": "ranking",
            "location": 6,
            "return": [
                "bool",
                "int",
                "Tuple[str, int]",
                "Dict[str, Any]"
            ],
            "arguments": {}
        },
        "test_ranking_instantiation": {
            "name": "test_ranking_instantiation",
            "location": 14,
            "return": [
                ""
            ],
            "arguments": {
                "ranking": [
                    "Optional[Iterable[Any]]"
                ]
            }
        },
        "test_ranking_attributes": {
            "name": "test_ranking_attributes",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "ranking": [
                    "zerver.models.UserMessage",
                    "str"
                ]
            }
        }
    },
    "authark-master/tests/application/domain/models/test_restriction.py": {
        "restriction": {
            "name": "restriction",
            "location": 6,
            "return": [
                "dict",
                "Dict[str, Any]",
                "Dict[str, str]",
                "str"
            ],
            "arguments": {}
        },
        "test_restriction_instation": {
            "name": "test_restriction_instation",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "restriction": [
                    "Optional[Iterable[Any]]"
                ]
            }
        },
        "test_restriction_attributes": {
            "name": "test_restriction_attributes",
            "location": 21,
            "return": [
                ""
            ],
            "arguments": {
                "restriction": []
            }
        }
    },
    "authark-master/tests/application/domain/models/test_role.py": {
        "role": {
            "name": "role",
            "location": 6,
            "return": [
                "bool",
                "dict"
            ],
            "arguments": {}
        },
        "test_role_instantiation": {
            "name": "test_role_instantiation",
            "location": 15,
            "return": [
                ""
            ],
            "arguments": {
                "role": [
                    "Optional[Iterable[Any]]"
                ]
            }
        },
        "test_role_attributes": {
            "name": "test_role_attributes",
            "location": 19,
            "return": [
                ""
            ],
            "arguments": {
                "role": [
                    "str"
                ]
            }
        }
    },
    "authark-master/tests/application/domain/models/test_tenant.py": {
        "tenant": {
            "name": "tenant",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_tenant_creation": {
            "name": "test_tenant_creation",
            "location": 10,
            "return": [],
            "arguments": {
                "tenant": []
            }
        },
        "test_tenant_default_attributes": {
            "name": "test_tenant_default_attributes",
            "location": 14,
            "return": [],
            "arguments": {
                "tenant": []
            }
        },
        "test_tenant_attributes_from_dict": {
            "name": "test_tenant_attributes_from_dict",
            "location": 21,
            "return": [],
            "arguments": {}
        },
        "test_tenant_normalize_slug": {
            "name": "test_tenant_normalize_slug",
            "location": 33,
            "return": [],
            "arguments": {}
        },
        "test_tenant_normalize_slug_invalid": {
            "name": "test_tenant_normalize_slug_invalid",
            "location": 40,
            "return": [],
            "arguments": {}
        }
    },
    "authark-master/tests/application/domain/models/test_token.py": {
        "token": {
            "name": "token",
            "location": 6,
            "return": [
                "str",
                "Optional[str]",
                "Tuple[str, int]"
            ],
            "arguments": {}
        },
        "test_token_instantiation": {
            "name": "test_token_instantiation",
            "location": 12,
            "return": [
                ""
            ],
            "arguments": {
                "token": [
                    "bytes",
                    "List[allennlp.data.tokenizers.token.Token]",
                    "bool"
                ]
            }
        },
        "test_token_attributes": {
            "name": "test_token_attributes",
            "location": 16,
            "return": [
                ""
            ],
            "arguments": {
                "token": [
                    "str",
                    "int",
                    "Dict[str, Any]"
                ]
            }
        }
    },
    "authark-master/tests/application/domain/models/test_user.py": {
        "user": {
            "name": "user",
            "location": 6,
            "return": [],
            "arguments": {}
        },
        "test_user_instantiation": {
            "name": "test_user_instantiation",
            "location": 20,
            "return": [],
            "arguments": {
                "user": []
            }
        },
        "test_user_attributes": {
            "name": "test_user_attributes",
            "location": 24,
            "return": [],
            "arguments": {
                "user": []
            }
        }
    },
    "authark-master/tests/application/domain/models/__init__.py": {},
    "authark-master/tests/application/domain/services/test_access_service.py": {},
    "authark-master/tests/application/domain/services/test_enrollment_service.py": {},
    "authark-master/tests/application/domain/services/test_hash_service.py": {
        "test_hash_service": {
            "name": "test_hash_service",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_memory_hash_service_implementation": {
            "name": "test_memory_hash_service_implementation",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_memory_hash_service_generate_hash": {
            "name": "test_memory_hash_service_generate_hash",
            "location": 15,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_memory_hash_service_verify_password": {
            "name": "test_memory_hash_service_verify_password",
            "location": 25,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "authark-master/tests/application/domain/services/test_identity_service.py": {
        "test_identity_service_methods": {
            "name": "test_identity_service_methods",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_memory_identity_service_instantiation": {
            "name": "test_memory_identity_service_instantiation",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "authark-master/tests/application/domain/services/test_token_service.py": {
        "test_token_service": {
            "name": "test_token_service",
            "location": 8,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_memory_token_service_implementation": {
            "name": "test_memory_token_service_implementation",
            "location": 18,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_memory_token_service_generate_token_with_payload": {
            "name": "test_memory_token_service_generate_token_with_payload",
            "location": 22,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_memory_token_service_valid": {
            "name": "test_memory_token_service_valid",
            "location": 35,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_memory_token_service_decode": {
            "name": "test_memory_token_service_decode",
            "location": 43,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "authark-master/tests/application/domain/services/test_verification_service.py": {
        "test_verification_service_generate_token": {
            "name": "test_verification_service_generate_token",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {
                "verification_service": [
                    "str"
                ]
            }
        },
        "test_verification_service_generate_token_tenant": {
            "name": "test_verification_service_generate_token_tenant",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "verification_service": [
                    "str"
                ]
            }
        }
    },
    "authark-master/tests/application/domain/services/__init__.py": {},
    "authark-master/tests/application/general/__init__.py": {},
    "authark-master/tests/application/general/suppliers/__init__.py": {},
    "authark-master/tests/application/general/suppliers/plan/test_plan.py": {
        "test_plan_supplier_methods": {
            "name": "test_plan_supplier_methods",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "authark-master/tests/application/general/suppliers/plan/__init__.py": {},
    "authark-master/tests/application/general/suppliers/setup/test_setup_supplier.py": {
        "test_setup_supplier_methods": {
            "name": "test_setup_supplier_methods",
            "location": 6,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_setup_supplier_setup": {
            "name": "test_setup_supplier_setup",
            "location": 11,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "authark-master/tests/application/general/suppliers/setup/__init__.py": {},
    "authark-master/tests/application/general/suppliers/tenancy/test_tenant_supplier.py": {
        "test_tenant_supplier_methods": {
            "name": "test_tenant_supplier_methods",
            "location": 4,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_memory_tenant_supplier_create_and_get_tenant": {
            "name": "test_memory_tenant_supplier_create_and_get_tenant",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_memory_tenant_supplier_create_and_resolve_tenant": {
            "name": "test_memory_tenant_supplier_create_and_resolve_tenant",
            "location": 20,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_memory_tenant_supplier_create_and_search_tenants": {
            "name": "test_memory_tenant_supplier_create_and_search_tenants",
            "location": 30,
            "return": [
                "None"
            ],
            "arguments": {}
        }
    },
    "authark-master/tests/application/operation/__init__.py": {},
    "authark-master/tests/application/operation/informers/conftest.py": {
        "parser": {
            "name": "parser",
            "location": 22,
            "return": [
                "List[str]",
                "str"
            ],
            "arguments": {}
        },
        "auth_provider": {
            "name": "auth_provider",
            "location": 27,
            "return": [
                "str",
                "bool",
                "Optional[zerver.models.Realm]"
            ],
            "arguments": {}
        },
        "tenant_supplier": {
            "name": "tenant_supplier",
            "location": 35,
            "return": [
                "int",
                "bytes",
                "tuple"
            ],
            "arguments": {}
        },
        "user_repository": {
            "name": "user_repository",
            "location": 40,
            "return": [
                "models.Course",
                "zam_repondeur.models.Dossier",
                "str",
                "metaswitch_tinder.database.models.User",
                "int",
                "abilian.core.models.subjects.User"
            ],
            "arguments": {
                "auth_provider": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ],
                "parser": [
                    "application.domain.common.TenantProvider",
                    "application.domain.common.AuthProvider",
                    "application.domain.common.QueryParser"
                ]
            }
        },
        "credential_repository": {
            "name": "credential_repository",
            "location": 56,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "auth_provider": [
                    "bool"
                ],
                "parser": [
                    "bool"
                ]
            }
        },
        "dominion_repository": {
            "name": "dominion_repository",
            "location": 69,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "auth_provider": [
                    "bool"
                ],
                "parser": [
                    "bool"
                ]
            }
        },
        "role_repository": {
            "name": "role_repository",
            "location": 80,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "auth_provider": [
                    "bool"
                ],
                "parser": [
                    "bool"
                ]
            }
        },
        "restriction_repository": {
            "name": "restriction_repository",
            "location": 92,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "auth_provider": [
                    "bool"
                ],
                "parser": [
                    "bool"
                ]
            }
        },
        "policy_repository": {
            "name": "policy_repository",
            "location": 106,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "auth_provider": [
                    "bool"
                ],
                "parser": [
                    "bool"
                ]
            }
        },
        "ranking_repository": {
            "name": "ranking_repository",
            "location": 119,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "auth_provider": [
                    "bool"
                ],
                "parser": [
                    "bool"
                ]
            }
        },
        "standard_informer": {
            "name": "standard_informer",
            "location": 131,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {
                "user_repository": [
                    "Optional[int]",
                    "User",
                    "zerver.models.UserProfile",
                    "domain.common.RecordList",
                    "List[domain.models.User]",
                    "str",
                    "int"
                ],
                "credential_repository": [
                    "Optional[int]",
                    "User",
                    "zerver.models.UserProfile",
                    "domain.common.RecordList",
                    "List[domain.models.User]",
                    "str",
                    "int"
                ],
                "dominion_repository": [
                    "Optional[int]",
                    "User",
                    "zerver.models.UserProfile",
                    "domain.common.RecordList",
                    "List[domain.models.User]",
                    "str",
                    "int"
                ],
                "role_repository": [
                    "Optional[int]",
                    "User",
                    "zerver.models.UserProfile",
                    "domain.common.RecordList",
                    "List[domain.models.User]",
                    "str",
                    "int"
                ],
                "restriction_repository": [
                    "Optional[int]",
                    "User",
                    "zerver.models.UserProfile",
                    "domain.common.RecordList",
                    "List[domain.models.User]",
                    "str",
                    "int"
                ],
                "policy_repository": [
                    "Optional[int]",
                    "User",
                    "zerver.models.UserProfile",
                    "domain.common.RecordList",
                    "List[domain.models.User]",
                    "str",
                    "int"
                ],
                "ranking_repository": [
                    "Optional[int]",
                    "User",
                    "zerver.models.UserProfile",
                    "domain.common.RecordList",
                    "List[domain.models.User]",
                    "str",
                    "int"
                ]
            }
        },
        "composing_informer": {
            "name": "composing_informer",
            "location": 151,
            "return": [
                "int",
                "Callable",
                "models.Question",
                "str"
            ],
            "arguments": {
                "dominion_repository": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ],
                "role_repository": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ],
                "ranking_repository": [
                    "int",
                    "Callable",
                    "models.Question",
                    "str"
                ]
            }
        },
        "tenant_informer": {
            "name": "tenant_informer",
            "location": 161,
            "return": [
                "str",
                "Tuple[str, str]",
                "List[str]",
                "django.db.models.Model",
                "bool"
            ],
            "arguments": {
                "tenant_supplier": [
                    "str",
                    "Dict[str, Tuple[str, str]]",
                    "Type[django.db.models.base.Model]"
                ]
            }
        }
    },
    "authark-master/tests/application/operation/informers/test_composing_informer.py": {},
    "authark-master/tests/application/operation/informers/test_standard_infomer.py": {},
    "authark-master/tests/application/operation/informers/test_tenant_informer.py": {},
    "authark-master/tests/application/operation/informers/__init__.py": {},
    "authark-master/tests/application/operation/managers/test_auth_manager.py": {
        "test_auth_manager_creation": {
            "name": "test_auth_manager_creation",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "auth_manager": []
            }
        }
    },
    "authark-master/tests/application/operation/managers/test_import_manager.py": {},
    "authark-master/tests/application/operation/managers/test_management_manager.py": {
        "test_management_manager_instantiation": {
            "name": "test_management_manager_instantiation",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "management_manager": [
                    "instark.application.managers.SubscriptionManager",
                    "instark.application.managers.NotificationManager",
                    "common.ComponentFactory"
                ]
            }
        }
    },
    "authark-master/tests/application/operation/managers/test_procedure_manager.py": {
        "test_procedure_manager_creation": {
            "name": "test_procedure_manager_creation",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "procedure_manager": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "authark-master/tests/application/operation/managers/test_security_manager.py": {
        "test_security_manager_instantiation": {
            "name": "test_security_manager_instantiation",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "security_manager": [
                    "instark.application.managers.SubscriptionManager",
                    "instark.application.managers.NotificationManager",
                    "common.ComponentFactory"
                ]
            }
        }
    },
    "authark-master/tests/application/operation/managers/test_session_manager.py": {
        "test_session_manager_creation": {
            "name": "test_session_manager_creation",
            "location": 3,
            "return": [
                ""
            ],
            "arguments": {
                "session_manager": [
                    "Set[str]"
                ]
            }
        },
        "test_session_manager_set_user": {
            "name": "test_session_manager_set_user",
            "location": 7,
            "return": [
                ""
            ],
            "arguments": {
                "session_manager": [
                    "str"
                ]
            }
        },
        "test_session_manager_get_user": {
            "name": "test_session_manager_get_user",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "session_manager": [
                    "str"
                ]
            }
        }
    },
    "authark-master/tests/application/operation/managers/test_setup_manager.py": {
        "test_setup_manager": {
            "name": "test_setup_manager",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "setup_manager": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "authark-master/tests/application/operation/managers/test_tenant_manager.py": {
        "test_tenant_manager": {
            "name": "test_tenant_manager",
            "location": 2,
            "return": [
                ""
            ],
            "arguments": {
                "tenant_manager": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "authark-master/tests/application/operation/managers/__init__.py": {},
    "authark-master/tests/integration/__init__.py": {},
    "authark-master/tests/integration/core/__init__.py": {},
    "authark-master/tests/integration/core/data/__init__.py": {},
    "authark-master/tests/integration/core/data/json/test_json_import_service.py": {
        "file": {
            "name": "file",
            "location": 8,
            "return": [
                "str"
            ],
            "arguments": {
                "tmp_path": [
                    "str"
                ]
            }
        },
        "json_import_service": {
            "name": "json_import_service",
            "location": 39,
            "return": [
                "str",
                "dict",
                "Dict[str, int]",
                "int"
            ],
            "arguments": {}
        },
        "test_json_import_service_instantiation": {
            "name": "test_json_import_service_instantiation",
            "location": 43,
            "return": [
                ""
            ],
            "arguments": {
                "json_import_service": [
                    "str",
                    "float"
                ]
            }
        },
        "test_json_import_service_import_users": {
            "name": "test_json_import_service_import_users",
            "location": 47,
            "return": [
                ""
            ],
            "arguments": {
                "json_import_service": [
                    "Callable",
                    "str"
                ],
                "file": [
                    "Callable",
                    "str"
                ]
            }
        }
    },
    "authark-master/tests/integration/core/data/json/__init__.py": {},
    "authark-master/tests/integration/core/oauth/test_oauth_identity_service.py": {
        "MockResponse.__init__": {
            "name": "__init__",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "int",
                    "Dict[str, str]",
                    "bytes",
                    "Optional[Dict]"
                ],
                "status": [
                    "int"
                ]
            }
        },
        "MockSessionResponse.__init__": {
            "name": "__init__",
            "location": 17,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "data": [
                    "dict",
                    "bytes",
                    "str",
                    "Optional[Dict[str, Any]]"
                ]
            }
        },
        "MockSession.post": {
            "name": "post",
            "location": 33,
            "return": [
                "Dict[str, Any]",
                "dict",
                "int",
                "Dict[str, str]"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "str",
                    "int",
                    "bytes",
                    "float"
                ],
                "headers": [
                    "str",
                    "dict",
                    "bool"
                ],
                "data": [
                    "tartare.core.models.Job",
                    "dict",
                    "Dict[str, str]",
                    "Optional[List[str]]",
                    "bool",
                    "str"
                ]
            }
        },
        "MockSession.get": {
            "name": "get",
            "location": 39,
            "return": [
                "Optional[str]",
                "dict",
                "int",
                "bool",
                "Dict[str, Union[str, int]]"
            ],
            "arguments": {
                "self": [],
                "endpoint": [
                    "str",
                    "bool"
                ],
                "params": [
                    "str",
                    "bool"
                ]
            }
        }
    },
    "authark-master/tests/integration/core/oauth/__init__.py": {},
    "authark-master/tests/integration/core/suppliers/test_json_planner.py": {
        "MockPlanner.__init__": {
            "name": "__init__",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "queue": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        }
    },
    "authark-master/tests/integration/core/suppliers/__init__.py": {},
    "authark-master/tests/integration/core/suppliers/crypto/conftest.py": {
        "payload_dict": {
            "name": "payload_dict",
            "location": 10,
            "return": [
                "bool",
                "str"
            ],
            "arguments": {}
        },
        "hash_service": {
            "name": "hash_service",
            "location": 28,
            "return": [
                "dict",
                "str"
            ],
            "arguments": {}
        },
        "pyjwt_service": {
            "name": "pyjwt_service",
            "location": 33,
            "return": [
                "dict",
                "Optional[bool]",
                "Optional[int]",
                "str"
            ],
            "arguments": {}
        }
    },
    "authark-master/tests/integration/core/suppliers/crypto/test_passlib_hash_service.py": {
        "test_passlib_hash_service_instantiation": {
            "name": "test_passlib_hash_service_instantiation",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "hash_service": [
                    "Callable",
                    "int",
                    "str"
                ]
            }
        },
        "test_passlib_hash_service_generate_hash": {
            "name": "test_passlib_hash_service_generate_hash",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "hash_service": [
                    "Callable",
                    "Dict[str, Any]",
                    "Set[Hashable]"
                ]
            }
        },
        "test_passlib_hash_service_verify_password": {
            "name": "test_passlib_hash_service_verify_password",
            "location": 13,
            "return": [
                ""
            ],
            "arguments": {
                "hash_service": [
                    "Callable",
                    "list",
                    "bool",
                    "List[Dict[str, Any]]"
                ]
            }
        }
    },
    "authark-master/tests/integration/core/suppliers/crypto/test_pyjwt_token_service.py": {
        "test_pyjwt_token_service_instantiation": {
            "name": "test_pyjwt_token_service_instantiation",
            "location": 5,
            "return": [
                ""
            ],
            "arguments": {
                "pyjwt_service": []
            }
        },
        "test_pyjwt_token_service_generate_token": {
            "name": "test_pyjwt_token_service_generate_token",
            "location": 9,
            "return": [
                ""
            ],
            "arguments": {
                "pyjwt_service": [
                    "Dict[str, Any]",
                    "dict"
                ]
            }
        },
        "test_pyjwt_token_service_valid": {
            "name": "test_pyjwt_token_service_valid",
            "location": 18,
            "return": [
                ""
            ],
            "arguments": {
                "pyjwt_service": []
            }
        },
        "test_pyjwt_token_service_decode": {
            "name": "test_pyjwt_token_service_decode",
            "location": 24,
            "return": [
                ""
            ],
            "arguments": {
                "pyjwt_service": []
            }
        }
    },
    "authark-master/tests/integration/core/suppliers/crypto/__init__.py": {},
    "authark-master/tests/integration/core/suppliers/setup/test_json_setup_supplier.py": {
        "test_json_setup_supplier_setup": {
            "name": "test_json_setup_supplier_setup",
            "location": 4,
            "return": [
                ""
            ],
            "arguments": {
                "tmp_path": []
            }
        }
    },
    "authark-master/tests/integration/core/suppliers/setup/__init__.py": {},
    "authark-master/tests/integration/core/suppliers/template/test_template_supplier.py": {
        "test_template_supplier_methods": {
            "name": "test_template_supplier_methods",
            "location": 5,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_template_supplier_render": {
            "name": "test_template_supplier_render",
            "location": 10,
            "return": [
                "None"
            ],
            "arguments": {}
        },
        "test_jinja_template_supplier_render": {
            "name": "test_jinja_template_supplier_render",
            "location": 17,
            "return": [
                "None"
            ],
            "arguments": {
                "tmp_path": []
            }
        }
    },
    "authark-master/tests/integration/core/suppliers/template/__init__.py": {},
    "authark-master/tests/integration/core/suppliers/tenancy/conftest.py": {
        "catalog_path": {
            "name": "catalog_path",
            "location": 8,
            "return": [
                "str",
                "pathlib.Path",
                "List[int]"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "pathlib.Path"
                ]
            }
        },
        "zones": {
            "name": "zones",
            "location": 16,
            "return": [
                "str",
                "Type",
                "int",
                "bool"
            ],
            "arguments": {
                "tmp_path": [
                    "Iterable[pathlib.Path]",
                    "str",
                    "List[str]",
                    "Optional[Tuple[str, ...]]",
                    "path.Path",
                    "pathlib.Path",
                    "Optional['Directory']"
                ]
            }
        },
        "directory_data": {
            "name": "directory_data",
            "location": 25,
            "return": [
                "waterbutler.core.provider.BaseProvider",
                "str",
                "pathlib.Path",
                "paradigm.catalog.Path"
            ],
            "arguments": {
                "tmp_path": [
                    "str",
                    "Iterable[str]",
                    "bool"
                ]
            }
        },
        "directory_template": {
            "name": "directory_template",
            "location": 30,
            "return": [
                "str"
            ],
            "arguments": {
                "tmp_path": [
                    "pathlib.Path",
                    "str",
                    "Union[str, pathlib.Path]",
                    "path.Path",
                    "Iterable[str]"
                ]
            }
        },
        "tenant_dict": {
            "name": "tenant_dict",
            "location": 47,
            "return": [
                "bool"
            ],
            "arguments": {}
        },
        "json_tenant_supplier": {
            "name": "json_tenant_supplier",
            "location": 60,
            "return": [
                "pathlib.Path",
                "str",
                "Optional[str]",
                "List[str]"
            ],
            "arguments": {
                "catalog_path": [
                    "str",
                    "pathlib.Path"
                ],
                "zones": [
                    "str",
                    "pathlib.Path"
                ],
                "directory_template": [
                    "str",
                    "pathlib.Path"
                ]
            }
        }
    },
    "authark-master/tests/integration/core/suppliers/tenancy/test_json_tenant_supplier.py": {
        "test_json_tenant_supplier_instantiation": {
            "name": "test_json_tenant_supplier_instantiation",
            "location": 6,
            "return": [
                ""
            ],
            "arguments": {
                "monkeypatch": []
            }
        },
        "test_json_tenant_supplier_instantiation.mock_resolve_managers": {
            "name": "mock_resolve_managers",
            "location": 9,
            "return": [
                "Optional[str]",
                "Optional[bool]",
                "int"
            ],
            "arguments": {
                "config": [
                    "Dict[str, Any]",
                    "Mapping[str, Any]"
                ]
            }
        }
    },
    "authark-master/tests/integration/core/suppliers/tenancy/__init__.py": {},
    "authark-master/tests/integration/factories/test_factories.py": {
        "test_factories": {
            "name": "test_factories",
            "location": 84,
            "return": [
                ""
            ],
            "arguments": {}
        }
    },
    "authark-master/tests/integration/factories/__init__.py": {},
    "authark-master/tests/presentation/__init__.py": {},
    "authark-master/tests/presentation/platform/__init__.py": {},
    "authark-master/tests/presentation/platform/rest/conftest.py": {
        "app": {
            "name": "app",
            "location": 9,
            "return": [
                "bool",
                "str",
                "Optional[\"Frame\"]"
            ],
            "arguments": {
                "loop": [],
                "aiohttp_client": []
            }
        },
        "headers": {
            "name": "headers",
            "location": 23,
            "return": [
                "str",
                "Optional[str]",
                "Dict[str, Any]",
                "bool"
            ],
            "arguments": {}
        }
    },
    "authark-master/tests/presentation/platform/rest/test_rest.py": {},
    "authark-master/tests/presentation/platform/rest/__init__.py": {},
    "authark-master/tests/presentation/system/__init__.py": {},
    "authark-master/tests/presentation/system/console/conftest.py": {
        "stdscr": {
            "name": "stdscr",
            "location": 11,
            "return": [
                ""
            ],
            "arguments": {}
        },
        "root": {
            "name": "root",
            "location": 24,
            "return": [
                "str",
                "Union[tuple, list]",
                "Dict[str, Any]"
            ],
            "arguments": {
                "stdscr": [
                    "bool",
                    "Optional[bool]",
                    "str",
                    "Iterable[str]"
                ]
            }
        },
        "config": {
            "name": "config",
            "location": 34,
            "return": [
                "str",
                "Optional[dict]",
                "app.config.MQConfig",
                "dict",
                "bool"
            ],
            "arguments": {}
        },
        "injector": {
            "name": "injector",
            "location": 42,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "config": [
                    "core.Config",
                    "cerise.config.Config",
                    "pyramid.config.Configurator",
                    "Dict[str, Any]",
                    "str"
                ]
            }
        }
    },
    "authark-master/tests/presentation/system/console/test_main.py": {
        "application": {
            "name": "application",
            "location": 11,
            "return": [
                "Optional[str]",
                "str",
                "dict"
            ],
            "arguments": {
                "root": [
                    "tuple",
                    "Dict[str, Any]",
                    "dict",
                    "bool",
                    "Mapping[str, Any]"
                ],
                "config": [
                    "dict"
                ],
                "injector": [
                    "dict"
                ]
            }
        },
        "test_application_prepare.mock_set_tenant": {
            "name": "mock_set_tenant",
            "location": 27,
            "return": [],
            "arguments": {
                "self": [],
                "tenant": []
            }
        },
        "test_application_on_menu_click.target": {
            "name": "target",
            "location": 41,
            "return": [],
            "arguments": {
                "item_": [
                    "List[str]"
                ]
            }
        },
        "test_application_on_tenant_switch.mock_set_tenant": {
            "name": "mock_set_tenant",
            "location": 75,
            "return": [
                ""
            ],
            "arguments": {
                "self": [
                    "bool",
                    "List[int]",
                    "str",
                    "int"
                ],
                "tenant": [
                    "Optional[str]",
                    "int",
                    "Tuple[float, float]",
                    "List[List[int]]",
                    "list",
                    "str",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "authark-master/tests/presentation/system/console/__init__.py": {},
    "authark-master/tests/presentation/system/console/screens/test_status.py": {
        "status_screen": {
            "name": "status_screen",
            "location": 13,
            "return": [
                "int",
                "bool",
                "Iterable[str]"
            ],
            "arguments": {
                "root": [
                    "Sequence[str]",
                    "bool"
                ],
                "injector": [
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "tenants_modal": {
            "name": "tenants_modal",
            "location": 18,
            "return": [
                "str",
                "list"
            ],
            "arguments": {
                "root": [
                    "Sequence[str]",
                    "str",
                    "bool"
                ],
                "injector": [
                    "Sequence[str]",
                    "str",
                    "bool"
                ]
            }
        },
        "tenant_provision_modal": {
            "name": "tenant_provision_modal",
            "location": 23,
            "return": [
                "bool",
                "str",
                "int",
                "Hashable",
                "bytes",
                "Optional[Any]"
            ],
            "arguments": {
                "root": [
                    "int",
                    "str",
                    "Sequence[str]"
                ],
                "injector": [
                    "int",
                    "str",
                    "Sequence[str]"
                ]
            }
        },
        "test_tenants_modal_on_body.target": {
            "name": "target",
            "location": 74,
            "return": [],
            "arguments": {
                "item_": [
                    "List[str]"
                ]
            }
        },
        "test_provision_modal_on_save.mock_create_tenant": {
            "name": "mock_create_tenant",
            "location": 94,
            "return": [
                ""
            ],
            "arguments": {
                "self": [
                    "bool",
                    "str",
                    "list",
                    "Optional[List[Dict]]",
                    "dict"
                ],
                "tenants": [
                    "int",
                    "Optional[str]",
                    "Tuple[float, float]",
                    "List[List[int]]",
                    "float",
                    "str",
                    "Optional[List[str]]"
                ]
            }
        }
    },
    "authark-master/tests/presentation/system/console/screens/__init__.py": {},
    "authark-master/tests/presentation/system/console/screens/dominions/test_dominions.py": {
        "dominions_screen": {
            "name": "dominions_screen",
            "location": 13,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "root": [
                    "Sequence[str]",
                    "bool"
                ],
                "injector": [
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "dominion_details_modal": {
            "name": "dominion_details_modal",
            "location": 18,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "root": [
                    "int",
                    "Container",
                    "Optional[str]",
                    "str"
                ],
                "injector": [
                    "int",
                    "Container",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "test_dominions_screen_on_body.target": {
            "name": "target",
            "location": 35,
            "return": [],
            "arguments": {
                "item_": [
                    "List[str]"
                ]
            }
        }
    },
    "authark-master/tests/presentation/system/console/screens/dominions/__init__.py": {},
    "authark-master/tests/presentation/system/console/screens/roles/test_policies.py": {
        "policies_modal": {
            "name": "policies_modal",
            "location": 13,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "root": [
                    "Sequence[str]",
                    "bool"
                ],
                "injector": [
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "policy_details_modal": {
            "name": "policy_details_modal",
            "location": 19,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "root": [
                    "int",
                    "Container",
                    "Optional[str]",
                    "str"
                ],
                "injector": [
                    "int",
                    "Container",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "test_policies_screen_on_body.target": {
            "name": "target",
            "location": 53,
            "return": [],
            "arguments": {
                "item_": [
                    "List[str]"
                ]
            }
        }
    },
    "authark-master/tests/presentation/system/console/screens/roles/test_restrictions.py": {
        "restrictions_modal": {
            "name": "restrictions_modal",
            "location": 15,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "root": [
                    "Sequence[str]",
                    "bool"
                ],
                "injector": [
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "restriction_details_modal": {
            "name": "restriction_details_modal",
            "location": 21,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "root": [
                    "int",
                    "Container",
                    "Optional[str]",
                    "str"
                ],
                "injector": [
                    "int",
                    "Container",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "test_restrictions_screen_on_body.target": {
            "name": "target",
            "location": 52,
            "return": [],
            "arguments": {
                "item_": [
                    "List[str]"
                ]
            }
        }
    },
    "authark-master/tests/presentation/system/console/screens/roles/test_roles.py": {
        "roles_screen": {
            "name": "roles_screen",
            "location": 13,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "root": [
                    "Sequence[str]",
                    "bool"
                ],
                "injector": [
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "role_details_modal": {
            "name": "role_details_modal",
            "location": 19,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "root": [
                    "int",
                    "Container",
                    "Optional[str]",
                    "str"
                ],
                "injector": [
                    "int",
                    "Container",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "dominions_modal": {
            "name": "dominions_modal",
            "location": 25,
            "return": [
                "int",
                "bool",
                "str"
            ],
            "arguments": {
                "root": [
                    "Sequence[str]",
                    "bool"
                ],
                "injector": [
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "users_selection_modal": {
            "name": "users_selection_modal",
            "location": 30,
            "return": [
                "int",
                "Callable"
            ],
            "arguments": {
                "root": [
                    "bytes"
                ],
                "injector": [
                    "bytes"
                ]
            }
        },
        "test_roles_screen_on_body.target": {
            "name": "target",
            "location": 73,
            "return": [],
            "arguments": {
                "item_": []
            }
        },
        "test_dominions_modal_on_body.target": {
            "name": "target",
            "location": 148,
            "return": [],
            "arguments": {
                "item_": []
            }
        },
        "test_users_selection_modal_on_select.target": {
            "name": "target",
            "location": 207,
            "return": [],
            "arguments": {
                "item_": [
                    "int",
                    "T",
                    "Optional[Dict[str, Any]]",
                    "List[str]"
                ]
            }
        },
        "test_users_selection_modal_on_select.target.MockTarget.focus": {
            "name": "focus",
            "location": 212,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "authark-master/tests/presentation/system/console/screens/roles/__init__.py": {},
    "authark-master/tests/presentation/system/console/screens/users/test_credentials.py": {
        "credentials_modal": {
            "name": "credentials_modal",
            "location": 11,
            "return": [
                "bool",
                "asyncio.AbstractEventLoop",
                "int"
            ],
            "arguments": {
                "root": [
                    "Sequence[str]",
                    "bool"
                ],
                "injector": [
                    "Sequence[str]",
                    "bool"
                ]
            }
        }
    },
    "authark-master/tests/presentation/system/console/screens/users/test_rankings.py": {
        "rankings_modal": {
            "name": "rankings_modal",
            "location": 13,
            "return": [
                "bool",
                "asyncio.AbstractEventLoop",
                "int"
            ],
            "arguments": {
                "root": [
                    "Sequence[str]",
                    "bool"
                ],
                "injector": [
                    "Sequence[str]",
                    "bool"
                ]
            }
        },
        "role_selection_modal": {
            "name": "role_selection_modal",
            "location": 19,
            "return": [
                "int",
                "str"
            ],
            "arguments": {
                "root": [
                    "int",
                    "Container",
                    "Optional[str]",
                    "str"
                ],
                "injector": [
                    "int",
                    "Container",
                    "Optional[str]",
                    "str"
                ]
            }
        },
        "test_rankings_on_body.target": {
            "name": "target",
            "location": 68,
            "return": [],
            "arguments": {
                "item_": []
            }
        },
        "test_role_selection_modal_on_body.target": {
            "name": "target",
            "location": 110,
            "return": [],
            "arguments": {
                "item_": [
                    "List[str]"
                ]
            }
        },
        "test_rankings_on_body.target.MockTarget.focus": {
            "name": "focus",
            "location": 73,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "authark-master/tests/presentation/system/console/screens/users/test_users.py": {
        "users_screen": {
            "name": "users_screen",
            "location": 13,
            "return": [
                "authark.application.domain.repositories.RankingRepository",
                "authark.application.domain.repositories.DominionRepository"
            ],
            "arguments": {
                "root": [],
                "injector": []
            }
        },
        "user_details_modal": {
            "name": "user_details_modal",
            "location": 18,
            "return": [
                "str",
                "authark.application.domain.repositories.RankingRepository",
                "authark.application.domain.repositories.DominionRepository"
            ],
            "arguments": {
                "root": [
                    "bytes"
                ],
                "injector": [
                    "bytes"
                ]
            }
        },
        "test_users_screen_on_body.target": {
            "name": "target",
            "location": 36,
            "return": [],
            "arguments": {
                "item_": [
                    "List[str]"
                ]
            }
        },
        "test_users_screen_on_search.MockSearch.focus": {
            "name": "focus",
            "location": 72,
            "return": [
                ""
            ],
            "arguments": {
                "self": []
            }
        }
    },
    "authark-master/tests/presentation/system/console/screens/users/__init__.py": {},
    "authark-master/tests/presentation/system/shell/conftest.py": {
        "shell": {
            "name": "shell",
            "location": 9,
            "return": [
                "bool",
                "revlibs.connections.config.Config",
                "qutebrowser.config.config.Config"
            ],
            "arguments": {}
        }
    },
    "authark-master/tests/presentation/system/shell/test_scheduler.py": {
        "scheduler": {
            "name": "scheduler",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "test_scheduler_instantiation": {
            "name": "test_scheduler_instantiation",
            "location": 22,
            "return": [
                ""
            ],
            "arguments": {
                "scheduler": [
                    "Optional[Iterable[Any]]"
                ]
            }
        },
        "test_scheduler_run.MockScheduler.__init__": {
            "name": "__init__",
            "location": 30,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "queue": [
                    "int",
                    "bool",
                    "float"
                ]
            }
        },
        "test_scheduler_run.MockScheduler.register": {
            "name": "register",
            "location": 36,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "job": [
                    "int",
                    "str",
                    "T"
                ]
            }
        }
    },
    "authark-master/tests/presentation/system/shell/test_shell.py": {
        "test_shell_instantiation": {
            "name": "test_shell_instantiation",
            "location": 8,
            "return": [
                ""
            ],
            "arguments": {
                "shell": [
                    "Optional[str]",
                    "bytes",
                    "List[int]",
                    "str",
                    "bool"
                ]
            }
        },
        "test_shell_serve.MockRestApplication.__init__": {
            "name": "__init__",
            "location": 54,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "injector": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        },
        "test_shell_console.MockConsoleApplication.__init__": {
            "name": "__init__",
            "location": 90,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "config": [
                    "dict"
                ],
                "injector": [
                    "dict"
                ]
            }
        },
        "test_shell_work.MockScheduler.__init__": {
            "name": "__init__",
            "location": 136,
            "return": [],
            "arguments": {
                "self": [],
                "injector": []
            }
        },
        "test_shell_time.MockScheduler.__init__": {
            "name": "__init__",
            "location": 155,
            "return": [
                ""
            ],
            "arguments": {
                "self": [],
                "injector": [
                    "int",
                    "Dict[str, Any]",
                    "Union[str, int]",
                    "bool"
                ]
            }
        }
    },
    "authark-master/tests/presentation/system/shell/__init__.py": {},
    "authark-master/tests/presentation/system/shell/jobs/test_notify.py": {
        "factory": {
            "name": "factory",
            "location": 13,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {}
        },
        "injector": {
            "name": "injector",
            "location": 20,
            "return": [
                "int",
                "Callable",
                "str"
            ],
            "arguments": {
                "factory": [
                    "int",
                    "Callable",
                    "str"
                ]
            }
        },
        "test_notify_job_instantiation": {
            "name": "test_notify_job_instantiation",
            "location": 27,
            "return": [
                ""
            ],
            "arguments": {
                "injector": [
                    "str",
                    "float"
                ]
            }
        }
    },
    "authark-master/tests/presentation/system/shell/jobs/__init__.py": {}
}